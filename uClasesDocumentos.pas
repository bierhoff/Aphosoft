unit uClasesDocumentos;

interface

uses System.SysUtils, _uSQLDBX_DMObject, _uSQLDBXForID_DMObject, UClasesABM, UClasesABM2,_uFramework, uClases, _uConnectionObject, System.Classes,
     Vcl.Controls, Vcl.Menus, System.Math, Vcl.Dialogs, DBClient, DB, ExtCtrls, Winapi.Windows, Vcl.Graphics, messages, Vcl.Imaging.jpeg, Vcl.forms,
     System.StrUtils, Uni, Xml.XMLDoc, Xml.XMLIntf, System.DateUtils;

const
  _PrimerHora = ' 00:00:00';
  _UltimaHora = ' 23:59:59.99';

type
  TDocumento                               = class;
  TPedidoDeVenta                           = class;
  TPedidoDeVentaList                       = class;
  TPedidoDeVentaItem                       = class;
  TPedidoDeVentaItemList                   = class;
  TPedidoDeVentaStateLogList               = Class;
  TPedidoDeVentaItemStateLogList           = class;
  TPedidoDeVentaItemPrecioDeListaList      = class;
  TPresupuestoDeVenta                      = class;
  TPresupuestoDeVentaItem                  = class;
  TPresupuestoDeVentaItemList              = class;
  TPresupuestoDeVentaStateLogList          = class;
  TPresupuestoDeVentaItemPrecioDeListaList = class;
  THojaDeRutaPasoDeFabricacionList         = Class;
  THojaDeRutaStateLogList                  = Class;
  THojaDeRutaRuteoDefaultPasoList          = Class;
  TMotivoDeNoConforme                      = Class;
  THojaDeRutaList                          = Class;
  TCierreDeStockStateLogList               = class;
  TCierreDeStockItemList                   = Class;
  TAjusteDeStockStateLogList               = class;
  TAjusteDeStockItemList                   = Class;
  TDisposicionDeNoConforme                 = class;
  THojaDeRutaNoConformeList                = Class;
  THojaDeRutaRuteoDefaultFamiliaList       = Class;
  THojaDeRuta                              = Class;
  THojaDeRutaPasoDeFabricacion             = Class;
  TEstadoDeDeteccionNoConforme             = Class;
  TRemitoList                              = Class;
  TRemitoItemList                          = Class;
  TRemitoStateLogList                      = Class;
  TFacturaList                             = CLass;
  TFacturaItemList                         = Class;
  TFacturaStateLogList                     = Class;
  TFacturaImpuestoList                     = Class;
  TFacturaItemImpuestoList                 = Class;
  TFacturaAutorizacionAfipList             = Class;
  TFacturaItem                             = Class;
  TArchivoPerfilPermitidoList              = Class;
  THRPFContabilidadDeCostoList             = Class;
  TPackingList                             = Class;
  TPackingItemList                         = Class;
  TRemitoEstadoDeMigracionList             = Class;
  TPedidoDeVentaEstadoDeMigracionList      = Class;

TDocumento = class(TPDObject)
  private
    FNumero             : TEntero;
    FObservaciones      : TString;
    FTipoDeFormularioID : TObjectID;
    FTipoDeFormulario   : TPDObject;
    procedure SetNumero(Value: TEntero);
    function GetTipoDeFormulario: TTipoDeFormulario;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
  public
    function Grabar             : Boolean; virtual; abstract;
    property Numero             : TEntero read FNumero write SetNumero;
    property Observaciones      : TString read FObservaciones write FObservaciones;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario read GetTipoDeFormulario;
end;

TDocumentoList = class(TPDList)
  public
    constructor Create(PDClass: TPDClass; DMObject: TDMObject); overload;
    constructor CreateByID(_ID: TObjectID; _SoloActivos: Boolean = False); virtual;
    constructor CreateEmpty; virtual;
end;

TDocumentoLetrado = Class(TDocumento)
  private
    FNumeroFinal           : TString;
    FCAI                   : TString;
    FFechaDeVtoCAI         : TFecha;
    FFechaDeImpresion      : TFechaHora;
    FCentroDeFacturacionID : TObjectID;
    FCentroDeFacturacion   : TPDObject;
    FEsCambioDeEstado      : TBoolean;
    FIDSolicitudCAI        : TEntero;
    FVerificaCai           : TBoolean;
    function GetNumeroFinal: TString;
    procedure SetCentroDeFacturacionID(const Value: TObjectID);
    procedure SetTipodeFormularioID(const Value: TObjectID); overload;
    function GetCentroDeFacturacion: TCentroDeFacturacion;
    function GetCentroDeFacturacionID: TObjectID;
    function getVerificaCai: TBoolean;
  public
    procedure ValidateOnInsert; override;
    constructor Create; Override;
    property NumeroFinal           : TString read GetNumeroFinal;
    property CAI                   : TString read FCAI write FCAI;
    property FechaDeVtoCAI         : TFecha read FFechaDeVtoCAI write FFechaDeVtoCAI;
    property IDSolicitudCAI        : TEntero read FIDSolicitudCAI write FIDSolicitudCAI;
    property FechaDeImpresion      : TFechaHora read FFechaDeImpresion write FFechaDeImpresion;
    property CentroDeFacturacionID : TObjectID read GetCentroDeFacturacionID;
    property CentroDeFacturacion   : TCentroDeFacturacion read GetCentroDeFacturacion;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property EsCambioDeEstado      : TBoolean read FEsCambioDeEstado Write FEsCambioDeEstado;
    property VerificaCai: TBoolean read getVerificaCai write FVerificaCai;
End;

TDocumentoConStock = Class(TDocumento)
  private
    FDepositoDestino: TPDObject;
    FDepositoDestinoID: TObjectID;
    FDepositoOrigen: TPDObject;
    FDepositoOrigenID: TObjectID;
    FEstadoDestino: TPDObject;
    FEstadoDestinoID: TObjectID;
    FEstadoOrigen: TPDObject;
    FEstadoOrigenID: TObjectID;
    FTipoDeFormularioID: TObjectID;
    FTipoDeFormulario: TPDObject;
    function GetEstadoOrigen: TEstadoDeStock;
    procedure SetEstadoOrigenID(const Value: TObjectID);
    function GetEstadoDestino: TEstadoDeStock;
    procedure SetEstadoDestinoID(const Value: TObjectID);
    function GetDepositoOrigen: TDeposito;
    procedure SetDepositoOrigenID(const Value: TObjectID);
    function GetDepositoDestino: TDeposito;
    procedure SetDepositoDestinoID(const Value: TObjectID);
    procedure SetTipoDeFormularioID(const Value: TObjectID);
    function GetTipoDeFormulario: TTipoDeFormulario;
    function GetPieDeImpresionDocumento: String;
  public
    property EstadoOrigenID: TObjectID Read FestadoOrigenID write SetEstadoOrigenID;
    property EstadoOrigen: TEstadoDeStock read GetEstadoOrigen;
    property EstadoDestinoID: TObjectID Read FestadoDestinoID write SetEstadoDestinoID;
    property EstadoDestino: TEstadoDeStock read GetEstadoDestino;
    property DepositoOrigenID: TObjectID Read FdepositoOrigenID write SetDepositoOrigenID;
    property DepositoOrigen: TDeposito read GetDepositoOrigen;
    property DepositoDestinoID: TObjectID Read FdepositoDestinoID write SetDepositoDestinoID;
    property DepositoDestino: TDeposito read GetDepositoDestino;
    property TipoDeFormularioID: TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario: TTipoDeFormulario read GetTipoDeFormulario;
    property PieDeImpresion: String Read GetPieDeImpresionDocumento;
    function Save: Boolean; override;
End;

TDocumentoLetradoConStock = Class(TDocumentoConStock)
  private
    FLetra: TString;
    FNumeroFinal: TString;
    FCentroDeFacturacion: TString;
    FFechaDeImpresion: TDate;
    FCAI: TString;
    FFechaDeVtoCAI: TDate;
    FVerificaCai: TBoolean;
    function GetNumeroFinal: TString;
  public
    constructor Create; override;
    procedure ValidateOnInsert; override;
    property Letra: TString read FLetra write FLetra;
    property NumeroFinal: TString read GetNumeroFinal;
    property CAI: TString read FCAI write FCAI;
    property FechaDeVtoCAI: TDate read FFechaDeVtoCAI write FFechaDeVtoCAI;
    property FechaDeImpresion: TDate read FFechaDeImpresion write FFechaDeImpresion;
    property VerificaCai: TBoolean read FVerificaCai write FVerificaCai; // se asigna pero no se guarda
    property CentroDeFacturacion: TString Read FCentroDeFacturacion write FCentroDeFacturacion;
end;

TAjusteDeStock = class(TDocumentoConStock)
  private
    FItems                    : TAjusteDeStockItemList;
    fEstadoDeAjusteDeStockID  : TObjectID;
    fEstadodeAjusteDeStock    : TPDObject;
    FStateLogs                : TAjusteDeStockStateLogList;
    FEsAjusteDeMAteriasPrimas : TBoolean;
    FEsAjusteDeFabricados     : TBoolean;
    fUsuarioDeAltaID          : TObjectID;
    FUsuarioDeAlta            : TPDObject;
    FEsAjusteDeSemielaborados : TBoolean;
    function  getAjusteDeStockItemsList: TAjusteDeStockItemList;
    procedure SetEstadoDeAjusteDeStockID(const Value: TObjectID);
    function  GetEstadoDeAjusteDeStock: TEstadoDeAjusteDeStock;
    function GetStateLogs: TAjusteDeStockStateLogList;
    function GetFEchaAlta: TFecha;
    function GetUsuarioDeAlta: TUsuario;
    function GetUsuarioDeAltaID: TObjectID;
    procedure AgregarNuevoEstadoAlLog;
    function ObtenerEstadoID(_Cod : String) : TObjectID;
    procedure MoverStockDeItems (_EsAnulacion : Boolean = False);
  public
    constructor Create; override;
    Procedure ColocarEstado(_Cod : String; _MueveStock : Boolean );
    function Save : boolean; Override;
    function Grabar : Boolean; override;
    property Items : TAjusteDeStockItemList read getAjusteDeStockItemsList;
    property EstadodeAjustedeStockID  : TObjectID Read FEstadoDeAjusteDeStockID Write FEstadoDeAjusteDeStockID;
    property EstadoDeAjusteDeStock    : TEstadoDeAjusteDeStock read GetEstadoDeAjusteDeStock;
    property StateLogs                : TAjusteDeStockStateLogList read GetStateLogs;
    Property EsAjusteDeMateriasPrimas : TBoolean Read FEsAjusteDeMAteriasPrimas Write FEsAjusteDeMAteriasPrimas;
    Property EsAjusteDeFabricados     : TBoolean Read FEsAjusteDeFabricados Write FEsAjusteDeFabricados;
    Property EsAjusteDeSemielaborados : TBoolean Read FEsAjusteDeSemielaborados Write FEsAjusteDeSemielaborados;
    Property FechaAlta                : TFecha   Read GetFechaAlta;
    Property UsuarioDeAlta            : TUsuario Read GetUsuarioDeAlta;
    Property UsuarioDeAltaID          : TObjectID Read GetUsuarioDeAltaID  write fUsuarioDeAltaID;
end;

TAjusteDeStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    Const
      _Numero                   = 'Numero';
      _Observaciones            = 'Observaciones';
      _TipoDeFormularioID       = 'TipoDeFormularioID';
      _DepositoDestinoID        = 'DepositoDestinoID';
      _DepositoOrigenID         = 'DepositoOrigenID';
      _EstadoDestinoID          = 'EstadoDestinoID';
      _EstadoOrigenID           = 'EstadoOrigenID' ;
      _EstadoDeAjusteDeStockID  = 'EstadoDeAjusteDeStockID';
      _EsAjusteDeMAteriasPrimas = 'EsAjusteDeMAteriasPrimas';
      _EsAjusteDeFabricados     = 'EsAjusteDeFabricados';
      _EsAjusteDeSemielaborados = 'EsAjusteDeSemielaborados';
      _UsuarioDeAltaID          = 'UsuarioDeAltaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TAjusteDeStockList = class(TPDList)
  private
    function GetActual : TAjusteDeStock;
  public
    function CreateNewObject: TPDObject; override;
    property Actual : TAjusteDeStock read GetActual;
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateByEstadoAndTipo(_Est: TEstadoDeAjusteDeStock; _EsFabricado: Boolean; _EsMateriaPrima: Boolean; _EsSemielaborado: Boolean);
    constructor CreateByEstadosAndTipo(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsFabricado: Boolean; _EsMateriaPrima: Boolean; _EsSemielaborado: Boolean);
    constructor CreateByEstados (_Est : TEstadoDeAjusteDeStockList);
    constructor CreateMaximoNumero;
end;

{Ajuste de Stock Items}
TAjusteDeStockItem = class(TPDObject)
  private
    FajusteDeStockID : TObjectID;
    FajusteDeStock       : TPDObject;
    FproductoID          : TObjectID;
    Fproducto            : TPDObject;
    Fobservaciones       : TString;
    Fcantidad            : TReal;
    FItemNro             : TEntero;
    FPedidoDeVentaItemAsignadoID : TObjectID;
    FPedidoDeVentaItemAsignado   : TPDObject;
    FPedidoDeVentaAsignado       : TPDObject;
    FPedidoDeVentaAsignadoID     : TObjectID;
    FAsignado                    : TBoolean;
    FCantidadActualStock         : TReal;
    FDepositoDestinoID: TObjectID;
    FDepositoOrigenID: TObjectID;

    function Getproducto : TProducto;
    procedure SetproductoID(Value : TObjectID);
    procedure SetajusteDeStockID(Value : TObjectID);
    function GetajusteDeStock : TAjusteDeStock;
    procedure SetPedidoDeVentaItemAsignadoID(const Value: TObjectID);
    function GetPedidoDeVentaItemAsignado: TPedidoDeVentaItem;
    function GetPedidoDeVentaAsignadoID: TObjectID;
    function GetPedidoDeVentaAsignado: TPedidoDeVenta;
  public
    constructor Create; override;
    destructor Destroy; override;
    function Save : Boolean; Override;
    procedure SetAjusteDeStock(const Value: TAjusteDeStock); // para asignar el objeto del Padre
    property Cantidad                    : TReal read Fcantidad write Fcantidad;
    property Observaciones               : TString read Fobservaciones write Fobservaciones;
    property Producto                    : TProducto read Getproducto;
    property ProductoID                  : TObjectID read FproductoID write SetproductoID;
    property AjusteDeStockID             : TObjectID read FajusteDeStockID write SetajusteDeStockID;
    property AjusteDeStock               : TAjusteDeStock read GetajusteDeStock write SetAjusteDeStock;
    property ItemNro                     : TEntero read FItemNro write FItemNro;
    property PedidoDeVentaItemAsignadoID : TObjectID Read FPedidoDeVentaItemAsignadoID write SetPedidoDeVentaItemAsignadoID;
    property PedidoDeVentaItemAsignado   : TPedidoDeVentaItem Read GetPedidoDeVentaItemAsignado;
    property PedidoDeVentaAsignadoID     : TObjectID Read GetPedidoDeVentaAsignadoID;
    property PedidoDeVentaAsignado       : TPedidoDeVenta Read GetPedidoDeVentaAsignado;
    property DepositoOrigenID            : TObjectID Read FDepositoOrigenID write FDepositoOrigenID;
    property DepositoDestinoID           : TObjectID Read FDepositoDestinoID write FDepositoDestinoID;
    // temporal = asignar en el frame de ajuste de stock
    property Asignado                    : TBoolean Read FAsignado write FAsignado;
end;

TAjusteDeStockItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _ItemNro              ='Numero';
      _Cantidad             ='cantidad';
      _Observaciones        ='observaciones';
      _ProductoID           ='productoID';
      _AjusteDeStockID      ='ajusteDeStockID';
      _PedidoItemAsignadoID ='PedidoItemAsignadoID';
      _DepositoOrigenID     ='DepositoOrigenID';
      _DepositoDestinoID    ='DepositoDestinoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TAjusteDeStockItemList = class(TPDList)
  private
    function GetActual : TAjusteDeStockItem;
  public
    constructor CreateAll;
    constructor CreateByAjuste (_A : TAjusteDeStock);
    function CreateNewObject: TPDObject; override;
    Function FindProductoID ( _PID : TObjectID) : Boolean;
    Function FindPedidoDeVentaItemAsignadoID ( _PVIID : TObjectID) : Boolean;
    property Actual : TAjusteDeStockItem read GetActual;
end;

TajusteDeStockStateLog = class(TPDObject)
  private
    FajusteDeStockID : TObjectID;
    FfechaHora : TFechaHora;
    Fusuario : TPDObject;
    FusuarioID : TObjectID;
    FestadoDeAjusteDeStock : TPDObject;
    FestadoDeAjusteDeStockID : TObjectID;
    procedure SetestadoDeAjusteDeStockID(Value : TObjectID);
    function GetestadoDeAjusteDeStock : TEstadoDeAjusteDeStock;
    procedure SetusuarioID(Value : TObjectID);
    function Getusuario : TUsuario;
  public
    constructor Create; override;
    property estadoDeAjusteDeStockID : TObjectID read FestadoDeAjusteDeStockID write SetestadoDeAjusteDeStockID;
    property estadoDeAjusteDeStock : TEstadoDeAjusteDeStock read GetestadoDeAjusteDeStock;
    property usuarioID : TObjectID read FusuarioID write SetusuarioID;
    property usuario : TUsuario read Getusuario;
    property fechaHora : TFechaHora read FfechaHora write FfechaHora;
    property ajusteDeStockID : TObjectID read FajusteDeStockID write FajusteDeStockID;
end;

TajusteDeStockStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _EstadoDeAjusteDeStockID = 'EstadoDeAjusteDeStockID';
      _UsuarioID               = 'UsuarioID';
      _FechaHora               = 'FechaHora';
      _AjusteDeStockID         = 'AjusteDeStockID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TajusteDeStockStateLogList = class(TPDList)
  private
    function GetActual : TajusteDeStockStateLog;
  public
    constructor CreateAll;
    constructor CreateByAjusteDeStock(_A : TAjusteDeStock);
    function CreateNewObject: TPDObject; override;
    property Actual : TajusteDeStockStateLog read GetActual;
end;

TCierreDeStock = class(TDocumento)
  private
    FUsuarioAltaID : TObjectID;
    FItems       : TCierreDeStockItemList;
    FEstadoDeCierreDeStock: TPDObject;
    FEstadoDeCierreDeStockID: TObjectID;
    FStateLogs   : TCierreDeStockStateLogList;
    FUsuarioAlta :  TPDObject;
    FFechaHoraAlta : TDatetime;
    FFechaHasta  : TDatetime;
    function GetCierreDeStockItem: TCierreDeStockItemList;
    function GetFechaHoraAlta: TDatetime;
    function GetEstadoDeCierreDeStock: TEstadoDeCierreDeStock;
    function GetStateLogs: TCierreDeStockStateLogList;
    procedure AgregarNuevoEstadoAlLog;
    function GetUsuarioAlta: TUsuario;
  public
    class function ObtenerEstadoID(_CodigoDeEstadoSolicitado: String): TObjectID; static;
    Procedure ColocarEstado(_Cod : String);
    constructor Create; override;
    class procedure AutomatizarItems(_CS : TCierreDeStock ; _Deposito : TDeposito);
    function Grabar : Boolean; override;
    property UsuarioAltaID           : TObjectID read fUsuarioAltaID write fUsuarioAltaID;
    property UsuarioAlta             : TUsuario read GetUsuarioAlta;
    property EstadoDeCierreDeStockID : TObjectID read FEstadoDeCierreDeStockID write FEstadoDeCierreDeStockID;
    property EstadoDeCierreDeStock   : TEstadoDeCierreDeStock read GetEstadoDeCierreDeStock;
    property FechaHasta              : TDatetime read FFechaHasta write FFechaHasta;
    property FechaHoraAlta           : TDatetime read GetFechaHoraAlta;
    property StateLogs               : TCierreDeStockStateLogList read GetStateLogs;
    property Items : TCierreDeStockItemList Read GetCierreDeStockItem;
end;

TCierreDeStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    Const
      _Numero                  = 'Numero';
      _Observaciones           = 'Observaciones';
      _UsuarioAltaID           = 'UsuarioAltaID';
      _EstadoDeCierreDeStockID = 'EstadoDeCierreDeStockID';
      _FechaHasta              = 'FechaHasta';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCierreDeStockList = class(TPDList)
  private
    function GetActual : TCierreDeStock;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateByFecha(_Fecha : TDate);
    constructor CreateMaximoNumero;
    constructor CreateByEstados (_Est: TOrganizacionDeMonitorEstadoPermitidoList);
    function CreateNewObject: TPDObject; override;
    property Actual : TCierreDeStock read GetActual;
end;

TCierreDeStockItem = class(TPDObject)
  private
    FCierreDeStockID  : TObjectID;
    FCierreDeStock    : TPDObject;
    FUsuarioID        : TObjectID;
    FUsuario          : TPDObject;
    FProductoID       : TObjectID;
    FProducto         : TPDObject;
    FDepositoID       : TObjectID;
    FDeposito         : TPDObject;
    FEstadoDeStockID  : TObjectID;
    FEstadoDeStock    : TPDObject;
    FCantidad         : TReal;
    FPedidoDeVentaItemAsignadoID: TObjectID;
    function  GetEstadoDeStock : TEstadoDeStock;
    procedure SetEstadoDeStockID(Value : TObjectID);
    function  GetProducto : TProducto;
    procedure SetProductoID(Value : TObjectID);
    procedure SetCierreDeStockID(Value : TObjectID);
    function  GetCierreDeStock: TCierreDeStock;
    function GetDeposito: TDeposito;
    procedure SetDepositoID(const Value: TObjectID);
  public
    constructor Create; override;
    property Cantidad        : TReal read FCantidad write FCantidad;
    property EstadoDeStock   : TEstadoDeStock read GetEstadoDeStock;
    property EstadoDeStockID : TObjectID read FEstadoDeStockID write SetEstadoDeStockID;
    property Deposito        : TDeposito read GetDeposito;
    property DepositoID      : TObjectID read FDepositoID write SetDepositoID;
    property Producto        : TProducto read GetProducto;
    property ProductoID      : TObjectID read FProductoID write SetProductoID;
    property CierreDeStockID : TObjectID read FCierreDeStockID write SetCierreDeStockID;
    property CierreDeStock   : TCierreDeStock read GetCierreDeStock;
    property PedidoDeVentaItemAsignadoID : TObjectID read FPedidoDeVentaItemAsignadoID write FPedidoDeVentaItemAsignadoID;
end;

TCierreDeStockItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    Const
      _Cantidad                = 'Cantidad';
      _EstadoDeStockID         = 'EstadoDeStockID';
      _DepositoID              = 'DepositoID';
      _ProductoID              = 'ProductoID';
      _CierreDeStockID         = 'CierreDeStockID';
      _PedidoDeVentaItemAsignadoID = 'PedidoDeVentaItemAsignadoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCierreDeStockItemList = class(TPDList)
  private
    function GetActual : TCierreDeStockItem;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateByCierreDeStock (_CS : TCierreDeStock);
    function CreateNewObject: TPDObject; override;
    property Actual : TCierreDeStockItem read GetActual;
end;

TCierreDeStockStateLog = class(TPDObject)
  private
    FCierreDeStockID         : TObjectID;
    FFechaHora               : TFechaHora;
    FUsuario                 : TPDObject;
    FUsuarioID               : TObjectID;
    FEstadoDeCierreDeStock   : TPDObject;
    FEstadoDeCierreDeStockID : TObjectID;
    procedure SetEstadoDeCierreDeStockID(Value : TObjectID);
    function GetEstadoDeCierreDeStock : TEstadoDeCierreDeStock;
    procedure SetUsuarioID(Value : TObjectID);
    function GetUsuario : TUsuario;
  public
    constructor Create; override;
    property CierreDeStockID : TObjectID read FCierreDeStockID write FCierreDeStockID;
    property EstadoDeCierreDeStockID : TObjectID read FEstadoDeCierreDeStockID write SetEstadoDeCierreDeStockID;
    property EstadoDeCierreDeStock : TEstadoDeCierreDeStock read GetEstadoDeCierreDeStock;
    property UsuarioID : TObjectID read FusuarioID write SetusuarioID;
    property Usuario : TUsuario read Getusuario;
    property FechaHora : TFechaHora read FfechaHora write FfechaHora;
end;

TCierreDeStockStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _CierreDeStockID         = 'CierreDeStockID';
      _EstadoDeCierreDeStockID = 'EstadoDeCierreDeStockID';
      _UsuarioID               = 'UsuarioID';
      _FechaHora               = 'FechaHora';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCierreDeStockStateLogList = class(TPDList)
  private
    function GetActual : TCierreDeStockStateLog;
  public
    constructor CreateAll;
    constructor CreateByCierreDeStock(_C : TCierreDeStock);
    function CreateNewObject: TPDObject; override;
    property Actual : TCierreDeStockStateLog read GetActual;
end;

TPedidoDeVenta = class(TDocumentoLetrado)
  private
    FMonedaID: TObjectID;
    FMarcaID: TObjectID;
    FGrupoDeVendedorID: TObjectID;
    FEmpresaFleteID: TObjectID;
    FCondicionDeVentaID: TObjectID;
    FClienteID: TObjectID;
    FTipoDePedidoDeVentaID: TObjectID;
    FTipoDePedidoDeVenta: TPDObject;
    FFechaReal: TFecha;
    FPorcentajeComisionPorFacturacion: TReal;
    FPorcentajeComisionPorCobranza: TReal;
    FMonedaCotizacion: TReal;
    FNroOrdenDeCompraCliente: TString;
    FDireccionDeEntregaID: TObjectID;
    FDireccionDeEntrega: TPDObject;
    FMoneda: TPDObject;
    FMarca: TPDObject;
    FGrupoDeVendedor: TPDObject;
    FEmpresaFlete: TPDObject;
    FCondicionDeVenta: TPDObject;
    FCliente: TPDObject;
    FObservacionesParaFabrica: TString;
    FObservaciondeEstado: TString;
    FItems: TPedidoDeVentaItemList;
    FImporteNetoDelPedido: TReal;
    FImporteNetoDelPedidoPrecioDeLista: TReal;
    FImporteDelPedidoConIVA: TReal;
    FEstadoDePedidoDeVentaID: TObjectID;
    FEstadoDePedidoDeVenta: TPDObject;
    FStateLogs: TPedidoDeVentaStateLogList;
    FEstadoNuevoID: TObjectID;
    FEstadoNuevoCodigo: TString;
    FestadoNuevo: TString;
    FDescuentoEspecial: TReal;
    FPorcentajeDeTolerancia: TReal;
    FEntregaTotal: TBoolean;
    FesImportacionDeDatos: TBoolean;
    FPresupuestoDeVentaID: TObjectID;
    FPresupuestoDeVenta: TPDObject;
    FtmpNoCobrarCostoCunioNuevo: TBoolean;
    FtmpInsertarItemCostoCunioNuevo: TBoolean;
    FtmpProrratearCostoCunioNuevo: TBoolean;
    FtmpCostoCunioNuevo: TReal;
    FtmpCostoDeMatriceria: TPedidoDeVentaItem;
    FtmpCostoDeMatriceriaCodigoCunio: TString;
    FEstadoOriginalID: TObjectID;
    FFechaDeAlta: TFecha;
    FUsuarioDeAlta: TPDObject;

    FEsModificacion: Boolean;
    FEstadoDePedidoNuevoID: TObjectID;
    FClienteTribecaID: TObjectID;
    FClienteTribeca: TPDObject;
    FGrupoVendedorTribeca: TPDObject;
    FGrupoVendedorTribecaID: TObjectID;
    FEsNuevo: Boolean;
    FIncotermID: TObjectID;
    FIncoterm: TPDObject;
    fCambiarEstadoEnEdicion: Boolean;
    FNumeroSifab: TEntero;
    FEmpresaApholos: TEmpresa;
    fMailPendiente: Boolean;
    FFechaPrimerFactura: TFecha;
    FFechaUltimaFactura: TFecha;
    FCondicionDeVentaDetalleID: TObjectID;
    FCondicionDeVentaDetalle: TPDObject;
    FListaDePrecioID: TObjectID;
    FListaDePrecio: TPDObject;
    // del create compuesto
    fCCMonedaDescripcion: TString;
    fCCClienteTribecaCodigo: TString;
    fCCTransportistaCodigo: TString;
    fCCClienteCodigo: TString;
    fCCEstadoDePedidoDeVentaCodigo: TString;
    fCCTipoDePedidoDescripcion: TString;
    fCCCondicionDeVenta: TString;
    fCCMonedaCodigo: TString;
    fCCRankingCrediticio: TString;
    fCCClienteTribecaDescripcion: TString;
    fCCGrupoDeVendedorDescripcion: TString;
    fCCTransportistaDescripcion: TString;
    fCCTipoDePedidoCodigo: TString;
    fCCClienteDescripcion: TString;
    fCCEstadoDePedidoDeVentaDescripcion: TString;
    fCCPresupuestoDeVentaNumero: TEntero;
    fCCDireccionDeEntrega: TString;
    fCCUsuarioDeAlta: TString;
    FComentarios: TComentarioList;
    FEstadoDePedidoNuevo: TPDObject;
    FDebeCambiarEstadoAItems: TBoolean;
    fProformaPendiente: Boolean;
    FEsTaller: TBoolean;
    FFechaDeEstadoDePedidoDeVenta: TFechaHora;
    FFechaEnvioProforma: TFechaHora;
    FCCGrupoDeVendedorTribeca: TString;
    FObservacionDeEstadoNuevo: TString;
    FUsuarioDeAltaID: TObjectID;
    FCCClienteCategoriaDeClienteID: TObjectID;
    FCCClienteCategoriaDeClienteDescripcion: TString;
    FDolarCotizacion: TReal;
    FFechaHoraListoExpedicion: TFechaHora;
    FCCTipoDePedidoSeProduceParaStock: TString;
    FPasaPorCalidad: TBoolean;
    FCCNivelDeServicioDeCliente: TString;
    FCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    FCCNivelDeServicioDeClientePonderacion: TReal;
    FCCFechaDePasoAEstadoActual: TFecha;
    FFechaEnvioMail: TFechaHora;
    FFechaCancelacionEnvioMail: TFechaHora;
    FImporteTotalDelPedidoConIVA: TReal;
    FPendienteDeFacturar: TBoolean;
    FItemsRemitibles: TPedidoDeVentaItemList;
    FItemsNoRemitiblesFacturables: TPedidoDeVentaItemList;
    FTipoDeFormularioFacturacionID: TObjectID;
    FTipoDeFormularioFacturacion: TPDObject;
    FCCClienteCondiciondeIVAID: TObjectID;
    FEsExclusivoServicios: TBoolean;
    FCCTipoDePedidoResta: TString;
    FSeFacturaSinRemito: TBoolean;
    FElPedidoEstaEnSifab: TBoolean;
    FBloqueadoPorFaltadePrecioDeLista: TBoolean;
    FIDTeamplace: TEntero;
    FEstadosDeMigracion: TPedidoDeVentaEstadoDeMigracionList;
    FBloqueadoPorPrecioNoAutorizado: TBoolean;
    FItemsBloqueadosPorPrecioNoAutorizado: TPedidoDeVentaItemList;
    FEsParaKit: TBoolean;
    FCantidadDeKitsPedidos: TEntero;
    FUnidadesPorKit: TEntero;
    FEsAsignacionDeNumeracion: TBoolean;
    FCCGrupoDeVendedorCodigo: TString;
    FCCGrupoDeVendedorTribecaCodigo: TString;
    function GetCliente: TCliente;
    procedure SetClienteID(Value: TObjectID);
    function GetCondicionDeVenta: TCondicionDeVenta;
    procedure SetCondicionDeVentaID(Value: TObjectID);
    function GetEmpresaFlete: TEmpresa;
    procedure SetEmpresaFleteID(Value: TObjectID);
    function GetGrupoDeVendedor: TGrupoDeVendedor;
    procedure SetGrupoDeVendedorID(Value: TObjectID);
    function GetMarca: TMarca;
    procedure SetMarcaID(Value: TObjectID);
    function GetMoneda: TMoneda;
    procedure SetMonedaID(Value: TObjectID);
    function getTipoDeFormulario: TTipoDeFormulario;
    procedure SetTipoDeFormularioID(Value: TObjectID);
    function getDireccionDeEntrega: TDeposito;
    procedure SetDireccionDeEntregaID(const Value: TObjectID);
    function GetItems: TPedidoDeVentaItemList;
    function GetItemsRemitibles: TPedidoDeVentaItemList;
    function GetItemsNoRemitiblesFacturables: TPedidoDeVentaItemList;
    function GetItemsNoRemitiblesFactPendientes: TPedidoDeVentaItemList;
    procedure SetFechaReal(const Value: TFecha);
    procedure ValidarNumeroDePedidoDuplicado(_NumeroDePedido: Integer; _ID: TObjectID; _CF: TCentroDeFacturacion);
    procedure validarPedidoExportacion;
    procedure validarPedidoTribeca;
    function GetEstadoDePedidoDeVenta: TEstadoDePedidoDeVenta;
    procedure SetEstadoDePedidoDeVentaID(const Value: TObjectID);
    procedure SetImporteNetoDelPedido(const Value: TReal);
    procedure SetImporteNetoDelPedidoPrecioDeLista(const Value: TReal);
    procedure SetImporteDelPedidoConIVA(const Value: TReal);

    function GetStateLogs: TPedidoDeVentaStateLogList;
    procedure SetEstadoNuevoID(const Value: TObjectID);
    function GetObservaciondeEstado: TString;
    function GetItemsActualizados: TPedidoDeVentaItemList;
    procedure SetPorcentajeDeTolerancia(const Value: TReal);
    function GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
    procedure SetTipoDePedidoDeVentaID(const Value: TObjectID);
    function getPresupuestoDeVenta: TPresupuestoDeVenta;
    procedure SetPresupuestoDeVentaID(const Value: TObjectID);
    function GetUsuarioDeAlta: TUsuario;
    Procedure agregarItemConCostoDeMatriceria(_CostoDeMatriceria: TReal);
    procedure SetNumero(const Value: TEntero);
    function GetClienteTribeca: TCliente;
    procedure SetClienteTribecaID(const Value: TObjectID);
    procedure SetGrupoVendedorTribecaID(const Value: TObjectID);
    function GetGrupoVendedorTribeca: TGrupoDeVendedor;
    function GetIncoterm: TIncoterm;
    procedure SetIncotermID(const Value: TObjectID);
    procedure AsignoNumeroDePedidoDeVenta;
    function GetNumeroSifab: TEntero;
    function getEmpresaApholos: TEmpresa;
    function GetFechaPrimerFactura: TFecha;
    function GetFechaUltimaFactura: TFecha;
    procedure SetCondicionDeVentaDetalleID(const Value: TObjectID);
    function GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
    function GetListaDePrecio: TListaDePrecio;
    procedure SetListaDePrecioID(const Value: TObjectID);
    function GetComentarios: TComentarioList;
    function GetEstadoDePedidoNuevo: TEstadoDePedidoDeVenta;
    procedure SetEstadoDePedidoNuevoID(const Value: TObjectID);
    function GetEsTaller: TBoolean;
    function GetFechaDeEstadoDePedidoDeVenta: TFechaHora;
    function GetFechaDeAlta: TFecha;
    function GetUsuarioDeAltaID: TObjectID;
    function GetEstadoDePedidoDeVentaID: TObjectID;
    function GetCCClienteCategoriaDeClienteDescripcion: TString;
    function GetCCClienteCategoriaDeClienteID: TObjectID;
    function GetDolarCotizacion: TReal;
    function GetCCMonedaCodigo: TString;
    function GetCCMonedaDescripcion: TString;
    function GetCCCondicionDeVenta: TString;
    function GetCCClienteTribecaCodigo: TString;
    function GetCCClienteTribecaDescripcion: TString;
    function GetCCDireccionDeEntrega: TString;
    function GetCCEstadoDePedidoDeVentaCodigo: TString;
    function GetCCEstadoDePedidoDeVentaDescripcion: TString;
    function GetCCGrupoDeVendedorDescripcion: TString;
    function GetCCGrupoDeVendedorTribeca: TString;
    function GetCCRankingCrediticio: TString;
    function GetCCTipoDePedidoCodigo: TString;
    function GetCCTipoDePedidoDescripcion: TString;
    function GetCCTransportistaCodigo: TString;
    function GetCCTransportistaDescripcion: TString;
    function GetCCClienteCodigo: TString;
    function GetCCClienteDescripcion: TString;
    function GetFechaHoraListoExpedicion: TFechaHora;
    function GetCCTipoDePedidoSeProduceParaStock: TString;
    function GetCCTipoDePedidoResta: TString;
    function GetCCNivelDeServicioDeCliente: TString;
    function GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    function GetCCNivelDeServicioDeClientePonderacion: TReal;
    function GetImporteNetoDelPedidoPrecioDeLista: TReal;
    function GetCCFechaDePasoAEstadoActual: TFecha;
    function GetImporteDelPedidoConIVA: TReal;
    procedure SetTipoDeFormularioFacturacionID(const Value: TObjectID);
    function GetTipoDeFormularioFacturacion: TTipoDeFormulario;
    function GetCCClienteCondiciondeIVAID: TObjectID;
    procedure AsignarEsExclusivoServicios;
    function ObtenerEstadoGrabadoID: TObjectID;
    function GetElPedidoEstaEnSifab: TBoolean;
    function GetBloqueadoPorFaltadePrecioDeLista: TBoolean;
    function GetBloqueadoPorPrecioNoAutorizado: TBoolean;
    function GetIDTeamplace: TEntero;
    function GetEstadosDeMigracion: TPedidoDeVentaEstadoDeMigracionList;
    function GetItemsBloqueadosPorPrecioNoAutorizado: TPedidoDeVentaItemList;
    function GetUnidadesPorKit: TEntero;
    function GetCCGrupoDeVendedorCodigo: TString;
    function GetCCGrupoDeVendedorTribecaCodigo: TString;

  public
    constructor Create; override;
    destructor Destroy; Override;
    Procedure FreeObjectFromMemory;
    procedure Delete; Override;
    Procedure DeleteItems;
    Procedure LimpiarItemsDeMemoria;

    Function Grabar: Boolean; override;
    Function Save: Boolean; override;

    Function Reporte(_esParaMail: Boolean = False; _TipoDeFormulario: TTipoDeFormulario = Nil ): String;
    Class Procedure ActualizarEstados( _P   : TPedidoDeVenta     ; _MuestraDialog : Boolean = False);overload;
    Class Procedure ActualizarEstados( _PVL : TPedidoDeVentaList ; _MuestraDialog : Boolean = False);overload;
    procedure CalcularImporteNetoDelPedido; // incluye ImporteNetoDelPedidoPrecioDeLista
    procedure CalcularImporteNetoDelPedidoPrecioDeLista;
    Procedure ColocarEstadoCorrespondiente;
    Procedure ColocarEstadoBorrador;
    Procedure ColocarEstadoGrabado;
    Procedure ColocarEstado;
    procedure AgregarNuevoEstadoAlLog;
    Function CambiarEstadoAItems(_EstadoDestino: String; _ObservacionDeEstado: String): Boolean;
    Function TieneHojasDeRutaEnFabricacion: Boolean;
    Function TieneHojasDeRutaActivas: Boolean;
    procedure ValidateOnInsert; override;
    procedure ValidateOnUpdate; override;
    procedure ValidarCantidadKits;
    // Envio de mails
    procedure AgregarContactosDeEmpresa(var _Mail: Tmail;_TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string );
    procedure AgregarUsuarioDeCarga(var _Mail: Tmail;_TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string);
    procedure AgregarVendedor(var _Mail: Tmail;_TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string);
    procedure AgregarDireccion(_Direccion: string; var _Mail: Tmail);
    procedure AsignarAsuntoYMensaje(var _Mail: Tmail;_TipoDeFormulario: TTipoDeFormulario);
    function PrepararyEnviarMailHtml(_TipoDeFormulario: TTipoDeFormulario = nil; _TipoDeMail: String= 'PEDIDO' ): Boolean;
    function PrepararyEnviarMail(_FileName: String; _TipoDeMail: String= 'PEDIDO'): Boolean;
//    function PrepararyEnviarProforma(_FileName: String; _TipoDeFormulario: TTipoDeFormulario): Boolean;
    // Envio de mails
//    Procedure GuardarEnSistemaTribeca(_P: TPedidoDeVenta);
//    Procedure GuardarItemsEnTribeca(_P: TPedidoDeVenta);
//    Procedure GuardarEnSifab(_P: TPedidoDeVenta; _Empresa: String; _Estado: Integer);
//    Procedure GuardarItemsEnSifab(_P: TPedidoDeVenta; _Empresa: String; _Estado: Integer);
    property NumeroFinal                            : TString Read GetNumeroFinal;
    property Cliente                                : TCliente read GetCliente;
    property ClienteID                              : TObjectID read FClienteID write SetClienteID;
    property CondicionDeVenta                       : TCondicionDeVenta read GetCondicionDeVenta;
    property CondicionDeVentaID                     : TObjectID read FCondicionDeVentaID write SetCondicionDeVentaID;
    property CondicionDeVentaDetalleID              : TObjectID read FCondicionDeVentaDetalleID write SetCondicionDeVentaDetalleID;
    property CondicionDeVentaDetalle                : TCondicionDeVentaDetalle read GetCondicionDeVentaDetalle;
    property FechaReal                              : TFecha read FFechaReal write SetFechaReal;
    property EmpresaFlete                           : TEmpresa read GetEmpresaFlete;
    property EmpresaFleteID                         : TObjectID read FEmpresaFleteID write SetEmpresaFleteID;
    property GrupoDeVendedor                        : TGrupoDeVendedor read GetGrupoDeVendedor;
    property GrupoDeVendedorID                      : TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property EsTaller                               : TBoolean read GetEsTaller ;
    property DireccionDeEntregaID                   : TObjectID read FDireccionDeEntregaID write SetDireccionDeEntregaID;
    property DireccionDeEntrega                     : TDeposito read getDireccionDeEntrega;
    property Marca                                  : TMarca read GetMarca;
    property MarcaID                                : TObjectID read FMarcaID write SetMarcaID;
    property Moneda                                 : TMoneda read GetMoneda;
    property MonedaID                               : TObjectID read FMonedaID write SetMonedaID;
    property Incoterm                               : TIncoterm read GetIncoterm;
    property IncotermID                             : TObjectID read FIncotermID write SetIncotermID;
    property MonedaCotizacion                       : TReal read FMonedaCotizacion write FMonedaCotizacion;
    property DolarCotizacion                        : TReal read GetDolarCotizacion write FDolarCotizacion;
    property NroOrdenDeCompraCliente                : TString read FNroOrdenDeCompraCliente write FNroOrdenDeCompraCliente;
    property PorcentajeComisionPorCobranza          : TReal read FPorcentajeComisionPorCobranza write FPorcentajeComisionPorCobranza;
    property PorcentajeComisionPorFacturacion       : TReal read FPorcentajeComisionPorFacturacion write FPorcentajeComisionPorFacturacion;
    property TipoDeFormulario                       : TTipoDeFormulario read getTipoDeFormulario;
    property TipoDeFormularioID                     : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDePedidoDeVenta                    : TTipoDePedidoDeVenta read GetTipoDePedidoDeVenta;
    property TipoDePedidoDeVentaID                  : TObjectID read FTipoDePedidoDeVentaID write SetTipoDePedidoDeVentaID;
    property ObservacionesParaFabrica               : TString read FObservacionesParaFabrica write FObservacionesParaFabrica;
    property Items                                  : TPedidoDeVentaItemList read GetItems;
    property ItemsRemitibles                        : TPedidoDeVentaItemList read GetItemsRemitibles;
    property ItemsNoRemitiblesFacturables           : TPedidoDeVentaItemList read GetItemsNoRemitiblesFacturables;
    property ItemsNoRemitiblesFactPendientes        : TPedidoDeVentaItemList read GetItemsNoRemitiblesFactPendientes;
    property ItemsBloqueadosPorPrecioNoAutorizado   : TPedidoDeVentaItemList read GetItemsBloqueadosPorPrecioNoAutorizado;
    property ImporteNetoDelPedido                   : TReal read FImporteNetoDelPedido write SetImporteNetoDelPedido;
    property ImporteDelPedidoConIVA                 : TReal read GetImporteDelPedidoConIVA;
    property ImporteNetoDelPedidoPrecioDeLista      : TReal read GetImporteNetoDelPedidoPrecioDeLista write SetImporteNetoDelPedidoPrecioDeLista;
    property EstadoDePedidoDeVenta                  : TEstadoDePedidoDeVenta read GetEstadoDePedidoDeVenta;
    property EstadoDePedidoDeVentaID                : TObjectID Read GetEstadoDePedidoDeVentaID Write SetEstadoDePedidoDeVentaID;
    property FechaDeEstadoDePedidoDeVenta           : TFechaHora Read GetFechaDeEstadoDePedidoDeVenta Write FFechaDeEstadoDePedidoDeVenta;
    property MailPendiente                          : Boolean Read fMailPendiente write fMailPendiente;
    property FechaEnvioMail                         : TFechaHora Read FFechaEnvioMail Write FFechaEnvioMail;
    property FechaCancelacionEnvioMail              : TFechaHora Read FFechaCancelacionEnvioMail Write FFechaCancelacionEnvioMail;
    property ProformaPendiente                      : Boolean Read fProformaPendiente write FProformaPendiente;
    property FechaEnvioProforma                     : TFechaHora Read FFechaEnvioProforma Write FFechaEnvioProforma;
    property StateLogs                              : TPedidoDeVentaStateLogList read GetStateLogs;
    property UsuarioDeAlta                          : TUsuario read GetUsuarioDeAlta;
    property UsuarioDeAltaID                        : TObjectID read GetUsuarioDeAltaID write FUsuarioDeAltaID;
    property FechaDeAlta                            : TFecha read GetFechaDeAlta write FFechaDeAlta;
    property ClienteTribecaID                       : TObjectID Read FClienteTribecaID write SetClienteTribecaID;
    property ClienteTribeca                         : TCliente Read GetClienteTribeca;
    property GrupoVendedorTribecaID                 : TObjectID Read FGrupoVendedorTribecaID write SetGrupoVendedorTribecaID;
    property GrupoVendedorTribeca                   : TGrupoDeVendedor Read GetGrupoVendedorTribeca;
    property DescuentoEspecial                      : TReal read FDescuentoEspecial write FDescuentoEspecial;
    property PresupuestoDeVentaID                   : TObjectID read FPresupuestoDeVentaID write SetPresupuestoDeVentaID;
    property PresupuestoDeVenta                     : TPresupuestoDeVenta read getPresupuestoDeVenta;
    property ListaDePrecioID                        : TObjectID read FListaDePrecioID Write SetListaDePrecioID;
    property ListaDePrecio                          : TListaDePrecio read GetListaDePrecio;
    property Comentarios                            : TComentarioList Read GetComentarios;
    property PendienteDeFacturar                    : TBoolean read FPendienteDeFacturar write FPendienteDeFacturar; // le debo asignar True cuando todos los items son pendientes de facturar
    property EsExclusivoServicios                   : TBoolean read FEsExclusivoServicios write FEsExclusivoServicios;
    property SeFacturaSinRemito                     : TBoolean read FSeFacturaSinRemito write FSeFacturaSinRemito;
    property EsParaKit                              : TBoolean read FEsParaKit write FEsParaKit;
    property UnidadesPorKit                         : TEntero read GetUnidadesPorKit ; // si alguna vez se llegara a cambiar esta cantidad en el form por el usuario sacar el getter y listo
    property CantidadDeKitsPedidos                  : TEntero read FCantidadDeKitsPedidos write FCantidadDeKitsPedidos;
    // propiedades temporales para calcular el costo de matricería del cuño
    property TmpProrratearCostoCunioNuevo           : TBoolean read FtmpProrratearCostoCunioNuevo write FtmpProrratearCostoCunioNuevo;
    property TmpInsertarItemCostoCunioNuevo         : TBoolean read FtmpInsertarItemCostoCunioNuevo write FtmpInsertarItemCostoCunioNuevo;
    property TmpNoCobrarCostoCunioNuevo             : TBoolean read FtmpNoCobrarCostoCunioNuevo write FtmpNoCobrarCostoCunioNuevo;
    property TmpCostoMatriceria                     : TPedidoDeVentaItem read FtmpCostoDeMatriceria write FtmpCostoDeMatriceria;
    property TmpCostoCunioNuevo                     : TReal read FtmpCostoCunioNuevo write FtmpCostoCunioNuevo;
    property TmpCostoDeMatriceriaCodigoCunio        : TString read FtmpCostoDeMatriceriaCodigoCunio write FtmpCostoDeMatriceriaCodigoCunio;
    property ObservacionDeEstadoNuevo               : TString read FObservacionDeEstadoNuevo write FObservacionDeEstadoNuevo;
    // Propertys temporales
    property TipoDeFormularioFacturacion : TTipoDeFormulario read GetTipoDeFormularioFacturacion;
    property TipoDeFormularioFacturacionID : TObjectID read FTipoDeFormularioFacturacionID write SetTipoDeFormularioFacturacionID;
    // Propertys temporales
    property EmpresaApholos                         : TEmpresa read getEmpresaApholos;
    // esto es en el alta de pedido elegir 'Borrador' o 'Guardado'
    property EstadoDePedidoNuevoID                  : TObjectID Read FEstadoDePedidoNuevoID Write SetEstadoDePedidoNuevoID;
    property EstadoDePedidoNuevo                    : TEstadoDePedidoDeVenta Read GetEstadoDePedidoNuevo;
    property EsModificacion                         : Boolean read FEsModificacion write FEsModificacion;
    property EsNuevo                                : Boolean read FEsNuevo write FEsNuevo;
    property CambiarEstadoEnEdicion                 : Boolean read fCambiarEstadoEnEdicion write fCambiarEstadoEnEdicion;
    property EstadoNuevoID                          : TObjectID Read FEstadoNuevoID Write SetEstadoNuevoID;
    property EstadoOriginalID                       : TObjectID Read FEstadoOriginalID;
    property EstadoNuevoCodigo                      : TString read FEstadoNuevoCodigo Write FEstadoNuevoCodigo;
    property EstadoNuevo                            : TString read FestadoNuevo Write FestadoNuevo;
    property ObservacionDeEstado                    : TString read GetObservaciondeEstado;
    property EntregaTotal                           : TBoolean read FEntregaTotal write FEntregaTotal;
    property PorcentajeDeTolerancia                 : TReal read FPorcentajeDeTolerancia write SetPorcentajeDeTolerancia;
    property DebeCambiarEstadoAItems                : TBoolean read FDebeCambiarEstadoAItems write FDebeCambiarEstadoAItems;
    property EsImportacionDeDatos                   : TBoolean read FesImportacionDeDatos write FesImportacionDeDatos; // esto se setea en forma manual para no asignar numero de pedido automático
    property EsAsignacionDeNumeracion               : TBoolean read FEsAsignacionDeNumeracion write FEsAsignacionDeNumeracion;
    property PasaPorCalidad                         : TBoolean read FPasaPorCalidad write FPasaPorCalidad;

    Class Function ObtenerFechaFactura( _PV: TPedidoDeVenta; _DevolverUltimaFactura: Boolean = True ): TDateTime;
    Class Function ObtenerFechaFacturaTeamplace( _PV: TPedidoDeVenta; _DevolverUltimaFactura: Boolean = True ): TDateTime;


    Function esPedidoDeCargoExtra: Boolean;

    property BloqueadoPorFaltadePrecioDeLista : TBoolean read GetBloqueadoPorFaltadePrecioDeLista;
    property BloqueadoPorPrecioNoAutorizado   : TBoolean read GetBloqueadoPorPrecioNoAutorizado;


    // Property de la Hoja de Ruta
    property FechaHoraListoExpedicion               : TFechaHora read GetFechaHoraListoExpedicion;
    Class Procedure CrearHojasDeRuta          ( _PV : TPedidoDeVenta);
    Class Procedure CumplirHojasDeRuta        ( _PV : TPedidoDeVenta);
    Class Function CrearRemitoDePedidoAsignado( _PV : TPedidoDeVenta): Boolean;
    Function ListoParaEntregar (_PasoDeFabricacion : TPasoDeFabricacion): Boolean;

    // Propertys del CreateCompuesto
    property CCClienteDescripcion                   : TString Read GetCCClienteDescripcion;
    property CCClienteCodigo                        : TString Read GetCCClienteCodigo;
    property CCClienteCategoriaDeCLienteID          : TObjectID Read GetCCClienteCategoriaDeClienteID;
    property CCClienteCategoriaDeClienteDescripcion : TString Read GetCCClienteCategoriaDeClienteDescripcion;
    property CCNivelDeServicioDeCliente             : TString Read GetCCNivelDeServicioDeCliente;
    property CCNivelDeServicioDeClientePonderacion  : TReal Read GetCCNivelDeServicioDeClientePonderacion;
    property CCNivelDeServicioDeClienteColorIdentificador : TEntero Read GetCCNivelDeServicioDeClienteColorIdentificador;
    property CCClienteCondiciondeIVAID              : TObjectID Read GetCCClienteCondiciondeIVAID;
    property CCMonedaCodigo                         : TString Read GetCCMonedaCodigo;
    property CCMonedaDescripcion                    : TString Read GetCCMonedaDescripcion;
    property CCCondicionDeVenta                     : TString Read GetCCCondicionDeVenta;
    property CCGrupoDeVendedorCodigo                : TString Read GetCCGrupoDeVendedorCodigo;
    property CCGrupoDeVendedorDescripcion           : TString Read GetCCGrupoDeVendedorDescripcion;

    property CCEstadoDePedidoDeVentaDescripcion     : TString Read GetCCEstadoDePedidoDeVentaDescripcion;
    property CCEstadoDePedidoDeVentaCodigo          : TString Read GetCCEstadoDePedidoDeVentaCodigo;
    property CCTipoDePedidoCodigo                   : TString Read GetCCTipoDePedidoCodigo;
    property CCTipoDePedidoDescripcion              : TString Read GetCCTipoDePedidoDescripcion;
    property CCTipoDePedidoSeProduceParaStock       : TString Read GetCCTipoDePedidoSeProduceParaStock;
    property CCTipoDePedidoResta                    : TString Read GetCCTipoDePedidoResta;
    property CCClienteTribecaDescripcion            : TString Read GetCCClienteTribecaDescripcion;
    property CCClienteTribecaCodigo                 : TString Read GetCCClienteTribecaCodigo;
    property CCGrupoDeVendedorTribecaCodigo         : TString Read GetCCGrupoDeVendedorTribecaCodigo;
    property CCGrupoDeVendedorTribeca               : TString Read GetCCGrupoDeVendedorTribeca;
    property CCTransportistaCodigo                  : TString Read GetCCTransportistaCodigo;
    property CCTransportistaDescripcion             : TString Read GetCCTransportistaDescripcion;
    property CCRankingCrediticio                    : TString Read GetCCRankingCrediticio;
    property CCDireccionDeEntrega                   : TString Read GetCCDireccionDeEntrega;
    property CCUsuarioDeAlta                        : TString Read FCCUsuarioDeAlta;
    property CCPresupuestoDeVentaNumero             : TEntero Read FCCPresupuestoDeVentaNumero;
    property CCFechaDePasoAEstadoActual             : TFecha Read GetCCFechaDePasoAEstadoActual;
    // de sifab
    property NumeroSifab                            : TEntero Read GetNumeroSifab write FNumeroSifab;
    Property ElPedidoEstaEnSifab                    : TBoolean Read GetElPedidoEstaEnSifab;
    // de Teamplace
    Property IDTeamplace                             : TEntero Read GetIDTeamplace;
    Function EstaEnTeamplace( _E : TEmpresaDeSistema ): Boolean;
    Class Function FinnegansMigrarPedidoDeVenta( _PV: TPedidoDeVenta ; _E : TEmpresa ; _Prioridad : Real ; _ES : TEmpresaDeSistema; _TipoDeDocumento : String; _WorkFlow : String): Boolean; overload;
    Function FinnegansMigrarPedidoDeVenta( _PV : TPedidoDeVenta  ) : Boolean ; overload;
    Property EstadosDeMigracion : TPedidoDeVentaEstadoDeMigracionList Read GetEstadosDeMigracion;
    property FechaPrimerFactura                     : TFecha read GetFechaPrimerFactura;
    property FechaUltimaFactura                     : TFecha read GetFechaUltimaFactura;

end;

TPedidoDeVentaDM = class(TSQLDBX_DMObject)
  protected
  strict protected
    class function CreateCompuesto(_Parte : Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _numero                                 = 'Numero';
      _NumeroSifab                            = 'NumeroSifab';
      _Observaciones                          = 'Observaciones';
      _observacionesParaFabrica               = 'observacionesParaFabrica';
      _ClienteID                              = 'ClienteID';
      _CondiciondeVentaID                     = 'CondicionDeVentaID';
      _CondicionDeVentaDetalleID              = 'CondicionDeVentaDetalleID';
      _FechaReal                              = 'FechaReal';
      _EmpresaFleteID                         = 'EmpresaFleteID';
      _GrupoDeVendedorID                      = 'GrupoDeVendedorID';
      _MarcaID                                = 'MarcaID';
      _monedaID                               = 'MonedaID';
      _MonedaCotizacion                       = 'MonedaCotizacion';
      _DolarCotizacion                        = 'DolarCotizacion';
      _NroOrdenDeCompraCliente                = 'NroOrdenDeCompraCliente';
      _PorcentComisionPorCobranza             = 'PorcentComisionPorCobranza';
      _PorcentComisionPorFacturacion          = 'PorcentComisionPorFacturacion';
      _DirecciondeEntregaID                   = 'DireccionDeEntregaID';
      _TipoDeFormularioID                     = 'TipoDeFormularioID';
      _ImporteNetoDelPedido                   = 'ImporteNetoDelPedido';
      _ImporteNetoDelPedidoPrecioDeLista      = 'ImporteNetoDelPedidoPrecioDeLista';
      _CentroDeFacturacionID                  = 'CentroDeFacturacionID';
      _NumeroLetrado                          = 'NumeroLetrado';
      _EstadoDePedidoDeVentaID                = 'EstadoDePedidoDeVentaID';
      _FechaDeEstadoDePedidoDeVenta           = 'FechaDeEstadoDePedidoDeVenta';
      _DescuentoEspecial                      = 'DescuentoEspecial';
      _TipoDePedidoDeVentaID                  = 'TipoDePedidoDeVentaID';
      _EntregaTotal                           = 'EntregaTotal';
      _ListaDePrecioID                        = 'ListaDePrecioID';
      _PresupuestoDeVentaID                   = 'PresupuestoDeVentaID';
      _UsuarioDeAltaID                        = 'UsuarioAltaID';
      _ClienteTribecaID                       = 'ClienteTribecaID';
      _GrupoVendedorTribecaID                 = 'GrupoVendedorTribecaID';
      _IncotermID                             = 'IncotermID';
      _MailPendiente                          = 'MailPendiente';
      _FechaEnvioMail                         = 'FechaEnvioMail';
      _FechaCancelacionEnvioMail              = 'FechaCancelacionEnvioMail';
      _ProformaPendiente                      = 'ProformaPendiente';
      _FechaEnvioProforma                     = 'FechaEnvioProforma';
      _PasaPorCalidad                         = 'PasaPorCalidad';
      _PendienteDeFacturar                    = 'PendienteDeFacturar';
      _SeFacturaSinRemito                     = 'SeFacturaSinRemito';
      _EsExclusivoServicios                   = 'EsExclusivoServicios';
      _EsParaKit                              = 'EsParaKit';
      _UnidadesPorKit                         = 'UnidadesPorKit';
      _CantidadDeKitsPedidos                  = 'CantidadDeKitsPedidos';
      // Del CreateCompuesto
      _CCClienteDescripcion                   = 'EmpresaDescripcion';
      _CCClienteCodigo                        = 'EmpresaCodigo';
      _CCClienteCategoriaDeClienteID          = 'CategoriaDeClienteID';
      _CCClienteCategoriaDeClienteDescripcion = 'CategoriaDeClienteDescripcion';
      _CCClienteCondiciondeIVAID              = 'ClienteCondiciondeIVAID';
      _CCGrupoDeVendedorCodigo                = 'GrupoDeVendedorCodigo';
      _CCGrupoDeVendedorDescripcion           = 'GrupoDeVendedor';
      _CCEstadoDePedidoDeVentaDescripcion     = 'EstadoDePedidoDeVentaDescripcion';
      _CCEstadoDePedidoDeVentaCodigo          = 'EstadoDePedidoDeVentaCodigo';
      _CCTipoDePedidoCodigo                   = 'TipoDePedidoCodigo';
      _CCTipoDePedidoResta                    = 'TipoDePedidoResta';
      _CCTipoDePedidoDescripcion              = 'TipoDePedidoDescripcion';
      _CCTipoDePedidoSeProduceParaStock       = 'TipoDePedidoSeProduceParaStock';
      _CCClienteTribecaDescripcion            = 'EmpresaTribecaDescripcion';
      _CCClienteTribecaCodigo                 = 'EmpresaTribecaCodigo';
      _CCGrupoDeVendedorTribecaCodigo         = 'GrupoDeVendedorTribecaCodigo';
      _CCGrupoDeVendedorTribeca               = 'GrupoDeVendedorTribeca';
      _CCMonedaCodigo                         = 'MonedaCodigo';
      _CCMonedaDescripcion                    = 'MonedaDescripcion';
      _CCTransportistaCodigo                  = 'FleteCodigo';
      _CCTransportistaDescripcion             = 'FleteDescripcion';
      _CCRankingCrediticio                    = 'RankingCrediticio';
      _CCCondicionDeVenta                     = 'CondicionDeVenta';
      _CCUsuarioDeAlta                        = 'UsuarioDeAlta';
      _CCPresupuestoDeVentaNumero             = 'PresupuestoDeVentaNumero';
      _CCDireccionDeEntrega                   = 'DireccionDeEntrega';
      _CCNivelDeServicioDeCliente             = 'NivelDeServiciodeCliente';
      _CCNivelDeServicioDeClientePonderacion  = 'NivelDeServiciodeClientePonderacion';
      _CCNivelDeServicioDeClienteColorIdentificador = 'NivelDeServiciodeClienteColorIdentificador';
      _CCFechaDePasoAEstadoActual             = 'FechaDePasoAEstadoActual';

      // de teamplace
    _TeamplaceTalonarioID     = 'TalonarioID';
    _TeamplaceTalonarioPedidoLocal = '37';
    _TeamplaceTalonarioPedidoExpo  = '66';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaList = class(TDocumentoList)
  private
    function GetActual: TPedidoDeVenta;
  public
    Function CreateForVendedor(_FiltrarPorVendedor: Boolean): String;
    constructor CreateAll(_FiltrarPorVendedor: Boolean = True);
    constructor CreateByPedidoDeVenta(_P: TPedidoDeVenta);
    constructor CreateBySucursal(_CF: TCentroDeFacturacion);
    constructor CreateByCliente(_C: TCliente; _nTop: Integer = -1; _Order: String = '' );
    constructor CreateByDireccionDeEntrega(_D: TDeposito);
    constructor CreateByNumeroDesdeNumeroHasta(_NumeroDesde: Integer; _NumeroHasta: Integer; _EstadoID: TObjectID = NullID; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False; _FitrarPorVendedor: Boolean = True );
    constructor CreateByNumeroDesdeNumeroHastaAndEstadosDePedido(_NumeroDesde: Integer; _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByFechaDesdeFechaHasta(_FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID = NullID; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID = NullID; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByClienteAndFechaDesdeFechaHastaAndEstadosDePedido(_C: TCliente; _FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByFechaDesdeFechaHastaAndEstadosDePedido(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByFechaDesdeFechaHastaAndPendientes(_FechaDesde: String; _FechaHasta: String; _Descendente: Boolean = False);
    constructor CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_GVL: TGrupoDeVendedorList; _FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID = NullID;  _FiltraParaTiraVentas: Boolean = False  );
    constructor CreateByGrupoDeVendedoresAndFechaDesdeFechaHastaAndEstadosDePedido(_GVL: TGrupoDeVendedorList; _FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
    constructor CreateByNumeroDePedidoYIDDiferente(_NumeroDePedido: Integer; _ID: TObjectID; _CF: TCentroDeFacturacion);
    constructor CreateByNumeroDePedido(_NumeroDePedido: Integer);
    constructor CreateMaximoNumero(_CF: TCentroDeFacturacion);
    constructor CreateByEstado(_Est: TEstadoDePedidoDeVenta);
    constructor CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList ; _EsParaNotaDeCredito: Boolean = False; _EsParaNotaDeDebito : Boolean = False);
    constructor CreateByEstadosAndTipoDeFormulario(_Est: TOrganizacionDeMonitorEstadoPermitidoList;
                                                   _TipoDeFormulario: TTipoDeFormulario ;
                                                   _EsParaNotaDeCredito: Boolean;
                                                   _EsParaNotaDeDebito : Boolean;
                                                   _Local: Boolean;
                                                   _Exportacion: Boolean);



    constructor CreateByEstadoAndUsuarioDeAlta(_Est: TEstadoDePedidoDeVenta;_Usu: TUsuario);
    constructor CreateByGrupoDeVendedores(_G: TGrupoDeVendedor);
    constructor CreateByMarca(_M: TMarca);
    constructor CreateByMailPendiente;
    constructor CreateByProformaPendiente( _Exportacion : Boolean = False);
    constructor CreateByListosParaProcesar(_PF : TPasoDeFabricacion  ; _Filtro : string = '') ;
    Constructor CreateByClienteAndOrdenDeCompra (_C : TCliente; _OrdenDeCompra : String; _NumeroDePedidoAExcluir : Integer = 0);

    function FindNumero(_numero: TEntero): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual: TPedidoDeVenta read GetActual;
end;

TPedidoDeVentaStateLog = class(TPDObject)
  private
    FPedidoDeVentaID: TObjectID;
    FfechaHora: TFechaHora;
    Fusuario: TPDObject;
    FusuarioID: TObjectID;
    FEstadoDePedidoDeVenta: TPDObject;
    FEstadoDePedidoDeVentaID: TObjectID;
    FPedidoDeVenta: TPDObject;
    fObservacion: TString;
    function GetEstadoDePedidoDeVenta: TEstadoDePedidoDeVenta;
    function Getusuario: TUsuario;
    function GetpedidoDeVenta: TPedidoDeVenta;
    procedure SetEstadoDePedidoDeVentaID(Value: TObjectID);
    procedure SetusuarioID(Value: TObjectID);
  public
    constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    property EstadoDePedidoDeVentaID : TObjectID read FEstadoDePedidoDeVentaID write SetEstadoDePedidoDeVentaID;
    property EstadoDePedidoDeVenta : TEstadoDePedidoDeVenta read GetEstadoDePedidoDeVenta;
    property UsuarioID: TObjectID read FusuarioID write SetusuarioID;
    property Usuario: TUsuario read Getusuario;
    property FechaHora: TFechaHora read FfechaHora write FfechaHora;
    property PedidoDeVentaID : TObjectID read FPedidoDeVentaID write FPedidoDeVentaID;
    property PedidoDeVenta: TPedidoDeVenta read GetpedidoDeVenta;
    property Observacion: TString read fObservacion write fObservacion;
end;

TPedidoDeVentaStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _EstadoDePedidoDeVentaID = 'EstadoDePedidoDeVentaID';
      _UsuarioID               = 'UsuarioID';
      _FechaHora               = 'FechaHora';
      _PedidoDeVentaID         = 'PedidoDeVentaID';
      _Observaciones           = 'Observaciones';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaStateLogList = class(TPDList)
  private
    function GetActual: TPedidoDeVentaStateLog;
  public
    constructor CreateAll;
    constructor CreateByPedidoDeVenta(_P: TPedidoDeVenta);
    function CreateNewObject: TPDObject; override;
    property Actual: TPedidoDeVentaStateLog read GetActual;
end;

TPedidoDeVentaItem = class(TPDObject)
  private
    FProducto: TPDObject;
    FProductoID: TObjectID;
    FObservacionesParaFabrica: TString;
    fObservacion: TString;
    FitemNro: TEntero;
    FfechaEntrega: TFecha;
    FCantidadPedida       : TReal;
    FcantidadFacturada    : TReal;
    FcantidadCancelada    : TReal;
    FCantidadEntregada    : TReal;
    FCantidadPendiente    : TReal;
    FCantidadPreparada    : TReal;
    FCantidadEntregadaHistorica: TReal;
    FPedidoDeVenta: TPedidoDeVenta;
    FPedidoDeVentaID: TObjectID;
    FPrecioDeVenta: TReal;
    FPrecioVentaAnterior: TReal;
    FFechaVentaAnterior: TFecha;
    FfechaEntregaProduccion: TFecha;
    FFechaDeEmpaque : TFechaHora;
    FFechaDeFinDeFabricacion: TFecha;
    FTiempoEstimadoProduccion: TEntero;
    FCodigoProductoCliente: TString;
    FEsCunioNuevo: TBoolean;
    FFechaDelPedido: TFecha;
    FMonedaDelPedido: TPDObject;
    FListaDePrecio: TPDObject;

    FdescripcionDelItem: TString;
    FporcentajeDescuento: TReal;
    FporcentajeAnticipo: TReal;
    FGuardandoDesdeElPadre: Boolean;
    FTipoDeFlexibilidad: TPDObject;
    FTipoDeFlexibilidadID: TObjectID;
    FPorcentajeDeTolerancia: TReal;
    FEntregaTotal: TBoolean;
    FEntregaModificable: Boolean;
    FLote: TEntero;
    FEstado: TPDObject;
    FEstadoID: TObjectID;
    FColorTemporal: Integer;
    FNumHojaDeRuta: string;
    fCantidadHojaDeRuta: Real;
    fFechaDeIngresoHojaDeRuta: Tdate;
    FParaProduccion: TBoolean;
    FEsMuestra: TBoolean;
    FesImportacionDeDatos: TBoolean;
    FDetalleDePrecios: TPDList;
    FNoValidaFecha: TBoolean;
    FEstadoOriginalID: TObjectID;
    FObservaciondeEstado: TString;
    FStateLogs: TPedidoDeVentaItemStateLogList;
    FHojasDeRuta: THojaDeRutaList;
    // variables del Tpedidodeventa
    FPVTipoDeFormularioID: TObjectID;
    FPVMonedaID: TObjectID;
    FPVMarcaID: TObjectID;
    FPVGrupoDeVendedorID: TObjectID;
    FPVEmpresaFleteID: TObjectID;
    FPVCondicionDeVentaID: TObjectID;
    FPVClienteID: TObjectID;
    FPVTipoDePedidoDeVentaID: TObjectID;
    FPVNumero: TEntero;
    FPVCentroDeFacturacionCodigo: TString;
    FPVFechaReal: TFecha;
    FPVPorcentajeComisionPorFacturacion: TReal;
    FPVPorcentajeComisionPorCobranza: TReal;
    FPVMonedaCotizacion: TReal;
    FPVNroOrdenDeCompraCliente: TString;
    FPVDireccionDeEntregaID: TObjectID;
    FPVObservaciones: TString;
    FPVObservacionesParaFabrica: TString;
    FPVObservaciondeEstado: TString;
    FPVImporteNetoDelPedido: TReal;
    FPVNumeroLetrado: TString;
    FPVEstadoDePedidoDeVentaID: TObjectID;
    FPVDescuentoEspecial: TReal;
    FPVPorcentajeDeTolerancia: TReal;
    FPVEntregaTotal: TBoolean;
    FPVListaDePrecioID: TObjectID;
    // variables del Tpedidodeventa
    FcantidadAsignada: TReal;
    FPVTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
    FTipoDePedidoDeVenta: TPDObject;
    FGrupoDeVendedor: TPDObject;
    FFechaPrimerFactura: TFecha;
    FFechaUltimaFactura: TFecha;
    FPlazoMinimoEntregaHabilitado: TBoolean;
    FPlazoMinimoEntrega: TEntero;
    FFBDesarrolloID: TObjectID;
    FListaDePrecioID: TObjectID;
    FMonedaDelPedidoID: TObjectID;
    FPrecioDeLista: TReal;
    fEsCambioDeEstado: Boolean;
    FK1: TReal;
    FKMP: TReal;
    FRentabilidad: TReal;
    FRentabilidad2: TReal;
    FCCClienteCodigo: TString;
    FCCClienteID: TObjectID;
    FCCClienteDescripcion: TString;
    FCCEsPedidoExportacion: TBoolean;
    FCCEstadoDescripcion: TString;
    FCCEstadoCodigo: TString;
    FCCGrupoDeVendedorDescripcion: TString;
    FCCTipoDePedidoDeVentaDescripcion: TString;
    FCCTipoDePedidoDeVentaCodigo: TString;
    FCCTipoDePedidoDeVentaSeProduceParaStock : TString;
    FCCCunioCodigo: TString;
    FCCCunioDescripcion: TString;
    FCCMonedaCodigo: TString;
    FCCMonedaDescripcion: TString;
    // Variables del Fabricado
    FFBCodigo: TString;
    FFBDescripcion: TString;
    FFBTerminacionID: TObjectID;
    FFBCunioID: TObjectID;
    FFBArticuloID: TObjectID;
    FFBcrc: TEntero;
    FFBFabricadoID: TObjectID;
//    FCCFBCodigoSifab: TString;
    FCCPVNumeroSifab: TEntero;
    FCCClienteTribecaCodigo: TString;
    FCCClienteTribecaID: TObjectID;
    FCCClienteTribecaDescripcion: TString;
//    FCCServicioCodigoSifab: TString;
    FCCServicioCodigo: TString;
    FCCServicioDescripcion: TString;
    FCCFlexibilidadCodigo: TString;
    FCCFlexibilidadDescripcion: TString;
    FCCFechaEstimadaProduccion: TFecha;
    FCCObservacionProduccion: TString;
    FPVCotizacionDolar: TReal;
    FImporteTotal: TReal;
    FHojaDeRutaPrincipal: TPDObject;
    FesProductoDeStock: TBoolean;
    FTipoDeCustomizacionID: TObjectID;
    FTipoDeCustomizacion: TPDObject;
    FCCNivelDeServicioDeCliente: TString;
    FCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    FCCNivelDeServicioDeClientePonderacion: TReal;
    FKTime: TReal;
    FImporteTotalPrecioDeLista: TReal;
    FTmpCantidadARemitir  : TReal;
    FRemitos              : TRemitoList;
    FRemitoItems          : TRemitoItemList;
    FRemitosEnPreparacion : TRemitoList;
    FRemitosEnviados: TRemitoList;
    FCCTipoDeFlexibilidadDescripcion: TString;
    FCCTipoDeFlexibilidadCodigo: TString;
    FCCTerminacionCodigo: TString;
    FCCMarca: TString;
    FCCArticuloCodigo: TString;
    FCCTerminacionDescripcion: TString;
    FCCArticuloDescripcion: TString;
    FCCCanaldeDistribucion: TString;
    FCCActividad: TString;
    FCCGrupoDeVendedorTribeca: TString;
    FCCTipoDeCustomizacion: TString;
    FPendienteDeFacturar: TBoolean;
    FEsProductoRemitible: TBoolean;
    FFacturas           : TFacturaList;
    FCriticidadID: TObjectID;
    FCriticidad: TPDObject;
    FCCCriticidadCodigo: TString;
    FCCCriticidadDescripcion: TString;
    FCCPasoDeFabricacionCodigo: TString;
    FTmpItemDeNota: TBoolean;
    FCCTipoDePedidoDeVentaResta: TBoolean;
    FDetalleDePreciosExigidosSinPrecio: TPedidoDeVentaItemPrecioDeListaList;
    FPrecioMinimoAutorizado: TReal;
    fBloqueadoPorPrecioNoAutorizado: TBoolean;
    FTipoDePedidoDeVentaID: TObjectID;
    FGrupoDeVendedorID: TObjectID;
    FUnidadesPorPrenda: TEntero;
    FIDTeamplace: Integer;
    function GetPedidoDeVenta: TPedidoDeVenta;
    procedure SetpedidoDeVentaID(Value: TObjectID);
    procedure SetProductoID(Value: TObjectID);
    function GetProducto: TProducto;
    function GetTipoDeFlexibilidad: TTipoDeFlexibilidad;
    procedure SetPorcentajeDeTolerancia(const Value: TReal);
    function GetEstado: TEstadoDePedidoDeVentaITem;
    procedure SetEstadoID(const Value: TObjectID);
    function GetFechaDeFinDeFabricacion: TFecha;
    function GetFechaDelPedido: TFecha;
    function GetMonedaDelPedido: TMoneda;
    function GetListaDePrecio: TListaDePrecio;
    function GetDetalleDePrecios: TPedidoDeVentaItemPrecioDeListaList;
    function GetFechaVentaAnterior: TFecha;
    function GetTiempoEstimadoProduccion: TEntero;
    procedure SetFechaDelPedido(const Value: TFecha);
    function GetPrecioDeVenta: TReal;
    procedure SetPrecioDeVenta(const Value: TReal);
    procedure SetCodigoProductoCliente(const Value: TString);
    procedure SetTipoDeFlexibilidadID(const Value: TObjectID);
    function GetObservaciondeEstado: TString;
    function GetStateLogs: TPedidoDeVentaItemStateLogList;
    procedure SetfechaEntrega(const Value: TFecha);
    function GetFechaPrimerFactura: TFecha;
    function GetFechaUltimaFactura: TFecha;
    procedure AnularItem;
    procedure CancelarItem;
    procedure CumplirItem;
    function GetPlazoMinimoEntregaHabilitado: TBoolean;
    function GetNoValidaFecha: TBoolean;
    function GetHojasDeRuta: THojaDeRutaList;
    procedure SetTipoDeCustomizacionID(const Value: TObjectID);
    function GetPrecioDeLista: TReal;
    function GetDetalleDePreciosExigidosSinPrecio: TPedidoDeVentaItemPrecioDeListaList;

    function GetCCEstadoCodigo: TString;
    function GetCCEstadoDescripcion: TString;
    function GetfechaEntregaProduccion: TFecha;
    function GetK1: TReal;
    function GetKMP: TReal;
    function GetKTime: TReal;
    function GetTipoDeFlexibilidadID: TObjectID;
    function GetCCGrupodeVendedorDescripcion: TString;

    function GetCCTipoDePedidoDeVentaDescripcion: TString;
    function GetCCTipoDePedidoDeVentaCodigo: TString;
    function GetCCEspedidoExportacion: TBoolean;
    function GetCCTipoDePedidoDeVentaResta: TBoolean;
    function GetCCTipoDePedidoDeVentaSeProduceParaStock: TBoolean;

    function GetCCCunioCodigo: TString;
    function GetCCCunioDescripcion: TString;
//    function GetCCFBCodigoSifab: TString;
    function GetCCPVNumeroSifab: TEntero;
    function GetCCClienteTribecaCodigo: TString;
    function GetCCClienteTribecaDescripcion: TString;
    function GetCCClienteTribecaID: TObjectID;
    function GetCCServicioCodigo: TString;
//    function GetCCServicioCodigoSifab: TString;
    function GetCCServicioDescripcion: TString;
    function GetCCFlexibilidadCodigo: TString;
    function GetCCFlexibilidadDescripcion: TString;
    function GetPVDolarCotizacion: TReal;
    function GetCCMonedaCodigo: TString;
    function GetCCMonedaDescripcion: TString;
    function GetImporteTotal: TReal;
    function GetImporteTotalPrecioDeLista: TReal;
    function GetCCClienteCodigo: TString;
    function GetCCClienteDescripcion: TString;
    function GetPVNumero: TEntero;
    function GetPVClienteID: TObjectID;
    function GetFechaDeEmpaque: TFechaHora;
    function GetHojaDeRutaPrincipal: THojaDeRuta;
    function GetEsProductoDeStock: TBoolean;
    function GetFBCodigo: TString;
    function GetTipoDeCustomizacion: TTipoDeCustomizacion;
    function GetCCNivelDeServicioDeCliente: TString;
    function GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    function GetCCNivelDeServicioDeClientePonderacion: TReal;
    function GetPVListaDePrecioID: TObjectID;
    function GetFacturas: TFacturaList;
    function GetRemitos: TRemitoList;
    function GetRemitosEnPreparacion: TRemitoList;
    function GetRemitoItems: TRemitoItemList;
    function GetRemitosEnviados: TRemitoList;
    function GetCantidadFacturada: TReal;
    function GetCCTipoDeFlexibilidadCodigo: TString;
    function GetCCTipoDeFlexibilidadDescripcion: TString;
    function GetCantidadEntregada: TReal;
    function GetPendienteDeFacturar: TBoolean;
    function GetEsProductoRemitible: TBoolean;
    function GetCriticidad: TCriticidad;
    procedure SetCriticidadID(const Value: TObjectID);
    function GetCCCriticidadCodigo: TString;
    function GetCCCriticidadDescripcion: TString;
    function GetTmpItemDeNota: TBoolean;
    function GetBloqueadoPorFaltaDePreciodeLista: TBoolean;



    procedure SetListaDePrecioID(const Value: TObjectID);
    procedure SetMonedaDelPedidoID(const Value: TObjectID);
    procedure SetTipoDePedidoDeVentaID(const Value: TObjectID);
    procedure SetGrupoDeVendedorID(const Value: TObjectID);

    function GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
    function GetGrupoDeVendedor: TGrupoDeVendedor;
    function GetTipoDePedidoDeVentaID: TObjectID;
    function GetGrupoDeVendedorID: TObjectID;
    function GetMonedaDelPedidoID: TObjectID;
    function GetListaDePrecioID: TObjectID;
    function GetIDTeamplace: TEntero;

  protected
    procedure GuardarDetalleDePrecio;
  Public
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    procedure Delete; Override;
    procedure CambiarEstado(_Estado: TEstadoDePedidoDeVentaItem; _ObservacionDeEstado: string = ''; _agregarNuevoestadoAlLog: Boolean = False );
//    procedure GuardarEnSistemaViejo(_Item: TPedidoDeVentaItem;_P: TPedidoDeVenta);
//    procedure GuardarEnTribeca(_Item: TPedidoDeVentaItem; _P: TPedidoDeVenta);
    procedure AsignarEstadoAlCunio; // esto debe llamarse desde la confirmacion
    Procedure ValidarFechas;
    procedure AgregarNuevoEstadoAlLog;
    procedure RecalcularFechaDeFinDeFabricacion;
    Function RecotizarProducto: TReal;

    // SAVE
    Function Save: Boolean; Override;
    // SAVE

    Procedure CleanK1;
    Procedure CleanKMP;
    Procedure CleanKTime;

    Class Function ObtenerFechaFactura( _PVI : TPedidoDeVentaItem; _DevolverUltimaFactura: Boolean ): TDateTime; overload;
    Class Function ObtenerFechaFactura( _PVIID : TObjectID; _DevolverUltimaFactura: Boolean = False ): TDateTime; overload;
    Class Function ObtenerFechaFacturaTeamplace( _PVI: TPedidoDeVentaItem; _DevolverUltimaFactura: Boolean = True ): TDateTime; overload;
    Class Function ObtenerFechaFacturaTeamplace( _PVIID: TObjectID; _DevolverUltimaFactura: Boolean = True ): TDateTime; overload;
    Class Function ObtenerCantidadFacturadaALaFecha(_PI : TPedidoDeVentaItem ; _FechaHasta: String): TEntero; overload;
    Class Function ObtenerCantidadFacturadaALaFecha(_PVIID : TObjectID ; _FechaHasta: String): TEntero; overload;

    Class Function ObtenerLaFechaDeIngresoRealAExpedicion( _PVIID: TObjectID ): TDateTime;
    // cantidades
    function CantidadFacturadaALaFecha(_FechaHasta : TDateTime = 0 ): TEntero;
    Function Stock(_CodigoEstado : String)  : TReal;
    Procedure DesAsignarStock;
    property CantidadPedida        : TReal read FCantidadPedida  Write FCantidadPedida;
    property CantidadEntregadaHistorica : TReal read FCantidadEntregadaHistorica write FCantidadEntregadaHistorica; // esta property es para dar por cumplido los items que no tiene remitos en Aphosoft
    property CantidadCancelada     : TReal read FCantidadCancelada write FCantidadCancelada;
    property CantidadAsignada      : TReal read FCantidadAsignada;
    property CantidadPreparada     : TReal read FCantidadPreparada;
    property CantidadEntregada     : TReal read GetCantidadEntregada;
    property CantidadFacturada     : TReal read GetCantidadFacturada;
    property CantidadPendiente     : TReal read FCantidadPendiente;
    // properties del Pedido de ventaItems
    property PedidoDeVentaID: TObjectID read FPedidoDeVentaID write SetPedidoDeVentaID;
    property PedidoDeVenta : TPedidoDeVenta read GetPedidoDeVenta;
    property FechaEntrega          : TFecha read FfechaEntrega write SetfechaEntrega;   // Fecha cargada por ventas
    property FechaEntregaProduccion: TFecha read GetfechaEntregaProduccion ; // Fecha de Fin de ultimo paso HojadeRuta
    property FechaEntregaProduccionDeTabla: TFecha read FfechaEntregaProduccion ; // No hace el geter
    property FechaDeEmpaque        : TFechaHora read GetFechaDeEmpaque write FFechaDeEmpaque ; // Fecha de Fin de paso de Empaque
    Property FechaDeFinDeFabricacion: TFecha read GetFechaDeFinDeFabricacion ; // Fecha estimada de produccion calculada con datos de tablas (diás de fabricación articulo, termin, reposición o const. cuño, etc)
    property TipoDeFlexibilidadID: TObjectID read GetTipoDeFlexibilidadID write SetTipoDeFlexibilidadID;
    property TipoDeFlexibilidad: TTipoDeFlexibilidad Read GetTipoDeFlexibilidad;
    property NoValidaFecha: TBoolean read GetNoValidaFecha;
    Property PlazoMinimoEntregaHabilitado : TBoolean read GetPlazoMinimoEntregaHabilitado;
    Property PlazoMinimoEntrega : TEntero read FPlazoMinimoEntrega write FPlazoMinimoEntrega;
    property ItemNro: TEntero read FItemNro write FItemNro;
    property Observacion: TString read FObservacion write FObservacion;
    property ObservacionesParaFabrica: TString read FObservacionesParaFabrica write FObservacionesParaFabrica;
    property ProductoID: TObjectID read FProductoID write SetProductoID;
    property Producto: TProducto read GetProducto;
    property CodigoProductoCliente: TString read FCodigoProductoCliente write SetCodigoProductoCliente;
    property DescripcionDelItem : TString read FdescripcionDelItem Write FdescripcionDelItem;
    property PrecioDeVenta: TReal read GetPrecioDeVenta write SetPrecioDeVenta;
    Property BloqueadoPorFaltaDePreciodeLista : TBoolean read GetBloqueadoPorFaltaDePreciodeLista;
    property PrecioMinimoAutorizado: TReal read FPrecioMinimoAutorizado write FPrecioMinimoAutorizado;
    property BloqueadoPorPrecioNoAutorizado: TBoolean read FBloqueadoPorPrecioNoAutorizado write FBloqueadoPorPrecioNoAutorizado ;
    property PrecioDeLista: TReal Read GetPrecioDeLista;
    property PrecioVentaAnterior: TReal   read FPrecioVentaAnterior write FPrecioVentaAnterior;
    property FechaDeVentaAnterior: TFecha read GetFechaVentaAnterior;
    property DetalleDePrecios: TPedidoDeVentaItemPrecioDeListaList read GetDetalleDePrecios;
    property DetalleDePreciosExigidosSinPrecio: TPedidoDeVentaItemPrecioDeListaList read GetDetalleDePreciosExigidosSinPrecio;
    Property TiempoEstimadoProduccion: TEntero read GetTiempoEstimadoProduccion;
    property PorcentajeAnticipo : TReal read FporcentajeAnticipo write FporcentajeAnticipo;
    property PorcentajeDescuento: TReal read FporcentajeDescuento write FporcentajeDescuento;
    // properties del Pedido de ventaItems
    property EsCunioNuevo: TBoolean Read FEsCunioNuevo write FEsCunioNuevo;
    property EntregaModificable : Boolean read FEntregaModificable Write FEntregaModificable;
    property ColorTemporal: Integer Read FColorTemporal Write FColorTemporal;
    property NumHojaDeRuta: string read FNumHojaDeRuta write FNumHojaDeRuta;
    property CantidadHojaDeRuta: Real read fCantidadHojaDeRuta write fCantidadHojaDeRuta;
    property FechaDeIngresoHojaDeRuta : Tdate read fFechaDeIngresoHojaDeRuta write fFechaDeIngresoHojaDeRuta;
    property ParaProduccion : TBoolean read FParaProduccion write FParaProduccion;
    property EsMuestra: TBoolean read FEsMuestra write FEsMuestra;
    property EsImportacionDeDatos : TBoolean read FesImportacionDeDatos write FesImportacionDeDatos; // esto se setea en forma manual para no validar fecha de fabricacion o entrega
    property EntregaTotal: TBoolean read FEntregaTotal write FEntregaTotal;
    property PorcentajeDeTolerancia: TReal read FPorcentajeDeTolerancia write SetPorcentajeDeTolerancia;
    property Lote: TEntero read FLote write FLote;
    property EstadoID: TObjectID read FEstadoID Write SetEstadoID;
    property Estado: TEstadoDePedidoDeVentaITem Read GetEstado;
    property EstadoOriginalID: TObjectID Read FEstadoOriginalID;
    property StateLogs: TPedidoDeVentaItemStateLogList read GetStateLogs;
    property HojasDeRuta: THojaDeRutaList read GetHojasDeRuta;
    property ObservacionDeEstado : TString read GetObservaciondeEstado write FObservaciondeEstado;
    property EsCambioDeEstado : Boolean read fEsCambioDeEstado write fEsCambioDeEstado;
    property K1: TReal read GetK1;// write FK1;
    property KMP: TReal read GetKMP;// write FKMP;
    property KTime: TReal read GetKTime;
    procedure SetearK1 (_K1 : TReal);
    property Rentabilidad: TReal read FRentabilidad write FRentabilidad; // se calcula con el precio de venta
    property Rentabilidad2: TReal read FRentabilidad2 write FRentabilidad2; // se calcula con el precio de lista
    property ImporteTotal: TReal read GetImporteTotal;
    property ImporteTotalPrecioDeLista: TReal read GetImporteTotalPrecioDeLista;
    property esProductoDeStock : TBoolean read GetEsProductoDeStock;
    property TipoDeCustomizacionID : TObjectID read FTipoDeCustomizacionID Write SetTipoDeCustomizacionID;
    property TipoDeCustomizacion   : TTipoDeCustomizacion Read GetTipoDeCustomizacion;
    property EsProductoRemitible : TBoolean Read GetEsProductoRemitible write FEsProductoRemitible;
    property PendienteDeFacturar : TBoolean Read GetPendienteDeFacturar write FPendienteDeFacturar;
    property Criticidad          : TCriticidad read GetCriticidad;
    property CriticidadID        : TObjectID read FCriticidadID Write SetCriticidadID;
    property UnidadesPorPrenda   : TEntero read FUnidadesPorPrenda write FUnidadesPorPrenda;

    // HOJAS DE RUTA
    Procedure CrearHojasDeRuta;
    Procedure CumplirHojasDeRuta; // si las hojas estan ingresadas a expedicion (para remitos automaticos)
    Function LasHojasDeRutaEstanProgramadas: Boolean;
    Function TieneHojasDeRutaEnFabricacion : Boolean;
    Function LasHojasDeRutaEstanCanceladas : Boolean;
    Function LasHojasDeRutaEstanEn(_PasoActual : TPasoDeFabricacion) : Boolean;
    Property HojaDeRutaPrincipal : THojaDeRuta Read GetHojaDeRutaPrincipal;
    // Remitos
    property RemitoItems          : TRemitoItemList read GetRemitoItems;
    property Remitos              : TRemitoList read GetRemitos;
    property RemitosEnPreparacion : TRemitoList read GetRemitosEnPreparacion;
    property RemitosEnviados     : TRemitoList read GetRemitosEnviados;
    //Facturas
    property Facturas: TFacturaList read GetFacturas;
    // de sifab
    property FechaPrimerFactura: TFecha read GetFechaPrimerFactura;
    property FechaUltimaFactura: TFecha read GetFechaUltimaFactura;

    // Properties del Pedido De Venta // Esto se debe asignar en el OnNewRecordMaster del frame o al hacer el save
    property GrupoDeVendedorID: TObjectID read GetGrupoDeVendedorID write SetGrupoDeVendedorID;
    property GrupoDeVendedor: TGrupoDeVendedor read GetGrupoDeVendedor;
    property TipoDePedidoDeVentaID : TObjectID read GetTipoDePedidoDeVentaID write SetTipoDePedidoDeVentaID;
    property TipoDePedidoDeVenta   : TTipoDePedidoDeVenta read GetTipoDePedidoDeVenta;
    property FechaDelPedido : TFecha read GetFechaDelPedido write SetFechaDelPedido;
    property MonedaDelPedidoID: TObjectID read GetMonedaDelPedidoID write SetMonedaDelPedidoID;
    property MonedaDelPedido : TMoneda read GetMonedaDelPedido;
    property ListaDePrecioID: TObjectID read GetListaDePrecioID write SetListaDePrecioID;
    property ListaDePrecio: TListaDePrecio read GetListaDePrecio;
    //

    property CCPVNumero: TEntero Read GetPVNumero;
    property CCPVNumeroSifab : TEntero read GetCCPVNumeroSifab;
    property CCPVClienteID: TObjectID read GetPVClienteID;
    property CCPVCondicionDeVentaID: TObjectID read FPVCondicionDeVentaID;
    property CCPVFechaReal: TFecha read FPVFechaReal;
    property CCPVEmpresaFleteID: TObjectID read FPVEmpresaFleteID;
    property CCPVGrupoDeVendedorID: TObjectID read FPVGrupoDeVendedorID;
    property CCPVDireccionDeEntregaID: TObjectID read FPVDireccionDeEntregaID;
    property CCPVMarcaID: TObjectID read FPVMarcaID;
    property CCPVMonedaID: TObjectID read FPVMonedaID;
    property CCPVMonedaCotizacion: TReal read FPVMonedaCotizacion;
    property CCPVDolarCotizacion: TReal read GetPVDolarCotizacion;
    property CCPVNroOrdenDeCompraCliente: TString read FPVNroOrdenDeCompraCliente;
    property CCPVPorcentajeComisionPorCobranza : TReal read FPVPorcentajeComisionPorCobranza;
    property CCPVPorcentajeComisionPorFacturacion : TReal read FPVPorcentajeComisionPorFacturacion;
    property CCPVTipoDeFormularioID: TObjectID read FPVTipoDeFormularioID;
    property CCPVTipoDePedidoDeVentaID: TObjectID read FPVTipoDePedidoDeVentaID;
    property CCPVObservacionesParaFabrica : TString read FPVObservacionesParaFabrica;
    property CCPVImporteNetoDelPedido: TReal read FPVImporteNetoDelPedido;
    property CCPVCentroDeFacturacionCodigo: TString Read FPVCentroDeFacturacionCodigo;
    property CCPVNumeroLetrado: TString Read FPVNumeroLetrado;
    property CCPVEstadoDePedidoDeVentaID : TObjectID Read FPVEstadoDePedidoDeVentaID;
    property CCPVDescuentoEspecial: TReal read FPVDescuentoEspecial;
    property CCPVListaDePrecioID: TObjectID read GetPVListaDePrecioID;
    property CCPVEntregaTotal: TBoolean read FPVEntregaTotal;
    // Properties del Fabricado
    property CCFBArticuloID: TObjectID    read FFBArticuloID;
    property CCFBTerminacionID: TObjectID read FFBTerminacionID;
    property CCFBCunioID: TObjectID       read FFBCunioID;
    property CCFBDesarrolloID: TObjectID  read FFBDesarrolloID;
    property CCFBCrc: TEntero             read FFBcrc;
    property CCFBCodigo: TString          read GetFBCodigo;
    property CCFBdescripcion: TString     read FFBDescripcion;
    property CCFBFabricadoID: TObjectID   read FFBFabricadoID;
//    property CCFBCodigoSifab: TString     read GetCCFBCodigoSifab;
    // Properties del cliente
    property CCClienteID          : TObjectID read FCCClienteID;
    property CCClienteCodigo      : TString   read GetCCClienteCodigo;
    property CCClienteDescripcion : TString   read GetCCClienteDescripcion;
    // tribeca
    property CCClienteTribecaID          : TObjectID read GetCCClienteTribecaID;
    property CCClienteTribecaCodigo      : TString   read GetCCClienteTribecaCodigo;
    property CCClienteTribecaDescripcion : TString   read GetCCClienteTribecaDescripcion;
    property CCGrupoDeVendedorTribeca    : TString   read FCCGrupoDeVendedorTribeca;

    property CCNivelDeServicioDeCliente                   : TString read GetCCNivelDeServicioDeCliente;
    property CCNivelDeServicioDeClientePonderacion        : TReal  read GetCCNivelDeServicioDeClientePonderacion;
    property CCNivelDeServicioDeClienteColorIdentificador : TEntero read GetCCNivelDeServicioDeClienteColorIdentificador;
    // Estado
    property CCEstadoCodigo: TString read GetCCEstadoCodigo;
    property CCEstadoDescripcion: TString read GetCCEstadoDescripcion;
    // tipo de pedido
    property CCTipoDePedidoDeVentaDescripcion : TString read GetCCTipoDePedidoDeVentaDescripcion;
    property CCTipoDePedidoDeVentaCodigo      : TString read GetCCTipoDePedidoDeVentaCodigo;
    property CCEsPedidoExportacion: TBoolean read GetCCEspedidoExportacion;
    property CCTipoDePedidoDeVentaSeProduceParaStock: TBoolean read GetCCTipoDePedidoDeVentaSeProduceParaStock;
    property CCTipoDePedidoDeVentaResta: TBoolean read GetCCTipoDePedidoDeVentaResta;
    // Flex
    property CCFlexibilidadDescripcion : TString read GetCCFlexibilidadDescripcion;
    property CCFlexibilidadCodigo      : TString read GetCCFlexibilidadCodigo;
    // grupo de vendedor
    property CCGrupodeVendedorDescripcion: TString read GetCCGrupodeVendedorDescripcion;
    // Moneda
    property CCMonedaCodigo: TString read GetCCMonedaCodigo;
    property CCMonedaDescripcion: TString read GetCCMonedaDescripcion;
    // Properties del Servicio
    property CCServicioCodigo: TString read GetCCServicioCodigo;
    property CCServicioDescripcion: TString read GetCCServicioDescripcion;
//    property CCServicioCodigoSifab: TString read GetCCServicioCodigoSifab;
    // Properties del Cuño
    property CCCunioCodigo : TString read GetCCCunioCodigo;
    property CCCuniDescripcion : TString read GetCCCunioDescripcion;
    // Tipo de Flexibilidad
    property CCTipoDeFlexibilidadCodigo             : TString Read GetCCTipoDeFlexibilidadCodigo;
    property CCTipoDeFlexibilidadDescripcion        : TString Read GetCCTipoDeFlexibilidadDescripcion;
    // Properties de LAS HR
    property CCFechaEstimadaProduccion : TFecha read FCCFechaEstimadaProduccion;
    property CCObservacionProduccion   : TString read FCCObservacionProduccion;
    // Articulos
    property CCArticuloCodigo          : TString read FCCArticuloCodigo;
    property CCArticuloDescripcion     : TString read FCCArticuloDescripcion;
    // terminaciones
    property CCTerminacionCodigo       : TString read FCCTerminacionCodigo;
    property CCTerminacionDescripcion  : TString read FCCTerminacionDescripcion;
    // Marcas
    property CCMarca                   : TString read FCCMarca;
    // Actividades
    property CCActividad               : TString read FCCActividad;
    // CanaldeDistribucion
    property CCCanaldeDistribucion     : TString read FCCCanaldeDistribucion;
    // tipo de customizacion
    property CCTipoDeCustomizacion     : TString read FCCTipoDeCustomizacion;
    // Criticidad
    property CCCriticidadDescripcion   : TString read GetCCCriticidadDescripcion;
    property CCCriticidadCodigo        : TString read GetCCCriticidadCodigo;
    // paso de fabricacion
    property CCPasoDeFabricacionCodigo : TString read FCCPasoDeFabricacionCodigo;
    property TmpItemDeNota             : TBoolean read GetTmpItemDeNota ;
    property TmpCantidadARemitir : TReal read FTmpCantidadARemitir write FTmpCantidadARemitir;
    // TeamPlace
    property IDTeamplace               : TEntero read GetIDTeamplace;

end;

TPedidoDeVentaItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function CreateCompuesto( _Parte: Integer = 0 ): String; override;
    Class Function CampoPrecioDeLista : String;
    Class Function CampoCantidadEntregada : String;
    Class Function CampoCantidadAsignada : String;
    Class Function CampoCantidadPreparada : String;
    Class Function CampoCantidadFacturada : String;
    Class Function CampoCantidadPendiente : String;
    Class Function CampoFechaEstimadaProduccion : String;
    Class Function CampoObservacionProduccion : String;
    Class Function CampoPasoDeFabricacion: String;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      // CAMPOS DE PEDIDODEVENTAITEMS
      _PedidoDeVentaID            = 'PedidoDeVentaID';
      _CantidadPedida             = 'CantidadPedida';
      _CantidadAsignada           = 'CantidadAsignada';
      _CantidadPreparada          = 'CantidadPreparada';
      _CantidadEntregada          = 'CantidadEntregada';
      _CantidadCancelada          = 'CantidadCancelada';
      _CantidadPendiente          = 'CantidadPendiente';
      _CantidadFacturada          = 'CantidadFacturada';
      _CantidadEntregadaHistorica = 'CantidadEntregadaHistorica'; // este campo es para poder dar por cumplido los ítems que no tienen remitos en Aphosoft
      _PendienteDeFacturar        = 'PendienteDeFacturar';  // este campo indica cuando un servicio no es remitible y debe incluirse en una factura
      _EsProductoRemitible        = 'EsProductoRemitible';
      _UnidadesPorPrenda          = 'UnidadesPorPrenda'; // esto se usa para los Kits. para poder

      // campos para actualizar por remitos
      _FechaEntrega               = 'FechaEntrega';
      _FechaEntregaProduccion     = 'FechaEntregaProduccion';
      _FechaDeEmpaque             = 'FechaDeFinDePasoEmpaque';
      _FechaDeFinDeFabricacion    = 'FechaDeFinDeFabricacion';
      _ItemNro                    = 'ItemNro';
      _Observacion                = 'Observacion';
      _ObservacionesParaFabrica   = 'ObservacionesParaFabrica';
      _ProductoID                 = 'ProductoID';
      _PrecioDeLista              = 'PrecioLista2';  // borrar de la tabla el campo PrecioDeLista
      _PrecioDeVenta              = 'PrecioDeVenta';
      _BloqueadoPorPrecioNoAutorizado = 'BloqueadoPorPrecioNoAutorizado';
      _PrecioMinimoAutorizado     = 'PrecioMinimoAutorizado';
      _PrecioVentaAnterior        = 'PrecioVentaAnterior';
      _TiempoEstimadoProduccion   = 'TiempoEstimadoProduccion';
      _CodigoProductoCliente      = 'CodigoProductoCliente';
      _DescripcionDelItem         = 'DescripcionDelItem';
      _PorcentajeDescuento        = 'PorcentajeDescuento';
      _PorcentajeAnticipo         = 'PorcentajeAnticipo';
      _Lote                       = 'Lote';
      _EstadoID                   = 'EstadoID';
      _ParaProduccion             = 'ParaProduccion';
      _EsMuestra                  = 'EsMuestra';
      _TipoDeFlexibilidadID       = 'TipoDeFlexibilidadID';
      _EntregaTotal               = 'EntregaTotal';
      _EsCunioNuevo               = 'EsCunioNuevo';
      _K1                         = 'K1';
      _KMP                        = 'KMP';
      _KTime                      = 'KTime';
      _Rentabilidad               = 'Rentabilidad';
      _Rentabilidad2              = 'Rentabilidad2';
      _TipoDeCustomizacionID      = 'TipoDeCustomizacionID';
      _CriticidadID               = 'CriticidadID';
    // createcompuesto
      // CAMPOS DE PEDIDOSDEVENTA
      _CCPVNumero                        = 'Numero';
      _CCPVNumeroSifab                   = 'NumeroSifabPedido';
      _CCPVObservaciones                 = 'ObservacionGeneral';
      _CCPVObservacionesParaFabrica      = 'ObservacionGeneralParaFabrica';
      _CCPVClienteID                     = 'ClienteID';
      _CCPVCondiciondeVentaID            = 'CondicionDeVentaID';
      _CCPVFechaReal                     = 'FechaReal';
      _CCPVEmpresaFleteID                = 'EmpresaFleteID';
      _CCPVGrupoDeVendedorID             = 'GrupoDeVendedorID';
      _CCPVMarcaID                       = 'MarcaID';
      _CCPVMonedaID                      = 'MonedaID';
      _CCPVMonedaCotizacion              = 'MonedaCotizacion';
      _CCPVDolarCotizacion               = 'DolarCotizacion';
      _CCPVNroOrdenDeCompraCliente       = 'NroOrdenDeCompraCliente';
      _CCPVPorcentComisionPorCobranza    = 'PorcentComisionPorCobranza';
      _CCPVPorcentComisionPorFacturacion = 'PorcentComisionPorFacturacion';
      _CCPVDirecciondeEntregaID          = 'DireccionDeEntregaID';
      _CCPVTipoDeFormularioID            = 'TipoDeFormularioID';
      _CCPVImporteNetoDelPedido          = 'ImporteNetoDelPedido';
      _CCPVCentroDeFacturacionCodigo     = 'CentroDeFacturacionCodigo';
      _CCPVNumeroLetrado                 = 'NumeroLetrado';
      _CCPVEstadoDePedidoDeVentaID       = 'EstadoDePedidoDeVentaID';
      _CCPVDescuentoEspecial             = 'DescuentoEspecialPedido';
      _CCPVTipoDePedidoDeVentaID         = 'TipoDePedidoDeVentaID';
      _CCPVEntregaTotal                  = 'EntregaTotalPedido';
      _CCPVListaDePrecioID               = 'ListaDePrecioID';

      // CAMPOS DE empresas
      _CCClienteID                       = 'ClienteID';
      _CCClienteCodigo                   = 'ClienteCodigo';
      _CCClienteDescripcion              = 'EmpresaDescripcion';
      _CCClienteTribecaID                = 'ClienteTribecaID';
      _CCClienteTribecaCodigo            = 'ClienteTribecaCodigo';
      _CCClienteTribecaDescripcion       = 'EmpresaTribecaDescripcion';

      // CAMPOS DE NIVEL DE SERVICIO DE CLIENTE
      _CCNivelDeServicioDeCliente                   = 'NivelDeServiciodeCliente';
      _CCNivelDeServicioDeClientePonderacion        = 'NivelDeServiciodeClientePonderacion';
      _CCNivelDeServicioDeClienteColorIdentificador = 'NivelDeServiciodeClienteColorIdentificador';

      // campos tipo de pedido
      _CCEsPedidoExportacion             = 'EsPedidoExportacion';
      _CCTipoDePedidoDeVentaDescripcion  = 'TipoDePedidoDeVentaDescripcion';
      _CCTipoDePedidoDeVentaCodigo       = 'TipoDePedidoDeVentaCodigo';
      _CCTipoDePedidoSeProduceParaStock  = 'TipoDePedidoSeProduceParaStock';
      _CCTipoDePedidoDeVentaResta        = 'TipoDePedidoResta';
      // campos de estados de pedido de venta items
      _CCEstadoDeItemCodigo              = 'EstadoDeItemCodigo';
      _CCEstadoDeItemDescripcion         = 'EstadoDeItemDescripcion';
      // campos GrupodeVendedor
      _CCGrupoDeVendedorDescripcion      = 'GrupoDeVendedorDescripcion';
      // Moneda
      _CCMonedaCodigo                    = 'MonedaCodigo';
      _CCMonedaDescripcion               = 'MonedaDescripcion';
      // Campos de Productos
      _CCPCodigoDeProducto               = 'CodigoDeProducto';
      // CAMPOS DE FABRICADOS
      _CCFBarticuloID                    = 'ArticuloID';
      _CCFBcunioID                       = 'CunioID';
      _CCFBterminacionID                 = 'TerminacionID';
      _CCFBFabricadoID                   = 'FabricadoID';
      _CCFBCodigo                        = 'CodigoFabricado';
      _CCFBCrc                           = 'Crc';
      _CCFBDesarrolloID                  = 'DesarrolloID';
      _CCFBDescripcion                   = 'Fabricado';
//      _CCFBCodigoSifab                   = 'CodigoSifabFabricado';
      // CAMPOS SERVICIOS
      _CCServicioCodigo                  = 'ServicioCodigo';
      _CCServicioDescripcion             = 'ServicioDescripcion';
//      _CCServicioCodigoSifab             = 'ServicioCodigoSifab';

      // campos Articulos
      _CCArticuloDescripcion             = 'ArticuloDescripcion';
      _CCArticuloCodigo                  = 'ArticuloCodigo';
      // campos Terminacion
      _CCTerminacionDescripcion          = 'TerminacionDescripcion';
      _CCTerminacionCodigo               = 'TerminacionCodigo';
      // campos cuños
      _CCCunioDescripcion                = 'CunioDescripcion';
      _CCCunioCodigo                     = 'CunioCodigo';
      // CAMPOS DE hoja de ruta
      _CCHRObservacionProduccion         = 'ObservacionDeProduccion';
      _CCHRFechaEstimadaProduccion       = 'FechaEstimadaProduccion';
      // CAMPOS DE marcas
      _CCMarca                           = 'Marca';
      // Campos de Tipo de Flexibilidad
      _CCTipoDeFlexibilidadCodigo        = 'TipoDeFlexibilidadCodigo';
      _CCTipoDeFlexibilidadDescripcion   = 'TipoDeFlexibilidadDescripcion';
      // Campos de Criticidad
      _CCCriticidadCodigo                = 'CriticidadCodigo';
      _CCCriticidadDescripcion           = 'CriticidadDescripcion';
      // ATIVIDAD
      _CCActividad                       = 'Actividad';
      // CanalDeDistribucion
      _CCCanalDeDistribucion             = 'CanalDeDistribucion';
      // Grupo vendedor tribeca
      _CCGrupoDeVendedorTribeca          = 'GrupoDeVendedorTribeca';
      // tipo de customizacion
      _CCTipoDeCustomizacion             = 'TipoDeCustomizacion';
      // paso de fabricacion
      _CCPasoDeFabricacionCodigo         = 'PasoDeFabricacionCodigo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaItemList = class(TPDList)
private
  function GetActual: TPedidoDeVentaItem;
public
  constructor CreateAll(_Top: Integer = -1; _Descendente: Boolean = True);
  constructor CreateEmpty;
  constructor CreateByID(_ID: TObjectID);
  constructor CreateByPedido(_PV: TPedidoDeVenta);
  constructor CreateByPedidoRemitibles(_PV: TPedidoDeVenta);
  constructor CreateByPedidoNoRemitiblesPendFacturar(_PV: TPedidoDeVenta);
  constructor CreateByPedidoBloqueadosPorPrecioNoAutorizado(_PV: TPedidoDeVenta);
  constructor CreateByPedidoNoRemitiblesFacturables(_PV: TPedidoDeVenta);
  constructor CreateByNumeroDePedidoAndItem(_NumeroPedido,_NumeroItem: TEntero);
  constructor CreateByPedidoIDAndNumeroItem(_PedidoID: TObjectID;_NumeroItem: TEntero);
  constructor CreateByNumeroDePedido(_NumeroPedido: TEntero);
  constructor CreateByCunioYEstado(_C: TCunio;_E: TEstadoDePedidoDeVentaITem; _DescartarID: TObjectID = NullID);
  constructor CreateByFechaDesdeFechaHasta(_FechaDesde: String;_FechaHasta: String);
  constructor CreateByFechaDesdeFechaHastaAndCliente(_FechaDesde: String;_FechaHasta: String; _Cliente: TCliente);
  constructor CreateByFechaDesdeFechaHastaAndEstado(_FechaDesde: String;_FechaHasta: String; _EstadoID: TObjectID; _ProductoID: TObjectID = NullID; _Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
  constructor CreateByFechaDesdeFechaHastaAndEstados(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _ProductoID: TObjectID = NullID; _Descendente: Boolean = False);
  constructor CreateByFechaDesdeFechaHastaAndEstadoAndCodigoLike(_FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID;_CodigoLike: string = ''; _BuscaServicios: Boolean = False;_Descendente: Boolean = False; _FiltraParaTiraVentas: Boolean = False);
  constructor CreateByFechaDesdeFechaHastaAndEstadosAndCodigoLike(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList;_CodigoLike: string = ''; _BuscaServicios: Boolean = False;_Descendente: Boolean = False);
  constructor CreateByFechaEntregaDesdeFechaHasta(_FechaDesde: String;_FechaHasta: String; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil );
  constructor CreateByFechaEntregaDesdeFechaHastaAndEstadosDePedido(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil);
  constructor CreateByFechaEntregaProduccionDesdeFechaHasta(_FechaDesde: String; _FechaHasta: String; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil );
  constructor CreateByFechaEntregaProduccionDesdeFechaHastaAndEstadosDePedido(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil);
  constructor CreateByFechaEmpaqueDesdeFechaHasta(_FechaDesde: String; _FechaHasta: String; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil );
  constructor CreateByFechaEmpaqueDesdeFechaHastaAndEstadosDePedido(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal : Boolean= True; _MercadoExterior : Boolean = True ; _C : TCliente = nil ; _GV : TGrupoDeVendedor = nil);
  constructor CreateByCunio(_C: TCunio);
  constructor CreateByEstadoYCliente(_C: TCliente);
  constructor CreateByEstadosDeItemsYCliente( _EPVIL: TEstadoDePedidoDeVentaItemList; _C: TCliente);
  constructor CreateByPendientesPorCliente( _C: TCliente);
  constructor CreateByProducto(_P: TProducto);
  constructor CreateByPrimerProductoID(_ProductoID: TObjectID);
  constructor CreateByProductoYEmpresa(_P: TProducto; _C: TCliente ); overload;
  constructor CreateByProductoYEmpresa(_P: TProducto; _C: TCliente; _FechaDesde: Tdate); overload;
  constructor CreateByEstado(_EstadoID: TObjectID);
  constructor CreateByEstadosPedidoDeVenta(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  constructor CreateByEstadoYProduccion(_Estado: TEstadoDePedidoDeVentaITem; _ParaProduccion: Boolean);
  constructor CreateByCunioYEstadosPedidoDeVenta(_C: TCunio; _EstadosID: TStringList);
  constructor CreateByCondicion(_Condicion: String; _OrderBy: String = '');
  constructor CreateByListosParaProcesar(_PF : TPasoDeFabricacion);
  constructor CreateByBloqueados;

  constructor CreateByFiltros(_FechaDesde: String;
                              _FechaHasta: String;
                              _VendedorID: TObjectID = NullID;
                              _CodigoCliente : String = '';
                              _DescripcionCliente : String = '';
                              _A : string = '';
                              _T : string = '';
                              _C : string = '';
                              _CRC : string = '';
                              _StartRow : integer = 0;
                              _Rows : integer = 0);

  function CreateNewObject: TPDObject; override;
  function FindItem(_Item: TEntero; _Rest: Boolean = False): Boolean;
  function FindItemAndPedido(_NumPed: TEntero; _Item: TEntero): Boolean;
  function FindPedidoID(_PID: TObjectID): Boolean;
  property Actual: TPedidoDeVentaItem read GetActual;
end;

TPedidoDeVentaItemStateLog = class(TPDObject)
  private
    FPedidoDeVentaItemID: TObjectID;
    FfechaHora: TFechaHora;
    Fusuario: TPDObject;
    FusuarioID: TObjectID;
    FestadoDePedidoDeVentaItem: TPDObject;
    FestadoDePedidoDeVentaItemID: TObjectID;
    FPedidoDeVentaItem: TPDObject;
    fObservacion: TString;
//    FstatementType: TString;
//    fstatement: TString;
    procedure SetestadoDePedidoDeVentaItemID(Value: TObjectID);
    function GetestadoDePedidoDeVentaItem: TEstadoDePedidoDeVentaITem;
    procedure SetusuarioID(Value: TObjectID);
    function Getusuario: TUsuario;
    function GetPedidoDeVentaItem: TPedidoDeVentaItem;
  public
    constructor Create; override;
    property estadoDePedidoDeVentaItemID : TObjectID read FestadoDePedidoDeVentaItemID write SetestadoDePedidoDeVentaItemID;
    property estadoDePedidoDeVentaItem: TEstadoDePedidoDeVentaITem read GetestadoDePedidoDeVentaItem;
    property UsuarioID: TObjectID read FusuarioID write SetusuarioID;
    property Usuario: TUsuario read Getusuario;
    property FechaHora: TFechaHora read FfechaHora write FfechaHora;
    property PedidoDeVentaItemID : TObjectID read FPedidoDeVentaItemID write FPedidoDeVentaItemID;
    property PedidoDeVentaItem: TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property Observacion: TString read fObservacion write fObservacion;
//    property statementType: TString read FstatementType write FstatementType;
//    Property statement: TString read fstatement write Setstatement;
end;

TPedidoDeVentaItemStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _EstadoDePedidoDeVentaItemID = 'EstadoDePedidoDeVentaItemID';
      _UsuarioID                   = 'UsuarioID';
      _FechaHora                   = 'FechaHora';
      _PedidoDeVentaItemID         = 'PedidoDeVentaItemID';
      _Observaciones               = 'Observaciones';
      _StatementType               = 'StatementType';
      _Statement                   = 'Statement';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaItemStateLogList = class(TPDList)
  private
    function GetActual: TPedidoDeVentaItemStateLog;
  public

    constructor CreateAll;
    constructor CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
    function CreateNewObject: TPDObject; override;
    property Actual: TPedidoDeVentaItemStateLog read GetActual;
end;

TPedidoDeVentaEstadoDeMigracion = class(TPDObject)
  private
    FPedidodeVentaID   : TObjectID;
    FPedidoDeVenta     : TPDObject;
    FEstadoDeMigracion : TBoolean;
    FDetalleDeError    : TString;
    FUsuarioID         : TObjectID;
    FUsuario           : TPDObject;
    FEmpresaDestinoID  : TObjectID;
    FEmpresaDestino    : TPDObject;
    FFechaHora         : TFechaHora;
    function GetPedidoDeVenta : TPedidoDeVenta;
    function GetUsuario: TUsuario;
    function GetEmpresaDestino: TEmpresaDeSistema;
    procedure SetPedidoDeVentaID(Value : TObjectID);
    procedure SetUsuarioID(const Value: TObjectID);
    procedure SetEmpresaDestinoID(const Value: TObjectID);
  public
    constructor Create; override;
    property DetalleDeError    : TString   read FDetalleDeError write FDetalleDeError;
    property EstadoDeMigracion : TBoolean  read FEstadoDeMigracion write FEstadoDeMigracion;
    property PedidoDeVenta     : TPedidoDeVenta read GetPedidoDeVenta;
    property PedidoDeVentaID   : TObjectID read FPedidoDeVentaID write SetPedidoDeVentaID;
    property Usuario           : TUsuario  read GetUsuario;
    property UsuarioID         : TObjectID read FUsuarioID write SetUsuarioID;
    property EmpresaDestino    : TEmpresaDeSistema read GetEmpresaDestino;
    property EmpresaDestinoID  : TObjectID read FEmpresaDestinoID write SetEmpresaDestinoID;
    property FechaHora         : TFechaHora read FFechaHora write FFechaHora;
end;

TPedidoDeVentaEstadoDeMigracionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _DetalleDeError    = 'DetalleDeError';
    _EstadoDeMigracion = 'EstadoDeMigracion';
    _PedidoDeVentaID   = 'PedidoDeVentaID';
    _UsuarioID         = 'UsuarioID';
    _EmpresaDestinoID  = 'EmpresaDestinoID';
    _FechaHora         = 'FechaHora';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaEstadoDeMigracionList = class(TPDList)
private
  function GetActual : TPedidoDeVentaEstadoDeMigracion;
public
  constructor CreateAll;
  Constructor CreateByPedidoDeVenta (_PV : TPedidoDeVenta);
  function CreateNewObject: TPDObject; override;
  property Actual : TPedidoDeVentaEstadoDeMigracion read GetActual;
end;

TPedidoDeVentaItemPrecioDeLista = class(TPDObject)
  private
    FmonedaDePrecio: TPDObject;
    FmonedaDePrecioID: TObjectID;
    FPrecio: TReal;
    FDescripcion: TString;
    FPedidoDeVentaItemID: TObjectID;
    FExigePrecio: TBoolean;
    FObjetoID: TObjectID;
    FTipoDePrecioCunioID: TObjectID;
    FTipoDePrecioCunio: TPDObject;
    FPedidoDeVentaItem: TPDObject;

    FCCFabricadoDescripcion: TString;
    FCCObjetoDescripcion: TString;
    FCCPedidoDeVentaItemNumero: TEntero;
    FCCCunioCodigo: TString;
    FCCCunioID: TObjectID;
    FCCTipoDePrecioDescripcion: TString;
    FCCFabricadoCodigo: TString;
    FCCObjetoCodigo: TString;
    FCCPedidoDeVentaNumero: TEntero;
    FCCFabricadoID: TObjectID;
    FCCEstadoDePedidoDeVentaItemDescripcion: TString;
    FCCEstadoDePedidoDeVentaItemCodigo: TString;
    FCCPedidoDeVentaItemFecha: TFecha;

    procedure SetmonedaDePrecioID(Value: TObjectID);
    function GetmonedaDePrecio: TMoneda;
    procedure SetTipoDePrecioCunioID(const Value: TObjectID);
    function GetTipoDePrecioCunio: TTipoDePrecioCunio;
    procedure SetPedidoDeVentaItemID(const Value: TObjectID);
    function GetPedidoDeVentaItem: TPedidoDeVentaItem;
  public
    constructor Create; override;
    property PedidoDeVentaItem : TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property PedidoDeVentaItemID : TObjectID read FPedidoDeVentaItemID write SetPedidoDeVentaItemID;
    property Descripcion: TString read FDescripcion write FDescripcion;
    property Precio: TReal read FPrecio write FPrecio;
    property MonedaDePrecioID: TObjectID read FmonedaDePrecioID write SetmonedaDePrecioID;
    property MonedaDePrecio: TMoneda read GetmonedaDePrecio;
    property ExigePrecio : TBoolean read FExigePrecio write FExigePrecio;
    property TipoDePrecioCunio : TTipoDePrecioCunio read GetTipoDePrecioCunio;
    property TipoDePrecioCunioID : TObjectID read FTipoDePrecioCunioID write SetTipoDePrecioCunioID;
    property ObjetoID : TObjectID read FObjetoID write FObjetoID;


    property CCPedidoDeVentaNumero      : TEntero read FCCPedidoDeVentaNumero;
    property CCPedidoDeVentaItemNumero  : TEntero read FCCPedidoDeVentaItemNumero;
    property CCPedidoDeVentaItemFecha   : TFecha  read FCCPedidoDeVentaItemFecha;
    property CCFabricadoID              : TObjectID read FCCFabricadoID;
    property CCFabricadoCodigo          : TString read FCCFabricadoCodigo;
    property CCFabricadoDescripcion     : TString read FCCFabricadoDescripcion;
    property CCCunioID                  : TObjectID read FCCCunioID;
    property CCCunioCodigo              : TString read FCCCunioCodigo;
    property CCTipoDePrecioDescripcion  : TString read FCCTipoDePrecioDescripcion;
    property CCObjetoCodigo             : TString read FCCObjetoCodigo;
    property CCObjetoDescripcion        : TString read FCCObjetoDescripcion;
    property CCEstadoDePedidoDeVentaItemCodigo      : TString read FCCEstadoDePedidoDeVentaItemCodigo;
    property CCEstadoDePedidoDeVentaItemDescripcion : TString read FCCEstadoDePedidoDeVentaItemDescripcion;


end;

TPedidoDeVentaItemPrecioDeListaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function ViewName: string; override;
    const
      _PedidoDeVentaItemID     = 'PedidoDeVentaItemID';
      _Descripcion             = 'PedidoDeVentaItemPrecio';
      _Precio                  = 'Precio';
      _MonedaDePrecioID        = 'MonedaDePrecioID';
      _ExigePrecio             = 'ExigePrecio';
      _TipoDePrecioDeCunioID   = 'TipoDePrecioDeCunioID';
      _ObjectoID               = 'ObjectoID';

      // de la vista
      _PedidoDeVentaNumero     = 'PedidoDeVentaNumero';
      _PedidoDeVentaItemNumero = 'PedidoDeVentaItemNumero';
      _FabricadoID             = 'FabricadoID';
      _FabricadoCodigo         = 'FabricadoCodigo';
      _FabricadoDescripcion    = 'FabricadoDescripcion';
      _CunioID                 = 'CunioID';
      _CunioCodigo             = 'CunioCodigo';
      _TipoDePrecioDescripcion = 'TipoDePrecioDescripcion';
      _ArticuloCodigo          = 'ArticuloCodigo';
      _ArticuloDescripcion     = 'ArticuloDescripcion';
      _TerminacionCodigo       = 'TerminacionCodigo';
      _TerminacionDescripcion  = 'TerminacionDescripcion';
      _ProcesoCodigo           = 'ProcesoCodigo';
      _ProcesoDescripcion      = 'ProcesoDescripcion';
      _ColorCodigo             = 'ColorCodigo';
      _ColorDescripcion        = 'ColorDescripcion';
      _DesarrolloCodigo        = 'DesarrolloCodigo';
      _DesarrolloDescripcion   = 'DesarrolloDescripcion';
      _EstadoDePedidoDeVentaItemCodigo      = 'EstadoDePedidoDeVentaItemCodigo';
      _EstadoDePedidoDeVentaItemDescripcion = 'EstadoDePedidoDeVentaItemDescripcion';
      _PedidoDeVentaFechaReal  = 'PedidoDeVentaFechaReal';



    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPedidoDeVentaItemPrecioDeListaList = class(TPDList)
  private
    function GetActual: TPedidoDeVentaItemPrecioDeLista;
  public
    constructor CreateAll;
    constructor CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
    constructor CreateByPedidoDeVentaItemBloqueados(_PVI: TPedidoDeVentaItem);
    constructor CreateByBloqueados;
    function CreateNewObject: TPDObject; override;
    property Actual: TPedidoDeVentaItemPrecioDeLista read GetActual;
end;

TPresupuestoDeVenta = class(TDocumentoLetrado)
private
  FMonedaID: TObjectID;
  FMarcaID: TObjectID;
  FGrupoDeVendedorID: TObjectID;
  FEmpresaFleteID: TObjectID;
  FCondicionDeVentaID: TObjectID;
  FClienteID: TObjectID;
  FTipoDePresupuestoDeVentaID: TObjectID;
  FTipoDePresupuestoDeVenta: TPDObject;
  FFechaReal: TFecha;
  FPorcentajeComisionPorFacturacion: TReal;
  FPorcentajeComisionPorCobranza: TReal;
  FMonedaCotizacion: TReal;
  FNroOrdenDeCompraCliente: TString;
  FDireccionDeEntregaID: TObjectID;
  FDireccionDeEntrega: TPDObject;
  FMoneda: TPDObject;
  FMarca: TPDObject;
  FGrupoDeVendedor: TPDObject;
  FEmpresaFlete: TPDObject;
  FCondicionDeVenta: TPDObject;
  FCliente: TPDObject;
  FObservacionesParaFabrica: TString;
  FObservaciondeEstado: TString;
  FItems: TPresupuestoDeVentaItemList;
  FImporteNetoDelPresupuesto: TReal;
  FEstadoDePresupuestoDeVentaID: TObjectID;
  FEstadoDePresupuestoDeVenta: TPDObject;
  FStateLogs: TPresupuestoDeVentaStateLogList;
  FEstadoNuevoID: TObjectID;
  FEstadoNuevoCodigo: TString;
  FestadoNuevo: TString;
  FDescuentoEspecial: TReal;
  FPorcentajeDeTolerancia: TReal;
  FEntregaTotal: TBoolean;
  FListaDePrecioID: TObjectID;
  FListaDePrecio: TPDObject;
  FesImportacionDeDatos: TBoolean;
  FtmpNoCobrarCostoCunioNuevo: TBoolean;
  FtmpInsertarItemCostoCunioNuevo: TBoolean;
  FtmpProrratearCostoCunioNuevo: TBoolean;
  FtmpCostoCunioNuevo: TReal;
  FtmpCostoDeMatriceria: TPresupuestoDeVentaItem;
  FtmpCostoDeMatriceriaCodigoCunio: TString;
  FEsModificacion: Boolean;
  // del create compuesto
  FClienteCodigo: TString;
  FClienteDescripcion: TString;
  FGrupoDeVendedorDescripcion: TString;
  FEstadoDePedidoDeVentaDescripcion: TString;
  FEstadoOriginalID: TObjectID;
  FCondicionDeVentaDetalleID: TObjectID;
  FCondicionDeVentaDetalle: TPDObject;
  function GetCliente: TCliente;
  procedure SetClienteID(Value: TObjectID);
  function GetCondicionDeVenta: TCondicionDeVenta;
  procedure SetCondicionDeVentaID(Value: TObjectID);
  function GetEmpresaFlete: TEmpresa;
  procedure SetEmpresaFleteID(Value: TObjectID);
  function GetGrupoDeVendedor: TGrupoDeVendedor;
  procedure SetGrupoDeVendedorID(Value: TObjectID);
  function GetMarca: TMarca;
  procedure SetMarcaID(Value: TObjectID);
  function GetMoneda: TMoneda;
  procedure SetMonedaID(Value: TObjectID);
  function getDireccionDeEntrega: TDeposito;
  procedure SetDireccionDeEntregaID(const Value: TObjectID);
  function GetItems: TPresupuestoDeVentaItemList;
  procedure SetFechaReal(const Value: TFecha);
  procedure ValidarNumeroDePresupuestoDuplicado(_NumeroDePresupuesto: Integer; _ID: TObjectID);
  function GetEstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta;
  procedure SetEstadoDePresupuestoDeVentaID(const Value: TObjectID);
  procedure SetImporteNetoDelPresupuesto(const Value: TReal);
  function GetStateLogs: TPresupuestoDeVentaStateLogList;
  procedure SetEstadoNuevoID(const Value: TObjectID);
  function GetObservaciondeEstado: TString;
  function GetFechaDeAlta: TFecha;
  function GetUsuarioDeAlta: TUsuario;
  function GetItemsActualizados: TPresupuestoDeVentaItemList;
  procedure SetPorcentajeDeTolerancia(const Value: TReal);
  function GetTipoDePresupuestoDeVenta: TTipoDePresupuestoDeVenta;
  procedure SetTipoDePresupuestoDeVentaID(const Value: TObjectID);
  function GetListaDePrecio: TListaDePrecio;
  procedure SetListaDePrecioID(const Value: TObjectID);
  function GetImporteNetoDelPresupuesto: TReal;
  Procedure AgregarItemConCostoDeMatriceria(_CostoDeMatriceria: TReal);
  procedure SetNumero(const Value: TEntero);
  procedure SetCondicionDeVentaDetalleID(const Value: TObjectID);
  function GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
public
  constructor Create; override;
  procedure Delete; Override;
  Procedure DeleteItems;
  Function Reporte(_EsParaMail: Boolean = False; _TipoDeFormulario : TTipoDeFormulario = nil ): String;
  procedure CalcularImporteNetoDelPresupuesto;
  Procedure ColocarEstadoGrabado;
  Procedure ColocarEstadoConfirmado;
  Procedure ColocarEstadoARevisarPorGerencia;
  procedure AgregarNuevoEstadoAlLog;
  procedure ValidateOnInsert; override;
  procedure ValidateOnUpdate; override;
  Procedure LimpiarItemsDeMemoria;
  function Grabar: Boolean; override;
  function Save: Boolean; override;
  property Cliente: TCliente read GetCliente;
  property ClienteID: TObjectID read FClienteID write SetClienteID;
  property CondicionDeVenta: TCondicionDeVenta read GetCondicionDeVenta;
  property CondicionDeVentaID: TObjectID read FCondicionDeVentaID write SetCondicionDeVentaID;
  property CondicionDeVentaDetalle: TCondicionDeVentaDetalle read GetCondicionDeVentaDetalle;
  property CondicionDeVentaDetalleID:  TObjectID read FCondicionDeVentaDetalleID write SetCondicionDeVentaDetalleID;
  property FechaReal: TFecha read FFechaReal write SetFechaReal;
  property EmpresaFlete: TEmpresa read GetEmpresaFlete;
  property EmpresaFleteID: TObjectID read FEmpresaFleteID write SetEmpresaFleteID;
  property GrupoDeVendedor: TGrupoDeVendedor read GetGrupoDeVendedor;
  property GrupoDeVendedorID: TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
  property DireccionDeEntregaID: TObjectID read FDireccionDeEntregaID write SetDireccionDeEntregaID;
  property DireccionDeEntrega: TDeposito read getDireccionDeEntrega;
  property Marca: TMarca read GetMarca;
  property MarcaID: TObjectID read FMarcaID write SetMarcaID;
  property Moneda: TMoneda read GetMoneda;
  property MonedaID: TObjectID read FMonedaID write SetMonedaID;
  property MonedaCotizacion: TReal read FMonedaCotizacion write FMonedaCotizacion;
  property NroOrdenDeCompraCliente: TString read FNroOrdenDeCompraCliente write FNroOrdenDeCompraCliente;
  property TipoDePresupuestoDeVenta: TTipoDePresupuestoDeVenta read GetTipoDePresupuestoDeVenta;
  property TipoDePresupuestoDeVentaID : TObjectID read FTipoDePresupuestoDeVentaID write SetTipoDePresupuestoDeVentaID;
  property ObservacionesParaFabrica : TString read FObservacionesParaFabrica write FObservacionesParaFabrica;
  property Items: TPresupuestoDeVentaItemList read GetItems;
  property ImporteNetoDelPresupuesto : TReal read GetImporteNetoDelPresupuesto write SetImporteNetoDelPresupuesto;
  property PorcentajeComisionPorCobranza : TReal read FPorcentajeComisionPorCobranza write FPorcentajeComisionPorCobranza;
  property PorcentajeComisionPorFacturacion : TReal read FPorcentajeComisionPorFacturacion write FPorcentajeComisionPorFacturacion;
  property EstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta read GetEstadoDePresupuestoDeVenta;
  property EstadoDePresupuestoDeVentaID : TObjectID Read FEstadoDePresupuestoDeVentaID Write SetEstadoDePresupuestoDeVentaID;
  property StateLogs: TPresupuestoDeVentaStateLogList read GetStateLogs;
  property FechaDeAlta: TFecha read GetFechaDeAlta;
  property UsuarioDeAlta: TUsuario read GetUsuarioDeAlta;
  property DescuentoEspecial : TReal read FDescuentoEspecial write FDescuentoEspecial;
  // propiedades temporales para calcular el costo de matricería del cuño
  property tmpProrratearCostoCunioNuevo : TBoolean read FtmpProrratearCostoCunioNuevo write FtmpProrratearCostoCunioNuevo;
  property tmpInsertarItemCostoCunioNuevo : TBoolean read FtmpInsertarItemCostoCunioNuevo write FtmpInsertarItemCostoCunioNuevo;
  property tmpNoCobrarCostoCunioNuevo : TBoolean read FtmpNoCobrarCostoCunioNuevo write FtmpNoCobrarCostoCunioNuevo;
  property tmpCostoMatriceria : TPresupuestoDeVentaItem read FtmpCostoDeMatriceria write FtmpCostoDeMatriceria;
  property tmpCostoCunioNuevo : TReal read FtmpCostoCunioNuevo write FtmpCostoCunioNuevo;
  property tmpCostoDeMatriceriaCodigoCunio : TString read FtmpCostoDeMatriceriaCodigoCunio write FtmpCostoDeMatriceriaCodigoCunio;
  // Propertys temporales
  property EstadoNuevoID : TObjectID read FEstadoNuevoID Write SetEstadoNuevoID;
  property EstadoNuevoCodigo : TString read FEstadoNuevoCodigo Write FEstadoNuevoCodigo;
  property EstadoNuevo: TString read FestadoNuevo Write FestadoNuevo;
  property ObservacionDeEstado : TString read GetObservaciondeEstado write FObservaciondeEstado;
  property EsModificacion: Boolean read FEsModificacion write FEsModificacion;
  property EntregaTotal: TBoolean read FEntregaTotal write FEntregaTotal;
  property PorcentajeDeTolerancia: TReal read FPorcentajeDeTolerancia write SetPorcentajeDeTolerancia;
  property ListaDePrecioID: TObjectID read FListaDePrecioID Write SetListaDePrecioID;
  property ListaDePrecio: TListaDePrecio read GetListaDePrecio;
  property esImportacionDeDatos : TBoolean read FesImportacionDeDatos write FesImportacionDeDatos; // esto se setea en forma manual para no asignar numero de pedido automático
end;

TPresupuestoDeVentaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    const
      _Numero                        = 'Numero';
      _Observaciones                 = 'Observaciones';
      _ObservacionesParaFabrica      = 'ObservacionesParaFabrica';
      _ClienteID                     = 'ClienteID';
      _CondiciondeVentaID            = 'CondicionDeVentaID';
      _CondicionDeVentaDetalleID     = 'CondicionDeVentaDetalleID';
      _FechaReal                     = 'FechaReal';
      _EmpresaFleteID                = 'EmpresaFleteID';
      _GrupoDeVendedorID             = 'GrupoDeVendedorID';
      _MarcaID                       = 'MarcaID';
      _MonedaID                      = 'MonedaID';
      _MonedaCotizacion              = 'MonedaCotizacion';
      _NroOrdenDeCompraCliente       = 'NroOrdenDeCompraCliente';
      _PorcentComisionPorCobranza    = 'PorcentComisionPorCobranza';
      _PorcentComisionPorFacturacion = 'PorcentComisionPorFacturacion';
      _DirecciondeEntregaID          = 'DireccionDeEntregaID';
      _TipoDeFormularioID            = 'TipoDeFormularioID';
      _ImporteNetoDelPresupuesto     = 'ImporteNetoDelPresupuesto';
      _CentroDeFacturacionID         = 'CentroDeFacturacionID';
      _NumeroLetrado                 = 'NumeroLetrado';
      _EstadoDePresupuestoDeVentaID  = 'EstadoDePresupuestoDeVentaID';
      _DescuentoEspecial             = 'DescuentoEspecial';
      _TipoDePresupuestoDeVentaID    = 'TipoDePresupuestoDeVentaID';
      _EntregaTotal                  = 'EntregaTotal';
      _ListaDePrecioID               = 'ListaDePrecioID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPresupuestoDeVentaList = class(TDocumentoList)
  private
    function GetActual: TPresupuestoDeVenta;
  public
    constructor CreateAll;
    constructor CreateByCliente(_C: TCliente);
    Constructor CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_G: TGrupoDeVendedor; _FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID);
    constructor CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde: String; _FechaHasta: String;_EstadoID: TObjectID);
    constructor CreateByFechaDesdeFechaHasta(_FechaDesde: String;_FechaHasta: String; _EstadoID: TObjectID = NullID;_Descendente: Boolean = False);
    constructor CreateEmpty;
    constructor CreateByNumeroDePresupuestoYIDDiferente(_NumeroDePresupuesto: Integer; _ID: TObjectID);
    constructor CreateByNumeroDePresupuesto(_NumeroDePresupuesto: Integer);
    constructor CreateMaximoNumero;
    constructor CreateByEstados(_Est:TOrganizacionDeMonitorEstadoPermitidoList);
    constructor CreateByGrupoDeVendedores(_G: TGrupoDeVendedor);
    constructor CreateByMarca(_M: TMarca);
    constructor CreateByPresupuestoDeVenta(_P: TPresupuestoDeVenta);
    function FindNumero(_numero: TEntero): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual: TPresupuestoDeVenta read GetActual;
end;

TpresupuestoDeVentaStateLog = class(TPDObject)
  private
    FPresupuestoDeVentaID: TObjectID;
    FPresupuestoDeVenta: TPDObject;
    FfechaHora: TFechaHora;
    Fusuario: TPDObject;
    FusuarioID: TObjectID;
    FEstadoDePresupuestoDeVenta: TPDObject;
    FEstadoDePresupuestoDeVentaID: TObjectID;
    fObservacion: TString;
    procedure SetEstadoDePresupuestoDeVentaID(Value: TObjectID);
    function GetEstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta;
    procedure SetusuarioID(Value: TObjectID);
    function Getusuario: TUsuario;
    function getPresupuestoDeVenta: TPresupuestoDeVenta;
  public
    constructor Create; override;
    property EstadoDePresupuestoDeVentaID: TObjectID read FEstadoDePresupuestoDeVentaID write SetEstadoDePresupuestoDeVentaID;
    property EstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta read GetEstadoDePresupuestoDeVenta;
    property UsuarioID: TObjectID read FusuarioID write SetusuarioID;
    property Usuario: TUsuario read Getusuario;
    property FechaHora: TFechaHora read FfechaHora write FfechaHora;
    property PresupuestoDeVentaID: TObjectID read FPresupuestoDeVentaID write FPresupuestoDeVentaID;
    property PresupuestoDeVenta: TPresupuestoDeVenta read getPresupuestoDeVenta;
    property Observacion: TString read fObservacion write fObservacion;
end;

TpresupuestoDeVentaStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _EstadoDePresupuestoDeVentaID = 'EstadoDepresupuestoDeVentaID';
      _UsuarioID                    = 'UsuarioID';
      _FechaHora                    = 'FechaHora';
      _PresupuestoDeVentaID         = 'PresupuestoDeVentaID';
      _Observaciones                = 'Observaciones';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPresupuestoDeVentaStateLogList = class(TPDList)
  private
    function GetActual: TpresupuestoDeVentaStateLog;
  public
    constructor CreateAll;
    constructor CreateByPresupuestoDeVenta(_P: TPresupuestoDeVenta);
    function CreateNewObject: TPDObject; override;
    property Actual: TpresupuestoDeVentaStateLog read GetActual;
end;

TPresupuestoDeVentaItem = class(TPDObject)
private
  FProducto: TPDObject;
  FProductoID: TObjectID;
  FObservacionesParaFabrica: TString;
  fObservacion: TString;
  FitemNro: TEntero;
  FDiasDeFabricacion: TEntero;
  FFechaDeFinDeFabricacion: TFecha;
  FCantidadPedida: TReal;
  FcantidadFacturada: TReal;
  FcantidadCancelada: TReal;
  FPresupuestoDeVenta: TPDObject;
  FPresupuestoDeVentaID: TObjectID;
  FPrecioDeVenta: TReal;
  FPrecioDeLista: TReal;
  FPrecioVentaAnterior: TReal;
  FTiempoEstimadoProduccion: TEntero;
  FCodigoProductoCliente: TString;
  FFechaDelpresupuesto: TFecha;
  FMonedaDelpresupuesto: TPDObject;
  FListaDePrecio: TPDObject;
  FdescripcionDelItem: TString;
  FporcentajeDescuento: TReal;
  FporcentajeAnticipo: TReal;
  FGuardandoDesdeElPadre: Boolean;
  FTipoDeFlexibilidad: TPDObject;
  FTipoDeFlexibilidadID: TObjectID;
  FPorcentajeDeTolerancia: TReal;
  FEntregaTotal: TBoolean;
  FEntregaModificable: Boolean;
  FLote: TEntero;
  FEstado: TPDObject;
  FEstadoID: TObjectID;
  FColorTemporal: Integer;
  fNumHojaDeRuja: string;
  fCantidadHojaDeRuta: Real;
  fFechaDeIngresoHojaDeRuta: Tdate;
  FParaProduccion: TBoolean;
  FEsMuestra: TBoolean;
  FesImportacionDeDatos: TBoolean;
  FDetalleDePrecios: TPDList;
  FNoValidaFecha: TBoolean;

  // variables del Tpresupuestodeventa
  FPVTipoDeFormularioID: TObjectID;
  FPVMonedaID: TObjectID;
  FPVMarcaID: TObjectID;
  FPVGrupoDeVendedorID: TObjectID;
  FPVEmpresaFleteID: TObjectID;
  FPVCondicionDeVentaID: TObjectID;
  FPVClienteID: TObjectID;
  FPVTipoDepresupuestoDeVentaID: TObjectID;
  FPVNumero: TEntero;
  FPVCentroDeFacturacion: TString;
  FPVFechaReal: TFecha;
  FPVPorcentajeComisionPorFacturacion: TReal;
  FPVPorcentajeComisionPorCobranza: TReal;
  FPVMonedaCotizacion: TReal;
  FPVNroOrdenDeCompraCliente: TString;
  FPVDireccionDeEntregaID: TObjectID;
  FPVObservaciones: TString;
  FPVObservacionesParaFabrica: TString;
  FPVObservaciondeEstado: TString;
  FPVImporteNetoDelpresupuesto: TReal;
  FPVNumeroLetrado: TString;
  FPVEstadoDepresupuestoDeVentaID: TObjectID;
  FPVDescuentoEspecial: TReal;
  FPVPorcentajeDeTolerancia: TReal;
  FPVEntregaTotal: TBoolean;
  FPVListaDePrecioID: TObjectID;
  // variables del Tpresupuestodeventa
  // Variables del Fabricado
  FFBCodigo: TString;
  FFBDescripcion: TString;
  FFBTerminacionID: TObjectID;
  FFBCunioID: TObjectID;
  FFBArticuloID: TObjectID;
  FFBcrc: TEntero;
  FFBProductoID: TObjectID;
  FListaDePrecioID: TObjectID;
  FMonedaDelPresupuestoID: TObjectID;
  fEsCambioDeEstado: Boolean;
  FImporteTotal: TReal;
  // Variables del Fabricado
  function getPresupuestoDeVenta: TPresupuestoDeVenta;
  procedure SetPresupuestoDeVentaID(Value: TObjectID);
  procedure SetProductoID(Value: TObjectID);
  function GetProducto: TProducto;
  function getCantidadPendiente: TReal;
  // function GetProductosReservadosEnStock: TStockItemList;
  function GetTipoDeFlexibilidad: TTipoDeFlexibilidad;
  procedure SetPorcentajeDeTolerancia(const Value: TReal);
  function GetEstado: TEstadoDepresupuestoDeVentaITem;
  procedure SetEstadoID(const Value: TObjectID);
  function GetFechaDeFinDeFabricacion: TFecha;
  function GetFechaDelpresupuesto: TFecha;
  function GetMonedaDelPresupuesto: TMoneda;
  function GetListaDePrecio: TListaDePrecio;
  function GetDetalleDePrecios: TPresupuestoDeVentaItemPrecioDeListaList;
  function GetPrecioDeLista: TReal;
  procedure SetPrecioDeLista(const Value: TReal);
  function GetTiempoEstimadoProduccion: TEntero;
  procedure SetFechaDelpresupuesto(const Value: TFecha);
  function GetPrecioDeVenta: TReal;
  procedure SetPrecioDeVenta(const Value: TReal);
  procedure SetTipoDeFlexibilidadID(const Value: TObjectID);
  procedure setListaDePrecioID(const Value: TObjectID);
  procedure SetMonedaDelPresupuestoID(const Value: TObjectID);
  function GetTipoDeFlexibilidadID: TObjectID;
  function GetImporteTotal: TReal;
protected
  procedure GuardarDetalleDePrecio;
public
  constructor Create; override;
  procedure Delete; Override;
  function Save: Boolean; Override;
  Procedure ColocarEstadoGrabado;
  Procedure ColocarEstadoConfirmado;
  Procedure ColocarEstadoPendiente;
  // procedure AsignarStockAlItem;
  // properties del presupuesto de ventaItems
  property PresupuestoDeVentaID: TObjectID read FPresupuestoDeVentaID write SetPresupuestoDeVentaID;
  property PresupuestoDeVenta: TPresupuestoDeVenta read getPresupuestoDeVenta;
  property cantidadCancelada : TReal read FcantidadCancelada write FcantidadCancelada;
  property cantidadFacturada : TReal read FcantidadFacturada write FcantidadFacturada;
  property CantidadPedida: TReal read FCantidadPedida write FCantidadPedida;
  property cantidadPendiente: TReal read getCantidadPendiente;
  property DiasDeFabricacion : TEntero read FDiasDeFabricacion write FDiasDeFabricacion;
  property TipoDeFlexibilidadID: TObjectID read GetTipoDeFlexibilidadID write SetTipoDeFlexibilidadID;
  property TipoDeFlexibilidad: TTipoDeFlexibilidad Read GetTipoDeFlexibilidad;
  property itemNro: TEntero read FitemNro write FitemNro;
  property Observacion: TString read fObservacion write fObservacion;
  property ObservacionesParaFabrica : TString read FObservacionesParaFabrica write FObservacionesParaFabrica;
  property ProductoID: TObjectID read FProductoID write SetProductoID;
  property Producto: TProducto read GetProducto;
  property CodigoProductoCliente: TString read FCodigoProductoCliente write FCodigoProductoCliente;
  property descripcionDelItem : TString read FdescripcionDelItem write FdescripcionDelItem;
  property PrecioDeVenta: TReal read GetPrecioDeVenta write SetPrecioDeVenta;
  property PrecioDeLista: TReal Read GetPrecioDeLista;
  property PrecioVentaAnterior: TReal read FPrecioVentaAnterior write FPrecioVentaAnterior;
  property DetalleDePrecios: TPresupuestoDeVentaItemPrecioDeListaList read GetDetalleDePrecios;
  property TiempoEstimadoProduccion: TEntero read GetTiempoEstimadoProduccion;
  property FechaDeFinDeFabricacion: TFecha read GetFechaDeFinDeFabricacion;
  property porcentajeAnticipo : TReal read FporcentajeAnticipo write FporcentajeAnticipo;
  property porcentajeDescuento : TReal read FporcentajeDescuento write FporcentajeDescuento;
  // properties del presupuesto de ventaItems
  property EntregaModificable : Boolean read FEntregaModificable Write FEntregaModificable;
  property ColorTemporal: Integer Read FColorTemporal Write FColorTemporal;
  property FechaDelpresupuesto: TFecha read GetFechaDelpresupuesto write SetFechaDelpresupuesto;
  property MonedaDelPresupuestoID: TObjectID read FMonedaDelPresupuestoID write SetMonedaDelPresupuestoID ;
  property MonedaDelPresupuesto: TMoneda read GetMonedaDelPresupuesto;
  property ListaDePrecioID : TObjectID read FListaDEPrecioID write setListaDePrecioID;
  property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
  property ImporteTotal: TReal read GetImporteTotal;
  property NumHojaDeRuta: string read fNumHojaDeRuja write fNumHojaDeRuja;
  property CantidadHojaDeRuta : Real read fCantidadHojaDeRuta write fCantidadHojaDeRuta;
  property FechaDeIngresoHojaDeRuta : Tdate read fFechaDeIngresoHojaDeRuta write fFechaDeIngresoHojaDeRuta;
  property ParaProduccion: TBoolean read FParaProduccion write FParaProduccion;
  property EsMuestra: TBoolean read FEsMuestra write FEsMuestra;
  property esImportacionDeDatos: TBoolean read FesImportacionDeDatos write FesImportacionDeDatos; // esto se setea en forma manual para no validar fecha de fabricacion o entrega
  property EntregaTotal: TBoolean read FEntregaTotal write FEntregaTotal;
  property PorcentajeDeTolerancia: TReal read FPorcentajeDeTolerancia write SetPorcentajeDeTolerancia;
  property Lote: TEntero read FLote write FLote;
  property EstadoID: TObjectID read FEstadoID Write SetEstadoID;
  property Estado: TEstadoDepresupuestoDeVentaITem Read GetEstado;
  // Properties del presupuesto De Venta
  property PVNumero: TEntero Read FPVNumero;
  property PVClienteID: TObjectID read FPVClienteID;
  property PVCondicionDeVentaID: TObjectID read FPVCondicionDeVentaID;
  property PVFechaReal: TFecha read FPVFechaReal;
  property PVEmpresaFleteID: TObjectID read FPVEmpresaFleteID;
  property PVGrupoDeVendedorID: TObjectID read FPVGrupoDeVendedorID;
  property PVDireccionDeEntregaID: TObjectID read FPVDireccionDeEntregaID;
  property PVMarcaID: TObjectID read FPVMarcaID;
  property PVMonedaID: TObjectID read FPVMonedaID;
  property PVMonedaCotizacion: TReal read FPVMonedaCotizacion;
  property PVNroOrdenDeCompraCliente: TString read FPVNroOrdenDeCompraCliente;
  property PVPorcentajeComisionPorCobranza : TReal read FPVPorcentajeComisionPorCobranza;
  property PVPorcentajeComisionPorFacturacion : TReal read FPVPorcentajeComisionPorFacturacion;
  property PVTipoDeFormularioID: TObjectID read FPVTipoDeFormularioID;
  property PVTipoDepresupuestoDeVentaID: TObjectID read FPVTipoDepresupuestoDeVentaID;
  property PVObservacionesParaFabrica : TString read FPVObservacionesParaFabrica;
  property PVImporteNetoDelpresupuesto : TReal read FPVImporteNetoDelpresupuesto;
  property PVCentroDeFacturacion: TString Read FPVCentroDeFacturacion;
  property PVNumeroLetrado: TString Read FPVNumeroLetrado;
  property PVEstadoDepresupuestoDeVentaID : TObjectID Read FPVEstadoDepresupuestoDeVentaID;
  property PVDescuentoEspecial: TReal read FPVDescuentoEspecial;
  property PVListaDePrecioID: TObjectID read FPVListaDePrecioID;
  property PVEntregaTotal: TBoolean read FPVEntregaTotal;
  // Properties del presupuesto De Venta
  // Properties del Fabricado
  property FBArticuloID: TObjectID read FFBArticuloID;
  property FBTerminacionID: TObjectID read FFBTerminacionID;
  property FBCunioID: TObjectID read FFBCunioID;
  property FBCrc: TEntero read FFBcrc;
  property FBCodigo: TString read FFBCodigo;
  property FBdescripcion: TString read FFBDescripcion;
  property FBProductoID: TObjectID read FFBProductoID;
  // Properties del Fabricado
  property EsCambioDeEstado : Boolean read fEsCambioDeEstado write fEsCambioDeEstado;
end;

TPresupuestoDeVentaItemDM = class(TSQLDBX_DMObject)
  public
    class function CreateCompuesto(_Parte : Integer = 0): String; override;
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Class Function CampoPrecioDeLista : String;
    const
      // CAMPOS DE presupuestoDEVENTAITEMS
      _PresupuestoDeVentaID     = 'PresupuestoDeVentaID';
      _CantidadCancelada        = 'CantidadCancelada';
      _CantidadFacturada        = 'CantidadFacturada';
      _CantidadPedida           = 'CantidadPedida';
      _DiasDeFabricacion        = 'DiasDeFabricacion';
      _FechaDeFinDeFabricacion  = 'FechaDeFinDeFabricacion';
      _ItemNro                  = 'ItemNro';
      _Observacion              = 'Observacion';
      _observacionesParaFabrica = 'ObservacionesParaFabrica';
      _ProductoID               = 'ProductoID';
      _PrecioDeLista            = 'PrecioDeLista2';
      _PrecioDeVenta            = 'PrecioDeVenta';
      _PrecioVentaAnterior      = 'PrecioVentaAnterior';
      _TiempoEstimadoProduccion = 'TiempoEstimadoProduccion';
      _CodigoProductoCliente    = 'CodigoProductoCliente';
      _DescripcionDelItem       = 'DescripcionDelItem';
      _PorcentajeDescuento      = 'PorcentajeDescuento';
      _PorcentajeAnticipo       = 'PorcentajeAnticipo';
      _Lote                     = 'Lote';
      _EstadoID                 = 'EstadoID';
      _ParaProduccion           = 'ParaProduccion';
      _EsMuestra                = 'EsMuestra';
      _TipoDeFlexibilidadID     = 'TipoDeFlexibilidadID';
      _EntregaTotal             = 'EntregaTotal';
      // CAMPOS DE presupuestoSDEVENTA
      _PVNumero                   = 'Numero';
      _PVObservaciones            = 'Observaciones';
      _PVobservacionesParaFabrica = 'observacionesParaFabrica';
      _PVClienteID                = 'ClienteID';
      _PVCondiciondeVentaID       = 'CondicionDeVentaID';
      _PVFechaReal                = 'FechaReal';
      _PVEmpresaFleteID           = 'EmpresaFleteID';
      _PVGrupoDeVendedorID        = 'GrupoDeVendedorID';
      _PVMarcaID                  = 'MarcaID';
      _PVmonedaID                 = 'MonedaID';
      _PVMonedaCotizacion         = 'MonedaCotizacion';
      _PVNroOrdenDeCompraCliente  = 'NroOrdenDeCompraCliente';
      _PVPorcentComisionPorCobranza    = 'PorcentComisionPorCobranza';
      _PVPorcentComisionPorFacturacion = 'PorcentComisionPorFacturacion';
      _PVDirecciondeEntregaID          = 'DireccionDeEntregaID';
      _PVTipoDeFormularioID            = 'TipoDeFormularioID';
      _PVImporteNetoDelpresupuesto     = 'ImporteNetoDelpresupuesto';
      _PVCentroDeFacturacionCodigo     = 'CentroDeFacturacionCodigo';
      _PVNumeroLetrado                 = 'numeroLetrado';
      _PVEstadoDepresupuestoDeVentaID  = 'EstadoDepresupuestoDeVentaID';
      _PVDescuentoEspecial             = 'DescuentoEspecial';
      _PVTipoDepresupuestoDeVentaID    = 'TipoDepresupuestoDeVentaID';
      _PVEntregaTotal                  = 'EntregaTotal';
      _PVListaDePrecioID               = 'ListaDePrecioID';
      // CAMPOS DE FABRICADOS
      _FBarticuloID = 'articuloID';
      _FBcunioID = 'cunioID';
      _FBterminacionID = 'TerminacionID';
      _FBProductoID = 'ProductoID';
      _FBCodigo = 'Codigo';
      _FBCrc = 'Crc';
      _FBDescripcion = 'Fabricado';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPresupuestoDeVentaItemList = class(TPDList)
  private
    function GetActual: TPresupuestoDeVentaItem;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateBypresupuesto(_PV: TPresupuestoDeVenta);
    constructor CreateByCunioYEstado(_C: TCunio; _E: TEstadoDePresupuestoDeVenta);
    constructor CreateByCunio(_C: TCunio);
    constructor CreateByID(_ID: TObjectID);
    constructor CreateByEstadoYCliente(_C: TCliente);
    constructor CreateByEstadoYClienteConSaldo(_C: TCliente);
    constructor CreateByProducto(_P: TProducto);
    constructor CreateByPrimerProductoID(_ProductoID: TObjectID);
    constructor CreateByProductoYEmpresa(_P: TProducto; _C: TCliente);
    constructor CreateByEstado(_EstadoID: TObjectID);
    constructor CreateByEstadoYProduccion(_Estado: TEstadoDepresupuestoDeVentaITem; _ParaProduccion: Boolean);
    function CreateNewObject: TPDObject; override;
    function FindItem(_Item: TEntero; _Rest: Boolean = False): Boolean;
    property Actual: TPresupuestoDeVentaItem read GetActual;
end;

TPresupuestoDeVentaItemPrecioDeLista = class(TPDObject)
  private
    FmonedaDePrecio: TPDObject;
    FmonedaDePrecioID: TObjectID;
    FPrecio: TReal;
    FDescripcion: TString;
    FPresupuestoDeVentaItemID: TObjectID;
    procedure SetmonedaDePrecioID(Value: TObjectID);
    function GetmonedaDePrecio: TMoneda;
  public
    constructor Create; override;
    property presupuestoDeVentaItemID : TObjectID read FPresupuestoDeVentaItemID write FPresupuestoDeVentaItemID;
    property Descripcion: TString read FDescripcion write FDescripcion;
    property Precio: TReal read FPrecio write FPrecio;
    property monedaDePrecioID: TObjectID read FmonedaDePrecioID write SetmonedaDePrecioID;
    property monedaDePrecio: TMoneda read GetmonedaDePrecio;
end;

TpresupuestoDeVentaItemPrecioDeListaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _PresupuestoDeVentaItemID = 'PresupuestoDeVentaItemID';
      _Descripcion              = 'PresupuestoDeVentaItemPrecio';
      _Precio                   = 'Precio';
      _MonedaDePrecioID         = 'MonedaDePrecioID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPresupuestoDeVentaItemPrecioDeListaList = class(TPDList)
  private
    function GetActual: TPresupuestoDeVentaItemPrecioDeLista;
  public
    constructor CreateAll;
    constructor CreateBypresupuestoDeVentaItem(_PVI: TPresupuestoDeVentaItem);
    function CreateNewObject: TPDObject; override;
    property Actual: TPresupuestoDeVentaItemPrecioDeLista read GetActual;
end;

THojaDeRuta = class(TPDObject)
  private
    FNumero                        : TEntero;
    FNumeroImprimible              : TString;
    FPedidoDeVentaItemID           : TObjectID;
    FProductoID                    : TObjectID;
    FProductoParteID               : TObjectID;
    FMaterialProductoParteID       : TObjectID;
    FCantidadPedida                : TREal;
    FCantidadExtra                 : TReal;
    FEstadoDeHojaDeRutaID          : TObjectID;
    FObservacionProduccion         : TString;
    FObservacionEstado             : TString;
    FProducto                      : TPDObject;
    FProductoParte                 : TPDObject;
    FProductoPadreInmediatoParte   : TPDObject;
    FMaterialProductoParte         : TPDObject;
    FPedidoDeVentaItem             : TPDObject;
    FEstadoDeHojaDeRuta            : TPDObject;
    FNoConformes                   : THojaDeRutaNoConformeList;
    FHistorialDeNoConformes        : THojaDeRutaNoConformeList;     //hace un create por productoparte
    FPasosDeFabricacion            : THojaDeRutaPasoDeFabricacionList;
    FStateLogs                     : THojaDeRutaStateLogList;
    FProductoPadreInmediatoParteID : TObjectID;
    FMesFechaDeFinDeFabricacion    : String;
    FDiaFechaDeFinDeFabricacion    : String;
    FMotivoDeNoConformeID          : TObjectID;
    FMotivoDeNoConforme            : TPDObject;
    FCantidadbuena                 : TReal;
    FCantidadParcial               : TReal;
    FEsPrioridad                   : TBoolean;
    FEstadoAnteriorID              : TObjectID;
    FEstadoAnterior                : TPDObject;
    FFechaEstimadaProduccion       : TFechaHora;
    FFechaDeCarga                  : TFecha;
    FFechaPrometida                : TFecha;
    FNumeroDeParte                 : TEntero;
    FColorDeHojaDeRuta             : TPDObject;
    FColorDeHojaDeRutaID           : TObjectID;
    FTipoDeFormulario              : TPDObject;
    FTipoDeFormularioID            : TObjectID;
    // del create compuesto
    FCCMaterialParteDescripcion                : TString;
    FCCFabricadoParteCodigo                    : TString;
    FCCEstadoCodigo                            : TString;
    FCCTerminacionParteDescripcion             : TString;
    FCCCunioParteDescripcion                   : TString;
    FCCCunioParteCodigo                        : TString;
    FCCMaterialParteCodigo                     : TString;
    FCCFabricadoParteDescripcion               : TString;
    FCCEstadoDescripcion                       : TString;
    FCCProductoCodigo                          : TString;
    FCCTipoDePedidoDeVentaCodigo               : TString;
    FCCTipoDeFlexibilidadCodigo                : TString;
    FCCTipoDeFlexibilidadDescripcion           : TString;
    FCCClienteCodigo                           : TString;
    FCCClienteDescripcion                      : TString;
    FCCObservacionVentas                       : TString;
    FCCServicioCodigo                          : TString;
    FCCServicioDescripcion                     : TString;
    FCCFabricadoParteID                        : TObjectID;
    FCCCunioFechaDeFinDeConstruccion           : TFecha;
    FCCColorDeHojaDeRutaDescripcion            : TString;
    FCCObservacionPasoDeFabricacionActual      : Tstring;
    FCCPasoDeFabricacionActualCodigo           : Tstring;
    FCCFechaDeFinDePasoPasoDeFabricacionActual : TFecha;
    FCCFechaDeFinDePasoUltimoPasoDeFabricacion : TFecha;
    FCCFechaDeIngresoPasoDeFabricacionActual   : TFechaHora;
    FCCFechaDeFinDePasoPasoDeFabricacionEmpaque: TFecha;
    FCCFechaDeEgresoPasoDeFabricacionEmpaque   : TFecha;
    FHojaDeRutaPasoDeFabricacionActual         : TPDObject;
    FHojaDeRutaUltimoPasoDeFabricacion         : TPDObject;
    FCCPasoDeFabricacionActualSectorID         : TObjectID;
    FCCServicioID                              : TObjectID;
    FCCMateriaPrimaDescripcion                 : TString;
    FCCMateriaPrimaCodigo                      : TString;
    FCCMateriaPrimaID                          : TObjectID;
    FCCFabricadoCodigo                         : TString;
    FCCFabricadoID                             : TObjectID;
    FCCEstadoColor                             : TEntero;
    FFechaImpresion                            : TFecha;
    FCCTipoDePedidoDeVentaDescripcion          : TString;
    FCCTipoDePedidoDeVentaSeProduceParaStock   : TString;
    FCCMateriaPrimaCunioNecesariaCodigo        : TString;
    FCCMateriaPrimaArticuloNecesariaCodigo     : TString;
    FCCTipoDeHerramentalDescripcion            : TString;
    FCCTipoDeRecursoDescripcion                : TString;
    FCCRecursoActualCodigo                     : TString;
    FCCImporteNetoDelPedido                    : TReal;
    FCCCriticidadCodigo                        : TString;
    FStocks                                    : TStockItemList;
    FProductoParteSemiID                       : TObjectID;
    FProductoParteSemi                         : TPDObject;
    FCCFabricadoParteSemiCodigo                     : TString;
    FCCFabricadoParteSemiDescripcion                : TString;
    FCCFechaDeEgresoPasoDeFabricacionActual    : TFechaHora;
    FCCEsUltimoPasoPasoDeFabricacionActual     : TBoolean;
    FCCFechaDeIngresoUltimoPasoDeFabricacion   : TFechaHora;
    FCCFechaDeEgresoUltimoPasoDeFabricacion    : TFechaHora;
    FCCEsEstadoEnFabricacion                   : TBoolean;
    FCCEsEstadoCumplido: TBoolean;
    FCCEsEstadoCancelado: TBoolean;
    FCCClienteRankingCrediticio: TString;

    procedure SetPedidoDeVentaItemID(Value: TObjectID);
    function GetPedidoDeVentaItem: TPedidoDeVentaItem;
    procedure SetProductoID(Value: TObjectID);
    function GetProducto: TProducto;
    function GetEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
    procedure SetEstadoDeHojaDeRutaID(const Value: TObjectID);
    function GetProductoParte: TProducto;
    function GetMaterialProductoParte: TMaterial;
    procedure SetProductoParteID(const Value: TObjectID);
    function GetPasosDeFabricacion: THojaDeRutaPasoDeFabricacionList;
    procedure SetMaterialProductoParteID(const Value: TObjectID);
    function GetStateLogs: THojaDeRutaStateLogList;
    function getProductoPadreInmediatoParte: TProducto;
    procedure SetProductoPadreInmediatoParteID(const Value: TObjectID);
    function getMesFechaDeFinDeFabricacion: String;
    function GetDiaFechaDeFinDeFabricacion: String;
    procedure setMotivoDeNoConformeID(const Value: TObjectID);
    function getMotivoDeNoConforme: TMotivoDeNoConforme;
    procedure SetEstadoAnteriorID(const Value: TObjectID);
    function GetEstadoAnterior: TEstadoDeHojaDeRuta;
    function GetCantidadAFabricar: TReal;
    procedure SetCantidadExtra(const Value: TReal);
    function GetProductoCodigo: TString;
    function GetFabricadoParteCodigo: TString;
    function GetFabricadoParteDescripcion: TString;
    function GetNoConformes: THojaDeRutaNoConformeList;
    function GetHistorialDeNoConformes: THojaDeRutaNoConformeList;
    procedure SetColorDeHojaDeRutaID(const Value: TObjectID);
    function GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
    function GetTipoDeFormulario: TTipoDeFormulario;
    procedure SetProductoParteSemiID(const Value: TObjectID);
    function GetProductoParteSemi: TProducto;
    function GetFechaImpresion: TFecha;
    function GetStocks: TStockItemList;
    // De la vista
    function GetCCFechaDeFinDePasoUltimoPasoDeFabricacion: TFecha;
    function GetCCFechaDeFinDePasoPasoDeFabricacionActual: TFecha;
    function GetCCFechaDeIngresoPasoDeFabricacionActual: TFecha;
    function GetCCPasoDeFabricacionActualCodigo: TString;
    function GetCCFechaDeFinDePasoPasoDeFabricacionEmpaque: TFecha;
    function GetCCFechaDeEgresoPasoDeFabricacionEmpaque: TFecha;
    function GetCCCunioFechaDeFinDeConstruccion: TFecha;
    function GetCCClienteCodigo: TString;
    function GetCCClienteDescripcion: TString;
    function GetCCClienteRankingCrediticio: TString;
    function GetCCColorDeHojaDeRutaDescripcion: TString;
    function GetCCCunioParteCodigo: TString;
    function GetCCCunioParteDescripcion: TString;
    function GetCCEstadoCodigo: TString;
    function GetCCEstadoDescripcion: TString;
    function GetCCFabricadoParteID: TObjectID;
    function GetCCFabricadoParteCodigo: TString;
    function GetCCFabricadoParteDescripcion: TString;
    function GetCCMaterialParteCodigo: TString;
    function GetCCMaterialParteDescripcion: TString;
    function GetCCTerminacionParteDescripcion: TString;
    function GetCCTipoDeFlexibilidadCodigo: TString;
    function GetCCTipoDeFlexibilidadDescripcion: TString;
    function GetCCTipoDePedidoDeVentaCodigo: TString;
    function GetCCTipoDePedidoDeVentaDescripcion: TString;
    function GetCCTipoDePedidoDeVentaSeProduceParaStock: TString;
    function GetHojaDeRutaPasoDeFabricacionActual: THojaDeRutaPasoDeFabricacion;
    function GetHojaDeRutaUltimoPasoDeFabricacion: THojaDeRutaPasoDeFabricacion;
    function GetCCPasoDeFabricacionActualSectorID: TObjectID;
    function GetCCServicioCodigo: TString;
    function GetCCServicioDescripcion: TString;
    function GetCCMateriaPrimaCodigo: TString;
    function GetCCMateriaPrimaDescripcion: TString;
    function GetCCMateriaPrimaID: TObjectID;
    function GetCCServicioID: TObjectID;
    function GetCCFabricadoCodigo: TString;
    function GetCCFabricadoID: TObjectID;
    function GetCCEstadoColor: TEntero;
    function GetEsEstadoEnFabricacion: TBoolean;
    function GetCCEsEstadoCancelado: TBoolean;
    function GetCCEsEstadoCumplido: TBoolean;
    function GetCCRecursoActualCodigo: TString;
    function GetFechaEstimadaProduccion: TFechaHora;
    function GetCCImporteNetoDelPedido: TReal;
    function GetCCFabricadoParteSemiCodigo: TString;
    function GetCCFabricadoParteSemiDescripcion: TString;
    function GetProductoParteSemiID: TObjectID;
Public
    Constructor Create; override;
    Destructor Destroy; Override;
    Function Save: Boolean; override;
    procedure Delete; Override;
    Procedure FreeObjectsFromMemory;
    property Numero: TEntero read Fnumero write Fnumero;
    property NumeroImprimible: TString read FNumeroImprimible Write FNumeroImprimible;
    property PedidoDeVentaItemID: TObjectID read FPedidoDeVentaItemID write SetPedidoDeVentaItemID;
    property PedidoDeVentaItem: TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property ProductoID: TObjectID read FProductoID write SetProductoID;
    property Producto: TProducto read GetProducto;
    property ProductoPadreInmediatoParteID: TObjectID read FProductoPadreInmediatoParteID write SetProductoPadreInmediatoParteID;
    property ProductoPadreInmediatoParte  : TProducto read getProductoPadreInmediatoParte;
    property ProductoParteID: TObjectID read FProductoParteID write SetProductoParteID;
    property NumeroDeParte: TEntero read FNumeroDeParte write FNumeroDeParte;
    property ProductoParte: TProducto read GetProductoParte;
    property MaterialProductoParteID: TObjectID read FMaterialProductoParteID write SetMaterialProductoParteID;
    property MaterialProductoParte: TMaterial read GetMaterialProductoParte;
    property EstadoDeHojaDeRutaID: TObjectID read FEstadoDeHojaDeRutaID write SetEstadoDeHojaDeRutaID;
    property EstadoDeHojaDeRuta : TEstadoDeHojaDeRuta read GetEstadoDeHojaDeRuta;
    property ObservacionProduccion  : TString read FObservacionProduccion write FObservacionProduccion;
    property Observacionestado  : TString read FObservacionEstado write FObservacionEstado;
    property CantidadPedida: TReal read FCantidadPedida write FCantidadPedida;
    property CantidadExtra : TReal read FCantidadExtra write SetCantidadExtra;
    property CantidadAFabricar : TReal read GetCantidadAFabricar;             // SUMA DE LAS DOS ANTERIORES
    property FechaDeCarga : TFecha read FFechaDeCarga write FFechaDeCarga;
    property FechaPrometida : TFecha read FFechaPrometida write FFechaPrometida; // FECHA PROMETIDA VENTAS
    Property MesFechaDeFinDeFabricacion : String Read GetMesFechaDeFinDeFabricacion;
    Property DiaFechaDeFinDeFabricacion : String Read GetDiaFechaDeFinDeFabricacion;
    property PasosDeFabricacion: THojaDeRutaPasoDeFabricacionList read GetPasosDeFabricacion;
    property NoConformes: THojaDeRutaNoConformeList read GetNoConformes;
    property HistorialDeNoConformes: THojaDeRutaNoConformeList read GetHistorialDeNoConformes;
    property StateLogs: THojaDeRutaStateLogList read GetStateLogs;
    property MotivoDeNoConformeID : TObjectID read FMotivoDeNoConformeID Write setMotivoDeNoConformeID;
    property MotivoDeNoConforme   : TMotivoDeNoConforme read getMotivoDeNoConforme;
    property CantidadBuena        : TReal read FCantidadbuena write FCantidadbuena;
    property CantidadParcial      : TReal read FCantidadParcial write FCantidadParcial;
    property EsPrioridad          : TBoolean read FEsPrioridad write FEsPrioridad;
    property EstadoAnteriorID     : TObjectID read FEstadoAnteriorID write SetEstadoAnteriorID;  //para estado suspendido por ejemplo, necesito guardar el anterior para seguir con el proceso.
    property EstadoAnterior       : TEstadoDeHojaDeRuta read GetEstadoAnterior;
    property FechaImpresion          : TFecha read GetFechaImpresion;
    property FechaEstimadaProduccion : TFechaHora read GetFechaEstimadaProduccion write FFechaEstimadaProduccion;
    Property ColorDeHojaDeRutaID  : TObjectID Read FColorDeHojaDeRutaID Write SetColorDeHojaDeRutaID ;
    Property ColorDeHojaDeRuta    : TColorDeHojaDeRuta Read GetColorDeHojaDeRuta;
    property TipoDeFormulario     : TTipoDeFormulario read GetTipoDeFormulario;
    Property TipoDeFormularioID   : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    Function PrimerPaso : String;
  // Gestion de hojas de ruta
    Function ColorDeHojaDeRutaNoConformeID : TObjectID;
    Class Procedure CrearHojasDeRutaNoConforme(_HRNC: THojaDeRuta ; _EsPorElTotal : Boolean ; _AgregarPasoCalidad : Boolean = True);
    Procedure CrearHojasDeRutaReparacion(_HRRP: THojaDeRuta);
    Procedure CrearHojasDeRutaParcial(_HRP: THojaDeRuta);
    Procedure CrearHojaDelPadre;
    Procedure CrearHojaDuplicada;
    Procedure LimpiarIngresosYEgresos;
    Procedure AgregarRuteoNoConforme(_HRNoConforme : THojaDeRuta; _SigueProceso : Boolean = False; _AgregarPasoCalidad : Boolean = True);
    Procedure AgregarRuteoParcial(_HRParcial : THojaDeRuta ; _ConFechas : Boolean = False);
    Function PuedeCumplir : Boolean;
    Function PermiteIngreso(_PF : TPasoDeFabricacion) : Boolean;
    Function PermiteEgreso(_PF : TPasoDeFabricacion) : Boolean;
    Procedure IngresarHojaDeRuta(_PF : TPasoDeFabricacion ; _CantIngresada : integer = 0 ; _AutoIngreso : Boolean = False );
    Procedure EgresarHojaDeRuta(_PF : TPasoDeFabricacion ; _CantEgresada: Integer = 0);
    Procedure RenumerarPasos;
    Class Procedure MotivoDeAtrasoHandler(_HR : THojaDeRuta; _PF : TPasoDeFabricacion);
    Class Procedure OperacionesHandler(_HR : THojaDeRuta ; _PF : TPasoDeFabricacion ; _OwnerForm : TForm = nil);
    Function ValidarSecuenciaDeFechas : Boolean;
    Function ElPasoEstaEnLaHojaDeRuta( _PasoActual : TPasoDeFabricacion) : Boolean;
    Procedure AsignarColorDeHojaDeRuta;
    Procedure AsignarUltimoRuteoYSecuencia;
    Function HojaRuteadaConFechas : Boolean;
    Procedure VerHojaDeRuta(_Imprimir : Boolean);
    Procedure Reactivar;
    Procedure AgregarUltimoRuteo;
    Function NuevoNumeroDeHojaDeRuta : Integer;
    Procedure AgregarNuevoEstadoAlLog(_Obs : String = '');
    property PasoDeFabricacionActual : THojaDeRutaPasoDeFabricacion Read GetHojaDeRutaPasoDeFabricacionActual;
    property UltimoPasoDeFabricacion   : THojaDeRutaPasoDeFabricacion Read GetHojaDeRutaUltimoPasoDeFabricacion;
    property ProductoParteSemiID : TObjectID read GetProductoParteSemiID write SetProductoParteSemiID;
    property ProductoParteSemi   : TProducto read GetProductoParteSemi;

    Function CalcularProductoParteSemiID : TObjectID;

    Property Stocks : TStockItemList read GetStocks;
  // del create compuesto
    property CCProductoCodigo                          : TString   read GetProductoCodigo;
    property CCFabricadoID                             : TObjectID read GetCCFabricadoID;
    property CCFabricadoCodigo                         : TString   read GetCCFabricadoCodigo ;
    property CCServicioID                              : TObjectID read GetCCServicioID ;
    property CCServicioCodigo                          : TString   read GetCCServicioCodigo ;
    property CCServicioDescripcion                     : TString   read GetCCServicioDescripcion ;
    property CCMateriaPrimaID                          : TObjectID read GetCCMateriaPrimaID ;
    property CCMateriaPrimaCodigo                      : TString   read GetCCMateriaPrimaCodigo ;
    property CCMateriaPrimaDescripcion                 : TString   read GetCCMateriaPrimaDescripcion ;
    property CCFabricadoParteID                        : TObjectID read GetCCFabricadoParteID;
    property CCFabricadoParteCodigo                    : TString   read GetCCFabricadoParteCodigo ;
    property CCFabricadoParteDescripcion               : TString   read GetCCFabricadoParteDescripcion ;
    property CCTerminacionParteDescripcion             : TString   read GetCCTerminacionParteDescripcion ;
    property CCCunioParteCodigo                        : TString   read GetCCCunioParteCodigo ;
    property CCCunioParteDescripcion                   : TString   read GetCCCunioParteDescripcion ;
    Property CCCunioFechaDeFinDeConstruccion           : TFecha    read GetCCCunioFechaDeFinDeConstruccion;

    property CCFabricadoParteSemiCodigo                : TString   read GetCCFabricadoParteSemiCodigo ;
    property CCFabricadoParteSemiDescripcion           : TString   read GetCCFabricadoParteSemiDescripcion ;

    property CCEstadoDescripcion                       : TString   read GetCCEstadoDescripcion ;
    property CCEstadoCodigo                            : TString   read GetCCEstadoCodigo ;
    property CCEstadoColor                             : TEntero   read GetCCEstadoColor ;
    property CCEsEstadoEnFabricacion                   : TBoolean  read GetEsEstadoEnFabricacion;
    property CCEsEstadoCumplido                        : TBoolean  read GetCCEsEstadoCumplido;
    property CCEsEstadoCancelado                       : TBoolean  read GetCCEsEstadoCancelado;

    property CCMaterialParteCodigo                     : TString   read GetCCMaterialParteCodigo ;
    property CCMaterialParteDescripcion                : TString   read GetCCMaterialParteDescripcion ;
    property CCTipoDeFlexibilidadCodigo                : TString   read GetCCTipoDeFlexibilidadCodigo ;
    property CCTipoDeFlexibilidadDescripcion           : TString   read GetCCTipoDeFlexibilidadDescripcion ;
    property CCClienteCodigo                           : TString   read GetCCClienteCodigo ;
    property CCClienteDescripcion                      : TString   read GetCCClienteDescripcion ;
    property CCClienteRankingCrediticio                : TString   read GetCCClienteRankingCrediticio ;
    property CCImporteNetoDelPedido                    : TReal     read GetCCImporteNetoDelPedido;
    property CCObservacionVentas                       : TString   read FCCObservacionVentas;
    property CCTipoDePedidoDeVentaCodigo               : TString   read GetCCTipoDePedidoDeVentaCodigo;
    property CCTipoDePedidoDeVentaDescripcion          : TString   read GetCCTipoDePedidoDeVentaDescripcion;
    property CCTipoDePedidoDeVentaSeProduceParaStock   : TString   read GetCCTipoDePedidoDeVentaSeProduceParaStock;
    Property CCColorDeHojaDeRutaDescripcion            : TString   read GetCCColorDeHojaDeRutaDescripcion;
    //paso actual
    Property CCPasoDeFabricacionActualCodigo           : TString   read FCCPasoDeFabricacionActualCodigo;
    Property CCPasoDeFabricacionActualSectorID         : TObjectID read FCCPasoDeFabricacionActualSectorID;
    Property CCFechaDeFinDePasoPasoDeFabricacionActual : TFecha    read FCCFechaDeFinDePasoPasoDeFabricacionActual;
    Property CCFechaDeIngresoPasoDeFabricacionActual   : TFechaHora read FCCFechaDeIngresoPasoDeFabricacionActual;
    Property CCFechaDeEgresoPasoDeFabricacionActual    : TFechaHora read FCCFechaDeEgresoPasoDeFabricacionActual;
    Property CCEsUltimoPasoPasoDeFabricacionActual     : TBoolean  read FCCEsUltimoPasoPasoDeFabricacionActual;
    Property CCObservacionPasoDeFabricacionActual      : TString   read FCCObservacionPasoDeFabricacionActual;
    Property CCRecursoActualCodigo                     : TString   read FCCRecursoActualCodigo;
    //ultimo paso
    Property CCFechaDeFinDePasoUltimoPasoDeFabricacion : TFecha    read FCCFechaDeFinDePasoUltimoPasoDeFabricacion;
    Property CCFechaDeIngresoUltimoPasoDeFabricacion   : TFechaHora read FCCFechaDeIngresoUltimoPasoDeFabricacion;
    Property CCFechaDeEgresoUltimoPasoDeFabricacion    : TFechaHora read FCCFechaDeEgresoUltimoPasoDeFabricacion;
    //paso empaque
    Property CCFechaDeFinDePasoPasoDeFabricacionEmpaque: TFecha    read FCCFechaDeFinDePasoPasoDeFabricacionEmpaque;
    Property CCFechaDeEgresoPasoDeFabricacionEmpaque   : TFecha    read FCCFechaDeEgresoPasoDeFabricacionEmpaque;
    Property CCCriticidadCodigo                        : TString   read FCCCriticidadCodigo;
end;

THojaDeRutaDM = class(TSQLDBX_DMObject)
  Public
    Class Function SelectCountByPedidoDeVentaItemID (_PVI: TobjectID) : String;
  public
    Class function TableName: string; override;
    Class function ViewName: string; override;
    Class function ID_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    const
      _TipoDeFormularioID                        = 'TipoDeFormularioID';
      _Numero                                    = 'Numero';
      _NumeroImprimible                          = 'NumeroImprimible';
      _PedidoDeVentaItemID                       = 'PedidoDeVentaItemID';
      _ProductoID                                = 'ProductoID';
      _ProductoParteID                           = 'ProductoParteID';
      _ProductoPadreInmediatoParteID             = 'ProductoPadreInmediatoParteID';
      _ProductoParteSemiID                       = 'ProductoParteSemiID';
      _MaterialProductoParteID                   = 'MaterialProductoParteID';
      _CantidadPedida                            = 'CantPedida';
      _CantidadExtra                             = 'CantExtra';
      _EstadoDeHojaDeRutaID                      = 'EstadoDeHojaDeRutaID';
      _ObservacionProduccion                     = 'ObsProduccion';
      _FechaDeCarga                              = 'FechaDeCarga';
      _FechaPrometida                            = 'FechaDeFinDeFabricacion';
      _MotivoDeNoConformeID                      = 'MotivoDeNoConformeID';
      _CantidadBuena                             = 'Cantidadbuena';
      _CantidadParcial                           = 'CantidadParcial';
      _EsPrioridad                               = 'EsPrioridad';
      _EstadoAnteriorID                          = 'EstadoSuspensionID'; // cambiar en tabla cuando pueda.
      _FechaEstimadaProduccion                   = 'FechaEstimadaProduccion';
      _NumeroDeParte                             = 'NumeroDeParte';
      _ColorDeHojaDeRutaID                       = 'ColorDeHojaDeRutaID';
      //  de la vista
      _CCFabricadoID                             = 'FabricadoID';
      _CCFabricadoCodigo                         = 'FabricadoCodigo';
      _CCServicioID                              = 'ServicioID';
      _CCServicioCodigo                          = 'ServicioCodigo';
      _CCServicioDescripcion                     = 'ServicioDescripcion';
      _CCMateriaPrimaID                          = 'ServicioID';
      _CCMateriaPrimaCodigo                      = 'ServicioCodigo';
      _CCMateriaPrimaDescripcion                 = 'ServicioDescripcion';
      _CCFabricadoParteID                        = 'FabricadoParteID';
      _CCFabricadoParteCodigo                    = 'FabricadoParteCodigo';
      _CCFabricadoParteDescripcion               = 'FabricadoParteDescripcion';
      _CCTerminacionParteDescripcion             = 'TerminacionParteDescripcion';
      _CCCunioParteCodigo                        = 'CunioParteCodigo';
      _CCCunioParteDescripcion                   = 'CunioParteDescripcion';
      _CCCunioFechaDeFinDeConstruccion           = 'CunioFechaDeFinDeConstruccion';
      _CCEstadoDescripcion                       = 'EstadoDescripcion';
      _CCEstadoCodigo                            = 'EstadoCodigo';
      _CCEstadoColor                             = 'EstadoColor';
      _CCEsEstadoEnFabricacion                   = 'EsEstadoEnFabricacion';
      _CCEsEstadoCumplido                        = 'EsEstadoCumplido';
      _CCEsEstadoCancelado                       = 'EsEstadoCancelado';
      _CCMaterialParteCodigo                     = 'MaterialParteCodigo';
      _CCMaterialParteDescripcion                = 'MaterialParteDescripcion';
      _CCTipoDeFlexibilidadCodigo                = 'TipoDeFlexibilidadCodigo';
      _CCTipoDeFlexibilidadDescripcion           = 'TipoDeFlexibilidadDescripcion';
      _CCClienteCodigo                           = 'ClienteCodigo';
      _CCClienteDescripcion                      = 'ClienteDescripcion';
      _CCClienteRankingCrediticio                = 'ClienteRankingCrediticio';
      _CCObservacionVentas                       = 'ObsVentas';
      _CCTipoDePedidoDeVentaCodigo               = 'TipoDePedidoDeVentaCodigo';
      _CCTipoDePedidoDeVentaDescripcion          = 'TipoDePedidoDeVentaDescripcion';
      _CCTipoDePedidoDeVentaSeProduceParaStock   = 'TipoDePedidoDeVentaSeProduceParaStock';
      _CCColorDeHojaDeRutaDescripcion            = 'ColorDeHojaDeRutaDescripcion';
      _CCObservacionPasoDeFabricacionActual      = 'ObservacionPasoDeFabricacionActual';
      _CCPasoDeFabricacionActualCodigo           = 'PasoDeFabricacionActualCodigo';
      _CCRecursoActualCodigo                     = 'RecursoActualCodigo';
      _CCPasoDeFabricacionActualID               = 'PasoDeFabricacionActualID';
      _CCPasoDeFabricacionActualSectorID         = 'PasoDeFabricacionActualSectorID';
      //paso actual
      _CCFechaDeFinDePasoPasoDeFabricacionActual = 'FechaDeFinDePasoPasoDeFabricacionActual';
      _CCFechaDeIngresoPasoDeFabricacionActual   = 'FechaDeIngresoPasoDeFabricacionActual';
      _CCFechaDeEgresoPasoDeFabricacionActual    = 'FechaDeEgresoPasoDeFabricacionActual';
      _CCEsUltimoPasoPasoDeFabricacionActual     = 'EsUltimoPasoPasoDeFabricacionActual';
      //ultimo paso
      _CCFechaDeFinDePasoUltimoPasoDeFabricacion = 'FechaDeFinDePasoUltimoPasoDeFabricacion';
      _CCFechaDeIngresoUltimoPasoDeFabricacion   = 'FechaDeIngresoUltimoPasoDeFabricacion';
      _CCFechaDeEgresoUltimoPasoDeFabricacion    = 'FechaDeEgresoUltimoPasoDeFabricacion';
      //paso empaque
      _CCFechaDeFinDePasoPasoDeFabricacionEmpaque= 'FechaDeFinDePasoPasoDeFabricacionEmpaque';
      _CCFechaDeEgresoPasoDeFabricacionEmpaque   = 'FechaDeEgresoPasoDeFabricacionEmpaque';
      _CCCriticidadCodigo                        = 'CriticidadCodigo';
      _CCFabricadoParteSemiCodigo                = 'FabricadoParteSemiCodigo';
      _CCFabricadoParteSemiDescripcion           = 'FabricadoParteSemiDescripcion';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaList = class(TDocumentoList)
  private
    Function GetActual: THojaDeRuta;
  public
    Constructor CreateAll;
    Constructor CreateByNumero(_Numero: Integer);
    Constructor CreateByPedido(_NumPed: String);
    Constructor CreateByEstado(_EstadoID: TObjectID);
    Constructor CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList); overload;
    Constructor CreateByEstadosAndAtrasadas(_Est: TOrganizacionDeMonitorEstadoPermitidoList); overload;

    Constructor CreateByEstados(_Est: String); overload;
    Constructor CreateByPasoDeFabricacion(_P:TPasoDeFabricacion);
    Constructor CreateByPedidoDeVenta(_PV:TPedidoDeVenta);
    Constructor CreateByCodigoParteAndFechaDesdeFechaHasta(_CodigoParte : String ; _FechaDesde , _FechaHasta : TDateTime);
    Constructor CreateByPendientesAndCodigoParte(_ProductoParte: TProducto; _PasoDeFabricacion: TPasoDeFabricacion);
    Constructor CreateByItem(_PVI: TPedidoDeVentaItem);
    Constructor CreateByPasoDeFabricacionNoIngresadas(_P : TPasoDeFabricacion);
    Constructor CreateByPasoDeFabricacionIngresadas(_P : TPasoDeFabricacion);

    Constructor CreateByUltimaHojaDeRutaAndProductoParte(_ProdParte : TProducto);
    Constructor CreateByEnFabricacion;
    Constructor CreateByAtrasadas(_FiltroPasos : TStringList = nil);
    Constructor CreateByCumplidas;
    Constructor CreateByUltimoNumero;
    Constructor CreateByFechaDesdeFechaHastaTipoDePedidoClienteAndProducto(_FechaDesde : TFecha ; _FechaHasta : TFecha ; _TipoPedido : String ; _Cliente : String ; _ProductoCodigo : String );
    Constructor CreateByCustomizadosFechaDesdeFechaHasta(_FechaDesde : TFecha ; _FechaHasta : TFecha; _SoloEnProduccion: Boolean = True);
    Function CreateNewObject: TPDObject; override;
    Function Find(_Numero: Integer): Boolean; overload;
    property Actual: THojaDeRuta read GetActual;
end;

THojaDeRutaPasoDeFabricacion = class(TPDObject)
  private
    FHojaDeRutaID            : TObjectID;
    FPasoDeFabricacionID     : TObjectID;
    FSecuencia               : TEntero;
    FFechaDeFinDePaso        : TFecha;
    FFechaDeIngreso          : TFechaHora;
    FFechaDeEgreso           : TFechaHora;
    FCantidadIngresada       : TReal;
    FCantidadPendiente       : TReal;
    FCantidadEgresada        : TReal;
    FEsUltimoPaso            : TBoolean;
    FObservacion             : String;
    FPasoDeFabricacion       : TPDObject;
    FHojaDeRuta              : TPDObject;
    FCCCantidadAFabricar     : TReal;
    FUsuarioDeEgresoID       : TObjectID;
    FUsuarioDeEgreso         : TPDObject;
    FRecursoID               : TObjectID;
    FRecurso                 : TPDObject;
    FTmpEsNoConformeOParcial : TBoolean;
    FMotivoDeAtraso          : TPDObject;
    FMotivoDeAtrasoID        : TObjectID;
    FComentarioDeAtraso      : String;
    FContabilidadDeCosto     : THRPFContabilidadDeCostoList;
    FCantidadParaStock       : TReal;
    FConsumoMP               : TReal;
    FUnidadDeMedidaMPID      : TObjectID;
    FUnidadDeMedidaMP        : TPDObject;
    FMateriaPrimaID          : TObjectID;
    FMateriaPrima            : TPDObject;
    FCantidadUsadaDeStock: TReal;
    FTmpEsEgreso: TBoolean;
    FConsumoTeoricoMP: TReal;
    FCantidadRechazada: TReal;
    FCantidadUsadaDeStockAsignado: TReal;
    FConsumoMPStockSemi: TReal;
    FConsumoMPRechazado: TReal;
    FConsumoMPSemiEgresado: TReal;
    Procedure SetPasoDeFabricacionID(Value : TObjectID);
    Procedure SetHojaDeRutaID(Value : TObjectID);
    procedure SetRecursoID(const Value: TObjectID);
    procedure SetFechaDeIngreso(const Value: TFechaHora);
    procedure SetFechaDeEgreso(const Value: TFechaHora);
    procedure SetUsuarioDeEgresoID(const Value: TObjectID);
    procedure SetMotivoDeAtrasoID(const Value: TObjectID);

    Function GetPasoDeFabricacion: TPasoDeFabricacion;
    Function GetHojaDeRuta: THojaDeRuta;
    function GetCantidadPendiente: TReal;
    function GetUsuarioDeEgreso: TUsuario;
    function GetRecurso: TRecurso;
    function GetMotivoDeAtraso: TMotivoDeAtraso;
    function GetContabilidadDeCosto: THRPFContabilidadDeCostoList;
    procedure SetUnidadDeMedidaMPID(const Value: TObjectID);
    function GetUnidadDeMedidaMP: TUnidadDeMedida;
    procedure SetMateriaPrimaID(const Value: TObjectID);
    function GetMateriaPrima: TMateriaPrima;
    function GetConsumoMPDescripcion: TString;
  Public
    Constructor Create; override;
    function Save: Boolean; override;

    procedure Delete; Override;
    Procedure DeleteContabiliodadDeCostos;
    Procedure AjustarStock;

    function SortBy: String; override;
    property CantidadPendiente   : TReal read GetCantidadPendiente;
    property CantidadIngresada   : TReal read FCantidadIngresada write FCantidadIngresada;
    property CantidadEgresada    : TReal read FCantidadEgresada write FCantidadEgresada;
    property CantidadRechazada   : TReal read FCantidadRechazada write FCantidadRechazada;
    property CantidadParaStock   : TReal read FCantidadParaStock write FCantidadParaStock;
    property CantidadUsadaDeStock : TReal read FCantidadUsadaDeStock write FCantidadUsadaDeStock;
    property CantidadUsadaDeStockAsignado : TReal read FCantidadUsadaDeStockAsignado write FCantidadUsadaDeStockAsignado;

    property FechaDeEgreso       : TFechaHora read FFechaDeEgreso write SetFechaDeEgreso;
    property FechaDeIngreso      : TFechaHora read FFechaDeIngreso write SetFechaDeIngreso;
    property FechaDeFinDePaso    : TFecha read FFechaDeFinDePaso write FFechaDeFinDePaso;
    property Secuencia           : TEntero read FSecuencia write FSecuencia;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion   : TPasoDeFabricacion read GetPasoDeFabricacion;
    property RecursoID           : TObjectID read FRecursoID write SetRecursoID;
    property Recurso             : TRecurso read GetRecurso;
    property HojaDeRutaID        : TObjectID read FHojaDeRutaID write SetHojaDeRutaID;
    property HojaDeRuta          : THojaDeRuta read GetHojaDeRuta;
    property EsUltimoPaso        : TBoolean read FEsUltimoPaso write FEsUltimoPaso;
    property Observacion         : String read FObservacion write FObservacion;
    property UsuarioDeEgresoID   : TObjectID read FUsuarioDeEgresoID write SetUsuarioDeEgresoID;
    property UsuarioDeEgreso     : TUsuario read GetUsuarioDeEgreso;
    property MotivoDeAtrasoID    : TObjectID read FMotivoDeAtrasoID write SetMotivoDeAtrasoID;
    property MotivoDeAtraso      : TMotivoDeAtraso read GetMotivoDeAtraso;
    property ComentarioDeAtraso  : String read FComentarioDeAtraso write FComentarioDeAtraso;
    property ConsumoMP           : TReal read FConsumoMP write FConsumoMP;
    property ConsumoTeoricoMP    : TReal read FConsumoTeoricoMP write FConsumoTeoricoMP;
    property ConsumoMPStockSemi  : TReal read FConsumoMPStockSemi write FConsumoMPStockSemi;
    property ConsumoMPRechazado  : TReal read FConsumoMPRechazado write FConsumoMPRechazado;
    property ConsumoMPSemiEgresado : TReal read FConsumoMPSemiEgresado write FConsumoMPSemiEgresado; // acá se calcula la MP usada en los semi sacados de stock del sector. No se hace ajuste de stock de MP, el mismo ya fue hecho cuando se egresó la HR que originó el stock de semi.
    property MateriaPrimaID      : TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
    property MateriaPrima        : TMateriaPrima read GetMateriaPrima;
    property UnidadDeMedidaMPID  : TObjectID read FUnidadDeMedidaMPID write SetUnidadDeMedidaMPID;
    property UnidadDeMedidaMP    : TUnidadDeMedida read GetUnidadDeMedidaMP;
    Property ConsumoMPDescripcion : TString Read GetConsumoMPDescripcion;
    Property ContabilidadDeCosto : THRPFContabilidadDeCostoList read GetContabilidadDeCosto;
    // del create compuesto
    Property CCCantidadAFabricar : TReal read FCCCantidadAFabricar write FCCCantidadAFabricar;
    // temporales
    property TmpEsNoConformeOParcial : TBoolean  Read FTmpEsNoConformeOParcial write FTmpEsNoConformeOParcial;
    property TmpEsEgreso             : TBoolean  Read FTmpEsEgreso write FTmpEsEgreso;
end;

THojaDeRutaPasoDeFabricacionDM = class(TSQLDBX_DMObject)
  protected
    Class function CreateCompuesto(_Parte : Integer = 0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _CantidadIngresada   = 'CantidadIngresada';
      _CantidadEgresada    = 'CantidadEgresada';
      _CantidadParaStock   = 'CantidadParaStock';
      _CantidadUsadaDeStock = 'CantidadUsadaDeStock';
      _CantidadRechazada   = 'CantidadRechazada';
      _FechaDeEgreso       = 'FechaDeEgreso';
      _FechaDeIngreso      = 'FechaDeIngreso';
      _FechaDeFinDePaso    = 'FechaDeFinDePaso';
      _Secuencia           = 'Secuencia';
      _PasoDeFabricacionID = 'PasoDeFabricacionID';
      _RecursoID           = 'RecursoID';
      _HojaDeRutaID        = 'HojaDeRutaID';
      _EsUltimoPaso        = 'EsUltimoPaso';
      _Observacion         = 'Observacion';
      _UsuarioDeEgresoID   = 'UsuarioDeEgresoID';
      _MotivoDeAtrasoID    = 'MotivoDeAtrasoID';
      _ComentarioDeAtraso  = 'ComentarioDeAtraso';
      _MateriaPrimaID      = 'MateriaPrimaID';
      _ConsumoMP           = 'ConsumoMP';
      _ConsumoMPStockSemi  = 'ConsumoMPStockSemi';
      _ConsumoMPRechazado  = 'ConsumoMPRechazado';
      _ConsumoMPSemiEgresado = 'ConsumoMPSemiEgresado';
      _ConsumoTeoricoMP    = 'ConsumoTeoricoMP';
      _UnidadDeMedidaMPID  = 'UnidadDeMedidaMPID';

      // del create compuesto
      _CantidadAFabricar   = 'CantidadAFabricar';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaPasoDeFabricacionList = class(TPDList)
  private
    function GetActual : THojaDeRutaPasoDeFabricacion;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateByHojaDeRuta(_HR: THojaDeRuta);
    constructor CreateByHojaDeRutaAndPasoDeFabricacion(_HR: THojaDeRuta ; _PF : TPasoDeFabricacion );
    constructor CreateByUltimoPaso(_HR: THojaDeRuta);
    Constructor CreateByPasoDeFabricacion(_Paso : TPasoDeFabricacion);
    Constructor CreateByPasoDeFabricacionAndFechaDesdeFechaHasta(_PasoCodigo : String ; _FechaDesde,_FechaHasta : TFecha);
    Constructor CreateByPasoDeFabricacionAndRecursoAndFechaDesdeFechaHasta(_PasoCodigo : String ; _RecursoCodigo : String ; _FechaDesde,_FechaHasta : TFecha);
    constructor CreateByAtrasadas(_FechaHasta: TFecha);
    function FindSecuenciaDeFabricacion( _Sec : TEntero ): Boolean;
    function FindPasoDeFabricacion( _PF : TPasoDeFabricacion ): Boolean; Overload;
    function FindPasoDeFabricacion( _C : String ): Boolean; Overload;
    function FindPasoDeCalidad: Boolean;
    function FindPasoDeFabricacionActual: String; // devuelve en que paso de fabricacion esta la hoja de ruta
    function FindPasoDeFabricacionActualFecha: TFecha;// devuelve en que paso de fabricacion esta la hoja de ruta
    function CreateNewObject: TPDObject; override;
    property Actual : THojaDeRutaPasoDeFabricacion read GetActual;
end;

THojaDeRutaStateLog = class(TPDObject)
  private
    FEstadoDeHojaDeRutaID : TObjectID;
    FUsuarioID            : TObjectID;
    FFechaHora            : TFechaHora;
    FHojaDeRutaID         : TObjectID;
    FObservaciones        : TString;
    FHojaDeRuta           : TPDObject;
    FUsuario              : TPDObject;
    FEstadoDeHojaDeRuta   : TPDObject;
    FIPAddress            : TString;
    procedure SetHojaDeRutaID(Value : TObjectID);
    procedure SetUsuarioID(Value : TObjectID);
    procedure SetEstadoDeHojaDeRutaID(Value : TObjectID);
    function GetHojaDeRuta: THojaDeRuta;
    function getUsuario: TUsuario;
    function getEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
  public
    constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectFromMemory;
    property HojaDeRutaID : TObjectID read FHojaDeRutaID write SetHojaDeRutaID;
    property HojaDeRuta : THojaDeRuta read GetHojaDeRuta;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
    property Usuario : TUsuario read getUsuario;
    Property IPAddress : TString read FIPAddress write FIPAddress;

    property EstadoDeHojaDeRutaID : TObjectID read FEstadoDeHojaDeRutaID write SetEstadoDeHojaDeRutaID;
    property EstadoDeHojaDeRuta : TEstadoDeHojaDeRuta read getEstadoDeHojaDeRuta;
    property FechaHora : TFechaHora read FFechaHora write FFechaHora;
    property Observaciones : TString read FObservaciones write FObservaciones;
end;

THojaDeRutaStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _Observaciones        = 'Observaciones';
      _HojaDeRutaID         = 'HojaDeRutaID';
      _FechaHora            = 'FechaHora';
      _UsuarioID            = 'UsuarioID';
      _IPAddress            = 'IPAddress';
      _EstadoDeHojaDeRutaID = 'EstadoDeHojaDeRutaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaStateLogList = class(TPDList)
  private
    function GetActual : THojaDeRutaStateLog;
  public
    constructor CreateAll;
    constructor CreateByHojaDeRuta(_HR: THojaDeRuta);
    constructor CreateEmpty;
    function CreateNewObject: TPDObject; override;
    property Actual : THojaDeRutaStateLog read GetActual;
    function FindEstadoCanceladoOCumplido : Boolean;
end;

THRPFContabilidadDeCosto = class(TPDObject)
  private
    FPeriodoMes  : TEntero;
    FPeriodoAnio : TEntero;
    FMonedaID    : TObjectID;
    FMoneda      : TPDObject;
    FImporte     : TReal;
    FCuentaContableID              : TObjectID;
    FCuentaContable                : TPDObject;
    FHojaDeRutaPasoDeFabricacionID : TObjectID;
    FHojaDeRutaPasoDeFabricacion   : TPDObject;
    FDiasEnElPaso                  : TEntero;
    FCentroDeCostoID               : TObjectID;
    FCentroDeCosto                 : TPDObject;
    function GetCuentaContable : TCuentaContable;
    procedure SetCuentaContableID(Value : TObjectID);
    function GetHojaDeRutaPasoDeFabricacion : THojaDeRutaPasoDeFabricacion;
    procedure SetHojaDeRutaPasoDeFabricacionID(Value : TObjectID);
    function GetMoneda : TMoneda;
    procedure SetMonedaID(Value : TObjectID);
    function GetCentroDeCosto: TCentroDeCosto;
    procedure SetCentroDeCostoID(const Value: TObjectID);
  public
    constructor Create; override;
    property CuentaContable : TCuentaContable read GetCuentaContable;
    property CuentaContableID : TObjectID read FCuentaContableID write SetCuentaContableID;
    property CentroDeCosto : TCentroDeCosto read GetCentroDeCosto;
    property CentroDeCostoID : TObjectID read FCentroDeCostoID write SetCentroDeCostoID;
    property HojaDeRutaPasoDeFabricacion : THojaDeRutaPasoDeFabricacion read GetHojaDeRutaPasoDeFabricacion;
    property HojaDeRutaPasoDeFabricacionID : TObjectID read FHojaDeRutaPasoDeFabricacionID write SetHojaDeRutaPasoDeFabricacionID;
    property Moneda : TMoneda read GetMoneda;
    property MonedaID : TObjectID read FMonedaID write SetMonedaID;
    property Importe : TReal read FImporte write FImporte;
    property PeriodoAnio : TEntero read FPeriodoAnio write FPeriodoAnio;
    property PeriodoMes : TEntero read FPeriodoMes write FPeriodoMes;
    property DiasEnElPaso : TEntero read FDiasEnElPaso write FDiasEnElPaso;
end;

THRPFContabilidadDeCostoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _HojaDeRutaPasoDeFabricacionID = 'HojaDeRutaPasoDeFabricacionID';
    _CuentaContableID              = 'CuentaContableID';
    _CentroDeCostoID               = 'CentroDeCostoID';
    _Importe                       = 'Importe';
    _MonedaID                      = 'MonedaID';
    _PeriodoAnio                   = 'PeriodoAnio';
    _PeriodoMes                    = 'PeriodoMes';
    _DiasEnElPaso                  = 'DiasEnElPaso';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

THRPFContabilidadDeCostoList = class(TPDList)
private
  function GetActual : THRPFContabilidadDeCosto;
public
  constructor CreateAll;
  constructor CreateByHojaDeRutaPasoDeFabricacion (_HRPF : THojaDeRutaPasoDeFabricacion);
  function CreateNewObject: TPDObject; override;
  property Actual : THRPFContabilidadDeCosto read GetActual;
end;


THojaDeRutaRuteoDefault = class(TDescriptibleAbreviado)
  private
    FCategoriaDeMateriaPrimaID          : TObjectID;
    FPasosDeFabricacion                 : THojaDeRutaRuteoDefaultPasoList;
    FCategoriaDeMateriaPrima            : TPDObject;
    FFamiliasDeArticulo                 : THojaDeRutaRuteoDefaultFamiliaList;
    Function GetPasosDeFabricacion      : THojaDeRutaRuteoDefaultPasoList;
    Function GetCategoriaDeMateriaPrima : TCategoriaDeMateriaPrima;
    function GetFamiliasDeArticulo      : THojaDeRutaRuteoDefaultFamiliaList;
  Protected
    Function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  Public
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    property CategoriaDeMateriaPrimaID : TObjectID read FCategoriaDeMateriaPrimaID write FCategoriaDeMateriaPrimaID;
    property CategoriaDeMateriaPrima   : TCategoriaDeMateriaPrima read getCategoriaDeMateriaPrima;
    property FamiliasDeArticulo        : THojaDeRutaRuteoDefaultFamiliaList read GetFamiliasDeArticulo;
    property PasosDeFabricacion        : THojaDeRutaRuteoDefaultPasoList read GetPasosDeFabricacion;
    Function UltimoSecuenciaRuteo      : Integer;
end;

THojaDeRutaRuteoDefaultDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _EsInactivo                = 'EsInactivo';
      _Descripcion               = 'Descripcion';
      _Codigo                    = 'Codigo';
      _CategoriaDeMateriaPrimaID = 'CategoriaDeMateriaPrimaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaRuteoDefaultList = class(TDescriptibleAbreviadoList)
  private
    function GetActual : THojaDeRutaRuteoDefault;
  public
    constructor CreateAll(_SoloActivos : Boolean = False);
    constructor CreateByCategoriaDeMateriaPrima( _Categoria : TCategoriaDeMateriaPrima; _IncluyeNulls : Boolean = True; _SoloActivos: Boolean = False);
    constructor CreateByCategoriaDeMateriaPrimaAndFamilia(_Categoria: TCategoriaDeMateriaPrima; _Familia: TFamiliaDeArticulo; _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual : THojaDeRutaRuteoDefault read GetActual;
end;

THojaDeRutaRuteoDefaultPaso = class(TPDObject)
  private
    FHojaDeRutaRuteoDefaultID : TObjectID;
    FPasoID                   : TObjectID;
    FSecuencia                : TEntero;
    FHojaDeRutaRuteoDefault   : TPDObject;
    FPaso                     : TPDObject;
    procedure SetHojaDeRutaRuteoDefaultID(const Value: TObjectID);
    procedure SetPasoID(const Value: TObjectID);
    function getPaso: TPasoDeFabricacion;
    function getHojaDeRutaRuteoDefault: THojaDeRutaRuteoDefault;
  public
    constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    property PasoID                   : TObjectID read FPasoID write SetPasoID;
    property Paso                     : TPasoDeFabricacion read getPaso ;
    property HojaDeRutaRuteoDefaultID : TObjectID read FHojaDeRutaRuteoDefaultID write SetHojaDeRutaRuteoDefaultID;
    property HojaDeRutaRuteoDefault   : THojaDeRutaRuteoDefault read getHojaDeRutaRuteoDefault;
    property Secuencia                : TEntero read FSecuencia write FSecuencia;
end;

THojaDeRutaRuteoDefaultPasoDM = class(TSQLDBX_DMObject)
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  const
    _HojaDeRutaRuteoDefaultID = 'HojaDeRutaRuteoDefaultID';
    _Secuencia                = 'Secuencia';
    _PasoID                   = 'PasoID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaRuteoDefaultPasoList = class(TPDList)
private
  function GetActual : THojaDeRutaRuteoDefaultPaso;
public
  constructor CreateAll;
  constructor CreateByRuteoDefault(_HRRD : THojaDeRutaRuteoDefault);
  function CreateNewObject: TPDObject; override;
  property Actual : THojaDeRutaRuteoDefaultPaso read GetActual;
  function FindPasoID( _PasoID : TObjectID ) : boolean; overload;
end;

THojaDeRutaRuteoDefaultFamilia = class(TPDObject)
private
  FHojaDeRutaRuteoDeFaultID : TObjectID;
  FFamiliaDeArticuloID      : TObjectID;
  FFamiliaDeArticulo        : TPDObject;
  FHojaDeRutaRuteoDeFault   : TPDObject;
  procedure SetFamiliaDeArticuloID(Value : TObjectID);
  procedure SetHojaDeRutaRuteoDeFaultID(Value : TObjectID);
  function GetFamiliaDeArticulo: TFamiliaDeArticulo;
  function GetHojaDeRutaRuteoDeFault: THojaDeRutaRuteoDeFault;
public
  constructor Create; override;
  Destructor Destroy; override;
  Procedure FreeObjectFromMemory;
  property FamiliaDeArticuloID      : TObjectID read FFamiliaDeArticuloID write SetFamiliaDeArticuloID;
  property FamiliaDeArticulo        : TFamiliaDeArticulo read GetFamiliaDeArticulo;
  property HojaDeRutaRuteoDeFaultID : TObjectID read FHojaDeRutaRuteoDeFaultID write SetHojaDeRutaRuteoDeFaultID;
  property HojaDeRutaRuteoDeFault   : THojaDeRutaRuteoDeFault read GetHojaDeRutaRuteoDeFault;
end;

THojaDeRutaRuteoDefaultFamiliaDM = class(TSQLDBX_DMObject)
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  const
    _FamiliaDeArticuloID      = 'FamiliaDeArticuloID';
    _HojaDeRutaRuteoDeFaultID = 'HojaDeRutaRuteoDeFaultID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaRuteoDefaultFamiliaList = class(TPDList)
private
  function GetActual : THojaDeRutaRuteoDefaultFamilia;
public
  constructor CreateAll;
  constructor CreateByRuteoDefault(_HRRD : THojaDeRutaRuteoDefault);
  function CreateNewObject: TPDObject; override;
  property Actual : THojaDeRutaRuteoDefaultFamilia read GetActual;
end;

TUsuarioPasoDeFabricacion = class(TPDObject)
  private
    FUsuarioID           : TObjectID;
    FPasoDeFabricacionID : TObjectID;
    FPasoDeFabricacion   : TPDObject;
    FUsuario             : TPDObject;
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    procedure SetUsuarioID(Value : TObjectID);
    function GetPasoDeFabricacion: TPasoDeFabricacion;
    function GetUsuario: TUsuario;
  public
    constructor Create; override;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion   : TPasoDeFabricacion read GetPasoDeFabricacion;
    property UsuarioID           : TObjectID read FUsuarioID write SetUsuarioID;
    property Usuario             : TUsuario  read GetUsuario;
end;

TUsuarioPasoDeFabricacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _PasoDeFabricacionID = 'PasoDeFabricacionID';
      _UsuarioID           = 'UsuarioID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TUsuarioPasoDeFabricacionList = class(TPDList)
  private
    function GetActual : TUsuarioPasoDeFabricacion;
  public
    constructor CreateAll;
    constructor CreatebyUsuario(_U : TUsuario);
    function CreateNewObject: TPDObject; override;
    property Actual : TUsuarioPasoDeFabricacion read GetActual;
    function FindPasoDeFabricacionID( _PFID : Integer ): Boolean; overload;
end;

TTipoDeNoConforme = class(TDescriptible)
  private
    FEsDefectoCalidad: Boolean;
  public
    constructor Create; override;
    Property EsDefectoCalidad : Boolean read FEsDefectoCalidad write FEsDefectoCalidad;
end;

TTipoDeNoConformeDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion       = 'TipoDeNoConforme';
    _EsInactivo        = 'EsInactivo';
    _EsDefectoCalidad  = 'EsDefectoCalidad';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeNoConformeList = class(TDescriptibleList)
  private
    function GetActual : TTipoDeNoConforme;
  public
    constructor CreateAll( _soloActivos: Boolean= false);
    constructor CreateByEsDefectoCalidad( _SoloActivos: Boolean= false);
    constructor CreateByNoEsDefectoCalidad(_SoloActivos: Boolean= false);
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeNoConforme read GetActual;
end;

THojaDeRutaNoConforme = class(TPDObject)
  private
    FHojaDeRutaID : TObjectID;
    FMotivoDeNoConformeID : TObjectID;
    FPorcentajeNoConforme : TReal;
    FDisposicionID : TObjectID;
    FPasoDeFabricacionID : TObjectID;
    FObservaciones : TString;
    FFechaDeApertura : TFecha;
    FFechaDeCierre : TFecha;
    FHojaDeRuta: TPDObject;
    FPasoDeFabricacion: TPDObject;
    FMotivoDeNoConforme: TPDObject;
    FDisposicion: TPDObject;
    FFechaDeCreacion: TFecha;
    FNumeroDeNoConforme: TEntero;
    FProducto   : TPDObject;
    FProductoID : TObjectID;
    // del create compuesto
    FCCMotivoDeNoConformeDescripcion: TString;
    FCCHojaDeRutaNumeroImprimible: TString;
    FCCHojaDeRutaNumero: TEntero;
    FCCDisposicionDescripcion: TString;
    FCCDisposicionActuaSobreProdTotal: TReal;
    FCCDisposicionPorcentajePerdidas: TReal;
    FCCPasoDeFabricacionCodigo: TString;
    FCCCunioParteDescripcion: TString;
    FCCFabricadoParteCodigo: TString;
    FCCTerminacionParteDescripcion: TString;
    FCCTerminacionParteCodigo: TString;
    FCCCunioParteCodigo: TString;
    FCCHojaDeRutaCantidadAFabricar: TReal;
    FCCK1: TReal;
    FCCMonedaK1: TReal;
    FCCNumeroPedido: TEntero;
    FCCFabricadoFinalCodigo: TString;
    FCCPedidoDeVentaCantidadPedida: TEntero;
    FK1: TReal;
    FK1Moneda: TPDObject;
    FK1MonedaID: TObjectID;
    FCCK1MonedaCodigo: TString;
    FEstadoDeDeteccionNoConforme: TPDObject;
    FEstadoDeDeteccionNoConformeID: TObjectID;
    FCCEstadoDeDeteccionDescripcion: TString;
    FCCPasoDeFabricacionDescripcion: TString;
    FTipoDeNoConformeID: TObjectID;
    FCCTipoDeNoConformeDescripcion: TString;
    FTipoDeNoConforme: TPDObject;
    FPorcentajeRechazado: TReal;
    FCantidad: Integer;
    // seters
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    procedure SetDisposicionID(Value : TObjectID);
    procedure SetMotivoDeNoConformeID(Value : TObjectID);
    procedure SetHojaDeRutaID(Value : TObjectID);
    procedure SetEstadoDeDeteccionNoConformeID(const Value: TObjectID);
    procedure SetProductoID(const Value: TObjectID);
    procedure SetK1MonedaID(const Value: TObjectID);
    procedure SetTipoDeNoConformeID(const Value: TObjectID);
    // geters
    function GetHojaDeRuta: THojaDeRuta;
    function GetPasoDeFabricacion: TPasoDeFabricacion;
    function GetMotivoDeNoConforme: TMotivoDeNoConforme;
    function GetDisposicion: TDisposicionDeNoConforme;
    function GetEstadoDeDeteccionNoConforme: TEstadoDeDeteccionNoConforme;
    function GetProducto: TProducto;
    function GetK1: TReal;
    function GetK1Moneda: TMoneda;
    function GetTipoDeNoConforme: TTipoDeNoConforme;
    // del create compuesto
    function GetCCCunioParteDescripcion: TString;
    function GetCCCunioParteCodigo: TString;
    function GetCCFabricadoParteCodigo: TString;
    function GetCCHojaDeRutaNumero: TEntero;
    function GetCCHojaDeRutaNumeroImprimible: TString;
    function GetCCMotivoDeNoConformeDescripcion: TString;
    function GetCCPasoDeFabricacionCodigo: TString;
    function GetCCTerminacionParteDescripcion: TString;
    function GetCCTerminacionParteCodigo: TString;
    function GetCCHojaDeRutaCantidadAFabricar: TReal;
    function GetCCNumeroPedido: TEntero;
    function GetCCFabricadoFinalCodigo: TString;
    function GetCCDisposicionDescripcion: TString;
    function GetCCDisposicionActuaSobreProdTotal: TBoolean;
    function GetCCDisposicionPorcentajePerdidas: TReal;
    function GetCCPedidoDeVentaCantidadPedida: TEntero;
    function GetCCK1MonedaCodigo: TString;
    function GetCCEstadoDeDeteccionDescripcion: TString;
    function GetCCPasoDeFabricacionDescripcion: TString;
    function GetCCTipoDeNoConformeDescripcion: TString;
  protected
    procedure Validate;
  public
    constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectFromMemory;
    procedure ValidateOnInsert; override;
    procedure ValidateOnUpdate; override;
    function Save: Boolean; override;
    property HojaDeRutaID                  : TObjectID read FHojaDeRutaID write SetHojaDeRutaID;
    property HojaDeRuta                    : THojaDeRuta read GetHojaDeRuta;
    property ProductoID                    : TObjectID read FProductoID write SetProductoID;
    property Producto                      : TProducto read GetProducto;
    property PasoDeFabricacionID           : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion             : TPasoDeFabricacion  read GetPasoDeFabricacion;
    property MotivoDeNoConformeID          : TObjectID read FMotivoDeNoConformeID write SetMotivoDeNoConformeID;
    property MotivoDeNoConforme            : TMotivoDeNoConforme read GetMotivoDeNoConforme;
    property DisposicionID                 : TObjectID read FDisposicionID write SetDisposicionID;
    property Disposicion                   : TDisposicionDeNoConforme read GetDisposicion;
    property EstadoDeDeteccionNoConformeID : TObjectID read FEstadoDeDeteccionNoConformeID write SetEstadoDeDeteccionNoConformeID;
    property EstadoDeDeteccionNoConforme   : TEstadoDeDeteccionNoConforme read GetEstadoDeDeteccionNoConforme;
    property FechaDeCierre                 : TFecha read FFechaDeCierre write FFechaDeCierre;
    property FechaDeApertura               : TFecha read FFechaDeApertura write FFechaDeApertura;
    property Observaciones                 : TString read FObservaciones write FObservaciones;
    property PorcentajeNoConforme          : TReal read FPorcentajeNoConforme write FPorcentajeNoConforme;
    property PorcentajeRechazado           : TReal read FPorcentajeRechazado write FPorcentajeRechazado;
    property NumeroDeNoConforme            : TEntero read FNumeroDeNoConforme write FNumeroDeNoConforme;
    property FechaDeCreacion               : TFecha read FFechaDeCreacion write FFechaDeCreacion;
    property Cantidad                      : Integer read FCantidad write FCantidad;
    //    Function AsignarUltimoNumero    : Integer;
    Property K1                     : TReal Read GetK1 Write FK1;
    Property K1MonedaID             : TObjectID Read FK1MonedaID Write SetK1MonedaID;
    Property K1Moneda               : TMoneda Read GetK1Moneda;
    Procedure CleanK1;
    Property TipoDeNoConformeID     : TObjectID Read FTipoDeNoConformeID Write SetTipoDeNoConformeID;
    Property TipoDeNoConforme       : TTipoDeNoConforme Read GetTipoDeNoConforme;
    // del create compuesto
    Property CCNumeroPedido                       : TEntero read GetCCNumeroPedido;
    Property CCHojaDeRutaNumeroImprimible         : TString read GetCCHojaDeRutaNumeroImprimible;
    Property CCHojaDeRutaNumero                   : TEntero read GetCCHojaDeRutaNumero;
    Property CCHojaDeRutaCantidadAFabricar        : TReal   read GetCCHojaDeRutaCantidadAFabricar;
    Property CCMotivoDeNoConformeDescripcion      : TString read GetCCMotivoDeNoConformeDescripcion;
    Property CCDisposicionDescripcion             : TString read GetCCDisposicionDescripcion;
    Property CCDisposicionPerdidas                : TReal   read GetCCDisposicionPorcentajePerdidas;
    Property CCDisposicionActuaSobreProdTotal     : TBoolean read GetCCDisposicionActuaSobreProdTotal;
    Property CCPasoDeFabricacionCodigo            : TString read GetCCPasoDeFabricacionCodigo;
    Property CCPasoDeFabricacionDescripcion       : TString read GetCCPasoDeFabricacionDescripcion;
    Property CCFabricadoParteCodigo               : TString read GetCCFabricadoParteCodigo;
    Property CCFabricadoFinalCodigo               : TString read GetCCFabricadoFinalCodigo;
    Property CCTerminacionParteDescripcion        : TString read GetCCTerminacionParteDescripcion;
    Property CCTerminacionParteCodigo             : TString read GetCCTerminacionParteCodigo;
    Property CCCunioParteDescripcion              : TString read GetCCCunioParteDescripcion;
    Property CCCunioParteCodigo                   : TString read GetCCCunioParteCodigo;
    Property CCPedidoDeVentaCantidadPedida        : TEntero read GetCCPedidoDeVentaCantidadPedida;
    Property CCK1MonedaCodigo                     : TString read GetCCK1MonedaCodigo;
    Property CCEstadoDeDeteccionDescripcion       : TString read GetCCEstadoDeDeteccionDescripcion;
    Property CCTipoDeNoConformeDescripcion        : TString read GetCCTipoDeNoConformeDescripcion;
end;

THojaDeRutaNoConformeDM = class(TSQLDBX_DMObject)
  Strict protected
    Class function CreateCompuesto    (_Parte : Integer = 0): String; override;
  public
    class function TableName          : string; override;
    class function ID_FieldName       : string; override;
    const
      _FechaDeCierre                        = 'FechaDeCierre';
      _FechaDeApertura                      = 'FechaDeApertura';
      _Observaciones                        = 'Observaciones';
      _PasoDeFabricacionID                  = 'PasoDeFabricacionID';
      _DisposicionID                        = 'DisposicionID';
      _PorcentajeNoConforme                 = 'PorcentajeNoConforme';
      _PorcentajeRechazado                  = 'PorcentajeRechazado';
      _MotivoDeNoConformeID                 = 'MotivoDeNoConformeID';
      _EstadoDeDeteccionNoConformeID        = 'EstadoDeDeteccionNoConformeID';
      _HojaDeRutaID                         = 'HojaDeRutaID';
      _NumeroDeNoConforme                   = 'NumeroDeNoConforme';
      _FechaDeCreacion                      = 'FechaDeCreacion';
      _ProductoID                           = 'ProductoID';
      _K1                                   = 'K1';
      _K1MonedaID                           = 'K1MonedaID';
      _TipoDeNoConformeID                   = 'TipoDeNoConformeID';
      _Cantidad                             = 'Cantidad';
      // Del Create Compuesto
      _CCHojaDeRutaNumeroImprimible         = 'HojaDeRutaNumeroImprimible';
      _CCHojaDeRutaNumero                   = 'HojaDeRutaNumero';
      _CCHojaDeRutaCantidadAFabricar        = 'HojaDeRutaCantidadAFabricar';
      _CCMotivoDeNoConformeDescripcion      = 'MotivoDeNoConformeDescripcion';
      _CCEstadoDeDeteccionDescripcion       = 'EstadoDeDeteccionDescripcion';
      _CCDisposicionDescripcion             = 'DisposicionDescripcion';
      _CCDisposicionPorcentajePerdidas      = 'DisposicionPorcentajePerdidas';
      _CCDisposicionActuaSobreProdTotal     = 'DisposicionActuaSobreProdTotal';
      _CCPasoDeFabricacionCodigo            = 'PasoDeFabricacionCodigo';
      _CCPasoDeFabricacionDescripcion       = 'PasoDeFabricacionDescripcion';
      _CCFabricadoParteCodigo               = 'FabricadoParteCodigo';
      _CCFabricadoFinalCodigo               = 'FabricadoFinalCodigo';
      _CCTerminacionParteDescripcion        = 'TerminacionParteDescripcion';
      _CCTerminacionParteCodigo             = 'TerminacionParteCodigo';
      _CCCunioParteDescripcion              = 'CunioParteDescripcion';
      _CCCunioParteCodigo                   = 'CunioParteCodigo';
      _CCNumeroPedido                       = 'NumeroPedido';
      _CCPedidoDeVentaItemCantidadPedida    = 'PedidoDeVentaItemCantidadPedida';
      _CCK1MonedaCodigo                     = 'K1MonedaCodigo';
      _CCTipoDeNoConformeDescripcion        = 'TipoDeNoConformeDescripcion';

      _SP_HojaDeRutaNoConforme_By_UltimoNumero = 'HojaDeRutaNoConforme_By_UltimoNumero';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THojaDeRutaNoConformeList = class(TPDList)
  private
    function GetActual : THojaDeRutaNoConforme;
  public
    constructor CreateAll;
    Constructor CreateByNoConformes;
    Constructor CreateByFaltanteExcedente;
    constructor CreateEmpty;
    Constructor CreateByHojaDeRuta(_HR : THojaDeRuta);
    Constructor CreateByProductoParte(_P : TProducto);
    Constructor CreateByFechaDesdeFechaHasta(_FechaDesde : TFecha ; _FechaHasta : TFecha; _SoloNoConformes : Boolean = True );
    Constructor CreateBySectorAndFechaDesdeFechaHasta(_Sector : TSector ; _FechaDesde : TFecha ; _FechaHasta : TFecha; _SoloNoConformes : Boolean = True);
    Constructor CreateByMaximoNumero ( _TNC : TTipoDeNoConforme; _Year : String  );
    function CreateNewObject: TPDObject; override;
    property Actual : THojaDeRutaNoConforme read GetActual;
end;

TDisposicionDeNoConforme = class(TDescriptible)
  Private
    FRequiereReprogramacion    : TBoolean;
    FActuaSobreProduccionTotal : TBoolean;
    FPorcentajePerdidas        : TReal;
    FTipoDeNoConformeID        : TObjectID;
    FTipoDeNoConforme          : TPDObject;
    procedure SetTipoDeNoConformeID(const Value: TObjectID);
    function GetTipoDeNoConforme: TTipoDeNoConforme;
  Public
    constructor Create; override;
    property RequiereReprogramacion    : TBoolean read FRequiereReprogramacion    write FRequiereReprogramacion;
    property PorcentajePerdidas        : TReal    read FPorcentajePerdidas        write FPorcentajePerdidas;
    property ActuaSobreProduccionTotal : TBoolean read FActuaSobreProduccionTotal write FActuaSobreProduccionTotal;
    property TipoDeNoConformeID        : TObjectID read FTipoDeNoConformeID write SetTipoDeNoConformeID;
    property TipoDeNoConforme          : TTipoDeNoConforme read GetTipoDeNoConforme;
end;

TDisposicionDeNoConformeDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _Descripcion               = 'DisposicionDeNoConforme';
      _EsInactivo                = 'EsInactivo';
      _RequiereReprogramacion    = 'RequiereReprogramacion';
      _PorcentajePedidas         = 'PorcentajePerdidas';
      _ActuaSobreProduccionTotal = 'ActuaSobreProduccionTotal';
      _TipoDeNoConformeID        = 'TipoDeNoConformeID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TDisposicionDeNoConformeList = class(TDescriptibleList)
  private
    function GetActual : TDisposicionDeNoConforme;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByNoRequiereReprogramacion(_SoloActivos: Boolean = False);

    constructor CreateByTipoDeNoConformeID( _TNCID : TObjectID ; _SoloActivos: Boolean = False);
    constructor CreateByTipoDeNoConformeIDAndDescripcionLike( _TNCID : TObjectID ; _D : String  ; _SoloActivos: Boolean = False);

    function CreateNewObject: TPDObject; override;
    property Actual : TDisposicionDeNoConforme read GetActual;
end;

TMotivoDeNoConforme = class(TDescriptible)
  private
    FSector     : TPDObject;
    FSectorID   : TObjectID;
    FColor      : TEntero;
    function GetSector: TSector;
  public
    constructor Create; override;
    property SectorID   : TObjectID read FSectorID write FSectorID;
    property Sector     : TSector read GetSector;
    property Color      : TEntero read FColor Write FColor;
end;

TMotivoDeNoConformeDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _Descripcion = 'Descripcion';
      _SectorID    = 'SectorID';
      _Color       = 'Color';
      _EsInactivo  = 'Esinactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMotivoDeNoConformeList = class(TDescriptibleList)
  private
    function GetActual : TMotivoDeNoConforme;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual : TMotivoDeNoConforme read GetActual;
end;

TEstadoDeDeteccionNoConforme = class(TDescriptible)
  private
    FCoeficiente : TReal;
  public
    constructor Create; override;
    property Coeficiente : TReal read FCoeficiente write FCoeficiente;
end;

TEstadoDeDeteccionNoConformeDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Coeficiente = 'Coeficiente';
    _Descripcion = 'EstadoDeDeteccionNoConforme';
    _EsInactivo  = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeDeteccionNoConformeList = class(TDescriptibleList)
  private
    function GetActual : TEstadoDeDeteccionNoConforme;
  public
    constructor CreateAll(_SoloActivos: Boolean= false);
    function CreateNewObject: TPDObject; override;
    property Actual : TEstadoDeDeteccionNoConforme read GetActual;
end;

TRemito = class(TDocumentoLetrado)
  private
    FItems : TObject;
    FHorarioDeEntrega : TString;
    FGrupoDeVendedorID : TObjectID;
    FGrupoDeVendedor : TPDObject;
    FEstadoDeRemitoID : TObjectID;
    FEstadoDeRemito : TPDObject;
    FEmpresaID : TObjectID;
    FLicenciatarioID : TObjectID;
    FLicenciatario : TPDObject;
    FEmpresa : TPDObject;
    fDepositoDeEntregaID: TObjectID;
    fDepositoDeEntrega: TPDObject;
    fEmpresaFleteID: TObjectID;
    fEmpresaFlete: TPDObject;
    fFechaDeEmision: TFechaHora;
    FCondicionDeVentaID: TObjectID;
    FCondicionDeVenta: TPDObject;
    FStateLogs: TRemitoStateLogList;
    FEmpresaApholos: TEmpresa;
    FCodigoInternoSifab: TString;
    FFechaDeEstadoRemitido: TFechaHora;
    FEstadoRemitidoID: TObjectID;
    FTipoDeFormularioFacturacionID: TObjectID;
    FTipoDeFormularioFacturacion: TPDObject;
    FCondicionDeIvaID: TObjectID;
    FCondicionDeIva: TPDObject;
    FNumeroDePreparacion: TEntero;
    FFacturas: TFacturaList;
    FLasFacturasEstanConfirmadas: TBoolean;
    FTmpMoverStock: TBoolean;
    FEstaEnSifab: TBoolean;
    FPackingList: TPackingList;
    FIDTeamplace: TEntero;
    FNumeroDeFacturaTeamplace: TString;
    FEstadosDeMigracion: TRemitoEstadoDeMigracionList;
    FFechaDeFacturaTeamplace: TDateTime;
    FTalonarioTeamplace: TEntero;
    FTmpEstadoAnterior: TPDObject;
    FTmpEstadoAnteriorID: TObjectID;
    FEsParaKit: TBoolean;
    FUnidadesPorKit: TEntero;
    FCantidadDeKitsRemitidos: TEntero;
    FItemsDeKit: TRemitoItemList;

    procedure SetEmpresaID(Value : TObjectID);
    procedure SetLicenciatarioID(const Value: TObjectID);
    procedure SetEstadoDeRemitoID(Value : TObjectID);
    procedure SetGrupoDeVendedorID(Value : TObjectID);
    procedure SetDepositoDeEntregaID(const Value: TObjectID);
    procedure SetEmpresaFleteID(const Value: TObjectID);
    procedure SetCondicionDeVentaID(const Value: TObjectID);
    function ObtenerEstadoID(_Cod : String) : TObjectID;
    procedure SetTipoDeFormularioFacturacionID(const Value: TObjectID);
    procedure SetCondicionDeIvaID(const Value: TObjectID);

    function GetEmpresa : TEmpresa;
    function GetLicenciatario : TEmpresa;
    function GetEstadoDeRemito : TEstadoDeRemito;
    function GetGrupoDeVendedor : TGrupoDeVendedor;
    function GetItems : TRemitoItemList;
    function GetItemsDeKit: TRemitoItemList;
    function GetDepositoDeEntrega: TDeposito;
    function GetEmpresaFlete: TEmpresa;
    function GetCondicionDeVenta: TCondicionDeVenta;
    function GetStateLogs: TRemitoStateLogList;
    function GetFechaDeEstadoRemitido: TFechaHora;
    function GetEmpresaApholos: TEmpresa;
    function GetCodigoInternoSifab: TEntero;
    function GetTipoDeFormularioFacturacion: TTipoDeFormulario;
    function GetCondicionDeIva: TCondiciondeIVA;
    function GetFacturas: TFacturaList;
    function GetTieneFacturaConfirmada: TBoolean;
    function GetLasPreFacturasEstanCanceladas: TBoolean;
    function GetTienePreFactura: TBoolean;
    function GetEstaEnSifab: TBoolean;
    function GetPackingList: TPackingList;
    function GetIDTeamplace: TEntero;
    function GetNumeroDeFacturaTeamplace: TString;
    function GetEstadosDeMigracion: TRemitoEstadoDeMigracionList;
    function GetFechaDeFacturaTeamplace: TDateTime;
    function GetTalonarioTeamplace: TEntero;
    function GetTmpEstadoAnterior: TEstadoDeRemito;
    procedure SetTmpEstadoAnteriorID(const Value: TObjectID);
    function GetNumeroDePreparacion: TEntero;
  public
    Constructor Create; override;
    Function Save: Boolean; Override;
    Procedure FreeObjectFromMemory;
    Procedure LimpiarItemsDeMemoria;
    Procedure AgregarNuevoEstadoAlLog;
    Procedure ActualizarItems;
    Procedure ActualizarPedidos;
    Class Function AsignarNumero : Integer;
    Class Function Reporte ( _R: TRemito ; _Imprimir : Boolean ): String;
    Class Function EstadoRemitidoID: TObjectID;
    Class Function EstadoCumplidoID: TObjectID;
    Class Procedure ActualizarEstados( _R : TRemito      ; _MuestraDialog : Boolean = False); overload;
    Class Procedure ActualizarEstados( _RL : TRemitoList ; _MuestraDialog : Boolean = False); overload;
    property Items               : TRemitoItemList read GetItems;
    property ItemsDeKit          : TRemitoItemList read GetItemsDeKit;
    property Empresa             : TEmpresa read GetEmpresa;
    property EmpresaID           : TObjectID read FEmpresaID write SetEmpresaID;
    property Licenciatario       : TEmpresa read GetLicenciatario;
    property LicenciatarioID     : TObjectID read FLicenciatarioID write SetLicenciatarioID;
    property EstadoDeRemito      : TEstadoDeRemito read GetEstadoDeRemito;
    property EstadoDeRemitoID    : TObjectID read FEstadoDeRemitoID write SetEstadoDeRemitoID;
    property GrupoDeVendedor     : TGrupoDeVendedor read GetGrupoDeVendedor;
    property GrupoDeVendedorID   : TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property HorarioDeEntrega    : TString read FHorarioDeEntrega write FHorarioDeEntrega;
    property DepositoDeEntrega   : TDeposito read GetDepositoDeEntrega;
    property DepositoDeEntregaID : TObjectID read fDepositoDeEntregaID write SetDepositoDeEntregaID;
    property CondicionDeVenta    : TCondicionDeVenta read GetCondicionDeVenta;
    property CondicionDeVentaID  : TObjectID read FCondicionDeVentaID write SetCondicionDeVentaID;
    property CondicionDeIva      : TCondiciondeIVA read GetCondicionDeIva;
    property CondicionDeIvaID    : TObjectID read FCondicionDeIvaID write SetCondicionDeIvaID;
    property EmpresaFlete        : TEmpresa  read GetEmpresaFlete;
    property EmpresaFleteID      : TObjectID read FEmpresaFleteID write SetEmpresaFleteID;
    property FechaDeEmision      : TFechaHora read fFechaDeEmision   write fFechaDeEmision;
    property StateLogs           : TRemitoStateLogList read GetStateLogs;
    property NumeroDePreparacion : TEntero read GetNumeroDePreparacion;
    property EsParaKit           : TBoolean Read FEsParaKit Write FEsParaKit;
    property UnidadesPorKit      : TEntero Read FUnidadesPorKit write FUnidadesPorKit ;
    property Facturas               : TFacturaList read GetFacturas;
    property TieneFacturaConfirmada : TBoolean Read GetTieneFacturaConfirmada;
    property TienePreFactura        : TBoolean Read GetTienePreFactura;
    property LasPreFacturasEstanCanceladas : TBoolean Read GetLasPreFacturasEstanCanceladas;

    // Propertys temporales
    property TmpEstadoAnteriorID           : TObjectID Read FTmpEstadoAnteriorID write SetTmpEstadoAnteriorID;
    property TmpEstadoAnterior             : TEstadoDeRemito Read GetTmpEstadoAnterior;
    property TmpMoverStock                 : TBoolean Read FTmpMoverStock Write FTmpMoverStock; // esto es para que cuando se cancela una prefactura le pase este valor a los ítems y al hacer el save no valide las cantidades que ya fueron tocadas cuando se confirmó el remito
    property TipoDeFormularioFacturacion   : TTipoDeFormulario read GetTipoDeFormularioFacturacion;
    property TipoDeFormularioFacturacionID : TObjectID read FTipoDeFormularioFacturacionID write SetTipoDeFormularioFacturacionID;
    property EmpresaApholos        : TEmpresa read GetEmpresaApholos;
    Property CodigoInternoSifab    : TEntero Read GetCodigoInternoSifab;
    Property EstaEnSifab           : TBoolean Read GetEstaEnSifab;
    property FechaDeEstadoRemitido : TFechaHora Read GetFechaDeEstadoRemitido;
    Property PackingList           : TPackingList read GetPackingList;
    property CantidadDeKitsRemitidos : TEntero read FCantidadDeKitsRemitidos write FCantidadDeKitsRemitidos;

//sifab
    Class function ObtenerNumeroFacturaSifab(_NumeroRemito: Integer): String ; static;

//Teamplace
    Class Function FinnegansMigrarRemitoDeVenta( _R: TRemito ; _E : TEmpresa ; _Prioridad : Real ; _ES : TEmpresaDeSistema; _TipoDeDocumento : String; _WorkFlow : String; _Vendedor : String): Boolean; overload;
    Function FinnegansMigrarRemitoDeVenta( _R : TRemito  ) : Boolean ; overload;
    property TalonarioTeamplace        : TEntero   Read GetTalonarioTeamplace;
    Property IDTeamplace              : TEntero   Read GetIDTeamplace;
    Property NumeroDeFacturaTeamplace : TString   Read GetNumeroDeFacturaTeamplace;
    Property FechaDeFacturaTeamplace  : TDateTime Read GetFechaDeFacturaTeamplace;
    Property EstadosDeMigracion       : TRemitoEstadoDeMigracionList Read GetEstadosDeMigracion;
    Function EstaEnTeamplace (_E : TEmpresaDeSistema) : Boolean;
end;

TRemitoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
  const
    _NumeroDePreparacion      = 'NumeroDePreparacion';
    _TipoDeFormularioID       = 'TipoDeFormularioID';
    _EmpresaID                = 'EmpresaID';
    _EmpresaFleteID           = 'EmpresaFleteID';
    _LicenciatarioID          = 'LicenciatarioID';
    _GrupoDeVendedorID        = 'GrupoDeVendedorID';
    _DepositoDeEntregaID      = 'DepositoDeEntregaID';
    _HorarioDeEntrega         = 'HorarioDeEntrega';
    _CentroDeFacturacionID    = 'CentroDeFacturacionID';
    _NumeroDocumento          = 'NumeroDocumento';
    _Observaciones            = 'Observaciones';
    _CondicionDeVentaID       = 'CondicionDeVentaID';
    _CondicionDeIvaID         = 'CondicionDeIvaID';
    _EstadoDeRemitoID         = 'EstadoDeRemitoID';
    _CAI                      = 'CAI';
    _FechaDeEmision           = 'FechaDeEmision';
    _FechaDeVtoCAI            = 'FechaDeVtoCAI';
    _FechaDeImpresion         = 'FechaDeImpresion';
    _EsParaKit                = 'EsParaKit';
    _UnidadesPorKit           = 'UnidadesPorKit';
    _CantidadDeKitsRemitidos  = 'CantidadDeKitsRemitidos';
    //Alias de la base de datos de Teamplace
    _TeamplaceTableName       = 'BSTransaccion';
    _TeamplaceID              = 'TransaccionID';
    _TeamplaceNumeroDocumento = 'NumeroDocumento';
    _TeamplaceEmpresaID       = 'EmpresaID';
    _TeamplaceTalonarioID     = 'TalonarioID'; // el talonario es un getter

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TRemitoList = class(TDocumentoList)
  private
    Function GetActual : TRemito;
  public
    Constructor CreateAll;
    Constructor CreateByUltimoNumero;
    Constructor CreateByUltimoNumeroDePreparacion;
    Constructor CreateByPedidoDeVentaItem (_PVI : TPedidoDeVentaItem);
    Constructor CreateByPedidoDeVentaItemAndEstadoDeRemitoCodigo(_PVI : TPedidoDeVentaItem; _CodigoEstado: TString );
    Constructor CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList); overload;
    Constructor CreateByEstados(_Est: String); overload;
    Constructor CreateByEstadosAndTipoDeCliente(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsExportacion : Boolean = False); overload;
    Constructor CreateByEstadosAndTipoDeCliente(_Est: String; _EsExportacion : Boolean = False); overload;
    Constructor CreateByNumeroDesdeNumeroHasta(_NumeroDesde: Integer; _NumeroHasta: Integer; _Descendente: Boolean = False ; _FitrarPorVendedor: Boolean = True);
    Constructor CreateByNumeroDesdeNumeroHastaAndEstadosDeRemito(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean = False);
    Constructor CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _Descendente: Boolean = False);
    Constructor CreateByFechaDesdeFechaHastaAndEstadosDeRemito(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList;_Descendente: Boolean = False);
    Constructor CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde, _FechaHasta: String);
    Constructor CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeRemito(_C: TCliente; _FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False);
    Constructor CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String);
    Constructor CreateByGrupoDeVendedoresAndFechaDesdeFechaHastaAndEstadosDeRemito(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False);
    Constructor CreateByPedidoDeVenta(_P: TPedidoDeVenta);
    Constructor CreateByPedidoDeVentaAndEstadosDeRemito(_P: TPedidoDeVenta; _EstadosID: TStringList; _Descendente: Boolean = False);
    Function CreateNewObject: TPDObject; override;
    Property Actual : TRemito read GetActual;
end;

TRemitoItem = class(TPDObject)
  private
    FProductoID          : TObjectID;
    FPedidoDeVentaItemID : TObjectID;
    FItemNro             : TEntero;
    FEsFacturable        : TBoolean;
    FCantidad            : TReal;
    FCantidadDeBultos    : TEntero;
    FRemitoID            : TObjectID;
    FPedidoDeVentaItem   : TPDObject;
    FProducto            : TPDObject;
    FRemito              : TPDObject;
    FDescripcion         : TString;
    FTmpTipoDeFormularioID: TObjectID;
    FTmpEstadoDeRemitoOrigenID : TObjectID;
    FTmpEstadoDeRemitoID  : TObjectID;
    FTmpTipoDeFormulario  : TPDObject;
    FTmpEstadoDeRemitoOrigen : TPDObject;
    FTmpEstadoDeRemito    : TPDObject;
    FTmpMoverStock: TBoolean;
    FCCRemitoEmpresaID: TObjectID;
    FCCEstadoDeRemitoCodigo: TString;
    FCCRemitoObservaciones: TString;
    FCCProductoCodigo: TString;
    FCCRemitoLicenciatarioID: TObjectID;
    FCCLicenciatarioDescripcion: TString;
    FCCClienteCodigo: TString;
    FCCPedidoDeVentaItemItemNro: Integer;
    FCCRemitoEmpresaFleteID: TObjectID;
    FCCRemitoCondiciondeVentaID: TObjectID;
    FCCRemitoFechaDeImpresion: TFecha;
    FCCRemitoNumero: TEntero;
    FCCCentroDeFacturacionCodigo: TString;
    FCCLicenciatarioCodigo: TString;
    FCCRemitoEstadoDeRemitoID: TObjectID;
    FCCPedidoDeVentaNumero: Integer;
    FCCEstadoDeRemitoDescripcion: TString;
    FCCRemitoGrupoDeVendedorID: TObjectID;
    FCCGrupoDeVendedorDescripcion: TString;
    FCCClienteDescripcion: TString;
    FCCRemitoTipoDeFormularioID: TObjectID;
    FCCRemitoFechaDeEmision: TFecha;
    FCCRemitoDirecciondeEntregaID: TObjectID;
    FUnidadesPorPrenda: TEntero;
    FNumeroDePreparacion: TEntero;
    FCantidadDeKitsRemitidos: TEntero;
    procedure SetPedidoDeVentaItemID(Value : TObjectID);
    procedure SetProductoID(Value : TObjectID);
    function GetPedidoDeVentaItem: TPedidoDeVentaItem;
    function GetProducto: TProducto;
    function GetProductoID: TObjectID;
    function GetRemito: TRemito;
    procedure SetTmpTipoDeFormularioID(const Value: TObjectID);
    function GetTmpTipoDeFormulario: TTipoDeFormulario;
    procedure SetTmpEstadoDeRemitoID(const Value: TObjectID);
    function GetTmpEstadoDeRemito: TEstadoDeRemito;
    function GetTmpEstadoDeRemitoID: TObjectID;
    function GetTmpTipoDeFormularioID: TObjectID;
    function GetTmpEstadoDeRemitoOrigenID: TObjectID;
    procedure SetTmpEstadoDeRemitoOrigenID(const Value: TObjectID);
    function GetTmpEstadoDeRemitoOrigen: TEstadoDeRemito;
    function GetUnidadesPorPrenda: TEntero;
    function GetCantidadDeKitsRemitidos: TEntero;
  public
    constructor Create; override;
    Function Save: Boolean; override;
    property Remito              : TRemito read GetRemito;
    property RemitoID            : TObjectID read FRemitoID write FRemitoID;
    property CantidadDeBultos    : TEntero read FCantidadDeBultos write FCantidadDeBultos;
    property Cantidad            : TReal read FCantidad write FCantidad;
    property EsFacturable        : TBoolean read FEsFacturable write FEsFacturable;
    property ItemNro             : TEntero read FItemNro write FItemNro;
    property Descripcion         : TString read FDescripcion write FDescripcion;
    property PedidoDeVentaItem   : TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property PedidoDeVentaItemID : TObjectID read FPedidoDeVentaItemID write SetPedidoDeVentaItemID;
    property Producto            : TProducto read GetProducto;
    property ProductoID          : TObjectID read GetProductoID write SetProductoID;
    property UnidadesPorPrenda   : TEntero read GetUnidadesPorPrenda ;//write FUnidadesPorPrenda;
    property NumeroDePreparacion : TEntero read FNumeroDePreparacion write FNumeroDePreparacion ;
    property CantidadDeKitsRemitidos : TEntero read GetCantidadDeKitsRemitidos;


    //temporales: Son datos del Remito (encabezado) para usar antes de que esté grabado en la tabla.
    // Se necesitan para realizar las acciones de stock correspondientes al estado del remito
    property TmpEstadoDeRemitoOrigenID : TObjectID read GetTmpEstadoDeRemitoOrigenID   write SetTmpEstadoDeRemitoOrigenID;
    property TmpEstadoDeRemitoOrigen   : TEstadoDeRemito read GetTmpEstadoDeRemitoOrigen;
    property TmpEstadoDeRemitoID   : TObjectID read GetTmpEstadoDeRemitoID   write SetTmpEstadoDeRemitoID;
    property TmpEstadoDeRemito     : TEstadoDeRemito read GetTmpEstadoDeRemito;
    property TmpTipoDeFormularioID : TObjectID read GetTmpTipoDeFormularioID write SetTmpTipoDeFormularioID;
    property TmpTipoDeFormulario   : TTipoDeFormulario read GetTmpTipoDeFormulario;
    property TmpMoverStock         : TBoolean Read FTmpMoverStock Write FTmpMoverStock; // esto es para que cuando es unificacion de remitos al hacer el save no valide las cantidades quwe ya fueron tocadas en los remitos originales
    // del create compuesto
    Property CCRemitoNumero               : TEntero   Read FCCRemitoNumero;
    Property CCRemitoObservaciones        : TString   Read FCCRemitoObservaciones;
    Property CCRemitoCondiciondeVentaID   : TObjectID Read FCCRemitoCondiciondeVentaID;
    Property CCRemitoFechaDeEmision       : TFecha    Read FCCRemitoFechaDeEmision;
    Property CCRemitoFechaDeImpresion     : TFecha    Read FCCRemitoFechaDeImpresion;
    Property CCRemitoEmpresaID            : TObjectID Read FCCRemitoEmpresaID;
    Property CCRemitoEmpresaFleteID       : TObjectID Read FCCRemitoEmpresaFleteID;
    Property CCRemitoLicenciatarioID      : TObjectID Read FCCRemitoLicenciatarioID;
    Property CCRemitoGrupoDeVendedorID    : TObjectID Read FCCRemitoGrupoDeVendedorID;
    Property CCRemitoDirecciondeEntregaID : TObjectID Read FCCRemitoDirecciondeEntregaID;
    Property CCRemitoTipoDeFormularioID   : TObjectID Read FCCRemitoTipoDeFormularioID ;
    Property CCRemitoEstadoDeRemitoID     : TObjectID Read FCCRemitoEstadoDeRemitoID;
    Property CCProductoCodigo             : TString   Read FCCProductoCodigo;
    Property CCCentroDeFacturacionCodigo  : TString   Read FCCCentroDeFacturacionCodigo;
    Property CCClienteCodigo              : TString   Read FCCClienteCodigo;
    Property CCClienteDescripcion         : TString   Read FCCClienteDescripcion;
    Property CCLicenciatarioCodigo        : TString   Read FCCLicenciatarioCodigo;
    Property CCLicenciatarioDescripcion   : TString   Read FCCLicenciatarioDescripcion;
    Property CCEstadoDeRemitoCodigo       : TString   Read FCCEstadoDeRemitoCodigo;
    Property CCEstadoDeRemitoDescripcion  : TString   Read FCCEstadoDeRemitoDescripcion;
    Property CCGrupoDeVendedorDescripcion : TString   Read FCCGrupoDeVendedorDescripcion;
    Property CCPedidoDeVentaItemItemNro   : Integer   Read FCCPedidoDeVentaItemItemNro;
    Property CCPedidoDeVentaNumero        : Integer   Read FCCPedidoDeVentaNumero;
end;

TRemitoItemDM = class(TSQLDBX_DMObject)
  public
    class function CreateCompuesto( _Parte: Integer = 0 ): String; override;
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CantidadDeBultos       = 'CantidadDeBultos';
    _Cantidad               = 'Cantidad';
    _EsFacturable           = 'EsFacturable';
    _ItemNro                = 'ItemNro';
    _Descripcion            = 'Descripcion';
    _PedidoDeVentaItemID    = 'PedidoDeVentaItemID';
    _ProductoID             = 'ProductoID';
    _RemitoID               = 'RemitoID';
    _UnidadesPorPrenda      = 'UnidadesPorPrenda';
    _NumeroDePreparacion    = 'NumeroDePreparacion';
    // del create compuesto
    _CCRNumero                    = 'RemitoNumero';
    _CCRObservaciones             = 'RemitoObservaciones';
    _CCRCondiciondeVentaID        = 'RemitoCondicionDeVentaID';
    _CCRFechaDeEmision            = 'RemitoFechaDeEmision';
    _CCRFechaDeImpresion          = 'RemitoFechaDeImpresion';
    _CCREmpresaID                 = 'RemitoEmpresaID';
    _CCREmpresaFleteID            = 'RemitoEmpresaFleteID';
    _CCRLicenciatarioID           = 'RemitoLicenciatarioID';
    _CCRGrupoDeVendedorID         = 'RemitoGrupoDeVendedorD';
    _CCRDirecciondeEntregaID      = 'RemitoDireccionDeEntregaID';
    _CCRTipoDeFormularioID        = 'RemitoTipoDeFormularioID';
    _CCREstadoDeRemitoID          = 'RemitoEstadoDeRemitoID';
    _CCPCodigoDeProducto          = 'ProductoCodigo';
    _CCCentroDeFacturacionCodigo  = 'CentroDeFacturacionCodigo';
    _CCFBarticuloID               = 'FabricadoArticuloID';
    _CCFBcunioID                  = 'FabricadoCunioD';
    _CCFBterminacionID            = 'FabricadoTerminacionID';
    _CCFBFabricadoID              = 'FabricadoID';
    _CCFBCodigo                   = 'FabricadoCodigo';
    _CCFBCrc                      = 'FabricadoCRC';
    _CCFBDesarrolloID             = 'FabricadoDesarrolloID';
    _CCFBDescripcion              = 'FabricadoDescripcion';
    _CCServicioCodigo             = 'ServicioCodigo';
//    _CCServicioCodigoSifab        = 'ServicioCodigoSifab';
    _CCServicioDescripcion        = 'ServicioDescripcion';
    _CCClienteCodigo              = 'EmpresaCodigo';
    _CCClienteDescripcion         = 'EmpresaDescripcion';
    _CCLicenciatarioCodigo        = 'LicenciatarioCodigo';
    _CCLicenciatarioDescripcion   = 'LicenciatarioDescripcion';
    _CCEstadoDeRemitoCodigo       = 'EstadoCodigo';
    _CCEstadoDeRemitoDescripcion  = 'EstadoDescripcion';
    _CCGrupoDeVendedorDescripcion = 'GrupoDeVendedorDescripcion';
    _CCGrupoDeVendedorTribeca     = 'GrupoDeVendedorTribecaDescripcion';
    _CCPedidoDeVentaItemItemNro   = 'PedidoDeVentaItemItemNro';
    _CCPedidoDeVentaNumero        = 'PedidoDeVentaNumero';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TRemitoItemList = class(TPDList)
private
  function Getactual : TRemitoItem;
public
  constructor CreateAll;
  Constructor CreateEmpty;
  Constructor CreateByID( _ID: TObjectID);
  Constructor CreateByRemito(_R : TRemito);
  Constructor CreateByRemitoID(_RemitoID : TObjectID);
  constructor CreateByPedidoDeVentaItem( _PVI : TPedidoDeVentaItem );
  function CreateNewObject: TPDObject; override;
  property actual : TRemitoItem read Getactual;
end;

TRemitoStateLog = class(TPDObject)
  private
    FfechaHora       : TFechaHora;
    Fusuario         : TPDObject;
    FusuarioID       : TObjectID;
    FEstadoDeRemitoID: TObjectID;
    FRemitoID        : TObjectID;
    FEstadoDeRemito  : TPDObject;
    procedure SetusuarioID(Value : TObjectID);
    function Getusuario : TUsuario;
    function GetEstadoDeRemito: TEstadoDeRemito;
    procedure SetEstadoDeRemitoID(const Value: TObjectID);
  public
    constructor Create; override;
    property EstadoDeRemitoID : TObjectID read FEstadoDeRemitoID write SetEstadoDeRemitoID;
    property EstadoDeRemito : TEstadoDeRemito read GetEstadoDeRemito;
    property UsuarioID : TObjectID read FusuarioID write SetusuarioID;
    property Usuario : TUsuario read Getusuario;
    property FechaHora : TFechaHora read FfechaHora write FfechaHora;
    property RemitoID : TObjectID read FRemitoID write FRemitoID;
end;

TRemitoStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _EstadoDeRemitoID        = 'EstadoDeRemitoID';
      _UsuarioID               = 'UsuarioID';
      _FechaHora               = 'FechaHora';
      _RemitoID                = 'RemitoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TRemitoStateLogList = class(TPDList)
  private
    function GetActual : TRemitoStateLog;
  public
    constructor CreateAll;
    constructor CreateByRemito(_R : TRemito ); overload;
    constructor CreateByRemito(_RID : TObjectID ); overload;
    function FindEstadoRemitido: Boolean;
    function FindEstadoCumplido: Boolean;
    function FindEstadoID(_EID: TObjectID): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual : TRemitoStateLog read GetActual;
end;

TRemitoEstadoDeMigracion = class(TPDObject)
  private
    FRemitoID          : TObjectID;
    FRemito            : TPDObject;
    FEstadoDeMigracion : TBoolean;
    FDetalleDeError    : TString;
    FUsuarioID         : TObjectID;
    FUsuario           : TPDObject;
    FEmpresaDestinoID  : TObjectID;
    FEmpresaDestino    : TPDObject;
    FFechaHora         : TFechaHora;
    function GetRemito : TRemito;
    function GetUsuario: TUsuario;
    function GetEmpresaDestino: TEmpresaDeSistema;
    procedure SetRemitoID(Value : TObjectID);
    procedure SetUsuarioID(const Value: TObjectID);
    procedure SetEmpresaDestinoID(const Value: TObjectID);
  public
    constructor Create; override;
    property DetalleDeError    : TString   read FDetalleDeError write FDetalleDeError;
    property EstadoDeMigracion : TBoolean  read FEstadoDeMigracion write FEstadoDeMigracion;
    property Remito            : TRemito   read GetRemito;
    property RemitoID          : TObjectID read FRemitoID write SetRemitoID;
    property Usuario           : TUsuario  read GetUsuario;
    property UsuarioID         : TObjectID read FUsuarioID write SetUsuarioID;
    property EmpresaDestino    : TEmpresaDeSistema read GetEmpresaDestino;
    property EmpresaDestinoID  : TObjectID read FEmpresaDestinoID write SetEmpresaDestinoID;
    property FechaHora         : TFechaHora read FFechaHora write FFechaHora;
end;

TRemitoEstadoDeMigracionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _DetalleDeError    = 'DetalleDeError';
    _EstadoDeMigracion = 'EstadoDeMigracion';
    _RemitoID          = 'RemitoID';
    _UsuarioID         = 'UsuarioID';
    _EmpresaDestinoID  = 'EmpresaDestinoID';
    _FechaHora         = 'FechaHora';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TRemitoEstadoDeMigracionList = class(TPDList)
private
  function GetActual : TRemitoEstadoDeMigracion;
public
  constructor CreateAll;
  Constructor CreateByRemito (_R : TRemito);
  function CreateNewObject: TPDObject; override;
  property Actual : TRemitoEstadoDeMigracion read GetActual;
end;

TPacking = class(TDocumentoLetrado)
  private
    FIncotermID           : TObjectID;
    FIncoterm             : TPDObject;
    FFecha                : TFechaHora;
    FClienteID            : TObjectID;
    FCliente              : TPDObject;
    FDepositoID           : TObjectID;
    FDeposito             : TPDObject;
    FItems                : TPackingItemList;
    FRemito               : TPDObject;
    FRemitoID             : TObjectID;
    FPesoNetoTotal        : TReal;
    FPesoBrutoTotal       : TReal;
    FEstadoDePackingID    : TObjectID;
    FEstadoDePacking      : TPDObject;
    FVolumenTotal         : TReal;
    FCantidadDeCajasTotal : TEntero;
    function GetItems: TPackingItemList;
    function GetCliente : TEmpresa;
    function GetIncoterm : TIncoterm;
    function GetDeposito: TDeposito;
    function GetRemito: TRemito;
    function GetEstadoDePacking: TEstadoDePacking;
    procedure SetEstadoDePackingID(const Value: TObjectID);
    procedure SetClienteID(Value : TObjectID);
    procedure SetIncotermID(Value : TObjectID);
    procedure SetDepositoID(const Value: TObjectID);
    procedure SetRemitoID(const Value: TObjectID);
    function ObtenerEstadoID(_Cod: String): TObjectID;

    function GetVolumenTotal: TReal;
    function GetVolumenTotalDescripcion: String;
    function GetPesoNetoTotal: TReal;
    function GetPesoNetoTotalDescripcion: String;
    function GetPesoBrutoTotal: TReal;
    function GetPesoBrutoTotalDescripcion: String;
    function GetCantidadDeCajasTotal: TReal;
    function GetCantidadDeCajasDescripcion: String;

  public
    constructor Create; override;
    Function Save: Boolean; override;
    Procedure AsignarNumero;
    Procedure AgregarNuevoEstadoAlLog;
    Procedure LimpiarItemsDeMemoria;
    Class Function Reporte ( _P: TPacking ; _Imprimir : Boolean ): String;
    property Numero                     : TEntero          read FNumero     write FNumero;
    property Fecha                      : TFechaHora       read FFecha      write FFecha;
    property ClienteID                  : TObjectID        read FClienteID  write SetClienteID;
    property Cliente                    : TEmpresa         read GetCliente;
    property IncotermID                 : TObjectID        read FIncotermID write SetIncotermID;
    property Incoterm                   : TIncoterm        read GetIncoterm;
    property DepositoID                 : TObjectID        read FDepositoID write SetDepositoID;
    property Deposito                   : TDeposito        read GetDeposito;
    property RemitoID                   : TObjectID        read FRemitoID   write SetRemitoID;
    property Remito                     : TRemito          read GetRemito;
    property EstadoDePackingID          : TObjectID        read FEstadoDePackingID  write SetEstadoDePackingID;
    property EstadoDePacking            : TEstadoDePacking read GetEstadoDePacking;
    Property Items                      : TPackingItemList read GetItems;

    Property CantidadDeCajasTotal       : TReal  read GetCantidadDeCajasTotal;
    Property CantidadDeCajasDescripcion : String read GetCantidadDeCajasDescripcion;
    Property VolumenTotal               : TReal  read GetVolumenTotal;
    Property VolumenTotalDescripcion    : String read GetVolumenTotalDescripcion;
    Property PesoNetoTotal              : TReal  read GetPesoNetoTotal;
    Property PesoNetoTotalDescripcion   : String read GetPesoNetoTotalDescripcion;
    Property PesoBrutoTotal             : TReal  read GetPesoBrutoTotal;
    Property PesoBrutoTotalDescripcion  : String read GetPesoBrutoTotalDescripcion;
end;

TPackingDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
  const
    _Numero             = 'Numero';
    _ClienteID          = 'ClienteID';
    _DepositoID         = 'DireccionDeEntregaID';
    _Fecha              = 'Fecha';
    _IncotermID         = 'IncotermID';
    _TipoDeFormularioID = 'TipoDeFormularioID';
    _RemitoID           = 'RemitoID';
    _EstadoDePackingID  = 'EstadoDePackingID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPackingList = class(TDocumentoList)
private
  function GetActual : TPacking;
public
  constructor CreateAll;
  constructor CreateByUltimoNumero;
  constructor CreateByRemito(_R : TRemito);
  Constructor CreateByRemitoAndEstados(_R : TRemito; _SL : TStringList);
  constructor CreateByNumeroDesdeNumeroHasta(_NDesde , _NHasta : String; _Descendente: Boolean = False);
  constructor CreateByNumeroDesdeNumeroHastaAndEstados(_NDesde , _NHasta : String; _SL : TStringList; _Descendente: Boolean = False);
  constructor CreateByFechaDesdeFechaHasta(_FDesde , _FHasta : String; _Descendente: Boolean = False);
  constructor CreateByFechaDesdeFechaHastaAndEstados(_FDesde , _FHasta : String; _SL : TStringList; _Descendente: Boolean = False);
  Constructor CreateByClienteAndFechaDesdeFechaHasta(_C : TCliente; _FDesde , _FHasta : String; _Descendente: Boolean = False);
  Constructor CreateByClienteAndFechaDesdeFechaHastaAndEstados(_C : TCliente; _FDesde , _FHasta : String; _SL : TStringList ; _Descendente: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TPacking read GetActual;
end;

TPackingItem = class(TPDObject)
  private
    FUnidadDeMedidaPesoID : TObjectID;
    FUnidadDeMedidaPeso   : TPDObject;
    FPedidoDeVentaItem    : TPDObject;
    FPedidoDeVentaItemID  : TObjectID;
    FPesoNeto             : TReal;
    FPesoBruto            : TReal;
    FItemNro              : TEntero;
    FCantidad             : TEntero;
    FPackingID            : TObjectID;
    FPacking              : TPDObject;
    FMateriaPrimaID       : TObjectID;
    FMateriaPrima         : TPDObject;
    FFormatoDeEtiquetaID  : TObjectID;
    FFormatoDeEtiqueta    : TPDObject;
    FVolumen: TReal;
    procedure SetPedidoDeVentaItemID(const Value: TObjectID);
    procedure SetUnidadDeMedidaPesoID(Value : TObjectID);
    procedure SetPackingID(const Value: TObjectID);
    procedure SetMateriaPrimaID(const Value: TObjectID);
    procedure SetFormatoDeEtiquetaID(const Value: TObjectID);
    function GetPedidoDeVentaItem: TPedidoDeVentaItem;
    function GetUnidadDeMedidaPeso : TUnidadDeMedida;
    function GetPacking: TPacking;
    function GetPesoBrutoDescripcion: String;
    function GetPesoNetoDescripcion: String;
    function GetMateriaPrima: TMateriaPrima;
    function GetFormatoDeEtiqueta: TFormatoDeEtiqueta;
    function GetVolumen: TReal;
  public
    constructor Create; override;
    Function Save: Boolean; override;
    Class Function Etiqueta ( _PI: TPackingItem ; _Impresora : TFormatoDeEtiquetaImpresora ;  _Imprimir : Boolean ): Boolean;
    property Packing              : TPacking read GetPacking;
    property PackingID            : TObjectID read FPackingID write SetPackingID;
    property Cantidad             : TEntero read FCantidad write FCantidad;
    property ItemNro              : TEntero read FItemNro write FItemNro;
    property PesoBruto            : TReal read FPesoBruto write FPesoBruto;
    Property PesoBrutoDescripcion : String read GetPesoBrutoDescripcion;
    property PesoNeto             : TReal read FPesoNeto write FPesoNeto;
    Property PesoNetoDescripcion  : String read GetPesoNetoDescripcion;
    property PedidoDeVentaItem    : TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property PedidoDeVentaItemID  : TObjectID read FPedidoDeVentaItemID write SetPedidoDeVentaItemID;
    property UnidadDeMedidaPeso   : TUnidadDeMedida read GetUnidadDeMedidaPeso;
    property UnidadDeMedidaPesoID : TObjectID read FUnidadDeMedidaPesoID write SetUnidadDeMedidaPesoID;
    property MateriaPrima         : TMateriaPrima read GetMateriaPrima;
    property MateriaPrimaID       : TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
    property FormatoDeEtiquetaID  : TObjectID read FFormatoDeEtiquetaID write  SetFormatoDeEtiquetaID;
    property FormatoDeEtiqueta    : TFormatoDeEtiqueta read GetFormatoDeEtiqueta;
    property Volumen              : TReal read GetVolumen;
end;

TPackingItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _PackingID               = 'PackingID';
    _Cantidad                = 'Cantidad';
    _ItemNro                 = 'ItemNro';
    _PesoBruto               = 'PesoBruto';
    _PesoNeto                = 'PesoNeto';
    _PedidoDeVentaItemID     = 'PedidoDeVentaItemID';
    _UnidadDeMedidaPesoID    = 'UnidadDeMedidaPesoID';
    _MateriaPrimaID          = 'MateriaPrimaID';
    _FormatoDeEtiquetaID     = 'FormatoDeEtiquetaID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPackingItemList = class(TPDList)
private
  function GetActual : TPackingItem;
public
  constructor CreateAll;
  constructor CreateByPacking(_P : TPacking);
  constructor CreateByProducto(_P : TProducto);
  function CreateNewObject: TPDObject; override;
  property Actual : TPackingItem read GetActual;
end;

TFactura = class(TDocumentoLetrado)
  private
    FUsuarioID              : TObjectID;
    FUsuario                : TPDObject;
    FTotalImpuestosCabecera : TReal;
    FTotalImpuestos         : TReal;
    FTotalImpuestoItems     : TReal;
    FMonedaID               : TObjectID;
    FMoneda                 : TPDObject;
    FTotalFacturado         : TReal;
    FImporteNetoNoGravado   : TReal;
    FImporteNetoGravado     : TReal;
    FGrupoDeVendedorID      : TObjectID;
    FGrupoDeVendedor        : TPDObject;
    FFechaHora              : TFechaHora;
    FEstadoDeFacturaID      : TObjectID;
    FEstadoDeFactura        : TPDObject;
    FEmpresaID              : TObjectID;
    FEmpresa                : TPDObject;
    FCotizacion             : TReal;
    FCondicionDeVentaID     : TObjectID;
    FCondicionDeVenta       : TPDObject;
    FCotizacionDolar        : TReal;
    FItems                  : TFacturaItemList;
    FStateLogs              : TFacturaStateLogList;
    FImpuestos: TFacturaImpuestoList;
//    FCodigoInternoSifab: TEntero;
    FImporteExcento: TReal;
    FImpuestosItems: TFacturaItemImpuestoList;
    FCodigoDeBarras: TString;
    FAutorizaciones: TFacturaAutorizacionAfipList;
    FArchivoPdf: TString;
//    FImportecargosExtrasSifab: TReal;
    fItemsFabricados: TFacturaItemList;
    fItemsServicios: TFacturaItemList;
    FImporteTotalServicios: TReal;
//    FEstaEnSifab: TBoolean;
    FRemitos: TRemitoList;
    FPeriodoContable: TPeriodoContable;
    FFechaContabilizacion: TFecha;
    FConceptoAFIP: TEntero;
    FNumeroSugerido: TEntero;
//    FCodigoInternoOrigenSifab: TEntero;
    FFacturaAsociadaID: TObjectID;
    FFacturaAsociada: TPDObject;
    fObservaciondeEstado: TString;
    FEsTesting: TBoolean;
//    FElPedidoEstaEnSifab: TBoolean;
    procedure SetCondicionDeVentaID(Value : TObjectID);
    procedure SetEmpresaID(Value : TObjectID);
    procedure SetEstadoDeFacturaID(Value : TObjectID);
    procedure SetGrupoDeVendedorID(Value : TObjectID);
    procedure SetMonedaID(Value : TObjectID);
    procedure SetUsuarioID(Value : TObjectID);
    procedure SetImporteNetoGravado(const Value: TReal);
    procedure SetImporteNetoNoGravado(const Value: TReal);
    procedure SetTotalImpuestoItems(const Value: TReal);
    procedure SetTotalImpuestos(const Value: TReal);
    procedure SetTotalImpuestosCabecera(const Value: TReal);
    procedure SetImporteExcento(const Value: TReal);
    procedure SetCotizacion(const Value: TReal);
    procedure SetCotizacionDolar(const Value: TReal);
    procedure SetFacturaAsociadaID(const Value: TObjectID);
    procedure SetTotalFacturado(const Value: TReal);
    function GetCondicionDeVenta : TCondicionDeVenta;
    function GetEmpresa : TEmpresa;
    function GetEstadoDeFactura : TEstadoDeFactura;
    function GetGrupoDeVendedor : TGrupoDeVendedor;
    function GetMoneda : TMoneda;
    function GetUsuario : TUsuario;
    function GetItems: TFacturaItemList;
    function GetItemsFabricados: TFacturaItemList;
    function GetItemsServicios: TFacturaItemList;
    function ObtenerEstadoID(_Cod : String) : TObjectID;
    function GetStateLogs: TFacturaStateLogList;
    function GetImpuestos: TFacturaImpuestoList;
    function GetImporteNetoGravado: TReal;
    function GetImporteNetoNoGravado: TReal;
    function GetTotalImpuestoItems: TReal;
    function GetTotalImpuestos: TReal;
    function GetTotalImpuestosCabecera: TReal;
//    function GetCodigoInternoSifab: TEntero;
    function GetImporteExcento: TReal;
    function GetImpuestosItems: TFacturaItemImpuestoList;
    function GetCotizacion: TReal;
    function GetCotizacionDolar: TReal;
    function GetCodigoDeBarras: TString;
    function GetAutorizaciones: TFacturaAutorizacionAfipList;
    function GetImporteTotalServicios: TReal;
//    function GetEstaEnSifab: TBoolean;
    function GetRemitos: TRemitoList;
    function GetConceptoAFIP: TEntero;
//    function GetCodigoInternoOrigenSifab: TEntero;
    function GetFacturaAsociada: TFactura;
    function GetObservaciondeEstado: TString;
    function GetArchivoPdf: TString;
    function GetTotalFacturado: TReal;
  public
    constructor Create; override;
    destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    Function Save: Boolean; Override;
    Function AsignarNombreDePdf: string;
    Procedure ActualizarRemitos;
    Procedure AgregarNuevoEstadoAlLog;
    Procedure LimpiarItemsDeMemoria;
    Procedure ColocarEstadoConfirmado;
    Procedure ColocarEstadoRechazado;
    Procedure ColocarEstadoGrabado;
    procedure SetObservacionDeEstado(_ObservacionDeEstado: String);
    procedure RecalcularImpuestos;

    Class Function Reporte ( _F: TFactura ; _PreView, _Imprimir, _ExportarPDF : Boolean ): String;
//    Class Function CrearFacturaSifab ( _F: TFactura ): Boolean ;
//    Class Function AgregarACuentaCorrienteSifab ( _F: TFactura; _CodInt : Integer = 0 ): Boolean ;
//    Class Function AgregarSaldoSifab ( _F: TFactura; _CodInt : Integer = 0 ): Boolean ;
    Class Function CrearFacturaDesdeRemitoOPedido ( _R : TRemito = nil ; _P : TPedidoDeVenta = nil ): Boolean;
//    Class procedure CargarDatosFacturaItemRemitoItem(_F: TFactura);
    Class Function RevertirFacturaConNotaDeCredito( _F : TFactura ; _TF : TTipoDeFormulario ; _Obs : String = ''): Boolean;
    Class Function AsignarUltimoNumero ( _TF : TTipoDeFormulario ) : Integer;
    Class Procedure AgregarImpuestosCabecera(_F : TFactura);
    Class Procedure AgregarImpuestosItems(_FI : TFacturaItem; _F : TFactura);
    Class Procedure CalcularImportesNetos( _F : TFactura);

    // generacion de XML para WebService AFIP
    // Local
    Class Function AFIPAutorizarFacturaLocal( _F : TFactura ): String;
    Class Function AFIPConsultarUltimoNumeroLocal( _TF : TTipoDeFormulario ) : Integer;
    Class Function AFIPDummyLocal : Boolean;
    Class Function AFIPConsultarFacturaLocal( _TF : TTipoDeFormulario ; _Numero : String) : String;
    // Expo
    Class Function AFIPAutorizarFacturaExpo( _F : TFactura ): String;
    Class Function AFIPConsultarUltimoNumeroExpo( _TF : TTipoDeFormulario ) : Integer;
    Class Function AFIPConsultarUltimoIDExpo : Int64;
    Class Function AFIPConsultarFacturaExpo( _TF : TTipoDeFormulario ; _Numero : String) : String;
    Class Function AFIPDummyExpo : Boolean; // si es True, el servidor de afip respondió los 3 O.K.
   // generacion de XML para WebService AFIP
    Property ConceptoAFIP : TEntero Read GetConceptoAFIP;
    property CondicionDeVenta : TCondicionDeVenta read GetCondicionDeVenta;
    property CondicionDeVentaID : TObjectID read FCondicionDeVentaID write SetCondicionDeVentaID;
    property Empresa : TEmpresa read GetEmpresa;
    property EmpresaID : TObjectID read FEmpresaID write SetEmpresaID;
    property EstadoDeFactura : TEstadoDeFactura read GetEstadoDeFactura;
    property EstadoDeFacturaID : TObjectID read FEstadoDeFacturaID write SetEstadoDeFacturaID;
    property GrupoDeVendedor : TGrupoDeVendedor read GetGrupoDeVendedor;
    property GrupoDeVendedorID : TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property Moneda : TMoneda read GetMoneda;
    property MonedaID : TObjectID read FMonedaID write SetMonedaID;
    property Usuario : TUsuario read GetUsuario;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
    property FechaHora : TFechaHora read FFechaHora write FFechaHora;
    property FechaContabilizacion : TFecha read FFechaContabilizacion write FFechaContabilizacion;
    property Cotizacion : TReal read GetCotizacion write SetCotizacion;
    property CotizacionDolar : TReal read GetCotizacionDolar write SetCotizacionDolar;
    property ImporteNetoGravado : TReal read GetImporteNetoGravado write SetImporteNetoGravado;
    property ImporteNetoNoGravado : TReal read GetImporteNetoNoGravado write SetImporteNetoNoGravado;
    property ImporteExcento : TReal read GetImporteExcento write SetImporteExcento;
    property TotalFacturado : TReal read GetTotalFacturado write SetTotalFacturado;
    property ImporteTotalServicios : TReal read GetImporteTotalServicios;
    property TotalImpuestoItems : TReal read GetTotalImpuestoItems write SetTotalImpuestoItems;
    property TotalImpuestos : TReal read GetTotalImpuestos write SetTotalImpuestos;
    property TotalImpuestosCabecera : TReal read GetTotalImpuestosCabecera write SetTotalImpuestosCabecera;
    property Items     : TFacturaItemList read GetItems;
    property ItemsServicios : TFacturaItemList read GetItemsServicios;
    property ItemsFabricados : TFacturaItemList read GetItemsFabricados;
    property StateLogs : TFacturaStateLogList read GetStateLogs;
    property Impuestos : TFacturaImpuestoList read GetImpuestos;
    property ImpuestosItems : TFacturaItemImpuestoList read GetImpuestosItems;
    Property Autorizaciones : TFacturaAutorizacionAfipList read GetAutorizaciones;
//    Property CodigoInternoSifab  : TEntero Read GetCodigoInternoSifab;
//    Property CodigoInternoOrigenSifab  : TEntero Read GetCodigoInternoOrigenSifab;
    property ArchivoPdf : TString Read GetArchivoPdf write FArchivoPdf;
    property CodigoDeBarras : TString Read GetCodigoDeBarras;
//    Property EstaEnSifab : TBoolean Read GetEstaEnSifab;
    property Remitos : TRemitoList Read GetRemitos;
    property NumeroSugerido : TEntero Read FNumeroSugerido write FNumeroSugerido;
    property FacturaAsociadaID : TObjectID read FFacturaAsociadaID write SetFacturaAsociadaID;
    property FacturaAsociada : TFactura read GetFacturaAsociada;
    property ObservacionDeEstado                    : TString read GetObservaciondeEstado;
    property EsTesting : TBoolean Read FEsTesting write FEsTesting;
end;

TFacturaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    Class Function ImpuestosItemsFiltrados(_F : TFactura) : String;
  const
    _CentroDeFacturacionID  = 'CentroDeFacturacionID';
    _CondicionDeVentaID     = 'CondicionDeVentaID';
    _Cotizacion             = 'Cotizacion';
    _CotizacionDolar        = 'CotizacionDolar';
    _EmpresaID              = 'EmpresaID';
    _EstadoDeFacturaID      = 'EstadoDeFacturaID';
    _FechaHora              = 'FechaHora';
    _FechaDeImpresion       = 'FechaDeImpresion';
    _FechaContabilizacion   = 'FechaContabilizacion';
    _GrupoDeVendedorID      = 'GrupoDeVendedorID';
    _ImporteNetoGravado     = 'ImporteNetoGravado';
    _ImporteExcento         = 'ImporteExcento';
    _ImporteNetoNoGravado   = 'ImporteNetoNoGravado';
    _ImporteTotal           = 'ImporteTotal';
    _MonedaID               = 'MonedaID';
    _Numero                 = 'Numero';
    _NumeroSugerido         = 'NumeroSugerido';
    _TipoDeFormularioID     = 'TipoDeFormularioID';
    _TotalImpuestoItems     = 'TotalImpuestoItems';
    _TotalImpuestos         = 'TotalImpuestos';
    _TotalImpuestosCabecera = 'TotalImpuestosCabecera';
    _UsuarioID              = 'UsuarioID';
    _CAI                    = 'CAI';
    _FechaVtoCAI            = 'VencimientoCAI';
    _IDSolicitudCAI         = 'IDSolicitudCAI';
    _ArchivoPdf             = 'ArchivoPdf';
    _FacturaAsociadaID      = 'FacturaAsociadaID';
    _Observaciones          = 'Observaciones';
    _EsTesting              = 'EsTesting';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaList = class(TDocumentoList)
private
  function GetActual : TFactura;
public
  Constructor CreateAll;
  Constructor CreateByUltimoNumero(_TF : TTipoDeFormulario);
  Constructor CreateByNumeroDesdeNumeroHasta(_NumeroDesde: Integer; _NumeroHasta: Integer; _Descendente: Boolean = False ; _FitrarPorVendedor: Boolean = True);
  Constructor CreateByNumero(_Numero: Integer);
  Constructor CreateByNumeroDesdeNumeroHastaAndEstadosDeFactura(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean = False);
  Constructor CreateByNumeroDesdeNumeroHastaAndEstadosDeFacturaAndTiposDeFormulario(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _TiposDeFormularioID : TStringlist; _Descendente: Boolean = False);
  Constructor CreateByFechaDesdeFechaHasta(_FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID = NullID; _Descendente: Boolean = False);
  Constructor CreateByFechaDesdeFechaHastaAndEstadosDeFactura(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean = False);
  Constructor CreateByFechaDesdeFechaHastaAndEstadosDeFacturaAndTiposDeFormulario(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _TiposDeFormularioID : TStringlist; _Descendente: Boolean = False);
  Constructor CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList); overload;
  Constructor CreateByEstados(_Est: String); overload;
  Constructor CreateByEstadosAndTipoDeCliente(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsExportacion : Boolean = False); overload;
  Constructor CreateByEstadosAndTipoDeCliente(_Est: String; _EsExportacion : Boolean = False); overload;
  Constructor CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
  Constructor CreateByPedidoDeVenta(_PV: TPedidoDeVenta);
  Constructor CreateByRemito(_R: TRemito);
  Constructor CreateByClienteAndFechaDesdeFechaHasta(_Empresa : TEmpresa ; _FechaDesde: String; _FechaHasta: String;_Descendente: Boolean = False);
  Constructor CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeFactura(_Empresa : TEmpresa ; _FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList ; _Descendente: Boolean = False);
  Constructor CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeFacturaAndTiposDeFormulario(_Empresa : TEmpresa ; _FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _TiposDeFormularioID : TStringlist; _Descendente: Boolean = False);

  Function CreateNewObject: TPDObject; override;
  Property Actual : TFactura read GetActual;
end;

TFacturaItem = class(TPDObject)
  private
    FRemitoItemID : TObjectID;
    FRemitoItem : TPDObject;
    FProductoID : TObjectID;
    FProducto : TPDObject;
    FPrecioUnitario : TReal;
    FPorcentajeDescuento : TReal;
    FPedidoDeVentaItemID : TObjectID;
    FPedidoDeVentaItem : TPDObject;
    FItemNro : TEntero;
    FImporteItem : TReal;
    FFacturaID : TObjectID;
    FFactura : TPDObject;
    FCantidad : TEntero;
    FImpuestos: TFacturaItemImpuestoList;

    fCCFBDescripcion: TString;
    fCCFBcunioID: TObjectID;
    fCCFBarticuloID: TObjectID;
    fCCServicioCodigo: TString;
    fCCFBCrc: TEntero;
    fCCFBFabricadoID: TObjectID;
    fCCFBCodigo: TString;
//    fCCServicioCodigoSifab: TString;
    fCCFBDesarrolloID: TObjectID;
    fCCServicioDescripcion: TString;
    fCCPCodigoDeProducto: TString;
    fCCFBterminacionID: TObjectID;
    fCCServicioID: TObjectID;
    FCCFGrupoDeVendedorDescripcion: TString;
    FCCFEstadoCodigo: TString;
    FCCFTipoDeFormularioDescripcion: TString;
    FCCFFechaDeImpresion: TFechaHora;
    FCCFMonedaDescripcion: TString;
    FCCFNumero: TEntero;
    FCCFEmpresaDescripcion: TString;
    FCCFFechaHora: TFechaHora;
    FCCFCentroDeFacturacionDescripcion: TString;
    FCCFCotizacion: TReal;
    FCCFTipoDeFormularioCodigo: TString;
    FCCFEstadoDescripcion: TString;
    FCCFFechaContabilizacion: TFechaHora;
    FCCFMonedaCodigo: TString;
    FCCFEmpresaCodigo: TString;
    FCCFCentroDeFacturacionCodigo: TString;

    function GetFactura : TFactura;
    procedure SetFacturaID(Value : TObjectID);
    function GetPedidoDeVentaItem : TPedidoDeVentaItem;
    procedure SetPedidoDeVentaItemID(Value : TObjectID);
    function GetProducto : TProducto;
    procedure SetProductoID(Value : TObjectID);
    function GetRemitoItem : TRemitoItem;
    procedure SetRemitoItemID(Value : TObjectID);
    function GetImpuestos: TFacturaItemImpuestoList;
    procedure SetImporteItem(const Value: TReal);
    procedure SetPorcentajeDescuento(const Value: TReal);
    procedure SetPrecioUnitario(const Value: TReal);
    function GetPrecioUnitario: TReal;
    function GetImporteItem: TReal;
    function GetPorcentajeDescuento: TReal;

    function GetCCFBarticuloID: TObjectID;
    function GetCCFBCodigo: TString;
    function GetCCFBCrc: TEntero;
    function GetCCFBcunioID: TObjectID;
    function GetCCFBDesarrolloID: TObjectID;
    function GetCCFBDescripcion: TString;
    function GetCCFBFabricadoID: TObjectID;
    function GetCCFBterminacionID: TObjectID;
    function GetCCPCodigoDeProducto: TString;
    function GetCCServicioCodigo: TString;
//    function GetCCServicioCodigoSifab: TString;
    function GetCCServicioDescripcion: TString;
    function GetCCServicioID: TObjectID;
    function GetCCFCentroDeFacturacionCodigo: TString;
    function GetCCFCentroDeFacturacionDescripcion: TString;
    function GetCCFCotizacion: TReal;
    function GetCCFEmpresaCodigo: TString;
    function GetCCFEmpresaDescripcion: TString;
    function GetCCFEstadoCodigo: TString;
    function GetCCFEstadoDescripcion: TString;
    function GetCCFFechaContabilizacion: TFechaHora;
    function GetCCFFechaDeImpresion: TFechaHora;
    function GetCCFFechaHora: TFechaHora;
    function GetCCFGrupoDeVendedorDescripcion: TString;
    function GetCCFMonedaCodigo: TString;
    function GetCCFMonedaDescripcion: TString;
    function GetCCFTipoDeFormularioCodigo: TString;
    function GetCCFTipoDeFormularioDescripcion: TString;
    function GetCFNumero: TEntero;
  public
    constructor Create; override;
    Property Impuestos : TFacturaItemImpuestoList Read GetImpuestos;
    property Factura : TFactura read GetFactura;
    property FacturaID : TObjectID read FFacturaID write SetFacturaID;
    property PedidoDeVentaItem : TPedidoDeVentaItem read GetPedidoDeVentaItem;
    property PedidoDeVentaItemID : TObjectID read FPedidoDeVentaItemID write SetPedidoDeVentaItemID;
    property Producto : TProducto read GetProducto;
    property ProductoID : TObjectID read FProductoID write SetProductoID;
    property RemitoItem : TRemitoItem read GetRemitoItem;
    property RemitoItemID : TObjectID read FRemitoItemID write SetRemitoItemID;
    property Cantidad : TEntero read FCantidad write FCantidad;
    property ItemNro : TEntero read FItemNro write FItemNro;
    property ImporteItem : TReal read GetImporteItem write SetImporteItem;
    property PorcentajeDescuento : TReal read GetPorcentajeDescuento write SetPorcentajeDescuento;
    property PrecioUnitario : TReal read GetPrecioUnitario write SetPrecioUnitario;
    // del create compuesto
    property CCPCodigoDeProducto               : TString    read GetCCPCodigoDeProducto;
    property CCFBarticuloID                    : TObjectID  read GetCCFBarticuloID;
    property CCFBcunioID                       : TObjectID  read GetCCFBcunioID;
    property CCFBterminacionID                 : TObjectID  read GetCCFBterminacionID;
    property CCFBFabricadoID                   : TObjectID  read GetCCFBFabricadoID;
    property CCServicioID                      : TObjectID  read GetCCServicioID;
    property CCFBCodigo                        : TString    read GetCCFBCodigo;
    property CCFBCrc                           : TEntero    read GetCCFBCrc;
    property CCFBDesarrolloID                  : TObjectID  read GetCCFBDesarrolloID;
    property CCFBDescripcion                   : TString    read GetCCFBDescripcion;
    property CCServicioCodigo                  : TString    read GetCCServicioCodigo;
//    property CCServicioSifab                   : TString    read GetCCServicioCodigoSifab;
    property CCServicioDescripcion             : TString    read GetCCServicioDescripcion;
    property CCFNumero                         : TEntero    read GetCFNumero;
    property CCFCotizacion                     : TReal      read GetCCFCotizacion;
    property CCFFechaHora                      : TFechaHora read GetCCFFechaHora;
    property CCFFechaDeImpresion               : TFechaHora read GetCCFFechaDeImpresion;
    property CCFFechaContabilizacion           : TFechaHora read GetCCFFechaContabilizacion;
    property CCFEmpresaCodigo                  : TString    read GetCCFEmpresaCodigo;
    property CCFEmpresaDescripcion             : TString    read GetCCFEmpresaDescripcion;
    property CCFCentroDeFacturacionCodigo      : TString    read GetCCFCentroDeFacturacionCodigo;
    property CCFCentroDeFacturacionDescripcion : TString    read GetCCFCentroDeFacturacionDescripcion;
    property CCFEstadoCodigo                   : TString    read GetCCFEstadoCodigo;
    property CCFEstadoDescripcion              : TString    read GetCCFEstadoDescripcion;
    property CCFGrupoDeVendedorDescripcion     : TString    read GetCCFGrupoDeVendedorDescripcion;
    property CCFTipoDeFormularioCodigo         : TString    read GetCCFTipoDeFormularioCodigo;
    property CCFTipoDeFormularioDescripcion    : TString    read GetCCFTipoDeFormularioDescripcion;
    property CCFMonedaCodigo                   : TString    read GetCCFMonedaCodigo;
    property CCFMonedaDescripcion              : TString    read GetCCFMonedaDescripcion;
end;

TFacturaItemDM = class(TSQLDBX_DMObject)
  public
    class function CreateCompuesto(_Parte : Integer = 0): String; override;
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _Cantidad            = 'Cantidad';
    _FacturaID           = 'FacturaID';
    _ImporteItem         = 'ImporteItem';
    _ItemNro             = 'ItemNro';
    _PorcentajeDescuento = 'PorcentajeDescuento';
    _PrecioUnitario      = 'PrecioUnitario';
    _ProductoID          = 'ProductoID';
    _PedidoDeVentaItemID = 'PedidoDeVentaItemID';
    _RemitoItemID        = 'RemitoItemID';
    //create compuesto
    _CCPCodigoDeProducto               = 'CCPCodigoDeProducto';
    _CCFBarticuloID                    = 'CCarticuloID'         ;
    _CCFBcunioID                       = 'CCcunioID'            ;
    _CCFBterminacionID                 = 'CCFBterminacionID'    ;
    _CCFBFabricadoID                   = 'CCFBFabricadoID'      ;
    _CCFBCodigo                        = 'CCFBCodigo'           ;
    _CCFBCrc                           = 'CCFBCrc';
    _CCFBDesarrolloID                  = 'CCFBDesarrolloID';
    _CCFBDescripcion                   = 'CCFBDescripcion';
    _CCServicioID                      = 'CCServicioID';
    _CCServicioCodigo                  = 'CCServicioCodigo';
//    _CCServicioCodigoSifab             = 'CCServicioCodigoSifab';
    _CCServicioDescripcion             = 'CCServicioDescripcion';
    _CCFNumero                         = 'Numero';
    _CCFCotizacion                     = 'Cotizacion';
    _CCFFechaHora                      = 'FechaHora';
    _CCFFechaDeImpresion               = 'FechaDeImpresion';
    _CCFFechaContabilizacion           = 'FechaContabilizacion';
    _CCFEmpresaCodigo                  = 'EmpresaCodigo';
    _CCFEmpresaDescripcion             = 'EmpresaDescripcion';
    _CCFCentroDeFacturacionCodigo      = 'CentroDeFacturacionCodigo';
    _CCFCentroDeFacturacionDescripcion = 'CCFCentroDeFacturacionDescripcion';
    _CCFEstadoCodigo                   = 'CCFEstadoCodigo';
    _CCFEstadoID                       = 'EstadoDeFacturaID';
    _CCFEstadoDescripcion              = 'EstadoDeFactura';
    _CCFGrupoDeVendedorDescripcion     = 'GrupoDeVendedor';
    _CCFTipoDeFormularioCodigo         = 'CCFTipoDeFormularioCodigo';
    _CCFTipoDeFormularioDescripcion    = 'TipoDeFormularioDescripcion';
    _CCFMonedaCodigo                   = 'MonedaCodigo';
    _CCFMonedaDescripcion              = 'MonedaDescripcion';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaItemList = class(TPDList)
private
  function GetActual : TFacturaItem;
public
  constructor CreateAll;
  constructor CreateByFactura( _F : TFactura; _SoloFabricados: TBoolean; _SoloServicios: TBoolean );
  constructor CreateByPedidodeVentaItem( _PVI : TPedidoDeVentaItem; _PrimerFactura: TBoolean; _UltimaFactura: TBoolean );
  constructor CreateByRemitoID( _ID : TObjectID );
  function CreateNewObject: TPDObject; override;
  property Actual : TFacturaItem read GetActual;
end;

TFacturaStateLog = class(TPDObject)
  private
    FUsuarioID : TObjectID;
    FUsuario : TPDObject;
    FObservaciones : TString;
    FFechaHora : TFechaHora;
    FFacturaID : TObjectID;
    FFactura : TPDObject;
    FEstadoDeFacturaID : TObjectID;
    FEstadoDeFactura : TPDObject;
    function GetEstadoDeFactura : TEstadoDeFactura;
    procedure SetEstadoDeFacturaID(Value : TObjectID);
    function GetFactura : TFactura;
    procedure SetFacturaID(Value : TObjectID);
    function GetUsuario : TUsuario;
    procedure SetUsuarioID(Value : TObjectID);
  public
    constructor Create; override;
    property EstadoDeFactura : TEstadoDeFactura read GetEstadoDeFactura;
    property EstadoDeFacturaID : TObjectID read FEstadoDeFacturaID write SetEstadoDeFacturaID;
    property Factura : TFactura read GetFactura;
    property FacturaID : TObjectID read FFacturaID write SetFacturaID;
    property FechaHora : TFechaHora read FFechaHora write FFechaHora;
    property Observaciones : TString read FObservaciones write FObservaciones;
    property Usuario : TUsuario read GetUsuario;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
end;

TFacturaStateLogDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _EstadoDeFacturaID = 'EstadoDeFacturaID';
    _FacturaID         = 'FacturaID';
    _FechaHora         = 'FechaHora';
    _Observaciones     = 'Observaciones';
    _UsuarioID         = 'UsuarioID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaStateLogList = class(TPDList)
private
  function GetActual : TFacturaStateLog;
public
  constructor CreateAll;
  constructor CreateByFactura (_F : TFactura);
  function CreateNewObject: TPDObject; override;
  property Actual : TFacturaStateLog read GetActual;
end;

TFacturaImpuesto = class(TPDObject)
  private
    FPorcentajeImpuesto : TReal;
    FImpuestoConceptoID : TObjectID;
    FImpuestoConcepto : TPDObject;
    FImpuesto : TReal;
    FImporteNetoGravado : TReal;
    FFacturaID : TObjectID;
    FFactura: TPDObject;
    procedure SetFacturaID(Value : TObjectID);
    function GetImpuestoConcepto : TImpuestoConcepto;
    procedure SetImpuestoConceptoID(Value : TObjectID);
    function GetFactura: TFactura;
    procedure SetPorcentajeImpuesto(const Value: TReal);
    procedure SetImpuesto(const Value: TReal);
    procedure SetImporteNetoGravado(const Value: TReal);
    function GetImporteNetoGravado: TReal;
    function GetPorcentajeImpuesto: TReal;
    function GetImpuesto: TReal;
  public
    constructor Create; override;
    property Factura   : TFactura read GetFactura;
    property FacturaID : TObjectID read FFacturaID write SetFacturaID;
    property ImpuestoConcepto : TImpuestoConcepto read GetImpuestoConcepto;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property ImporteNetoGravado : TReal read GetImporteNetoGravado write SetImporteNetoGravado;
    property Impuesto : TReal read GetImpuesto write SetImpuesto;
    property PorcentajeImpuesto : TReal read GetPorcentajeImpuesto write SetPorcentajeImpuesto;

end;

TFacturaImpuestoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _FacturaID          = 'FacturaID';
    _ImporteNetoGravado = 'ImporteNetoGravado';
    _Impuesto           = 'Impuesto';
    _ImpuestoConceptoID = 'ImpuestoConceptoID';
    _PorcentajeImpuesto = 'PorcentajeImpuesto';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaImpuestoList = class(TPDList)
private
  function GetActual : TFacturaImpuesto;
public
  constructor CreateAll;
  constructor CreateByFactura (_F : TFactura);
  function CreateNewObject: TPDObject; override;
  property Actual : TFacturaImpuesto read GetActual;
end;

TFacturaItemImpuesto = class(TPDObject)
  private
    FPorcentajeImpuesto : TReal;
    FImpuestoConceptoID : TObjectID;
    FImpuestoConcepto : TPDObject;
    FImpuesto : TReal;
    FFacturaItemID : TObjectID;
    FFacturaItem : TPDObject;
    FBaseImponible : TReal;
    function GetFacturaItem : TFacturaItem;
    procedure SetFacturaItemID(Value : TObjectID);
    function GetImpuestoConcepto : TImpuestoConcepto;
    procedure SetImpuestoConceptoID(Value : TObjectID);
    procedure SetImpuesto(const Value: TReal);
    procedure SetPorcentajeImpuesto(const Value: TReal);
    procedure SetBaseImponible(const Value: TReal);
    function GetBaseImponible: TReal;
    function GetImpuesto: TReal;
    function GetPorcentajeImpuesto: TReal;
  public
    constructor Create; override;
    property FacturaItem : TFacturaItem read GetFacturaItem;
    property FacturaItemID : TObjectID read FFacturaItemID write SetFacturaItemID;
    property ImpuestoConcepto : TImpuestoConcepto read GetImpuestoConcepto;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property Impuesto : TReal read GetImpuesto write SetImpuesto;
    property PorcentajeImpuesto : TReal read GetPorcentajeImpuesto write SetPorcentajeImpuesto;
    property BaseImponible : TReal read GetBaseImponible write SetBaseImponible;
end;

TFacturaItemImpuestoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _BaseImponible      = 'BaseImponible';
    _FacturaItemID      = 'FacturaItemID';
    _Impuesto           = 'Impuesto';
    _ImpuestoConceptoID = 'ImpuestoConceptoID';
    _PorcentajeImpuesto = 'PorcentajeImpuesto';
    // del create compuesto
    _CodigoAfip = 'CodigoAfip';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaItemImpuestoList = class(TPDList)
private
  function GetActual : TFacturaItemImpuesto;
public
  constructor CreateAll;
  constructor CreateByFacturaItem (_FI : TFacturaItem);
  Constructor CreateByFactura(_F : TFactura);
  function CreateNewObject: TPDObject; override;
  property Actual : TFacturaItemImpuesto read GetActual;
end;

TFacturaAutorizacionAfip = class(TPDObject)
  private
    FUsuarioID             : TObjectID;
    FUsuario               : TPDObject;
    FResultado             : TString;
    FObservaciones         : TString;
    FNumeroCAE             : TString;
    FIDSolicitudCAE        : TString;
    FFechaDeVencimientoCAE : TFechaHora;
    FFecha                 : TFechaHora;
    FFacturaID             : TObjectID;
    FFactura               : TPDObject;
    FErrores               : TString;
    FNumeroComprobante     : TEntero;
    function GetFactura : TFactura;
    procedure SetFacturaID(Value : TObjectID);
    function GetUsuario : TUsuario;
    procedure SetUsuarioID(Value : TObjectID);
  public
    constructor Create; override;
    property Factura : TFactura read GetFactura;
    property FacturaID : TObjectID read FFacturaID write SetFacturaID;
    property Fecha : TFechaHora read FFecha write FFecha;
    property FechaDeVencimientoCAE : TFechaHora read FFechaDeVencimientoCAE write FFechaDeVencimientoCAE;
    property IDSolicitudCAE : TString read FIDSolicitudCAE write FIDSolicitudCAE;
    property NumeroComprobante : TEntero read FNumeroComprobante write FNumeroComprobante;
    property NumeroCAE : TString read FNumeroCAE write FNumeroCAE;
    property Observaciones : TString read FObservaciones write FObservaciones;
    property Errores : TString read FErrores write FErrores;
    property Resultado : TString read FResultado write FResultado;
    property Usuario : TUsuario read GetUsuario;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
end;

TFacturaAutorizacionAfipDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _FacturaID             = 'FacturaID';
    _Fecha                 = 'Fecha';
    _FechaDeVencimientoCAE = 'FechaDeVencimientoCAE';
    _IDSolicitudCAE        = 'IDSolicitudCAE';
    _NumeroCAE             = 'NumeroCAE';
    _Observaciones         = 'Observaciones';
    _Errores               = 'Errores';
    _Resultado             = 'Resultado';
    _UsuarioID             = 'UsuarioID';
    _NumeroComprobante     = 'NumeroComprobante';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFacturaAutorizacionAfipList = class(TPDList)
  private
    function GetActual : TFacturaAutorizacionAfip;
  public
    constructor CreateAll;
    Constructor CreateByFactura (_F : TFactura);
    function CreateNewObject: TPDObject; override;
    property Actual : TFacturaAutorizacionAfip read GetActual;
end;

TArchivo = class(TDescriptible)
  private
    FUsuarioID       : TObjectID;
    FSectorID        : TObjectID;
    FRuta            : TString;
    FNombre          : TString;
    FFechaDeCreacion : TFechaHora;
    FAutor           : TString;
    FSector          : TPDObject;
    FUsuario         : TPDObject;
    FVersion         : TString;
    FPerfilesPermitidos: TArchivoPerfilPermitidoList;
    procedure SetSectorID(Value : TObjectID);
    procedure SetUsuarioID(Value : TObjectID);
    function GetSector: TSector;
    function GetUsuario: TUsuario;
    function GetPerfilesPermitidos: TArchivoPerfilPermitidoList;
  public
    constructor Create; override;
    property Autor     : TString read FAutor write FAutor;
    property FechaDeCreacion : TFechaHora read FFechaDeCreacion write FFechaDeCreacion;
    property Nombre    : TString read FNombre write FNombre;
    property Ruta      : TString read FRuta write FRuta;
    property SectorID  : TObjectID read FSectorID write SetSectorID;
    property Sector    : TSector read GetSector;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
    property Usuario   : TUsuario read GetUsuario;
    property Version   : TString read FVersion write FVersion;
    Property PerfilesPermitidos : TArchivoPerfilPermitidoList Read GetPerfilesPermitidos;
  end;

TArchivoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Autor           = 'Autor';
    _Descripcion     = 'Archivo';
    _EsInactivo      = 'EsInactivo';
    _FechaDeCreacion = 'FechaDeCreacion';
    _Nombre          = 'Nombre';
    _Ruta            = 'Ruta';
    _SectorID        = 'SectorID';
    _UsuarioID       = 'UsuarioID';
    _Version         = 'Version';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArchivoList = class(TDescriptibleList)
private
  function GetActual : TArchivo;
public
  Constructor CreateAll( _SoloActivos: Boolean = false);
  Constructor CreateByPerfilDeUsuario(_P : TPerfil ; _SoloActivos: Boolean = false);
  function CreateNewObject: TPDObject; override;
  property Actual : TArchivo read GetActual;
end;


TArchivoPerfilPermitido = class(TPDObject)
  private
    FPerfilID  : TObjectID;
    FPerfil    : TPDObject;
    FArchivoID : TObjectID;
    FArchivo   : TPDObject;
    function GetArchivo : TArchivo;
    procedure SetArchivoID(Value : TObjectID);
    function GetPerfil : TPerfil;
    procedure SetPerfilID(Value : TObjectID);
  public
    constructor Create; override;
    property Archivo : TArchivo read GetArchivo;
    property ArchivoID : TObjectID read FArchivoID write SetArchivoID;
    property Perfil : TPerfil read GetPerfil;
    property PerfilID : TObjectID read FPerfilID write SetPerfilID;
end;

TArchivoPerfilPermitidoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ArchivoID = 'ArchivoID';
    _PerfilID  = 'PerfilID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArchivoPerfilPermitidoList = class(TPDList)
private
  function GetActual : TArchivoPerfilPermitido;
public
  constructor CreateAll;
  constructor CreateByArchivo( _A : TArchivo );
  function CreateNewObject: TPDObject; override;
  property Actual : TArchivoPerfilPermitido read GetActual;
end;


TDistribucionDeGasto = class(TDescriptible)
  private
    FUsuarioID : TObjectID;
    FUsuario   : TPDObject;
    FMes       : TEntero;
    FAnio      : TEntero;
    function GetUsuario : TUsuario;
    procedure SetUsuarioID(Value : TObjectID);
  public
    constructor Create; override;
    property Anio : TEntero read FAnio write FAnio;
    property Mes : TEntero read FMes write FMes;
    property Usuario : TUsuario read GetUsuario;
    property UsuarioID : TObjectID read FUsuarioID write SetUsuarioID;
end;

TDistribucionDeGastoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _Descripcion = 'DistribucionDeGasto';
    _EsInactivo  = 'EsInactivo';
    _Mes         = 'Mes';
    _Anio        = 'Anio';
    _UsuarioID   = 'UsuarioID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TDistribucionDeGastoList = class(TDescriptibleList)
private
  function GetActual : TDistribucionDeGasto;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property Actual : TDistribucionDeGasto read GetActual;
end;

implementation

uses Types, Variants, IPHLPAPI, IniFiles, fIniciarSesion, maskUtils, ComObj, uAplicacion, fDialogoCostoDeDesarrolloCunios, fMostrarImagen,
     ComCtrls, _fDialogsService, frxClass, frxExportPDF, frxDesgn, frxDBSet, frxRich, UClasesInterfaces, uDMFormulas,
     uFECAESolicitar, uFECAESolicitarResponse, uFECompUltimoAutorizadoRequest, uFEXAuthorizeRequest, uFECompConsultarRequest,
     uFECompUltimoAutorizadoResponse, uIAutorizacionElectronicaAfip, uFEDummyResponse, uFEXGetLast_CMPRequest, uFEXGetLast_CMPResponse, uFEXDummyResponse,
     uFEXGetLast_IDRequest, uFEXGetLast_IDResponse, uFEXGetCMPRequest, uFEXGetCMPResponse, uFECompConsultarResponse, fMostrarPDF, fPopupMotivosDeAtrasoHojaDeRuta,
     fPopupABMProductoOperaciones, InterfazRemitoDeVenta, uOperacionApholosWS;

{ TDocumentoLetradoConStock }

constructor TDocumentoLetradoConStock.Create;
begin
  inherited;
  fletra               := Null;
  fNumeroFinal         := Null;
  FCentroDeFacturacion := Null;
  FVerificaCai         := Null;
end;

function TDocumentoLetradoConStock.GetNumeroFinal: TString;
begin
  if (Numero <> 0 ) and (Numero <> Null) then
    FNumeroFinal := Letra + '-' + CentroDeFacturacion + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( Numero), '0', 8 )
  else
    FNumeroFinal := '';
end;

procedure TDocumentoLetradoConStock.ValidateOnInsert;
begin
  inherited;
  if VerificaCai then//   hay que validar que esto lo haga solo cuando el estado es confirmado
    begin
      if FechaDeVtoCAI < aplicacion.DateTimeService.FechaActual then
        Aplicacion.raiseExceptionCreate('La C.A.I. venció el: ' + FormatDateTime('dd/mm/yyyy',  FechaDeVtoCAI ) );
      if (CAI ='') or (CAI=Null) then
        Aplicacion.raiseExceptionCreate('La C.A.I. no es válida.');
    end;
end;

{ TDocumentoConStock }

function TDocumentoConStock.GetDepositoDestino: TDeposito;
begin
  if not assigned(FdepositoDestino) then
    GetObject(TDeposito, FdepositoDestino, DepositoDestinoID);
  Result := TDeposito(FdepositoDestino);
end;

function TDocumentoConStock.GetDepositoOrigen: TDeposito;
begin
  if not assigned(FdepositoOrigen) then
    GetObject(TDeposito, FdepositoOrigen, DepositoOrigenID);
  Result := TDeposito(FdepositoOrigen);
end;

function TDocumentoConStock.GetEstadoDestino: TEstadoDeStock;
begin
  if not assigned(FestadoDestino) then
    GetObject(TEstadoDeStock, FestadoDestino, EstadoDestinoID);
  Result := TEstadoDeStock(FestadoDestino);
end;

function TDocumentoConStock.GetEstadoOrigen: TEstadoDeStock;
begin
  if not assigned(FestadoOrigen) then
    GetObject(TEstadoDeStock, FestadoOrigen, EstadoOrigenID);
  Result := TEstadoDeStock(FestadoOrigen);
end;

function TDocumentoConStock.Save: Boolean;
begin
  If (FdepositoOrigenID = NullID) And (FdepositoDestinoID = NullID) then
    Aplicacion.raiseExceptionCreate('Asigne un Depósito Origen o Destino');

  If (FdepositoOrigenID <> NullID) and (FestadoOrigenID = NullID) then
    Aplicacion.raiseExceptionCreate('Asigne un estado origen');

  If (FdepositoDestinoID <> NullID) and (FestadoDestinoID = NullID) then
    Aplicacion.raiseExceptionCreate('Asigne un estado destino');

  Result := inherited Save;
end;

procedure TDocumentoConStock.SetDepositoDestinoID(const Value: TObjectID);
begin
  if (Value <> FdepositoDestinoID) and assigned(FdepositoDestino) then
    FreeAndNil(FdepositoDestino);
  FdepositoDestinoID := Value;
end;

procedure TDocumentoConStock.SetDepositoOrigenID(const Value: TObjectID);
begin
  if (Value <> FdepositoOrigenID) and assigned(FdepositoOrigen) then
    FreeAndNil(FdepositoOrigen);
  FdepositoOrigenID := Value;
end;

procedure TDocumentoConStock.SetEstadoDestinoID(const Value: TObjectID);
begin
  if (Value <> FestadoDestinoID) and assigned(FestadoDestino) then
    FreeAndNil(FestadoDestino);
  FestadoDestinoID := Value;
end;

procedure TDocumentoConStock.SetEstadoOrigenID(const Value: TObjectID);
begin
  if (Value <> FestadoOrigenID) and assigned(FestadoOrigen) then
    FreeAndNil(FestadoOrigen);
  FestadoOrigenID := Value;
end;

function TDocumentoConStock.GetPieDeImpresionDocumento: String;
begin
  If (FtipoDeFormularioID <> NullID) then
    Result := tipoDeFormulario.PieImpresion
  Else
    Result := '';
end;

{ TDocumentoLetrado }

constructor TDocumentoLetrado.Create;
begin
  inherited;
  FNumeroFinal           := Null;
  FCAI                   := Null;
  FIDSolicitudCAI        := Null;
  FFechaDeVtoCAI         := Null;
  FFechaDeImpresion      := Null;
  FCentroDeFacturacionID := NullID;
  FCentroDeFacturacion   := nil;
  FEsCambioDeEstado      := False;
  FVerificaCai           := Null;
end;

function TDocumentoLetrado.GetCentroDeFacturacion: TCentroDeFacturacion;
begin
  if not Assigned(FCentroDeFacturacion) then
    GetObject(TCentroDeFacturacion, FCentroDeFacturacion, CentroDeFacturacionID);
  Result := TCentroDeFacturacion(FCentroDeFacturacion);
end;

function TDocumentoLetrado.GetCentroDeFacturacionID: TObjectID;
begin
  if ( FCentroDeFacturacionID = NullID) then
    begin
      FCentroDeFacturacionID := TipoDeFormulario.CentroDeFacturacionID;
      if Assigned(FCentroDeFacturacion) then
        FreeAndNil( FCentroDeFacturacion );
    end;
  Result := FCentroDeFacturacionID;
end;

function TDocumentoLetrado.GetNumeroFinal: TString;
begin
  if (Numero <> 0 ) and (Numero <> Null) and (TipoDeFormularioID <> NullID) and (CentroDeFacturacionID <> NullID) then
    FNumeroFinal := TipoDeFormulario.Letra + '-' + Aplicacion.TextService.RellenarAlaIzquierda( CentroDeFacturacion.Codigo , '0' , 4) + '-' +
    Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(Numero), '0', 8 )
  else
    FNumeroFinal := '';
  Result := FNumeroFinal;
end;

function TDocumentoLetrado.getVerificaCai: TBoolean;
begin
  if ( FVerificaCai = Null ) then
    FVerificaCai := TipoDeFormulario.VerificaCai and not (TipoDeFormulario.CentroDeFacturacion.EsElectronico) ;
  Result := FVerificaCai;
end;

procedure TDocumentoLetrado.SetCentroDeFacturacionID(const Value: TObjectID);
begin
  if (Value <> FCentroDeFacturacionID) and Assigned(FCentroDeFacturacion) then
    FreeAndNil(FCentroDeFacturacion);
  FCentroDeFacturacionID := Value;
end;


procedure TDocumentoLetrado.SetTipodeFormularioID(const Value: TObjectID);
begin
  if assigned( FTipoDeFormulario ) and (FTipoDeFormularioID <> Value) then
    begin
      FreeAndNil( FTipoDeFormulario );
      FCentroDeFacturacionID := NullID; // su propio setter liberará el objeto y el getter obtendrá el ID correspondiente
    end;
  FTipoDeFormularioID := Value;
end;

procedure TDocumentoLetrado.ValidateOnInsert;
begin
  inherited;
  if VerificaCai and ( Numero <> Null ) and ( Numero <> 0 ) then
    begin
      if FechaDeVtoCAI < aplicacion.DateTimeService.FechaActual then
        Aplicacion.raiseExceptionCreate('La C.A.I. venció el: ' + FormatDateTime('dd/mm/yyyy',  FechaDeVtoCAI ) );
      if (CAI ='') or (CAI=Null) then
        Aplicacion.raiseExceptionCreate('La C.A.I. no es válida.');
    end;
end;

{ TAjusteDeStock }
procedure TAjusteDeStock.AgregarNuevoEstadoAlLog;
var
  S : TajusteDeStockStateLog;
begin
    S := TajusteDeStockStateLog.Create;
  try
    S.EstadoDeAjusteDeStockID := FEstadoDeAjusteDeStockID;
    S.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
    S.AjusteDeStockID         := Self.ID;
    S.UsuarioID               := Aplicacion.Usuario.ID;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

procedure TAjusteDeStock.ColocarEstado(_Cod: String ; _MueveStock : Boolean);
var
  IDEstado : TObjectID;
begin
  IDEstado := ObtenerEstadoID(_Cod);
  if (FEstadoDeAjusteDeStockID = IDEstado ) then
    Aplicacion.raiseExceptionCreate ('El Ajuste ya se encuentra en el estado: ' + _Cod );
  FEstadoDeAjusteDeStockID := IDEstado;
  if IsAssigned then
    AgregarNuevoEstadoAlLog;
  if _MueveStock then
    MoverStockDeItems( _Cod = Aplicacion.ConstantAllocator.CodigoEstadoAJS_Anulado );
end;

constructor TAjusteDeStock.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TAjusteDeStockDM);
  fUsuarioDeAltaID := -9999;
  FEstadodeAjustedeStockID := NullID;
  FNumero                  := 0;
end;

function TAjusteDeStock.getAjusteDeStockItemsList: TAjusteDeStockItemList;
begin
  If Not Assigned (FItems) Then
    GetLIst(TPDlist(fItems),TPDlist(TAjusteDeStockItemList.CreateByAjuste(self)));
  Result := FItems;
end;

function TAjusteDeStock.GetEstadoDeAjusteDeStock: TEstadoDeAjusteDeStock;
begin
  if not assigned(fEstadodeAjusteDeStock) then
    GetObject(TEstadoDeAjusteDeStock,fEstadodeAjusteDeStock,EstadodeAjustedeStockID);
  Result := TEstadoDeAjusteDeStock (fEstadodeAjusteDeStock);
end;

function TAjusteDeStock.GetFEchaAlta: TFecha;
begin
  Result:=0;
  IF StateLogs.Count=0 then
    exit;
  StateLogs.First;
  Result:=StateLogs.Actual.fechaHora;
end;

function TAjusteDeStock.GetStateLogs: TAjusteDeStockStateLogList;
begin
  if FStateLogs = nil then
    GetLIst(TPDlist(FStateLogs),TPDlist(TAjusteDeStockStateLogList.CreateByAjusteDeStock(self)));
  Result := FStateLogs;
end;

function TAjusteDeStock.GetUsuarioDeAlta: TUsuario;
begin
  if not assigned(FUsuarioDeAlta) then
    GetObject(TUsuario, FUsuarioDeAlta, UsuarioDeAltaID);
  Result := TUsuario(FUsuarioDeAlta);
end;

function TAjusteDeStock.GetUsuarioDeAltaID: TObjectID;
begin
  if (fUsuarioDeAltaID = -9999 ) then
    fUsuarioDeAltaID := Aplicacion.Usuario.ID;
  Result := fUsuarioDeAltaID;
end;

function TAjusteDeStock.Grabar: Boolean;
  procedure AsignoNumeroDeAjuste;
  var
    AL : TAjusteDeStockList;
  Begin
    if (FNumero = 0) then
      try
        AL := TAjusteDeStockList.CreateMaximoNumero;
        If Al.Count=0 Then
          Numero := 1
        else
          Numero := (AL.Actual.numero + 1);
      finally
        FreeAndNil(AL);
      end;
  end;
begin
  if (Items.Count = 0) then
    Aplicacion.raiseExceptionCreate('Debe ingresar al menos un item en el documento');
  AsignoNumeroDeAjuste;
  Result := Inherited Save;
  if isAssigned then // sino da error en el save, ya que pide ID que todavia no hay
    AgregarNuevoEstadoAlLog;
end;


procedure TAjusteDeStock.MoverStockDeItems(_EsAnulacion: Boolean);
begin
  try
    Items.First;

    while not Items.IsLast do
      begin
        if not _EsAnulacion then
          Aplicacion.StockManager.MoverStock(TipoDeFormulario,
                                         IntToStr(Numero),
                                         Items.Actual.ItemNro,
                                         DepositoOrigenID,
                                         EstadoOrigenID,
                                         DepositoDestinoID,
                                         EstadoDestinoID,
                                         Items.Actual.ProductoID,
                                         Items.Actual.Cantidad,
                                         Items.Actual.PedidoDeVentaItemAsignadoID)
        else
          Aplicacion.StockManager.MoverStock(TipoDeFormulario, // como estoy anulando el ajuste el destino es origen y el origen destino.
                                         IntToStr(Numero),
                                         Items.Actual.ItemNro,
                                         DepositoDestinoID,
                                         EstadoDestinoID,
                                         DepositoOrigenID,
                                         EstadoOrigenID,
                                         Items.Actual.ProductoID,
                                         Items.Actual.Cantidad,
                                         Items.Actual.PedidoDeVentaItemAsignadoID);
        Items.ApplyUpdates;
        Items.next;
        Application.ProcessMessages;
      end;
        Items.ApplyUpdates;
  Except
    Items.CancelUpdates;
  end;
end;

function TAjusteDeStock.ObtenerEstadoID(_Cod: String): TObjectID;
Var
  EL : TEstadoDeAjusteDeStockList;
Begin
  Result := NullID;
  Try
    EL := TEstadoDeAjusteDeStockList.CreateByCodigo(_Cod, False);
    if (El.Count = 0) then
      Raise Exception.Create('No existe el Estado ' +  _Cod + ' en la tabla');
    Result := El.Actual.ID;
  Finally
    FreeAndNil (EL);
  End;
end;

function TAjusteDeStock.Save: boolean;
begin
  If (EstadodeAjustedeStockID = NullID) then
    ColocarEstado(Aplicacion.ConstantAllocator.CodigoEstadoAJS_Guardado, False);
  Result := Inherited Save;
end;

Procedure TAjusteDeStock.SetEstadoDeAjusteDeStockID(const Value: TObjectID);
Begin
  if (Value <> fEstadoDeAjusteDeStockID) and Assigned(fEstadoDeAjusteDeStock) then
    FreeAndNil(fEstadoDeAjusteDeStock);
  fEstadoDeAjusteDeStockID := Value;
end;

{ TAjusteDeStockDM }
class function TAjusteDeStockDM.TableName : string;
begin
  Result := 'ajustesDeStock';
end;

class function TAjusteDeStockDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TAjusteDeStockDM.ID_FieldName : string;
begin
  Result := 'AjusteDeStockID';
end;

procedure TAjusteDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TAjusteDeStock(PDObject) do
    begin
      IntegerField [_numero ]                  := numero;
      StringField  [_observaciones ]           := observaciones;
      IDField      [_tipoDeFormularioID ]      := tipoDeFormularioID;
      IDField      [_depositoDestinoID ]       := depositoDestinoID;
      IDField      [_depositoOrigenID ]        := depositoOrigenID;
      IDField      [_estadoDestinoID ]         := estadoDestinoID;
      IDField      [_estadoOrigenID ]          := estadoOrigenID;
      IDField      [_EstadoDeAjusteDeStockID ] := EstadoDeAjusteDeStockID;
      BooleanField [_EsAjusteDeMAteriasPrimas] := EsAjusteDeMateriasPrimas;
      BooleanField [_EsAjusteDeFabricados]     := EsAjusteDeFabricados;
      BooleanField [_EsAjusteDeSemielaborados] := EsAjusteDeSemielaborados;
      IDField      [_usuarioDeAltaID ]         := UsuarioDeAltaID;
    end;
end;


procedure TAjusteDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TAjusteDeStock(PDObject) do
    begin
      Fnumero                  := IntegerField[_numero ];
      observaciones            := StringField[_observaciones ];
      TipoDeFormularioID       := IDField[_tipoDeFormularioID ];
      DepositoDestinoID        := IDField[_depositoDestinoID ];
      DepositoOrigenID         := IDField[_depositoOrigenID ];
      EstadoDestinoID          := IDField[_estadoDestinoID ];
      EstadoOrigenID           := IDField[_estadoOrigenID ];
      FEstadoDeAjusteDeStockID := IDField[_EstadoDeAjusteDeStockID ];
      EsAjusteDeMateriasPrimas := BooleanField[_EsAjusteDeMAteriasPrimas] ;
      EsAjusteDeFabricados     := BooleanField[_EsAjusteDeFabricados] ;
      EsAjusteDeSemielaborados := BooleanField[_EsAjusteDeSemielaborados] ;
      UsuarioDeAltaID          := IDField[_usuarioDeAltaID ];
    end;
end;

 { TAjusteDeStockList }
function TAjusteDeStockList.GetActual : TAjusteDeStock;
begin
  Result := TAjusteDeStock(CurrentObject);
end;

function TAjusteDeStockList.CreateNewObject: TPDObject;
begin
  Result := TAjusteDeStock.Create;
end;



constructor TAjusteDeStockList.CreateAll;
begin
  inherited Create(TAjusteDeStock,TAjusteDeStockDM.CreateAll( False) );
end;

constructor TAjusteDeStockList.CreateEmpty;
begin
  inherited Create(TAjusteDeStock,TAjusteDeStockDM.CreateEmpty);
end;

constructor TAjusteDeStockList.CreateMaximoNumero;
  Function OrderBy : String;
  begin
    Result := TAjusteDeStockDM._Numero + ' Desc';
  end;
begin
  inherited Create(TAjusteDeStock,TAjusteDeStockDM.CreateTop(1,'',OrderBy));
end;

constructor TAjusteDeStockList.CreateByEstados(_est: TEstadoDeAjusteDeStockList);
  Function WhereString : String;
  begin
    Result := TAjusteDeStockDM._EstadoDeAjusteDeStockID + ' in (';;
    _est.First;
    Repeat
      Result := Result + IntToStr (_Est.Actual.ID) + ',';
      _est.Next;
    until _est.IsLast;
    Result := Copy (Result,1,Length (Result)-1)+')';
  end;
begin
  inherited Create(TAjustedeStock,TAjusteDeStockDM.CreateAll(False,WhereString));
end;

constructor TAjusteDeStockList.CreateByEstadoAndTipo(_Est: TEstadoDeAjusteDeStock; _EsFabricado: Boolean; _EsMateriaPrima: Boolean; _EsSemielaborado: Boolean);
  Function WhereString : String;
  begin
    Result := TAjusteDeStockDM._EstadoDeAjusteDeStockID + '=' + IntToStr(_Est.ID);
    If _Esfabricado Then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeFabricados     + ' = 1)';
    if _EsMateriaPrima then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeMateriasPrimas + ' = 1)';
    if _EsSemielaborado then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeSemielaborados + ' = 1)';
  end;
begin
  inherited Create(TAjusteDeStock,TAjusteDeStockDM.CreateAll(False, WhereString));
end;

constructor TAjusteDeStockList.CreateByEstadosAndTipo(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsFabricado: Boolean; _EsMateriaPrima: Boolean; _EsSemielaborado: Boolean);
  Function WhereString : String;
  begin
    Result := TAjusteDeStockDM._EstadoDeAjusteDeStockID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ', ';
      Result := Result + IntToStr (_Est.Actual.EstadoDeAjusteDeStockID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';
    If _Esfabricado Then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeFabricados     + ' = 1)';
    if _EsMateriaPrima then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeMateriasPrimas + ' = 1)';
    if _EsSemielaborado then
      Result := Result + ' And (' + TAjusteDeStockDM._EsAjusteDeSemielaborados + ' = 1)';
  end;
begin
  inherited Create(TAjustedeStock,TAjusteDeStockDM.CreateAll(False, WhereString ));
end;

{ TAjusteDeStockItem }
constructor TAjusteDeStockItem.Create;
begin
  inherited;
  DMObject                     := Aplicacion.DMPRovider.GetGlobalDM(TAjusteDeStockItemDM);
  Fcantidad                    := null;
  Fobservaciones               := null;
  FPedidoDeVentaItemAsignadoID := NullID;
  FPedidoDeVentaAsignadoID     := NullID;
  FPedidoDeVentaItemAsignado   := Nil;
  FPedidoDeVentaAsignado       := Nil;
end;


function TAjusteDeStockItem.Getproducto : TProducto;
begin
  if not assigned(Fproducto) and (FproductoID<>NullID) then
    GetObject(TProducto,Fproducto,productoID);
  Result := TProducto(Fproducto);
end;

procedure TAjusteDeStockItem.SetproductoID(Value : TObjectID);
begin
  if (Value<>FproductoID) and Assigned(Fproducto) then
    FreeAndNil(Fproducto);
  FproductoID := Value;
end;

procedure TAjusteDeStockItem.SetAjusteDeStock(const Value: TAjusteDeStock);
begin
  FajusteDeStock := Value;
  if (FajusteDeStock.ID <> FajusteDeStockID ) then
    FajusteDeStockID := FajusteDeStock.ID;
end;

procedure TAjusteDeStockItem.SetajusteDeStockID(Value : TObjectID);
begin
  if (Value<>FajusteDeStockID) and Assigned(FajusteDeStock) then
    FreeAndNil(FajusteDeStock);
  FajusteDeStockID := Value;
end;


procedure TAjusteDeStockItem.SetPedidoDeVentaItemAsignadoID(const Value: TObjectID);
begin
  if (FPedidoDeVentaItemAsignadoID <> Value) and Assigned( FPedidoDeVentaItemAsignado) then
    begin
      FreeAndNil( FPedidoDeVentaItemAsignado);
      FreeAndNil( FPedidoDeVentaAsignado);
    end;
  FPedidoDeVentaItemAsignadoID := Value;
end;


destructor TAjusteDeStockItem.destroy;
begin
  if assigned( FajusteDeStock ) then
  FajusteDeStock.NilObject;
  inherited;
end;

function TAjusteDeStockItem.GetajusteDeStock : TAjusteDeStock;
begin
  if not assigned(FajusteDeStock) then
    GetObject(TAjusteDeStock,FajusteDeStock,ajusteDeStockID);

  Result := TAjusteDeStock(FajusteDeStock);
end;

function TAjusteDeStockItem.GetPedidoDeVentaAsignado: TPedidoDeVenta;
begin
  if not Assigned( FPedidoDeVentaAsignado ) and (FPedidoDeVentaItemAsignadoID <> NullId) then
    FPedidoDeVentaAsignado := PedidoDeVentaItemAsignado.PedidoDeVenta;
  Result := TPedidoDeVenta(FPedidoDeVentaAsignado);
end;


function TAjusteDeStockItem.GetPedidoDeVentaAsignadoID: TObjectID;
begin
  if (FPedidoDeVentaItemAsignadoID <> NullID) then
    FPedidoDeVentaAsignadoID := PedidoDeVentaItemAsignado.PedidoDeVentaID;

  Result := FPedidoDeVentaAsignadoID;
end;


function TAjusteDeStockItem.GetPedidoDeVentaItemAsignado: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItemAsignado) and (FPedidoDeVentaItemAsignadoID<>NullID) then
    GetObject(TPedidoDeVentaItem,FPedidoDeVentaItemAsignado,FPedidoDeVentaItemAsignadoID);
  Result := TPedidoDeVentaItem(FPedidoDeVentaItemAsignado);
end;


function TAjusteDeStockItem.Save: Boolean;
begin
  Result := False;
  if (Asignado) and (PedidoDeVentaItemAsignadoID = NullID) then
    Aplicacion.raiseExceptionCreate('Debe indicar un item de pedido válido para asignar.');

  if Aplicacion.StockManager.HayStockSuficiente(ProductoID, AjusteDeStock.DepositoOrigenID, AjusteDeStock.EstadoOrigenID, ifThen(AjusteDeStock.EstadoOrigen.EsAsignacionPedidoItem, PedidoDeVentaItemAsignadoID, NullID), Cantidad ,True) then
    Result := inherited save;

  if not Result or (PedidoDeVentaItemAsignadoID = NullID) then
    exit;
end;

{ TAjusteDeStockItemDM }
class function TAjusteDeStockItemDM.TableName : string;
begin
  Result := 'AjusteDeStockItems';
end;

class function TAjusteDeStockItemDM.ID_FieldName : string;
begin
  Result := 'AjusteDeStockItemID';
end;

procedure TAjusteDeStockItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TAjusteDeStockItem(PDObject) do
    begin
      IntegerField[_ItemNro ]             := FItemNro;
      FloatField  [_cantidad ]            := Fcantidad;
      StringField [_observaciones ]       := Fobservaciones;
      IDField     [_PedidoItemAsignadoID ]:= FPedidoDeVentaItemAsignadoID;
      IDField     [_productoID ]          := FproductoID;
      IDField     [_ajusteDeStockID ]     := FajusteDeStockID;
      IDField     [_DepositoOrigenID ]    := FDepositoOrigenID;
      IDField     [_DepositoDestinoID ]   := FDepositoDestinoID;
    end;
end;

procedure TAjusteDeStockItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TAjusteDeStockItem(PDObject) do
    begin
      Fcantidad                    := FloatField  [_cantidad ];
      Fobservaciones               := StringField [_observaciones ];
      FPedidoDeVentaItemAsignadoID := IDField [_PedidoItemAsignadoID ];
      FproductoID                  := IDField     [_productoID ];
      FajusteDeStockID             := IDField     [_ajusteDeStockID ];
      FItemNro                     := IntegerField[_ItemNro ];
      FDepositoOrigenID            := IDField     [_DepositoOrigenID ];
      FDepositoDestinoID           := IDField     [_DepositoDestinoID ];
    end;
end;

{ TAjusteDeStockItemList }
function TAjusteDeStockItemList.GetActual : TAjusteDeStockItem;
begin
  Result := TAjusteDeStockItem(CurrentObject);
end;

function TAjusteDeStockItemList.CreateNewObject: TPDObject;
begin
  Result := TAjusteDeStockItem.Create;
end;

function TAjusteDeStockItemList.FindPedidoDeVentaItemAsignadoID(_PVIID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.PedidoDeVentaItemAsignadoID = _PVIID);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function TAjusteDeStockItemList.FindProductoID(_PID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.productoID = _PID);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor TAjusteDeStockItemList.CreateAll;
begin
  inherited Create(TAjusteDeStockItem,TAjusteDeStockItemDM.CreateAll(False));
end;

constructor TAjusteDeStockItemList.CreateByAjuste(_A: TAjusteDeStock);
  Function WhereString : String;
  begin
    Result := '(' + TAjusteDeStockItemDM._AjusteDeStockID + ' = ' + IntToStr(_A.ID) + ')';
  end;
begin
  Inherited create(TAjusteDeStockItem, TAjusteDeStockItemDM.CreateAll(False, WhereString));
end;

{ TPedidoDeVenta }

procedure TPedidoDeVenta.agregarItemConCostoDeMatriceria(_CostoDeMatriceria: TReal);
var
  SL: TServicioList;
  FDL: TTipoDeFlexibilidadList;
begin
  try
    tmpCostoMatriceria := TPedidoDeVentaItem.Create;
    SL := TServicioList.CreateByCodigo(Aplicacion.ParametrosDelSistema.CodigoDeServicioCostoDeMatriceria, True);
    if SL.count = 0 then
      Aplicacion.raiseExceptionCreate('No se encontró el servicio correspondiente a Costo de matricería');

    SL.First;
    tmpInsertarItemCostoCunioNuevo := False;
    tmpCostoMatriceria.fechaEntrega := FechaReal;
    tmpCostoMatriceria.PedidoDeVentaID := ID;
    tmpCostoMatriceria.itemNro := Items.count + 1;
    tmpCostoMatriceria.ProductoID := SL.Actual.ProductoID;
    tmpCostoMatriceria.CodigoProductoCliente := tmpCostoDeMatriceriaCodigoCunio;
    // tmpCostoMatriceria.descripcionDelItem   := SL.Actual.descripcion +  ' ' +
    // tmpCostoMatriceria.PrecioDeListaProducto:= _CostoDeMatriceria;
    tmpCostoMatriceria.PrecioDeVenta := _CostoDeMatriceria;
    tmpCostoMatriceria.CantidadPedida := 1;
    tmpCostoMatriceria.FechaDelPedido := FechaReal;
    tmpCostoMatriceria.MonedaDelPedidoID := MonedaID;

    FDL := TTipoDeFlexibilidadList.CreateByCodigo(Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo, True);
    FDL.First;
    if (FDL.Actual.ID <> NullID) then
      tmpCostoMatriceria.TipoDeFlexibilidadID := FDL.Actual.ID;
    FreeAndNil(FDL);
    tmpCostoMatriceria.Save;
    Items.Add(tmpCostoMatriceria);

  finally
    FreeAndNil(SL);
  end;

end;

procedure TPedidoDeVenta.AgregarNuevoEstadoAlLog;
var
  S: TPedidoDeVentaStateLog;
begin
  S := TPedidoDeVentaStateLog.Create;
  try
    S.EstadoDePedidoDeVentaID := EstadoDePedidoDeVentaID;
    S.UsuarioID               := Aplicacion.Usuario.ID;
    S.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
    S.PedidoDeVentaID         := Self.ID;
    S.Observacion             := ObservacionDeEstadoNuevo;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

procedure TPedidoDeVenta.DeleteItems;
begin
if assigned(Items) and (Items.count > 0) then
  repeat
    Items.Actual.Delete;
    Items.Next;
  until Items.IsLast;
end;

procedure TPedidoDeVenta.ColocarEstado;
var
  EPVIL : TEstadoDePedidoDeVentaItemList;
begin
  AgregarNuevoEstadoAlLog;
  if not esCambioDeEstado and IsAssigned and DebeCambiarEstadoAItems and (Items.count > 0) then
    try
      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( EstadoDePedidoDeVenta.codigo , False );
      if (EPVIL.count=0) then
        Raise Exception.Create('No se encontro el estado de ítems '+ EstadoDePedidoDeVenta.Descripcion );

      EPVIL.First;
      Items.First;
      Repeat
        // Coloco el estado de Confirmado o pendiente a todos los items del pedido de venta
        Items.Actual.cambiarEstado( EPVIL.Actual, ObservaciondeEstado, true );
        Items.Actual.Save;
        Items.Next;
      Until Items.IsLast;
    finally
      freeAndNil( EPVIL );
    End;
end;

procedure TPedidoDeVenta.ColocarEstadoBorrador;
  Function ObtenerEstadoBorradorID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := nullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Borrador en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
var
  EPVIL : TEstadoDePedidoDeVentaItemList;
begin
  FEstadoDePedidoDeVentaID := ObtenerEstadoBorradorID;
  if Assigned( FEstadoDePedidoDeVenta ) then
    FreeAndNil( FEstadoDePedidoDeVenta);

  ObservacionDeEstadoNuevo := '';
  if EsModificacion then
    ObservacionDeEstadoNuevo := '< Modificación >';

  if not esCambioDeEstado and IsAssigned and (Items.count > 0) then
    begin
      AgregarNuevoEstadoAlLog;
      try
        EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False );
        EPVIL.first;
        Items.First;
        Repeat
          Items.Actual.cambiarEstado( EPVIL.Actual, ObservaciondeEstado, True  );
          Items.Actual.Save;
          Items.Next;
        Until Items.IsLast;
      finally
        FreeAndNil( EPVIL );
      end;
    end;
end;

procedure TPedidoDeVenta.ColocarEstadoCorrespondiente;
var
  EPVIL : TEstadoDePedidoDeVentaItemList;
begin
  FEstadoDePedidoDeVentaID := FEstadoDePedidoNuevoID;
  if Assigned( FEstadoDePedidoDeVenta ) then
    FreeAndNil( FEstadoDePedidoDeVenta);

  if EsModificacion then
    ObservacionDeEstadoNuevo := '< Modificación > ' + ObservacionDeEstadoNuevo
  else
    if EsNuevo then
      ObservacionDeEstadoNuevo := '< Alta > ' + ObservacionDeEstadoNuevo;

  if not esCambioDeEstado and IsAssigned and (Items.count > 0) then
    Begin
      asignarEsExclusivoServicios;
      FSeFacturaSinRemito := EsExclusivoServicios or TipoDePedidoDeVenta.EsParaNota;
      if EsExclusivoServicios or SeFacturaSinRemito then
        begin
          FEstadoDePedidoDeVentaID := ObtenerEstadoGrabadoID;
          if Assigned( FEstadoDePedidoDeVenta ) then
            FreeAndNil( FEstadoDePedidoDeVenta);
        end;

      AgregarNuevoEstadoAlLog;
      try
        EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( EstadoDePedidoDeVenta.codigo, False );
        Items.First;
        Repeat
          Items.Actual.cambiarEstado( EPVIL.Actual, ObservacionDeEstadoNuevo, true );
          Items.Actual.ListaDePrecioID   := ListaDePrecioID;
          Items.Actual.MonedaDelPedidoID := MonedaID;
          Items.Actual.FechaDelPedido    := FechaReal;

          Items.Actual.Save;
          Items.Next;
        Until Items.IsLast;
      finally
        FreeAndNil(EPVIL);
      end;
    End;
end;

procedure TPedidoDeVenta.asignarEsExclusivoServicios;
begin
  FEsExclusivoServicios := True;
  if TipoDePedidoDeVenta.EsParaNota then
    Exit;
  Items.First;
  while not Items.IsLast and FEsExclusivoServicios do
    Begin
      FEsExclusivoServicios := Items.Actual.Producto.EsServicio;
      if FEsExclusivoServicios and (Items.Actual.Producto.Servicio.EsConceptoARemitir) then
        FEsExclusivoServicios := False;
      Items.Next;
    End;
end;

Function TPedidoDeVenta.ObtenerEstadoGrabadoID: TObjectID;
Var
  EL: TEstadoDePedidoDeVentaList;
Begin
  Result := NullID;
  Try
    if EsExclusivoServicios or SeFacturaSinRemito then
      begin
        EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_GrabadoServicios, False);
        if EL.count = 0 then
          Raise Exception.Create('No existe un estado de Grabado en la tabla');
      end
    else
      begin
        EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado, False);
        if EL.count = 0 then
          Raise Exception.Create('No existe un estado de Grabado en la tabla');
      end;
    Result := EL.Actual.ID;
  Finally
    FreeAndNil(EL);
  End;
end;

procedure TPedidoDeVenta.ColocarEstadoGrabado;
var
  EPVIL : TEstadoDePedidoDeVentaItemList;
begin
  ObservacionDeEstadoNuevo := '';
  if EsModificacion then
    ObservacionDeEstadoNuevo := '< Modificación >';

  if not esCambioDeEstado and IsAssigned and (Items.count > 0) then
    try
      Items.First;
      AgregarNuevoEstadoAlLog;
      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado, False );
      EPVIL.first;
      Repeat
        Items.Actual.cambiarEstado( EPVIL.Actual, ObservacionDeEstadoNuevo, True);
        Items.Actual.Save;
        Items.Next;
      Until Items.IsLast;
    finally
      FreeAndNil( EPVIL );
    end;
end;

Class procedure TPedidoDeVenta.CrearHojasDeRuta(_PV: TPedidoDeVenta);
begin
  if (_PV.Items.Count > 0) then
    begin
      _PV.Items.First;
      while not _PV.Items.IsLast do
      begin
        _PV.Items.Actual.CrearHojasDeRuta;
        _PV.Items.Next;
      end;
    end;
end;

Class function TPedidoDeVenta.CrearRemitoDePedidoAsignado(_PV: TPedidoDeVenta): Boolean; // queda en estado Grabado y el stock Preparado
var
  RM    : TRemito;
  RMI   : TRemitoItem;
  ESL   : TEstadoDeStockList;
  NItem : Integer;
  CantidadARemitir : TReal;

  function CalculoBultos: Integer;
  var
    UnidXEmb : Integer;
  begin
    UnidXEmb:= Aplicacion.StockManager.CantidadPorEmbalajeStkItem( _PV.Items.actual.ProductoID, _PV.Cliente.DepositoVirtualDeStockID, ESL.actual.ID, _PV.Items.actual.ID ) ;
    Result := CantidadARemitir div UnidXEmb;
    if (CantidadARemitir mod UnidXEmb) > 0 then
      Result := Result + 1;
  end;

begin
  Result := False;
  try
    RM                     := TRemito.Create;
//    RM.Numero              := TRemito.AsignarNumero;  // se asigna cuando se confirma
    RM.TipoDeFormularioID    := Aplicacion.RemitoDeStock.ID;
//    RM.CentroDeFacturacionID := Aplicacion.RemitoDeStock.CentroDeFacturacionID;
    RM.CondicionDeVentaID    := _PV.CondicionDeVentaID;
    RM.CondicionDeIvaID      := _PV.Cliente.CondicionDeIVAId;
    RM.FechaDeEmision        := Aplicacion.DateTimeService.FechaHoraActual;
    RM.EmpresaID             := _PV.ClienteID;
    RM.EmpresaFleteID        := _PV.EmpresaFleteID;
    RM.GrupoDeVendedorID     := _PV.GrupoDeVendedorID;
    RM.DepositoDeEntregaID   := _PV.DireccionDeEntregaID;
    RM.HorarioDeEntrega      := _PV.DireccionDeEntrega.HorarioDeEntrega;
    RM.EsCambioDeEstado      := True; // lo pongo en true para que me grabe los state logs.

//    El cai y vto se deben asignar en la confirmación del remito con sus correspondientes validaciones - También en esta acción se debe pasar a Sifab
//    RM.CAI                   := Aplicacion.DataService.ObtenerNumeroDeCaiVigente( Aplicacion.RemitoDeStock.CentroDeFacturacion, Aplicacion.RemitoDeStock );
//    RM.FEchaDeVtoCAI         := Aplicacion.DataService.ObtenerVencimientoDeCaiVigente( Aplicacion.RemitoDeStock.CentroDeFacturacion, Aplicacion.RemitoDeStock );
    RM.Save;
    _PV.Items.First;

    ESL := TEstadoDeStockList.CreateByCodigo( aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado );
    if (ESL.count=0) then
      Raise Exception.Create('No se encontró el estado de stock [' + aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado +']');
    ESL.first;

    NItem := 0 ;
    while not _PV.Items.Islast do
      begin
        if _PV.Items.actual.Producto.EsFabricado OR ( _PV.Items.actual.Producto.EsServicio and _PV.Items.actual.Producto.Servicio.EsConceptoARemitir ) then
          Begin
            if _PV.Items.actual.Producto.EsStockeable then
              CantidadARemitir := Aplicacion.StockManager.StockActual( _PV.Items.actual.ProductoID, _PV.Cliente.DepositoVirtualDeStockID, ESL.actual.ID, _PV.Items.actual.ID ) // Devuelve la cantidad asignada
            else
              CantidadARemitir := _PV.Items.actual.CantidadPedida;

            if (CantidadARemitir > 0) then
              Try
                RMI := TRemitoItem.create;
                inc( NItem );
                RMI.RemitoID             := RM.ID;
                RMI.TmpEstadoDeRemitoOrigenID := NullID;                // Se necesita para realizar las acciones de stock correspondientes al estado del remito
                RMI.TmpEstadoDeRemitoID  := RM.EstadoDeRemitoID;   // Se necesita para realizar las acciones de stock correspondientes al estado del remito
                RMI.TmpTipoDeFormularioID     := RM.TipoDeFormularioID; // Se necesita para realizar las acciones de stock correspondientes al estado del remito
                RMI.ItemNro             := NItem;
                RMI.ProductoID          := _PV.Items.actual.ProductoID;
                RMI.Cantidad            := CantidadARemitir;
                RMI.PedidoDeVentaItemID := _PV.Items.actual.ID;
                If _PV.Items.actual.Producto.EsServicio then
                  begin
                    if  _PV.Items.actual.Producto.Servicio.EsConceptoARemitir then
                      if ( _PV.Items.actual.Producto.Servicio.ConceptoARemitir > '' ) then
                        begin
                          if ( _PV.Items.actual.CodigoProductoCliente > '' ) then
                            RMI.Descripcion       :=  '['+_PV.Items.actual.CodigoProductoCliente + '] - ' + AnsiLeftStr(_PV.Items.actual.Producto.Servicio.ConceptoARemitir, 500)
                          else
                            RMI.Descripcion       := AnsiLeftStr(_PV.Items.actual.Producto.Servicio.ConceptoARemitir, 500);
                        end
                      else
                        if ( _PV.Items.actual.CodigoProductoCliente > '' ) then
                          RMI.Descripcion       :=  '['+_PV.Items.actual.CodigoProductoCliente + '] - ' + AnsiLeftStr(_PV.Items.actual.DescripcionDelItem, 500)
                        else
                          RMI.Descripcion       := AnsiLeftStr(_PV.Items.actual.DescripcionDelItem, 500);
                  end
                else
                  if ( _PV.Items.actual.CodigoProductoCliente > '' ) then
                    RMI.Descripcion       :=  '['+_PV.Items.actual.CodigoProductoCliente + '] - ' +AnsiLeftStr(_PV.Items.actual.DescripcionDelItem, 500)
                  else
                    RMI.Descripcion       := AnsiLeftStr(_PV.Items.actual.DescripcionDelItem, 500);

                RMI.CantidadDeBultos    := CalculoBultos;
                RMI.EsFacturable        := (_PV.Items.actual.PrecioDeVenta <> 0 );
                RMI.save;
                RM.Items.add( RMI);
              finally
                RMI.NilObject;
              end;
          End;
        _PV.Items.next;
      end;
    Result := (RM.Items.count > 0);
    if Result then
      begin
        _PV.CumplirHojasDeRuta(_PV);
        RM.Items.ApplyUpdates
      end
    else
      RM.Items.CancelUpdates;
  finally
    FreeAndNil(ESL);
    FreeAndNil(RM);
  end;
end;

constructor TPedidoDeVenta.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaDM);
  fUsuarioDeAltaID                  := -9999;
  FFechaDeAlta                      := Null;
  FEstadoDePedidoNuevoID            := NullID;
  FEmpresaApholos                   := Nil;
  FEstadoDePedidoDeVentaID          := NullID;
  FFechaDeEstadoDePedidoDeVenta     := Null;
  FFechaEnvioProforma               := Null;
  FTipoDeFormularioID               := NullID;
  FFechaReal                        := Null;
  FNroOrdenDeCompraCliente          := '';
  FPorcentajeComisionPorCobranza    := 0;
  FPorcentajeComisionPorFacturacion := 0;
  FPorcentajeDeTolerancia           := 0;
  FEntregaTotal                     := False;
  FNumero                           := 0;
  EsNuevo                           := False;
  EsModificacion                    := False;
  FObservaciondeEstado              := Null;
  FesImportacionDeDatos             := False;
  FImporteNetoDelPedido             := 0;
  FMailPendiente                    := False;
  FFechaEnvioMail                   := Null;
  FProformaPendiente                := False;
  FCambiarEstadoEnEdicion           := True;
  FEsParaKit                        := False;
  FUnidadesPorKit                   := 0;
  FtmpCostoDeMatriceria             := Nil;
  FtmpNoCobrarCostoCunioNuevo       := False;
  FtmpInsertarItemCostoCunioNuevo   := False;
  FtmpProrratearCostoCunioNuevo     := False;
  FtmpCostoDeMatriceriaCodigoCunio  := '';
//  FNumeroSifab                      := Null;
  FFechaPrimerFactura               := Null;
  FFechaUltimaFactura               := Null;
  FDebeCambiarEstadoAItems          := True;
  FEsTaller                         := Null;
  FObservacionDeEstadoNuevo         := '';
  FDolarCotizacion                  := Null;
  FPasaPorCalidad                   := False;
  FEsExclusivoServicios             := Null;
end;

class procedure TPedidoDeVenta.CumplirHojasDeRuta(_PV: TPedidoDeVenta);
begin
  if (_PV.Items.Count > 0) then
    begin
      _PV.Items.First;
      while not _PV.Items.IsLast do
      begin
        _PV.Items.Actual.CumplirHojasDeRuta;
        _PV.Items.Next;
      end;
    end;
end;

procedure TPedidoDeVenta.Delete;
begin
  DeleteItems;
  inherited;
end;

destructor TPedidoDeVenta.Destroy;
begin
  FreeObjectFromMemory;
  inherited;
end;

function TPedidoDeVenta.esPedidoDeCargoExtra: Boolean;
begin
  Result := EsExclusivoServicios;
//
//
//  True;
//  if (Items.count > 0) then
//    begin
//      Items.First;
//      repeat
//        Result := (Items.Actual.Producto.servicioID <> NullID);
//        if not Result then
//          Break;
//        Items.Next;
//      until Items.IsLast;
//      Items.First;
//    end;
end;

function TPedidoDeVenta.EstaEnTeamplace(_E: TEmpresaDeSistema): Boolean;
var
  PedidoID : Integer;
begin
  if self.Cliente.EsExportacion then
    PedidoID := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(_E.IDTeamplace) + ') and (' + TPedidoDeVentaDM._TeamplaceTalonarioID + '='+ TPedidoDeVentaDM._TeamplaceTalonarioPedidoExpo+')' , TRemitoDM._TeamplaceID )
  else
    PedidoID := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(_E.IDTeamplace) + ') and (' + TPedidoDeVentaDM._TeamplaceTalonarioID + '='+ TPedidoDeVentaDM._TeamplaceTalonarioPedidoLocal+')' , TRemitoDM._TeamplaceID );
  Result   := ( PedidoID <> NullID);
end;

class function TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV: TPedidoDeVenta; _E: TEmpresa; _Prioridad: Real; _ES: TEmpresaDeSistema; _TipoDeDocumento, _WorkFlow: String): Boolean;
var
  OpApholos : OperacionApholosWS;
  XML       : IXMLDocument;
  XMLResp   : IXMLDocument;
  RootNode, PrimaryNode, ItemsNode ,CurNode : IXMLNode;
  Respuesta : String;
  PEM       : TPedidoDeVentaEstadoDeMigracion;

begin
  Result := False;

  if (_PV.ItemsNoRemitiblesFactPendientes.Count = 0) then
    exit;

  try
    XML := NewXMLDocument;
    XML.Encoding                                    := 'utf-8';
    XML.Options                                     := [doNodeAutoIndent];
    RootNode                                        := XML.AddChild('xmlTransaccion');
    PrimaryNode                                     := RootNode.AddChild('OperacionXml');
    //DatosCabecera
    PrimaryNode.Attributes['Cliente']               := _E.Codigo;
    PrimaryNode.Attributes['ComprobanteExterno']    := _PV.NumeroFinal;
    PrimaryNode.Attributes['CondicionPago']         := _PV.CondicionDeVenta.Codigo;
    PrimaryNode.Attributes['Descripcion']           := 'Importación desde Aphosoft';
    PrimaryNode.Attributes['DireccionEntrega']      := _PV.DireccionDeEntrega.DireccionCompleta;
    PrimaryNode.Attributes['Fecha']                 := IntToStr( YearOf( Aplicacion.DateTimeService.FechaActual ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( Aplicacion.DateTimeService.FechaActual ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( Aplicacion.DateTimeService.FechaActual ) ) , '0', 2) ;
    PrimaryNode.Attributes['FechaBaseVencimiento']  := IntToStr( YearOf( Aplicacion.DateTimeService.FechaActual ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( Aplicacion.DateTimeService.FechaActual ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( Aplicacion.DateTimeService.FechaActual ) ) , '0', 2) ;

    if (_PV.IncotermID <> NullID) then
      PrimaryNode.Attributes['Inconterm']           := _PV.Incoterm.Codigo
    else
      PrimaryNode.Attributes['Inconterm']           := 'FOB';

    PrimaryNode.Attributes['Moneda']                := _PV.Moneda.CodigoTeamplace;
    PrimaryNode.Attributes['NumeroDocumento']       := _PV.NumeroFinal;
    PrimaryNode.Attributes['NumeroInterno']         := '';
    PrimaryNode.Attributes['ProvinciaDestino']      := IntToStr( _PV.DireccionDeEntrega.Localidad.ProvinciaID );
    PrimaryNode.Attributes['ProvinciaOrigen']       := IntToStr( Aplicacion.Empresa.Localidad.ProvinciaID );
    PrimaryNode.Attributes['Puerto']                := 'BA';

    PrimaryNode.Attributes['TipoDocumento']         := _TipoDeDocumento;
    PrimaryNode.Attributes['Workflow']              := _WorkFlow;

    PrimaryNode.Attributes['Transporte']            := 'B1';
    PrimaryNode.Attributes['Empresa']               := _ES.CodigoTeamplace;
    PrimaryNode.Attributes['Vendedor']              := _PV.GrupoDeVendedor.Codigo;

    PrimaryNode.Attributes['Bultos']                := '1';
    PrimaryNode.Attributes['PesoBruto']             := IntToStr(0);
    PrimaryNode.Attributes['PesoNeto']              := IntToStr(0);

    ItemsNode                                       := PrimaryNode.AddChild('Items');
    _PV.ItemsNoRemitiblesFactPendientes.First;
    while not _PV.ItemsNoRemitiblesFactPendientes.IsLast do
      begin
        CurNode                                         := ItemsNode.AddChild('ItemProducto');
        CurNode.Attributes['Cantidad']                  := _PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPedida;
        CurNode.Attributes['Descripcion']               := _PV.ItemsNoRemitiblesFactPendientes.Actual.Producto.Codigo + ' - ' + _PV.ItemsNoRemitiblesFactPendientes.actual.DescripcionDelItem;
        CurNode.Attributes['Importe']                   := Aplicacion.TextService.ReemplazarEn( FloatToStr(_PV.ItemsNoRemitiblesFactPendientes.actual.CantidadPedida * _PV.ItemsNoRemitiblesFactPendientes.actual.PrecioDeVenta * _Prioridad) , ',', '.') ;
        CurNode.Attributes['Precio']                    := Aplicacion.TextService.ReemplazarEn( FloatToStr(_PV.ItemsNoRemitiblesFactPendientes.actual.PrecioDeVenta * _Prioridad) , ',', '.');
        CurNode.Attributes['PrecioSobre']               := IntToStr(0);
        if _PV.ItemsNoRemitiblesFactPendientes.Actual.Producto.EsFabricado then
          CurNode.Attributes['Producto']                  := _PV.ItemsNoRemitiblesFactPendientes.Actual.Producto.Fabricado.Articulo.Codigo
        else if _PV.ItemsNoRemitiblesFactPendientes.Actual.Producto.EsServicio then
          CurNode.Attributes['Producto']                  := _PV.ItemsNoRemitiblesFactPendientes.Actual.Producto.Servicio.Codigo;
        CurNode                                         := CurNode.AddChild('DimensionDistribucion');
        CurNode.Attributes['Dimension']                 := 'DIMCTC';
        CurNode.Attributes['Distribucion']              := 'Ventas';
        _PV.ItemsNoRemitiblesFactPendientes.Next;
      end;


    if _PV.Cliente.EsExportacion then
      begin
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := '1';
        CurNode.Attributes['Moneda']                    := _PV.Moneda.CodigoTeamplace;
      end
    else
      begin
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := Aplicacion.TextService.ReemplazarEn( FloatToStrF( _PV.MonedaCotizacion , ffNumber, 10, 3 ) , ',', '.') ;
        CurNode.Attributes['Moneda']                    := _PV.Moneda.CodigoTeamplace;
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := Aplicacion.TextService.ReemplazarEn( FloatToStrF( Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar, _PV.FechaReal, True ), ffNumber, 10, 3 ) , ',', '.') ;
        CurNode.Attributes['Moneda']                    := Aplicacion.MonedaDolar.CodigoTeamplace;
      end;
    OpApholos := GetOperacionApholosWS;
    Respuesta := OpApholos.ImportarTransaccion('int', 'dnedri', 'BSA', 'APHOLOS', _ES.CodigoTeamplace ,XML.XML.Text);
    try
      XMLResp               := NewXMLDocument;
      XMLResp.Encoding      := 'utf-8';
      XMLResp.Options       := [doNodeAutoIndent];
      XMLResp.XML.Text      := FormatXMLData( Respuesta );
      XMLResp.Active        := True;
      PEM                   := TPedidoDeVentaEstadoDeMigracion.Create;
      PEM.PedidoDeVentaID   := _PV.ID;
      PEM.UsuarioID         := Aplicacion.Sesion.Usuario.ID;
      PEM.EmpresaDestinoID  := _ES.ID;
      PEM.FechaHora         := Aplicacion.DateTimeService.FechaHoraActual;
      CurNode               := XMLResp.ChildNodes.FindNode('Operaciones');
      CurNode               := CurNode.ChildNodes.FindNode('Operacion');
      PEM.EstadoDeMigracion := (LowerCase( CurNode.Attributes['Resultado'] ) = 'true');
      Result                := PEM.EstadoDeMigracion;
      if PEM.EstadoDeMigracion then
        Begin
          _PV.ItemsNoRemitiblesFactPendientes.First;
          while not _PV.ItemsNoRemitiblesFactPendientes.IsLast do
            begin
              _PV.ItemsNoRemitiblesFactPendientes.Actual.PendienteDeFacturar        := False;
              _PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadEntregadaHistorica := _PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPendiente;
              _PV.ItemsNoRemitiblesFactPendientes.Actual.Save;
              _PV.ItemsNoRemitiblesFactPendientes.next
            end;
          _PV.ItemsNoRemitiblesFactPendientes.ApplyUpdates;
          PEM.DetalleDeError    := 'Migración OK.';
        End
      else
        PEM.DetalleDeError    := CurNode.Attributes['DetallesError'];
      PEM.Save;
      _PV.EstadosDeMigracion.Add(PEM);
      _PV.EstadosDeMigracion.ApplyUpdates;
    finally
      PEM.NilObject;
      XMLResp := nil;
    end;

  finally
    XML           := nil;
    OpApholos     := nil;
    RootNode      := nil;
    PrimaryNode   := nil;
    ItemsNode     := nil;
    CurNode       := nil;
  end;
end;

function TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV: TPedidoDeVenta): Boolean;
begin
  if (_PV.Cliente.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (_PV.ClienteTribecaID <> NullID) then
    begin
      if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
        Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV , _PV.Cliente , 1 , Aplicacion.Sesion.EmpresaDeSistema       ,'PACKLIST', 'VTASEXP');

      if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaTribeca ) then
        Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV , _PV.ClienteTribeca, Aplicacion.ParametrosDelSistema.CoeficienteDeEmpresaTribeca, Aplicacion.Sesion.EmpresaDeSistemaTribeca,'RTOEXT'  , 'VTASEXT');
    end
  else if _PV.TipoDePedidoDeVenta.EsAutonumerado then
    begin
      if _PV.Cliente.EsExportacion then
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, (_PV.TipoDePedidoDeVenta.Prioridad/100)        , Aplicacion.Sesion.EmpresaDeSistema  ,'PACKLIST', 'VTASEXP');
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaProf ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, (1 - (_PV.TipoDePedidoDeVenta.Prioridad/100)  ), Aplicacion.Sesion.EmpresaDeSistemaProf ,'RTOEXT', 'VTASEXP');
        end
      else
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, (_PV.TipoDePedidoDeVenta.Prioridad/100)        , Aplicacion.Sesion.EmpresaDeSistema  ,'REMVTAL' , 'VENTASLOCAL');
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaProf ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, (1 - (_PV.TipoDePedidoDeVenta.Prioridad/100)  ), Aplicacion.Sesion.EmpresaDeSistemaProf ,'REMVTAL' , 'VENTASLOCAL');
        end;
    end
  else
    begin
      if _PV.Cliente.EsExportacion then
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, 1, Aplicacion.Sesion.EmpresaDeSistema,'PACKLIST', 'VTASEXP')
        end
      else
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TPedidoDeVenta.FinnegansMigrarPedidoDeVenta(_PV, _PV.Cliente, 1, Aplicacion.Sesion.EmpresaDeSistema,'REMVTAL' , 'VENTASLOCAL' );
        end;
    end;
end;

procedure TPedidoDeVenta.FreeObjectFromMemory;
begin
  if Assigned(FCliente) then
    FreeAndNil(FCliente);
  if Assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  if Assigned(FEmpresaFlete) then
    FreeAndNil(FEmpresaFlete);
  if Assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  if Assigned(FMarca) then
    FreeAndNil(FMarca);
  if Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  if Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  if Assigned(FDireccionDeEntrega) then
    FreeAndNil(FDireccionDeEntrega);
  if Assigned(FItems) then
    FreeAndNil(FItems);
  if Assigned(FEstadoDePedidoDeVenta) then
    FreeAndNil(FEstadoDePedidoDeVenta);
  if Assigned(FStateLogs) then
    FreeAndNil(FStateLogs);
  if Assigned(FTipoDePedidoDeVenta) then
    FreeAndNil(FTipoDePedidoDeVenta);
  if Assigned(FPresupuestoDeVenta) then
    FreeAndNil(FPresupuestoDeVenta);
  if Assigned(FUsuarioDeAlta) then
    FreeAndNil(FUsuarioDeAlta);

  if Assigned(FClienteTribeca) then
    FreeAndNil(FClienteTribeca);
  if Assigned(FGrupoVendedorTribeca) then
    FreeAndNil(FGrupoVendedorTribeca);
  if Assigned(FIncoterm) then
    FreeAndNil(FIncoterm);
  if Assigned(FCondicionDeVentaDetalle) then
    FreeAndNil(FCondicionDeVentaDetalle);
  if Assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  if Assigned(FComentarios) then
    FreeAndNil(FComentarios);
  if Assigned(FEstadoDePedidoNuevo) then
    FreeAndNil(FEstadoDePedidoNuevo);
end;

function TPedidoDeVenta.GetBloqueadoPorFaltadePrecioDeLista: TBoolean;
begin
  Result := False;
  Items.First;
  while Not Items.IsLast do
    begin
      Result := items.actual.BloqueadoPorFaltaDePreciodeLista;
      if result then
        Exit;
      items.Next;
    end;
end;

function TPedidoDeVenta.GetBloqueadoPorPrecioNoAutorizado: TBoolean;
begin
  Result := False;
  Items.First;
  while Not Items.IsLast do
    begin
      Result := items.actual.BloqueadoPorPrecioNoAutorizado;
      if result then
        Exit;
      items.Next;
    end;
end;

function TPedidoDeVenta.GetCCClienteCategoriaDeClienteDescripcion: TString;
begin
  if FCCClienteCategoriaDeClienteDescripcion = Unassigned then
    FCCClienteCategoriaDeClienteDescripcion := Cliente.CCCategoriaDeClienteDescripcion;
  Result := FCCClienteCategoriaDeClienteDescripcion;
end;

function TPedidoDeVenta.GetCCClienteCategoriaDeClienteID: TObjectID;
begin
  if FCCClienteCategoriaDeClienteID = Unassigned then
    FCCClienteCategoriaDeClienteID := Cliente.CategoriaDeClienteID;
  Result := FCCClienteCategoriaDeClienteID
end;

function TPedidoDeVenta.GetCCClienteCodigo: TString;
begin
  if (fCCClienteCodigo = Unassigned) or (fCCClienteCodigo = Null) then
    begin
      fCCClienteCodigo      := Cliente.codigo;
      fCCClienteDescripcion := Cliente.Descripcion;
    end;
  Result := fCCClienteCodigo;
end;

function TPedidoDeVenta.GetCCClienteCondiciondeIVAID: TObjectID;
begin
  if FCCClienteCondiciondeIVAID = Unassigned then
    FCCClienteCondiciondeIVAID := Cliente.CondicionDeIVAID;
  Result := FCCClienteCondiciondeIVAID;
end;

function TPedidoDeVenta.GetCCClienteDescripcion: TString;
begin
  if (FCCClienteDescripcion = Unassigned) or (FCCClienteDescripcion = Null) then
    begin
      FCCClienteCodigo      := Cliente.Codigo;
      FCCClienteDescripcion := Cliente.Descripcion;
    end;
  Result := FCCClienteDescripcion;
end;

function TPedidoDeVenta.GetCCClienteTribecaCodigo: TString;
begin
  if ((fCCClienteTribecaCodigo = Unassigned) or (fCCClienteTribecaCodigo = Null)) and (ClienteTribecaID <> NullID) then
    begin
      fCCClienteTribecaCodigo      := ClienteTribeca.codigo;
      fCCClienteTribecaDescripcion := ClienteTribeca.Descripcion;
    end;
  Result := fCCClienteTribecaCodigo;
end;

function TPedidoDeVenta.GetCCClienteTribecaDescripcion: TString;
begin
  if ((fCCClienteTribecaDescripcion = Unassigned) or (fCCClienteTribecaDescripcion = Null)) and (ClienteTribecaID <> NullID) then
    begin
      fCCClienteTribecaCodigo      := ClienteTribeca.codigo;
      fCCClienteTribecaDescripcion := ClienteTribeca.Descripcion;
    end;
  Result := fCCClienteTribecaDescripcion;
end;

function TPedidoDeVenta.GetCCCondicionDeVenta: TString;
begin
  if ((fCCCondicionDeVenta = Unassigned) or (fCCCondicionDeVenta=Null)) and (CondicionDeVentaID <> NullID) then
    fCCCondicionDeVenta := CondicionDeVenta.Descripcion;

  Result := fCCCondicionDeVenta;
end;

function TPedidoDeVenta.GetCCDireccionDeEntrega: TString;
begin
  if ((fCCDireccionDeEntrega = Unassigned) or (fCCDireccionDeEntrega=Null)) and (DireccionDeEntregaID <>NullID) then
    fCCDireccionDeEntrega    := DireccionDeEntrega.Descripcion;
  Result := fCCDireccionDeEntrega;
end;

function TPedidoDeVenta.GetCCEstadoDePedidoDeVentaCodigo: TString;
begin
  if ((fCCEstadoDePedidoDeVentaCodigo = Unassigned) or (fCCEstadoDePedidoDeVentaCodigo=Null)) and (EstadoDePedidoDeVentaID <>NullID) then
    begin
      fCCEstadoDePedidoDeVentaCodigo      := EstadoDePedidoDeVenta.Codigo;
      fCCEstadoDePedidoDeVentaDescripcion := EstadoDePedidoDeVenta.Descripcion;
    end;

  Result := fCCEstadoDePedidoDeVentaCodigo;
end;

function TPedidoDeVenta.GetCCEstadoDePedidoDeVentaDescripcion: TString;
begin
  if ((fCCEstadoDePedidoDeVentaDescripcion = Unassigned) or (fCCEstadoDePedidoDeVentaDescripcion=Null)) and (EstadoDePedidoDeVentaID <>NullID) then
    begin
      fCCEstadoDePedidoDeVentaCodigo      := EstadoDePedidoDeVenta.Codigo;
      fCCEstadoDePedidoDeVentaDescripcion := EstadoDePedidoDeVenta.Descripcion;
    end;

  Result := fCCEstadoDePedidoDeVentaDescripcion;
end;

function TPedidoDeVenta.GetCCFechaDePasoAEstadoActual: TFecha;
begin
  if ((FCCFechaDePasoAEstadoActual = Unassigned) or (FCCFechaDePasoAEstadoActual=Null))then
    FCCFechaDePasoAEstadoActual := FechaDeEstadoDePedidoDeVenta;
  Result := FCCFechaDePasoAEstadoActual;
end;

function TPedidoDeVenta.GetCCGrupoDeVendedorCodigo: TString;
begin
  if ((FCCGrupoDeVendedorCodigo = Unassigned) or (FCCGrupoDeVendedorCodigo=Null)) and ( GrupoDeVendedorID <> NullID) then
    FCCGrupoDeVendedorCodigo := GrupoDeVendedor.Codigo;
  Result := FCCGrupoDeVendedorCodigo;
end;

function TPedidoDeVenta.GetCCGrupoDeVendedorDescripcion: TString;
begin
  if ((fCCGrupoDeVendedorDescripcion = Unassigned) or (fCCGrupoDeVendedorDescripcion=Null)) and ( GrupoDeVendedorID <> NullID) then
    fCCGrupoDeVendedorDescripcion := GrupoDeVendedor.Descripcion;
  Result := fCCGrupoDeVendedorDescripcion;
end;

function TPedidoDeVenta.GetCCGrupoDeVendedorTribeca: TString;
begin
  if ((FCCGrupoDeVendedorTribeca = Unassigned) or (FCCGrupoDeVendedorTribeca=Null)) and ( GrupoVendedorTribecaID <> NullID) then
    FCCGrupoDeVendedorTribeca := GrupoVendedorTribeca.Descripcion;
  Result := FCCGrupoDeVendedorTribeca;
end;

function TPedidoDeVenta.GetCCGrupoDeVendedorTribecaCodigo: TString;
begin
  if ((FCCGrupoDeVendedorTribecaCodigo = Unassigned) or (FCCGrupoDeVendedorTribecaCodigo=Null)) and ( GrupoVendedorTribecaID <> NullID) then
    FCCGrupoDeVendedorTribecaCodigo := GrupoVendedorTribeca.Codigo;
  Result := FCCGrupoDeVendedorTribecaCodigo;
end;

function TPedidoDeVenta.GetCCMonedaCodigo: TString;
begin
  if ((FCCMonedaCodigo = Unassigned) or (fCCMonedaCodigo=Null)) and ( MonedaID <> NullID) then
    begin
      fCCMonedaDescripcion := Moneda.Descripcion;
      fCCMonedaCodigo      := Moneda.Codigo;
    end;
  Result := FCCMonedaCodigo;
end;

function TPedidoDeVenta.GetCCMonedaDescripcion: TString;
begin
  if ((fCCMonedaDescripcion = Unassigned) or (fCCMonedaDescripcion=Null)) and ( MonedaID <> NullID) then
    begin
      fCCMonedaDescripcion := Moneda.Descripcion;
      fCCMonedaCodigo      := Moneda.Codigo;
    end;
  Result := fCCMonedaDescripcion;
end;

function TPedidoDeVenta.GetCCNivelDeServicioDeCliente: TString;
begin
  if ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente=Null)) and ( ClienteID <> NullID) and ( Cliente.NivelDeServicioDeClienteID <> NullID) then
    begin
      FCCNivelDeServicioDeCliente                   := Cliente.NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion        := Cliente.NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := Cliente.NivelDeServicioDeCliente.ColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeCliente;
end;

function TPedidoDeVenta.GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
begin
  if ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente=Null)) and ( ClienteID <> NullID) and ( Cliente.NivelDeServicioDeClienteID <> NullID) then
    begin
      FCCNivelDeServicioDeCliente                   := Cliente.NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion        := Cliente.NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := Cliente.NivelDeServicioDeCliente.ColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeClienteColorIdentificador;
end;

function TPedidoDeVenta.GetCCNivelDeServicioDeClientePonderacion: TReal;
begin
  if ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente=Null)) and ( ClienteID <> NullID) and ( Cliente.NivelDeServicioDeClienteID <> NullID) then
    begin
      FCCNivelDeServicioDeCliente                   := Cliente.NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion        := Cliente.NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := Cliente.NivelDeServicioDeCliente.ColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeClientePonderacion;
end;

function TPedidoDeVenta.GetCCRankingCrediticio: TString;
begin
  if ((fCCRankingCrediticio = Unassigned) or (fCCRankingCrediticio=Null)) and ( ClienteID <> NullID) and ( Cliente.RankingCrediticioID <> NullID) then
    fCCRankingCrediticio := Cliente.RankingCrediticio.Descripcion;
  Result := fCCRankingCrediticio;
end;

function TPedidoDeVenta.GetCCTipoDePedidoCodigo: TString;
begin
  if ((fCCTipoDePedidoCodigo = Unassigned) or (fCCTipoDePedidoCodigo=Null)) and ( TipoDePedidoDeVentaID <> NullID) then
    begin
      fCCTipoDePedidoCodigo      := TipoDePedidoDeVenta.codigo;
      fCCTipoDePedidoDescripcion := TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoSeProduceParaStock := TipoDePedidoDeVenta.SeProduceParaStock;
      FCCTipoDePedidoResta              := TipoDePedidoDeVenta.Resta;
    end;
  Result := fCCTipoDePedidoCodigo;
end;

function TPedidoDeVenta.GetCCTipoDePedidoDescripcion: TString;
begin
  if ((fCCTipoDePedidoDescripcion = Unassigned) or (fCCTipoDePedidoDescripcion=Null)) and ( TipoDePedidoDeVentaID <> NullID) then
    begin
      fCCTipoDePedidoCodigo      := TipoDePedidoDeVenta.codigo;
      fCCTipoDePedidoDescripcion := TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoSeProduceParaStock := TipoDePedidoDeVenta.SeProduceParaStock;
      FCCTipoDePedidoResta              := TipoDePedidoDeVenta.Resta;
    end;
  Result := fCCTipoDePedidoDescripcion;
end;

function TPedidoDeVenta.GetCCTipoDePedidoResta: TString;
begin
  if ((FCCTipoDePedidoResta = Unassigned) or (FCCTipoDePedidoResta=Null)) and ( TipoDePedidoDeVentaID <> NullID) then
    begin
      fCCTipoDePedidoCodigo             := TipoDePedidoDeVenta.codigo;
      fCCTipoDePedidoDescripcion        := TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoSeProduceParaStock := TipoDePedidoDeVenta.SeProduceParaStock;
      FCCTipoDePedidoResta              := TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoResta;
end;

function TPedidoDeVenta.GetCCTipoDePedidoSeProduceParaStock: TString;
begin
  if ((FCCTipoDePedidoSeProduceParaStock = Unassigned) or (FCCTipoDePedidoSeProduceParaStock=Null)) and ( TipoDePedidoDeVentaID <> NullID) then
    begin
      fCCTipoDePedidoCodigo             := TipoDePedidoDeVenta.codigo;
      fCCTipoDePedidoDescripcion        := TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoSeProduceParaStock := TipoDePedidoDeVenta.SeProduceParaStock;
      FCCTipoDePedidoResta              := TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoSeProduceParaStock;
end;

function TPedidoDeVenta.GetCCTransportistaCodigo: TString;
begin
  if ((fCCTransportistaCodigo = Unassigned) or (fCCTransportistaCodigo=Null)) and ( ClienteID <> NullID) and ( Cliente.FleteID <> NullID) then
    begin
      fCCTransportistaCodigo      := Cliente.Flete.codigo;
      fCCTransportistaDescripcion := Cliente.Flete.Descripcion;
    end;
  Result := fCCTransportistaCodigo;
end;

function TPedidoDeVenta.GetCCTransportistaDescripcion: TString;
begin
  if ((fCCTransportistaDescripcion = Unassigned) or (fCCTransportistaDescripcion=Null)) and ( ClienteID <> NullID) and ( Cliente.FleteID <> NullID) then
    begin
      fCCTransportistaCodigo      := Cliente.Flete.codigo;
      fCCTransportistaDescripcion := Cliente.Flete.Descripcion;
    end;
  Result := fCCTransportistaDescripcion;
end;

function TPedidoDeVenta.GetCliente: TCliente;
begin
  if not assigned(FCliente) then
    GetObject(TCliente, FCliente, FClienteID);
  Result := TCliente(FCliente);
end;

function TPedidoDeVenta.GetClienteTribeca: TCliente;
begin
  if not assigned(FClienteTribeca) then
    GetObject(TCliente, FClienteTribeca, FClienteTribecaID);
  Result := TCliente(FClienteTribeca);
end;

function TPedidoDeVenta.Save: Boolean;
const
  _ENTER = #13+#10;
Var
  dlg: T_FrmDialogsService;
  ms : String;
begin
  try
    ValidarPedidoExportacion;
    ValidarPedidoTribeca;
    Aplicacion.ColocarCursorEspera;
    if not esImportacionDeDatos then
      Aplicacion.DialogsService.CrearDialogo(dlg, 'Validando y guardando encabezado ...', TAviComunes.Check);

    if EsModificacion and CambiarEstadoEnEdicion Then
      begin
        if (EstadoDePedidoDeVenta.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador) then
          ColocarEstadoBorrador
        else
          ColocarEstadoGrabado;
      end;

    If Not esCambioDeEstado Then
      Begin
        if (Cliente.MonedaDefaultID = NullID) then
          MonedaID := Aplicacion.MonedaDefault.ID;
        if (Cliente.depositosDeEmpresa.count = 0) then
          Aplicacion.raiseExceptionCreate('El cliente no tiene ningun depósito posible para la entrega del pedido');
      End;
    if (EstadoDePedidoDeVenta.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Anulado) or
       (EstadoDePedidoDeVenta.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
      ImporteNetoDelPedido := 0;
    if (ImporteNetoDelPedido > Aplicacion.ParametrosDelSistema.AlertaImporteFacturacion ) then
      begin
        ms := 'El total del pedido supera ' + FloatToStrF( Aplicacion.ParametrosDelSistema.AlertaImporteFacturacion, ffNumber, 10, 2 )   +_ENTER;
        ms := ms + _ENTER;
        ms := ms + '¿Está seguro de guardar este pedido?'+_ENTER;
        if (Aplicacion.MensajeEspecial('Alerta', ms,mtConfirmation,[mbYes],clWindow, clNavy,11, taLeftJustify ) <> mrYes) then
          Abort;
      end;
    Result := inherited Save;

  finally
    if not esImportacionDeDatos then
      Aplicacion.DialogsService.CerrarDialogo(dlg);
    Aplicacion.ColocarCursorNormal;
  end;
end;

procedure TPedidoDeVenta.SetClienteID(Value: TObjectID);
begin
  if (Value <> FClienteID) then
    begin
      If assigned(FCliente) then
        FreeAndNil(FCliente);
      fCCClienteCodigo      := Null;
      fCCClienteDescripcion := Null;
      fCCRankingCrediticio  := Null;
    end;

  FClienteID := Value;
end;

procedure TPedidoDeVenta.SetClienteTribecaID(const Value: TObjectID);
begin
  if (FClienteTribecaID <> Value) then
    begin
      if assigned(FClienteTribeca) then
        FreeAndNil(FClienteTribeca);
      fCCClienteTribecaCodigo      := Null;
      fCCClienteTribecaDescripcion := Null;
    end;
  FClienteTribecaID := Value;
end;

function TPedidoDeVenta.GetComentarios: TComentarioList;
begin
  If assigned(FComentarios) Then
    FreeAndNil(FComentarios);
  GetList(TPDList(FComentarios), TPDList(TComentarioList.CreateByPadre(self)));
  Result := FComentarios;
end;

function TPedidoDeVenta.GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
begin
  if not assigned(FCondicionDeVentaDetalle) then
    GetObject(TCondicionDeVentaDetalle, FCondicionDeVentaDetalle, CondicionDeVentaDetalleID);
  Result := TCondicionDeVentaDetalle(FCondicionDeVentaDetalle);
end;

function TPedidoDeVenta.GetCondicionDeVenta: TCondicionDeVenta;
begin
  if not assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta, FCondicionDeVenta, CondicionDeVentaID);
  Result := TCondicionDeVenta(FCondicionDeVenta);
end;

procedure TPedidoDeVenta.SetCondicionDeVentaDetalleID(const Value: TObjectID);
begin
  if (Value <> FCondicionDeVentaDetalleID) then
    begin
      if assigned(FCondicionDeVentaDetalle) then
        FreeAndNil(FCondicionDeVentaDetalle);
    end;
  FCondicionDeVentaDetalleID := Value;
end;

procedure TPedidoDeVenta.SetCondicionDeVentaID(Value: TObjectID);
begin
  if (Value <> FCondicionDeVentaID) then
    begin
      if assigned(FCondicionDeVenta) then
        FreeAndNil(FCondicionDeVenta);
      fCCCondicionDeVenta := Null;
    end;
  FCondicionDeVentaID := Value;
end;

function TPedidoDeVenta.GetEmpresaFlete: TEmpresa;
begin
  if not assigned(FEmpresaFlete) then
    GetObject(TEmpresa, FEmpresaFlete, EmpresaFleteID);
  Result := TEmpresa(FEmpresaFlete);
end;

function TPedidoDeVenta.GetEstadoDePedidoDeVenta: TEstadoDePedidoDeVenta;
begin
  if not assigned(FEstadoDePedidoDeVenta) then
    GetObject(TEstadoDePedidoDeVenta, FEstadoDePedidoDeVenta, EstadoDePedidoDeVentaID);
  Result := TEstadoDePedidoDeVenta(FEstadoDePedidoDeVenta);
end;

function TPedidoDeVenta.GetEstadoDePedidoDeVentaID: TObjectID;
begin
  if (FEstadoDePedidoDeVentaID = NullID) then
    FEstadoDePedidoDeVentaID := Aplicacion.EstadoPedidoBorradorID;
  Result := FEstadoDePedidoDeVentaID;
end;

function TPedidoDeVenta.GetEstadoDePedidoNuevo: TEstadoDePedidoDeVenta;
begin
  if not assigned(FEstadoDePedidoNuevo) then
    GetObject(TEstadoDePedidoDeVenta, FEstadoDePedidoNuevo, EstadoDePedidoNuevoID);
  Result := TEstadoDePedidoDeVenta(FEstadoDePedidoNuevo);
end;

function TPedidoDeVenta.GetEstadosDeMigracion: TPedidoDeVentaEstadoDeMigracionList;
begin
  if FEstadosDeMigracion = nil then
    GetLIst(TPDlist(FEstadosDeMigracion),TPDlist(TPedidoDeVentaEstadoDeMigracionList.CreateByPedidoDeVenta(Self)));
  Result := FEstadosDeMigracion;
end;

function TPedidoDeVenta.GetEsTaller: TBoolean;
begin
  if IsAssigned and (FEsTaller = null) and (FClienteId <> Nullid) and (FMarcaId <> Nullid) and cliente.Marcas.FindMarca( Marca ) then
    FEsTaller := Not Cliente.Marcas.Actual.esMarcaPropia
  else
    begin
      Result := False;
      exit;
    end;
  Result := FEsTaller;
end;

function TPedidoDeVenta.GetFechaDeAlta: TFecha;
begin
  if (FFechaDeAlta = Null) then
    FFechaDeAlta := Aplicacion.DateTimeService.FechaActual;
  Result := FFechaDeAlta;
end;

function TPedidoDeVenta.GetFechaDeEstadoDePedidoDeVenta: TFechaHora;
begin
  if (FFechaDeEstadoDePedidoDeVenta = Null) then
    if (StateLogs.Count = 0) then
      FFechaDeEstadoDePedidoDeVenta := FFechaReal
    else
      begin
        StateLogs.Last;
        FFechaDeEstadoDePedidoDeVenta := StateLogs.Actual.FechaHora;
      end;
  Result := FFechaDeEstadoDePedidoDeVenta;
end;

function TPedidoDeVenta.GetFechaHoraListoExpedicion: TFechaHora;
var
  SP : TStoreProcedure;
  PFL : TPasoDeFabricacionList;
begin
  if (FFechaHoraListoExpedicion = Null) or (FFechaHoraListoExpedicion = 0) then
    begin
      try
        SP := TStoreProcedure.Create( Aplicacion.Database );
        SP.StoredProcName     := Aplicacion.ParametrosDelSistema.StoredProc_PedidoDeVenta_FechaHoraListoExpedicion;
        SP.Prepare;
        PFL := TPasoDeFabricacionList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionExpedicion, True);
        if (PFL.Count = 0) then
          Aplicacion.raiseExceptionCreate( 'No se encontró o no está activo el paso de fabricación: ' + Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionExpedicion );
        PFL.First;
        SP.Params[1].AsString := IntToStr(PFL.Actual.ID);
        SP.Params[2].AsString := IntToStr(Numero);
        SP.ExecProc;
        FFechaHoraListoExpedicion := SP.FieldByName(THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso).Value;
      finally
        SP.Active  := False;
        FreeAndNil( SP );
        FreeAndNil( PFL );
      end;
    end;
  Result := FFechaHoraListoExpedicion;
end;

function TPedidoDeVenta.GetFechaPrimerFactura: TFecha;
begin
  if (FFechaPrimerFactura = Null) then
    FFechaPrimerFactura := ObtenerFechaFactura( Self, False );
  Result := FFechaPrimerFactura;
end;

function TPedidoDeVenta.GetFechaUltimaFactura: TFecha;
begin
  if (FFechaUltimaFactura = Null) then
    FFechaUltimaFactura := ObtenerFechaFactura( Self, True );
  Result := FFechaUltimaFactura;
end;

procedure TPedidoDeVenta.SetEmpresaFleteID(Value: TObjectID);
begin
  if (Value <> FEmpresaFleteID) and assigned(FEmpresaFlete) then
    FreeAndNil(FEmpresaFlete);
  FEmpresaFleteID := Value;
end;

procedure TPedidoDeVenta.SetEstadoDePedidoDeVentaID(const Value: TObjectID);
  Function ObtenerEstadoConfirmadoID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := NullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de confirmado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

  Function ObtenerEstadoEnProduccionID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := NullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado En producción en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

  Function ObtenerEstadoARevisarPorClienteID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := NullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_ARevPorCliente, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado En producción en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

begin
  if (Value <> FEstadoDePedidoDeVentaID) then
    begin
      If assigned(FEstadoDePedidoDeVenta) then
        FreeAndNil(FEstadoDePedidoDeVenta);

      fCCEstadoDePedidoDeVentaCodigo      := Null;
      fCCEstadoDePedidoDeVentaDescripcion := Null;
      FObservaciondeEstado := null;
      FFechaDeEstadoDePedidoDeVenta := Aplicacion.DateTimeService.FechaHoraActual;
    end;

  esCambioDeEstado         := (Value <> FEstadoOriginalID);
  MailPendiente            := ((FechaEnvioMail = Null) or (FechaEnvioMail = 0)
                               and (FechaCancelacionEnvioMail = Null) or (FechaCancelacionEnvioMail = 0) ) and
                              ( Value = ObtenerEstadoEnProduccionID) and
                              ( TipoDePedidoDeVenta.EnviarConfirmacionCliente or
                              TipoDePedidoDeVenta.EnviarConfirmacionUsuario or
                              TipoDePedidoDeVenta.EnviarConfirmacionVendedor );

  fProformaPendiente       := (Value = ObtenerEstadoARevisarPorClienteID) and ( TipoDePedidoDeVenta.EnviarAvisoRecepcionCliente or TipoDePedidoDeVenta.EnviarAvisoRecepcionUsuario or TipoDePedidoDeVenta.EnviarAvisoRecepcionVendedor);

  FEstadoDePedidoDeVentaID := Value;

  // Esto lo hago para cambiar de estado a los items
  // siempre despues de   FEstadoDePedidoDeVentaID := Value;
  // salvo en casos como pasar a produccion donde primero se cambian los items y despues el pedido ( "en Produccion" o "en Produccion Parcial")
  // donde debe setearse "DebeCambiarEstadoAItems := False"
  ColocarEstado;
  DebeCambiarEstadoAItems := True;
end;

procedure TPedidoDeVenta.SetEstadoDePedidoNuevoID(const Value: TObjectID);
begin
  if (Value <> FEstadoDePedidoNuevoID) and assigned(FEstadoDePedidoNuevo) then
    FreeAndNil(FEstadoDePedidoNuevo);

  FEstadoDePedidoNuevoID := Value;
end;

procedure TPedidoDeVenta.SetEstadoNuevoID(const Value: TObjectID);
begin
  FEstadoNuevoID := Value;
end;

function TPedidoDeVenta.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, GrupoDeVendedorID);

  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TPedidoDeVenta.GetGrupoVendedorTribeca: TGrupoDeVendedor;
begin
  if not assigned(FGrupoVendedorTribeca) then
    GetObject(TGrupoDeVendedor, FGrupoVendedorTribeca,   FGrupoVendedorTribecaID);

  Result := TGrupoDeVendedor(FGrupoVendedorTribeca);
end;

procedure TPedidoDeVenta.SetGrupoDeVendedorID(Value: TObjectID);
begin
  if (Value <> FGrupoDeVendedorID) then
    begin
      if assigned(FGrupoDeVendedor) then
        FreeAndNil(FGrupoDeVendedor);
      fCCGrupoDeVendedorDescripcion := Null;
    end;
  FGrupoDeVendedorID := Value;
end;

procedure TPedidoDeVenta.SetGrupoVendedorTribecaID(const Value: TObjectID);
begin
  if (Value <> FGrupoVendedorTribecaID) then
    begin
      if assigned(FGrupoVendedorTribeca) then
        FreeAndNil(FGrupoVendedorTribeca);
      FCCGrupoDeVendedorTribeca := Null;
    end;

  FGrupoVendedorTribecaID := Value;
end;

procedure TPedidoDeVenta.SetImporteDelPedidoConIVA(const Value: TReal);
begin
  FImporteDelPedidoConIVA := Aplicacion.MathService.Redondear(Value, 2);
end;

procedure TPedidoDeVenta.SetImporteNetoDelPedido(const Value: TReal);
begin
  FImporteNetoDelPedido              := Aplicacion.MathService.Redondear(Value, 2);
  FImporteDelPedidoConIVA            := Null;
  FImporteNetoDelPedidoPrecioDeLista := NUll;
end;

procedure TPedidoDeVenta.SetImporteNetoDelPedidoPrecioDeLista(const Value: TReal);
begin
  FImporteNetoDelPedidoPrecioDeLista := Aplicacion.MathService.Redondear(Value, 2);;
end;

procedure TPedidoDeVenta.SetIncotermID(const Value: TObjectID);
begin
  if (Value <> FIncotermID) and assigned(FIncoterm) then
    FreeAndNil(FIncoterm);

  FIncotermID := Value;
end;

procedure TPedidoDeVenta.SetListaDePrecioID(const Value: TObjectID);
begin
  if (Value <> FListaDePrecioID) and assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  FListaDePrecioID := Value;
end;

function TPedidoDeVenta.GetMarca: TMarca;
begin
  if not assigned(FMarca) then
    GetObject(TMarca, FMarca, MarcaID);

  Result := TMarca(FMarca);
end;

procedure TPedidoDeVenta.SetMarcaID(Value: TObjectID);
begin
  if (Value <> FMarcaID) then
    begin
      If assigned(FMarca) then
        begin
          FreeAndNil(FMarca);
          FesTaller := Null;
        end;
    end;
  FMarcaID := Value;
end;

function TPedidoDeVenta.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);

  Result := TMoneda(FMoneda);
end;

function TPedidoDeVenta.GetObservaciondeEstado: TString;
begin
  if (FObservaciondeEstado = Null) then
    If StateLogs.count > 0 then
      Begin
        StateLogs.Last;
        If StateLogs.Actual.Observacion = Null then
          FObservaciondeEstado := ''
        else
          FObservaciondeEstado := StateLogs.Actual.Observacion;
      End
    else
      FObservaciondeEstado := '';

  Result := FObservaciondeEstado;
end;

function TPedidoDeVenta.getPresupuestoDeVenta: TPresupuestoDeVenta;
begin
  if not assigned(FPresupuestoDeVenta) and (FPresupuestoDeVentaID <> NullID) then
    GetObject(TPresupuestoDeVenta, FPresupuestoDeVenta,FPresupuestoDeVentaID);
  Result := TPresupuestoDeVenta(FPresupuestoDeVenta);
end;

function TPedidoDeVenta.GetStateLogs: TPedidoDeVentaStateLogList;
begin
  if not assigned(FStateLogs) then
    GetList(TPDList(FStateLogs),TPDList(TPedidoDeVentaStateLogList.CreateByPedidoDeVenta(Self)));
  Result := FStateLogs;
end;


procedure TPedidoDeVenta.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) then
    begin
      IF assigned(FMoneda) then
        FreeAndNil(FMoneda);
      fCCMonedaCodigo      := Null;
      fCCMonedaDescripcion := Null;
    end;
  FMonedaID := Value;
end;

procedure TPedidoDeVenta.SetNumero(const Value: TEntero);
begin
  if FNumero <> Value then
    FNumeroFinal := Null;
  FNumero := Value;
end;

function TPedidoDeVenta.TieneHojasDeRutaActivas: Boolean;
var
  PosID : Integer;
begin
  Result := False;
  if Items.Count=0 then
    exit;

  PosID := Items.Actual.ID;
  Try
    Items.First;
    while Not Result and not Items.IsLast do
      begin
        Result := not Items.Actual.LasHojasDeRutaEstanCanceladas;
        Items.Next;
      end;
  Finally
    Items.Find( PosID );
  End;
end;

function TPedidoDeVenta.TieneHojasDeRutaEnFabricacion: Boolean;
var
  posID : Integer;
begin
  Result := False;
  if Items.Count=0 then
    exit;

  PosID := Items.Actual.ID;
  Try
    Items.First;
    while Not Result and not items.IsLast do
      begin
        Result := Items.Actual.TieneHojasDeRutaEnFabricacion;
        Items.Next;
      end;
  Finally
    Items.Find( PosID );
  End;
end;


procedure TPedidoDeVenta.SetPorcentajeDeTolerancia(const Value: TReal);
begin
  if (Value < 0) Or (Value > 100) then
    Aplicacion.raiseExceptionCreate('El porcentaje debe estar entre 0 y 100');
  FPorcentajeDeTolerancia := Value;
end;

procedure TPedidoDeVenta.SetPresupuestoDeVentaID(const Value: TObjectID);
begin
  if (Value <> FPresupuestoDeVentaID) and assigned(FPresupuestoDeVenta) then
    FreeAndNil(FPresupuestoDeVenta);
  FPresupuestoDeVentaID := Value;
end;


function TPedidoDeVenta.getTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, tipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

function TPedidoDeVenta.GetTipoDeFormularioFacturacion: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormularioFacturacion) then
    GetObject(TTipoDeFormulario,FTipoDeFormularioFacturacion, TipoDeFormularioFacturacionID);
  result := TTipoDeFormulario(FTipoDeFormularioFacturacion);
end;

function TPedidoDeVenta.GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
begin
  if not assigned(FTipoDePedidoDeVenta) then
    GetObject(TTipoDePedidoDeVenta, FTipoDePedidoDeVenta,TipoDePedidoDeVentaID);
  Result := TTipoDePedidoDeVenta(FTipoDePedidoDeVenta);
end;

function TPedidoDeVenta.GetUnidadesPorKit: TEntero;
begin
  if (FUnidadesPorKit = 0) and ( TipoDePedidoDeVentaID <> NullID ) and ( TipoDePedidoDeVenta.EsParaKit ) then
    FUnidadesPorKit := TipoDePedidoDeVenta.UnidadesPorKitDefault;
  Result := FUnidadesPorKit;
end;

function TPedidoDeVenta.GetUsuarioDeAlta: TUsuario;
begin
  if not assigned(FUsuarioDeAlta) then
    GetObject(TUsuario, FUsuarioDeAlta, UsuarioDeAltaID);
  Result := TUsuario(FUsuarioDeAlta);
end;

function TPedidoDeVenta.GetUsuarioDeAltaID: TObjectID;
begin
  if (fUsuarioDeAltaID = -9999 ) then
    fUsuarioDeAltaID := Aplicacion.Usuario.ID;
  Result := fUsuarioDeAltaID;
end;


procedure TPedidoDeVenta.AsignoNumeroDePedidoDeVenta;
Var
  PL: TPedidoDeVentaList;
Begin
  if (Fnumero = 0) then
    try
      PL := TPedidoDeVentaList.CreateMaximoNumero(CentroDeFacturacion);
      If PL.count = 0 Then
        numero := 1
      else
        numero := PL.Actual.numero + 1;
    finally
      FreeAndNil(PL);
    end;
end;

function TPedidoDeVenta.Grabar: Boolean;
  function ValidaItems: boolean;
  Var
    EPVIL    : TEstadoDePedidoDeVentaItemList;
    noValida : Boolean;
    epCod: String;
  begin
    Result   := False;
    noValida := false;
    try
      if EstadoDePedidoNuevoID <> NullID then
        epCod := EstadoDePedidoNuevo.codigo
      else
        epCod := EstadoDePedidoDeVenta.codigo;

      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( epCod, False );
      if (EPVIL.count=0) then
        Raise Exception.Create('No se encontró el Estado de Pedido de Venta Items: '+ epCod );

      EPVIL.first;
      PendienteDeFacturar := True;
      Items.First;
      repeat
        if Items.Actual.CantidadPedida = 0 then
          begin
            aplicacion.Mensaje( 'El ítem ' + IntToStr(Items.Actual.itemNro) + ' tiene cantidad = 0','Validación', MB_OK  );
            exit;
          end;
        try
          noValida := True;
          Items.Actual.ValidarFechas;
          noValida := false;
        except
          on e: Exception do
           if (e.classtype <> eAbort) then
              Aplicacion.Mensaje( e.Message, 'Validación', MB_OK );
        end;
        if noValida then
          exit;

        if (Items.Actual.EstadoID = NullID) then
          Try
            noValida := True;
            Items.Actual.cambiarEstado( EPVIL.Actual );
            Items.Actual.esCambioDeEstado := True;
            Items.Actual.Save;
            noValida := False;
          except
            on e: Exception do
              if (e.classtype <> eAbort) then
                Aplicacion.Mensaje( e.Message, 'Validación', MB_OK );
          end;
        if noValida then
          exit;
        if PendienteDeFacturar then
          PendienteDeFacturar := Items.Actual.PendienteDeFacturar;
        Items.Next;
      until Items.IsLast;
      Result := True;
    finally
      Items.First;
      FreeAndNil( EPVIL);
    end;
  end;
begin
  Result := False;
  if not esCambioDeEstado then
    begin
      asignarEsExclusivoServicios;
      FSeFacturaSinRemito := EsExclusivoServicios and TipoDePedidoDeVenta.EsParaNota;

      if EsNuevo then
        ColocarEstadoCorrespondiente;

      if (Items.count = 0) then
        begin
          aplicacion.Mensaje('Debe ingresar al menos un ítem en el pedido','Validación', MB_OK  );
          Result := False;
          exit;
        end
      else
        if not ValidaItems then
          begin
            Result := False;
            exit;
          end;
    end;

  AsignoNumeroDePedidoDeVenta;
  try
    Result := inherited Save; // no ir al save de la clase otra vez
  finally
    if not Result then
      Fnumero := 0;
  end;
end;

procedure TPedidoDeVenta.LimpiarItemsDeMemoria;
begin
  If not assigned(FItems) Then
    FreeAndNil(FItems);
end;

function TPedidoDeVenta.ListoParaEntregar(_PasoDeFabricacion: TPasoDeFabricacion): Boolean;
begin
  Result := True;
  Items.First;
  while not Items.IsLast do
    begin
      if ( not Items.Actual.LasHojasDeRutaEstanEn(_PasoDeFabricacion) ) then
        begin
          Result := False;
          exit;
        end;
      Items.Next;
    end;
end;

Class function TPedidoDeVenta.ObtenerFechaFactura( _PV: TPedidoDeVenta; _DevolverUltimaFactura: Boolean ): TDateTime;
const
  _CodigoInternoEmpresaAPH = '2'; // APH
  _CodigoInternoEmpresaTRI = '3'; // TRI
var
//  FL : TFacturaList;
  FF : TDateTime;
begin
  Result := 0;

  // Primero busca facturas hechas en Sifab
  if Aplicacion.Sesion.ConexionSifab.SqlQuery.Active then
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  try
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := 'select fechaComprobante from comprobanteFacturacion where codigoInternoComprobanteFacturacion in ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + '( select DISTINCT codigoInternoComprobanteFacturacion from comprobanteFacturacionItem where codigoInternoPedido = ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + IntToStr( _PV.NumeroSifab);
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' ) and codigoInternoEmpresa = ' + _CodigoInternoEmpresaAPH + ' order by fechaComprobante';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Open;

    if (Aplicacion.Sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
    begin
      if _DevolverUltimaFactura then
        Aplicacion.Sesion.ConexionSifab.SqlQuery.Last
      else
        Aplicacion.Sesion.ConexionSifab.SqlQuery.First;
      Result := (Aplicacion.Sesion.ConexionSifab.SqlQuery.FieldByName('fechaComprobante').Value);
    end;
  finally
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  end;

// Se Buscan fechas en Aphosoft

  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  Try
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'select F.' + TFacturaDM._FechaDeImpresion  + ' as FeIMP from ' + TFacturaItemDM.TableName + ' FI';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TFacturaDM.TableName + ' F on F.' + TFacturaDM.ID_FieldName  + ' = FI.' +TFacturaItemDM._FacturaID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TEstadoDeFacturaDM.TableName + ' EF on EF.' + TEstadoDeFacturaDM.ID_FieldName  + ' = F.' +TFacturaDM._EstadoDeFacturaID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TPedidoDeVentaItemDM.TableName + ' PVI on PVI.' + TPedidoDeVentaItemDM.ID_FieldName  + ' = FI.' +TFacturaItemDM._PedidoDeVentaItemID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' where (EF.'  + TEstadoDeFacturaDM._Codigo + ' = ' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado)+' ) and (';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' PVI.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' = ' +  IntToStr(_PV.ID) +')';
    Aplicacion.Sesion.SqlQuery.Open;
    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        if _DevolverUltimaFactura then
          begin
            Aplicacion.Sesion.SqlQuery.Last;
            Aplicacion.Sesion.SqlQuery.Prior;
          end
        else
          Aplicacion.Sesion.SqlQuery.First;

        FF := Aplicacion.Sesion.SqlQuery.FieldByName( 'FeIMP' ).Value;
        if ( FF > 0 ) then
          begin
            if (_DevolverUltimaFactura) and ( FF > Result ) then
              Result := FF;
            if (not _DevolverUltimaFactura) and (( FF < Result ) or (Result =0)) then
              Result := FF;
          end;
      end;
  Finally
    Aplicacion.Sesion.SqlQuery.Close;
  End;

// se busca fecha en Teamplace
  FF := ObtenerFechaFacturaTeamPlace(_PV, _DevolverUltimaFactura);
  if ( FF > 0 ) then
    begin
      if (_DevolverUltimaFactura) and ( FF > Result ) then
        Result := FF;
      if (not _DevolverUltimaFactura) and (( FF < Result ) or (Result =0)) then
        Result := FF;
    end;
end;

class function TPedidoDeVenta.ObtenerFechaFacturaTeamplace(_PV: TPedidoDeVenta; _DevolverUltimaFactura: Boolean): TDateTime;
var
  RL : TRemitoList;
begin
  Result := 0;

  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  try
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'select R.' + TRemitoDM.ID_FieldName  + ' as RID from ' + TRemitoItemDM.TableName + ' RI';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TRemitoDM.TableName + ' R on R.' + TRemitoDM.ID_FieldName  + ' = RI.' +TRemitoItemDM._RemitoID;
//    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TEstadoDeRemitoDM.TableName + ' ER on ER.' + TEstadoDeRemitoDM.ID_FieldName  + ' = R.' +TRemitoDM._EstadoDeRemitoID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TPedidoDeVentaItemDM.TableName + ' PVI on PVI.' + TPedidoDeVentaItemDM.ID_FieldName  + ' = RI.' +TRemitoItemDM._PedidoDeVentaItemID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' Left join ' + TPedidoDeVentaDM.TableName + ' PV on PV.' + TPedidoDeVentaDM.ID_FieldName  + ' = PVI.' +TPedidoDeVentaItemDM._PedidoDeVentaID;
//    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' where (ER.'  + TEstadoDeRemitoDM._EsEstadoFacturado + ' = 1) and (';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' where ( PV.' + TPedidoDeVentaDM.ID_FieldName + ' = ' +  IntToStr(_PV.ID) +')';
    Aplicacion.Sesion.SqlQuery.Open;
    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        if _DevolverUltimaFactura then
          begin
            Aplicacion.Sesion.SqlQuery.Last;
            Aplicacion.Sesion.SqlQuery.Prior;
          end
        else
          Aplicacion.Sesion.SqlQuery.First;

        try
          RL := TRemitoList.CreateByID( Aplicacion.Sesion.SqlQuery.FieldByName( 'RID' ).AsInteger );
          RL.First;
          Result := RL.Actual.FechaDeFacturaTeamplace;
        finally
          FreeAndNil(RL);
        end;
      end;
  finally
    Aplicacion.Sesion.SqlQuery.Close;
  end;
end;

function TPedidoDeVenta.PrepararyEnviarMail(_FileName: String; _TipoDeMail: String ): Boolean;
var
  Mail: Tmail;
begin
  if not IsAssigned then
    Aplicacion.raiseExceptionCreate(  'No puede enviarse el mail de un pedido no guardado.');

  try
    Result := False;
    Mail := TMail.Create;
    asignarAsuntoYMensaje( Mail, tipoDeFormulario );
    agregarContactosDeEmpresa( Mail, TipoDePedidoDeVenta, _TipoDeMail );
    agregarVendedor( Mail, TipoDePedidoDeVenta, _TipoDeMail );
    agregarUsuarioDeCarga( Mail, TipoDePedidoDeVenta, _TipoDeMail );

    if (TipoDePedidoDeVenta.EMailA > '') then
      agregarDireccion(TipoDePedidoDeVenta.EMailA, Mail);

    Mail.ReplyTo.Add(lowercase(UsuarioDeAlta.email));
    if (Mail.ToRecipients.count > 0) or (Mail.CCRecipients.count > 0) or (Mail.CCoRecipients.count > 0) then
      begin
        if FileExists(_FileName) then
          Mail.Attachments.Add(_FileName);

        if tipoDeFormulario.EmailBodyEsHtml then
          Result := Mail.SendHtmlBySMTP
        else
          Result := Mail.SendBySMTP;
      end;

  finally
    FreeAndNil(Mail);
  end;
end;

function TPedidoDeVenta.PrepararyEnviarMailHtml(_TipoDeFormulario: TTipoDeFormulario; _TipoDeMail: String): Boolean;
var
  Mail: Tmail;
  CodigoIdioma : String;
  CambiarColor, EsParaKit : Boolean;
  TF : TTipoDeFormulario;

  Procedure ReemplazarStrings(var S : String);
  begin
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_fechapedido')          , DateToStr(FechaReal));
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_numeropedido')         , NumeroFinal);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_tipodepedidocodigo')   , TipoDePedidoDeVenta.codigo);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_cliente')              , Cliente.codigo +' - ' + Cliente.Descripcion );
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_cuit')                 , Cliente.CUIT);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_direccioncliente')     , Cliente.Domicilio);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_localidad')            , Cliente.Localidad.DescripcionConProvinciaYPais);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_grupovendedor')        , GrupoDeVendedor.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_marca')                , Marca.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_ordendecompra')        , NroOrdenDeCompraCliente);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_tipodepedido')         , TipoDePedidoDeVenta.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_moneda')               , Moneda.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_condiciondeventa')     , CondicionDeVenta.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_direcciondeentrega')   , DireccionDeEntrega.DireccionCompleta);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_fechasolicitada')      , DateToStr(FechaReal));//aca me parece que va un getter
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_flete')                , EmpresaFlete.Descripcion);
  end;

  Procedure ReemplazarStringsItems( var S : String ; _CambiarColor : Boolean);
  begin

    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_imagenarticulo')       , Items.Actual.Producto.Fabricado.Articulo.ArchivoDeImagenWeb);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_imagenterminacion')    , Items.Actual.Producto.Fabricado.Terminacion.ArchivoDeImagenWeb);
    if (Items.Actual.Producto.Fabricado.desarrolloID = NullID) then
      S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_imagencunio')        , Items.Actual.Producto.Fabricado.Cunio.ArchivoDeImagenWeb)
    else
      S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_imagencunio')        , Items.Actual.Producto.Fabricado.desarrollo.ArchivoDeImagenWeb);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_codigoproducto')       , Items.Actual.Producto.codigo);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_descripcionproducto')  , Items.Actual.Producto.Descripcion);
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_cantidad')             , FloatToStr(Items.Actual.CantidadPedida));

    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_preciounitario')       , '$' +FloatToStrF(Items.Actual.PrecioDeVenta,ffNumber, 10, 3));
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_preciototal')          , '$' +FloatToStrF(Items.Actual.ImporteTotal ,ffNumber, 10, 2));
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_itemnro')              , IntToStr(Items.Actual.itemNro));

    if (Items.Actual.FechaEntregaProduccion = Null) or (Items.Actual.FechaEntregaProduccion = 0) then
      Aplicacion.RaiseExceptionCreate('Fecha incorrecta. Pedido/Item: ' + IntToStr( Numero ) + '/'+ IntToStr(Items.Actual.ItemNro));
    S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_fechaestimada')        , DateToStr(Items.Actual.FechaEntregaProduccion));

    if Items.Actual.EntregaTotal then
      S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_envioparcial')       , Aplicacion.Sesion.ResourceAllocator.Traducir('no',Cliente.Localidad.pais.ResourceLanguagePais) )
    else
      S :=   Aplicacion.TextService.ReemplazarEn(S,LowerCase('_envioparcial')       , Aplicacion.Sesion.ResourceAllocator.Traducir('si',Cliente.Localidad.pais.ResourceLanguagePais) );

    if _CambiarColor then
      S := Aplicacion.TextService.ReemplazarEn(S,'_background', 'background:#ECE9E9')
    else
      S := Aplicacion.TextService.ReemplazarEn(S,'_background', 'background:transparent');
  end;

  Procedure AgregarArchivoHtml( _Archivo : String ; _CambiarDatos : Boolean ; _Items : Boolean = False ; _CambiarColor : Boolean = False );
  var
    TxtF : TextFile;
    LineaF : String;
  begin
    try
      AssignFile( TxtF, _Archivo );
      Reset(TxtF);
      while not Eof( TxtF ) do
        begin
          ReadLn( TxtF, LineaF );
          if _CambiarDatos then
            if not _Items then
              ReemplazarStrings(LineaF)
            else
              ReemplazarStringsItems(LineaF,_CambiarColor);
          Mail.Body.Add(LineaF);
        end;
      if not _Items then
        Mail.Body.Add('<br>');
    finally
      CloseFile(TxtF);
    end;
  end;
begin
  if not IsAssigned then
    Aplicacion.raiseExceptionCreate('No puede enviarse el mail de un pedido no guardado.');
  try
    Result := False;
    Mail := TMail.Create;

    if not Assigned(_TipoDeFormulario) then
      TF := Self.TipoDeFormulario
    else
      TF := _TipoDeFormulario;

    if (TF.EmailSubject > '') then
      Mail.Subject := Aplicacion.Sesion.ResourceAllocator.Traducir(TF.EmailSubject,Cliente.Localidad.pais.ResourceLanguagePais) + ' ' + IntToStr(Numero)
    else
      Mail.Subject := Aplicacion.Sesion.ResourceAllocator.Traducir('Pedido de venta',Cliente.Localidad.pais.ResourceLanguagePais) + ': ' + IntToStr(numero);

    CodigoIdioma := Cliente.Localidad.pais.ResourceLanguagePais.codigo;
    EsParaKit    := TipoDePedidoDeVenta.EsParaKit;

    if TF.EmailItems.FindCodigoIdiomaAndEsParaKit(CodigoIdioma, EsParaKit) and TF.EmailEncabezados.FindCodigoIdioma(CodigoIdioma) and
     TF.EmailCuerpos.FindCodigoIdioma(CodigoIdioma) and TF.EmailFirmas.FindCodigoIdioma(CodigoIdioma) then
    begin
      // mtfPlainText = 0
      // mtfRTF       = 1
      // mtfHTML      = 2

      Mail.MessageFormat := 2;

      if FileExists(TF.EmailCuerpos.Actual.RutaDeArchivo) then
        AgregarArchivoHtml(TF.EmailCuerpos.Actual.RutaDeArchivo,False);//cuerpo

      if FileExists(TF.EmailEncabezados.Actual.RutaDeArchivo) then
        AgregarArchivoHtml(TF.EmailEncabezados.Actual.RutaDeArchivo,True);//encabezado del pedido

      Items.First;
      CambiarColor := True;

      if FileExists(TF.EmailItems.Actual.RutaDeArchivo) then
        begin
          while not Items.IsLast do
            begin
//              aca tengo que preguntar si es kit
//              if TF.es then
              AgregarArchivoHtml(TF.EmailItems.Actual.RutaDeArchivo,True,True,CambiarColor);
              Items.Next;
              CambiarColor := Not CambiarColor;
            end;
        end;

      if FileExists(TF.EmailFirmas.Actual.RutaDeArchivo) then
        AgregarArchivoHtml(TF.EmailFirmas.Actual.RutaDeArchivo,False);      //firma al final del email (pedido por eleonora)
    end;

    AgregarContactosDeEmpresa(Mail, TipoDePedidoDeVenta, _TipoDeMail );
    AgregarVendedor(Mail, TipoDePedidoDeVenta, _TipoDeMail );
    AgregarUsuarioDeCarga(Mail, TipoDePedidoDeVenta, _TipoDeMail );
    if (TipoDePedidoDeVenta.EMailA > '') then
      AgregarDireccion(TipoDePedidoDeVenta.EMailA, Mail);

    Mail.ReplyTo.Add(LowerCase(UsuarioDeAlta.Email));

    if (Mail.ToRecipients.count > 0) or (Mail.CCRecipients.count > 0) or (Mail.CCoRecipients.count > 0) then
      Result := Mail.SendHtmlBySMTP
  finally
    FreeAndNil(Mail);
    TF.NilObject;
  end;
end;

class procedure TPedidoDeVenta.ActualizarEstados(_PVL: TPedidoDeVentaList ; _MuestraDialog : Boolean);
var
  ItemsCumplidos, ItemsFacturados, ItemsCancelados, ItemsEntregados, ItemsPreparados, ItemsAsignados, ItemsEnProduccion, ItemsConfirmados : Integer;
  dlg: T_FrmDialogsService;

  procedure ActualizoEstadoDelItem(_PVI : TPedidoDeVentaItem);
  var
    EPVIL : TEstadoDePedidoDeVentaItemList;
  begin
    if (_PVI.CantidadCancelada = _PVI.CantidadPedida) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsCancelados);
      end
    else If (_PVI.CantidadPendiente = 0) then
      begin
        if not (_PVI.Estado.EsEstadoDeItemCumplido) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsCumplidos);
      end
    else If (_PVI.CantidadFacturada > 0 ) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsFacturados);
      end
    else If (_PVI.CantidadEntregada > 0 ) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Enviado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Enviado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsEntregados);
      end
    else If (_PVI.CantidadPreparada > 0 ) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Preparado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Preparado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsPreparados);
      end
    else If (_PVI.CantidadAsignada > 0 ) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Asignado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.createByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Asignado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsAsignados);
      end
    else if (_PVI.CantidadPendiente > 0 ) and (_PVI.HojasDeRuta.Count > 0) and (_PVI.LasHojasDeRutaEstanProgramadas) then
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsEnProduccion);
      end
    else
      begin
        if (_PVI.Estado.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
          try
            EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado ) ;
            _PVI.EstadoID := EPVIL.actual.ID;
            _PVI.Save;
          finally
            FreeAndNil( EPVIL);
          end;
        Inc(ItemsConfirmados);
      end;
  end;

  Function ActualizoEstadodelPedido ( _PV : TPedidoDeVenta ) : Boolean;
  var
    EPVL : TEstadoDePedidoDeVentaList;
  begin
    Result := False;
    if ItemsCancelados = _PV.Items.Count then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            FreeAndNil( EPVL );
          end
      end
    else if ((ItemsCumplidos + ItemsCancelados) = _PV.Items.Count) then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido) then
          try
            EPVL := TEstadoDePedidoDeVentaList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if ItemsFacturados > 0 then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.createByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if ItemsEntregados > 0 then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Enviado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.createByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Enviado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if ItemsPreparados > 0 then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Preparado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.createByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Preparado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if ItemsAsignados > 0 then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Asignado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.createByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Asignado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if (ItemsEnProduccion = _PV.Items.Count)then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion) then
          try
            EPVL := TEstadoDePedidoDeVentaList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if (ItemsEnProduccion > 0) and (ItemsConfirmados > 0) then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccionParcial) then
          try
            EPVL := TEstadoDePedidoDeVentaList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccionParcial ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end
      end
    else if (ItemsConfirmados = _PV.Items.Count) then
      begin
        if (_PV.EstadoDePedidoDeVenta.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
          try
            EPVL := TEstadoDePedidoDeVentaList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado ) ;
            if _PV.EstadoDePedidoDeVentaID <> EPVL.actual.ID then
              _PV.EstadoDePedidoDeVentaID := EPVL.actual.ID;
            Result := True;
          finally
            freeAndNil( EPVL );
          end;
      end;
  end;
begin
  try
    if _MuestraDialog then
      Aplicacion.DialogsService.CrearDialogo(dlg, 'Actualizando Estados ...', TAviComunes.Check);
    _PVL.first;
    while Not _PVL.islast do
      begin
        _PVL.actual.Items.first;
        ItemsCumplidos    := 0;
        ItemsFacturados   := 0;
        ItemsCancelados   := 0;
        ItemsEntregados   := 0;
        ItemsPreparados   := 0;
        ItemsAsignados    := 0;
        ItemsEnProduccion := 0;
        while not _PVL.actual.Items.islast do
          begin
            if _MuestraDialog then
              Begin
                dlg.MensajeInferior := DateToStr( _PVL.actual.FechaReal) + ' ' + IntToStr(_PVL.actual.Numero) + '/' + IntToStr( _PVL.actual.Items.actual.ItemNro) ;
                Application.ProcessMessages;
              End;
            _PVL.actual.Items.actual.EsCambioDeEstado := True;
            ActualizoEstadoDelItem(_PVL.Actual.Items.Actual);
            if _PVL.actual.Items.actual.Modified then
              _PVL.actual.Items.ApplyUpdates;
            _PVL.actual.Items.Next;
          end;
        _PVL.actual.EsImportacionDeDatos := True;
        if ActualizoEstadodelPedido ( _PVL.Actual ) then
          begin
            _PVL.actual.Save;
            _PVL.ApplyUpdates;
          end;
        _PVL.next;
        Application.ProcessMessages;
      end;
  finally
    if _MuestraDialog then
      Aplicacion.DialogsService.CerrarDialogo(dlg);
  end;
end;

class procedure TPedidoDeVenta.ActualizarEstados(_P: TPedidoDeVenta; _MuestraDialog: Boolean);
var
  PVL : TPedidoDeVentaList;
begin
  try
    PVL := TPedidoDeVentaList.CreateByPedidoDeVenta(_P);
    TPedidoDeVenta.ActualizarEstados(PVL, _MuestraDialog);
  finally
    FreeAndNil(PVL);
  end;
end;

procedure TPedidoDeVenta.agregarContactosDeEmpresa(var _Mail: Tmail; _TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string);
var
  SeAgregoContacto : Boolean;
begin
  SeAgregoContacto := False;
  if (( ( _Tipo = 'PEDIDO') and _TipoDePedido.EnviarConfirmacionCliente ) or ( ( _Tipo = 'PROFORMA') and _TipoDePedido.EnviarAvisoRecepcionCliente ) ) and (Cliente.contactosDeEmpresa.count > 0) then
    begin
      Cliente.contactosDeEmpresa.First;
      while not Cliente.contactosDeEmpresa.IsLast do
        begin
          if not Cliente.contactosDeEmpresa.Actual.EsInactivo and (Cliente.contactosDeEmpresa.Actual.email > '') and
                (Cliente.contactosDeEmpresa.Actual.CargoDeEmpresa.Items.FindFormularioCodigo(_TipoDePedido.TipoDeFormulario.Formulario.codigo)) then // acá dejo el foermulario de pedidos
            begin
              _Mail.ToRecipients.Add(lowercase(Cliente.contactosDeEmpresa.Actual.email));
              seAgregoContacto := True;
            end;
          Cliente.contactosDeEmpresa.Next;
        end;
    end;

  if not seAgregoContacto then
    begin
      if _TipoDePedido.TipoDeFormulario.EmailBodyEsHtml then
         _Mail.Body.Text := _Mail.Body.Text + _TipoDePedido.TipoDeFormulario.PieImpresion // el pie debe ser html
       else
         _Mail.Body.Text := _Mail.Body.Text + #10#13 + #10#13 +'* COPIA NO ENVIADA A NINGUN CONTACTO DEL CLIENTE';
    end;
end;

procedure TPedidoDeVenta.agregarDireccion(_Direccion: string; var _Mail: Tmail);
var
  I, X: Integer;
  dire: String;
begin

  if (_Direccion > '') then
    begin
      X := Aplicacion.TextService.ContarSeparadosXComas(_Direccion, ';');
      for I := 1 to X do
        begin
          dire := Aplicacion.TextService.ObtenerSeparadosXComas(_Direccion,';', I);
          if (_Mail.ToRecipients.count = 0) and (_Mail.CCRecipients.count = 0) then
            _Mail.ToRecipients.Add(lowercase(dire))
          else
            _Mail.CCoRecipients.Add(lowercase(dire));
        end;
    end;
end;

procedure TPedidoDeVenta.agregarUsuarioDeCarga(var _Mail: Tmail;_TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string);
begin
  if (( (_Tipo = 'PEDIDO') and _TipoDePedido.EnviarConfirmacionUsuario ) or (( _Tipo = 'PROFORMA') and _TipoDePedido.EnviarAvisoRecepcionUsuario )) and (UsuarioDeAlta.email > '') then
    begin
      if (_Mail.ToRecipients.count = 0) and (_Mail.CCRecipients.count = 0) then
        _Mail.ToRecipients.Add(lowercase(UsuarioDeAlta.email))
      else
        _Mail.CCoRecipients.Add(lowercase(UsuarioDeAlta.email));
    end;
end;

procedure TPedidoDeVenta.agregarVendedor(var _Mail: Tmail;_TipoDePedido: TTipoDePedidoDeVenta; _Tipo: string);
var
  I, X: Integer;
  dire: String;
begin
  if (( (_Tipo = 'PEDIDO') and _TipoDePedido.EnviarConfirmacionVendedor ) or (( _Tipo = 'PROFORMA') and _TipoDePedido.EnviarAvisoRecepcionVendedor )) then
    begin
      GrupoDeVendedor.Items.First;
      while not GrupoDeVendedor.Items.IsLast do
        begin
          if (GrupoDeVendedor.Items.Actual.vendedor.email > '') then
            begin
              X := Aplicacion.TextService.ContarSeparadosXComas(GrupoDeVendedor.Items.Actual.vendedor.email, ';');
              for I := 1 to X do
                begin
                  dire := Aplicacion.TextService.ObtenerSeparadosXComas(GrupoDeVendedor.Items.Actual.vendedor.email, ';', I);
                  if (_Mail.ToRecipients.count = 0) then
                    _Mail.ToRecipients.Add(lowercase(dire))
                  else
                    _Mail.CCRecipients.Add(lowercase(dire));
                end;
          end;
        GrupoDeVendedor.Items.Next;
      end;
    end;
end;

Procedure TPedidoDeVenta.asignarAsuntoYMensaje(var _Mail: Tmail; _TipoDeFormulario: TTipoDeFormulario);
begin
  if (_TipoDeFormulario.EmailSubject > '') then
    _Mail.Subject := _TipoDeformulario.EmailSubject + ' ' + IntToStr(numero)
  else
    _Mail.Subject := 'Comprobante ' + IntToStr(numero);

  if (_TipoDeformulario.EmailBody > '') then
    begin
      // mtfPlainText = 0
      // mtfRTF       = 1
      // mtfHTML      = 2
      if _TipoDeFormulario.EmailBodyEsHtml then
        begin
          _Mail.MessageFormat := 1;
          _Mail.Body.Text := _TipoDeFormulario.EmailBody;
        end
      else
        begin
          _Mail.MessageFormat := 0;
          _Mail.Body.Text := AnsiReplaceStr(_TipoDeFormulario.EmailBody,'\', #10#13);
          _Mail.Body.Text := AnsiReplaceStr(_Mail.Body.Text,'#', DateToStr( FechaReal ));
        end;
    end
  else
    _Mail.Body.Text := 'Se envía copia del pedido del asunto.' + #10#13 + #10#13 + 'Saludos cordiales.';
end;


//function TPedidoDeVenta.PrepararyEnviarProforma(_FileName: String; _TipoDeFormulario: TTipoDeFormulario): Boolean;
//var
//  Mail: Tmail;
//begin
//  if not IsAssigned then
//    Aplicacion.raiseExceptionCreate(  'No puede enviarse el mail de un pedido no guardado.');
//  try
//    Result := False;
//    Mail := TMail.Create;
//    asignarAsuntoYMensaje(Mail, _TipoDeFormulario);
//
//    agregarContactosDeEmpresa(Mail, TipoDePedidoDeVenta, 'PROFORMA' );
//    agregarVendedor( Mail, TipoDePedidoDeVenta, 'PROFORMA' );
//    agregarUsuarioDeCarga( Mail, TipoDePedidoDeVenta, 'PROFORMA');
//    if (_TipoDeFormulario.EnviarMailA > '') then
//      agregarDireccion(_TipoDeFormulario.EnviarMailA, Mail);
//    Mail.ReplyTo.Add(lowercase(UsuarioDeAlta.email));
//    if (Mail.ToRecipients.count > 0) or (Mail.CCRecipients.count > 0) or (Mail.CCoRecipients.count > 0) then
//      begin
//        if FileExists(_FileName) then
//          Mail.Attachments.Add(_FileName);
//        if _TipoDeFormulario.EmailBodyEsHtml then
//          Result := Mail.SendHtmlBySMTP
//        else
//          Result := Mail.SendBySMTP;
//      end;
//  finally
//    FreeAndNil(Mail);
//  end;
//end;

function TPedidoDeVenta.Reporte(_esParaMail: Boolean; _TipoDeFormulario: TTipoDeFormulario ): String;
var
  Foto: String;
  AcumuladoTotaldelPedido: TReal;

  frxReport                 : TfrxReport;
  frxDBDtstReporte          : TfrxDBDataset;
  frxDBDtstReporteItems     : TfrxDBDataset;
  Exportfilter              : TfrxCustomExportFilter;
  frxPDFExport              : TfrxPDFExport;
  frxRichObject             : TfrxRichObject;

  ClntDtStReporte           : TClientDataSet;
  ClntDtStReporteItems      : TClientDataSet;


  procedure cargarTitulos;
  begin
    if (Cliente.Localidad.pais.ResourceLanguagePais.codigo = 'ES') then
      if FileExists( _TipoDeFormulario.ArchivoFD3TitulosES ) then
        frxReport.Variables.LoadFromFile( _TipoDeFormulario.ArchivoFD3TitulosES )
      else
        raise Exception.Create('Falta el archivo ' + _TipoDeFormulario.ArchivoFD3TitulosES);

    if (Cliente.Localidad.Pais.ResourceLanguagePais.codigo = 'EN') then
      if FileExists( _TipoDeFormulario.ArchivoFD3TitulosEN ) then
        frxReport.Variables.LoadFromFile( _TipoDeFormulario.ArchivoFD3TitulosEN )
      else
        raise Exception.Create('Falta el archivo ' + _TipoDeFormulario.ArchivoFD3TitulosEN);

    if (Cliente.Localidad.pais.ResourceLanguagePais.codigo = 'PO') then
      if FileExists( _TipoDeFormulario.ArchivoFD3TitulosPO ) then
        frxReport.Variables.LoadFromFile( _TipoDeFormulario.ArchivoFD3TitulosPO )
      else
        raise Exception.Create('Falta el archivo ' + _TipoDeFormulario.ArchivoFD3TitulosPO);
  end;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile( _TipoDeFormulario.ArchivoXMLCamposEncabezado );
    ClntDtStReporte.Open;

    frxDBDtstReporte         := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name    := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;

    ClntDtStReporteItems := TClientDataSet.Create(nil);
    ClntDtStReporteItems.LoadFromFile( _TipoDeFormulario.ArchivoXMLCamposItems );
    ClntDtStReporteItems.Open;

    frxDBDtstReporteItems         := TfrxDBDataset.Create(nil);
    frxDBDtstReporteItems.Name    := 'frxDBDtstReporteItems';
    frxDBDtstReporteItems.DataSet := ClntDtStReporteItems;
    frxDBDtstReporteItems.Open;

    frxReport := TfrxReport.Create(nil);
    frxReport.LoadFromFile( _TipoDeFormulario.ArchivoReporte, True );

    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.DataSets.Add(frxDBDtstReporteItems);
    frxReport.PreviewOptions.Buttons := [pbZoom, pbFind, pbOutline, pbNavigator, pbPrint, pbExportQuick ];
    frxReport.Report.DataSets.Add(frxDBDtstReporte);
    frxReport.Report.DataSets.Add(frxDBDtstReporteItems);

    frxPDFExport := TfrxPDFExport.Create(frxReport);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.PrintOptimized := True;
    frxPDFExport.OpenAfterExport := False;
    frxPDFExport.Outline := True;
    frxPDFExport.ProtectionFlags := [ePrint];
    frxPDFExport.ShowDialog := not _esParaMail;
    frxPDFExport.ShowProgress := not _esParaMail;
    frxPDFExport.Title := 'Recepcion de pedido';
    frxPDFExport.Author := Aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := numeroFinal;
    frxPDFExport.Creator := Aplicacion.Nombre + ' ' + Aplicacion.Version + ' (' + EmpresaApholos.Descripcion + ')';

    Exportfilter := TfrxCustomExportFilter(frxPDFExport);
    ExportFilter.ShowDialog := True;
    ExportFilter.FileName := 'P' + IntToStr( numero ) + '.Pdf';;

    frxReport.Report.PrintOptions.Copies       := _TipoDeFormulario.CantidadDeImpresiones;

    cargarTitulos;
    if _esParaMail then
      frxReport.Variables['MostrarTotales'] := TipoDePedidoDeVenta.MostrarTotalesEnMail;
    // siempre despues de cargar los titulos
  end;

  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporteItems.EmptyDataSet;

    // cargo datos de cabecera
    ClntDtStReporte.Append;
    ClntDtStReporte.FieldByName('ID').AsInteger                 := ID;
    ClntDtStReporte.FieldByName('CodigoCliente').AsString       := Cliente.codigo;
    ClntDtStReporte.FieldByName('SubCliente').AsString          := ClienteTribeca.codigo;
    ClntDtStReporte.FieldByName('NombreCliente').AsString       := Cliente.Descripcion;
    ClntDtStReporte.FieldByName('CUITCliente').AsString         := Cliente.CUIT;
    ClntDtStReporte.FieldByName('DireccionCliente').AsString    := Cliente.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalCliente').AsString := Cliente.CodigoPostal;
    ClntDtStReporte.FieldByName('FechaDelPedido').Value         := FechaReal;
    ClntDtStReporte.FieldByName('NumeroDePedido').AsString      := AnsiReplaceStr(NumeroFinal, TipoDeFormulario.letra + '-', '');
    ClntDtStReporte.FieldByName('Vendedor').AsString            := GrupoDeVendedor.Codigo + ' - ' + GrupoDeVendedor.Descripcion;
    ClntDtStReporte.FieldByName('Taller').Value                 := EsTaller;
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := EmpresaApholos.Descripcion;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := EmpresaApholos.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := EmpresaApholos.Domicilio;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := EmpresaApholos.Localidad.DescripcionConProvinciaYPais;
    if (Cliente.Localidad.pais.ResourceLanguagePais.codigo = EmpresaApholos.Localidad.pais.ResourceLanguagePais.codigo) then
      begin
        ClntDtStReporte.FieldByName('ClienteLocalidad').AsString := Cliente.Localidad.DescripcionConProvinciaYPais;
        if DireccionDeEntregaID <> NullID then
          ClntDtStReporte.FieldByName('DireccionDeEntrega').AsString := DireccionDeEntrega.Domicilio + ' - ' + DireccionDeEntrega.Localidad.DescripcionConProvinciaYPais
        else
          ClntDtStReporte.FieldByName('DireccionDeEntrega').AsString := '';
      end
    else
      begin
        ClntDtStReporte.FieldByName('ClienteLocalidad').AsString   := Cliente.Localidad.DescripcionConProvinciaYPaisEnIngles;
        if DireccionDeEntregaID <> NullID then
          ClntDtStReporte.FieldByName('DireccionDeEntrega').AsString := DireccionDeEntrega.Domicilio + ' - ' + DireccionDeEntrega.Localidad.DescripcionConProvinciaYPaisEnIngles
        else
          ClntDtStReporte.FieldByName('DireccionDeEntrega').AsString := '';
      end;

    ClntDtStReporte.FieldByName('MonedaDescripcion').AsString  := Moneda.Descripcion;
    ClntDtStReporte.FieldByName('MonedaCotizacion').Value      := Aplicacion.CurrencyService.CotizarAMonedaLocal(Moneda, FechaReal, True);
    if DireccionDeEntregaID <> NullID then
      ClntDtStReporte.FieldByName('HorariodeEntrega').AsString := DireccionDeEntrega.horarioDeEntrega;
    ClntDtStReporte.FieldByName('Flete').AsString              := EmpresaFlete.Descripcion;
    if (MarcaID <> NullID) then
      ClntDtStReporte.FieldByName('Marca').AsString            := Marca.Descripcion;
    ClntDtStReporte.FieldByName('TipoDePedido').AsString       := TipoDePedidoDeVenta.codigo;
    ClntDtStReporte.FieldByName('TipoDePedidoDescripcion').AsString := TipoDePedidoDeVenta.Descripcion;
    ClntDtStReporte.FieldByName('OrdenDeCompra').AsString      := NroOrdenDeCompraCliente;
    ClntDtStReporte.FieldByName('CondiciondeVenta').AsString   := CondicionDeVenta.Descripcion;
    ClntDtStReporte.FieldByName('TextoPieImpresion').AsString  := _TipoDeFormulario.PieImpresion;
    ClntDtStReporte.FieldByName('ObservacionesParaFabrica').AsString := ObservacionesParaFabrica;
    ClntDtStReporte.FieldByName('ObservacionesParaVentas').AsString  := observaciones;
    if (Cliente.Localidad.paisID <> Aplicacion.Empresa.Localidad.paisID) then
      begin
        ClntDtStReporte.FieldByName('IDTributarioExterior').AsString       := Cliente.Localidad.pais.TipoDeClaveFiscal.codigo;
        ClntDtStReporte.FieldByName('NumeroIDTributarioExterior').AsString := Cliente.IDImpositivoExterior;
      end
    else
      begin
        ClntDtStReporte.FieldByName('IDTributarioExterior').AsString       := '';
        ClntDtStReporte.FieldByName('NumeroIDTributarioExterior').AsString := '';
      end;

    ClntDtStReporte.Post;
    // cargo los items
    AcumuladoTotaldelPedido := 0;
    Items.First;
    repeat
      ClntDtStReporteItems.Append;
      ClntDtStReporteItems.FieldByName('ID').AsInteger            := Items.Actual.ID;
      ClntDtStReporteItems.FieldByName('Item').AsInteger          := Items.Actual.itemNro;
      ClntDtStReporteItems.FieldByName('Cantidad').AsInteger      := Items.Actual.CantidadPedida;
      ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString := Items.Actual.Producto.codigo;
      ClntDtStReporteItems.FieldByName('Producto').AsString       := Items.Actual.descripcionDelItem;
      ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString := Items.Actual.Producto.unidadDeMedida.codigo;
      ClntDtStReporteItems.FieldByName('Flexibilidad').AsString   := Items.Actual.TipoDeFlexibilidad.codigo;
      ClntDtStReporteItems.FieldByName('Lote').Value              := Items.Actual.Lote;
      ClntDtStReporteItems.FieldByName('Precio').AsFloat          := Items.Actual.PrecioDeVenta;
      ClntDtStReporteItems.FieldByName('PorcentajeDeDescuento').AsFloat := Items.Actual.PorcentajeDescuento;
      ClntDtStReporteItems.FieldByName('FechaDeEntrega').Value    := Items.Actual.fechaEntregaProduccion;
      ClntDtStReporteItems.FieldByName('EntregasParciales').Value := not Items.Actual.EntregaTotal;
      ClntDtStReporteItems.FieldByName('totalItem').AsFloat       := Items.Actual.ImporteTotal;
      AcumuladoTotaldelPedido := AcumuladoTotaldelPedido + ClntDtStReporteItems.FieldByName('totalItem').Value;
      If (Items.Actual.Producto.fabricadoID <> NullID) Then
        begin
          TGraphicField(ClntDtStReporteItems.FieldByName('ImagenArticulo')).LoadFromFile(Items.Actual.Producto.fabricado.Articulo.archivoDeImagen);
          if not Items.Actual.Producto.fabricado.Articulo.familiaDeArticulo.EsMatriz then
            begin
              TGraphicField(ClntDtStReporteItems.FieldByName('ImagenProducto')).LoadFromFile(Items.Actual.Producto.Fabricado.Cunio.archivoDeImagenConArticuloTerminacion( Items.Actual.Producto.Fabricado.Terminacion.Codigo , Items.Actual.Producto.Fabricado.Articulo.Codigo ));
              TGraphicField(ClntDtStReporteItems.FieldByName('ImagenTerminacion')).LoadFromFile(Items.Actual.Producto.fabricado.Terminacion.archivoDeImagen);
            end;
        end;
      ClntDtStReporteItems.Post;
      Items.Next;
    until Items.IsLast;

    Items.First;

    // agrego un item con el descuento general encabezado
//    if (DescuentoEspecial <> 0) then
//      begin
//        ClntDtStReporteItems.Append;
//        ClntDtStReporteItems.FieldByName('ID').AsInteger            := 999999999;
//        ClntDtStReporteItems.FieldByName('Item').AsInteger          := 999;
//        ClntDtStReporteItems.FieldByName('Cantidad').AsInteger      := 1;
//        ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString := '';
//        ClntDtStReporteItems.FieldByName('Producto').AsString       := 'Descuento especial cliente ' + FloatToStrF(DescuentoEspecial, ffNumber, 6, 2) + ' %';
//        ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString := '';
//        ClntDtStReporteItems.FieldByName('Flexibilidad').AsString   := '';
//        ClntDtStReporteItems.FieldByName('Lote').Value              := 0;
//        ClntDtStReporteItems.FieldByName('Precio').Value            := -(AcumuladoTotaldelPedido * DescuentoEspecial / 100);
//        ClntDtStReporteItems.FieldByName('FechaDeEntrega').Value    := FechaReal;
//        ClntDtStReporteItems.FieldByName('EntregasParciales').Value := True;
//        ClntDtStReporteItems.FieldByName('totalItem').Value         := ClntDtStReporteItems.FieldByName('Precio').Value;
//        ClntDtStReporteItems.Post;
//      end;
// Lo saqué porque se calcula el importe con el descuento de cada item

  end;

  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(frxDBDtstReporteItems);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(ClntDtStReporteItems);
  end;

begin
  try
    if (_TipoDeFormulario=nil) then
      _TipoDeFormulario := Self.tipoDeFormulario;

    Result := '';
    Aplicacion.ColocarCursorEspera;

    CrearComponentes;
    CargarDatos;

    if _esParaMail and frxReport.PrepareReport then
      begin
        if _TipoDeFormulario.EditarPorAdministrador then
          frxReport.DesignReport;
        frxReport.Export(ExportFilter);
      end
    else
      begin
        if _TipoDeFormulario.EditarPorAdministrador then
          frxReport.DesignReport;
        frxReport.ShowReport;
      end;
    Result := frxPDFExport.FileName;
  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
  end;
end;

procedure TPedidoDeVenta.SetTipoDeFormularioFacturacionID(const Value: TObjectID);
begin
  if (FTipoDeFormularioFacturacionID <> Value) and assigned( FTipoDeFormularioFacturacion) then
    FreeAndNil( FTipoDeFormularioFacturacion);
  FTipoDeFormularioFacturacionID := Value;
end;

procedure TPedidoDeVenta.SetTipoDeFormularioID(Value: TObjectID);
begin
  if (Value <> FTipoDeFormularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

procedure TPedidoDeVenta.SetTipoDePedidoDeVentaID(const Value: TObjectID);
begin
  if (Value <> FTipoDePedidoDeVentaID) then
    begin
      if assigned(FTipoDePedidoDeVenta) then
        FreeAndNil(FTipoDePedidoDeVenta);
      fCCTipoDePedidoCodigo      := Null;
      fCCTipoDePedidoDescripcion := Null;
    end;

  FTipoDePedidoDeVentaID := Value;
  if FTipoDePedidoDeVentaID <> NullID then
    TipoDeFormularioID := TipoDePedidoDeVenta.TipoDeFormularioID;
end;

function TPedidoDeVenta.getDireccionDeEntrega: TDeposito;
begin
  if not assigned(FDireccionDeEntrega) then
    GetObject(TDeposito, FDireccionDeEntrega, DireccionDeEntregaID);
  Result := TDeposito(FDireccionDeEntrega);
end;

function TPedidoDeVenta.GetDolarCotizacion: TReal;
begin
  if IsAssigned and ((FDolarCotizacion=Null) or (FDolarCotizacion=Unassigned)) then
    begin
      if (Moneda.codigo = Aplicacion.ParametrosDelSistema.CodigoMonedaDolar) then
        FDolarCotizacion := MonedaCotizacion
      else
        FDolarCotizacion := Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar, FechaReal, True );
    end;
  Result := FDolarCotizacion;
end;

function TPedidoDeVenta.GetElPedidoEstaEnSifab: TBoolean;
begin
  if isAssigned then
    FElPedidoEstaEnSifab := (NumeroSifab <> -1);
  Result := FElPedidoEstaEnSifab;
end;

function TPedidoDeVenta.getEmpresaApholos: TEmpresa;
begin
  if not assigned(FEmpresaApholos) then
    FEmpresaApholos := Aplicacion.Sesion.EmpresaDeSistema.Empresa;
  Result := FEmpresaApholos
end;

procedure TPedidoDeVenta.SetDireccionDeEntregaID(const Value: TObjectID);
begin
  if (Value <> FDireccionDeEntregaID) then
    begin
      If assigned(FDireccionDeEntrega) then
        FreeAndNil(FDireccionDeEntrega);
      fCCDireccionDeEntrega := Null;
    end;
  FDireccionDeEntregaID := Value;
end;

Procedure TPedidoDeVenta.CalcularImporteNetoDelPedido;
begin
  FImporteNetoDelPedido              := 0;
  FImporteNetoDelPedidoPrecioDeLista := 0;
  FImporteDelPedidoConIVA            := Null;
  Items.First;
  while not Items.IsLast do
    begin
      FImporteNetoDelPedido              := FImporteNetoDelPedido              + Items.actual.ImporteTotal;
      FImporteNetoDelPedidoPrecioDeLista := FImporteNetoDelPedidoPrecioDeLista + Items.actual.ImporteTotalPrecioDeLista;
      Items.Next;
    end;
  Items.First;
end;

Procedure TPedidoDeVenta.calcularImporteNetoDelPedidoPrecioDeLista;
begin
  FImporteNetoDelPedidoPrecioDeLista := 0;
  Items.First;
  while not Items.IsLast do
    begin
      FImporteNetoDelPedidoPrecioDeLista := FImporteNetoDelPedidoPrecioDeLista + Items.actual.ImporteTotalPrecioDeLista;
      Items.Next;
    end;
  Items.First;
end;

function TPedidoDeVenta.CambiarEstadoAItems(_EstadoDestino: String; _ObservacionDeEstado: String): Boolean;
var
  EPVIL              : TEstadoDePedidoDeVentaItemList;
  seModifico         : Boolean;
  Costo              : TReal;
  CantEnStock        : TEntero;
begin
  // esta function devuelve TRUE si al menos un item fue cambiado
  if (Items.count = 0) then
    Exit;
  try
    EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo(_EstadoDestino, False);
    if (EPVIL.count = 0 ) then
      raise Exception.Create('Falta el estado de Pedido de Venta Items: ' + QuotedStr(_EstadoDestino) );

    EPVIL.First;

    Result := False;
    Items.First;
    while not Items.IsLast do
      begin
        Items.Actual.EsCambioDeEstado    := True;
        seModifico := False;
        if ( Items.Actual.EstadoID = EPVIL.Actual.ID) then
          Result := True
        else
          if EPVIL.Actual.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado then
            begin
              Items.Actual.cambiarEstado( EPVIL.Actual, _ObservacionDeEstado, true );
              seModifico := True;
              Result := True;
            end
          else
            begin
              if EPVIL.Actual.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion then
                begin
                  if (Items.Actual.Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
                    begin
                      Result := True;
                      Items.Next;
                      Continue;
                    end;
                  if Items.Actual.LasHojasDeRutaEstanProgramadas then
                    begin
                      Items.Actual.EsCambioDeEstado    := True;
                      Costo := Items.Actual.Producto.Fabricado.ObtenerKMateriaPrimaEnMonedaSolicitada( Items.Actual.Producto.Fabricado, Items.Actual.MonedaDelPedido );
                      if Items.Actual.Producto.EsFabricado and (Items.Actual.K1 <> Costo) then
                        Items.Actual.SetearK1( Costo );
                      Items.Actual.cambiarEstado(EPVIL.Actual, _ObservacionDeEstado, true);
                      seModifico := True;
                    end;
                end
              else if EPVIL.Actual.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_BloqueadoPorPrecioNoAutorizado then
                begin
                  if Items.Actual.BloqueadoPorPrecioNoAutorizado then
                    Begin
                      Items.Actual.CambiarEstado(EPVIL.Actual, _ObservacionDeEstado, true);
                      seModifico := True;
                    End;
                end
              else
                begin
                  Items.Actual.cambiarEstado(EPVIL.Actual, _ObservacionDeEstado, true);
                  seModifico := True;
                end;
            end;

        if Items.Actual.Producto.esStockeable then
          if tipoDeFormulario.ActuaEnStockPorCambioDeEstado then
            if tipoDeFormulario.AccionesDeStock.FindEstadoDePedidoID( Items.Actual.EstadoID) then
              Aplicacion.StockManager.MoverStock( tipoDeFormulario, NumeroFinal, Items.Actual.itemNro,
                                                  tipoDeFormulario.AccionesDeStock.Actual.TipoDeMovimientoDeStock,
                                                  Cliente.DepositoVirtualDeStockID,
                                                  Items.Actual.ProductoID, Items.Actual.CantidadPedida,
                                                  ifThen( tipoDeFormulario.AccionesDeStock.actual.TipoDeMovimientoDeStock.AsignaPedido, Items.Actual.ID, NullID ) ) ;

        if Not Result and seModifico then
          Result := true;
        Items.Next;
      end;
  finally
    if assigned(EPVIL) then
      FreeAndNil(EPVIL);
  end;
end;

function TPedidoDeVentaItem.CantidadFacturadaALaFecha(_FechaHasta: TDateTime): TEntero;
begin
  Result := 0;
  if (_FechaHasta = Null) or (_FechaHasta = 0) then
    Result := ObtenerCantidadFacturadaALaFecha( Self, DateToStr(Aplicacion.DateTimeService.FechaActual))
  else
    Result := ObtenerCantidadFacturadaALaFecha( Self, DateToStr(_FechaHasta))
end;

procedure TPedidoDeVentaItem.CleanK1;
begin
  FK1 := -777;
end;

procedure TPedidoDeVentaItem.CleanKMP;
begin
  FKMP := -777;
end;

procedure TPedidoDeVentaItem.CleanKTime;
begin
  FKTime := -777;
end;

function TPedidoDeVenta.GetIDTeamplace: TEntero;
begin
  if Cliente.EsExportacion then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace) + ') and (' + TPedidoDeVentaDM._TeamplaceTalonarioID +' = ' + TPedidoDeVentaDM._TeamplaceTalonarioPedidoExpo+ ')' , TRemitoDM._TeamplaceID )
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace) + ') and (' + TPedidoDeVentaDM._TeamplaceTalonarioID +' = ' + TPedidoDeVentaDM._TeamplaceTalonarioPedidoLocal+ ')' , TRemitoDM._TeamplaceID );
end;

function TPedidoDeVenta.GetImporteDelPedidoConIVA: TReal;
var
  ImporteItem: TReal;
begin
  if (FImporteDelPedidoConIVA = Null) then
    Begin
      FImporteDelPedidoConIVA := 0;
      if (Items.Count > 0) then
        begin
          Items.First;
          while Not Items.IsLast do
            Begin
              ImporteItem := Items.Actual.ImporteTotal;
              if Items.Actual.Producto.EsFabricado then
                begin
                  if Items.Actual.Producto.Fabricado.Articulo.ImpuestosActivos and Items.Actual.Producto.Fabricado.Articulo.Impuestos.FindPredeterminadoProductos then
                    ImporteItem := ImporteItem + (ImporteItem * Items.Actual.Producto.Fabricado.Articulo.Impuestos.actual.ImpuestoConcepto.Alicuota / 100 );
                end
              else if Items.Actual.Producto.EsServicio then
                begin
                  if Items.Actual.Producto.Servicio.ImpuestosActivos and Items.Actual.Producto.Servicio.Impuestos.FindPredeterminadoProductos then
                    ImporteItem := ImporteItem + (ImporteItem * Items.Actual.Producto.Servicio.Impuestos.actual.ImpuestoConcepto.Alicuota / 100 );
                end;
              FImporteDelPedidoConIVA := FImporteDelPedidoConIVA + ImporteItem;
              Items.Next;
            End;
        end;
    End;
  Result := FImporteDelPedidoConIVA;
end;

function TPedidoDeVenta.GetImporteNetoDelPedidoPrecioDeLista: TReal;
begin
  if ( FImporteNetoDelPedidoPrecioDeLista = 0 ) or ( FImporteNetoDelPedidoPrecioDeLista = Null ) then
    CalcularImporteNetoDelPedidoPrecioDeLista;
  Result := FImporteNetoDelPedidoPrecioDeLista;
end;

function TPedidoDeVenta.GetIncoterm: TIncoterm;
begin
  if not assigned(FIncoterm) then
    GetObject(TIncoterm, FIncoterm, FIncotermID);
  Result := TIncoterm(FIncoterm);
end;

function TPedidoDeVenta.GetItems: TPedidoDeVentaItemList;
begin
  If not assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TPedidoDeVentaItemList.CreateByPedido(Self)));
  Result := FItems;
end;

function TPedidoDeVenta.GetItemsActualizados: TPedidoDeVentaItemList;
begin
  if assigned(FItems) then
    begin
      FreeAndNil(FItems);
      GetList(TPDList(FItems), TPDList(TPedidoDeVentaItemList.CreateByPedido(Self)));
    end;
  Result := FItems;
end;

function TPedidoDeVenta.GetItemsBloqueadosPorPrecioNoAutorizado: TPedidoDeVentaItemList;
begin
  If not assigned(FItemsBloqueadosPorPrecioNoAutorizado) Then
    GetList(TPDList(FItemsBloqueadosPorPrecioNoAutorizado), TPDList(TPedidoDeVentaItemList.CreateByPedidoBloqueadosPorPrecioNoAutorizado(Self)));
  Result := FItemsBloqueadosPorPrecioNoAutorizado;
end;

function TPedidoDeVenta.GetItemsNoRemitiblesFactPendientes: TPedidoDeVentaItemList;
begin
  If not assigned(FItemsRemitibles) Then
    GetList(TPDList(FItemsRemitibles), TPDList(TPedidoDeVentaItemList.CreateByPedidoNoRemitiblesPendFacturar(Self)));
  Result := FItemsRemitibles;
end;

function TPedidoDeVenta.GetItemsNoRemitiblesFacturables: TPedidoDeVentaItemList;
begin
  If not assigned(FItemsRemitibles) Then
    GetList(TPDList(FItemsRemitibles), TPDList(TPedidoDeVentaItemList.CreateByPedidoNoRemitiblesFacturables(Self)));
  Result := FItemsRemitibles;
end;

function TPedidoDeVenta.GetItemsRemitibles: TPedidoDeVentaItemList;
begin
  If not assigned(FItemsRemitibles) Then
    GetList(TPDList(FItemsRemitibles), TPDList(TPedidoDeVentaItemList.CreateByPedidoRemitibles(Self)));
  Result := FItemsRemitibles;
end;

function TPedidoDeVenta.GetListaDePrecio: TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio, FListaDePrecio, ListaDePrecioID);
  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TPedidoDeVenta.SetFechaReal(const Value: TFecha);
begin
  If (Value = Null) Then
    Aplicacion.raiseExceptionCreate('Debe ingresar una fecha válida');
  FFechaReal := Value;
end;

procedure TPedidoDeVenta.ValidarCantidadKits;
begin
  if EsParaKit and (CantidadDeKitsPedidos = 0) then
    Aplicacion.raiseExceptionCreate('Debe indicar la cantidad de Kits pedidos.');
end;

procedure TPedidoDeVenta.ValidarNumeroDePedidoDuplicado(_NumeroDePedido: Integer; _ID: TObjectID; _CF: TCentroDeFacturacion);
Var
  PVL: TPedidoDeVentaList;
begin
  if (_NumeroDePedido = 0) then
    Exit;
  Try
    PVL := TPedidoDeVentaList.CreateByNumeroDePedidoYIDDiferente(_NumeroDePedido, _ID, _CF);
    If PVL.count > 0 then
    Begin
      PVL.First;
      Aplicacion.raiseExceptionCreate('El número de pedido "' + IntToStr(_NumeroDePedido) + '" ya fue cargado el día ' + DateToStr(PVL.Actual.FFechaReal) + #13#10 + ' para el cliente "' +PVL.Actual.Cliente.codigo + ' - ' +PVL.Actual.Cliente.Descripcion + '".' + #13#10 +'Intente grabar nuevamente.');
    end;
  Finally
    FreeAndNil(PVL);
  end;
end;

procedure TPedidoDeVenta.validarPedidoExportacion;
begin
  if TipoDePedidoDeVenta.EsExportacion and (IncotermID = NullID) then
    Aplicacion.raiseExceptionCreate( 'No se puede guardar un pedido de exportación sin informar el incoterm.'  );
end;

procedure TPedidoDeVenta.validarPedidoTribeca;
begin
  if (EstadoDePedidoDeVenta.Codigo <> aplicacion.constantAllocator.CodigoEstadoDocumento_Grabado ) and
     (EstadoDePedidoDeVenta.Codigo <> aplicacion.constantAllocator.CodigoEstadoDocumento_Borrador ) then
    exit;

  if (CCClienteCodigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (ClienteTribecaID = NullID) then
    Aplicacion.raiseExceptionCreate('Falta informar el cliente asociado a Tribeca.');
  if (CCClienteCodigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (GrupoVendedorTribecaID = NullID) then
    Aplicacion.raiseExceptionCreate('Falta informar el grupo de vendedor del cliete de Tribeca.');
end;

procedure TPedidoDeVenta.ValidateOnInsert;
begin
  inherited;
  ValidarNumeroDePedidoDuplicado(numero, ID, CentroDeFacturacion);
  ValidarCantidadKits;
end;

procedure TPedidoDeVenta.ValidateOnUpdate;
begin
  inherited;
  ValidarNumeroDePedidoDuplicado(numero, ID, CentroDeFacturacion);
  ValidarCantidadKits;
end;

function TPedidoDeVenta.GetNumeroSifab: TEntero;
const
  _CodigoInternoEmpresaAPH = 2; // APH
  _CodigoInternoEmpresaTRI = 3; // TRI
begin
  FNumeroSifab := -1;
  Result := FNumeroSifab;
  if (FNumeroSifab = Null) or (FNumeroSifab = -1) then
    begin
      FNumeroSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field( 'Pedido', '( CodigoPedidoOrigen = ' + QuotedStr(NumeroFinal) + ') and ( CodigoInternoEmpresa = ' + IntToStr(_CodigoInternoEmpresaAPH) + ')' , 'CodigoInternoPedido' );
      if FNumeroSifab = 0 then
        FNumeroSifab := -1;
    end;
  Result := FNumeroSifab;
end;

{ TPedidoDeVentaDM }
class function TPedidoDeVentaDM.TableName: string;
begin
  Result := 'PedidosDeVenta';
end;

class function TPedidoDeVentaDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  var
    camposTabla0, camposTabla1, camposTabla2, camposTabla3,camposTabla31, camposTabla4, camposTabla5, camposTabla6, camposTabla7, camposTabla8, camposTabla9, camposTabla10,camposTabla11,camposTabla12, CamposTabla13 : string;
    CamposTablaNiveldeServicioDeCliente : String;
  begin
    camposTabla0 := TableName + '.*';
    camposTabla1 := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion          + ' As ' + _CCClienteDescripcion          + ', ' +
                    TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo               + ' AS ' + _CCClienteCodigo               + ', ' +
                    TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' AS ' + _CCClienteCategoriaDeClienteID + ', ' +
                    TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CondicionDeIVAID     + ' AS ' + _CCClienteCondiciondeIVAID;
    camposTabla2 := TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM._Descripcion +' as ' + _CCEstadoDePedidoDeVentaDescripcion + ', ' + TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM._Codigo + ' as ' + _CCEstadoDePedidoDeVentaCodigo;
    camposTabla3 := TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Codigo + ' as ' + _CCGrupoDeVendedorCodigo + ', ' + TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Descripcion +' as ' + _CCGrupoDeVendedorDescripcion ;
    camposTabla31:= 'GVT.' + TGrupoDeVendedorDM._Codigo +' as ' + _CCGrupoDeVendedorTribecaCodigo + ', GVT.' + TGrupoDeVendedorDM._Descripcion +' as ' + _CCGrupoDeVendedorTribeca ;
    camposTabla4 := 'TRI.' + TAbstractEmpresaDM._Descripcion +' as ' + _CCClienteTribecaDescripcion + ', TRI.' + TAbstractEmpresaDM._Codigo+' as ' + _CCClienteTribecaCodigo;
    camposTabla5 := TMonedaDM.TableName + '.' + TMonedaDM._Descripcion +' as ' + _CCMonedaDescripcion+ ', ' + TMonedaDM.TableName + '.' + TMonedaDM._Codigo+' as ' + _CCMonedaCodigo;
    camposTabla6 := TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Descripcion +' as ' + _CCTipoDePedidoDescripcion + ', ' +
                    TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Codigo+' as ' + _CCTipoDePedidoCodigo + ', ' +
                    TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._seProduceParaStock+' as ' + _CCTipoDePedidoSeProduceParaStock + ', ' +
                    TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Resta +' as ' + _CCTipoDePedidoResta;
    camposTabla7 := 'FLETE.' + TAbstractEmpresaDM._Descripcion +' as ' + _CCTransportistaDescripcion + ', FLETE.' + TAbstractEmpresaDM._Codigo+' as ' + _CCTransportistaCodigo;
    camposTabla8 := TRankingCrediticioDM.TableName + '.' +TRankingCrediticioDM._Descripcion +' as ' + _CCRankingCrediticio;
    camposTabla9 := TCondicionDeVentaDM.TableName + '.' +TCondicionDeVentaDM._Descripcion +' as ' + _CCCondicionDeVenta;
    camposTabla10:= '('+TUsuarioDM.TableName + '.' +TUsuarioDM._apellido + '+ '', ''+' + TUsuarioDM.TableName + '.' +TUsuarioDM._nombre + ') as ' + _CCUsuarioDeAlta;
    camposTabla11:= TPresupuestoDeVentaDM.TableName + '.' +TPresupuestoDeVentaDM._numero + ' as ' + _CCPresupuestoDeVentaNumero;
    camposTabla12:= '('+TDepositoDM.TableName + '.' + TDepositoDM._Calle + '+'' ''+' +
                    'cast(' + TDepositoDM.TableName + '.' +TDepositoDM._numeroCalle + ' as varchar )' + '+'' ''+' +
                    TDepositoDM.TableName + '.' +TDepositoDM._Piso +  '+'' ''+' + TDepositoDM.TableName + '.' +TDepositoDM._Departamento + ') As ' + TPedidoDeVentaDM._CCDireccionDeEntrega;
    CamposTabla13:= TCategoriaDeClienteDM.TableName + '.' + TCategoriaDeClienteDM._Descripcion + ' As ' + _CCClienteCategoriaDeClienteDescripcion;

    CamposTablaNiveldeServicioDeCliente := 'NSC.' + TNivelDeServicioDeClienteDM._Descripcion + ' as ' + _CCNivelDeServicioDeCliente +', ';
    CamposTablaNiveldeServicioDeCliente := CamposTablaNiveldeServicioDeCliente + 'NSC.' + TNivelDeServicioDeClienteDM._Ponderacion + ' as ' + _CCNivelDeServicioDeClientePonderacion+', ';
    CamposTablaNiveldeServicioDeCliente := CamposTablaNiveldeServicioDeCliente + 'NSC.' + TNivelDeServicioDeClienteDM._ColorIdentificador + ' as ' + _CCNivelDeServicioDeClienteColorIdentificador;

    Result :=          camposTabla0  + ', ';
    Result := Result + camposTabla1  + ', ';
    Result := Result + camposTabla2  + ', ';
    Result := Result + camposTabla3  + ', ';
    Result := Result + camposTabla31 + ', ';
    Result := Result + camposTabla4 +  ', ';
    Result := Result + camposTabla5 +  ', ';
    Result := Result + camposTabla6 +  ', ';
    Result := Result + camposTabla7 +  ', ';
    Result := Result + camposTabla8 +  ', ';
    Result := Result + camposTabla9 +  ', ';
    Result := Result + camposTabla10 + ', ';
    Result := Result + camposTabla11 + ', ';
    Result := Result + camposTabla12 + ', ';
    Result := Result + camposTabla13 + ', ';
    Result := Result + CamposTablaNiveldeServicioDeCliente + ', ';
    Result := Result + '( Select Top 1 ' + TPedidoDeVentaStateLogDM.TableName + '.' + TPedidoDeVentaStateLogDM._FechaHora + ' From ' + TPedidoDeVentaStateLogDM.TableName + ' Where ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' = ' + TPedidoDeVentaStateLogDM.TableName + '.' + TPedidoDeVentaStateLogDM._PedidoDeVentaID +
                       ' Order By ' + TPedidoDeVentaStateLogDM.TableName + '.' + TPedidoDeVentaStateLogDM._FechaHora + ' Desc ) as ' + _CCFechaDePasoAEstadoActual;
  end;

  function LeftJoinString: String;
  var
    ID1NameTabla0, ID2NameTabla0, ID3NameTabla0, ID31NameTabla0, ID4NameTabla0, ID5NameTabla0, ID6NameTabla0, ID7NameTabla0, ID8NameTabla0, ID9NameTabla0, ID10NameTabla0, ID11NameTabla0, ID12NameTabla0, ID13NameTabla0 : String;
    IDNameTabla1,ID1NameTabla1, IDNameTabla2, IDNameTabla3, IDNameTabla31, IDNameTabla4, IDNameTabla5, IDNameTabla6, IDNameTabla7, IDNameTabla8, IDNameTabla9, IDNameTabla10, IDNameTabla11, IDNameTabla12, IDNameTabla13  : String;
    IDNameTablaNivelDeServicio, ID2NameTablaNivelDeServicio  : String;
  begin
    ID1NameTabla0  := TableName + '.' + TPedidoDeVentaDM._ClienteID;
    ID2NameTabla0  := TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID;
    ID3NameTabla0  := TableName + '.' + TPedidoDeVentaDM._GrupoDeVendedorID;
    ID31NameTabla0 := TableName + '.' + TPedidoDeVentaDM._GrupoVendedorTribecaID;
    ID4NameTabla0  := TableName + '.' + TPedidoDeVentaDM._ClienteTribecaID;
    ID5NameTabla0  := TableName + '.' + TPedidoDeVentaDM._monedaID;
    ID6NameTabla0  := TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID;
    ID7NameTabla0  := TableName + '.' + TPedidoDeVentaDM._EmpresaFleteID;
    ID8NameTabla0  := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._RankingCrediticioID;
    ID9NameTabla0  := TableName + '.' + TPedidoDeVentaDM._CondiciondeVentaID;
    ID10NameTabla0 := TableName + '.' + TPedidoDeVentaDM._UsuarioDeAltaID;
    ID11NameTabla0 := TableName + '.' + TPedidoDeVentaDM._PresupuestoDeVentaID;
    ID12NameTabla0 := TableName + '.' + TPedidoDeVentaDM._DirecciondeEntregaID;

    IDNameTabla1 := TAbstractEmpresaDM.TableName       + '.' + TAbstractEmpresaDM.ID_FieldName;
    ID1NameTabla1:= TAbstractEmpresaDM.TableName       + '.' + TAbstractEmpresaDM._CategoriaDeClienteID;
    IDNameTabla2 := TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM.ID_FieldName;
    IDNameTabla3 := TGrupoDeVendedorDM.TableName       + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDNameTabla31:= 'GVT'                              + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDNameTabla4 := 'TRI'                              + '.' + TAbstractEmpresaDM.ID_FieldName;
    IDNameTabla5 := TMonedaDM.TableName                + '.' + TMonedaDM.ID_FieldName;
    IDNameTabla6 := TTipoDePedidoDeVentaDM.TableName   + '.' + TTipoDePedidoDeVentaDM.ID_FieldName;
    IDNameTabla7 := 'FLETE'                            + '.' + TAbstractEmpresaDM.ID_FieldName;
    IDNameTabla8 := TRankingCrediticioDM.TableName     + '.' + TRankingCrediticioDM.ID_FieldName;
    IDNameTabla9 := TCondicionDeVentaDM.TableName      + '.' + TCondicionDeVentaDM.ID_FieldName;
    IDNameTabla10:= TUsuarioDM.TableName               + '.' + TUsuarioDM.ID_FieldName;
    IDNameTabla11:= TPresupuestoDeVentaDM.TableName    + '.' + TPresupuestoDeVentaDM.ID_FieldName;
    IDNameTabla12:= TDepositoDM.TableName              + '.' + TDepositoDM.ID_FieldName;
    IDNameTabla13:= TCategoriaDeClienteDM.TableName    + '.' + TCategoriaDeClienteDM.ID_FieldName;
    IDNameTablaNivelDeServicio  := 'NSC' + '.' + TNivelDeServicioDeClienteDM.ID_FieldName;
    ID2NameTablaNivelDeServicio := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._NivelDeServicioDeClienteID;

    Result :=          ' Left Join ' + TAbstractEmpresaDM.TableName          + ' on (' + ID1NameTabla0 + '=' + IDNameTabla1   + ') ';
    Result := Result + ' Left Join ' + TEstadoDePedidoDeVentaDM.TableName    + ' on (' + ID2NameTabla0 + '=' + IDNameTabla2   + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName          + ' on (' + ID3NameTabla0 + '=' + IDNameTabla3   + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName + ' GVT on (' + ID31NameTabla0 + '=' + IDNameTabla31      + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName + ' TRI on (' + ID4NameTabla0 + '=' + IDNameTabla4        + ') ';
    Result := Result + ' Left Join ' + TMonedaDM.TableName                   + ' on (' + ID5NameTabla0 + '=' + IDNameTabla5   + ') ';
    Result := Result + ' Left Join ' + TTipoDePedidoDeVentaDM.TableName      + ' on (' + ID6NameTabla0 + '=' + IDNameTabla6   + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName + ' FLETE on (' + ID7NameTabla0 + '=' + IDNameTabla7      + ') ';
    Result := Result + ' Left Join ' + TRankingCrediticioDM.TableName        + ' on (' + ID8NameTabla0 + '=' + IDNameTabla8   + ') ';
    Result := Result + ' Left Join ' + TCondicionDeVentaDM.TableName         + ' on (' + ID9NameTabla0 + '=' + IDNameTabla9   + ') ';
    Result := Result + ' Left Join ' + TUsuarioDM.TableName                  + ' on (' + ID10NameTabla0 + '=' + IDNameTabla10 + ') ';
    Result := Result + ' Left Join ' + TPresupuestoDeVentaDM.TableName       + ' on (' + ID11NameTabla0 + '=' + IDNameTabla11 + ') ';
    Result := Result + ' Left Join ' + TDepositoDM.TableName                 + ' on (' + ID12NameTabla0 + '=' + IDNameTabla12 + ') ';
    Result := Result + ' Left Join ' + TCategoriaDeClienteDM.TableName       + ' on (' + ID1NameTabla1 + '=' + IDNameTabla13  + ') ';
    Result := Result + ' Left Join ' + TNivelDeServicioDeClienteDM.TableName + ' NSC on (' + IDNameTablaNivelDeServicio + '=' + ID2NameTablaNivelDeServicio + ') ';
  end;
begin
  if (_Parte = 1) then
    Result := CamposString;
  if (_Parte = 2) then
    Result := LeftJoinString;
end;

class function TPedidoDeVentaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID'
end;

class function TPedidoDeVentaDM.ID_FieldName: string;
begin
  Result := 'PedidoDeVentaID';
end;

procedure TPedidoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVenta(PDObject) do
  begin
    IntegerField[_Numero]                        := Numero;
    IntegerField[_NumeroSifab]                   := NumeroSifab;
    IDField[_TipoDePedidoDeVentaID]              := TipoDePedidoDeVentaID;
    StringField[_Observaciones]                  := Observaciones;
    StringField[_observacionesParaFabrica]       := ObservacionesParaFabrica;
    IDField[_ClienteID]                          := ClienteID;
    IDField[_CondiciondeVentaID]                 := CondicionDeVentaID;
    IDField[_CondicionDeVentaDetalleID]          := CondicionDeVentaDetalleID;
    DateField[_FechaReal]                        := FechaReal;
    IDField[_EmpresaFleteID]                     := EmpresaFleteID;
    IDField[_GrupoDeVendedorID]                  := GrupoDeVendedorID;
    IDField[_MarcaID]                            := MarcaID;
    IDField[_monedaID]                           := MonedaID;
    FloatField[_MonedaCotizacion]                := MonedaCotizacion;
    FloatField[_DolarCotizacion]                 := DolarCotizacion;
    StringField[_NroOrdenDeCompraCliente]        := NroOrdenDeCompraCliente;
    FloatField[_PorcentComisionPorCobranza]      := PorcentajeComisionPorCobranza;
    FloatField[_PorcentComisionPorFacturacion]   := PorcentajeComisionPorFacturacion;
    IDField[_DirecciondeEntregaID]               := DireccionDeEntregaID;
    IDField[_TipoDeFormularioID]                 := TipoDeFormularioID;
    FloatField[_ImporteNetoDelPedido]            := ImporteNetoDelPedido;
    FloatField[_ImporteNetoDelPedidoPrecioDeLista]:= ImporteNetoDelPedidoPrecioDeLista;
    IDField[_CentroDeFacturacionID]              := CentroDeFacturacionID;
    StringField[_NumeroLetrado]                  := NumeroFinal;
    IDField[_EstadoDePedidoDeVentaID]            := EstadoDePedidoDeVentaID;
    DateTimeField[_FechaDeEstadoDePedidoDeVenta] := FechaDeEstadoDePedidoDeVenta;
    FloatField[_DescuentoEspecial]               := DescuentoEspecial;
    BooleanField[_EntregaTotal]                  := EntregaTotal;
    IDField[_ListaDePrecioID]                    := ListaDePrecioID;
    IDField[_PresupuestoDeVentaID]               := PresupuestoDeVentaID;
    IDField[_UsuarioDeAltaID]                    := UsuarioDeAltaID;
    IDField[_IncotermID]                         := IncotermID;
    IDField[_ClienteTribecaID]                   := ClienteTribecaID;
    IDField[_GrupoVendedorTribecaID]             := GrupoVendedorTribecaID;
    IDField[_CentroDeFacturacionID]              := CentroDeFacturacionID;
    BooleanField[_MailPendiente]                 := MailPendiente;
    DateTimeField[_FechaEnvioMail]               := FFechaEnvioMail;
    DateTimeField[_FechaCancelacionEnvioMail]    := FFechaCancelacionEnvioMail;
    BooleanField[_ProformaPendiente]             := ProformaPendiente;
    DateTimeField[_FechaEnvioProforma]           := FechaEnvioProforma;
    BooleanField[_PasaPorCalidad]                := FPasaPorCalidad;
    BooleanField[_PendienteDeFacturar]           := FPendienteDeFacturar;
    BooleanField[_EsExclusivoServicios]          := EsExclusivoServicios;
    BooleanField[_SeFacturaSinRemito]            := SeFacturaSinRemito;
    BooleanField[_EsParaKit]                     := EsParaKit;
    IntegerField[_UnidadesPorKit]                := UnidadesPorKit;
    IntegerField[_CantidadDeKitsPedidos]         := CantidadDeKitsPedidos;
  end;
end;

procedure TPedidoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVenta(PDObject) do
    begin
      FNumero                           := IntegerField[_Numero];
      FNumeroSifab                      := IntegerField[_NumeroSifab];
      FTipoDePedidoDeVentaID            := IDField[_TipoDePedidoDeVentaID];
      FObservaciones                    := StringField[_Observaciones];
      FObservacionesParaFabrica         := StringField[_observacionesParaFabrica];
      FFechaReal                        := DateField[_FechaReal];
      FClienteID                        := IDField[_ClienteID];
      FCondicionDeVentaID               := IDField[_CondiciondeVentaID];
      FCondicionDeVentaDetalleID        := IDField[_CondicionDeVentaDetalleID];
      FEmpresaFleteID                   := IDField[_EmpresaFleteID];
      FGrupoDeVendedorID                := IDField[_GrupoDeVendedorID];
      FMarcaID                          := IDField[_MarcaID];
      FMonedaID                         := IDField[_monedaID];
      FNroOrdenDeCompraCliente          := StringField[_NroOrdenDeCompraCliente];
      FPorcentajeComisionPorCobranza    := FloatField[_PorcentComisionPorCobranza];
      FPorcentajeComisionPorFacturacion := FloatField[_PorcentComisionPorFacturacion];
      FTipoDeFormularioID               := IDField[_TipoDeFormularioID];
      FMonedaCotizacion                 := FloatField[_MonedaCotizacion];
      FDolarCotizacion                  := FloatField[_DolarCotizacion];
      FDireccionDeEntregaID             := IDField[_DirecciondeEntregaID];
      FImporteNetoDelPedido             := FloatField[_ImporteNetoDelPedido];
      FImporteNetoDelPedidoPrecioDeLista:= FloatField[_ImporteNetoDelPedidoPrecioDeLista];
      FCentroDeFacturacionID            := IDField[_CentroDeFacturacionID];
      FEstadoDePedidoDeVentaID          := IDField[_EstadoDePedidoDeVentaID];
      FFechaDeEstadoDePedidoDeVenta     := DateTimeField[_FechaDeEstadoDePedidoDeVenta];
      FEstadoOriginalID                 := IDField[_EstadoDePedidoDeVentaID];
      FDescuentoEspecial                := FloatField[_DescuentoEspecial];
      FEntregaTotal                     := BooleanField[_EntregaTotal];
      FListaDePrecioID                  := IDField[_ListaDePrecioID];
      FPresupuestoDeVentaID             := IDField[_PresupuestoDeVentaID];
      FUsuarioDeAltaID                  := IDField[_UsuarioDeAltaID];
      FIncotermID                       := IDField[_IncotermID];
      FClienteTribecaID                 := IDField[_ClienteTribecaID];
      FGrupoVendedorTribecaID           := IDField[_GrupoVendedorTribecaID];
      fMailPendiente                    := BooleanField[_MailPendiente];
      FFechaEnvioMail                   := DateTimeField[_FechaEnvioMail];
      FFechaCancelacionEnvioMail        := DateTimeField[_FechaCancelacionEnvioMail];
      fProformaPendiente                := BooleanField[_ProformaPendiente];
      FFechaEnvioProforma               := DateTimeField[_FechaEnvioProforma];
      FPasaPorCalidad                   := BooleanField[_PasaPorCalidad];
      FCentroDeFacturacionID            := IDField[_CentroDeFacturacionID];
      FPendienteDeFacturar              := BooleanField[_PendienteDeFacturar];
      FEsExclusivoServicios             := BooleanField[_EsExclusivoServicios];
      FSeFacturaSinRemito               := BooleanField[_SeFacturaSinRemito];
      FEsParaKit                        := BooleanField[_EsParaKit];
      FUnidadesPorKit                   := IntegerField[_UnidadesPorKit];
      FCantidadDeKitsPedidos            := IntegerField[_CantidadDeKitsPedidos];
      // campos del create compuesto
      FCCClienteDescripcion                         := StringField[_CCClienteDescripcion];
      FCCClienteCodigo                              := StringField[_CCClienteCodigo];
      FCCClienteCategoriaDeClienteID                := IDField[_CCClienteCategoriaDeClienteID];
      FCCClienteCategoriaDeClienteDescripcion       := StringField[_CCClienteCategoriaDeClienteDescripcion];
      FCCClienteCondiciondeIVAID                    := IDField[_CCClienteCondiciondeIVAID];
      FCCGrupoDeVendedorCodigo                      := StringField[_CCGrupoDeVendedorCodigo];
      FCCGrupoDeVendedorDescripcion                 := StringField[_CCGrupoDeVendedorDescripcion];
      FCCEstadoDePedidoDeVentaDescripcion           := StringField[_CCEstadoDePedidoDeVentaDescripcion];
      FCCEstadoDePedidoDeVentaCodigo                := StringField[_CCEstadoDePedidoDeVentaCodigo];
      FCCTipoDePedidoCodigo                         := StringField[_CCTipoDePedidoCodigo];
      FCCTipoDePedidoDescripcion                    := StringField[_CCTipoDePedidoDescripcion];
      FCCTipoDePedidoResta                          := StringField[_CCTipoDePedidoResta];
      FCCTipoDePedidoSeProduceParaStock             := StringField[_CCTipoDePedidoSeProduceParaStock];
      FCCClienteTribecaDescripcion                  := StringField[_CCClienteTribecaDescripcion];
      FCCClienteTribecaCodigo                       := StringField[_CCClienteTribecaCodigo];
      FCCGrupoDeVendedorTribecaCodigo               := StringField[_CCGrupoDeVendedorTribecaCodigo];
      FCCGrupoDeVendedorTribeca                     := StringField[_CCGrupoDeVendedorTribeca];
      FCCMonedaCodigo                               := StringField[_CCMonedaCodigo];
      FCCMonedaDescripcion                          := StringField[_CCMonedaDescripcion];
      FCCTransportistaCodigo                        := StringField[_CCTransportistaCodigo];
      FCCTransportistaDescripcion                   := StringField[_CCTransportistaDescripcion];
      FCCRankingCrediticio                          := StringField[_CCRankingCrediticio];
      FCCCondicionDeVenta                           := StringField[_CCCondicionDeVenta];
      FCCUsuarioDeAlta                              := StringField[_CCUsuarioDeAlta];
      FCCPresupuestoDeVentaNumero                   := IntegerField[_CCPresupuestoDeVentaNumero];
      FCCDireccionDeEntrega                         := StringField[_CCDireccionDeEntrega];
      FCCNivelDeServicioDeCliente                   := StringField[_CCNivelDeServicioDeCliente];
      FCCNivelDeServicioDeClientePonderacion        := FloatField[_CCNivelDeServicioDeClientePonderacion];
      FCCNivelDeServicioDeClienteColorIdentificador := IntegerField[_CCNivelDeServicioDeClienteColorIdentificador];
      FCCFechaDePasoAEstadoActual                   := DateTimeField[_CCFechaDePasoAEstadoActual];
  end;
end;

//function TPedidoDeVentaDM.sqlLoadObject(OBjectToLoad: TPDObject): string;
//begin
//  Result := TPedidoDeVentaDM.createCompuesto + ' WHERE ' +  TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + '=' + IntToStr(OBjectToLoad.ID);
//end;

{ TPedidoDeVentaList }
function TPedidoDeVentaList.GetActual: TPedidoDeVenta;
begin
  Result := TPedidoDeVenta(CurrentObject);
end;

//constructor TPedidoDeVentaList.SP_PedidosByFechaDesdeHastaAndEstados(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean);
//Var
//  ParametersValues: array[0..14] of variant;
//  CadenaDelimitada : string;
//  Elemento, I : Integer;
//begin
//  if _FechaDesde > '' then
//    ParametersValues[0] := _FechaDesde;
//  if _FechaHasta > '' then
//    ParametersValues[1] := _FechaHasta;
//  if assigned(_EstadosID) and  (_EstadosID.Count > 0) then
//    ParametersValues[2] := _EstadosID.CommaText;
//  if _Descendente then
//    ParametersValues[3] := '1';
//
//  CadenaDelimitada := WrapText( 'Select ' + THojaDeRutaDM.CreateCompuesto(1) + ' from ' + THojaDeRutaDM.Tablename + THojaDeRutaDM.CreateCompuesto(2) , '|', [' '], 800 );
//
//  Elemento := 4;
//  for I := 1 to Aplicacion.TextService.ContarSeparadosXComas(CadenaDelimitada,'|') do
//    begin
//      ParametersValues[elemento] := Aplicacion.TextService.ObtenerSeparadosXComas(CadenaDelimitada,'|',I );
//      Inc(Elemento);
//    end;
//
//  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.Create_SP( TPedidoDeVentaDM._SP_PedidosByFechaDesdeHastaAndEstados, ParametersValues));
//end;

//constructor TPedidoDeVentaList.SP_PedidosByNumeroDesdeHasta(_NumeroDesde, _NumeroHasta : Integer);
//Var
//  ParametersValues: array[0..12] of variant;
//  CadenaDelimitada : string;
//  Elemento, I : Integer;
//begin
//  ParametersValues[0] := _NumeroDesde;
//  ParametersValues[1] := _NumeroHasta;
//  ParametersValues[2] := Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador;
//
//  CadenaDelimitada := WrapText( 'Select ' + THojaDeRutaDM.CreateCompuesto(1) + ' from ' + THojaDeRutaDM.Tablename + THojaDeRutaDM.CreateCompuesto(2) , '|', [' '], 800 );
//  Elemento := 3;
//  for I := 1 to Aplicacion.TextService.ContarSeparadosXComas(CadenaDelimitada,'|') do
//    begin
//      ParametersValues[elemento] := Aplicacion.TextService.ObtenerSeparadosXComas(CadenaDelimitada,'|',I );
//      Inc(Elemento);
//    end;
//
//  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.Create_SP( TPedidoDeVentaDM._SP_PedidosByNumeroDesdeHasta, ParametersValues));
//end;

function TPedidoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TPedidoDeVenta.Create;
end;

function TPedidoDeVentaList.FindNumero(_numero: TEntero): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.numero = _numero);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor TPedidoDeVentaList.CreateAll(_FiltrarPorVendedor: Boolean);
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False,CreateForVendedor(_FiltrarPorVendedor)));
end;

constructor TPedidoDeVentaList.CreateByCliente(_C: TCliente; _nTop: Integer; _Order: String );
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteID + '=' + IntToStr(_C.ID);
  end;
begin
  if (_Ntop <> -1) then
    inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateTop(_nTop, WhereString, _Order))
  else
    inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString, False, _Order));
end;

constructor TPedidoDeVentaList.CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde, _FechaHasta: String; _EstadoID: TObjectID; _FiltraParaTiraVentas: Boolean );
  Function Condicion2: String;
  begin
    Result := ' ( ' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._ClienteID + ' = ' + IntToStr(_C.ID)+ ' ) ';
  end;

  Function Condicion3: String;
  begin
    Result := ' ( ' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' ) ';
  end;

  Function Condicion1: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
      Result := ' ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' = ' + IntToStr(_EstadoID) + ' ) ';

    if _FiltraParaTiraVentas then
      begin
        if Result > '' then
          Result := Result + ' and ';
        Result := Result + '(' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;

begin
  if (Condicion1 > '') then
    inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, Condicion1 + ' And ' + Condicion2 + ' And ' + Condicion3))
  else
    inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, Condicion2 + ' And ' + Condicion3));
end;

constructor TPedidoDeVentaList.CreateByClienteAndFechaDesdeFechaHastaAndEstadosDePedido(_C: TCliente; _FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean );
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._ClienteID + '=' + IntToStr(_C.ID) + ')';
    Result := Result + ' and (' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
    Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByClienteAndOrdenDeCompra(_C: TCliente; _OrdenDeCompra: String; _NumeroDePedidoAExcluir: Integer);
  Function WhereString : String;
  begin
    Result :=  '( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteID + ' = ' + IntToStr(_C.ID) + ') and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._NroOrdenDeCompraCliente + ' = ' + QuotedStr(_OrdenDeCompra) + ' )';
    if (_NumeroDePedidoAExcluir <> 0) then
  		Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero + ' <> ' + IntToStr(_NumerodePedidoAExcluir) + ') ';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString ));
end;

constructor TPedidoDeVentaList.CreateByDireccionDeEntrega(_D: TDeposito);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._DirecciondeEntregaID + '=' + IntToStr(_D.ID);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString ));
end;

constructor TPedidoDeVentaList.CreateByEstado(_Est: TEstadoDePedidoDeVenta);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' = ' + IntToStr(_Est.ID);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByEstadoAndUsuarioDeAlta(_Est: TEstadoDePedidoDeVenta; _Usu: TUsuario);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' = ' + IntToStr(_Est.ID) + ') And ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._UsuarioDeAltaID + ' = ' + IntToStr(_Usu.ID) + ')';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString ));
end;

constructor TPedidoDeVentaList.CreateByEstados(_Est : TOrganizacionDeMonitorEstadoPermitidoList; _EsParaNotaDeCredito, _EsParaNotaDeDebito : Boolean);
  function FiltroPorEstado: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ',' + IntToStr(_Est.Actual.EstadoDePedidoDeVentaID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';
  end;

  Function FiltroPorTipoDePedido : String;
  Begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID + ' in (Select ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName + ' where ' ;
    if _EsParaNotaDeCredito then
      begin
        Result := Result + TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=1)';
        if _EsParaNotaDeDebito then
          Result := Result + ' and ( ';
      end;
    if _EsParaNotaDeDebito then
        Result := Result + TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=1)';
  End;

  function WhereString: String;
  begin
    Result := FiltroPorEstado;
    if _EsParaNotaDeCredito or _EsParaNotaDeDebito then
    Result := Result + ' and ' + FiltroPorTipoDePedido;
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByEstadosAndTipoDeFormulario(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _TipoDeFormulario: TTipoDeFormulario;
  _EsParaNotaDeCredito, _EsParaNotaDeDebito, _Local, _Exportacion: Boolean);
  function FiltroPorEstado: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ',' + IntToStr(_Est.Actual.EstadoDePedidoDeVentaID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';
  end;

  Function FiltroPorTipoDePedido : String;
  Begin
    if _EsParaNotaDeCredito or _EsParaNotaDeDebito then
      begin
        Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID + ' in (Select ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName + ' where ' ;
        if _EsParaNotaDeCredito then
          begin
            Result := Result + TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=1)';
            if _EsParaNotaDeDebito then
              Result := Result + ' and ( ';
          end;
        if _EsParaNotaDeDebito then
            Result := Result + TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=1)';
      end
    else
      begin
        Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID + ' in (Select ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName + ' where ' ;
        Result := Result + TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=0 and '+ TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=0)';
      end

  End;

  function FiltroPorMercadoLocalExpo: String;
  begin
    Result := '';
    if (_Local and _Exportacion) then
      Exit;
    Result := Result + ' and ';
    if _Local then
      Result := Result + '('+ TTipoDePedidoDeVentaDM.TableName +'.'+ TTipoDePedidoDeVentaDM._EsExportacion + '=0)'
    Else if _Exportacion then
      Result := Result + '('+ TTipoDePedidoDeVentaDM.TableName +'.'+ TTipoDePedidoDeVentaDM._EsExportacion + '=1)';
  end;

  function WhereString: String;
  begin
    Result := FiltroPorEstado;
    Result := Result + ' and ' + FiltroPorTipoDePedido;
    Result := Result + FiltroPorMercadoLocalExpo;
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _EstadoID: TObjectID; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean);
  Function ObtenerEstadoBorradorID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := nullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Borrador en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
  Function Condicion2: String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' Where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' Where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;
  Function Condicion1: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
    begin
      Result := ' (' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' = ' + IntToStr(_EstadoID) + ' ) and ';
    end;
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPedidoDeVenta,TPedidoDeVentaDM.CreateAll(False,Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByFechaDesdeFechaHastaAndEstadosDePedido(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList;_Descendente: Boolean; _FiltraParaTiraVentas: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if assigned( _EstadosID) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in ('+ _EstadosID.CommaText+'))';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal  +' Desc,'+ TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._numero + ' Desc'
    else
      Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal  +','+ TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._numero;
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByFechaDesdeFechaHastaAndPendientes(_FechaDesde, _FechaHasta: String; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (Select '+ TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName + ' Where ' + TEstadoDePedidoDeVentaDM._EsEstadoDePedidoPendiente + '=1 ))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal  +' Desc,'+ TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._numero + ' Desc'
    else
      Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal  +','+ TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._numero;
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByGrupoDeVendedores(_G: TGrupoDeVendedor);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._GrupoDeVendedorID + '=' + IntToStr(_G.ID);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String; _EstadoID: TObjectID;  _FiltraParaTiraVentas: Boolean );

  Function Condicion2: String;
  begin
    Result := ' (' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._GrupoDeVendedorID + ' in (';
    _GVL.First;
    while Not _GVL.IsLast do
      begin
        Result := Result + IntToStr(  _GVL.Actual.ID ) +', ';
        _GVL.Next;
      end;
    Result := Result + '-1)) ';
  end;

  Function Condicion3: String;
  begin
    Result := ' and (' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;

  Function Condicion: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
      Result := ' (' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' = ' + IntToStr(_EstadoID) + ') ';
    if Result > '' then
      Result := Result + ' and ';
    Result := Result + Condicion2 + Condicion3;
  end;

begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, Condicion));
end;

constructor TPedidoDeVentaList.CreateByGrupoDeVendedoresAndFechaDesdeFechaHastaAndEstadosDePedido(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean );
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := ' (' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._GrupoDeVendedorID + ' in (';
    _GVL.First;
    while Not _GVL.IsLast do
      begin
        Result := Result + IntToStr(  _GVL.Actual.ID ) +', ';
        _GVL.Next;
      end;
    Result := Result + '-1)) ';

    Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
    Result := Result + ' and (' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;
  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' Desc';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByListosParaProcesar(_PF : TPasoDeFabricacion ; _Filtro : string);
  function WhereString : String;
    begin
      Result := '';
      if _Filtro > '' then
        Result := Result + _Filtro + ' and ';
      Result := Result + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' in (';
      Result := Result + 'Select ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' from  ' + TPedidoDeVentaItemDM.TableName + ' where ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' in (';
      Result := Result + 'Select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._PedidoDeVentaItemID + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName + ' in (';
      Result := Result + 'Select ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' from ' + THojaDeRutaPasoDeFabricacionDM.TableName + ' where ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in (';
      Result := Result + 'Select ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' where ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' = ' + IntToStr(_PF.ID) + ' and ';
      Result := Result + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso + ' is not null and ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is null and ';
      Result := Result + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' in (';
      Result := Result + 'Select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in (';
      Result := Result + 'Select ' + TEstadoDeHojaDeRutaDM.TableName + '.' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' +
      TEstadoDeHojaDeRutaDM.TableName + ' where ' + TEstadoDeHojaDeRutaDM._EsEstadoEnFabricacion + '=1 ))))))';
    end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString ));
end;

constructor TPedidoDeVentaList.CreateByMailPendiente;
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._MailPendiente + ' = 1';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByMarca(_M: TMarca);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._MarcaID + '=' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False,WhereString));
end;

constructor TPedidoDeVentaList.CreateByNumeroDePedido(_NumeroDePedido: Integer);
  Function WhereString: String;
  Begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero + ' = ' + IntToStr(_NumeroDePedido);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByNumeroDePedidoYIDDiferente(_NumeroDePedido: Integer; _ID: TObjectID; _CF: TCentroDeFacturacion);
  Function WhereString: String;
  Begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._CentroDeFacturacionID + '=' + IntToStr(_CF.ID);
    Result := Result + ' and ' + TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._numero + '=';
    Result := Result + IntToStr(_NumeroDePedido);
    Result := Result + ' and IDFieldName<>' + IntToStr(_ID);
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False,WhereString));
end;

constructor TPedidoDeVentaList.CreateByNumeroDesdeNumeroHasta(_NumeroDesde: Integer; _NumeroHasta: Integer; _EstadoID: TObjectID; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean;  _FitrarPorVendedor: Boolean);
  Function ObtenerEstadoBorradorID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaList;
  Begin
    Result := nullID;
    Try
      EL := TEstadoDePedidoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Borrador en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

  Function Condicion1: String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._numero + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';

    if (_EstadoID <> NullID) then
      Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + '=' + IntToStr(_EstadoID) + ' )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;
  end;

  Function Orden: String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+ TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' Desc';
  end;

begin
//  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, Condicion1 +' and ' + CreateForVendedor(_FitrarPorVendedor),False, Orden));
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, Condicion1, False, Orden));
end;

constructor TPedidoDeVentaList.CreateByNumeroDesdeNumeroHastaAndEstadosDePedido(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean );
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._numero + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';
    Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ' , ';
    Result := Result + '-1 ) )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;

  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaDM.TableName+'.'+TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPedidoDeVenta,TPedidoDeVentaDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaList.CreateByPedidoDeVenta(_P: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' = ' + QuotedStr(IntToStr(_P.ID));
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateByProformaPendiente(_Exportacion : Boolean);
  function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ProformaPendiente + ' = 1)';
    if _Exportacion then
      Begin
        Result := Result + ' and ('+ TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID + ' in (Select ' + TTipoDePedidoDeVentaDM.ID_FieldName ;
        Result := Result + ' from ' + TTipoDePedidoDeVentaDM.TableName + ' where ' + TTipoDePedidoDeVentaDM._EsExportacion+ '=1))';
      End
    else
      begin
        Result := Result + ' and ('+ TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID + ' in (Select ' + TTipoDePedidoDeVentaDM.ID_FieldName ;
        Result := Result + ' from ' + TTipoDePedidoDeVentaDM.TableName + ' where ' + TTipoDePedidoDeVentaDM._EsExportacion+ '=0))';
      end;
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaList.CreateBySucursal(_CF: TCentroDeFacturacion);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._CentroDeFacturacionID + ' = ' + IntToStr(_CF.id);
  end;
begin
  inherited Create(TPedidoDeVenta,TPedidoDeVentaDM.CreateAll(False, WhereString));
end;

function TPedidoDeVentaList.CreateForVendedor(_FiltrarPorVendedor: Boolean) : String;
begin
  Result := '';
  if (_FiltrarPorVendedor) and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.VendedorID <> NullID) then
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName +'.'+ TGrupoDeVendedorDM.ID_FieldName + ' from ' +  TGrupoDeVendedorItemDM.TableName;
    Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName +'.'+TGrupoDeVendedorItemDM._VendedorID + '=' +  IntToStr(Aplicacion.Usuario.VendedorID) + '))';
  end;
end;

constructor TPedidoDeVentaList.CreateMaximoNumero(_CF: TCentroDeFacturacion);
  function WhereString: String;
  begin
    result := '('+TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._CentroDeFacturacionID + '=' + IntToStr(_CF.ID) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := TPedidoDeVentaDM.TableName+ '.' + TPedidoDeVentaDM._Numero + ' desc';
  end;
begin
  inherited Create(TPedidoDeVenta, TPedidoDeVentaDM.CreateTop( 1, WhereString, OrderByString ));
end;

{ TPedidoDeVentaItem }

procedure TPedidoDeVentaItem.AgregarNuevoEstadoAlLog;
var
  S: TPedidoDeVentaItemStateLog;
begin
  try
    S := TPedidoDeVentaItemStateLog.Create;
    S.FestadoDePedidoDeVentaItemID := EstadoID;
    S.UsuarioID                    := Aplicacion.Usuario.ID;
    S.FechaHora                    := Aplicacion.DateTimeService.FechaHoraActual;
    S.PedidoDeVentaItemID          := ID;
    S.Observacion                  := ObservacionDeEstado;
    S.statement                    := Self.Statement;
    S.statementType                := Self.StatementType;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

procedure TPedidoDeVentaItem.AsignarEstadoAlCunio;

  Function LlenarStringList: TStringList;
  var
    EL: TEstadoDePedidoDeVentaItemList;
    codigos: String;
  begin
    Result := TStringList.Create;
    try
      EL := TEstadoDePedidoDeVentaItemList.CreateAll( false );
      EL.First;
      if EL.count = 0 then
        Exit;
      codigos := Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado + ' ';
      codigos := codigos + Aplicacion.ConstantAllocator.CodigoEstadoDocumento_ConfirmadoPorStock + ' ';
      codigos := codigos + Aplicacion.ConstantAllocator.CodigoEstadoDocumento_ConfirmadoPorExpo + ' ';
      codigos := codigos + Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion + ' ';
      codigos := codigos + Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado;
      repeat
        if (pos(EL.Actual.codigo, codigos) > 0) then
          Result.Add(IntToStr(EL.Actual.ID));
        EL.Next;
      until EL.IsLast;
    finally
      FreeAndNil(EL);
    end;
  end;

var
  PVIL: TPedidoDeVentaItemList;
  SL: TStringList;
begin
  if (Producto.fabricadoID = NullID) or (Producto.fabricado.CunioID = Aplicacion.ParametrosDelSistema.SinCunio.ID) or ( Producto.fabricado.CunioID = Aplicacion.ParametrosDelSistema.CunioEstandarApholos.ID) then
  // descarto lo que no es fabricado y cuños 00000 y 00001
    FEsCunioNuevo := False
  else
    Try
      SL := LlenarStringList;
      PVIL := TPedidoDeVentaItemList.CreateByCunioYEstadosPedidoDeVenta(Producto.fabricado.Cunio, SL);
      FEsCunioNuevo := (PVIL.count = 0);
    finally
      FreeAndNil(SL);
      FreeAndNil(PVIL);
    end;
end;

procedure TPedidoDeVentaItem.CambiarEstado(_Estado: TEstadoDePedidoDeVentaITem; _ObservacionDeEstado: string; _AgregarNuevoestadoAlLog: Boolean );
begin
  EstadoID             := _Estado.ID;
  ObservacionDeEstado  := _ObservacionDeEstado;
  esImportacionDeDatos := True;
  EsCambioDeEstado     := True;
  if (_Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
    AsignarEstadoAlCunio
  else if (_Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Anulado) then
    AnularItem
  else if (_Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_EnProduccion) then
    begin
      FfechaEntregaProduccion := Null; // pongo en null para que haga el geter correspondiente.
      FFechaDeEmpaque         := Null;
    end
  else if (_Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
    begin
      if (CantidadAsignada > 0) then
        DesAsignarStock;
      CancelarItem;
    end
  else if (_Estado.codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido) then
    begin
      if (CantidadAsignada > 0) then
        DesAsignarStock;
      CumplirItem;
    end;
  Save;
  if _AgregarNuevoestadoAlLog then
    AgregarNuevoEstadoAlLog;
end;

procedure TPedidoDeVentaItem.AnularItem;
begin
  CantidadPedida := 0;
  PrecioDeVenta  := 0;
end;

procedure TPedidoDeVentaItem.CancelarItem;
begin
  CantidadCancelada := CantidadPendiente;
  PrecioDeVenta     := 0;
end;

procedure TPedidoDeVentaItem.CrearHojasDeRuta;
var
  EHRL  : TEstadoDeHojaDeRutaList;
  HR    : THojaDeRuta;
  IDEstadoRuteado, IDEstadoPendiente : TObjectID;
  NumeroDeParte, I : Integer;
  Subcomp : TFabricado;
begin
  Try
    EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_PendienteDeRuteo, False);
    IDEstadoPendiente := EHRL.Actual.ID;
    EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_Ruteada, False);
    IDEstadoRuteado := EHRL.Actual.ID;
  finally
    FreeAndNil(EHRL);
  end;

  if (Producto.FabricadoID <> NullID) then
    begin
      NumeroDeParte := 1;
      for I := 0 to Producto.Fabricado.SubComponentes.Count - 1 do
        begin
          SubComp                          := TFabricado( Producto.Fabricado.SubComponentes.Objects[I] ); // se trabaja como Tstringlist
          HR := THojaDeRuta.Create;
          HR.NumeroImprimible              := IntToStr(CCPVNumero) + '/' + Aplicacion.TextService.RellenarAlaIzquierda(IntToStr(ItemNro),'0',2) ;
          HR.PedidoDeVentaItemID           := ID;
          HR.ProductoID                    := ProductoID;
          HR.ProductoParteID               := SubComp.ProductoID;
          HR.NumeroDeParte                 := NumeroDeParte;
          HR.ProductoPadreInmediatoParteID := Producto.Fabricado.DevolverPadreID( SubComp, Producto.Fabricado);
          HR.MaterialProductoParteID       := SubComp.Articulo.MaterialID;
          HR.CantidadPedida                := CantidadPedida * SubComp.TmpCantidadAFabricar;
          if HR.Producto.EsFabricado and HR.Producto.Fabricado.Cunio.EsCunioNuevo and not ( HR.Producto.Fabricado.Articulo.FamiliaDeArticulo.EsMatriz ) and not HR.PedidoDeVentaItem.EsMuestra then
            HR.CantidadExtra                 := Aplicacion.ParametrosDelSistema.CantidadExtraParaMuestras + Aplicacion.MathService.Porcentaje( HR.CantidadPedida , Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta )
          else
            HR.CantidadExtra                 := Aplicacion.MathService.Porcentaje( HR.CantidadPedida , Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta );
          HR.CantidadBuena                 := 0;
          HR.FechaDeCarga                  := Aplicacion.DateTimeService.FechaHoraActual;
          HR.FechaPrometida                := FechaEntrega;
          HR.EstadoDeHojaDeRutaID          := IDEstadoPendiente;
          HR.AsignarColorDeHojaDeRuta;
          HR.Save;
          HR.AgregarUltimoRuteo;
          if (HR.PasosDeFabricacion.Count > 0) then
            begin
              HR.EstadoDeHojaDeRutaID := IDEstadoRuteado;
              HR.Save;
            end;
          HR.AgregarNuevoEstadoAlLog;
          HojasDeRuta.Add(HR);
          HojasDeRuta.ApplyUpdates;
          HR.NilObject;
          NumeroDeParte := NumeroDeParte + 1;
        end;
    end
  else if (Producto.ServicioID <> NullID) and (Producto.Servicio.EsRuteable) then// servicio
    begin
      HR := THojaDeRuta.Create;
      HR.NumeroImprimible              := IntToStr(CCPVNumero) + '/' + Aplicacion.TextService.RellenarAlaIzquierda(IntToStr(ItemNro),'0',2) ;
      HR.PedidoDeVentaItemID           := ID;
      HR.ProductoID                    := ProductoID;
      HR.ProductoParteID               := ProductoID;
      HR.NumeroDeParte                 := 1;
      HR.ProductoPadreInmediatoParteID := ProductoID;
      HR.MaterialProductoParteID       := 100000051; //Material no especificado
      HR.CantidadPedida                := CantidadPedida;
      HR.CantidadExtra                 := 0;
      HR.CantidadBuena                 := 0;
      HR.FechaDeCarga                  := Aplicacion.DateTimeService.FechaHoraActual;
      HR.FechaPrometida                := FechaEntrega;
      HR.EstadoDeHojaDeRutaID          := IDEstadoPendiente;
      HR.AsignarColorDeHojaDeRuta;
      HR.Save;
      HR.AgregarUltimoRuteo;
      if (HR.PasosDeFabricacion.Count > 0) then
        begin
          HR.EstadoDeHojaDeRutaID := IDEstadoRuteado;
          HR.Save;
        end;
      HR.AgregarNuevoEstadoAlLog;
      HojasDeRuta.Add(HR);
      HojasDeRuta.ApplyUpdates;
      HR.NilObject;
    end;
end;

constructor TPedidoDeVentaItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaItemDM);
  FTipoDeFlexibilidadID             := NullID;
  FTipoDeCustomizacionID            := NullID;
  FPlazoMinimoEntregaHabilitado     := False;
  FPlazoMinimoEntrega               := False;
  FNoValidaFecha                    := False;
  FporcentajeDescuento              := 0;
  FporcentajeAnticipo               := 0;
  FitemNro                          := Null;
  fObservacion                      := '';
  FObservacionesParaFabrica         := '';
  FEsCunioNuevo                     := False;
  FGuardandoDesdeElPadre            := False;
  FesImportacionDeDatos             := False;
  FEsMuestra                        := False;
  FPrecioDeLista                    := Null;
  FPrecioVentaAnterior              := Null;
  FFechaVentaAnterior               := Null;
  FFechaDelPedido                   := Null;
  FPrecioDeVenta                    := 0;
  FTiempoEstimadoProduccion         := Null;
  FdescripcionDelItem               := '';
  FPedidoDeVenta                    := Nil;
  FObservaciondeEstado              := Null;
  FFechaPrimerFactura               := Null;
  FFechaUltimaFactura               := Null;
  FPVListaDePrecioID                := -777;
  FK1                               := -777;
  FKMP                              := -777;
  FKTime                            := -777;
  FPrecioMinimoAutorizado           := -1;
  FcantidadCancelada                := 0;
  FCantidadPedida                   := 0;
  FcantidadFacturada                := -777;
  FCantidadPreparada                := 0;
  FCantidadEntregada                := 0;
  FCantidadPendiente                := -777;
  FcantidadAsignada                 := 0;
  FCCClienteCodigo                  := Null;
  FCCClienteID                      := NullID;
  FCCClienteDescripcion             := Null;
  FCCEsPedidoExportacion            := Null;
  FCCEstadoDescripcion              := Null;
  FCCEstadoCodigo                   := Null;
  FCCGrupoDeVendedorDescripcion     := Null;
  FCCTipoDePedidoDeVentaDescripcion := Null;
  FCCTipoDePedidoDeVentaCodigo      := Null;
  FCCTipoDePedidoDeVentaSeProduceParaStock:= Null;
  FCCCunioCodigo                    := Null;
  FCCCunioDescripcion               := Null;
  FCCMonedaCodigo                   := Null;
  FCCMonedaDescripcion              := Null;
  FFBCodigo                         := Null;
  FFBDescripcion                    := Null;
  FFBTerminacionID                  := NullID;
  FFBCunioID                        := NullID;
  FFBArticuloID                     := NullID;
  FFBcrc                            := Null;
  FFBFabricadoID                    := NullID;
//  FCCFBCodigoSifab                  := Null;
  FCCPVNumeroSifab                  := Null;
  FCCClienteTribecaCodigo           := Null;
  FCCClienteTribecaID               := NullID;
  FCCClienteTribecaDescripcion      := Null;
//  FCCServicioCodigoSifab            := Null;
  FCCServicioCodigo                 := Null;
  FCCServicioDescripcion            := Null;
  FCCFlexibilidadCodigo             := Null;
  FCCFlexibilidadDescripcion        := Null;
  FCCFechaEstimadaProduccion        := Null;
  FCCObservacionProduccion          := Null;
  FesProductoDeStock                := Null;
  FRemitos                          := Nil;
  FTmpCantidadARemitir              := 0;
  FPendienteDeFacturar              := Null;
  FEsProductoRemitible              := Null;
  FCriticidadID                     := NullID;
  FCriticidad                       := Nil;
  FTmpItemDeNota                    := Null;
end;

procedure TPedidoDeVentaItem.CumplirHojasDeRuta;
var
  EHRL : TEstadoDeHojaDeRutaList;
begin
  try
    EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_Cumplida);
    HojasDeRuta.First;
    while not HojasDeRuta.IsLast do
      begin
        if HojasDeRuta.Actual.PuedeCumplir and HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoEnFabricacion and (EHRL.Count > 0) then
          begin
            HojasDeRuta.Actual.EgresarHojaDeRuta(HojasDeRuta.Actual.PasoDeFabricacionActual.PasoDeFabricacion); // debería ser el ultimo paso
            HojasDeRuta.Actual.EstadoDeHojaDeRutaID := EHRL.Actual.ID;
            HojasDeRuta.Actual.Save;
          end;
        HojasDeRuta.Next;
      end;
  finally
    FreeAndNil(EHRL);
  end;
end;

procedure TPedidoDeVentaItem.CumplirItem;
begin
  if producto.esServicio or ( ( FechaDelPedido < strToDate( '01/06/2014' ) ) and (CantidadPendiente = CantidadPedida) ) then
    CantidadEntregadaHistorica := (CantidadEntregadaHistorica + CantidadPendiente )
  else
    CantidadCancelada := (CantidadCancelada + CantidadPendiente);
end;

procedure TPedidoDeVentaItem.Delete;
begin
   if LasHojasDeRutaEstanCanceladas then
    begin
      HojasDeRuta.DeleteAll;
      DetalleDePrecios.DeleteAll;
      StateLogs.DeleteAll;
    end
   else
    Aplicacion.raiseExceptionCreate('Cancele todas las hojas de ruta antes de eliminar el ítem.');
  inherited;
end;

procedure TPedidoDeVentaItem.DesAsignarStock;
var
  SIL : TstockItemList;
  Function GetEstadoDeStockID(_Codigo : String) : TObjectID;
  var
    ESL : TEstadoDeStockList;
  begin
    Result := NullID;
    try
      ESL := TEstadoDeStockList.CreateByCodigo(_Codigo);
      if ESL.Count > 0 then
        Result := ESL.Actual.ID;
    finally
      FreeAndNil(ESL);
    end;
  end;
begin
  try
    SIL := TStockItemList.CreateByPVItemAndEstado(Self.ID, GetEstadoDeStockID(Aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado) );
    SIL.First;
    if Producto.EsStockeable and (SIL.Count > 0) then
      Aplicacion.StockManager.MoverStock( PedidoDeVenta.TipoDeFormulario,
                                          PedidoDeVenta.NumeroFinal,
                                          ItemNro,
                                          SIL.Actual.DepositoID,
                                          SIL.Actual.EstadoDeStockID,
                                          PedidoDeVenta.Cliente.DepositoVirtualDeStockID,
                                          GetEstadoDeStockID(Aplicacion.ConstantAllocator.CodigoEstadoDeStockAprobado),
                                          ProductoID,
                                          CantidadAsignada,
                                          NullID,
                                          Producto.Fabricado.Articulo.UnidadesPorEnvase);
  finally
    freeAndNil(SIL)
  end;
end;

destructor TPedidoDeVentaItem.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TPedidoDeVentaItem.FreeObjectsFromMemory;
begin
  if Assigned(FHojaDeRutaPrincipal) then
    FreeAndNil(FHojaDeRutaPrincipal);
  if Assigned(FProducto) then
    FreeAndNil(FProducto);
  if Assigned(FTipoDeFlexibilidad) then
    FreeAndNil(FTipoDeFlexibilidad);
  if Assigned(FEstado) then
    FreeAndNil(FEstado);
  if Assigned(FDetalleDePrecios) then
    FreeAndNil(FDetalleDePrecios);
  if Assigned(FStateLogs) then
    FreeAndNil(FStateLogs);
  if Assigned(FHojasDeRuta) then
    FreeAndNil(FHojasDeRuta);
end;

procedure TPedidoDeVentaItem.SetEstadoID(const Value: TObjectID);
begin
  if (Value <> FEstadoID) then
    begin
      if assigned(FEstado) then
        FreeAndNil(FEstado);
      FCCEstadoCodigo      := Null;
      FCCEstadoDescripcion := Null;
    end;
  FEstadoID := Value;
end;

procedure TPedidoDeVentaItem.SetFechaDelPedido(const Value: TFecha);
begin
  if (Value <> FFechaDelPedido) then
    FTiempoEstimadoProduccion := Null;
  FFechaDelPedido := Value;
end;

procedure TPedidoDeVentaItem.SetfechaEntrega(const Value: TFecha);
begin
  if (Value <> FfechaEntrega) then
    FObservaciondeEstado := Null;
  FfechaEntrega := Value;
end;

procedure TPedidoDeVentaItem.SetGrupoDeVendedorID(const Value: TObjectID);
begin
  if Assigned( FGrupoDeVendedor ) and (FGrupoDeVendedorID <> value) then
    FreeAndNil( FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

procedure TPedidoDeVentaItem.SetListaDePrecioID(const Value: TObjectID);
begin
  if (FListaDePrecioID<>Value) and assigned( FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  FListaDePrecioID := Value;
end;

procedure TPedidoDeVentaItem.SetMonedaDelPedidoID(const Value: TObjectID);
begin
  if Assigned( FMonedaDelPedido ) and (FMonedaDelPedidoID <> Value) then
    begin
      FreeAndNil( FMonedaDelPedido );
      FCCMonedaCodigo      := Null;
      FCCMonedaDescripcion := Null;
    end;
  FMonedaDelPedidoID := Value;
end;

procedure TPedidoDeVentaItem.SetPedidoDeVentaID(Value: TObjectID);
begin
  if (Value <> FPedidoDeVentaID) then
    If assigned(FPedidoDeVenta) then
      begin
        FreeAndNil(FPedidoDeVenta);
        FCCClienteCodigo                  := Null;
        FCCClienteDescripcion             := Null;
        FCCClienteID                      := NullID;
        FCCClienteTribecaCodigo           := Null;
        FCCClienteTribecaDescripcion      := Null;
        FCCClienteTribecaID               := NullID;
        FCCEsPedidoExportacion            := Null;
        FCCGrupoDeVendedorDescripcion     := Null;
        FCCMonedaCodigo                   := Null;
        FCCMonedaDescripcion              := Null;
        FCCPVNumeroSifab                  := Null;
        FCCTipoDePedidoDeVentaCodigo      := Null;
        FCCTipoDePedidoDeVentaDescripcion := Null;
      end;
  FPedidoDeVentaID := Value;
end;

procedure TPedidoDeVentaItem.SetPorcentajeDeTolerancia(const Value: TReal);
begin
  if (Value < 0) or (Value > 100) then
    Aplicacion.raiseExceptionCreate('El porcentaje debe estar entre 0 y 100');
  FPorcentajeDeTolerancia := Value;
end;

procedure TPedidoDeVentaItem.SetPrecioDeVenta(const Value: TReal);
begin
  FPrecioDeVenta := Aplicacion.MathService.Redondear(Value, 5);
end;

function TPedidoDeVentaItem.GetpedidoDeVenta: TPedidoDeVenta;
begin
  if not assigned(FPedidoDeVenta) then
    begin
      GetObject(TPedidoDeVenta, TPDObject(FPedidoDeVenta), pedidoDeVentaID);
      FTipoDePedidoDeVentaID := TPedidoDeVenta(FPedidoDeVenta).TipoDePedidoDeVentaID;
      FGrupoDeVendedorID     := TPedidoDeVenta(FPedidoDeVenta).GrupoDeVendedorID;
      FMonedaDelPedidoID     := TPedidoDeVenta(FPedidoDeVenta).MonedaID;
      FListaDePrecioID       := TPedidoDeVenta(FPedidoDeVenta).ListaDePrecioID;
      FFechaDelPedido        := TPedidoDeVenta(FPedidoDeVenta).FechaReal;
    end;
  Result := TPedidoDeVenta(FPedidoDeVenta);
end;

function TPedidoDeVentaItem.GetPendienteDeFacturar: TBoolean;
begin
  if FPendienteDeFacturar = Null then
    FPendienteDeFacturar := (Producto.EsServicio and not Producto.Servicio.EsConceptoARemitir) or TmpItemDeNota;
  Result := FPendienteDeFacturar;
end;

function TPedidoDeVentaItem.getPlazoMinimoEntregaHabilitado: TBoolean;
begin
  FPlazoMinimoEntregaHabilitado := False;
  if (FTipoDeFlexibilidadID <> NullID) then
    begin
      FPlazoMinimoEntregaHabilitado := TipoDeFlexibilidad.PlazoMinimoEntregaHabilitado;
      FPlazoMinimoEntrega           := TipoDeFlexibilidad.PlazoMinimoEntrega;
    end;
  Result := FPlazoMinimoEntregaHabilitado;
end;

function TPedidoDeVentaItem.GetPrecioDeLista: TReal;
begin
  If (FPrecioDeLista= Null) or (FPrecioDeLista = 0) Then
    begin
      FPrecioDeLista := 0;
      DetalleDePrecios.first;
      While Not DetalleDePrecios.IsLast do
        Begin
          FPrecioDeLista := FPrecioDeLista + DetalleDePrecios.Actual.Precio;
          DetalleDePrecios.Next;
        End;
      FPrecioDeLista := Aplicacion.MathService.Redondear(FPrecioDeLista, 5)
    end;
  Result := FPrecioDeLista;
end;

function TPedidoDeVentaItem.GetPrecioDeVenta: TReal;
begin
  FPrecioDeVenta := Aplicacion.MathService.Redondear(FPrecioDeVenta, 5);
  Result := FPrecioDeVenta;
end;

function TPedidoDeVentaItem.GetBloqueadoPorFaltaDePreciodeLista: TBoolean;
begin
  Result:= (DetalleDePreciosExigidosSinPrecio.Count>0);
end;


function TPedidoDeVentaItem.GetCantidadEntregada: TReal;
begin
  Result := FCantidadEntregada;
end;

function TPedidoDeVentaItem.GetCantidadFacturada: TReal;
begin
  if (FCantidadFacturada = -777) or (FcantidadFacturada = 0) then
    FCantidadFacturada := CantidadFacturadaALaFecha(Aplicacion.DateTimeService.FechaHoraActual);
  Result := FCantidadFacturada;
end;

function TPedidoDeVentaItem.GetCCClienteCodigo: TString;
begin
  if IsAssigned and ((FCCClienteCodigo = Unassigned) or (FCCClienteCodigo=Null)) then
    begin
      FCCClienteID          := PedidoDeVenta.ClienteID;
      FCCClienteCodigo      := PedidoDeVenta.Cliente.Codigo;
      FCCClienteDescripcion := PedidoDeVenta.Cliente.Descripcion;
    end;
  Result := FCCClienteCodigo;
end;

function TPedidoDeVentaItem.GetCCClienteDescripcion: TString;
begin
  if IsAssigned and ( (FCCClienteDescripcion = Unassigned) or (FCCClienteDescripcion=Null)) then
    begin
      FCCClienteID          := PedidoDeVenta.ClienteID;
      FCCClienteCodigo      := PedidoDeVenta.Cliente.Codigo;
      FCCClienteDescripcion := PedidoDeVenta.Cliente.Descripcion;
    end;
  Result := FCCClienteDescripcion;
end;

function TPedidoDeVentaItem.GetCCClienteTribecaCodigo: TString;
begin
  if IsAssigned and ((FCCClienteTribecaCodigo = Unassigned) or (FCCClienteTribecaCodigo = Null)) and (PedidoDeVenta.ClienteTribecaID <>NullID) then
    begin
      FCCClienteTribecaID          := PedidoDeVenta.ClienteTribecaID;
      FCCClienteTribecaCodigo      := PedidoDeVenta.ClienteTribeca.codigo;
      FCCClienteTribecaDescripcion := PedidoDeVenta.ClienteTribeca.Descripcion;
    end;
  Result := FCCClienteTribecaCodigo;
end;

function TPedidoDeVentaItem.GetCCClienteTribecaDescripcion: TString;
begin
  if IsAssigned and ((FCCClienteTribecaDescripcion = Unassigned) or (FCCClienteTribecaDescripcion = Null)) and (PedidoDeVenta.ClienteTribecaID <> NullID) then
    begin
      FCCClienteTribecaID          := PedidoDeVenta.ClienteTribecaID;
      FCCClienteTribecaCodigo      := PedidoDeVenta.ClienteTribeca.codigo;
      FCCClienteTribecaDescripcion := PedidoDeVenta.ClienteTribeca.Descripcion;
    end;
  Result := FCCClienteTribecaDescripcion;
end;

function TPedidoDeVentaItem.GetCCClienteTribecaID: TObjectID;
begin
  if IsAssigned and ((FCCClienteTribecaID = Unassigned) or (FCCClienteTribecaID = NullID)) and (PedidoDeVenta.ClienteTribecaID <> NullID)  then
    begin
      FCCClienteTribecaID          := PedidoDeVenta.ClienteTribecaID;
      FCCClienteTribecaCodigo      := PedidoDeVenta.ClienteTribeca.codigo;
      FCCClienteTribecaDescripcion := PedidoDeVenta.ClienteTribeca.Descripcion;
    end;
  Result := FCCClienteTribecaID;
end;


function TPedidoDeVentaItem.GetCCCriticidadDescripcion: TString;
begin
  if ((FCCCriticidadDescripcion = Unassigned) or (FCCCriticidadDescripcion=Null)) and ( CriticidadID <> NullID) then
    begin
      FCCCriticidadCodigo          := Criticidad.Codigo;
      FCCCriticidadDescripcion     := Criticidad.Descripcion;
    end;
  Result := FCCCriticidadDescripcion;
end;

function TPedidoDeVentaItem.GetCCCriticidadCodigo: TString;
begin
  if ((FCCCriticidadCodigo = Unassigned) or (FCCCriticidadCodigo=Null)) and ( CriticidadID <> NullID) then
    begin
      FCCCriticidadCodigo          := Criticidad.Codigo;
      FCCCriticidadDescripcion     := Criticidad.Descripcion;
    end;
  Result := FCCCriticidadCodigo;
end;



function TPedidoDeVentaItem.GetCCCunioCodigo: TString;
begin
  if (FCCCunioCodigo = Unassigned) or (FCCCunioCodigo = Null) and (ProductoID <> NullID) and (Producto.FabricadoID <> NullID) and (Producto.Fabricado.CunioID <> NullID)  then
    begin
      FCCCunioCodigo      := Producto.Fabricado.Cunio.codigo;
      FCCCunioDescripcion := Producto.Fabricado.Cunio.Descripcion;
    end;

  Result := FCCCunioCodigo;
end;

function TPedidoDeVentaItem.GetCCCunioDescripcion: TString;
begin
  if ((FCCCunioDescripcion = Unassigned) or (FCCCunioDescripcion = Null)) and (ProductoID <> NullID) and (Producto.FabricadoID <> NullID) and (Producto.Fabricado.CunioID <> NullID) then
    begin
      FCCCunioCodigo      := Producto.Fabricado.Cunio.codigo;
      FCCCunioDescripcion := Producto.Fabricado.Cunio.Descripcion;
    end;
  Result := FCCCunioDescripcion;
end;

function TPedidoDeVentaItem.GetCCEspedidoExportacion: TBoolean;
begin
  if IsAssigned and ((FCCEsPedidoExportacion = Unassigned) or (FCCEsPedidoExportacion = Null) ) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVenta.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVenta.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVenta.TipoDePedidoDeVenta.SeProduceParaStock;
      FCCEsPedidoExportacion                   := PedidoDeVenta.TipoDePedidoDeVenta.EsExportacion;
      FCCTipoDePedidoDeVentaResta              := PedidoDeVenta.TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCEsPedidoExportacion;
end;

function TPedidoDeVentaItem.GetCCEstadoCodigo: TString;
begin
  if FCCEstadoCodigo=Null then
    FCCEstadoCodigo := Estado.codigo;
  Result := FCCEstadoCodigo;
end;

function TPedidoDeVentaItem.GetCCEstadoDescripcion: TString;
begin
  if FCCEstadoDescripcion=Null then
    FCCEstadoDescripcion := Estado.Descripcion;
  Result := FCCEstadoDescripcion;
end;

//function TPedidoDeVentaItem.GetCCFBCodigoSifab: TString;
//begin
//  if IsAssigned and ((FCCFBCodigoSifab = Unassigned) or (FCCFBCodigoSifab = Null)) then
//    FCCFBCodigoSifab := Producto.CodigoSifab;
//  Result := FCCFBCodigoSifab;
//end;

function TPedidoDeVentaItem.GetCCFlexibilidadCodigo: TString;
begin
  if IsAssigned and ((FCCFlexibilidadCodigo = Unassigned) or (FCCFlexibilidadCodigo = Null)) and (TipoDeFlexibilidadID <> NullID) then
    begin
      FCCFlexibilidadCodigo      := TipoDeFlexibilidad.codigo;
      FCCFlexibilidadDescripcion := TipoDeFlexibilidad.Descripcion;
    end;
  Result := FCCFlexibilidadCodigo;
end;

function TPedidoDeVentaItem.GetCCFlexibilidadDescripcion: TString;
begin
  if IsAssigned and ( (FCCFlexibilidadDescripcion = Unassigned) or (FCCFlexibilidadDescripcion = Null)) and (TipoDeFlexibilidadID <> NullID) then
    begin
      FCCFlexibilidadCodigo      := TipoDeFlexibilidad.codigo;
      FCCFlexibilidadDescripcion := TipoDeFlexibilidad.Descripcion;
    end;
  Result := FCCFlexibilidadDescripcion;
end;

function TPedidoDeVentaItem.GetCCGrupodeVendedorDescripcion: TString;
begin
  if IsAssigned and ((FCCGrupoDeVendedorDescripcion = Unassigned) or (FCCGrupoDeVendedorDescripcion = Null)) then
    FCCGrupoDeVendedorDescripcion := PedidoDeVenta.GrupoDeVendedor.Descripcion;
  Result := FCCGrupoDeVendedorDescripcion;
end;

function TPedidoDeVentaItem.GetCCMonedaCodigo: TString;
begin
  if IsAssigned and ( (FCCMonedaCodigo = Unassigned) or (fCCMonedaCodigo=Null)) and ( MonedaDelPedidoID <> NullID) then
    begin
      fCCMonedaDescripcion := MonedaDelPedido.Descripcion;
      fCCMonedaCodigo      := MonedaDelPedido.Codigo;
    end;
  Result := FCCMonedaCodigo;
end;

function TPedidoDeVentaItem.GetCCMonedaDescripcion: TString;
begin
  if IsAssigned and ( (FCCMonedaDescripcion = Unassigned) or (fCCMonedaDescripcion=Null)) and ( MonedaDelPedidoID <> NullID) then
    begin
      fCCMonedaDescripcion := MonedaDelPedido.Descripcion;
      fCCMonedaCodigo      := MonedaDelPedido.Codigo;
    end;
  Result := FCCMonedaDescripcion;
end;

function TPedidoDeVentaItem.GetCCNivelDeServicioDeCliente: TString;
begin
  if IsAssigned and ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente = Null)) then
    begin
      FCCNivelDeServicioDeCliente                   := PedidoDeVenta.CCNivelDeServicioDeCliente;
      FCCNivelDeServicioDeClientePonderacion        := PedidoDeVenta.CCNivelDeServicioDeClientePonderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := PedidoDeVenta.CCNivelDeServicioDeClienteColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeCliente;
end;

function TPedidoDeVentaItem.GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
begin
  if IsAssigned and ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente = Null)) then
    begin
      FCCNivelDeServicioDeCliente                   := PedidoDeVenta.CCNivelDeServicioDeCliente;
      FCCNivelDeServicioDeClientePonderacion        := PedidoDeVenta.CCNivelDeServicioDeClientePonderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := PedidoDeVenta.CCNivelDeServicioDeClienteColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeClienteColorIdentificador;
end;

function TPedidoDeVentaItem.GetCCNivelDeServicioDeClientePonderacion: TReal;
begin
  if IsAssigned and ((FCCNivelDeServicioDeCliente = Unassigned) or (FCCNivelDeServicioDeCliente = Null)) then
    begin
      FCCNivelDeServicioDeCliente                   := PedidoDeVenta.CCNivelDeServicioDeCliente;
      FCCNivelDeServicioDeClientePonderacion        := PedidoDeVenta.CCNivelDeServicioDeClientePonderacion;
      FCCNivelDeServicioDeClienteColorIdentificador := PedidoDeVenta.CCNivelDeServicioDeClienteColorIdentificador;
    end;
  Result := FCCNivelDeServicioDeClientePonderacion;
end;

function TPedidoDeVentaItem.GetCCPVNumeroSifab: TEntero;
begin
  if IsAssigned and ((FCCPVNumeroSifab = Unassigned) or (FCCPVNumeroSifab = Null)) then
    FCCPVNumeroSifab := PedidoDeVenta.NumeroSifab;
  Result := FCCPVNumeroSifab;
end;


function TPedidoDeVentaItem.GetCCServicioCodigo: TString;
begin
  if (FCCServicioCodigo = Unassigned) or (FCCServicioCodigo = Null) and (ProductoID<>NullID) and (Producto.servicioID<>NullID) then
    begin
      FCCServicioCodigo      := Producto.servicio.codigo;
//      FCCServicioCodigoSifab := Producto.servicio.CodigoSifab;
      FCCServicioDescripcion := Producto.servicio.Descripcion;
    end;
  Result := FCCServicioCodigo;
end;

//function TPedidoDeVentaItem.GetCCServicioCodigoSifab: TString;
//begin
//  if (FCCServicioCodigoSifab = Unassigned) or (FCCServicioCodigoSifab = Null) and (ProductoID<>NullID) and (Producto.servicioID<>NullID) then
//    begin
//      FCCServicioCodigo      := Producto.servicio.codigo;
//      FCCServicioCodigoSifab := Producto.servicio.CodigoSifab;
//      FCCServicioDescripcion := Producto.servicio.Descripcion;
//    end;
//  Result := FCCServicioCodigoSifab;
//end;

function TPedidoDeVentaItem.GetCCServicioDescripcion: TString;
begin
  if IsAssigned and ( (FCCServicioDescripcion = Unassigned) or (FCCServicioDescripcion = Null)) and (ProductoID<>NullID) and (Producto.servicioID<>NullID) then
    begin
      FCCServicioCodigo      := Producto.servicio.codigo;
//      FCCServicioCodigoSifab := Producto.servicio.CodigoSifab;
      FCCServicioDescripcion := Producto.servicio.Descripcion;
    end;
  Result := FCCServicioDescripcion;
end;

function TPedidoDeVentaItem.GetCCTipoDeFlexibilidadCodigo: TString;
begin
  if ((FCCTipoDeFlexibilidadCodigo = Unassigned) or (FCCTipoDeFlexibilidadCodigo=Null)) and ( TipoDeFlexibilidadID <> NullID) then
    begin
      FCCTipoDeFlexibilidadCodigo          := TipoDeFlexibilidad.Codigo;
      FCCTipoDeFlexibilidadDescripcion     := TipoDeFlexibilidad.Descripcion;
    end;
  Result := FCCTipoDeFlexibilidadCodigo;
end;

function TPedidoDeVentaItem.GetCCTipoDeFlexibilidadDescripcion: TString;
begin
  if ((FCCTipoDeFlexibilidadDescripcion = Unassigned) or (FCCTipoDeFlexibilidadDescripcion=Null)) and ( TipoDeFlexibilidadID <> NullID) then
    begin
      FCCTipoDeFlexibilidadCodigo          := TipoDeFlexibilidad.Codigo;
      FCCTipoDeFlexibilidadDescripcion     := TipoDeFlexibilidad.Descripcion;
    end;
  Result := FCCTipoDeFlexibilidadDescripcion;
end;

function TPedidoDeVentaItem.GetCCTipoDePedidoDeVentaCodigo: TString;
begin
  if IsAssigned and ((FCCTipoDePedidoDeVentaCodigo = Unassigned) or (FCCTipoDePedidoDeVentaCodigo = Null) ) then
    begin
      FCCTipoDePedidoDeVentaCodigo      := PedidoDeVenta.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion := PedidoDeVenta.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVenta.TipoDePedidoDeVenta.SeProduceParaStock;
      FCCEsPedidoExportacion                   := PedidoDeVenta.TipoDePedidoDeVenta.EsExportacion;
      FCCTipoDePedidoDeVentaResta              := PedidoDeVenta.TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoDeVentaCodigo;
end;

function TPedidoDeVentaItem.GetCCTipoDePedidoDeVentaDescripcion: TString;
begin
  if IsAssigned and ((FCCTipoDePedidoDeVentaDescripcion = Unassigned) or (FCCTipoDePedidoDeVentaDescripcion = Null)) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVenta.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVenta.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVenta.TipoDePedidoDeVenta.SeProduceParaStock;
      FCCEsPedidoExportacion                   := PedidoDeVenta.TipoDePedidoDeVenta.EsExportacion;
      FCCTipoDePedidoDeVentaResta              := PedidoDeVenta.TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoDeVentaDescripcion;
end;

function TPedidoDeVentaItem.GetCCTipoDePedidoDeVentaResta: TBoolean;
begin
  if IsAssigned and ((FCCTipoDePedidoDeVentaResta = Unassigned) or (FCCTipoDePedidoDeVentaResta = Null) ) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVenta.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVenta.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVenta.TipoDePedidoDeVenta.SeProduceParaStock;
      FCCEsPedidoExportacion                   := PedidoDeVenta.TipoDePedidoDeVenta.EsExportacion;
      FCCTipoDePedidoDeVentaResta              := PedidoDeVenta.TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoDeVentaResta;
end;

function TPedidoDeVentaItem.GetCCTipoDePedidoDeVentaSeProduceParaStock: TBoolean;
begin
  if IsAssigned and ((FCCTipoDePedidoDeVentaSeProduceParaStock = Unassigned) or (FCCTipoDePedidoDeVentaSeProduceParaStock = Null)) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVenta.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVenta.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVenta.TipoDePedidoDeVenta.SeProduceParaStock;
      FCCEsPedidoExportacion                   := PedidoDeVenta.TipoDePedidoDeVenta.EsExportacion;
      FCCTipoDePedidoDeVentaResta              := PedidoDeVenta.TipoDePedidoDeVenta.Resta;
    end;
  Result := FCCTipoDePedidoDeVentaSeProduceParaStock;
end;

function TPedidoDeVentaItem.GetCriticidad: TCriticidad;
begin
  if not Assigned( FCriticidad ) and ( FCriticidadID <> nullID ) then
    GetObject(TCriticidad, FCriticidad, CriticidadID);
  Result := TCriticidad(FCriticidad);
end;

function TPedidoDeVentaItem.GetDetalleDePrecios : TPedidoDeVentaItemPrecioDeListaList;
begin
  If not Assigned(FDetalleDePrecios) Then
    GetList(TPDList(FDetalleDePrecios), TPDList(TPedidoDeVentaItemPrecioDeListaList.CreateByPedidoDeVentaItem(Self)));
  Result := TPedidoDeVentaItemPrecioDeListaList(FDetalleDePrecios);
end;

function TPedidoDeVentaItem.GetDetalleDePreciosExigidosSinPrecio: TPedidoDeVentaItemPrecioDeListaList;
begin
  If not Assigned(FDetalleDePreciosExigidosSinPrecio) Then
    GetList(TPDList(FDetalleDePreciosExigidosSinPrecio), TPDList(TPedidoDeVentaItemPrecioDeListaList.CreateByPedidoDeVentaItemBloqueados(Self)));
  Result := TPedidoDeVentaItemPrecioDeListaList(FDetalleDePreciosExigidosSinPrecio);
end;

procedure TPedidoDeVentaItem.SetProductoID(Value: TObjectID);
var
  CambioId : Boolean;
begin
  CambioId := False;
  if (Value <> FProductoID) then
    begin
      if assigned(FProducto) then
        begin
          RecalcularFechaDeFinDeFabricacion;
          FreeAndNil(FProducto);
          if assigned(DetalleDePrecios) then
            FreeAndNil( FDetalleDePrecios);
        end;
      FCCCunioCodigo         := Null;
      FCCCunioDescripcion    := Null;
//      FCCFBCodigoSifab       := Null;
      FCCServicioCodigo      := Null;
//      FCCServicioCodigoSifab := Null;
      FCCServicioDescripcion := Null;
      CambioId := True;
    end;
  FProductoID := Value;

  if CambioId then
    begin
      FK1  := -777;
      FKMP := -777;
    end;
end;

procedure TPedidoDeVentaItem.SetTipoDeCustomizacionID(const Value: TObjectID);
begin
  if (FTipoDeCustomizacionID <> Value) and Assigned(FTipoDeCustomizacion) then
    FreeAndNil(FTipoDeCustomizacion);
  FTipoDeCustomizacionID := Value;
end;

procedure TPedidoDeVentaItem.SetTipoDeFlexibilidadID(const Value: TObjectID);
begin
  if (FTipoDeFlexibilidadID <> Value) and assigned(FTipoDeFlexibilidad) then
    begin
      FreeAndNil(FTipoDeFlexibilidad);
      FesProductoDeStock  := Null;
    end;
  FTipoDeFlexibilidadID := Value;
end;

procedure TPedidoDeVentaItem.SetTipoDePedidoDeVentaID(const Value: TObjectID);
begin
  if Assigned( FTipoDePedidoDeVenta ) and (FTipoDePedidoDeVentaID <> Value) then
    FreeAndNil( FTipoDePedidoDeVenta );
  FTipoDePedidoDeVentaID := Value;
end;

function TPedidoDeVentaItem.Stock(_CodigoEstado: String): TReal;
var
  SIL : TStockItemList;
  Function GetEstadoDeStockID : TObjectID;
  var
    ESL : TEstadoDeStockList;
  begin
    Result := NullID;
    try
      ESL := TEstadoDeStockList.CreateByCodigo(_CodigoEstado);
      if ESL.Count > 0 then
        Result := ESL.Actual.ID;
    finally
      FreeAndNil(ESL);
    end;
  end;
begin
  Result := 0;
  try
    if (_CodigoEstado = Aplicacion.ConstantAllocator.CodigoEstadoDeStockEntregado) then
      begin
        RemitoItems.first;
        while not RemitoItems.islast do
          begin
            if (RemitoItems.actual.Remito.EstadoDeRemito.codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Anulado  ) and
               (RemitoItems.actual.Remito.EstadoDeRemito.codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) then
              Result := Result + RemitoItems.actual.cantidad;
            RemitoItems.Next;
          end;
        exit;
      end;

    if (_CodigoEstado = Aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado) then
      SIL := TStockItemList.CreateByPVItem(Self.ID)
    else
      SIL := TStockItemList.CreateByPVItemAndEstado(Self.ID, GetEstadoDeStockID);
    if (SIL.count >0) then
      begin
        SIL.first;
        Result := SIL.Actual.Cantidad;
      end;
  finally
    FreeAndNil( SIL);
  end
end;

function TPedidoDeVentaItem.TieneHojasDeRutaEnFabricacion: Boolean;
begin
  Result := False;
  HojasDeRuta.First;
  while not HojasDeRuta.IsLast do
    begin
      if HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoEnFabricacion then
      begin
        Result := True;
        Exit;
      end;
      HojasDeRuta.Next;
    end;
end;

function TPedidoDeVentaItem.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, ProductoID);
  Result := TProducto(FProducto);
end;

function TPedidoDeVentaItem.GetPVClienteID: TObjectID;
begin
  if IsAssigned and ((FCCClienteID = Unassigned) or (FCCClienteID=NullID) ) then
    begin
      FCCClienteID          := PedidoDeVenta.ClienteID;
      FCCClienteCodigo      := PedidoDeVenta.Cliente.Codigo;
      FCCClienteDescripcion := PedidoDeVenta.Cliente.Descripcion;
    end;
  Result := FCCClienteCodigo;
end;

function TPedidoDeVentaItem.GetPVDolarCotizacion: TReal;
begin
  if IsAssigned and ((FPVCotizacionDolar=Null) or (FPVCotizacionDolar=Unassigned)) then
    begin
      if ( CCMonedaCodigo = Aplicacion.ParametrosDelSistema.CodigoMonedaDolar) then
        FPVCotizacionDolar := CCPVMonedaCotizacion
      else
        FPVCotizacionDolar := Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar,  FechaDelPedido, True );
    end;
  Result := FPVCotizacionDolar;
end;

function TPedidoDeVentaItem.GetPVListaDePrecioID: TObjectID;
begin
  if (FPVListaDePrecioID = -777) and (FPedidoDeVentaID <> NullID) then
    FPVListaDePrecioID := PedidoDeVenta.ListaDePrecioID
  else if ListaDePrecioID <> NullID then
    FPVListaDePrecioID := ListaDePrecioID;
  Result := FPVListaDePrecioID;
end;

function TPedidoDeVentaItem.GetPVNumero: TEntero;
begin
  if IsAssigned and ((FPVNumero=Null) or (FPVNumero=Unassigned)) then
    FPVNumero := PedidoDeVenta.numero;
  Result := FPVNumero;
end;

function TPedidoDeVentaItem.GetRemitoItems: TRemitoItemList;
begin
  If not assigned(FRemitoItems) Then
    GetList(TPDList(FRemitoItems), TPDList(TRemitoItemList.CreateByPedidoDeVentaItem(Self)));
  Result := TRemitoItemList(FRemitoItems);
end;

function TPedidoDeVentaItem.GetRemitos: TRemitoList;
begin
  If not Assigned(FRemitos) Then
    GetList(TPDList(FRemitos), TPDList(TRemitoList.CreateByPedidoDeVentaItem(Self)));
  Result := TRemitoList(FRemitos);
end;

function TPedidoDeVentaItem.GetRemitosEnPreparacion: TRemitoList;
begin
  If not Assigned(FRemitosEnPreparacion) Then
    GetList(TPDList(FRemitosEnPreparacion), TPDList(TRemitoList.CreateByPedidoDeVentaItemAndEstadoDeRemitoCodigo(Self, Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado)));
  Result := TRemitoList(FRemitosEnPreparacion);
end;

function TPedidoDeVentaItem.GetRemitosEnviados: TRemitoList;
var
  R : TRemito;
begin
  If not Assigned(FRemitosEnviados) Then
    begin
      FRemitosEnviados := TRemitoList.CreateEmpty;
      Remitos.First;
      while not Remitos.Islast do
        begin
          if (Remitos.Actual.Numero > 0) and (Remitos.Actual.EstadoDeRemito.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado)
          and (Remitos.Actual.EstadoDeRemito.Codigo <> Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Anulado) then
            try
              R := TRemito.Create;
              R.Load(Remitos.Actual.ID);
              FRemitosEnviados.Add(R);
            finally
              R.NilObject;
            end;
          Remitos.next;
        end;
    end;
  Result := FRemitosEnviados;
end;

function TPedidoDeVentaItem.GetStateLogs: TPedidoDeVentaItemStateLogList;
begin
  if not assigned(FStateLogs) then
    GetList(TPDList(FStateLogs), TPDList(TPedidoDeVentaItemStateLogList.CreateByPedidoDeVentaItem(Self)) );
  Result := FStateLogs;
end;

function TPedidoDeVentaItem.GetTiempoEstimadoProduccion: TEntero;
begin
//  if (FTiempoEstimadoProduccion = Null) and (ProductoID <> NullID) and (Producto.fabricadoID <> NullID) then
  if (ProductoID <> NullID) and (Producto.fabricadoID <> NullID) then
    FTiempoEstimadoProduccion := Producto.fabricado.TiempoEstimadoTotalDelProducto
  else
    FTiempoEstimadoProduccion := 0;
  Result := FTiempoEstimadoProduccion;
end;

function TPedidoDeVentaItem.GetTipoDeCustomizacion: TTipoDeCustomizacion;
begin
  if not Assigned(FTipoDeCustomizacion) then
    GetObject(TTipoDeCustomizacion, FTipoDeCustomizacion, TipoDeCustomizacionID);
  Result := TTipoDeCustomizacion(FTipoDeCustomizacion);
end;

function TPedidoDeVentaItem.GetTipoDeFlexibilidad: TTipoDeFlexibilidad;
begin
  if not assigned(FTipoDeFlexibilidad) then
    GetObject(TTipoDeFlexibilidad, FTipoDeFlexibilidad, TipoDeFlexibilidadID);
  Result := TTipoDeFlexibilidad(FTipoDeFlexibilidad);
end;

function TPedidoDeVentaItem.GetTipoDeFlexibilidadID: TObjectID;
var
  FL: TTipoDeFlexibilidadList;
begin
  if (FTipoDeFlexibilidadID= NullID) then
    try
      FL := TTipoDeFlexibilidadList.CreateByCodigo(Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo, False);
      if FL.Count=0  then
        raise Exception.Create('No se encontró tipo de flexibilidad: ' +Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo);

      FL.First;
      FTipoDeFlexibilidadID         := FL.Actual.ID;
      FPlazoMinimoEntregaHabilitado := FL.Actual.PlazoMinimoEntregaHabilitado;
      FPlazoMinimoEntrega           := FL.Actual.PlazoMinimoEntrega;
      FNoValidaFecha                := FL.Actual.NoValidarFecha;
    finally
      FreeAndNil(FL);
    end;
  Result := FTipoDeFlexibilidadID;
end;

function TPedidoDeVentaItem.GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
begin
  if not assigned(FTipoDePedidoDeVenta) and ( TipoDePedidoDeVentaID <> NullID ) then
    GetObject( TTipoDePedidoDeVenta, FTipoDePedidoDeVenta, TipoDePedidoDeVentaID );
  Result := TTipoDePedidoDeVenta( FTipoDePedidoDeVenta);
end;

function TPedidoDeVentaItem.GetTipoDePedidoDeVentaID: TObjectID;
begin
  if ( FTipoDePedidoDeVentaID = NullID ) and (PedidoDeVentaID <> NullID)  then
    FTipoDePedidoDeVentaID := PedidoDeVenta.TipoDePedidoDeVentaID;

  Result := FTipoDePedidoDeVentaID;
end;

function TPedidoDeVentaItem.GetTmpItemDeNota: TBoolean;
begin
  if (FTmpItemDeNota = Null ) then
    if Assigned(FTipoDePedidoDeVenta) then
      FTmpItemDeNota := TipoDePedidoDeVenta.EsParaNotaDeCredito or TipoDePedidoDeVenta.EsParaNotaDeDebito
    else
      FTmpItemDeNota := False;
  Result := FTmpItemDeNota;
end;

function TPedidoDeVentaItem.GetNoValidaFecha: TBoolean;
begin
  FNoValidaFecha := False;
  if (FTipoDeFlexibilidadID <> NullID) then
    FNoValidaFecha := TipoDeFlexibilidad.NoValidarFecha;
  Result := FNoValidaFecha;
end;

function TPedidoDeVentaItem.GetObservaciondeEstado: TString;
begin
  if (FObservaciondeEstado = Unassigned) or (FObservaciondeEstado = Null) then
    If StateLogs.count > 0 then
    Begin
      StateLogs.Last;
      If StateLogs.Actual.Observacion = Null then
        FObservaciondeEstado := ''
      else
        FObservaciondeEstado := StateLogs.Actual.Observacion;
    End
    else
      FObservaciondeEstado := '';

  Result := FObservaciondeEstado;

end;

procedure TPedidoDeVentaItem.GuardarDetalleDePrecio;
begin
  if not assigned( FDetalleDePrecios ) or Modified then
    Aplicacion.DataService.ObtenerOGuardarPrecioDelProducto(Producto, MonedaDelPedido, ListaDePrecioID, True, self, False );
end;

function TPedidoDeVentaItem.LasHojasDeRutaEstanCanceladas: Boolean;
begin
  Result := True;
  HojasDeRuta.First;
  while not HojasDeRuta.IsLast do
    begin
      Result := HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoCancelado;
      if not Result then
        Exit;
      HojasDeRuta.Next;
    end;
end;

function TPedidoDeVentaItem.LasHojasDeRutaEstanEn(_PasoActual: TPasoDeFabricacion): Boolean;
  Function EstaEnPasosSiguientes( _HR : THojaDeRuta ): Boolean;
  begin
    Result := false;
    if not _HR.PasosDeFabricacion.FindPasoDeFabricacion( _PasoActual ) then // me posiciono en el paso de fabricacion que estoy evaluando
      Exit;
    _HR.PasosDeFabricacion.Next; // salto al siguiente paso para empezar a comparar

    while not _HR.PasosDeFabricacion.IsLast do
      begin
        if (_HR.PasosDeFabricacion.Actual.PasoDeFabricacion.SectorID = HojasDeRuta.Actual.CCPasoDeFabricacionActualSectorID) then
          begin
            Result := True;
            Break;
          end;
        _HR.PasosDeFabricacion.Next;
      end;
  end;
begin
  Result := True;
  HojasDeRuta.First;
  while not HojasDeRuta.IsLast and Result do
    begin
      if HojasDeRuta.Actual.ElPasoEstaEnLaHojaDeRuta(_PasoActual) then
//        if (HojasDeRuta.Actual.CCPasoDeFabricacionActualSectorID = _PasoActual.SectorID) then

        if (HojasDeRuta.Actual.PasoDeFabricacionActual.PasoDeFabricacion.SectorID = _PasoActual.SectorID)
        or HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoCancelado
        or HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoCumplido then
          Result := True
        else
          begin
            if not _PasoActual.BuscarEnPasosSiguientes then
              Result := False
            else
              Result := EstaEnPasosSiguientes( HojasDeRuta.Actual );
          end;
      HojasDeRuta.Next;
    end;
end;

function TPedidoDeVentaItem.LasHojasDeRutaEstanProgramadas: Boolean;
begin
  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  try
    Aplicacion.Sesion.SqlQuery.SQL.Text := THojaDeRutaDM.SelectCountByPedidoDeVentaItemID( ID ) ;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' and (EHR.' + TEstadoDeHojaDeRutaDM._EsEstadoNoProgramado + ' = 0) ';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' and (EHR.' + TEstadoDeHojaDeRutaDM._EsEstadoCancelado + ' = 0) ';
    Aplicacion.Sesion.SqlQuery.Open;
    Result := ( Aplicacion.Sesion.SqlQuery.FieldByName('RecordCount').value > 0 );
  finally
    Aplicacion.Sesion.SqlQuery.Close;
  end;
end;

class function TPedidoDeVentaItem.ObtenerCantidadFacturadaALaFecha(_PI: TPedidoDeVentaItem; _FechaHasta: String): TEntero;
var
  SQL : STring;
begin
  Result := 0;
  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  try
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'select Sum(Cantidad) as CantidadFacturada from RemitoItems where remitoID in ( ';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + 'select RemitoID from Remitos ';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + 'where EstadoDeRemitoID in (select EstadoDeRemitoID from EstadosDeRemito where EsEstadoFacturado = 1)) ';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + 'and PedidoDeVentaItemID = ' + IntToStr(_PI.ID);

    Aplicacion.Sesion.SqlQuery.Open;
    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        Aplicacion.Sesion.SqlQuery.First;
        Result := (Aplicacion.Sesion.SqlQuery.FieldByName('CantidadFacturada').AsInteger);
      end;
  finally
    Aplicacion.Sesion.SqlQuery.Close;
  end;

  if _PI.PedidoDeVenta.EsExclusivoServicios and (Result = 0) then
    begin
      if Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.Active then
        Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.Close;
      try
        SQL := 'Select TransaccionID from BSTransaccion where TransaccionID in( ';
        SQL := SQL + 'Select distinct TransaccionDestino.TransaccionID ';
        SQL := SQL + 'From BSOperacion OperacionDestino ';
        SQL := SQL + 'Inner Join BSTRansaccion TransaccionDestino ON OperacionDestino.TransaccionID = TransaccionDestino.TransaccionID ';
        SQL := SQL + 'Inner Join BSOperacionItem Destino          ON OperacionDestino.TransaccionID = Destino.TransaccionID ';
        SQL := SQL + 'Inner Join BSOperacionItemCancelacion       ON Destino.OperacionItemID = BSOperacionItemCancelacion.OperacionItemIDDestino and BSOperacionItemCancelacion.activo = 1 ';
        SQL := SQL + 'Inner Join BSOperacionItem Origen           ON BSOperacionItemCancelacion.OperacionItemIDOrigen = Origen.OperacionItemID ';
        SQL := SQL + 'Inner Join BSOperacion OperacionOrigen      ON Origen.TransaccionID           = OperacionOrigen.TransaccionID ';
        SQL := SQL + 'Inner Join BSTRansaccion TransaccionOrigen  ON OperacionOrigen.TransaccionID  = TransaccionOrigen.TransaccionID ';
        SQL := SQL + 'Where TransaccionOrigen.TransaccionID = ' + IntToStr( _PI.PedidoDeVenta.IDTeamplace ) + ')';

        Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.SQL.Text := SQL;

        Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.Open;
        if (Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.RecordCount > 0) then
          Result := _PI.CantidadPedida;
      finally
        Aplicacion.Sesion.ConexionTeamPlace.SqlQuery.Close;
      end;
    end;
end;

class function TPedidoDeVentaItem.ObtenerFechaFactura(_PVI : TPedidoDeVentaItem; _DevolverUltimaFactura: Boolean): TDateTime;
const
  _CodigoInternoEmpresaAPH = 2; // APH
  _CodigoInternoEmpresaTRI = 3; // TRI
var
  FIL : TFacturaItemList;
  FF  : TDateTime;
begin
  result := 0;
// Se busca fechas en Sifab
  if Aplicacion.Sesion.ConexionSifab.SqlQuery.Active then
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  try
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := 'select fechaComprobante from comprobanteFacturacion where codigoInternoComprobanteFacturacion in ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + '( select DISTINCT codigoInternoComprobanteFacturacion from comprobanteFacturacionItem where codigoInternoPedido = ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + IntToStr( _PVI.CCPVNumeroSifab ) + ' and codigoPedidoItem = ' +IntToStr( _PVI.ItemNro );
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' ) and ( codigoInternoEmpresa = ' + IntToStr( _CodigoInternoEmpresaAPH ) + ') order by fechaComprobante';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Open;

    if (Aplicacion.Sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
      begin
        if _DevolverUltimaFactura then
          Aplicacion.Sesion.ConexionSifab.SqlQuery.Last
        else
          Aplicacion.Sesion.ConexionSifab.SqlQuery.First;
        Result := (Aplicacion.Sesion.ConexionSifab.SqlQuery.FieldByName('fechaComprobante').Value);
      end;
  finally
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  end;

// Se busca fechas en Aphosoft
  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  try
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'Select ' + TFacturaDM._FechaDeImpresion + ' from ' + TFacturaItemDM.TableName;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' left join ' + TFacturaDM.TableName + ' on ' + TFacturaDM.TableName +'.'+TFacturaDM.ID_FieldName +' = ' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._FacturaID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' left join ' + TEstadoDeFacturaDM.TableName + ' on ' + TEstadoDeFacturaDM.TableName +'.'+TEstadoDeFacturaDM.ID_FieldName +' = ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' where (' + TEstadoDeFacturaDM.TableName +'.'+ TEstadoDeFacturaDM._Codigo + '='+ QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado ) +  ')';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' and (' + TFacturaItemDM._PedidoDeVentaItemID + ' = ' + IntToStr(_PVI.ID) +')';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' order by ' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion;
    Aplicacion.Sesion.SqlQuery.Open;

    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        if _DevolverUltimaFactura then
          begin
            Aplicacion.Sesion.SqlQuery.Last;
            Aplicacion.Sesion.SqlQuery.Prior;
          end
        else
          Aplicacion.Sesion.SqlQuery.First;

        FF := Aplicacion.Sesion.SqlQuery.FieldByName( TFacturaDM._FechaDeImpresion ).Value;
        if ( FF > 0 ) then
          Begin
            if (_DevolverUltimaFactura) and ( FF > Result ) then
              Result := FF;
            if (not _DevolverUltimaFactura) and (( FF < Result ) or (Result =0)) then
              Result := FF;
          End;
      end;
  finally
    Aplicacion.Sesion.SqlQuery.Close;
  end;

// Se buscan fechas en TeamPlace
  FF := TPedidoDeVentaItem.ObtenerFechaFacturaTeamplace( _PVI, _DevolverUltimaFactura );
  if ( FF > 0 ) then
    Begin
      if (_DevolverUltimaFactura) and ( FF > Result ) then
        Result := FF;
      if (not _DevolverUltimaFactura) and (( FF < Result ) or (Result =0)) then
        Result := FF;
    End;
end;

class function TPedidoDeVentaItem.ObtenerCantidadFacturadaALaFecha(_PVIID: TObjectID; _FechaHasta: String): TEntero;
var
  PVIL : TPedidoDeVentaItemList;
begin
  Result := 0;
  try
    PVIL := TPedidoDeVentaItemList.CreateByID( _PVIID  );
    PVIL.First;
    if (PVIL.count >0) then
      Result := TPedidoDeVentaItem.ObtenerCantidadFacturadaALaFecha( PVIL.actual, _FechaHasta );
  finally
    FreeAndNil( PVIL);
  end;
end;

class function TPedidoDeVentaItem.ObtenerFechaFactura(_PVIID: TObjectID; _DevolverUltimaFactura: Boolean): TDateTime;
var
  PVIL : TPedidoDeVentaItemList;
begin
  Result := 0;
  try
    PVIL := TPedidoDeVentaItemList.CreateByID( _PVIID  );
    PVIL.First;
    if (PVIL.count >0) then
      Result := TPedidoDeVentaItem.ObtenerFechaFactura( PVIL.actual, _DevolverUltimaFactura);
  finally
    FreeAndNil( PVIL);
  end;
end;


class function TPedidoDeVentaItem.ObtenerFechaFacturaTeamplace(_PVIID: TObjectID; _DevolverUltimaFactura: Boolean): TDateTime;
var
  PVIL : TPedidoDeVentaItemList;
begin
  Result := 0;
  try
    PVIL := TPedidoDeVentaItemList.CreateByID( _PVIID  );
    PVIL.First;
    if (PVIL.count >0) then
      Result := TPedidoDeVentaItem.ObtenerFechaFacturaTeamplace( PVIL.actual, _DevolverUltimaFactura);
  finally
    FreeAndNil( PVIL);
  end;
end;

class function TPedidoDeVentaItem.ObtenerFechaFacturaTeamplace(_PVI: TPedidoDeVentaItem; _DevolverUltimaFactura: Boolean): TDateTime;
var
  RL : TRemitoList;
begin
  Result := 0;

  if Aplicacion.Sesion.SqlQuery.Active then
    Aplicacion.Sesion.SqlQuery.Close;
  try
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'select ' + TRemitoItemDM.TableName + '.'+ TRemitoItemDM._RemitoID + ' as RID from ' + TRemitoItemDM.TableName;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' left join ' + TRemitoDM.TableName + ' on ' + TRemitoDM.TableName +'.'+TRemitoDM.ID_FieldName +' = ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._RemitoID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' left join ' + TEstadoDeRemitoDM.TableName + ' on ' + TEstadoDeRemitoDM.TableName +'.'+TEstadoDeRemitoDM.ID_FieldName +' = ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID;
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' where (' + TRemitoItemDM._PedidoDeVentaItemID + ' = ' + IntToStr(_PVI.ID) +')';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' and (' + TEstadoDeRemitoDM.TableName +'.'+ TEstadoDeRemitoDM._EsEstadoFacturado + '=1)';
    Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQL.Text + ' order by ' + TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision;

    Aplicacion.Sesion.SqlQuery.Open;
    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        if _DevolverUltimaFactura then
          begin
            Aplicacion.Sesion.SqlQuery.Last;
            Aplicacion.Sesion.SqlQuery.Prior;
          end
        else
          Aplicacion.Sesion.SqlQuery.First;

        try
          RL := TRemitoList.CreateByID( Aplicacion.Sesion.SqlQuery.FieldByName( 'RID' ).AsInteger );
          RL.First;
          Result := RL.Actual.FechaDeFacturaTeamplace;
        finally
          FreeAndNil(RL);
        end;
      end;
  finally
    Aplicacion.Sesion.SqlQuery.Close;
  end;

end;

Class Function TPedidoDeVentaItem.ObtenerLaFechaDeIngresoRealAExpedicion( _PVIID: TObjectID ): TDateTime;
var
  SP : TStoreProcedure;
  PFL : TPasoDeFabricacionList;
begin
  try
    SP := TStoreProcedure.Create( Aplicacion.Database );
    SP.StoredProcName     := Aplicacion.ParametrosDelSistema.StoredProc_HojasDeRuta_FechaHoraListoExpedicionItem;
    SP.Prepare;
    PFL := TPasoDeFabricacionList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionExpedicion, True);
    if (PFL.Count = 0) then
      Aplicacion.raiseExceptionCreate( 'No se encontró o no está activo el paso de fabricación: ' + Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionExpedicion );
    PFL.First;
    SP.Params[1].AsString := IntToStr(PFL.Actual.ID);
    SP.Params[2].AsString := IntToStr(_PVIID);
    SP.ExecProc;
    if SP.FieldByName(THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso).Value <> Null then
      Result := SP.FieldByName(THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso).Value
    else
      Result := 0;
  finally
    SP.Active  := False;
    FreeAndNil( SP );
    FreeAndNil( PFL );
  end;
end;

procedure TPedidoDeVentaItem.RecalcularFechaDeFinDeFabricacion;
begin
  FFechaDeFinDeFabricacion := Null;
end;

function TPedidoDeVentaItem.RecotizarProducto: TReal;
var
  NuevoPrecioDeLista    : TReal;
  NuevoDetalleDePrecios : TPedidoDeVentaItemPrecioDeListaList;
begin
  NuevoPrecioDeLista := 0;
  GetList(TPDList(NuevoDetalleDePrecios), TPDList(TPedidoDeVentaItemPrecioDeListaList.CreateByPedidoDeVentaItem(Self)));

  DetalleDePrecios.first;
  While Not DetalleDePrecios.IsLast do
    Begin
      NuevoPrecioDeLista := NuevoPrecioDeLista + NuevoDetalleDePrecios.Actual.Precio;
      DetalleDePrecios.Next;
    End;
  NuevoPrecioDeLista := Aplicacion.MathService.Redondear(NuevoPrecioDeLista, 5);
  Result := NuevoPrecioDeLista;
end;

procedure TPedidoDeVentaItem.ValidarFechas;
begin
  if Not Aplicacion.ParametrosDelSistema.ValidaFechaDeProduccionEnPedidoItem then
    Exit;

  if NoValidaFecha then
    if PlazoMinimoEntregaHabilitado and ( fechaEntrega < ( Aplicacion.DateTimeService.SumarDiasHabiles( FechaDelPedido, PlazoMinimoEntrega ) ) ) then
      Aplicacion.raiseExceptionCreate('Item: ' + IntToStr(itemNro) + #13#10 +' La fecha de entrega debe ser igual o posterior a ' + DateToStr( Aplicacion.DateTimeService.SumarDiasHabiles( FechaDelPedido, PlazoMinimoEntrega ) ))
    else
      Exit;

  if fechaEntrega < FechaDelPedido then
    Aplicacion.raiseExceptionCreate('Item: ' + IntToStr(itemNro) + #13#10 +' La fecha de entrega debe ser igual o posterior a la fecha del pedido.');

  if fechaEntrega < FechaDeFinDeFabricacion then
    Aplicacion.raiseExceptionCreate('Item: ' + IntToStr(itemNro) + #13#10 +'La fecha de entrega debe ser igual o posterior a la fecha probable de fabricación: ' + DateToStr(FechaDeFinDeFabricacion));

  if Aplicacion.DateTimeService.EsFinDeSemana( fechaEntrega ) or Aplicacion.DateTimeService.EsFeriado( fechaEntrega ) then
    Aplicacion.raiseExceptionCreate('Item: ' + IntToStr(itemNro) + #13#10 +'La fecha de entrega debe ser un día laborable.') ;
end;

function TPedidoDeVentaItem.Save: Boolean;
  procedure CalcularRentabilidades;
  begin
    if (PrecioDeVenta<>0) then
      Rentabilidad := Aplicacion.MathService.ReglaDeTresSimple( PrecioDeVenta, 100, (PrecioDeVenta - K1) )
    else
      if (K1 = 0) then
        Rentabilidad := 0
      else
        Rentabilidad := -100;

    if (PrecioDeLista<>0) then
      Rentabilidad2 := Aplicacion.MathService.ReglaDeTresSimple( PrecioDeLista, 100, (PrecioDeLista - K1) )
    else
      if (K1 = 0) then
        Rentabilidad2 := 0
      else
        Rentabilidad2 := -100;
  end;

  procedure ValidarPreciodeVenta;
  var
    CoefDescPorFamilia, PrecioMinimoCalculado : TReal;
  begin
    if Aplicacion.ParametrosDelSistema.BloqueaItemPorPrecioNoAutorizado and Producto.EsFabricado and TipoDePedidoDeVenta.ValidaPreciosDeVenta then
      begin
        if (PrecioMinimoAutorizado = Null) or (PrecioMinimoAutorizado = -1) then
          begin
            CoefDescPorFamilia := (Producto.Fabricado.Articulo.FamiliaDeArticulo.PorcentajeDescuentoAutorizado / 100);
            PrecioMinimoCalculado := PrecioDeLista - ( PrecioDeLista * CoefDescPorFamilia );
          end
        else
          PrecioMinimoCalculado := PrecioMinimoAutorizado;
        BloqueadoPorPrecioNoAutorizado := ( PrecioDeVenta <  PrecioMinimoCalculado );
      end
    else
      BloqueadoPorPrecioNoAutorizado := False;
  end;

begin
  if Self.ProductoID = NullID then
    Aplicacion.raiseExceptionCreate('Item: ' + IntToStr(itemNro) + #13#10 + 'No ha ingresado un producto válido');

  Result := inherited Save;
  FPrecioDeLista := Null;


  if not esCambioDeEstado then
    begin
      GuardarDetalleDePrecio;  // siempre antes de calcularRentabilidades
      CalcularRentabilidades;
      ValidarPreciodeVenta;   // Verifica descuentos autorizados por familia y bloquea el item

      if not esImportacionDeDatos and (PedidoDeVenta.tmpInsertarItemCostoCunioNuevo <> Null) and PedidoDeVenta.tmpInsertarItemCostoCunioNuevo then
        PedidoDeVenta.agregarItemConCostoDeMatriceria(PedidoDeVenta.tmpCostoCunioNuevo);
      Result := inherited Save;
    end
  else
    esCambioDeEstado := False;
end;

procedure TPedidoDeVentaItem.SetCodigoProductoCliente(const Value: TString);
begin
  FCodigoProductoCliente := Value;
end;

procedure TPedidoDeVentaItem.SetCriticidadID(const Value: TObjectID);
begin
  if Assigned( FCriticidad )  and  (FCriticidadID <> Value ) then
    FreeAndNil(FCriticidad);
  FCriticidadID := Value;
end;

procedure TPedidoDeVentaItem.SetearK1(_K1: TReal);
begin
  FK1 := _K1;
end;

function TPedidoDeVentaItem.GetEsProductoDeStock: TBoolean;
begin
  if FesProductoDeStock=Null then
    FesProductoDeStock := producto.EsFabricado and TipoDeFlexibilidad.NoValidarFecha and TipoDeFlexibilidad.PlazoMinimoEntregaHabilitado;
  Result := FesProductoDeStock;
end;

function TPedidoDeVentaItem.GetEsProductoRemitible: TBoolean;
begin
  if FEsProductoRemitible = Null then
    FEsProductoRemitible :=  (not TmpItemDeNota) and  (Producto.EsStockeable or (Producto.EsServicio and Producto.Servicio.EsConceptoARemitir) );
  Result := FEsProductoRemitible;
end;

function TPedidoDeVentaItem.GetEstado: TEstadoDePedidoDeVentaITem;
begin
  if not assigned(FEstado) then
    GetObject(TEstadoDePedidoDeVentaITem, FEstado, FEstadoID);
  Result := TEstadoDePedidoDeVentaITem(FEstado);

end;

function TPedidoDeVentaItem.GetFechaDeFinDeFabricacion: TFecha;
begin
  if (FFechaDeFinDeFabricacion = Null) or (FFechaDeFinDeFabricacion = Unassigned) then
    FFechaDeFinDeFabricacion := Aplicacion.DateTimeService.SumarDiasHabiles( FechaDelPedido, TiempoEstimadoProduccion );
  Result := FFechaDeFinDeFabricacion;
end;

function TPedidoDeVentaItem.GetFechaDelPedido: TFecha;
begin
  if (FFechaDelPedido = Null) or (FFechaDelPedido = Unassigned) then
    FFechaDelPedido := PedidoDeVenta.FechaReal;
  Result := FFechaDelPedido;
end;

function TPedidoDeVentaItem.GetfechaEntregaProduccion: TFecha;
begin
  if LasHojasDeRutaEstanProgramadas then
    begin
      if (FFechaEntregaProduccion = Null) or (FfechaEntregaProduccion = 0) then
        if Assigned(HojaDeRutaPrincipal) then
          FfechaEntregaProduccion := HojaDeRutaPrincipal.CCFechaDeFinDePasoUltimoPasoDeFabricacion
        else if (FfechaEntregaProduccion = null) then
          FfechaEntregaProduccion := fechaEntrega;
    end
  else
    FfechaEntregaProduccion := fechaEntrega;
  Result := FfechaEntregaProduccion;
end;

function TPedidoDeVentaItem.GetFacturas: TFacturaList;
begin
  If not Assigned(FFacturas) Then
    GetList(TPDList(FFacturas), TPDList(TFacturaList.CreateByPedidoDeVentaItem(Self)));
  Result := TFacturaList(FFacturas);
end;

function TPedidoDeVentaItem.GetFBCodigo: TString;
begin
  if IsAssigned and ((FFBCodigo = Unassigned) or (FFBCodigo = Null)) then
    FFBCodigo := Producto.Codigo;
  Result := FFBCodigo;
end;

function TPedidoDeVentaItem.GetFechaDeEmpaque: TFechaHora;
begin
  if (FFechaDeEmpaque = Null) or (FFechaDeEmpaque = 0) then
    begin
      if assigned(FHojaDeRutaPrincipal) then
        FFechaDeEmpaque := HojaDeRutaPrincipal.CCFechaDeEgresoPasoDeFabricacionEmpaque;
      if ((FFechaDeEmpaque = Null) or (FFechaDeEmpaque = 0)) and assigned(FHojaDeRutaPrincipal) then
        FFechaDeEmpaque := HojaDeRutaPrincipal.CCFechaDeFinDePasoPasoDeFabricacionEmpaque;
      if not assigned(FHojaDeRutaPrincipal) and ((FFechaDeEmpaque = Null) or (FFechaDeEmpaque = 0)) then
        begin
          Result := FechaEntrega;
          exit;
        end;
    end;
  Result := FFechaDeEmpaque;
end;

function TPedidoDeVentaItem.GetFechaPrimerFactura: TFecha;
begin
  if (FFechaPrimerFactura = Null) then
    FFechaPrimerFactura := ObtenerFechaFactura( self, False );
  Result := FFechaPrimerFactura;
end;

function TPedidoDeVentaItem.GetFechaUltimaFactura: TFecha;
begin
  if (FFechaUltimaFactura = Null) then
    FFechaUltimaFactura := ObtenerFechaFactura( Self, True );
  Result := FFechaUltimaFactura;
end;

function TPedidoDeVentaItem.GetFechaVentaAnterior: TFecha;
begin
  if (FFechaVentaAnterior = Null) and (ProductoID <> NullID) and (Producto.fabricadoID <> NullID) then
    FFechaVentaAnterior := Producto.fabricado.GetFechaDeVentaAnterior(PedidoDeVenta.Cliente, FechaDelPedido, PedidoDeVentaID);
  Result := FFechaVentaAnterior;
end;

function TPedidoDeVentaItem.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) and ( GrupoDeVendedorID <> NullID ) then
    GetObject( TGrupoDeVendedor, FGrupoDeVendedor, GrupoDeVendedorID  );
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TPedidoDeVentaItem.GetGrupoDeVendedorID: TObjectID;
begin
  if ( FGrupoDeVendedorID=NullID ) and (PedidoDeVentaID <> NullID)  then
    FGrupoDeVendedorID := PedidoDeVenta.GrupoDeVendedorID;
  Result := FGrupoDeVendedorID;
end;

function TPedidoDeVentaItem.GetHojaDeRutaPrincipal: THojaDeRuta;
begin
  if not Assigned(FHojaDeRutaPrincipal) then
    if (HojasDeRuta.Count > 0) and LasHojasDeRutaEstanProgramadas then
      begin
        HojasDeRuta.First;
        while (not HojasDeRuta.IsLast) and (HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoCancelado or (HojasDeRuta.Actual.NumeroDeParte <> 1)) do
          HojasDeRuta.Next;

        if HojasDeRuta.islast then // ver con Hernan si esto puede ser así. No debería haber NumeroDeParte = 0
          begin
            HojasDeRuta.First;
            while (not HojasDeRuta.IsLast) and (HojasDeRuta.Actual.EstadoDeHojaDeRuta.EsEstadoCancelado) do
              HojasDeRuta.Next;
          end;

        GetObject(THojaDeRuta, FHojaDeRutaPrincipal, HojasDeRuta.Actual.ID);
      end;
  Result := THojaDeRuta(FHojaDeRutaPrincipal);
end;

function TPedidoDeVentaItem.GetHojasDeRuta: THojaDeRutaList;
begin
  if not Assigned(FHojasDeRuta) then
    GetList(TPDList(FHojasDeRuta), TPDList(THojaDeRutaList.CreateByItem(Self)));
  Result := FHojasDeRuta;
end;

function TPedidoDeVentaItem.GetIDTeamplace: TEntero;
begin
  Result := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( PedidoDeVenta.NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace) + ') and (' + TPedidoDeVentaDM._TeamplaceTalonarioID +' = ' + TPedidoDeVentaDM._TeamplaceTalonarioPedidoLocal+ ')' , TRemitoDM._TeamplaceID );
end;

function TPedidoDeVentaItem.GetImporteTotal: TReal;
var
  Descuento : TReal;
begin
  Descuento := (PrecioDeVenta * PorcentajeDescuento / 100);
  FImporteTotal := Aplicacion.MathService.Redondear(CantidadPedida * (PrecioDeVenta - Descuento), 2);
  Result := FImporteTotal;
end;

function TPedidoDeVentaItem.GetImporteTotalPrecioDeLista: TReal;
//var
//  Descuento : TReal;
begin
//  Descuento := (PrecioDeLista * PorcentajeDescuento / 100);
//  FImporteTotalPrecioDeLista := Aplicacion.MathService.Redondear(CantidadPedida * (PrecioDeLista - Descuento), 2);
  FImporteTotalPrecioDeLista := Aplicacion.MathService.Redondear(CantidadPedida * PrecioDeLista, 2);
  Result := FImporteTotalPrecioDeLista;
end;

function TPedidoDeVentaItem.GetK1: TReal;
var
  DMFormulas : TDMFormulas;
begin
  if (FK1=-777) then
    Try
      DMFormulas := TDMFormulas.Create(Nil);
      if (Producto.FabricadoID <> NullID) then
        begin
          DMFormulas.PedidoDeVentaItem := Self;
          DMFormulas.JvInterpreterProgram.Pas.Clear;
          DMFormulas.JvInterpreterProgram.Pas.Add(Aplicacion.FormulasDelSistema.FormulaK1);
          DMFormulas.JvInterpreterProgram.Run;
          FK1 := DMFormulas.JvInterpreterProgram.VResult;
        end;
    Finally
      if Assigned (DMFormulas) then
        FreeAndNil(DMFormulas);
    end;
  Result := FK1;
end;

function TPedidoDeVentaItem.GetKMP: TReal;
begin
  if (FKMP=-777) and Producto.EsFabricado  then
    FKMP := Producto.Fabricado.ObtenerKMateriaPrimaEnMonedaSolicitada( Producto.Fabricado, MonedaDelPedido, ListaDePrecio.FechaCotizacionConversionAOficial );
  Result := FKMP;
end;

function TPedidoDeVentaItem.GetKTime: TReal;
begin
  If (FKTime = -777) then
    FKTime := Producto.Fabricado.TiempoTotalPasosDeFabricacionEnSegundos / 60;
  Result := FKTime;
end;

function TPedidoDeVentaItem.GetListaDePrecio: TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio, FListaDePrecio, ListaDePrecioID);
  Result := TListaDePrecio(FListaDePrecio);
end;

function TPedidoDeVentaItem.GetListaDePrecioID: TObjectID;
begin
  if ( FListaDePrecioID = NullID ) and (PedidoDeVentaID <> NullID ) then
    FListaDePrecioID := PedidoDeVenta.ListaDePrecioID;
  Result := FListaDePrecioID;
end;

function TPedidoDeVentaItem.GetMonedaDelPedido: TMoneda;
begin
  if not Assigned(FMonedaDelPedido) then
    GetObject(TMoneda, FMonedaDelPedido, MonedaDelPedidoID);
  Result := TMoneda(FMonedaDelPedido);
end;

function TPedidoDeVentaItem.GetMonedaDelPedidoID: TObjectID;
begin
  if ( FMonedaDelPedidoID = NullID ) and (PedidoDeVentaID <> NullID) then
    FMonedaDelPedidoID := PedidoDeVenta.MonedaID;
  Result := FMonedaDelPedidoID;
end;

{ TPedidoDeVentaItemDM }
class function TPedidoDeVentaItemDM.TableName: string;
begin
  Result := 'PedidoDeVentaItems';
end;

class function TPedidoDeVentaItemDM.CampoCantidadAsignada: String;
begin
  Result := '(ISNULL( (Select Top 1 ' + TStockItemDM.TableName + '.' + TStockItemDM._Cantidad + ' from  ' + TStockItemDM.TableName + ' where (' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' = ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName;
  Result := Result + ') and (' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + '=' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID;
  Result := Result + ') and (' + TStockItemDM.TableName + '.' +  TStockItemDM._EstadoDeStockID + ' in (select ' + TEstadoDeStockDM.ID_FieldName + ' from ' + TEstadoDeStockDM.TableName + ' where ' + TEstadoDeStockDM._Codigo + ' = ' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado)  + '))) , 0))';
end;

class function TPedidoDeVentaItemDM.CampoCantidadEntregada: String; //suma de los remitos  + cantidad entregada historica
begin
  Result := '((select isnull( sum( RI.'+ TRemitoItemDM._Cantidad + '  ),0 )' ;
  Result := Result + ' from ' + TRemitoItemDM.TableName + ' RI ';
  Result := Result + 'left Join ' + TRemitoDM.TableName + ' R on RI.' + TRemitoItemDM._RemitoID +' = R.' + TRemitoDM.ID_FieldName + ' ';
  Result := Result + 'left Join ' + TEstadoDeRemitoDM.TableName + ' ER on R.'+ TRemitoDM._EstadoDeRemitoID +' = ER.' + TEstadoDeRemitoDM.ID_FieldName + ' ' ;
  Result := Result + 'where RI.' + TRemitoItemDM._PedidoDeVentaItemID + ' = ' + TPedidoDeVentaItemDM.TableName +'.'+ TPedidoDeVentaItemDM.ID_FieldName + ' ';
  Result := Result + 'and (ER.' + TEstadoDeRemitoDM._SumaACantidadEnviada+' = 1))+';
  Result := Result + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._CantidadEntregadaHistorica+')';
end;

class function TPedidoDeVentaItemDM.CampoCantidadFacturada: String;
begin
  Result := '(Select ISNull( Sum( FI.'+ TFacturaItemDM._Cantidad + '  ),0 )' ;
  Result := Result + ' from ' + TFacturaItemDM.TableName + ' FI ';
  Result := Result + 'left Join ' + TFacturaDM.TableName + ' F on FI.' + TFacturaItemDM._FacturaID +' = F.' + TFacturaDM.ID_FieldName + ' ';
  Result := Result + 'left Join ' + TEstadoDeFacturaDM.TableName + ' EF on F.'+ TFacturaDM._EstadoDeFacturaID +' = EF.' + TEstadoDeFacturaDM.ID_FieldName + ' ' ;
  Result := Result + 'where FI.' + TFacturaItemDM._PedidoDeVentaItemID + ' = ' +  TPedidoDeVentaItemDM.TableName +'.'+ TPedidoDeVentaItemDM.ID_FieldName + ' ';
  Result := Result + 'and EF.' +  TEstadoDeFacturaDM._Codigo + ' = ' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado)+') ';
end;

class function TPedidoDeVentaItemDM.CampoCantidadPendiente: String;
var
  CantidadPendiente : String;
begin
  CantidadPendiente := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._CantidadPedida + ' - ' +
                       TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._CantidadCancelada + ' - ' + CampoCantidadEntregada;
  Result := '( CASE WHEN (' + CantidadPendiente + ') < 0 THEN 0 Else ' + CantidadPendiente + '  END )';
end;

class function TPedidoDeVentaItemDM.CampoCantidadPreparada: String;
begin
//  Result := '(select isnull( sum( RI.'+ TRemitoItemDM._Cantidad + '  ),0 )' ;
//  Result := Result + ' from ' + TRemitoItemDM.TableName + ' RI ';
//  Result := Result + 'left Join ' + TRemitoDM.TableName + ' R on RI.' + TRemitoItemDM._RemitoID +' = R.' + TRemitoDM.ID_FieldName + ' ';
//  Result := Result + 'left Join ' + TEstadoDeRemitoDM.TableName + ' ER on R.'+ TRemitoDM._EstadoDeRemitoID +' = ER.' + TEstadoDeRemitoDM.ID_FieldName + ' ' ;
//  Result := Result + 'where RI.' + TRemitoItemDM._ProductoID + ' = ' +  TPedidoDeVentaItemDM.TableName +'.'+ TPedidoDeVentaItemDM._ProductoID + ' ';
//  Result := Result + 'and ER.' +  TEstadoDeRemitoDM._Codigo + ' = ' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado)+') ';

  Result := '(select isnull( sum( RI.'+ TRemitoItemDM._Cantidad + '  ),0 )' ;
  Result := Result + ' from ' + TRemitoItemDM.TableName + ' RI ';
  Result := Result + 'left Join ' + TRemitoDM.TableName + ' R on RI.' + TRemitoItemDM._RemitoID +' = R.' + TRemitoDM.ID_FieldName + ' ';
  Result := Result + 'left Join ' + TEstadoDeRemitoDM.TableName + ' ER on R.'+ TRemitoDM._EstadoDeRemitoID +' = ER.' + TEstadoDeRemitoDM.ID_FieldName + ' ' ;
  Result := Result + 'where RI.' + TRemitoItemDM._PedidoDeVentaItemID + ' = ' +  TPedidoDeVentaItemDM.TableName +'.'+ TPedidoDeVentaItemDM.ID_FieldName + ' ';
  Result := Result + 'and ER.' +  TEstadoDeRemitoDM._Codigo + ' = ' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado)+') ';
end;

class function TPedidoDeVentaItemDM.CampoFechaEstimadaProduccion: String;
begin
  Result :=          '(select Top 1 ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._FechaEstimadaProduccion + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._PedidoDeVentaItemID + ' = ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' and ';
  Result := Result + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' not in (';
  Result := Result + ' select ' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' Where ';
  Result := Result + TEstadoDeHojaDeRutaDM._Codigo + ' in (';
  Result := Result + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_Cancelada ) + ',' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_Parcial ) + ',' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_NoConforme ) + ')';
  Result := Result + ') order by ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._NumeroDeParte + ' Asc )';
end;

class function TPedidoDeVentaItemDM.CampoObservacionProduccion: String;
begin
  Result := '(select Top 1 ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._ObservacionProduccion + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._PedidoDeVentaItemID + ' = ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' and ';
  Result := Result + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' not in (';
  Result := Result + ' select ' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' Where ';
  Result := Result + TEstadoDeHojaDeRutaDM._Codigo + ' in (';
  Result := Result + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_Cancelada ) + ',' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_Parcial ) + ',' + QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoHR_NoConforme ) + ')';
  Result := Result + ') order by ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._NumeroDeParte + ' Asc )';
end;

class function TPedidoDeVentaItemDM.CampoPasoDeFabricacion: String;
begin
  Result := '(select ' +  TPasoDeFabricacionDM.TableName+'.'+TPasoDeFabricacionDM._Codigo + ' from ' + TPasoDeFabricacionDM.TableName+
            ' where ' + TPasoDeFabricacionDM.TableName+'.'+TPasoDeFabricacionDM.ID_FieldName+' in '+
            '(select Top 1 '+ TPasoDeFabricacionDM.ID_FieldName + ' from ' + THojaDeRutaPasoDeFabricacionDM.TableName +
	          ' where  ' + THojaDeRutaPasoDeFabricacionDM.TableName+'.'+THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID+  ' in '+
			      '(select MAX( '+ THojaDeRutaDM.ID_FieldName +') from '+ THojaDeRutaDM.TableName +
				    ' where ' + THojaDeRutaDM.TableName+'.'+THojaDeRutaDM._PedidoDeVentaItemID +'='+
            TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName +' and '+
            THojaDeRutaDM.TableName+'.'+THojaDeRutaDM._NumeroDeParte + '=1 and '+
            THojaDeRutaDM.TableName+'.'+THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in (select '+
            TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' where ' + TEstadoDeHojaDeRutaDM._EsEstadoEnFabricacion +' =1 ))'+
            ' and (not '+ THojaDeRutaPasoDeFabricacionDM.TableName+'.'+THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso + ' is null) and ('+
            THojaDeRutaPasoDeFabricacionDM.TableName+'.'+THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is null) ))';
end;

class function TPedidoDeVentaItemDM.CampoPrecioDeLista: String;
begin
  Result := 'ISNULL( (SELECT SUM(' + TPedidoDeVentaItemPrecioDeListaDM._Precio + ') FROM ' +
             TPedidoDeVentaItemPrecioDeListaDM.TableName + ' PVIP WHERE PVIP.' + TPedidoDeVentaItemPrecioDeListaDM._PedidoDeVentaItemID + ' = ' +
             TPedidoDeVentaItemDM.TableName + '.' +  TPedidoDeVentaItemDM.ID_FieldName + '),0)';
end;

class function TPedidoDeVentaItemDM.CreateCompuesto( _Parte: Integer ) : String;
  Function CamposString : String;
  var
    CamposTablaItems, CamposTablaPedidos, CamposTablaFabricados,CamposTablaServicios : string;
    CamposTablaEmpresas, CamposTablaTiposDePedido, CamposTablaEstadosDePedidoItem, CamposTablaGrupoDeVendedor, CamposTablaMarcas: string;
    CamposTablaArticulos, CamposTablaTerminacion, CamposTablaCunios , CamposTablaTribeca, CamposTablaMoneda, CamposTablaNivelDeServicioDeCliente : string;
    CamposTablaActividad, CamposCanalDeDistribucion : string;
    CamposTablaCentroDeFacturacion, CamposProductos, CamposTablaFlexibilidad, CamposTablaTipoDeCustomizacion, CamposTablaHojasDeRuta: String;
    CamposTablaGrupoDeVendedorTribeca : String;
    CamposCriticidad : String;
  begin
    CamposTablaItems       := TPedidoDeVentaItemDM.TableName + '.*';
    CamposTablaHojasDeRuta :=                          CampoObservacionProduccion   + ' as ' + _CCHRObservacionProduccion + ', ';
    CamposTablaHojasDeRuta := CamposTablaHojasDeRuta + CampoFechaEstimadaProduccion + ' as ' + _CCHRFechaEstimadaProduccion;
    CamposTablaPedidos :=                      TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero                        + ' AS ' + _CCPVNumero + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._NumeroSifab                   + ' AS ' + _CCPVNumeroSifab + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Observaciones                 + ' AS ' + _CCPVObservaciones + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._observacionesParaFabrica      + ' AS ' + _CCPVobservacionesParaFabrica + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._CondiciondeVentaID            + ' AS ' + _CCPVCondiciondeVentaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal                     + ' AS ' + _CCPVFechaReal + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EmpresaFleteID                + ' AS ' + _CCPVEmpresaFleteID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._GrupoDeVendedorID             + ' AS ' + _CCPVGrupoDeVendedorID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._MarcaID                       + ' AS ' + _CCPVMarcaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._monedaID                      + ' AS ' + _CCPVmonedaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._MonedaCotizacion              + ' AS ' + _CCPVMonedaCotizacion + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._NroOrdenDeCompraCliente       + ' AS ' + _CCPVNroOrdenDeCompraCliente + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._PorcentComisionPorCobranza    + ' AS ' + _CCPVPorcentComisionPorCobranza + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._PorcentComisionPorFacturacion + ' AS ' + _CCPVPorcentComisionPorFacturacion + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._DirecciondeEntregaID          + ' AS ' + _CCPVDirecciondeEntregaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDeFormularioID            + ' AS ' + _CCPVTipoDeFormularioID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ImporteNetoDelPedido          + ' AS ' + _CCPVImporteNetoDelPedido + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._DescuentoEspecial             + ' AS ' + _CCPVDescuentoEspecial + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._NumeroLetrado                 + ' AS ' + _CCPVNumeroLetrado + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EstadoDePedidoDeVentaID       + ' AS ' + _CCPVEstadoDePedidoDeVentaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID         + ' AS ' + _CCPVTipoDePedidoDeVentaID + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._EntregaTotal                  + ' AS ' + _CCPVEntregaTotal + ', ';
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ListaDePrecioID               + ' AS ' + _CCPVListaDePrecioID + ', ' ;
    CamposTablaPedidos := CamposTablaPedidos + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._DolarCotizacion               + ' AS ' + _CCPVDolarCotizacion ;

    CamposTablaMarcas  := TMarcaDM.TableName + '.' + TMarcaDM._Descripcion + ' AS ' + _CCMarca ;
    CamposTablaFabricados :=                         TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID    + ' as ' + _CCFBarticuloID    + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID       + ' as ' + _CCFBcunioID       + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' as ' + _CCFBterminacionID + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM.ID_FieldName   + ' as ' + _CCFBFabricadoID   + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo        + ' as ' + _CCFBCodigo        + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Crc           + ' as ' + _CCFBCrc           + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._desarrolloID  + ' as ' + _CCFBDesarrolloID  + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Descripcion   + ' as ' + _CCFBDescripcion;
    CamposTablaCentroDeFacturacion := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM._codigo + ' as ' + _CCPVCentroDeFacturacionCodigo;
    CamposTablaServicios :=                        TServicioDM.TableName + '.' + TServicioDM._Codigo      + ' as ' +_CCServicioCodigo + ', ';
//    CamposTablaServicios := CamposTablaServicios + TServicioDM.TableName + '.' + TServicioDM._Codigo      + ' as ' +_CCServicioCodigoSifab + ', ';
    CamposTablaServicios := CamposTablaServicios + TServicioDM.TableName + '.' + TServicioDM._Descripcion + ' as ' +_CCServicioDescripcion;
    CamposProductos := ' IsNULL('+ TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo +','+   TServicioDM.TableName + '.' + TServicioDM._Codigo+') as '+ _CCPCodigoDeProducto;
    CamposTablaEmpresas :=                       TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' as ' + _CCClienteID + ', ';
    CamposTablaEmpresas := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCClienteCodigo + ', ';
    CamposTablaEmpresas := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCClienteDescripcion;
    CamposTablaTribeca :=                      'ET.' + TAbstractEmpresaDM.ID_FieldName + ' as ' + _CCClienteTribecaID + ', ';
    CamposTablaTribeca := CamposTablaTribeca + 'ET.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCClienteTribecaCodigo + ', ';
    CamposTablaTribeca := CamposTablaTribeca + 'ET.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCClienteTribecaDescripcion;
    CamposTablaTiposDePedido :=                            TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' as ' + _CCEsPedidoExportacion + ', ';
    CamposTablaTiposDePedido := CamposTablaTiposDePedido + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Codigo        + ' as ' + _CCTipoDePedidoDeVentaCodigo + ', ';
    CamposTablaTiposDePedido := CamposTablaTiposDePedido + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Descripcion   + ' as ' + _CCTipoDePedidoDeVentaDescripcion + ', ';
    CamposTablaTiposDePedido := CamposTablaTiposDePedido + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._seProduceParaStock+' as ' + _CCTipoDePedidoSeProduceParaStock + ', ';
    CamposTablaTiposDePedido := CamposTablaTiposDePedido + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Resta +' as ' + _CCTipoDePedidoDeVentaResta ;
    CamposTablaFlexibilidad  :=                            TTipoDeFlexibilidadDM.TableName + '.' + TTipoDeFlexibilidadDM._Codigo + ' as ' + _CCTipoDeFlexibilidadCodigo + ', ';
    CamposTablaFlexibilidad  := CamposTablaFlexibilidad  + TTipoDeFlexibilidadDM.TableName + '.' + TTipoDeFlexibilidadDM._Descripcion + ' as ' + _CCTipoDeFlexibilidadDescripcion ;
    CamposTablaEstadosDePedidoItem :=                                  TEstadoDePedidoDeVentaItemDM.TableName + '.'+ TEstadoDePedidoDeVentaItemDM._Codigo + ' as ' + _CCEstadoDeItemCodigo + ', ';
    CamposTablaEstadosDePedidoItem := CamposTablaEstadosDePedidoItem + TEstadoDePedidoDeVentaItemDM.TableName + '.'+ TEstadoDePedidoDeVentaItemDM._Descripcion + ' as ' + _CCEstadoDeItemDescripcion;
    CamposTablaGrupoDeVendedor := TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Descripcion + ' as ' + _CCGrupoDeVendedorDescripcion;
    CamposTablaGrupoDeVendedorTribeca := 'GVT.' + TGrupoDeVendedorDM._Descripcion + ' as ' + _CCGrupoDeVendedorTribeca;
    CamposTablaMoneda := TMonedaDM.TableName + '.' + TMonedaDM._Codigo + ' as ' + _CCMonedaCodigo + ', ';;
    CamposTablaMoneda := CamposTablaMoneda +  TMonedaDM.TableName + '.' + TMonedaDM._Descripcion + ' as ' + _CCMonedaDescripcion;
    CamposTablaCunios :=                     TCunioDM.TableName + '.' + TCunioDM._Codigo      + ' as ' + _CCCunioCodigo + ', ';
    CamposTablaCunios := CamposTablaCunios + TCunioDM.TableName + '.' + TCunioDM._Descripcion + ' as ' + _CCCunioDescripcion;
    CamposTablaArticulos :=                     TArticuloDM.TableName + '.' + TArticuloDM._Codigo      + ' as ' + _CCArticuloCodigo + ', ';
    CamposTablaArticulos := CamposTablaArticulos + TArticuloDM.TableName + '.' + TArticuloDM._Descripcion + ' as ' + _CCArticuloDescripcion;
    CamposTablaTerminacion :=                     TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo      + ' as ' + _CCTerminacionCodigo + ', ';
    CamposTablaTerminacion := CamposTablaTerminacion + TTerminacionDM.TableName + '.' + TTerminacionDM._Descripcion + ' as ' + _CCTerminacionDescripcion;
    CamposTablaNivelDeServicioDeCliente := 'NSC.' + TNivelDeServicioDeClienteDM._Descripcion + ' as ' + _CCNivelDeServicioDeCliente +', ';
    CamposTablaNivelDeServicioDeCliente := CamposTablaNivelDeServicioDeCliente + 'NSC.' + TNivelDeServicioDeClienteDM._Ponderacion + ' as ' + _CCNivelDeServicioDeClientePonderacion+', ';
    CamposTablaNivelDeServicioDeCliente := CamposTablaNivelDeServicioDeCliente + 'NSC.' + TNivelDeServicioDeClienteDM._ColorIdentificador + ' as ' + _CCNivelDeServicioDeClienteColorIdentificador;
    CamposTablaTipoDeCustomizacion      := TTipoDeCustomizacionDM.TableName + '.' + TTipoDeCustomizacionDM._Descripcion + ' as ' + _CCTipoDeCustomizacion ;
    CamposTablaActividad                := TActividadDM.TableName + '.' + TActividadDM._Descripcion  + ' as ' + _CCActividad;
    CamposCanalDeDistribucion           := TCanalDeDistribucionDM.TableName + '.' + TCanalDeDistribucionDM._Descripcion  + ' as ' + _CCCanalDeDistribucion;
    CamposCriticidad := TCriticidadDM.TableName + '.' + TCriticidadDM._Codigo + ' as ' + _CCCriticidadCodigo + ', ' + TCriticidadDM.TableName + '.' + TCriticidadDM._Descripcion + ' as ' + _CCCriticidadDescripcion;

    Result :=          CamposTablaItems               + ', ';
    Result := Result + CamposTablaPedidos             + ', ';
    Result := Result + CamposTablaHojasDeRuta         + ', ';
    Result := Result + CamposTablaMarcas              + ', ';
    Result := Result + CamposTablaFabricados          + ', ';
    Result := Result + CamposTablaServicios           + ', ';
    Result := Result + CamposProductos                + ', ';
    Result := Result + CamposTablaEmpresas            + ', ';
    Result := Result + CamposTablaTribeca             + ', ';
    Result := Result + CamposTablaTiposDePedido       + ', ';
    Result := Result + CamposTablaFlexibilidad        + ', ';
    Result := Result + CamposTablaTipoDeCustomizacion + ', ';
    Result := Result + CamposTablaEstadosDePedidoItem + ', ';
    Result := Result + CamposTablaCunios              + ', ';
    Result := Result + CamposTablaArticulos           + ', ';
    Result := Result + CamposTablaTerminacion         + ', ';
    Result := Result + CamposTablaMoneda              + ', ';
    Result := Result + CamposTablaGrupoDeVendedor     + ', ';
    Result := Result + CamposTablaGrupoDeVendedorTribeca   +', ';
    Result := Result + CamposTablaCentroDeFacturacion      +', ';
    Result := Result + CamposTablaNivelDeServicioDeCliente +', ';
    Result := Result + CamposTablaActividad                +', ';
    Result := Result + CamposCanalDeDistribucion           +', ';
    Result := Result + TPedidoDeVentaItemDM.CampoPrecioDeLista     + ' as ' + _PrecioDeLista      + ', ';
    Result := Result + TPedidoDeVentaItemDM.CampoCantidadAsignada  + ' as ' + _CantidadAsignada   + ', ';
    Result := Result + TPedidoDeVentaItemDM.CampoCantidadPreparada + ' as ' + _CantidadPreparada  + ', ';
    Result := Result + TPedidoDeVentaItemDM.CampoCantidadEntregada + ' as ' + _CantidadEntregada  + ', ';
    Result := Result + TPedidoDeVentaItemDM.CampoCantidadFacturada + ' as ' + _CantidadFacturada  + ', ';
    Result := Result + TPedidoDeVentaItemDM.CampoCantidadPendiente + ' as ' + _CantidadPendiente  + ', ';
    Result := Result + CamposCriticidad  + ', ';
    Result := Result + CampoPasoDeFabricacion+ ' as ' + _CCPasoDeFabricacionCodigo;
  end;

  Function LeftJoinString : String;
  var
    ID1TablaItems, ID2TablaItems, ID3TablaItems, ID4TablaItems, ID5TablaItems, ID6TablaItems, ID7TablaItems: String;
    IDTablaPedidos, ID1TablaPedidos, ID2TablaPedidos, ID3TablaPedidos, ID4TablaPedidos, ID5TablaPedidos, ID6TablaPedidos, ID7TablaPedidos, ID8TablaPedidos : String;
    IDTablaFabricados, ID1TablaFabricados, ID2TablaFabricados, ID3TablaFabricados: String;
    IDTablaEmpresas, ID2TablaEmpresas, IDTablaEstadosDePedidoItem: string;
    IDTablaTiposDePedido, IDTablaServicios, IDTablaGruposDeVendedor , IDTablaCunios, IDTablaArticulos, IDTablaTerminaciones, IDTablaTribeca, IDTablaMoneda : String;
    IDTablaNivelDeServicioDeCliente, ID2TablaNivelDeServicioDeCliente: string;
    IDTablaCentroDeFacturacion, IDTablaTipoDeFlexibilidad, IDTablaTipoDeCustomizacion, IDTablaMarcas, IDTablaActividad, ID2TablaActividad : String;
    IDTablaCanalDeDistribucion, IDTablaGrupoDeVendedorTribeca, IDTablaCriticidad : String;

  begin
    ID1TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    ID2TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._ProductoID;
    ID3TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._ProductoID;
    ID4TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._EstadoID;
    ID5TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._TipoDeFlexibilidadID;
    ID6TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._TipoDeCustomizacionID;
    ID7TablaItems              := TableName + '.' + TPedidoDeVentaItemDM._CriticidadID;

    ID1TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteID;
    ID2TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._TipoDePedidoDeVentaID;
    ID3TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._GrupoDeVendedorID;
    ID4TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteTribecaID;
    ID5TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._monedaID;
    ID6TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._CentroDeFacturacionID;
    ID7TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._MarcaID;
    ID8TablaPedidos            := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._GrupoVendedorTribecaID;

    IDTablaFabricados          := TFabricadoDM.TableName                 + '.' + TFabricadoDM._ProductoID;
    ID1TablaFabricados         := TFabricadoDM.TableName                 + '.' + TFabricadoDM._CunioID;
    ID2TablaFabricados         := TFabricadoDM.TableName                 + '.' + TFabricadoDM._ArticuloID;
    ID3TablaFabricados         := TFabricadoDM.TableName                 + '.' + TFabricadoDM._TerminacionID;
    IDTablaPedidos             := TPedidoDeVentaDM.TableName             + '.' + TPedidoDeVentaDM.ID_FieldName;
    IDTablaServicios           := TServicioDM.TableName                  + '.' + TServicioDM._ProductoID;
    IDTablaEmpresas            := TAbstractEmpresaDM.TableName           + '.' + TAbstractEmpresaDM.ID_FieldName;
    ID2TablaEmpresas           := TAbstractEmpresaDM.TableName           + '.' + TAbstractEmpresaDM._ActividadID;

    IDTablaActividad           := TActividadDM.TableName                 + '.' + TActividadDM.ID_FieldName;
    ID2TablaActividad          := TActividadDM.TableName                 + '.' + TActividadDM._CanalDeDistribucionID;
    IDTablaCanalDeDistribucion := TCanalDeDistribucionDM.TableName       + '.' + TCanalDeDistribucionDM.ID_FieldName;
    IDTablaTiposDePedido       := TTipoDePedidoDeVentaDM.TableName       + '.' + TTipoDePedidoDeVentaDM.ID_FieldName;
    IDTablaTipoDeFlexibilidad  := TTipoDeFlexibilidadDM.TableName        + '.' + TTipoDeFlexibilidadDM.ID_FieldName;
    IDTablaTipoDeCustomizacion := TTipoDeCustomizacionDM.TableName       + '.' + TTipoDeCustomizacionDM.ID_FieldName;
    IDTablaCriticidad          := TCriticidadDM.TableName                + '.' + TCriticidadDM.ID_FieldName;
    IDTablaEstadosDePedidoItem := TEstadoDePedidoDeVentaItemDM.TableName + '.' + TEstadoDePedidoDeVentaItemDM.ID_FieldName;
    IDTablaGruposDeVendedor    := TGrupoDeVendedorDM.TableName           + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDTablaGrupoDeVendedorTribeca                                    := 'GVT.' + TGrupoDeVendedorDM.ID_FieldName;
    IDTablaMoneda              := TMonedaDM.TableName                    + '.' + TMonedaDM.ID_FieldName;
    IDTablaCunios              := TCunioDM.TableName                     + '.' + TCunioDM.ID_FieldName;
    IDTablaArticulos           := TArticuloDM.TableName                  + '.' + TArticuloDM.ID_FieldName;
    IDTablaTerminaciones       := TTerminacionDM.TableName               + '.' + TTerminacionDM.ID_FieldName;
    IDTablaCentroDeFacturacion := TCentroDeFacturacionDM.TableName       + '.' + TCentroDeFacturacionDM.ID_FieldName;
    IDTablaMarcas              := TMarcaDM.TableName                     + '.' + TMarcaDM.ID_FieldName;
    IDTablaNivelDeServicioDeCliente  := TAbstractEmpresaDM.TableName     + '.' + TAbstractEmpresaDM._NivelDeServicioDeClienteID;
    ID2TablaNivelDeServicioDeCliente                                 := 'NSC.' + TNivelDeServicioDeClienteDM.ID_FieldName;

    IDTablaTribeca          := 'ET.' + TAbstractEmpresaDM.ID_FieldName;
    Result := Result + ' Left Join ' + TPedidoDeVentaDM.TableName             + ' on (' + ID1TablaItems      + '=' + IDTablaPedidos             + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName                 + ' on (' + ID2TablaItems      + '=' + IDTablaFabricados          + ') ';
    Result := Result + ' Left Join ' + TServicioDM.TableName                  + ' on (' + ID3TablaItems      + '=' + IDTablaServicios           + ') ';
    Result := Result + ' Left Join ' + TEstadoDePedidoDeVentaItemDM.TableName + ' on (' + ID4TablaItems      + '=' + IDTablaEstadosDePedidoItem + ') ';
    Result := Result + ' Left Join ' + TTipoDeFlexibilidadDM.TableName        + ' on (' + ID5TablaItems      + '=' + IDTablaTipoDeFlexibilidad  + ') ';
    Result := Result + ' Left Join ' + TTipoDeCustomizacionDM.TableName       + ' on (' + ID6TablaItems      + '=' + IDTablaTipoDeCustomizacion + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName           + ' on (' + ID1TablaPedidos    + '=' + IDTablaEmpresas            + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName        + ' ET on (' + ID4TablaPedidos    + '=' + IDTablaTribeca             + ') ';
    Result := Result + ' Left Join ' + TTipoDePedidoDeVentaDM.TableName       + ' on (' + ID2TablaPedidos    + '=' + IDTablaTiposDePedido       + ') ';
    Result := Result + ' Left Join ' + TMonedaDM.TableName                    + ' on (' + ID5TablaPedidos    + '=' + IDTablaMoneda              + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName           + ' on (' + ID3TablaPedidos    + '=' + IDTablaGruposDeVendedor    + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName       + ' GVT on (' + ID8TablaPedidos    + '=' + IDTablaGrupoDeVendedorTribeca + ') ';
    Result := Result + ' Left Join ' + TCunioDM.TableName                     + ' on (' + ID1TablaFabricados + '=' + IDTablaCunios              + ') ';
    Result := Result + ' Left Join ' + TArticuloDM.TableName                  + ' on (' + ID2TablaFabricados + '=' + IDTablaArticulos           + ') ';
    Result := Result + ' Left Join ' + TTerminacionDM.TableName               + ' on (' + ID3TablaFabricados + '=' + IDTablaTerminaciones       + ') ';
    Result := Result + ' Left Join ' + TCentroDeFacturacionDM.TableName       + ' on (' + ID6TablaPedidos    + '=' + IDTablaCentroDeFacturacion + ') ';
    Result := Result + ' Left Join ' + TMarcaDM.TableName                     + ' on (' + ID7TablaPedidos    + '=' + IDTablaMarcas + ') ';
    Result := Result + ' Left Join ' + TNivelDeServicioDeClienteDM.TableName  + ' NSC on (' + IDTablaNivelDeServicioDeCliente + '=' + ID2TablaNivelDeServicioDeCliente + ') ';
    Result := Result + ' Left Join ' + TActividadDM.TableName                 + ' on (' + ID2TablaEmpresas   + '=' + IDTablaActividad + ') ';
    Result := Result + ' Left Join ' + TCanalDeDistribucionDM.TableName       + ' on (' + ID2TablaActividad  + '=' + IDTablaCanalDeDistribucion + ') ';
    Result := Result + ' Left Join ' + TCriticidadDM.TableName                + ' on (' + ID7TablaItems      + '=' + IDTablaCriticidad + ') ';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TPedidoDeVentaItemDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TPedidoDeVentaItemDM.ID_FieldName: string;
begin
  Result := 'PedidoDeVentaItemID';
end;

procedure TPedidoDeVentaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVentaItem(PDObject) do
  begin
    IDField[_PedidoDeVentaID]               := PedidoDeVentaID;
    FloatField[_CantidadPedida]             := CantidadPedida;
    FloatField[_CantidadCancelada]          := CantidadCancelada;
    FloatField[_CantidadEntregadaHistorica] := CantidadEntregadaHistorica;
    DateField[_FechaEntrega]                := FechaEntrega;
    DateField[_FechaEntregaProduccion]      := FechaEntregaProduccion;
    DateField[_FechaDeFinDeFabricacion]     := FechaDeFinDeFabricacion;
    DateTimeField[_FechaDeEmpaque]          := FechaDeEmpaque;
    IntegerField[_ItemNro]                  := ItemNro;
    StringField[_DescripcionDelItem]        := DescripcionDelItem;
    StringField[_Observacion]               := Observacion;
    StringField[_observacionesParaFabrica]  := ObservacionesParaFabrica;
    IDField[_ProductoID]                    := ProductoID;
    FloatField[_PrecioVentaAnterior]        := PrecioVentaAnterior;
    FloatField[_PrecioDeVenta]              := PrecioDeVenta;
    BooleanField[_BloqueadoPorPrecioNoAutorizado] := BloqueadoPorPrecioNoAutorizado;
    FloatField[_PrecioMinimoAutorizado]           := PrecioMinimoAutorizado;
    IntegerField[_TiempoEstimadoProduccion] := TiempoEstimadoProduccion;
    StringField[_CodigoProductoCliente]     := CodigoProductoCliente;
    FloatField[_PorcentajeDescuento]        := PorcentajeDescuento;
    FloatField[_PorcentajeAnticipo]         := PorcentajeAnticipo;
    IntegerField[_Lote]                     := Lote;
    IDField[_EstadoID]                      := EstadoID;
    BooleanField[_ParaProduccion]           := ParaProduccion;
    BooleanField[_EsMuestra]                := EsMuestra;
    BooleanField[_EntregaTotal]             := EntregaTotal;
    IDField[_TipoDeFlexibilidadID]          := TipoDeFlexibilidadID;
    BooleanField[_EsCunioNuevo]             := EsCunioNuevo;
    FloatField[_KTime]                      := KTime;
    FloatField[_KMP]                        := KMP;
    FloatField[_K1]                         := K1; // este se calcula con los dos anteriores, dejar aca.
    FloatField[_Rentabilidad]               := Rentabilidad;
    FloatField[_Rentabilidad2]              := Rentabilidad2;
    IDField[_TipoDeCustomizacionID]         := TipoDeCustomizacionID;
    BooleanField[_EsProductoRemitible]      := EsProductoRemitible;
    BooleanField[_PendienteDeFacturar]      := PendienteDeFacturar;
    IDField[_CriticidadID]                  := CriticidadID;
    IntegerField[_UnidadesPorPrenda]        := UnidadesPorPrenda;
  end;
end;

procedure TPedidoDeVentaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVentaItem(PDObject) do
    begin
      FPedidoDeVentaID            := IDField[_PedidoDeVentaID];
      FCantidadPedida             := FloatField[_CantidadPedida];
      FCantidadCancelada          := FloatField[_CantidadCancelada];
      FCantidadEntregadaHistorica := FloatField[_CantidadEntregadaHistorica];
      FCantidadAsignada           := FloatField[_CantidadAsignada];
      FCantidadPreparada          := FloatField[_CantidadPreparada];
      FcantidadFacturada          := FloatField[_CantidadFacturada];
      FCantidadEntregada          := FloatField[_CantidadEntregada];
      FCantidadPendiente          := FloatField[_CantidadPendiente];
      FDescripcionDelItem         := StringField[_DescripcionDelItem];
      FfechaEntrega               := DateField[_FechaEntrega];
      FfechaEntregaProduccion     := DateField[_FechaEntregaProduccion];
      FFechaDeFinDeFabricacion    := DateField[_FechaDeFinDeFabricacion];
      FFechaDeEmpaque             := DateField[_FechaDeEmpaque];
      FItemNro                    := IntegerField[_ItemNro];
      fObservacion                := StringField[_Observacion];
      FObservacionesParaFabrica   := StringField[_observacionesParaFabrica];
      FProductoID                 := IDField[_ProductoID];
      FPrecioDeLista              := FloatField[_PrecioDeLista];
      FPrecioDeVenta              := FloatField[_PrecioDeVenta];
      fBloqueadoPorPrecioNoAutorizado  := BooleanField[_BloqueadoPorPrecioNoAutorizado];
      FPrecioMinimoAutorizado     := FloatField[_PrecioMinimoAutorizado];
      FPrecioVentaAnterior        := FloatField[_PrecioVentaAnterior];
      FTiempoEstimadoProduccion   := IntegerField[_TiempoEstimadoProduccion];
      FCodigoProductoCliente      := StringField[_CodigoProductoCliente];
      FporcentajeDescuento        := FloatField[_PorcentajeDescuento];
      FporcentajeAnticipo         := FloatField[_PorcentajeAnticipo];
      FLote                       := IntegerField[_Lote];
      FEstadoID                   := IDField[_EstadoID];
      FEstadoOriginalID           := IDField[_EstadoID];
      FParaProduccion             := BooleanField[_ParaProduccion];
      FEsMuestra                  := BooleanField[_EsMuestra];
      FEntregaTotal               := BooleanField[_EntregaTotal];
      FTipoDeFlexibilidadID       := IDField[_TipoDeFlexibilidadID];
      FEsCunioNuevo               := IDField[_EsCunioNuevo];
      FK1                         := FloatField[_K1];
      FKMP                        := FloatField[_KMP];
      FKTime                      := FloatField[_KTime];
      FRentabilidad               := FloatField[_Rentabilidad];
      FRentabilidad2              := FloatField[_Rentabilidad2];
      FTipoDeCustomizacionID      := IDField[_TipoDeCustomizacionID];
      FEsProductoRemitible        := BooleanField[_EsProductoRemitible];
      FPendienteDeFacturar        := BooleanField[_PendienteDeFacturar];
      FCriticidadID               := IDField[_CriticidadID] ;
      FUnidadesPorPrenda          := IntegerField[_UnidadesPorPrenda];

      // CAMPOS PEDIDOSDEVENTA
      FPVNumero                           := IntegerField[_CCPVNumero];
//      FCCPVNumeroSifab                    := IntegerField[_CCPVNumeroSifab];
      FPVTipoDePedidoDeVentaID            := IDField[_CCPVTipoDePedidoDeVentaID];
      FPVObservaciones                    := StringField[_CCPVObservaciones];
      FPVObservacionesParaFabrica         := StringField[_CCPVobservacionesParaFabrica];
      FPVFechaReal                        := DateField[_CCPVFechaReal];
      FPVClienteID                        := IDField[_CCPVClienteID];
      FPVCondicionDeVentaID               := IDField[_CCPVCondiciondeVentaID];
      FPVEmpresaFleteID                   := IDField[_CCPVEmpresaFleteID];
      FPVGrupoDeVendedorID                := IDField[_CCPVGrupoDeVendedorID];
      FPVMarcaID                          := IDField[_CCPVMarcaID];
      FPVMonedaID                         := IDField[_CCPVmonedaID];
      FPVNroOrdenDeCompraCliente          := StringField[_CCPVNroOrdenDeCompraCliente];
      FPVPorcentajeComisionPorCobranza    := FloatField[_CCPVPorcentComisionPorCobranza];
      FPVPorcentajeComisionPorFacturacion := FloatField[_CCPVPorcentComisionPorFacturacion];
      FPVTipoDeFormularioID               := IDField[_CCPVTipoDeFormularioID];
      FPVMonedaCotizacion                 := FloatField[_CCPVMonedaCotizacion];
      FPVDireccionDeEntregaID             := IDField[_CCPVDirecciondeEntregaID];
      FPVImporteNetoDelPedido             := FloatField[_CCPVImporteNetoDelPedido];
      FPVCentroDeFacturacionCodigo        := StringField[_CCPVCentroDeFacturacionCodigo];
      FPVNumeroLetrado                    := StringField[_CCPVNumeroLetrado];
      FPVEstadoDePedidoDeVentaID          := IDField[_CCPVEstadoDePedidoDeVentaID];
      FPVDescuentoEspecial                := FloatField[_CCPVDescuentoEspecial];
      FPVEntregaTotal                     := BooleanField[_CCPVEntregaTotal];
      FPVListaDePrecioID                  := IDField[_CCPVListaDePrecioID];
      FListaDePrecioID                    := IDField[_CCPVListaDePrecioID];
      // CAMPOS FABRICADOS
      FFBArticuloID    := IDField[_CCFBarticuloID];
      FFBCunioID       := IDField[_CCFBcunioID];
      FFBTerminacionID := IDField[_CCFBterminacionID];
      FFBcrc           := IntegerField[_CCFBCrc];
      FFBDesarrolloID  := IDField[_CCFBDesarrolloID];
      FFBFabricadoID   := IDField[_CCFBFabricadoID];
      FFBCodigo        := StringField[_CCFBCodigo];
      FFBDescripcion   := StringField[_CCFBDescripcion];
      // CAMPOS FABRICADOS
      FCCMonedaCodigo       := StringField[_CCMonedaCodigo];
      FCCMonedaDescripcion  := StringField[_CCMonedaDescripcion];
      // CAMPOS DE CLIENTES
      FCCClienteID          := IntegerField[_CCClienteID];
      FCCClienteCodigo      := StringField[ _CCClienteCodigo];
      FCCClienteDescripcion := StringField[ _CCClienteDescripcion];
      // CAMPOS DE NIVEL DE SERVICIO DE CLIENTE
      FCCNivelDeServicioDeCliente                   := StringField[_CCNivelDeServicioDeCliente        ];
      FCCNivelDeServicioDeClientePonderacion        := FloatField[_CCNivelDeServicioDeClientePonderacion ];
      FCCNivelDeServicioDeClienteColorIdentificador := IntegerField[_CCNivelDeServicioDeClienteColorIdentificador ];
      // CAMPOS SERVICIOS
      FCCServicioCodigo   := StringField[_CCServicioCodigo];
      FCCServicioDescripcion := StringField[_CCServicioDescripcion];
//      FCCServicioCodigoSifab := StringField[_CCServicioCodigoSifab];
      // Tipo de pedido
      FCCEsPedidoExportacion := BooleanField[_CCEsPedidoExportacion];
      FCCTipoDePedidoDeVentaDescripcion        := StringField[_CCTipoDePedidoDeVentaDescripcion];
      FCCTipoDePedidoDeVentaCodigo             := StringField[_CCTipoDePedidoDeVentaCodigo];
      FCCTipoDePedidoDeVentaResta              := BooleanField[_CCTipoDePedidoDeVentaResta];
      FCCTipoDePedidoDeVentaSeProduceParaStock := BooleanField[_CCTipoDePedidoSeProduceParaStock];

      //Estado del item
      FCCEstadoCodigo      := StringField[_CCEstadoDeItemCodigo];
      FCCEstadoDescripcion := StringField[_CCEstadoDeItemDescripcion];
      // grupo de vendedor
      FCCGrupodeVendedorDescripcion := StringField[_CCGrupoDeVendedorDescripcion];
      // Tipo De Flexibilidad
      FCCTipoDeFlexibilidadCodigo       := StringField[_CCTipoDeFlexibilidadCodigo];
      FCCTipoDeFlexibilidadDescripcion  := StringField[_CCTipoDeFlexibilidadDescripcion];
      // Hojas de ruta
      FCCObservacionProduccion          := StringField[_CCHRObservacionProduccion];
      FCCFechaEstimadaProduccion        := DateField[_CCHRFechaEstimadaProduccion];
      // Articulos
      FCCArticuloCodigo                 := StringField[_CCArticuloCodigo];
      FCCArticuloDescripcion            := StringField[_CCArticuloDescripcion];
      // Terminaciones
      FCCTerminacionCodigo              := StringField[_CCTerminacionCodigo];;
      FCCTerminacionDescripcion         := StringField[_CCTerminacionDescripcion];
      // Marcas
      FCCMarca                          := StringField[_CCMarca];
      // Actividad
      FCCActividad                      := StringField[_CCActividad];
      // CanalDeDistribucion
      FCCCanalDeDistribucion            := StringField[_CCCanalDeDistribucion];
      // Grupo vendedor tribeca
      FCCGrupoDeVendedorTribeca         := StringField[_CCGrupoDeVendedorTribeca];
      FCCClienteTribecaCodigo           := StringField[_CCClienteTribecaCodigo];
      FCCClienteTribecaDescripcion      := StringField[_CCClienteTribecaDescripcion];
      // tipo de customizacion
      FCCTipoDeCustomizacion            := StringField[_CCTipoDeCustomizacion];
      //Criticidad
      FCCCriticidadCodigo               := StringField[_CCCriticidadCodigo];
      FCCCriticidadDescripcion          := StringField[_CCCriticidadDescripcion];
      // paso de fabricacion
      FCCPasoDeFabricacionCodigo        := StringField[_CCPasoDeFabricacionCodigo];

    end;
end;

{ TPedidoDeVentaItemList }
function TPedidoDeVentaItemList.GetActual: TPedidoDeVentaItem;
begin
  Result := TPedidoDeVentaItem(CurrentObject);
end;

function TPedidoDeVentaItemList.CreateNewObject: TPDObject;
begin
  Result := TPedidoDeVentaItem.Create;
end;

function TPedidoDeVentaItemList.FindItem(_Item: TEntero;
  _Rest: Boolean): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.itemNro = _Item);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function TPedidoDeVentaItemList.FindItemAndPedido(_NumPed, _Item: TEntero) : Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := ((Actual.itemNro = _Item) and (Actual.CCPVNumero = _NumPed));
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function TPedidoDeVentaItemList.FindPedidoID(_PID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.PedidoDeVentaID = _PID);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor TPedidoDeVentaItemList.CreateAll(_Top: Integer = -1; _Descendente: Boolean = True);
  Function OrderBy : String;
  begin
    if _Descendente then
      Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' Desc' + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  if (_Top <> -1) then
    inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateTop(_Top, '', OrderBy))
  else
    inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False));
end;

constructor TPedidoDeVentaItemList.CreateByBloqueados;
  Function WhereString : String;
  var
    EPVIL : TEstadoDePedidoDeVentaItemList;
  begin
    Try
      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_BloqueadoPorPrecioNoAutorizado );
      if EPVIL.count=0 then
        Aplicacion.RaiseExceptionCreate('No se encontró el estado de items de pedido: ' +  QuotedStr( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_BloqueadoPorPrecioNoAutorizado )  );
      Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._BloqueadoPorPrecioNoAutorizado + ' =1 )';
      Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + ' = ' + IntToStr(  EPVIL.Actual.ID) +')';
    Finally
      FreeAndNil( EPVIL );
    End;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByCondicion(_Condicion: String; _OrderBy: String);
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, _Condicion, False, _OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByCunio(_C: TCunio);
  function obtenerINdeProductos: String;
  begin
    Result := '( select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ';
    Result := Result + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + ')';
  end;
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' in ' + obtenerINdeProductos;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByCunioYEstado(_C: TCunio; _E: TEstadoDePedidoDeVentaITem; _DescartarID: TObjectID);
  Function WhereString : String;
  begin
    if (_DescartarID = NullID) then
      Result := '(' + TPedidoDeVentaItemDM._EstadoID + ' = ' + IntToStr(_E.ID) + ') and ' + TPedidoDeVentaItemDM.TableName + '.' +
                TPedidoDeVentaItemDM._ProductoID + ' in (' + 'select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName +
                ' where (' + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + '))'
    else
      Result := '(' + TPedidoDeVentaItemDM._EstadoID + ' = ' + IntToStr(_E.ID) + ') and (' + TPedidoDeVentaItemDM.ID_FieldName + ' <> ' +
          IntToStr(_DescartarID)+ ') and ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' in (' + 'select ' +
          TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where (' + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + '))';
  end;
begin
    inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False,WhereString))
end;

constructor TPedidoDeVentaItemList.CreateByCunioYEstadosPedidoDeVenta(_C: TCunio; _EstadosID: TStringList);
  Function Condicion2: String;
  var
    I: Integer;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' +TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion1: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' in ( select ';
    Result := Result + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ';
    Result := Result + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + ') ';
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + ' and ' + Condicion2));
end;

constructor TPedidoDeVentaItemList.CreateByEstado(_EstadoID: TObjectID);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + '=' + IntToStr(_EstadoID) + ')';
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString ));
end;

constructor TPedidoDeVentaItemList.CreateByEstadosPedidoDeVenta(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  function WhereString: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVEstadoDePedidoDeVentaID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ',' + IntToStr(_Est.Actual.EstadoDePedidoDeVentaID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';
  end;

begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;
constructor TPedidoDeVentaItemList.CreateByEstadosDeItemsYCliente( _EPVIL: TEstadoDePedidoDeVentaItemList; _C: TCliente);
  function WhereString: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr(_C.ID );
    Result := Result + ' and ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + ' in (-1';
    _EPVIL.First;
    Repeat
      Result := Result + ',' + IntToStr(_EPVIL.Actual.ID);
      _EPVIL.Next;
    until _EPVIL.IsLast;
    Result := Result + ')';
  end;
begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;


constructor TPedidoDeVentaItemList.CreateByEstadoYProduccion(_Estado: TEstadoDePedidoDeVentaITem; _ParaProduccion: Boolean);
Var
  SioNo: String;

  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + '=' + IntToStr(_Estado.ID);
    Result := Result + ') And (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ParaProduccion + ' = ' + SioNo + ')';
  end;

begin
  if _ParaProduccion then
    SioNo := '1'
  Else
    SioNo := '0';

  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: String);
  function WhereString: String;
  begin
    Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' ) ';
  end;
  function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' desc, ';
    Result := Result + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._numero + ', ' + TPedidoDeVentaItemDM.TableName +'.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHastaAndCliente(_FechaDesde, _FechaHasta: String; _Cliente: TCliente);
  function WhereString: String;
  begin
    Result := '(' + TPedidoDeVentaDM._ClienteID + '=' + IntToStr(_Cliente.ID) + ') and (';
    Result := Result + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' ) ';
  end;
  function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' desc, ';
    Result := Result + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._numero + ', ' + TPedidoDeVentaItemDM.TableName +'.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHastaAndEstado(_FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID; _ProductoID: TObjectID; _Descendente: Boolean; _FiltraParaTiraVentas: Boolean);
  Function ObtenerEstadoBorradorID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaItemList;
  Begin
    Result := nullID;
    Try
      EL := TEstadoDePedidoDeVentaItemList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False);
      if (EL.count = 0) then
        Raise Exception.Create('No existe un estado de Borrador en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if (_EstadoID <> NullID) then
      Result := Result + ' And ( ' + TPedidoDeVentaItemDM._EstadoID + ' = ' + IntToStr(_EstadoID) + ' )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;
  end;

  Function Condicion2: String;
  begin
    if (_ProductoID <> NullID) then
      Result := ' And ( ' + TPedidoDeVentaItemDM.TableName + '.' +  TPedidoDeVentaItemDM._ProductoID + ' = ' + IntToStr(_ProductoID) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHastaAndEstadoAndCodigoLike(_FechaDesde,_FechaHasta: String; _EstadoID: TObjectID; _CodigoLike: string;_BuscaServicios: Boolean; _Descendente, _FiltraParaTiraVentas: Boolean);

  Function ObtenerEstadoBorradorID: TObjectID;
  Var
    EL: TEstadoDePedidoDeVentaItemList;
  Begin
    Result := nullID;
    Try
      EL := TEstadoDePedidoDeVentaItemList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Borrador, False);
      if (EL.count = 0) then
        Raise Exception.Create('No existe un estado de Borrador en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if (_EstadoID <> NullID) then
      Result := Result + ' And ( ' + TPedidoDeVentaItemDM._EstadoID + ' = ' +IntToStr(_EstadoID) + ' )';

    if _FiltraParaTiraVentas then
      begin
        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._TipoDePedidoDeVentaID
                         + ' in ( Select ' + TTipoDePedidoDeVentaDM.ID_FieldName + ' from ' + TTipoDePedidoDeVentaDM.TableName
                         + ' where ' + TTipoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';

        Result := Result + ' and ( ' + TPedidoDeVentaDM.TableName + '.' +  TPedidoDeVentaDM._EstadoDePedidoDeVentaID
                         + ' in ( Select ' + TEstadoDePedidoDeVentaDM.ID_FieldName + ' from ' + TEstadoDePedidoDeVentaDM.TableName
                         + ' where ' + TEstadoDePedidoDeVentaDM._FiguraEnTiraDiaria + ' =1 ))';
      end;
  end;

  Function Condicion2: String;
  begin
    if (_CodigoLike > '') then
    begin
      Result := ' And ( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' in ( select ';
      if _BuscaServicios then
        Result := Result + TServicioDM._ProductoID + ' from ' + TServicioDM.TableName + ' where ' + TServicioDM._Codigo
      else
        Result := Result + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM._Codigo;
      Result := Result + ' like ' + QuotedStr(_CodigoLike + '%') + ' ))';
    end;
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHastaAndEstados(_FechaDesde: String; _FechaHasta: String; _EstadosID: TStringList; _ProductoID: TObjectID; _Descendente: Boolean);
  Function Condicion1: String;
  var
    I: Integer;
  begin

    Result := '( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    Result := Result + ' and ( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion2: String;
  begin
    if (_ProductoID <> NullID) then
      Result := ' And ( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' = ' + IntToStr(_ProductoID)+ ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;

begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaDesdeFechaHastaAndEstadosAndCodigoLike(_FechaDesde,_FechaHasta: String; _EstadosID: TStringList;_CodigoLike: string; _BuscaServicios: Boolean; _Descendente: Boolean);
  Function Condicion1: String;
  var
    I: Integer;
  begin

    Result := '( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    Result := Result + ' and ( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion2: String;
  begin
    if (_CodigoLike > '') then
    begin
      Result := ' And ( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' in ( select ';
      if _BuscaServicios then
        Result := Result + TServicioDM.ID_FieldName + ' from ' + TServicioDM.TableName + ' where ' + TServicioDM._Codigo
      else
        Result := Result + TFabricadoDM.ID_FieldName + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM._Codigo;
      Result := Result + ' like ' + QuotedStr(_CodigoLike + '%') + ' ))';
    end;
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaEmpaqueDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _MercadoLocal, _MercadoExterior: Boolean; _C: TCliente; _GV: TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaDeEmpaque + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion3: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntregaProduccion + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVNumero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaEmpaqueDesdeFechaHastaAndEstadosDePedido(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal, _MercadoExterior: Boolean; _C: TCliente; _GV: TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaDeEmpaque + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  var
    I: Integer;
  begin
    Result := ' and ( ' + TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion3: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion4: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ', ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVNumero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3 + Condicion4, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaEntregaDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _MercadoLocal : Boolean; _MercadoExterior : Boolean ; _C : TCliente; _GV : TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion3: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ', ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,Condicion1 + Condicion2 + Condicion3, False, OrderBy));
end;


constructor TPedidoDeVentaItemList.CreateByFechaEntregaDesdeFechaHastaAndEstadosDePedido(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal, _MercadoExterior: Boolean ; _C : TCliente; _GV : TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  var
    I: Integer;
  begin
    Result := ' and ( ' + TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion3: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion4: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVNumero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3 + Condicion4, False, OrderBy));
end;


constructor TPedidoDeVentaItemList.CreateByFechaEntregaProduccionDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _MercadoLocal, _MercadoExterior: Boolean ; _C : TCliente; _GV : TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntregaProduccion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion3: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntregaProduccion + ', ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFechaEntregaProduccionDesdeFechaHastaAndEstadosDePedido(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _MercadoLocal, _MercadoExterior: Boolean ; _C : TCliente; _GV : TGrupoDeVendedor);
  Function Condicion1: String;
  begin
    Result := '( ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntregaProduccion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;

  Function Condicion2: String;
  var
    I: Integer;
  begin
    Result := ' and ( ' + TPedidoDeVentaItemDM._EstadoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;

  Function Condicion3: String;
  begin
    Result := '';
    if _MercadoLocal and _MercadoExterior then
      exit;

    if _MercadoLocal then
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 0 )'
    else
      Result := ' and ( ' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + ' = 1 )';
  end;

  Function Condicion4: String;
  begin
    if Assigned(_C) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr( _C.ID ) + ' )';
    if Assigned(_GV) then
      Result := ' and ( ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVGrupoDeVendedorID + ' = ' + IntToStr( _GV.ID ) + ' )';
  end;

  Function OrderBy: String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._FechaEntrega + ', ' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._Numero + ', ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3 + Condicion4, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByFiltros(_FechaDesde, _FechaHasta: String; _VendedorID : TobjectID; _CodigoCliente ,_DescripcionCliente : String ; _A, _T, _C,
  _CRC: string; _StartRow : integer; _Rows : integer);

  Function FiltroPorVendedor: String;
  begin
      Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in (Select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ';
      Result := Result + TPedidoDeVentaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName + ' where ' + TGrupoDeVendedorItemDM._VendedorID + ' = ' + IntToStr(_VendedorID) + ')))'
  end;

  Function FiltroPorCliente: String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in (Select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ';
    if (_CodigoCliente > '') and (_DescripcionCliente = '') then
      Result := Result + TPedidoDeVentaDM._ClienteID + ' in (Select ' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName + ' where ' + TAbstractEmpresaDM._Codigo + ' like ' + QuotedStr('%' + _CodigoCliente + '%') + ')))'
    else if (_CodigoCliente = '') and (_DescripcionCliente > '') then
      Result := Result + TPedidoDeVentaDM._ClienteID + ' in (Select ' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName + ' where ' + TAbstractEmpresaDM._Descripcion + ' like ' + QuotedStr('%' + _DescripcionCliente + '%') + ')))'
    else
      Result := Result + TPedidoDeVentaDM._ClienteID + ' in (Select ' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName + ' where ' + TAbstractEmpresaDM._Codigo + ' like ' + QuotedStr('%' + _CodigoCliente + '%') + ' and ' + TAbstractEmpresaDM._Descripcion + ' like ' + QuotedStr('%' + _DescripcionCliente + '%') + ')))'
  end;

  Function FiltroPorFecha : String;
  begin
    if (_FechaDesde > '') and (_FechaHasta > '') then
      Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' ) '
    else if (_FechaDesde > '')  then
      Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' >= ' + QuotedStr(_FechaDesde + _PrimerHora)+ ' ) '
    else
      Result := '(' + TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' <= ' + QuotedStr(_FechaHasta + _UltimaHora)+ ' ) ';
  end;

  Function FiltroPorProducto (_Cod : String): String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' in (Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM._Codigo + ' like ' + QuotedStr('%' + _Cod + '%') + '))';
  end;

  function WhereString: String;
  begin
    //filtro por cliente y vendedor
    Result := '';

    if (_VendedorID <> NullID) then
      if Result = '' then
        Result := FiltroPorVendedor
      else
        Result := Result + ' and ' + FiltroPorVendedor;

    if (_CodigoCliente <> '') or (_DescripcionCliente <> '') then
      if Result = '' then
        Result := FiltroPorCliente
      else
        Result := Result + ' and ' + FiltroPorCliente;

    if (_A > '') then
      if Result = '' then
        Result := FiltroPorProducto(_A)
      else
        Result := Result + ' and ' + FiltroPorProducto(_A);

    if (_T > '') then
      if Result = '' then
        Result := FiltroPorProducto(_T)
      else
        Result := Result + ' and ' + FiltroPorProducto(_T);

    if (_C > '') then
      if Result = '' then
        Result := FiltroPorProducto(_C)
      else
        Result := Result + ' and ' + FiltroPorProducto(_C);

    if (_CRC > '') then
      if Result = '' then
        Result := FiltroPorProducto(_CRC)
      else
        Result := Result + ' and ' + FiltroPorProducto(_CRC);

    if (_FechaDesde > '') or (_FechaHasta > '') then
      if Result = '' then
        Result := FiltroPorFecha
      else
        Result := Result + ' and ' + FiltroPorFecha;

  end;
  function OrderBy: String;
  begin
    Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal + ' desc';
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy, _StartRow, _Rows));
end;

constructor TPedidoDeVentaItemList.CreateByID(_ID: TObjectID);
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateByID( _ID ));
end;

constructor TPedidoDeVentaItemList.CreateByListosParaProcesar(_PF : TPasoDeFabricacion);
  function WhereString : String;
    begin
      Result := TPedidoDeVentaItemDM.ID_FieldName + ' in (';
      Result := Result + 'Select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._PedidoDeVentaItemID + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName + ' in (';
      Result := Result + 'Select ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' from ' + THojaDeRutaPasoDeFabricacionDM.TableName + ' where ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in (';
      Result := Result + 'Select ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' where ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' = ' + IntToStr(_PF.ID) + ' and ';
      Result := Result + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso + ' is not null and ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is null and ';
      Result := Result + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' in (';
      Result := Result + 'Select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in (';
      Result := Result + 'Select ' + TEstadoDeHojaDeRutaDM.TableName + '.' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' where ' + TEstadoDeHojaDeRutaDM._Codigo;
      Result := Result + ' in (' + QuotedStr(Aplicacion.ConstantAllocator.CodigoEstadoHR_EnFabricacion) + ',' + QuotedStr(Aplicacion.ConstantAllocator.CodigoEstadoHR_ResprocesoEnFab) + '))))))';
    end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByNumeroDePedido(_NumeroPedido: TEntero);
  function WhereString: string;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( select ' +
      TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ( ' +
      TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._numero + ' = ' +  IntToStr(_NumeroPedido) + ') ) )';
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,TPedidoDeVentaItemDM._ItemNro));
end;

constructor TPedidoDeVentaItemList.CreateByNumeroDePedidoAndItem(_NumeroPedido,_NumeroItem: TEntero);
  function WhereString: string;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( select ' +
      TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ( ' +
      TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._numero + ' = ' + IntToStr(_NumeroPedido) + ') ) ) and (' + TPedidoDeVentaItemDM.TableName + '.' +
      TPedidoDeVentaItemDM._ItemNro + ' = ' + IntToStr(_NumeroItem) + ')';
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByEstadoYCliente(_C: TCliente);
  function WhereString: String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    Result := Result + ' in( Select ' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    Result := Result + ' from ' + TPedidoDeVentaDM.TableName + ' where ' + TPedidoDeVentaDM._ClienteID;
    Result := Result + '=' + IntToStr(_C.ID) + '))';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + ' desc ';
    // cuando se implementen los estados del TpedidoDeVentaItem se debe agregar esa condición
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPedido(_PV: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPedidoBloqueadosPorPrecioNoAutorizado(_PV: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
    Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._BloqueadoPorPrecioNoAutorizado + '=1' + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPedidoIDAndNumeroItem(_PedidoID: TObjectID; _NumeroItem: TEntero);
  function WhereString: string;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' = ' + IntToStr(_PedidoID) +
              ') and (' +  TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro + ' = ' + IntToStr(_NumeroItem) + ')';
  end;

begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByPedidoNoRemitiblesFacturables(_PV: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
    Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EsProductoRemitible + '=0' + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPedidoNoRemitiblesPendFacturar(_PV: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
//    Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EsProductoRemitible + '=1' + ')';
    Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PendienteDeFacturar + '=1' + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPedidoRemitibles(_PV: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
    Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EsProductoRemitible + '=1' + ')';
    Result := Result + ' and (' + TPedidoDeVentaItemDM.CampoCantidadPendiente + ' - ' + TPedidoDeVentaItemDM.CampoCantidadPreparada +' > 0)';
  end;
  Function OrderBy : String;
  begin
    Result := TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False,WhereString,False,OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByPendientesPorCliente(_C: TCliente);
  function WhereString: String;
  var
    EPVIL : TEstadoDePedidoDeVentaItemList;
  begin
    try
      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByEstadosDeItemPendiente;
      Result := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaItemDM._CCPVClienteID + ' = ' + IntToStr(_C.ID );
      Result := Result + ' and ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._EstadoID + ' in (-1';
      EPVIL.First;
      Repeat
        Result := Result + ',' + IntToStr(EPVIL.Actual.ID);
        EPVIL.Next;
      until EPVIL.IsLast;
      Result := Result + ')';

      Result := Result + ' and (' + TPedidoDeVentaItemDM.CampoCantidadPendiente + ') >0)' ;
    finally
      FreeAndNil(EPVIL);
    end;
  end;
begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemList.CreateByPrimerProductoID(_ProductoID: TObjectID);
  Function WhereString : String;
  begin
    Result := '(' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + '=' + IntToStr(_ProductoID) + ')';
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateTop(1, WhereString, ''));
end;

constructor TPedidoDeVentaItemList.CreateByProducto(_P: TProducto);
  Function WhereString : String;
  begin
    Result := '('+TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID + '=' + IntToStr(_P.ID) + ')';
  end;
begin
  inherited Create(TPedidoDeVentaItem,TPedidoDeVentaItemDM.CreateAll(False, WhereString));

end;

constructor TPedidoDeVentaItemList.CreateByProductoYEmpresa(_P: TProducto; _C: TCliente);
var
  FieldNameProductoID: String;
  FieldNamePedidoDeVentaID: String;
  FieldNameClienteID: String;
  FieldNameFechaReal: String;
  function WhereString: String;
  begin
    FieldNameProductoID := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID;
    FieldNamePedidoDeVentaID := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    FieldNameClienteID := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteID;
    FieldNameFechaReal := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal;
    Result := '(' + FieldNameProductoID + '=' + IntToStr(_P.ID) + ')';
    Result := Result + ' and (' + FieldNameClienteID + '=' + IntToStr(_C.ID) + ')';
  end;
  function OrderBy: String;
  begin
    Result := FieldNameFechaReal + ' DESC' + ',';
    Result := Result + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPedidoDeVentaItemList.CreateByProductoYEmpresa(_P: TProducto; _C: TCliente; _FechaDesde: Tdate);
var
  FieldNameProductoID: String;
  FieldNamePedidoDeVentaID: String;
  FieldNameClienteID: String;
  FieldNameFechaReal: String;
  function WhereString: String;
  begin
    FieldNameProductoID := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ProductoID;
    FieldNamePedidoDeVentaID := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    FieldNameClienteID := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._ClienteID;
    FieldNameFechaReal := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM._FechaReal;

    Result := '(' + FieldNameProductoID + '=' + IntToStr(_P.ID) + ')';
    Result := Result + ' and (' + FieldNameClienteID + '=' + IntToStr(_C.ID) + ')';
    Result := Result + ' and (' + FieldNameFechaReal + '>=' + QuotedStr(formatdatetime('yyyymmdd', _FechaDesde)) + ')';
  end;
  function OrderBy: String;
  begin
    Result := FieldNameFechaReal + ' DESC' + ',';
    Result := Result + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;


constructor TPedidoDeVentaItemList.CreateEmpty;
begin
  inherited Create(TPedidoDeVentaItem, TPedidoDeVentaItemDM.CreateEmpty);
end;

{ TCierreDeStock }
procedure TCierreDeStock.AgregarNuevoEstadoAlLog;
var
  S : TCierreDeStockStateLog;
begin
  try
    S                         := TCierreDeStockStateLog.Create;
    S.EstadoDeCierreDeStockID := FEstadoDeCierreDeStockID;
    S.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
    S.CierreDeStockID         := Self.ID;
    S.UsuarioID               := Aplicacion.Usuario.ID;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

class procedure TCierreDeStock.AutomatizarItems(_CS : TCierreDeStock ; _Deposito : TDeposito);
Var
  I : TCierreDeStockItem;
  SIL : TStockItemList;
begin
  Try
    Sil := TStockItemList.CreateByDeposito(_Deposito);
    Sil.First;
    If (Sil.Count > 0) then
      Repeat
        I                        := TCierreDeStockItem.Create;
        I.ProductoID             := Sil.Actual.ProductoID;
        I.Cantidad               := Sil.Actual.Cantidad;
        I.DepositoID             := Sil.Actual.depositoID;
        I.EstadoDeStockID        := Sil.Actual.EstadoDeStockID;
        I.CierreDeStockID        := _CS.ID;
        I.save;
        _CS.Items.Add(I);
        _CS.Items.ApplyUpdates;
        I.NilObject;
        Sil.Next;
      Until Sil.IsLast;
  finally
    FreeAndNil (SIL);
  End;
end;

procedure TCierreDeStock.ColocarEstado(_Cod: String);
var
  IDEstado : TObjectID;
begin
  IDEstado := ObtenerEstadoID(_Cod);
  if (FEstadoDeCierreDeStockID = IDEstado ) then
    Aplicacion.raiseExceptionCreate ('El Ajuste ya se encuentra en el estado: ' + _Cod );
  FEstadoDeCierreDeStockID := IDEstado;
  if IsAssigned then
    AgregarNuevoEstadoAlLog;
end;

constructor TCierreDeStock.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCierreDeStockDM);
  FNumero  := 0;
  FEstadoDeCierreDeStockID := NullID;
  FUsuarioAltaID := -9999;
end;

function TCierreDeStock.GetCierreDeStockItem: TCierreDeStockItemList;
begin
  If not Assigned(FItems) Then
    GetList(TPDlist(Fitems),TPDList(TCierreDeStockItemList.CreateByCierreDeStock( self ))) ;
  Result := Fitems;
end;

function TCierreDeStock.GetEstadoDeCierreDeStock: TEstadoDeCierreDeStock;
begin
  if not Assigned(FEstadodeCierreDeStock) then
    GetObject(TEstadoDeCierreDeStock,FEstadodeCierreDeStock,EstadodeCierreDeStockID);
  Result := TEstadoDeCierreDeStock (FEstadodeCierreDeStock);
end;

function TCierreDeStock.GetFechaHoraAlta: TDatetime;
begin
  Result := 0;
  IF (StateLogs.Count = 0) then
    exit;
  StateLogs.First;
  Result := StateLogs.Actual.FechaHora;
end;

function TCierreDeStock.GetStateLogs: TCierreDeStockStateLogList;
begin
  If not Assigned(FStateLogs) Then
    GetList(TPDlist(FStateLogs),TPDList(TCierreDeStockItemList.CreateByCierreDeStock( Self ))) ;
  Result := FStateLogs;
end;

function TCierreDeStock.GetUsuarioAlta: TUsuario;
begin
  if not Assigned(FUsuarioAlta) then
    GetObject(TUsuario,FUsuarioAlta,UsuarioAltaID);
  Result := TUsuario (FUsuarioAlta);
end;


function TCierreDeStock.Grabar: Boolean;
  procedure AsignoNumeroDeCierre;
  Var
    CSL : TCierreDeStockList;
  Begin
    if (FNumero = 0) then
      try
        CSL := TCierreDeStockList.CreateMaximoNumero;
        If CSL.Count=0 Then
          Numero := 1
        else
          Numero := (CSL.Actual.Numero + 1);
      finally
        FreeAndNil(CSL);
      end;
  end;
begin
//  if (Items.Count = 0) then
//    Aplicacion.raiseExceptionCreate('Debe ingresar al menos un item en el documento');
  AsignoNumeroDeCierre;
  If (EstadodeCierredeStockID = NullID) then
    ColocarEstado( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado );
  if FUsuarioAltaID =  -9999 then
    FUsuarioAltaID := Aplicacion.Usuario.ID;
  Result := Inherited Save;
  if isAssigned then // sino da error en el save, ya que pide ID que todavia no hay
    AgregarNuevoEstadoAlLog;
end;

class Function TCierreDeStock.ObtenerEstadoID( _CodigoDeEstadoSolicitado: String ) : TObjectID;
Var
  EL : TEstadoDeCierreDeStockList;
Begin
  Result := NullID;
  Try
    EL := TEstadoDeCierreDeStockList.CreateByCodigo( _CodigoDeEstadoSolicitado, False);
    if (El.Count = 0) then
      Raise Exception.Create ('No existe el estado ' + _CodigoDeEstadoSolicitado + ' en la tabla');
    Result := El.Actual.ID;
  Finally
    FreeAndNil (EL);
  End;
end;

{ TCierreDeStockDM }
class function TCierreDeStockDM.TableName : string;
begin
  Result := 'CierresDeStock';
end;


class function TCierreDeStockDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID'
end;

class function TCierreDeStockDM.ID_FieldName : string;
begin
  Result := 'CierreDeStockID';
end;


procedure TCierreDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TCierreDeStock(PDObject) do
    begin
      IntegerField[_Numero]             := Numero;
      StringField[ _Observaciones]      := Observaciones;
      IDField[_UsuarioAltaID]           := FUsuarioAltaID;
      IDField[_EstadoDeCierreDeStockID] := FEstadoDeCierreDeStockID;
      DateTimeField[_FechaHasta]        := FFechaHasta;
    end;
end;

procedure TCierreDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TCierreDeStock(PDObject) do
    begin
      FNumero                  := IntegerField[_Numero];
      Observaciones            := StringField[_Observaciones];
      FUsuarioAltaID           := IDField [_UsuarioAltaID];
      FEstadoDeCierreDeStockID := IDField[_EstadoDeCierreDeStockID];
      FFechaHasta              := DateTimeField[_FechaHasta];
    end;
end;

{ TCierreDeStockList }
function TCierreDeStockList.GetActual : TCierreDeStock;
begin
  Result := TCierreDeStock(CurrentObject);
end;

constructor TCierreDeStockList.CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  Function WhereString : String;
  begin
    Result := TCierreDeStockDM._EstadoDeCierreDeStockID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ', ';
      Result := Result + IntToStr (_Est.Actual.EstadoDeCierreDeStockID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';
  end;
begin
  inherited Create(TCierreDeStock,TCierreDeStockDM.CreateAll(False, WhereString ));
end;


constructor TCierreDeStockList.CreateByFecha( _Fecha : TDate );
  function WhereString: String;
  begin
    Result := '(convert(datetime, convert(varchar(10),' + TCierreDeStockDM.TableName + '.' + TCierreDeStockDM._FechaHasta + ', 103))';
    Result := Result + ' = ' + QuotedStr(DateToStr(_Fecha)) +')';
  end;
begin
  inherited Create(TCierreDeStock,TCierreDeStockDM.CreateAll(False, WhereString));
end;

constructor TCierreDeStockList.CreateEmpty;
begin
  inherited Create (TCierreDeStock, TCierreDeStockDM.CreateEmpty);
end;

constructor TCierreDeStockList.CreateMaximoNumero;
  Function OrderByString : String;
  begin
    Result := TCierreDeStockDM._Numero + ' Desc';
  end;
begin
  inherited Create(Tcierredestock,TCierreDeStockDM.CreateTop(1,'',OrderByString));
end;

function TCierreDeStockList.CreateNewObject: TPDObject;
begin
  Result := TCierreDeStock.Create;
end;

constructor TCierreDeStockList.CreateAll;
begin
  inherited Create(TCierreDeStock,TCierreDeStockDM.CreateAll(False));
end;

{ TCierreDeStockItem }
constructor TCierreDeStockItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCierreDeStockItemDM);
  SaveSqlLog := False;
  FCantidad := null;
end;

function TCierreDeStockItem.GetCierreDeStock: TCierreDeStock;
begin
  if not assigned(FCierreDeStock) then
    GetObject(TCierreDeStock,FCierreDeStock, CierreDeStockID);
  Result := TCierreDeStock(FCierreDeStock);
end;

function TCierreDeStockItem.GetDeposito: TDeposito;
begin
  if not assigned(FDeposito) then
    GetObject(TDeposito,FDeposito,DepositoID);
  Result := TDeposito(FDeposito);
end;

function TCierreDeStockItem.GetEstadoDeStock : TEstadoDeStock;
begin
  if not assigned(FEstadoDeStock) then
    GetObject(TEstadoDeStock,FEstadoDeStock,EstadoDeStockID);
  Result := TEstadoDeStock(FEstadoDeStock);
end;

procedure TCierreDeStockItem.SetEstadoDeStockID(Value : TObjectID);
begin
  if (Value<>FEstadoDeStockID) and Assigned(FEstadoDeStock) then
    FreeAndNil(FEstadoDeStock);
  FEstadoDeStockID := Value;
end;

function TCierreDeStockItem.GetProducto : TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto,FProducto,ProductoID);
  Result := TProducto(FProducto);
end;

procedure TCierreDeStockItem.SetProductoID(Value : TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;


procedure TCierreDeStockItem.SetCierreDeStockID(Value : TObjectID);
begin
  if (Value<>FCierreDeStockID) and Assigned(FCierreDeStock) then
    FreeAndNil(FCierreDeStock);
  FCierreDeStockID := Value;
end;

procedure TCierreDeStockItem.SetDepositoID(const Value: TObjectID);
begin
  if (Value<>FDepositoID) and Assigned(FDeposito) then
    FreeAndNil(FDeposito);
  FDepositoID:= Value;
end;

{ TCierreDeStockItemDM }
class function TCierreDeStockItemDM.TableName : string;
begin
  Result := 'CierreDeStockItems';
end;

class function TCierreDeStockItemDM.ID_FieldName : string;
begin
  Result := 'CierreDeStockItemID';
end;

procedure TCierreDeStockItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TCierreDeStockItem(PDObject) do
    begin
      FloatField[_cantidad ]              := Cantidad;
      IDField[_estadoDeStockID ]          := estadoDeStockID;
      IDField[_DepositoID ]               := DepositoID;
      IDField[_ProductoID ]               := ProductoID;
      IDField[_CierreDeStockID ]          := CierreDeStockID;
      IDField[_PedidoDeVentaItemAsignadoID ]  := PedidoDeVentaItemAsignadoID;
  end;
end;


procedure TCierreDeStockItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TCierreDeStockItem(PDObject) do
    begin
      FCantidad                := FloatField[_cantidad ];
      FestadoDeStockID         := IDField[_estadoDeStockID ];
      FDepositoID              := IDField[_DepositoID ];
      FProductoID              := IDField[_ProductoID ];
      FCierreDeStockID         := IDField[_CierreDeStockID ];
      FPedidoDeVentaItemAsignadoID := IDField[_PedidoDeVentaItemAsignadoID ];
    end;
end;

{ TCierreDeStockItemList }
function TCierreDeStockItemList.GetActual : TCierreDeStockItem;
begin
  Result := TCierreDeStockItem(CurrentObject);
end;

constructor TCierreDeStockItemList.CreateByCierreDeStock(_CS: TCierreDeStock);
  Function WhereString : String;
  begin
    Result := TCierreDeStockItemDM._CierreDeStockID + ' = ' + IntToStr(_CS.ID);
  end;
begin
  inherited Create (TCierreDeStockItem, TCierreDeStockItemDM.CreateAll(False,WhereString));
end;

constructor TCierreDeStockItemList.CreateEmpty;
begin
  inherited Create (TCierreDeStockItem,TCierreDeStockItemDM.CreateEmpty);
end;

function TCierreDeStockItemList.CreateNewObject: TPDObject;
begin
  Result := TCierreDeStockItem.Create;
end;

constructor TCierreDeStockItemList.CreateAll;
begin
  inherited Create(TCierreDeStockItem,TCierreDeStockItemDM.CreateAll(False));
end;

{ TajusteDeStockStateLog }

constructor TajusteDeStockStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TajusteDeStockStateLogDM);
  SaveSQLLog := False;
  FfechaHora := null;
  FusuarioID := -9999;
end;

procedure TajusteDeStockStateLog.SetestadoDeAjusteDeStockID(Value : TObjectID);
begin
  if (Value<>FestadoDeAjusteDeStockID) and Assigned(FestadoDeAjusteDeStock) then
    FreeAndNil(FestadoDeAjusteDeStock);
  FestadoDeAjusteDeStockID := Value;
end;


function TajusteDeStockStateLog.GetestadoDeAjusteDeStock : TEstadoDeAjusteDeStock;
begin
  if not assigned(FestadoDeAjusteDeStock) then
    GetObject(TEstadoDeAjusteDeStock,FestadoDeAjusteDeStock,estadoDeAjusteDeStockID);
  Result := TEstadoDeAjusteDeStock(FestadoDeAjusteDeStock);
end;

procedure TajusteDeStockStateLog.SetusuarioID(Value : TObjectID);
begin
  if (Value<>FusuarioID) and Assigned(Fusuario) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

function TajusteDeStockStateLog.Getusuario : TUsuario;
begin
  if not assigned(Fusuario) then
    GetObject(TUsuario,Fusuario,usuarioID);
  Result := TUsuario(Fusuario);
end;


{ TajusteDeStockStateLogDM }
class function TajusteDeStockStateLogDM.TableName : string;
begin
  Result := 'ajustedestockstatelogs';
end;

class function TajusteDeStockStateLogDM.ID_FieldName : string;
begin
  Result := 'ajusteDeStockStateLogID';
end;


procedure TajusteDeStockStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TajusteDeStockStateLog(PDObject) do
    begin
      IDField[TajusteDeStockStateLogDM._estadoDeAjusteDeStockID] := FestadoDeAjusteDeStockID;
      IDField[TajusteDeStockStateLogDM._usuarioID]               := FusuarioID;
      DateTimeField[TajusteDeStockStateLogDM._fechaHora]         := FfechaHora;
      IDField[TajusteDeStockStateLogDM._ajusteDeStockID]         := FajusteDeStockID;
    end;
end;


procedure TajusteDeStockStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TajusteDeStockStateLog(PDObject) do
    begin
      FestadoDeAjusteDeStockID := IDField[TajusteDeStockStateLogDM._estadoDeAjusteDeStockID];
      FusuarioID               := IDField[TajusteDeStockStateLogDM._usuarioID];
      FfechaHora               := DateTimeField[TajusteDeStockStateLogDM._fechaHora];
      FajusteDeStockID         := IDField[TajusteDeStockStateLogDM._ajusteDeStockID];
    end;
end;

{ TajusteDeStockStateLogList }
function TajusteDeStockStateLogList.GetActual : TajusteDeStockStateLog;
begin
  Result := TAjusteDeStockStateLog(CurrentObject);
end;

constructor TajusteDeStockStateLogList.CreateByAjusteDeStock(_A: TAjusteDeStock);
  Function WhereString : String;
  begin
    Result := '(' + TAjusteDeStockStateLogDM._AjusteDeStockID + ' = ' + IntToStr(_A.ID) + ')';
  end;
begin
  inherited Create(TAjusteDeStockStateLog,TAjusteDeStockStateLogDM.CreateAll(False, WhereString));
end;

function TajusteDeStockStateLogList.CreateNewObject: TPDObject;
begin
  Result := TajusteDeStockStateLog.Create;
end;

constructor TajusteDeStockStateLogList.CreateAll;
begin
  inherited Create(TajusteDeStockStateLog,TajusteDeStockStateLogDM.CreateAll(False));
end;

{ TCierreDeStockStateLog }

constructor TCierreDeStockStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCierreDeStockStateLogDM);
  SaveSQLLog := False;
  FfechaHora := null;
  FusuarioID := -9999;
end;

procedure TCierreDeStockStateLog.SetEstadoDeCierreDeStockID(Value : TObjectID);
begin
  if (Value<>FestadoDeCierreDeStockID) and Assigned(FestadoDeCierreDeStock) then
    FreeAndNil(FestadoDeCierreDeStock);
  FestadoDeCierreDeStockID := Value;
end;


function TCierreDeStockStateLog.GetEstadoDeCierreDeStock : TEstadoDeCierreDeStock;
begin
  if not assigned(FestadoDeCierreDeStock) then
    GetObject(TEstadoDeCierreDeStock,FestadoDeCierreDeStock,EstadoDeCierreDeStockID);
  Result := TEstadoDeCierreDeStock(FestadoDeCierreDeStock);
end;

procedure TCierreDeStockStateLog.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FusuarioID) and Assigned(Fusuario) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

function TCierreDeStockStateLog.Getusuario : TUsuario;
begin
  if not Assigned(Fusuario) then
    GetObject(TUsuario,Fusuario,usuarioID);
  Result := TUsuario(Fusuario);
end;


{ TCierreDeStockStateLogDM }
class function TCierreDeStockStateLogDM.TableName : string;
begin
  Result := 'CierreDeStockStateLogs';
end;

class function TCierreDeStockStateLogDM.ID_FieldName : string;
begin
  Result := 'CierreDeStockStateLogID';
end;


procedure TCierreDeStockStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TCierreDeStockStateLog(PDObject) do
    begin
      IDField[_EstadoDeCierreDeStockID] := FEstadoDeCierreDeStockID;
      IDField[_UsuarioID]               := FUsuarioID;
      DateTimeField[_FechaHora]         := FFechaHora;
      IDField[_CierreDeStockID]         := FCierreDeStockID;
    end;
end;


procedure TCierreDeStockStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TCierreDeStockStateLog(PDObject) do
    begin
      FEstadoDeCierreDeStockID := IDField[_EstadoDeCierreDeStockID];
      FusuarioID               := IDField[_UsuarioID];
      FfechaHora               := DateTimeField[_FechaHora];
      FCierreDeStockID         := IDField[_CierreDeStockID];
    end;
end;

{ TCierreDeStockStateLogList }
function TCierreDeStockStateLogList.GetActual : TCierreDeStockStateLog;
begin
  Result := TCierreDeStockStateLog(CurrentObject);
end;

constructor TCierreDeStockStateLogList.CreateByCierreDeStock(_C: TCierreDeStock);
  Function WhereString : String;
  begin
    Result := '(' + TCierreDeStockStateLogDM._CierreDeStockID + '=' + IntToStr(_C.ID) + ')';
  end;
begin
  inherited Create(TCierreDeStockStateLog,TCierreDeStockStateLogDM.CreateAll(False, WhereString));
end;

function TCierreDeStockStateLogList.CreateNewObject: TPDObject;
begin
  Result := TCierreDeStockStateLog.Create;
end;

constructor TCierreDeStockStateLogList.CreateAll;
begin
  inherited Create(TCierreDeStockStateLog,TCierreDeStockStateLogDM.CreateAll(False));
end;

{ TPedidoDeVentaStateLog }
constructor TPedidoDeVentaStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaStateLogDM);
  SaveSQLLog := False;
  FfechaHora := Null;
end;

destructor TPedidoDeVentaStateLog.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TPedidoDeVentaStateLog.FreeObjectsFromMemory;
begin
  if Assigned(FEstadoDePedidoDeVenta) then
    FreeAndNil(FEstadoDePedidoDeVenta);
  if Assigned(Fusuario) then
    FreeAndNil(Fusuario);
  if Assigned(FPedidoDeVenta) then
    FreeAndNil(FPedidoDeVenta);
end;

Function TPedidoDeVentaStateLog.GetEstadoDePedidoDeVenta : TEstadoDePedidoDeVenta;
begin
  if not assigned(FEstadoDePedidoDeVenta) then
    GetObject(TEstadoDePedidoDeVenta, FEstadoDePedidoDeVenta, FEstadoDePedidoDeVentaID);
  Result := TEstadoDePedidoDeVenta(FEstadoDePedidoDeVenta);
end;

function TPedidoDeVentaStateLog.GetpedidoDeVenta: TPedidoDeVenta;
begin
  if not assigned(FPedidoDeVenta) then
    GetObject(TPedidoDeVenta, FPedidoDeVenta, FPedidoDeVentaID);
  Result := TPedidoDeVenta(FPedidoDeVenta);
end;

function TPedidoDeVentaStateLog.Getusuario: TUsuario;
begin
  if not assigned(Fusuario) then
    GetObject(TUsuario, Fusuario, FusuarioID);
  Result := TUsuario(Fusuario);
end;

procedure TPedidoDeVentaStateLog.SetEstadoDePedidoDeVentaID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FEstadoDePedidoDeVentaID) then
    FreeAndNil(FEstadoDePedidoDeVenta);
  FEstadoDePedidoDeVentaID := Value;
end;

procedure TPedidoDeVentaStateLog.SetusuarioID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FusuarioID) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

{ TPedidoDeVentaStateLogDM }
class function TPedidoDeVentaStateLogDM.TableName: string;
begin
  Result := 'PedidoDeVentaStateLogs';
end;

class function TPedidoDeVentaStateLogDM.ID_FieldName: string;
begin
  Result := 'PedidoDeVentaStateLogID';
end;

procedure TPedidoDeVentaStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVentaStateLog(PDObject) do
  begin
    IDField[TPedidoDeVentaStateLogDM._EstadoDePedidoDeVentaID] := FEstadoDePedidoDeVentaID;
    IDField[TPedidoDeVentaStateLogDM._UsuarioID]               := FUsuarioID;
    DateTimeField[TPedidoDeVentaStateLogDM._FechaHora]         := FFechaHora;
    IDField[TPedidoDeVentaStateLogDM._PedidoDeVentaID]         := FPedidoDeVentaID;
    StringField[TPedidoDeVentaStateLogDM._Observaciones]       := FObservacion;
  end;
end;

procedure TPedidoDeVentaStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVentaStateLog(PDObject) do
  begin
    FEstadoDePedidoDeVentaID := IDField[TPedidoDeVentaStateLogDM._EstadoDePedidoDeVentaID];
    FusuarioID := IDField[TPedidoDeVentaStateLogDM._UsuarioID];
    FfechaHora := DateTimeField[TPedidoDeVentaStateLogDM._FechaHora];
    FPedidoDeVentaID := IDField[TPedidoDeVentaStateLogDM._PedidoDeVentaID];
    fObservacion := StringField[TPedidoDeVentaStateLogDM._Observaciones];
  end;
end;

{ TPedidoDeVentaStateLogList }
function TPedidoDeVentaStateLogList.GetActual: TPedidoDeVentaStateLog;
begin
  Result := TPedidoDeVentaStateLog(CurrentObject);
end;

function TPedidoDeVentaStateLogList.CreateNewObject: TPDObject;
begin
  Result := TPedidoDeVentaStateLog.Create;
end;

constructor TPedidoDeVentaStateLogList.CreateAll;
begin
  inherited Create(TPedidoDeVentaStateLog, TPedidoDeVentaStateLogDM.CreateAll(False));
end;

constructor TPedidoDeVentaStateLogList.CreateByPedidoDeVenta(_P: TPedidoDeVenta);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaStateLogDM._PedidoDeVentaID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TPedidoDeVentaStateLog, TPedidoDeVentaStateLogDM.CreateAll(False, WhereString));
end;

function TDocumento.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, tipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TDocumento.SetNumero(Value: TEntero);
begin
  FNumero := Value;
end;

procedure TDocumento.SetTipoDeFormularioID(const Value: TObjectID);
begin
  FTipoDeFormularioID := Value;
end;

procedure TDocumentoConStock.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value <> FTipoDeFormularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

function TDocumentoConStock.getTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, tipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

{ TPedidoDeVentaItemPrecioDeLista }
constructor TPedidoDeVentaItemPrecioDeLista.Create;
begin
  inherited;
  DMObject     := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaItemPrecioDeListaDM);
  FDescripcion := Null;
  FPrecio      := Null;
end;

procedure TPedidoDeVentaItemPrecioDeLista.SetmonedaDePrecioID(Value: TObjectID);
begin
  if (Value <> FmonedaDePrecioID) and assigned(FmonedaDePrecio) then
    FreeAndNil(FmonedaDePrecio);
  FmonedaDePrecioID := Value;
end;

procedure TPedidoDeVentaItemPrecioDeLista.SetPedidoDeVentaItemID(const Value: TObjectID);
begin
  if Assigned(FPedidoDeVentaItem) and (FPedidoDeVentaItemID <> Value) then
    FreeAndNil( FPedidoDeVentaItem );
  FPedidoDeVentaItemID := Value;
end;

procedure TPedidoDeVentaItemPrecioDeLista.SetTipoDePrecioCunioID(const Value: TObjectID);
begin
  if Assigned( FTipoDePrecioCunio ) and (FTipoDePrecioCunioID<>Value) then
    FreeAndNil( FTipoDePrecioCunio );
  FTipoDePrecioCunioID := Value;
end;

function TPedidoDeVentaItemPrecioDeLista.GetmonedaDePrecio: TMoneda;
begin
  if not assigned(FmonedaDePrecio) then
    GetObject(TMoneda, FmonedaDePrecio, monedaDePrecioID);
  Result := TMoneda(FmonedaDePrecio);
end;

function TPedidoDeVentaItemPrecioDeLista.GetPedidoDeVentaItem: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) then
    GetObject(TPedidoDeVentaItem, FPedidoDeVentaItem, PedidoDeVentaItemID);
  Result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

function TPedidoDeVentaItemPrecioDeLista.GetTipoDePrecioCunio: TTipoDePrecioCunio;
begin
  if not assigned(FTipoDePrecioCunio) then
    GetObject(TTipoDePrecioCunio, FTipoDePrecioCunio, TipoDePrecioCunioID);
  Result := TTipoDePrecioCunio(FTipoDePrecioCunio);
end;

{ TPedidoDeVentaItemPrecioDeListaDM }
class function TPedidoDeVentaItemPrecioDeListaDM.TableName: string;
begin
  Result := 'PedidoDeVentaItemPrecios';
end;

class function TPedidoDeVentaItemPrecioDeListaDM.ViewName: string;
begin
  Result := 'ConsultaPedidoDeVentaItemPrecios';
end;

class function TPedidoDeVentaItemPrecioDeListaDM.ID_FieldName: string;
begin
  Result := 'PedidoDeVentaItemPrecioID';
end;

procedure TPedidoDeVentaItemPrecioDeListaDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVentaItemPrecioDeLista(PDObject) do
  begin
    IDField[_PedidoDeVentaItemID]   := FPedidoDeVentaItemID;
    StringField[_Descripcion]       := Descripcion;
    FloatField[_Precio]             := FPrecio;
    IDField[_monedaDePrecioID]      := FmonedaDePrecioID;
    BooleanField[_ExigePrecio]      := FExigePrecio;
    IDField[_TipoDePrecioDeCunioID] := FTipoDePrecioCunioID;
    IDField[_ObjectoID]             := FObjetoID;
  end;
end;

procedure TPedidoDeVentaItemPrecioDeListaDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVentaItemPrecioDeLista(PDObject) do
  begin
    FPedidoDeVentaItemID       := IDField[_PedidoDeVentaItemID];
    FDescripcion               := StringField[_Descripcion];
    FPrecio                    := FloatField[_Precio];
    FmonedaDePrecioID          := IDField[_monedaDePrecioID];
    FExigePrecio               := BooleanField[ _ExigePrecio ];
    FTipoDePrecioCunioID       := IDField[_TipoDePrecioDeCunioID];
    FObjetoID                  := IDField[_ObjectoID];
    //de la vista
    FCCPedidoDeVentaNumero     := IntegerField[_PedidoDeVentaNumero];
    FCCPedidoDeVentaItemNumero := IntegerField[_PedidoDeVentaItemNumero];
    FCCFabricadoID             := IDField[_FabricadoID];
    FCCFabricadoCodigo         := StringField[_FabricadoCodigo];
    FCCFabricadoDescripcion    := StringField[_FabricadoDescripcion];
    FCCCunioID                 := IDField[_CunioID];
    FCCCunioCodigo             := StringField[_CunioCodigo];
    FCCTipoDePrecioDescripcion := StringField[_TipoDePrecioDescripcion];

    FCCEstadoDePedidoDeVentaItemCodigo      := StringField[_EstadoDePedidoDeVentaItemCodigo];
    FCCEstadoDePedidoDeVentaItemDescripcion := StringField[_EstadoDePedidoDeVentaItemDescripcion];
    FCCPedidoDeVentaItemFecha               := DateField[_PedidoDeVentaFechaReal];

    if (FTipoDePrecioCunioID = Aplicacion.DataService.TipoDePrecioDeCunioArticuloID) then
      begin
        FCCObjetoCodigo            := StringField[_ArticuloCodigo];
        FCCObjetoDescripcion       := StringField[_ArticuloDescripcion];
      end
    else if (FTipoDePrecioCunioID = Aplicacion.DataService.TipoDePrecioDeCunioTerminacionID) then
      begin
        FCCObjetoCodigo            := StringField[_TerminacionCodigo];
        FCCObjetoDescripcion       := StringField[_TerminacionDescripcion];
      end
    else if (FTipoDePrecioCunioID = Aplicacion.DataService.TipoDePrecioDeCunioProcesoID) then
      begin
        FCCObjetoCodigo            := StringField[_ProcesoCodigo];
        FCCObjetoDescripcion       := StringField[_ProcesoDescripcion];
      end
    else if (FTipoDePrecioCunioID = Aplicacion.DataService.TipoDePrecioDeCunioEspecificacionID) then
      begin
        FCCObjetoCodigo            := StringField[_ColorCodigo];
        FCCObjetoDescripcion       := StringField[_ColorDescripcion];
      end
    else
      begin
        FCCObjetoCodigo            := StringField[_DesarrolloCodigo];
        FCCObjetoDescripcion       := StringField[_DesarrolloDescripcion];
      end;
  end;
end;

{ TPedidoDeVentaItemPrecioDeListaDeListaList }
function TPedidoDeVentaItemPrecioDeListaList.GetActual : TPedidoDeVentaItemPrecioDeLista;
begin
  Result := TPedidoDeVentaItemPrecioDeLista(CurrentObject);
end;

constructor TPedidoDeVentaItemPrecioDeListaList.CreateByPedidoDeVentaItemBloqueados(_PVI: TPedidoDeVentaItem);
  Function WhereString : String;
  begin
    Result := '('+ TPedidoDeVentaItemPrecioDeListaDM._PedidoDeVentaItemID + '=' + IntToStr(_PVI.ID);
    Result := Result + ') and (' + TPedidoDeVentaItemPrecioDeListaDM._ExigePrecio+'=1) and (' + TPedidoDeVentaItemPrecioDeListaDM._Precio + '=0 )';
  end;
begin
  Inherited Create(TPedidoDeVentaItemPrecioDeLista, TPedidoDeVentaItemPrecioDeListaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemPrecioDeListaList.CreateByBloqueados;
  Function WhereString : String;
  var
    EPVIL : TEstadoDePedidoDeVentaItemList;
  begin
    Try
      EPVIL := TEstadoDePedidoDeVentaItemList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_BloqueadoPorFaltadePrecioDeLista );
      if (EPVIL.count=0) then
        Raise Exception.Create('No se encontró el Estado de Pedido de Venta Items: '+ Aplicacion.ConstantAllocator.CodigoEstadoDocumento_BloqueadoPorFaltadePrecioDeLista );
      EPVIL.First;


      Result := '(' + TPedidoDeVentaItemPrecioDeListaDM._ExigePrecio+'=1) and (' + TPedidoDeVentaItemPrecioDeListaDM._Precio + '=0 ) and (';
      Result := Result + TPedidoDeVentaItemPrecioDeListaDM._PedidoDeVentaItemID + ' = ' + IntToStr( EPVIL.Actual.id ) +')';
    Finally
      FreeAndNil( EPVIL );
    End;
  end;
begin
  Inherited Create(TPedidoDeVentaItemPrecioDeLista, TPedidoDeVentaItemPrecioDeListaDM.CreateAll(False, WhereString));
end;

constructor TPedidoDeVentaItemPrecioDeListaList.CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaItemPrecioDeListaDM._PedidoDeVentaItemID + '=' + IntToStr(_PVI.ID);
  end;
begin
  Inherited Create(TPedidoDeVentaItemPrecioDeLista, TPedidoDeVentaItemPrecioDeListaDM.CreateAll(False, WhereString));
end;

function TPedidoDeVentaItemPrecioDeListaList.CreateNewObject: TPDObject;
begin
  Result := TPedidoDeVentaItemPrecioDeLista.Create;
end;

constructor TPedidoDeVentaItemPrecioDeListaList.CreateAll;
begin
  inherited Create(TPedidoDeVentaItemPrecioDeLista, TPedidoDeVentaItemPrecioDeListaDM.CreateAll(False));
end;

{ TPresupuestoDeVenta }

procedure TPresupuestoDeVenta.agregarItemConCostoDeMatriceria(_CostoDeMatriceria: TReal);
var
  SL: TServicioList;
  FDL: TTipoDeFlexibilidadList;
begin
  try
    tmpCostoMatriceria := TPresupuestoDeVentaItem.Create;
    SL := TServicioList.CreateByCodigo(Aplicacion.ParametrosDelSistema.CodigoDeServicioCostoDeMatriceria, False);
    if SL.count = 0 then
      raise Exception.Create('No se encontró el servicio correspondiente a Costo de matricería');

    SL.First;
    tmpInsertarItemCostoCunioNuevo            := False;
    // tmpCostoMatriceria.fechaEntrega         := FechaReal;
    tmpCostoMatriceria.PresupuestoDeVentaID   := ID;
    tmpCostoMatriceria.itemNro                := Items.count + 1;
    tmpCostoMatriceria.ProductoID             := SL.Actual.ProductoID;
    tmpCostoMatriceria.descripcionDelItem     := SL.Actual.Descripcion + ' ' + tmpCostoDeMatriceriaCodigoCunio;
    tmpCostoMatriceria.PrecioDeVenta          := _CostoDeMatriceria;
    tmpCostoMatriceria.CantidadPedida         := 1;
    tmpCostoMatriceria.FechaDelpresupuesto    := FechaReal;
    tmpCostoMatriceria.MonedaDelPresupuestoID := MonedaID;
    tmpCostoMatriceria.ListaDePrecioID        := ListaDePrecioID;

    FDL := TTipoDeFlexibilidadList.CreateByCodigo(Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo, False);
    FDL.First;
    if (FDL.Actual.ID <> NullID) then
      tmpCostoMatriceria.TipoDeFlexibilidadID := FDL.Actual.ID;
    FreeAndNil(FDL);
    tmpCostoMatriceria.Save;
    Items.Add(tmpCostoMatriceria);

  finally
    FreeAndNil(SL);
  end;

end;

procedure TPresupuestoDeVenta.AgregarNuevoEstadoAlLog;
var
  S: TpresupuestoDeVentaStateLog;
begin
  Try
    S := TpresupuestoDeVentaStateLog.Create;
    S.EstadoDePresupuestoDeVentaID := EstadoDePresupuestoDeVentaID;
    S.UsuarioID                    := Aplicacion.Usuario.ID;
    S.FechaHora                    := Aplicacion.DateTimeService.FechaHoraActual;
    S.PresupuestoDeVentaID         := Self.ID;
    S.Observacion                  := ObservaciondeEstado;
    S.Save;
    StateLogs.Add(S);
  Finally
    S.NilObject;
  End;
end;

procedure TPresupuestoDeVenta.CalcularImporteNetoDelPresupuesto;
begin
  FImporteNetoDelPresupuesto := 0;
  Items.First;
  while not Items.IsLast do
  begin
    FImporteNetoDelPresupuesto := FImporteNetoDelPresupuesto +  Items.actual.ImporteTotal;
    Items.Next;
  end;
  Items.First;
end;

procedure TPresupuestoDeVenta.ColocarEstadoARevisarPorGerencia;
begin
  //
end;

procedure TPresupuestoDeVenta.ColocarEstadoConfirmado;
  Function ObtenerEstadoConvertidoEnPedidoID: TObjectID;
  Var
    EL: TEstadoDePresupuestoDeVentaList;
  Begin
    Try
      EL := TEstadoDePresupuestoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_ConvertidoEnPedido, False);
      if (EL.count = 0) then
        Raise Exception.Create('No existe un estado de Convertido en Pedido en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
begin
  If (FEstadoDePresupuestoDeVentaID = ObtenerEstadoConvertidoEnPedidoID) then
    Aplicacion.raiseExceptionCreate( 'No es posible Convertir un documento ya convertido');

  FEstadoDePresupuestoDeVentaID := ObtenerEstadoConvertidoEnPedidoID;

  // Coloco el estado de Confirmado o pendiente a todos los items del Presupuesto de venta
  if Items.count > 0 then
  Begin
    Items.First;
    Repeat
      Items.Actual.EsCambioDeEstado:= True;
      Items.Actual.ColocarEstadoConfirmado;
      Items.Actual.Save;
      Items.Next;
    Until Items.IsLast;
  End;

  AgregarNuevoEstadoAlLog;
end;

procedure TPresupuestoDeVenta.ColocarEstadoGrabado;
  Function ObtenerEstadoGrabadoID: TObjectID;
  Var
    EL: TEstadoDePresupuestoDeVentaList;
  Begin
    Try
      EL := TEstadoDePresupuestoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado, False);
      if (EL.count = 0) then
        Raise Exception.Create('No existe un estado de Grabado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

begin
  FEstadoDePresupuestoDeVentaID := ObtenerEstadoGrabadoID;
  if EsModificacion then
    ObservaciondeEstado := '< Modificación >'
  else
    ObservaciondeEstado := '';

  if IsAssigned then
  begin
    AgregarNuevoEstadoAlLog;
    // Coloco el estado de grabado a todos los items
    if (Items.count > 0) then
    Begin
      Items.First;
      Repeat
        Items.Actual.ColocarEstadoGrabado;
        Items.Actual.Save;
        Items.Next;
      Until Items.IsLast;
    End;
  End;
end;

constructor TPresupuestoDeVenta.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPresupuestoDeVentaDM);
  FTipoDeFormularioID                := NullID;
  FFechaReal                         := Null;
  FNroOrdenDeCompraCliente           := '';
  FPorcentajeComisionPorCobranza     := 0;
  FPorcentajeComisionPorFacturacion  := 0;
  FPorcentajeDeTolerancia            := 0;
  FEntregaTotal                      := False;
  FEsModificacion                    := False;
  FObservaciondeEstado               := Null;
  FesImportacionDeDatos              := False;
  FtmpCostoDeMatriceria              := Nil;
  FtmpNoCobrarCostoCunioNuevo        := False;
  FtmpInsertarItemCostoCunioNuevo    := False;
  FtmpProrratearCostoCunioNuevo      := False;
  FtmpCostoDeMatriceriaCodigoCunio   := '';
end;

procedure TPresupuestoDeVenta.Delete;
begin
  DeleteItems;
  inherited;
end;

procedure TPresupuestoDeVenta.DeleteItems;
begin
  if assigned(Items) and (Items.count > 0) then
    repeat
      Items.Actual.Delete;
      Items.Next;
    until Items.IsLast;
  end;

  function TPresupuestoDeVenta.GetCliente: TCliente;
  begin
    if not assigned(FCliente) then
      GetObject(TCliente, FCliente, ClienteID);
    Result := TCliente(FCliente);
  end;

  function TPresupuestoDeVenta.Save: Boolean;
  Var
    dlg: T_FrmDialogsService;
    EspresupuestoNuevo: Boolean;
  begin
    try
      Aplicacion.ColocarCursorEspera;
      if not esImportacionDeDatos then
        Aplicacion.DialogsService.CrearDialogo(dlg,'Validando y guardando encabezado ...', TAviComunes.Check);

      EspresupuestoNuevo := (FEstadoDePresupuestoDeVentaID = NullID);
      if EspresupuestoNuevo or EsModificacion then
        ColocarEstadoGrabado;

      If Not esCambioDeEstado Then
        Begin
          if (Cliente.MonedaDefaultID = NullID) then
            MonedaID := Aplicacion.MonedaDefault.ID;
        End
      else
        AgregarNuevoEstadoAlLog;

      Result := inherited Save;

      if EspresupuestoNuevo then
        ColocarEstadoGrabado;

      If Result Then
        Begin
          esCambioDeEstado := False;
          EspresupuestoNuevo := False;
        End;
    finally
      if not esImportacionDeDatos then
        Aplicacion.DialogsService.CerrarDialogo(dlg);
      Aplicacion.ColocarCursorNormal;
    end;
  end;

procedure TPresupuestoDeVenta.SetClienteID(Value: TObjectID);
begin
  if (Value <> FClienteID) and assigned(FCliente) then
    FreeAndNil(FCliente);
  FClienteID := Value;
end;

function TPresupuestoDeVenta.GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
begin
  if not assigned(FCondicionDeVentaDetalle) then
    GetObject(TCondicionDeVentaDetalle, FCondicionDeVentaDetalle, CondicionDeVentaDetalleID);
  Result := TCondicionDeVentaDetalle(FCondicionDeVentaDetalle);
end;

function TPresupuestoDeVenta.GetCondicionDeVenta: TCondicionDeVenta;
begin
  if not assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta, FCondicionDeVenta, CondicionDeVentaID);
  Result := TCondicionDeVenta(FCondicionDeVenta);
end;

procedure TPresupuestoDeVenta.SetCondicionDeVentaDetalleID(const Value: TObjectID);
begin
  if (Value <> FCondicionDeVentaDetalleID) and assigned(FCondicionDeVentaDetalle) then
    FreeAndNil(FCondicionDeVentaDetalle);
  FCondicionDeVentaDetalleID := Value;
end;

procedure TPresupuestoDeVenta.SetCondicionDeVentaID(Value: TObjectID);
begin
  if (Value <> FCondicionDeVentaID) and assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  FCondicionDeVentaID := Value;
end;

function TPresupuestoDeVenta.GetEmpresaFlete: TEmpresa;
begin
  if not assigned(FEmpresaFlete) then
    GetObject(TEmpresa, FEmpresaFlete, EmpresaFleteID);
  Result := TEmpresa(FEmpresaFlete);
end;

function TPresupuestoDeVenta.GetEstadoDePresupuestoDeVenta : TEstadoDePresupuestoDeVenta;
begin
  if not assigned(FEstadoDePresupuestoDeVenta) then
    GetObject(TEstadoDePresupuestoDeVenta, FEstadoDePresupuestoDeVenta, EstadoDePresupuestoDeVentaID);
  Result := TEstadoDePresupuestoDeVenta(FEstadoDePresupuestoDeVenta);
end;

function TPresupuestoDeVenta.GetFechaDeAlta: TFecha;
begin
  Result := 0;
  If StateLogs.count = 0 Then
    Exit;
  StateLogs.First;
  Result := StateLogs.Actual.FfechaHora;
end;

procedure TPresupuestoDeVenta.SetEmpresaFleteID(Value: TObjectID);
begin
  if (Value <> FEmpresaFleteID) and assigned(FEmpresaFlete) then
    FreeAndNil(FEmpresaFlete);
  FEmpresaFleteID := Value;
end;

procedure TPresupuestoDeVenta.SetEstadoDePresupuestoDeVentaID(const Value: TObjectID);
  Function ObtenerEstadoConvertidoEnPedidoID: TObjectID;
  Var
    EL: TEstadoDePresupuestoDeVentaList;
  Begin
    Try
      EL := TEstadoDePresupuestoDeVentaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDocumento_ConvertidoEnPedido, False);
      if (EL.count = 0) then
        Raise Exception.Create('No existe un estado de convertido en pedido en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
begin
  if (Value <> FEstadoDePresupuestoDeVentaID) and assigned(FEstadoDePresupuestoDeVenta) then
  begin
    FreeAndNil(FEstadoDePresupuestoDeVenta);
    FObservaciondeEstado := Null;
  end;
  esCambioDeEstado := (Value <> FEstadoOriginalID);
  // Esto lo hago para cambiar de estado a los items
  if Value = ObtenerEstadoConvertidoEnPedidoID then
    ColocarEstadoConfirmado;
  FEstadoDePresupuestoDeVentaID := Value;
end;

procedure TPresupuestoDeVenta.SetEstadoNuevoID(const Value: TObjectID);
begin
  FEstadoNuevoID := Value;
end;

function TPresupuestoDeVenta.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, FGrupoDeVendedorID);
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

procedure TPresupuestoDeVenta.SetGrupoDeVendedorID(Value: TObjectID);
begin
  if (Value <> FGrupoDeVendedorID) and assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

procedure TPresupuestoDeVenta.SetImporteNetoDelPresupuesto(const Value: TReal);
begin
  FImporteNetoDelPresupuesto := Aplicacion.MathService.Redondear(Value, 2);
end;

procedure TPresupuestoDeVenta.SetListaDePrecioID(const Value: TObjectID);
begin
  if (Value <> FListaDePrecioID) and assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  FListaDePrecioID := Value;
end;

function TPresupuestoDeVenta.GetMarca: TMarca;
begin
  if not assigned(FMarca) then
    GetObject(TMarca, FMarca, MarcaID);
  Result := TMarca(FMarca);
end;

procedure TPresupuestoDeVenta.SetMarcaID(Value: TObjectID);
begin
  if (Value <> FMarcaID) and assigned(FMarca) then
    FreeAndNil(FMarca);
  FMarcaID := Value;
end;

function TPresupuestoDeVenta.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);
  Result := TMoneda(FMoneda);
end;

function TPresupuestoDeVenta.GetObservaciondeEstado: TString;
begin
  if (FObservaciondeEstado = Null) then
    If StateLogs.count > 0 then
    Begin
      StateLogs.Last;
      If StateLogs.Actual.Observacion = Null then
        FObservaciondeEstado := ''
      else
        FObservaciondeEstado := StateLogs.Actual.Observacion;
    End
    else
      FObservaciondeEstado := '';

  Result := FObservaciondeEstado;
end;

function TPresupuestoDeVenta.GetStateLogs: TPresupuestoDeVentaStateLogList;
begin
  if not assigned(FStateLogs) then
    GetList(TPDList(FStateLogs),TPDList(TPresupuestoDeVentaStateLogList.CreateByPresupuestoDeVenta(Self)));
  Result := FStateLogs;
end;

procedure TPresupuestoDeVenta.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

procedure TPresupuestoDeVenta.SetNumero(const Value: TEntero);
begin
  if FNumero <> Value then
    FNumeroFinal := Null;
  Fnumero := Value;
end;

procedure TPresupuestoDeVenta.SetPorcentajeDeTolerancia(const Value: TReal);
begin
  if (Value < 0) Or (Value > 100) then
    Aplicacion.raiseExceptionCreate('El porcentaje debe estar entre 0 y 100');
  FPorcentajeDeTolerancia := Value;
end;

function TPresupuestoDeVenta.GetTipoDePresupuestoDeVenta : TTipoDePresupuestoDeVenta;
begin
  if not assigned(FTipoDePresupuestoDeVenta) then
    GetObject(TTipoDePresupuestoDeVenta, FTipoDePresupuestoDeVenta, TipoDePresupuestoDeVentaID);
  Result := TTipoDePresupuestoDeVenta(FTipoDePresupuestoDeVenta);
end;

function TPresupuestoDeVenta.GetUsuarioDeAlta: TUsuario;
begin
  Result := Nil;
  If StateLogs.count = 0 Then
    Exit;
  StateLogs.First;
  Result := StateLogs.Actual.Usuario;
end;

function TPresupuestoDeVenta.Grabar: Boolean;
Var
  PL: TPresupuestoDeVentaList;

  // ----------------------------------------------------
  procedure AsignoNumeroDepresupuestoDeVenta;
  Begin
    PL := TPresupuestoDeVentaList.CreateMaximoNumero;
    If PL.count = 0 Then
      SetNumero(1)
    else
      SetNumero(PL.Actual.numero + 1);
  end;
// ----------------------------------------------------
  function EspresupuestoDeVentaNuevo: Boolean;
  Begin
    Result := (Self.numero = 0); // IsAssigned;
  end;
// ----------------------------------------------------

  procedure ValidacionesDeItems;
  begin
    Items.First;
    repeat
      if Items.Actual.CantidadPedida = 0 then
        Aplicacion.raiseExceptionCreate('El ítem ' + IntToStr(Items.Actual.itemNro) + ' tiene cantidad = 0');

      Items.Next;
    until Items.IsLast;
    Items.First;
  end;

begin
  Result := False;
  if not esImportacionDeDatos then
    begin
      // ************  Valido que los items existan
      if Self.Items.count = 0 then
        Aplicacion.raiseExceptionCreate('Debe ingresar al menos un item en el documento')
      else
        ValidacionesDeItems;
  end;

  if (EstadoDePresupuestoDeVentaID = NullID) then
    ColocarEstadoGrabado;

  If EspresupuestoDeVentaNuevo then
    AsignoNumeroDepresupuestoDeVenta;

  Result := Save;
end;

procedure TPresupuestoDeVenta.LimpiarItemsDeMemoria;
begin
  If not assigned(FItems) Then
    FreeAndNil(FItems);
end;

Function TPresupuestoDeVenta.Reporte(_EsParaMail: Boolean; _TipoDeFormulario : TTipoDeFormulario): String;
var
  Foto : String;
  AcumuladoTotaldelPedido: TReal;

  frxReport             : TfrxReport;
  frxDBDtstReporte      : TfrxDBDataset;
  frxDBDtstReporteItems : TfrxDBDataset;
  frxPDFExport          : TfrxPDFExport;
  Exportfilter          : TfrxCustomExportFilter;
  ClntDtStReporte       : TClientDataSet;
  ClntDtStReporteItems  : TClientDataSet;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile(_TipoDeFormulario.ArchivoXMLCamposEncabezado);
    ClntDtStReporte.Open;

    frxDBDtstReporte         := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name    := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;

    ClntDtStReporteItems := TClientDataSet.Create(nil);
    ClntDtStReporteItems.LoadFromFile( _TipoDeFormulario.ArchivoXMLCamposItems);
    ClntDtStReporteItems.Open;

    frxDBDtstReporteItems         := TfrxDBDataset.Create(nil);
    frxDBDtstReporteItems.Name    := 'frxDBDtstReporteItems';
    frxDBDtstReporteItems.DataSet := ClntDtStReporteItems;
    frxDBDtstReporteItems.Open;

    frxReport := TfrxReport.Create(nil);
    frxReport.LoadFromFile( _TipoDeFormulario.ArchivoReporte, True);
    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.DataSets.Add(frxDBDtstReporteItems);
    frxReport.Report.DataSets.Add(frxDBDtstReporte);
    frxReport.Report.DataSets.Add(frxDBDtstReporteItems);
    frxReport.PreviewOptions.Buttons := [pbZoom, pbFind, pbOutline, pbNavigator, pbPrint, pbExportQuick ];
    frxPDFExport                          := TfrxPDFExport.Create(frxReport);
    frxPDFExport.Compressed               := True;
    frxPDFExport.EmbeddedFonts            := True;
    frxPDFExport.PrintOptimized           := True;
    frxPDFExport.OpenAfterExport          := False;
    frxPDFExport.Outline                  := True;
    frxPDFExport.ProtectionFlags          := [ePrint];
    frxPDFExport.ShowDialog               := not _esParaMail;
    frxPDFExport.ShowProgress             := not _esParaMail;
    frxPDFExport.Title                    := 'Presupuesto de Venta';
    frxPDFExport.Author                   := Aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject                  := NumeroFinal;
    frxPDFExport.Creator                  := Aplicacion.Nombre + ' ' + Aplicacion.Version +  ' (' + Aplicacion.Empresa.Descripcion + ')';
    Exportfilter                          := TfrxCustomExportFilter(frxPDFExport);
    ExportFilter.ShowDialog               := True;
    ExportFilter.FileName                 := 'PreV' + IntToStr( Numero ) + '.Pdf';
    frxReport.Report.PrintOptions.Copies  := _TipoDeFormulario.CantidadDeImpresiones;
  end;



  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporteItems.EmptyDataSet;

    // cargo datos de cabecera
    ClntDtStReporte.Append;
    ClntDtStReporte.FieldByName('ID').AsInteger                 := ID;
    ClntDtStReporte.FieldByName('CodigoCliente').AsString       := Cliente.codigo;
    ClntDtStReporte.FieldByName('NombreCliente').AsString       := Cliente.Descripcion;
    ClntDtStReporte.FieldByName('CUITCliente').AsString         := Cliente.CUIT;
    ClntDtStReporte.FieldByName('DireccionCliente').AsString    := Cliente.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalCliente').AsString := Cliente.CodigoPostal;
    ClntDtStReporte.FieldByName('FechaDelPResupuesto').Value    := FechaReal;
    ClntDtStReporte.FieldByName('NumeroDePResupuesto').AsString := NumeroFinal;
    ClntDtStReporte.FieldByName('Vendedor').AsString            := GrupoDeVendedor.Codigo + '-' + GrupoDeVendedor.Descripcion;
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := Aplicacion.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := Aplicacion.Empresa.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := Aplicacion.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := Aplicacion.Empresa.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('ClienteLocalidad').AsString    := Cliente.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('CondicionDeVenta').AsString    := CondicionDeVenta.Descripcion;
    ClntDtStReporte.FieldByName('MonedaDescripcion').AsString   := Moneda.Descripcion;
    ClntDtStReporte.FieldByName('OrdenDeCompra').AsString       := NroOrdenDeCompraCliente;
    if (Cliente.CondicionDeIva.DiscriminaIVA) then
      ClntDtStReporte.FieldByName('PorcentajeDeIva').Value      := Cliente.CondicionDeIva.PorcentajeIVA1
    else
      ClntDtStReporte.FieldByName('PorcentajeDeIva').Value      := 0;

    ClntDtStReporte.Post;
    // cargo los items
    Items.First;
    repeat
      ClntDtStReporteItems.Append;
      ClntDtStReporteItems.FieldByName('ID').AsInteger               := Items.Actual.ID;
      ClntDtStReporteItems.FieldByName('Item').AsInteger             := Items.Actual.itemNro;
      ClntDtStReporteItems.FieldByName('Cantidad').AsInteger         := Items.Actual.CantidadPedida;
      ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString    := Items.Actual.Producto.codigo;
      ClntDtStReporteItems.FieldByName('Producto').AsString          := Items.Actual.descripcionDelItem;
      ClntDtStReporteItems.FieldByName('Precio').Value               := Items.Actual.PrecioDeVenta;
      ClntDtStReporteItems.FieldByName('totalItem').Value            := (ClntDtStReporteItems.FieldByName('Cantidad').AsInteger * ClntDtStReporteItems.FieldByName('Precio').Value);
      ClntDtStReporteItems.FieldByName('DiasDeFabricacion').AsString := Items.Actual.DiasDeFabricacion;
      AcumuladoTotaldelPedido := AcumuladoTotaldelPedido + ClntDtStReporteItems.FieldByName('totalItem').Value;
      If (Items.Actual.Producto.fabricadoID <> NullID) Then
      begin
        Foto := Items.Actual.Producto.archivoDeImagen;
        if (Foto = Items.Actual.Producto.ArchivoSinImagen) then
        begin
          if (Items.Actual.Producto.fabricado.Cunio.codigo <> Aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) and
            (Items.Actual.Producto.fabricado.Cunio.codigo <> Aplicacion.ParametrosDelSistema.SinCunio.codigo)
            then
            Foto := Items.Actual.Producto.fabricado.Cunio.archivoDeImagen
          else
            Foto := Items.Actual.Producto.fabricado.Articulo.archivoDeImagen;
        end;
        TGraphicField(ClntDtStReporteItems.FieldByName('ImagenProducto')).LoadFromFile(Foto);
      end;

      ClntDtStReporteItems.Post;
      Items.Next;
    until Items.IsLast;

    Items.First;

    // agrego un item con el descuento general encabezado
    if (DescuentoEspecial <> 0) then
    begin
      ClntDtStReporteItems.Append;
      ClntDtStReporteItems.FieldByName('ID').AsInteger            := 999999997;
      ClntDtStReporteItems.FieldByName('Item').AsInteger          := 999;
      ClntDtStReporteItems.FieldByName('Cantidad').AsInteger      := 1;
      ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString := '';
      ClntDtStReporteItems.FieldByName('Producto').AsString       := 'Descuento especial cliente ' + FloatToStrF(DescuentoEspecial,ffNumber, 6, 2) + ' %';
      ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString := '';
      ClntDtStReporteItems.FieldByName('Flexibilidad').AsString   := '';
      ClntDtStReporteItems.FieldByName('Lote').Value              := 0;
      ClntDtStReporteItems.FieldByName('Precio').Value            := - (AcumuladoTotaldelPedido * DescuentoEspecial / 100);
      ClntDtStReporteItems.FieldByName('FechaDeEntrega').Value    := FechaReal;
      ClntDtStReporteItems.FieldByName('EntregasParciales').Value := True;
      ClntDtStReporteItems.FieldByName('totalItem').Value         := ClntDtStReporteItems.FieldByName('Precio').Value;
      ClntDtStReporteItems.Post;
    end;
  end;

  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(frxDBDtstReporteItems);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(ClntDtStReporteItems);
  end;

begin
  try
    if (_TipoDeFormulario=nil) then
      _TipoDeFormulario := Self.tipoDeFormulario;

    Result := '';
    Aplicacion.ColocarCursorEspera;

    CrearComponentes;
    CargarDatos;

    if _EsParaMail and frxReport.PrepareReport then
      begin
        if _TipoDeFormulario.EditarPorAdministrador then
          frxReport.DesignReport;
        frxReport.Export(ExportFilter);
      end
    else
      begin
        frxReport.PrepareReport;
        if _TipoDeFormulario.EditarPorAdministrador then
          frxReport.DesignReport;
        frxReport.ShowReport;
      end;
    Result := frxPDFExport.FileName;
  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
  end;
end;

procedure TPresupuestoDeVenta.SetTipoDePresupuestoDeVentaID(const Value: TObjectID);
begin
  if (Value <> FTipoDePresupuestoDeVentaID) and assigned(FTipoDePresupuestoDeVenta) then
    FreeAndNil(FTipoDePresupuestoDeVenta);
  FTipoDePresupuestoDeVentaID := Value;

  if (FTipoDePresupuestoDeVentaID <> NullID) then
    TipoDeFormularioID := TipoDePresupuestoDeVenta.TipoDeFormularioID;
end;

function TPresupuestoDeVenta.getDireccionDeEntrega: TDeposito;
begin
  if not assigned(FDireccionDeEntrega) then
  begin
    if Cliente.depositosDeEmpresa.Find(DireccionDeEntregaID) then
      FDireccionDeEntrega := Cliente.depositosDeEmpresa.Actual;
  end;
  Result := TDeposito(FDireccionDeEntrega);
end;

procedure TPresupuestoDeVenta.SetDireccionDeEntregaID(const Value: TObjectID);
begin
  if (Value <> FDireccionDeEntregaID) and assigned(FDireccionDeEntrega) then
    FreeAndNil(FDireccionDeEntrega);
  FDireccionDeEntregaID := Value;
end;

function TPresupuestoDeVenta.GetImporteNetoDelPresupuesto: TReal;
  function importeDelItem: TReal;
  var
    imp, desc: TReal;
  begin
    imp := Items.Actual.PrecioDeVenta * Items.Actual.CantidadPedida;
    desc := imp * Items.Actual.porcentajeDescuento / 100;
    Result := imp - desc;
  end;

begin
  Result := 0;
  Items.First;
  while not Items.IsLast do
  begin
    Result := Aplicacion.MathService.Redondear(Result + Aplicacion.MathService.Redondear(importeDelItem, 2), 2);
    // Ojole, si trabajamos por millar aca hay que cambiarlo
    Items.Next;
  end;
  Items.First;
  FImporteNetoDelPresupuesto := Result;
end;

function TPresupuestoDeVenta.GetItems: TPresupuestoDeVentaItemList;
begin
  If not assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TPresupuestoDeVentaItemList.CreateBypresupuesto(Self)));
  Result := FItems;

end;

function TPresupuestoDeVenta.GetItemsActualizados : TPresupuestoDeVentaItemList;
begin
  if assigned(FItems) then
  begin
    FreeAndNil(FItems);
    GetList(TPDList(FItems), TPDList(TPresupuestoDeVentaItemList.CreateBypresupuesto(Self)));
  end;
  Result := FItems;
end;

function TPresupuestoDeVenta.GetListaDePrecio: TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDeprecio, FListaDePrecio, ListaDePrecioID);
  Result := TListaDeprecio(FListaDePrecio);
end;

procedure TPresupuestoDeVenta.SetFechaReal(const Value: TFecha);
begin
  If (Value = Null) Then
    Aplicacion.raiseExceptionCreate('Debe ingresar una fecha válida');

  { quitar luego de la carga inicial
    If (StrToDate (Value) < Aplicacion.DateTimeService.FechaHoraActual-1) Then
    Aplicacion.raiseExceptionCreate('No se puede cargar un presupuesto con fecha anterior a la de hoy.');
  }
  FFechaReal := Value;
end;

procedure TPresupuestoDeVenta.ValidarNumeroDePresupuestoDuplicado(_NumeroDePresupuesto: Integer; _ID: TObjectID);
Var
  PVL: TPresupuestoDeVentaList;
begin
  if (_NumeroDePresupuesto = 0) then
    Exit;
  Try
    PVL := TPresupuestoDeVentaList.CreateByNumeroDePresupuestoYIDDiferente(_NumeroDePresupuesto, _ID);
    If PVL.count > 0 then
    Begin
      PVL.First;
      Aplicacion.raiseExceptionCreate('El número de presupuesto "' + IntToStr(_NumeroDePresupuesto) + '" ya fue cargado el día ' + DateToStr(PVL.Actual.FFechaReal)
          + ' para el cliente "' + PVL.Actual.Cliente.codigo + ' - ' + PVL.Actual.Cliente.Descripcion + '".');
    end;
  Finally
    FreeAndNil(PVL);
  end;
end;

procedure TPresupuestoDeVenta.ValidateOnInsert;
begin
  inherited;
  ValidarNumeroDePresupuestoDuplicado(numero, ID);
end;

procedure TPresupuestoDeVenta.ValidateOnUpdate;
begin
  inherited;
  ValidarNumeroDePresupuestoDuplicado(numero, ID);
end;

{ TpresupuestoDeVentaDM }
class function TPresupuestoDeVentaDM.TableName: string;
begin
  Result := 'PresupuestosDeVenta';
end;

class function TPresupuestoDeVentaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TPresupuestoDeVentaDM.ID_FieldName: string;
begin
  Result := 'PresupuestoDeVentaID';
end;

procedure TPresupuestoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TPresupuestoDeVenta(PDObject) do
  begin
    IntegerField[_numero]                      := Fnumero;
    StringField[_NumeroLetrado]                := NumeroFinal;
    IDField[_TipoDePresupuestoDeVentaID]       := FTipoDePresupuestoDeVentaID;
    StringField[_Observaciones]                := FObservaciones;
    StringField[_observacionesParaFabrica]     := FObservacionesParaFabrica;
    IDField[_ClienteID]                        := FClienteID;
    IDField[_CondiciondeVentaID]               := FCondicionDeVentaID;
    IDField[_CondicionDeVentaDetalleID]        := FCondicionDeVentaDetalleID;
    DateField[_FechaReal]                      := FFechaReal;
    IDField[_EmpresaFleteID]                   := FEmpresaFleteID;
    IDField[_GrupoDeVendedorID]                := FGrupoDeVendedorID;
    IDField[_MarcaID]                          := FMarcaID;
    IDField[_monedaID]                         := FMonedaID;
    FloatField[_MonedaCotizacion]              := FMonedaCotizacion;
    StringField[_NroOrdenDeCompraCliente]      := FNroOrdenDeCompraCliente;
    FloatField[_PorcentComisionPorCobranza]    := FPorcentajeComisionPorCobranza;
    FloatField[_PorcentComisionPorFacturacion] := FPorcentajeComisionPorFacturacion;
    IDField[_DirecciondeEntregaID]             := FDireccionDeEntregaID;
    IDField[_TipoDeFormularioID]               := FTipoDeFormularioID;
    FloatField[_ImporteNetoDelPresupuesto]     := FImporteNetoDelPresupuesto;
    IDField[_CentroDeFacturacionID]            := FCentroDeFacturacionID;
    IDField[_EstadoDePresupuestoDeVentaID]     := FEstadoDePresupuestoDeVentaID;
    FloatField[_DescuentoEspecial]             := FDescuentoEspecial;
    BooleanField[_EntregaTotal]                := FEntregaTotal;
    IDField[_ListaDePrecioID]                  := FListaDePrecioID;
  end;
end;

procedure TPresupuestoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TPresupuestoDeVenta(PDObject) do
  begin
    FNumero                           := IntegerField[_Numero];
    FTipoDePresupuestoDeVentaID       := IDField[_TipoDePresupuestoDeVentaID];
    FObservaciones                    := StringField[_Observaciones];
    FObservacionesParaFabrica         := StringField[_observacionesParaFabrica];
    FFechaReal                        := DateField[_FechaReal];
    FClienteID                        := IDField[_ClienteID];
    FCondicionDeVentaID               := IDField[_CondiciondeVentaID];
    FCondicionDeVentaDetalleID        := IDField[_CondicionDeVentaDetalleID];
    FEmpresaFleteID                   := IDField[_EmpresaFleteID];
    FGrupoDeVendedorID                := IDField[_GrupoDeVendedorID];
    FMarcaID                          := IDField[_MarcaID];
    FMonedaID                         := IDField[_monedaID];
    FNroOrdenDeCompraCliente          := StringField[_NroOrdenDeCompraCliente];
    FPorcentajeComisionPorCobranza    := FloatField[_PorcentComisionPorCobranza];
    FPorcentajeComisionPorFacturacion := FloatField[_PorcentComisionPorFacturacion];
    FTipoDeFormularioID               := IDField[_TipoDeFormularioID];
    FMonedaCotizacion                 := FloatField[_MonedaCotizacion];
    FDireccionDeEntregaID             := IDField[_DirecciondeEntregaID];
    FImporteNetoDelPresupuesto        := FloatField[_ImporteNetoDelPresupuesto];
    FCentroDeFacturacionID            := IDField[_CentroDeFacturacionID];
    FEstadoDePresupuestoDeVentaID     := IDField[_EstadoDePresupuestoDeVentaID];
    FDescuentoEspecial                := FloatField[_DescuentoEspecial];
    FEntregaTotal                     := BooleanField[_EntregaTotal];
    FListaDePrecioID                  := IDField[_ListaDePrecioID];
  end;
end;

{ TPresupuestoDeVentaList }
function TPresupuestoDeVentaList.GetActual: TPresupuestoDeVenta;
begin
  Result := TPresupuestoDeVenta(CurrentObject);
end;

function TPresupuestoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TPresupuestoDeVenta.Create;
end;

function TPresupuestoDeVentaList.FindNumero(_numero: TEntero): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.numero = _numero);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor TPresupuestoDeVentaList.CreateAll;
begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateAll(False));
end;

constructor TPresupuestoDeVentaList.CreateByCliente(_C: TCliente);
  Function WhereString : String;
  begin
    Result := TPresupuestoDeVentaDM.TableName + '.' + TPresupuestoDeVentaDM._ClienteID + '=' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateAll( False, WhereString ));
end;

constructor TPresupuestoDeVentaList.CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde, _FechaHasta: String; _EstadoID: TObjectID);

  Function Condicion1: String;
  begin
    Result := '(' + TPresupuestoDeVentaDM._ClienteID + ' in ( select ' + TAbstractEmpresaDM.ID_FieldName + ' from ';
    Result := Result + TAbstractEmpresaDM.TableName + ' Where ' + TAbstractEmpresaDM._Codigo + '=' + QuotedStr(_C.codigo) + '))';
  end;
  Function Condicion2: String;
  begin
    Result := '(' + TPresupuestoDeVentaDM._FechaReal + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
    if _EstadoID <> NullID then
      Result := Result + ' and ( ' + TPresupuestoDeVentaDM._EstadoDePresupuestoDeVentaID + ' = ' + IntToStr(_EstadoID) + ' )';
  end;

begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateAll(False,Condicion1 + 'and' + Condicion2));
end;

constructor TPresupuestoDeVentaList.CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  function WhereString: String;
  begin
    Result := TPresupuestoDeVentaDM._EstadoDePresupuestoDeVentaID + ' in (-1';
    _Est.First;
    Repeat
      Result := Result + ',' + IntToStr(_Est.Actual.EstadoDePresupuestoDeVentaID);
      _Est.Next;
    until _Est.IsLast;
    Result := Result + ')';

    if Aplicacion.Usuario.EsVendedor then
      begin
        Result := Result + ' and (' + TPresupuestoDeVentaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorDM.ID_FieldName + ' from ' + TGrupoDeVendedorItemDM.TableName;
        Result := Result + ' Where ' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.VendedorID) + ')';
        Result := Result + ')';
      end;
  end;
begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaList.CreateByFechaDesdeFechaHasta(_FechaDesde: String; _FechaHasta: String; _EstadoID: TObjectID = NullID; _Descendente: Boolean = False);
  Function Condicion1: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
    begin
      Result := ' (' + TPresupuestoDeVentaDM.TableName + '.' + TPresupuestoDeVentaDM._EstadoDePresupuestoDeVentaID + ' = ' + IntToStr(_EstadoID) + ' ) and ';
    end;
  end;
  Function Condicion2: String;
  begin
    Result := '(' + TPresupuestoDeVentaDM.TableName + '.' + TPresupuestoDeVentaDM._FechaReal + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  End;
  Function OrderBy: String;
  begin
    Result := TPresupuestoDeVentaDM._FechaReal;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateAll(False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TPresupuestoDeVentaList.CreateByGrupoDeVendedores(_G: TGrupoDeVendedor);
  Function WhereString : String;
  begin
    Result := TPresupuestoDeVentaDM._GrupoDeVendedorID + '=' + IntToStr(_G.ID);
  end;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaList.CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_G: TGrupoDeVendedor;_FechaDesde, _FechaHasta: String; _EstadoID: TObjectID);
  Function Condicion2: String;
  begin
    Result := '(' + TPresupuestoDeVentaDM.TableName + '.' +TPresupuestoDeVentaDM._GrupoDeVendedorID + ' in ( select ' +TGrupoDeVendedorDM.TableName + '.' +TGrupoDeVendedorDM.ID_FieldName + ' from ';
    Result := Result + TGrupoDeVendedorDM.TableName + ' Where ' +TGrupoDeVendedorDM.TableName + '.' +TGrupoDeVendedorDM._Descripcion + '=' + QuotedStr(_G.Descripcion) + '))';
  end;
  Function Condicion3: String;
  begin
    Result := ' and (' + TPresupuestoDeVentaDM._FechaReal + ' between ' +QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
  end;

  Function Condicion1: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
      Result := ' (' + TPresupuestoDeVentaDM.TableName + '.' +TPresupuestoDeVentaDM._EstadoDePresupuestoDeVentaID + ' = ' +IntToStr(_EstadoID) + ') and ';
  end;

begin
  inherited Create(TPedidoDeVenta,TPedidoDeVentaDM.CreateAll(False, Condicion1 + Condicion2 + Condicion3));
end;

constructor TPresupuestoDeVentaList.CreateByMarca(_M: TMarca);
  Function WhereString : String;
  begin
    Result := TPresupuestoDeVentaDM._MarcaID + '=' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaList.CreateByNumeroDePresupuesto(_NumeroDePresupuesto: Integer);
  Function WhereString: String;
  Begin
    Result := TPresupuestoDeVentaDM._numero + '=' + IntToStr(_NumeroDePresupuesto);
  end;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateAll(False,WhereString));
end;

constructor TPresupuestoDeVentaList.CreateByNumeroDePresupuestoYIDDiferente(_NumeroDePresupuesto: Integer; _ID: TObjectID);
  Function WhereString: String;
  Begin
    Result := TPresupuestoDeVentaDM._numero + '=' + IntToStr(_NumeroDePresupuesto) + ' and IDFieldName<>' + IntToStr(_ID);
  end;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaList.CreateByPresupuestoDeVenta(_P: TPresupuestoDeVenta);
  Function WhereString : String;
  begin
    Result := 'IDFieldName =' + QuotedStr(IntToStr(_P.ID));
  end;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateAll(False, WhereString ));
end;

constructor TPresupuestoDeVentaList.CreateEmpty;
begin
  inherited Create(TPresupuestoDeVenta,TPresupuestoDeVentaDM.CreateEmpty);
end;

constructor TPresupuestoDeVentaList.CreateMaximoNumero;
  Function OrderByString: String;
  begin
    Result := TPresupuestoDeVentaDM.TableName + '.' + TPresupuestoDeVentaDM._numero + ' desc';
  end;
begin
  inherited Create(TPresupuestoDeVenta, TPresupuestoDeVentaDM.CreateTop(1,'',OrderByString));
end;

{ TpresupuestoDeVentaStateLog }
constructor TpresupuestoDeVentaStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TpresupuestoDeVentaStateLogDM);
  SaveSQLLog := False;
  FfechaHora := Null;
end;

function TpresupuestoDeVentaStateLog.GetEstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta;
begin
  if not assigned(FEstadoDePresupuestoDeVenta) then
    GetObject(TEstadoDePresupuestoDeVenta, FEstadoDePresupuestoDeVenta,FEstadoDePresupuestoDeVentaID);
  Result := TEstadoDePresupuestoDeVenta(FEstadoDePresupuestoDeVenta);
end;

function TpresupuestoDeVentaStateLog.getPresupuestoDeVenta: TPresupuestoDeVenta;
begin
  if not assigned(FPresupuestoDeVenta) then
    GetObject(TPresupuestoDeVenta, FPresupuestoDeVenta,FPresupuestoDeVentaID);
  Result := TPresupuestoDeVenta(FPresupuestoDeVenta);
end;

function TpresupuestoDeVentaStateLog.Getusuario: TUsuario;
begin
  if not assigned(Fusuario) then
    GetObject(TUsuario, Fusuario, FusuarioID);
  Result := TUsuario(Fusuario);
end;

procedure TpresupuestoDeVentaStateLog.SetEstadoDePresupuestoDeVentaID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FEstadoDePresupuestoDeVentaID) then
    FreeAndNil(FEstadoDePresupuestoDeVenta);
  FEstadoDePresupuestoDeVentaID := Value;
end;

procedure TpresupuestoDeVentaStateLog.SetusuarioID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FusuarioID) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

{ TpresupuestoDeVentaStateLogDM }
class function TpresupuestoDeVentaStateLogDM.TableName: string;
begin
  Result := 'PresupuestoDeVentaStateLogs';
end;

class function TpresupuestoDeVentaStateLogDM.ID_FieldName: string;
begin
  Result := 'PresupuestoDeVentaStateLogID';
end;

procedure TpresupuestoDeVentaStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TpresupuestoDeVentaStateLog(PDObject) do
  begin
    IDField[_EstadoDePresupuestoDeVentaID] := FEstadoDePresupuestoDeVentaID;
    IDField[_UsuarioID]                    := FUsuarioID;
    DateTimeField[_FechaHora]              := FFechaHora;
    IDField[_PresupuestoDeVentaID]         := FPresupuestoDeVentaID;
    StringField[_Observaciones]            := FObservacion;
  end;
end;

procedure TpresupuestoDeVentaStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TpresupuestoDeVentaStateLog(PDObject) do
  begin
    FEstadoDePresupuestoDeVentaID := IDField[_EstadoDePresupuestoDeVentaID];
    FusuarioID                    := IDField[_UsuarioID];
    FfechaHora                    := DateTimeField[_FechaHora];
    FPresupuestoDeVentaID         := IDField[_PresupuestoDeVentaID];
    fObservacion                  := StringField[_Observaciones];
  end;
end;

{ TpresupuestoDeVentaStateLogList }
function TPresupuestoDeVentaStateLogList.GetActual : TpresupuestoDeVentaStateLog;
begin
  Result := TpresupuestoDeVentaStateLog(CurrentObject);
end;

function TPresupuestoDeVentaStateLogList.CreateNewObject: TPDObject;
begin
  Result := TpresupuestoDeVentaStateLog.Create;
end;

constructor TPresupuestoDeVentaStateLogList.CreateAll;
begin
  inherited Create(TpresupuestoDeVentaStateLog,TpresupuestoDeVentaStateLogDM.CreateAll(False));
end;

constructor TPresupuestoDeVentaStateLogList.CreateByPresupuestoDeVenta(_P: TPresupuestoDeVenta);
  Function WhereString : String;
  begin
    Result := TpresupuestoDeVentaStateLogDM._PresupuestoDeVentaID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TpresupuestoDeVentaStateLog,TpresupuestoDeVentaStateLogDM.CreateAll(False, WhereString));
end;

procedure TPresupuestoDeVentaItem.ColocarEstadoConfirmado;
  Function ObtenerEstadoConfirmadoID: TObjectID;
  Var
    EL: TEstadoDepresupuestoDeVentaItemList;
  Begin
    Try
      EL := TEstadoDepresupuestoDeVentaItemList.CreateByCodigo('C', False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Confirmado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
  Function ObtenerEstadoPendienteID: TObjectID;
  Var
    EL: TEstadoDepresupuestoDeVentaItemList;
  Begin
    Try
      EL := TEstadoDepresupuestoDeVentaItemList.CreateByCodigo('P', False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Confirmado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

begin
  FEstadoID := ObtenerEstadoConfirmadoID;
  FParaProduccion := True;

  If Producto.fabricado.Terminacion.codigo =  Aplicacion.ParametrosDelSistema.CodigoTerminacionSinDefinir Then
    FEstadoID := ObtenerEstadoPendienteID;
  If Producto.fabricado.Cunio.codigo = Aplicacion.ParametrosDelSistema.CodigoCunioSinDefinir Then
    FEstadoID := ObtenerEstadoPendienteID;

end;

procedure TPresupuestoDeVentaItem.ColocarEstadoGrabado;
  Function ObtenerEstadoGrabadoID: TObjectID;
  Var
    EL: TEstadoDepresupuestoDeVentaItemList;
  Begin
    Try
      EL := TEstadoDepresupuestoDeVentaItemList.CreateByCodigo('G', False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Grabado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;

begin
  FEstadoID := ObtenerEstadoGrabadoID;
end;

procedure TPresupuestoDeVentaItem.ColocarEstadoPendiente;
  Function ObtenerEstadoPendienteID: TObjectID;
  Var
    EL: TEstadoDepresupuestoDeVentaItemList;
  Begin
    Try
      EL := TEstadoDepresupuestoDeVentaItemList.CreateByCodigo('P', False);
      if EL.count = 0 then
        Raise Exception.Create('No existe un estado de Confirmado en la tabla');
      Result := EL.Actual.ID;
    Finally
      FreeAndNil(EL);
    End;
  end;
begin
  FEstadoID := ObtenerEstadoPendienteID;
end;

constructor TPresupuestoDeVentaItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TpresupuestoDeVentaItemDM);
  FporcentajeDescuento      := 0;
  FporcentajeAnticipo       := 0;
  FcantidadCancelada        := 0;
  FcantidadFacturada        := 0;
  FCantidadPedida           := 0;
  FitemNro                  := Null;
  fObservacion              := '';
  FObservacionesParaFabrica := '';
  FGuardandoDesdeElPadre    := False;
  FesImportacionDeDatos     := False;
  FEsMuestra                := False;
  FPrecioDeLista            := Null;
  FPrecioVentaAnterior      := Null;
  FPrecioDeVenta            := 0;
  FTiempoEstimadoProduccion := Null;
  FTipoDeFlexibilidadID     := NullID;
  FNoValidaFecha            := False;
end;

procedure TPresupuestoDeVentaItem.Delete;
begin
  DetalleDePrecios.DeleteAll;
  inherited;
end;

procedure TPresupuestoDeVentaItem.SetEstadoID(const Value: TObjectID);
begin
  if (Value <> FEstadoID) and assigned(FEstado) then
    FreeAndNil(FEstado);
  FEstadoID := Value;
end;

procedure TPresupuestoDeVentaItem.SetFechaDelPresupuesto(const Value: TFecha);
begin
  if (Value <> FFechaDelpresupuesto) then
    FTiempoEstimadoProduccion := Null;
  FFechaDelpresupuesto := Value;
end;

procedure TPresupuestoDeVentaItem.setListaDePrecioID(const Value: TObjectID);
begin
  if (FlistaDePrecioID<>Value) and assigned( FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  FListaDEPrecioID := Value;
end;

procedure TPresupuestoDeVentaItem.SetPresupuestoDeVentaID(Value: TObjectID);
begin
  if (Value <> FPresupuestoDeVentaID) and assigned(FPresupuestoDeVenta) then
    FreeAndNil(FPresupuestoDeVenta);
  FPresupuestoDeVentaID := Value;
end;

procedure TPresupuestoDeVentaItem.SetMonedaDelPresupuestoID(const Value: TObjectID);
begin
  if (FMonedaDelPresupuestoID<>Value) and assigned( FMonedaDelpresupuesto) then
    FreeAndNil(FMonedaDelpresupuesto);
  FMonedaDelPresupuestoID := Value;
end;

procedure TPresupuestoDeVentaItem.SetPorcentajeDeTolerancia(const Value: TReal);
begin
  if (Value < 0) or (Value > 100) then
    Aplicacion.raiseExceptionCreate('El porcentaje debe estar entre 0 y 100');
  FPorcentajeDeTolerancia := Value;
end;

procedure TPresupuestoDeVentaItem.SetPrecioDeLista(const Value: TReal);
begin
  FPrecioDeLista := Aplicacion.MathService.Redondear(Value, 5);
end;

procedure TPresupuestoDeVentaItem.SetPrecioDeVenta(const Value: TReal);
begin
  FPrecioDeVenta := Aplicacion.MathService.Redondear(Value, 5);
end;

function TPresupuestoDeVentaItem.getPresupuestoDeVenta: TPresupuestoDeVenta;
begin
  if not assigned(FPresupuestoDeVenta) then
    GetObject(TPresupuestoDeVenta, FPresupuestoDeVenta, FPresupuestoDeVentaID);
  Result := TPresupuestoDeVenta(FPresupuestoDeVenta);
end;

function TPresupuestoDeVentaItem.GetPrecioDeLista: TReal;
begin
  If (FPrecioDeLista= Null) or (FPrecioDeLista = 0) Then
    begin
      FPrecioDeLista := 0;
      DetalleDePrecios.first;
      While Not DetalleDePrecios.IsLast do
        Begin
          FPrecioDeLista := FPrecioDeLista + DetalleDePrecios.Actual.Precio;
          DetalleDePrecios.Next;
        End;
      FPrecioDeLista := Aplicacion.MathService.Redondear(FPrecioDeLista, 5)
    end;
  Result := FPrecioDeLista;
end;

function TPresupuestoDeVentaItem.GetPrecioDeVenta: TReal;
begin
  FPrecioDeVenta := Aplicacion.MathService.Redondear(FPrecioDeVenta, 5);
  Result := FPrecioDeVenta;
end;

function TPresupuestoDeVentaItem.GetDetalleDePrecios : TPresupuestoDeVentaItemPrecioDeListaList;
begin
  If not assigned(FDetalleDePrecios) Then
    GetList(TPDList(FDetalleDePrecios), TPDList(TPresupuestoDeVentaItemPrecioDeListaList.CreateBypresupuestoDeVentaItem(Self)));
  Result := TPresupuestoDeVentaItemPrecioDeListaList(FDetalleDePrecios);
end;

procedure TPresupuestoDeVentaItem.SetProductoID(Value: TObjectID);
begin
  if (Value <> FProductoID) and assigned(FProducto) then
    begin
      FreeAndNil(FProducto);
      if assigned(DetalleDePrecios) then
        FreeAndNil(FDetalleDePrecios);
    end;
  FProductoID := Value;
end;

procedure TPresupuestoDeVentaItem.SetTipoDeFlexibilidadID(const Value: TObjectID);
begin
  if (FTipoDeFlexibilidadID <> Value) then
    FreeAndNil(FTipoDeFlexibilidad);

  FTipoDeFlexibilidadID := Value;
end;

function TPresupuestoDeVentaItem.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, ProductoID);
  Result := TProducto(FProducto);
end;

// function TpresupuestoDeVentaItem.GetProductosReservadosEnStock: TStockItemList;
// begin
// Result := TStockItemList.CreateByPVItem(IntToStr (Self.presupuestoDeVenta.numero)+'-'+IntToStr (Self.itemNro));
// end;

function TPresupuestoDeVentaItem.GetTiempoEstimadoProduccion: TEntero;
begin
  if (FTiempoEstimadoProduccion = Null) and (ProductoID <> NullID) and (Producto.fabricadoID <> NullID) then
    FTiempoEstimadoProduccion := Producto.fabricado.TiempoEstimadoTotalDelProducto;
  if (ProductoID = NullID) or (Producto.fabricadoID = NullID) then
    Result := 0
  else
    Result := FTiempoEstimadoProduccion;
end;

function TPresupuestoDeVentaItem.GetTipoDeFlexibilidad: TTipoDeFlexibilidad;
begin
  if not assigned(FTipoDeFlexibilidad) then
    GetObject(TTipoDeFlexibilidad, FTipoDeFlexibilidad, TipoDeFlexibilidadID);
  Result := TTipoDeFlexibilidad(FTipoDeFlexibilidad);
end;

function TPresupuestoDeVentaItem.GetTipoDeFlexibilidadID: TObjectID;
var
  FL: TTipoDeFlexibilidadList;
begin
  if (FTipoDeFlexibilidadID= NullID) then
    try
      FL := TTipoDeFlexibilidadList.CreateByCodigo(Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo, False);
      if FL.Count=0  then
        raise Exception.Create('No se encontró tipo de flexibilidad: ' +Aplicacion.ParametrosDelSistema.FlexibilidadDefaultCodigo);

      FL.First;
      FTipoDeFlexibilidadID         := FL.Actual.ID;
      FNoValidaFecha                := FL.Actual.NoValidarFecha;
    finally
      FreeAndNil(FL);
    end;
  Result := FTipoDeFlexibilidadID;
end;

procedure TPresupuestoDeVentaItem.GuardarDetalleDePrecio;
begin
  if not assigned( FDetalleDePrecios ) or Modified then
    Aplicacion.DataService.ObtenerOGuardarPrecioDelProducto(Producto, MonedaDelPresupuesto, ListaDePrecioID, True, self, True );
end;

function TPresupuestoDeVentaItem.getCantidadPendiente: TReal;
begin
  Result := CantidadPedida - (cantidadCancelada + cantidadFacturada);
  // esto se debe revisar cuando estén bien analizadas las cantidades
end;

function TPresupuestoDeVentaItem.Save: Boolean;
begin
  if Self.ProductoID = NullID then
    Aplicacion.raiseExceptionCreate('No ha ingresado un producto al Item');
  Result := inherited Save;
  FPrecioDeLista := Null;

  if not esCambioDeEstado then
    GuardarDetalleDePrecio
  else
    EsCambioDeEstado:= False;

  if not esImportacionDeDatos and (PresupuestoDeVenta.tmpInsertarItemCostoCunioNuevo <> Null) and PresupuestoDeVenta.tmpInsertarItemCostoCunioNuevo then
    PresupuestoDeVenta.agregarItemConCostoDeMatriceria(PresupuestoDeVenta.tmpCostoCunioNuevo);
end;

function TPresupuestoDeVentaItem.GetEstado: TEstadoDepresupuestoDeVentaITem;
begin
  if not assigned(FEstado) then
    GetObject(TEstadoDepresupuestoDeVentaITem, FEstado, EstadoID);
  Result := TEstadoDepresupuestoDeVentaITem(FEstado);
end;

function TPresupuestoDeVentaItem.GetFechaDeFinDeFabricacion: TFecha;
begin
  FFechaDeFinDeFabricacion := FechaDelpresupuesto + TiempoEstimadoProduccion;
  Result := FFechaDeFinDeFabricacion;
end;

function TPresupuestoDeVentaItem.GetFechaDelpresupuesto: TFecha;
begin
  if (FFechaDelpresupuesto = Unassigned) then
    FFechaDelpresupuesto := PresupuestoDeVenta.FechaReal;
  Result := FFechaDelpresupuesto;
end;

function TPresupuestoDeVentaItem.GetImporteTotal: TReal;
var
  Descuento : TReal;
begin
  Descuento := (PrecioDeVenta * PorcentajeDescuento / 100);
  FImporteTotal := Aplicacion.MathService.Redondear(CantidadPedida * (PrecioDeVenta - Descuento), 2);
  Result := FImporteTotal;
end;

function TPresupuestoDeVentaItem.GetListaDePrecio: TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio, FListaDePrecio, ListaDePrecioID);
  Result := TListaDePrecio(FListaDePrecio);
end;

function TPresupuestoDeVentaItem.GetMonedaDelPresupuesto: TMoneda;
begin
  if not assigned(FMonedaDelPresupuesto) then
    if (FMonedaDelPresupuestoID <> NullID) then
      GetObject(TMoneda, FMonedaDelpresupuesto, FMonedaDelPresupuestoID)
    else
      begin
        FMonedaDelPresupuestoID := PresupuestoDeVenta.MonedaID;
        GetObject(TMoneda, FMonedaDelpresupuesto, FMonedaDelPresupuestoID)
      end;
  Result := TMoneda(FMonedaDelpresupuesto);
end;

{ TpresupuestoDeVentaItemDM }
class function TpresupuestoDeVentaItemDM.TableName: string;
begin
  Result := 'PresupuestoDeVentaItems';
end;

class function TPresupuestoDeVentaItemDM.CampoPrecioDeLista: String;
begin
  Result := 'ISNULL( (SELECT SUM(' + TPresupuestoDeVentaItemPrecioDeListaDM._Precio + ') FROM ' +
             TPresupuestoDeVentaItemPrecioDeListaDM.TableName + ' PVIP WHERE PVIP.' + TPresupuestoDeVentaItemPrecioDeListaDM._PresupuestoDeVentaItemID + ' = ' +
             TPresupuestoDeVentaItemDM.TableName + '.' +  TPresupuestoDeVentaItemDM.ID_FieldName + '),0)';
end;

class function TPresupuestoDeVentaItemDM.CreateCompuesto(_Parte : Integer): String;
var
  camposTabla0, camposTabla1, camposTabla2, camposTabla3, camposTabla4: string;
  Function CamposString : String;
  begin
    camposTabla0 := TableName                        + '.*';
    camposTabla1 := TPresupuestoDeVentaDM.TableName  + '.*';
    camposTabla2 := TFabricadoDM.TableName           + '.*';
    camposTabla3 := TServicioDM.TableName            + '.*';
    camposTabla4 := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM._Codigo + ' as ' + _PVCentroDeFacturacionCodigo;
    Result :=          CamposTabla0 + ', ';
    Result := Result + CamposTabla1 + ', ';
    Result := Result + TPresupuestoDeVentaItemDM.CampoPrecioDeLista     + ' as ' + _PrecioDeLista      + ', ';
    Result := Result + CamposTabla2 + ', ';
    Result := Result + CamposTabla3 + ', ';
    Result := Result + CamposTabla4;
  end;
  Function LeftJoinString : String;
  var
    ID1NameTabla0, ID2NameTabla0, IDNameTabla1, ID2NameTabla1, IDNameTabla2, IDNameTabla3, IDNameTabla4: String;
  begin
    ID1NameTabla0 := TableName                        + '.' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID;
    ID2NameTabla0 := TableName                        + '.' + TpresupuestoDeVentaItemDM._ProductoID;

    IDNameTabla1  := TPresupuestoDeVentaDM.TableName  + '.' + TPresupuestoDeVentaDM.ID_FieldName;
    ID2NameTabla1 := TPresupuestoDeVentaDM.TableName  + '.' + TPresupuestoDeVentaDM._CentroDeFacturacionID;

    IDNameTabla2  := TFabricadoDM.TableName           + '.' + TFabricadoDM._ProductoID;
    IDNameTabla3  := TServicioDM.TableName            + '.' + TServicioDM._ProductoID;
    IDNameTabla4  := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM.ID_FieldName;

    Result :=          ' Left Join ' + TPresupuestoDeVentaDM.TableName  + ' On (' + ID1NameTabla0 + '=' + IDNameTabla1 + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName           + ' On (' + ID2NameTabla0 + '=' + IDNameTabla2 + ') ';
    Result := Result + ' Left Join ' + TServicioDM.TableName            + ' On (' + ID1NameTabla0 + '=' + IDNameTabla3 + ') ';
    Result := Result + ' Left Join ' + TCentroDeFacturacionDM.TableName + ' On (' + ID2NameTabla1 + '=' + IDNameTabla4 + ') ';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TpresupuestoDeVentaItemDM.ID_FieldName: string;
begin
  Result := 'PresupuestoDeVentaItemID';
end;

procedure TpresupuestoDeVentaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TPresupuestoDeVentaItem(PDObject) do
  begin
    IDField[_PresupuestoDeVentaID]         := PresupuestoDeVentaID;
    FloatField[_CantidadCancelada]         := cantidadCancelada;
    FloatField[_CantidadFacturada]         := cantidadFacturada;
    FloatField[_CantidadPedida]            := CantidadPedida;
    IntegerField[_DiasDeFabricacion]       := DiasDeFabricacion;
    DateField[_FechaDeFinDeFabricacion]    := FechaDeFinDeFabricacion;
    IntegerField[_ItemNro]                 := itemNro;
    StringField[_DescripcionDelItem]       := descripcionDelItem;
    StringField[_Observacion]              := Observacion;
    StringField[_observacionesParaFabrica] := ObservacionesParaFabrica;
    IDField[_ProductoID]                   := ProductoID;
    FloatField[_PrecioVentaAnterior      ] := PrecioVentaAnterior;
    FloatField[_PrecioDeVenta ]            := PrecioDeVenta;
    IntegerField[_TiempoEstimadoProduccion]:= TiempoEstimadoProduccion;
    StringField[_CodigoProductoCliente]    := CodigoProductoCliente;
    FloatField[_PorcentajeDescuento]       := porcentajeDescuento;
    FloatField[_PorcentajeAnticipo]        := porcentajeAnticipo;
    IntegerField[_Lote]                    := FLote;
    IDField[_EstadoID]                     := EstadoID;
    BooleanField[_ParaProduccion]          := ParaProduccion;
    BooleanField[_EsMuestra]               := EsMuestra;
    IDField[_TipoDeFlexibilidadID]         := FTipoDeFlexibilidadID;
    BooleanField[_EntregaTotal]            := FEntregaTotal;
  end;
end;

procedure TpresupuestoDeVentaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TPresupuestoDeVentaItem(PDObject) do
  begin
    FPresupuestoDeVentaID     := IDField[_PresupuestoDeVentaID];
    FcantidadCancelada        := FloatField[_CantidadCancelada];
    FcantidadFacturada        := FloatField[_CantidadFacturada];
    FCantidadPedida           := FloatField[_CantidadPedida];
    FdescripcionDelItem       := StringField[_DescripcionDelItem];
    FDiasDeFabricacion        := IntegerField[_DiasDeFabricacion];
    FFechaDeFinDeFabricacion  := DateField[_FechaDeFinDeFabricacion];
    FitemNro                  := IntegerField[_ItemNro];
    fObservacion              := StringField[_Observacion];
    FObservacionesParaFabrica := StringField[_observacionesParaFabrica];
    FProductoID               := IDField[_ProductoID];
    FPrecioDeLista            := FloatField[_PrecioDeLista];
    FPrecioDeVenta            := FloatField[_PrecioDeVenta];
    FPrecioVentaAnterior      := FloatField[_PrecioVentaAnterior];
    FTiempoEstimadoProduccion := IntegerField[_TiempoEstimadoProduccion];
    FCodigoProductoCliente    := StringField[_CodigoProductoCliente];
    FporcentajeDescuento      := FloatField[_PorcentajeDescuento];
    FporcentajeAnticipo       := FloatField[_PorcentajeAnticipo];
    FLote                     := IntegerField[_Lote];
    FEstadoID                 := IDField[_EstadoID];
    FParaProduccion           := BooleanField[_ParaProduccion];
    FEsMuestra                := BooleanField[_EsMuestra];
    FEntregaTotal             := BooleanField[_EntregaTotal];
    FTipoDeFlexibilidadID     := IDField[_TipoDeFlexibilidadID];

    // CAMPOS presupuestoSDEVENTA
    FPVNumero := IntegerField[_PVNumero];
    FPVTipoDepresupuestoDeVentaID := IDField[_PVTipoDepresupuestoDeVentaID];
    FPVObservaciones := StringField[_PVObservaciones];
    FPVObservacionesParaFabrica := StringField[_PVobservacionesParaFabrica];
    FPVFechaReal := DateField[_PVFechaReal];
    FPVClienteID := IDField[_PVClienteID];
    FPVCondicionDeVentaID := IDField[_PVCondiciondeVentaID];
    FPVEmpresaFleteID := IDField[_PVEmpresaFleteID];
    FPVGrupoDeVendedorID := IDField[_PVGrupoDeVendedorID];
    FPVMarcaID := IDField[_PVMarcaID];
    FPVMonedaID := IDField[_PVmonedaID];
    FPVNroOrdenDeCompraCliente := StringField[_PVNroOrdenDeCompraCliente];
    FPVPorcentajeComisionPorCobranza := FloatField[_PVPorcentComisionPorCobranza];
    FPVPorcentajeComisionPorFacturacion := FloatField[_PVPorcentComisionPorFacturacion];
    FPVTipoDeFormularioID := IDField[_PVTipoDeFormularioID];
    FPVMonedaCotizacion := FloatField[_PVMonedaCotizacion];
    FPVDireccionDeEntregaID := IDField[_PVDirecciondeEntregaID];
    FPVImporteNetoDelpresupuesto := FloatField[_PVImporteNetoDelpresupuesto];
    FPVCentroDeFacturacion := StringField[_PVCentroDeFacturacionCodigo];
    FPVNumeroLetrado := StringField[_PVNumeroLetrado];
    FPVEstadoDepresupuestoDeVentaID := IDField[_PVEstadoDepresupuestoDeVentaID];

    FPVDescuentoEspecial := FloatField[_PVDescuentoEspecial];
    FPVEntregaTotal := BooleanField[_PVEntregaTotal];
    FPVListaDePrecioID := IDField[_PVListaDePrecioID];

    // CAMPOS FABRICADOS
    FFBArticuloID := IDField[_FBarticuloID];
    FFBCunioID := IDField[_FBcunioID];
    FFBTerminacionID := IDField[_FBterminacionID];
    FFBcrc := IntegerField[_FBCrc];
    FFBProductoID := IDField[_FBProductoID];
    FFBCodigo := StringField[_FBCodigo];
    FFBDescripcion := StringField[_FBDescripcion];
  end;
end;

{ TpresupuestoDeVentaItemList }
function TPresupuestoDeVentaItemList.GetActual: TPresupuestoDeVentaItem;
begin
  Result := TPresupuestoDeVentaItem(CurrentObject);
end;

function TPresupuestoDeVentaItemList.CreateNewObject: TPDObject;
begin
  Result := TPresupuestoDeVentaItem.Create;
end;

function TPresupuestoDeVentaItemList.FindItem(_Item: TEntero;_Rest: Boolean): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.itemNro = _Item);
    if not Result then
      Next;
  end;
  if IsLast then
    First;
end;

constructor TPresupuestoDeVentaItemList.CreateAll;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False));
end;

constructor TPresupuestoDeVentaItemList.CreateByCunio(_C: TCunio);
  function obtenerINdeProductos: String;
  begin
    Result := '( select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ';
    Result := Result + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + ')';
  end;
  function WhereString: String;
  begin
    Result := TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._ProductoID + ' in ' + obtenerINdeProductos;
  end;

begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaItemList.CreateByCunioYEstado(_C: TCunio;_E: TEstadoDePresupuestoDeVenta);
  function obtenerINdeProductos: String;
  begin
    Result := '( select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ';
    Result := Result + TFabricadoDM._cunioID + ' = ' + IntToStr(_C.ID) + ')';
  end;
  function WhereString: String;
  begin
    Result := TpresupuestoDeVentaItemDM.TableName + '.' +  TpresupuestoDeVentaItemDM._ProductoID + ' in ' +  obtenerINdeProductos;
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
  // FALTA AGREGAR EL FILTRO POR ESTADO DE presupuesto Item
end;

constructor TPresupuestoDeVentaItemList.CreateByEstado(_EstadoID: TObjectID);
  function WhereString: String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._EstadoID + '=' + IntToStr(_EstadoID) + ')';
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaItemList.CreateByEstadoYProduccion(_Estado: TEstadoDepresupuestoDeVentaITem; _ParaProduccion: Boolean);
Var
  SioNo: String;
  function WhereString: String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._EstadoID + '=' +
              IntToStr(_Estado.ID) + ') And (' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._ParaProduccion + ' = ' + SioNo + ')';
  end;
begin
  if _ParaProduccion then
    SioNo := '1'
  Else
    SioNo := '0';

  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaItemList.CreateByID(_ID: TObjectID);
begin
  inherited Create(TPresupuestoDeVentaItem, TPresupuestoDeVentaItemDM.CreateByID( _ID ));
end;

constructor TPresupuestoDeVentaItemList.CreateByEstadoYCliente(_C: TCliente);
  function WhereString: String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID;
    Result := Result + ' in( Select ' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID;
    Result := Result + ' from ' + TPresupuestoDeVentaDM.TableName + ' where ' + TPresupuestoDeVentaDM._ClienteID;
    Result := Result + '=' + IntToStr(_C.ID) + '))';
    // cuando se implementen los estados del TpresupuestoDeVentaItem se debe agregar esa condición
  end;
begin
  inherited Create(TPresupuestoDeVentaItem,TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaItemList.CreateByEstadoYClienteConSaldo(_C: TCliente);
  function TextoSql: String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID;
    Result := Result + ' in( Select ' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID;
    Result := Result + ' from ' + TPresupuestoDeVentaDM.TableName + ' where ' + TPresupuestoDeVentaDM._ClienteID;
    Result := Result + '=' + IntToStr(_C.ID) + '))';
    // cuando se implementen los estados del TpresupuestoDeVentaItem se debe agregar esa condición
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, TextoSql));
end;

constructor TPresupuestoDeVentaItemList.CreateBypresupuesto(_PV: TPresupuestoDeVenta);
  Function WhereString : String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._PresupuestoDeVentaID + '=' + IntToStr(_PV.ID) + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TpresupuestoDeVentaItemDM._ItemNro;
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPresupuestoDeVentaItemList.CreateByPrimerProductoID(_ProductoID: TObjectID);
  Function WhereString : String;
  begin
    Result := '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._ProductoID + '=' + IntToStr(_ProductoID) + ')'
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateTop(1, WhereString,''));
end;

constructor TPresupuestoDeVentaItemList.CreateByProducto(_P: TProducto);
  Function WhereString : String;
  begin
    Result :=  '(' + TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._ProductoID + '=' + IntToStr(_P.ID) + ')';
  end;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString));
end;

constructor TPresupuestoDeVentaItemList.CreateByProductoYEmpresa(_P: TProducto; _C: TCliente);
var
  FieldNameProductoID: String;
  FieldNamepresupuestoDeVentaID: String;
  FieldNameClienteID: String;
  FieldNameFechaReal: String;
  Function WhereString : String;
  begin
    Result := ' (' + FieldNameProductoID + '=' + IntToStr(_P.ID) + ')' + ' and ' + FieldNamepresupuestoDeVentaID + ' in ( Select ';
    Result := Result + FieldNamepresupuestoDeVentaID + ' from ' +  TPresupuestoDeVentaDM.TableName + ' where ' + FieldNameClienteID + '=' + IntToStr(_C.ID) + ' )';
  end;
  Function OrderBy : String;
  begin
    Result := FieldNameFechaReal + ' DESC' + ',' + FieldNamepresupuestoDeVentaID + ' DESC'
  end;

begin
  FieldNameProductoID           := TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM._ProductoID;
  FieldNamepresupuestoDeVentaID := TpresupuestoDeVentaItemDM.TableName + '.' + TpresupuestoDeVentaItemDM. _PresupuestoDeVentaID;
  FieldNameClienteID            := TPresupuestoDeVentaDM.TableName     + '.' + TPresupuestoDeVentaDM._ClienteID;
  FieldNameFechaReal            := TPresupuestoDeVentaDM.TableName     + '.' + TPresupuestoDeVentaDM._FechaReal;
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateAll(False, WhereString, False, OrderBy));
end;


constructor TPresupuestoDeVentaItemList.CreateEmpty;
begin
  inherited Create(TPresupuestoDeVentaItem, TpresupuestoDeVentaItemDM.CreateEmpty);
end;

{ TpresupuestoDeVentaItemPrecioDeLista }
constructor TPresupuestoDeVentaItemPrecioDeLista.Create;
begin
  inherited;
  DMObject     := Aplicacion.DMPRovider.GetGlobalDM(TpresupuestoDeVentaItemPrecioDeListaDM);
  FDescripcion := Null;
  FPrecio      := Null;
end;

procedure TPresupuestoDeVentaItemPrecioDeLista.SetmonedaDePrecioID(Value: TObjectID);
begin
  if (Value <> FmonedaDePrecioID) and assigned(FmonedaDePrecio) then
    FreeAndNil(FmonedaDePrecio);
  FmonedaDePrecioID := Value;
end;

function TPresupuestoDeVentaItemPrecioDeLista.GetmonedaDePrecio: TMoneda;
begin
  if not assigned(FmonedaDePrecio) then
    GetObject(TMoneda, FmonedaDePrecio, monedaDePrecioID);
  Result := TMoneda(FmonedaDePrecio);
end;

{ TpresupuestoDeVentaItemPrecioDeListaDM }
class function TpresupuestoDeVentaItemPrecioDeListaDM.TableName: string;
begin
  Result := 'presupuestodeventaitemprecios';
end;

class function TpresupuestoDeVentaItemPrecioDeListaDM.ID_FieldName: string;
begin
  Result := 'presupuestoDeVentaItemPrecioID';
end;

procedure TpresupuestoDeVentaItemPrecioDeListaDM.PopulateFields(PDObject: TPDObject);
begin
  with TPresupuestoDeVentaItemPrecioDeLista(PDObject) do
  begin
    IDField[_presupuestoDeVentaItemID] := FPresupuestoDeVentaItemID;
    StringField[_Descripcion] := Descripcion;
    FloatField[_Precio] := FPrecio;
    IDField[_monedaDePrecioID] := FmonedaDePrecioID;
  end;
end;

procedure TpresupuestoDeVentaItemPrecioDeListaDM.PopulateObject(PDObject: TPDObject);
begin
  with TPresupuestoDeVentaItemPrecioDeLista(PDObject) do
  begin
    FPresupuestoDeVentaItemID := IDField[_presupuestoDeVentaItemID];
    FDescripcion := StringField[_Descripcion];
    FPrecio := FloatField[_Precio];
    FmonedaDePrecioID := IDField[_monedaDePrecioID];
  end;
end;

{ TpresupuestoDeVentaItemPrecioDeListaDeListaList }
function TpresupuestoDeVentaItemPrecioDeListaList.GetActual : TPresupuestoDeVentaItemPrecioDeLista;
begin
  Result := TPresupuestoDeVentaItemPrecioDeLista(CurrentObject);
end;

constructor TPresupuestoDeVentaItemPrecioDeListaList.CreateBypresupuestoDeVentaItem(_PVI: TPresupuestoDeVentaItem);
  function WhereString: String;
  begin
    Result := TpresupuestoDeVentaItemPrecioDeListaDM._presupuestoDeVentaItemID + '=' + IntToStr(_PVI.ID);
  end;
begin
  Inherited Create(TPresupuestoDeVentaItemPrecioDeLista, TpresupuestoDeVentaItemPrecioDeListaDM.CreateAll(False, WhereString));
end;

function TpresupuestoDeVentaItemPrecioDeListaList.CreateNewObject: TPDObject;
begin
  Result := TPresupuestoDeVentaItemPrecioDeLista.Create;
end;

constructor TpresupuestoDeVentaItemPrecioDeListaList.CreateAll;
begin
  inherited Create(TPresupuestoDeVentaItemPrecioDeLista, TpresupuestoDeVentaItemPrecioDeListaDM.CreateAll(False));
end;

{ TPedidoDeVentaItemStateLog }

constructor TPedidoDeVentaItemStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaItemStateLogDM);
  SaveSQLLog := False;
  FfechaHora := Null;
end;

function TPedidoDeVentaItemStateLog.GetestadoDePedidoDeVentaItem: TEstadoDePedidoDeVentaITem;
begin
  if not assigned(FestadoDePedidoDeVentaItem) then
    GetObject(TEstadoDePedidoDeVentaITem, FestadoDePedidoDeVentaItem,FestadoDePedidoDeVentaItemID);
  Result := TEstadoDePedidoDeVentaITem(FestadoDePedidoDeVentaItem);
end;

function TPedidoDeVentaItemStateLog.GetPedidoDeVentaItem: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) and (FPedidoDeVentaItemID <> NullId) then
    GetObject(TPedidoDeVentaItem, FPedidoDeVentaItem,FPedidoDeVentaItemID);
  Result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

function TPedidoDeVentaItemStateLog.Getusuario: TUsuario;
begin
  if not assigned(Fusuario) then
    GetObject(TUsuario, Fusuario, FusuarioID);
  Result := TUsuario(Fusuario);
end;

procedure TPedidoDeVentaItemStateLog.SetestadoDePedidoDeVentaItemID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FestadoDePedidoDeVentaItemID) then
    FreeAndNil(FestadoDePedidoDeVentaItem);
  FestadoDePedidoDeVentaItemID := Value;
end;

procedure TPedidoDeVentaItemStateLog.SetusuarioID(Value: TObjectID);
begin
  if (Value = NullID) or (Value <> FusuarioID) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

{ TPedidoDeVentaItemStateLogDM }

class function TPedidoDeVentaItemStateLogDM.ID_FieldName: string;
begin
  Result := 'PedidoDeVentaItemStateLogID';
end;

procedure TPedidoDeVentaItemStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVentaItemStateLog(PDObject) do
    begin
      IDField[_estadoDePedidoDeVentaItemID] := FestadoDePedidoDeVentaItemID;
      IDField[_UsuarioID]                   := FusuarioID;
      DateTimeField[_FechaHora]             := FfechaHora;
      IDField[_PedidoDeVentaItemID]         := FPedidoDeVentaItemID;
      StringField[_Observaciones]           := fObservacion;
      StringField[_StatementType]           := statementType;
      StringField[_Statement]               := statement;
    end;
end;

procedure TPedidoDeVentaItemStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVentaItemStateLog(PDObject) do
    begin
      FestadoDePedidoDeVentaItemID := IDField[_estadoDePedidoDeVentaItemID];
      FusuarioID                   := IDField[_UsuarioID];
      FfechaHora                   := DateTimeField[_FechaHora];
      FPedidoDeVentaItemID         := IDField[_PedidoDeVentaItemID];
      fObservacion                 := StringField[_Observaciones];
      statementType                := StringField[_StatementType];
      statement                    := StringField[_Statement];
    end;
end;

class function TPedidoDeVentaItemStateLogDM.TableName: string;
begin
  Result := 'PedidoDeVentaItemStateLogs';
end;

{ TPedidoDeVentaItemStateLogList }

constructor TPedidoDeVentaItemStateLogList.CreateAll;
begin
  inherited Create(TPedidoDeVentaItemStateLog, TPedidoDeVentaItemStateLogDM.CreateAll(False));
end;

constructor TPedidoDeVentaItemStateLogList.CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
  Function WhereString : String;
  begin
    Result := TPedidoDeVentaItemStateLogDM._PedidoDeVentaItemID + '=' + IntToStr(_PVI.ID);
  end;
begin
  inherited Create(TPedidoDeVentaItemStateLog, TPedidoDeVentaItemStateLogDM.CreateAll(False, WhereString));
end;

function TPedidoDeVentaItemStateLogList.CreateNewObject: TPDObject;
begin
  Result := TPedidoDeVentaItemStateLog.Create;
end;

function TPedidoDeVentaItemStateLogList.GetActual : TPedidoDeVentaItemStateLog;
begin
  Result := TPedidoDeVentaItemStateLog(CurrentObject);
end;

{ THojaDeRuta }
procedure THojaDeRuta.AgregarNuevoEstadoAlLog(_Obs : String);
var
  S: THojaDeRutaStateLog;
begin
  try
    S                      := THojaDeRutaStateLog.Create;
    S.EstadoDeHojaDeRutaID := FEstadoDeHojaDeRutaID;
    S.UsuarioID            := Aplicacion.Usuario.ID;
    S.IPAddress            := Aplicacion.Sesion.IPAddress;
    S.FechaHora            := Aplicacion.DateTimeService.FechaHoraActual;
    S.HojaDeRutaID         := Self.ID;
    if (_Obs <> '') then
      S.Observaciones        := _Obs
    else
      S.Observaciones        := FObservacionEstado;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

procedure THojaDeRuta.AgregarRuteoNoConforme(_HRNoConforme : THojaDeRuta ; _SigueProceso : Boolean; _AgregarPasoCalidad : Boolean);
var
  HRPF: THojaDeRutaPasoDeFabricacion;
  HayFechaEgreso, EncontroPrimerPaso, YaAgregoPasoDeCalidad : Boolean;

  Procedure CrearPasoDeFabricacion;
  begin
    HRPF                         := THojaDeRutaPasoDeFabricacion.Create;
    HRPF.HojaDeRutaID            := ID ;
    HRPF.TmpEsNoConformeOParcial := True; // para que no me haga el seter de fecha de egreso
    HRPF.Secuencia               := _HRNoConforme.PasosDeFabricacion.Actual.Secuencia ;
    HRPF.PasoDeFabricacionID     := _HRNoConforme.PasosDeFabricacion.Actual.PasoDeFabricacionID ;
    HRPF.RecursoID               := _HRNoConforme.PasosDeFabricacion.Actual.RecursoID ;
    HRPF.EsUltimoPaso            := _HRNoConforme.PasosDeFabricacion.Actual.EsUltimoPaso ;
    if (_HRNoConforme.PasosDeFabricacion.Actual.FechaDeFinDePaso <> Null) then
      HRPF.FechaDeFinDePaso  := _HRNoConforme.PasosDeFabricacion.Actual.FechaDeFinDePaso;
    HRPF.save;
    PasosDeFabricacion.Add( HRPF );
    HRPF.NilObject;
  end;

  Procedure CrearPasoDeFabricacionCalidad;
  var
    PFL : TPasoDeFabricacionList;
  begin
    try
    PFL := TPasoDeFabricacionList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionCalidad );
    PFL.First;
    if (PFL.Count > 0) then
      begin
        _HRNoConforme.PasosDeFabricacion.Previous;

        HRPF                         := THojaDeRutaPasoDeFabricacion.Create;
        HRPF.HojaDeRutaID            := ID ;
        HRPF.TmpEsNoConformeOParcial := True; // para que no me haga el seter de fecha de egreso
        HRPF.Secuencia               := 0;    //_HRNoConforme.PasosDeFabricacion.Actual.Secuencia;
        HRPF.PasoDeFabricacionID     := PFL.Actual.ID;
        HRPF.EsUltimoPaso            := _HRNoConforme.PasosDeFabricacion.Actual.EsUltimoPaso;

        if (_HRNoConforme.PasosDeFabricacion.Actual.FechaDeFinDePaso <> Null) then
          HRPF.FechaDeFinDePaso  := _HRNoConforme.PasosDeFabricacion.Actual.FechaDeFinDePaso;

        HRPF.FechaDeIngreso    := Aplicacion.DateTimeService.FechaHoraActual;

        //HRPF.CantidadIngresada       := _HRNoConforme.PasosDeFabricacion.Actual.CantidadIngresada;
        HRPF.Save;
        PasosDeFabricacion.Add( HRPF );
        HRPF.NilObject;
        _HRNoConforme.PasosDeFabricacion.Next;
      end;
    finally
        FreeAndNil(PFL);
    end;
  end;
begin
  EncontroPrimerPaso    := False;
  YaAgregoPasoDeCalidad := False;

  if ( _HRNoConforme.PasosDeFabricacion.Count > 0 ) then
    begin
      _HRNoConforme.PasosDeFabricacion.first;
      while not _HRNoConforme.PasosDeFabricacion.IsLast do
        begin
          HayFechaEgreso := (_HRNoConforme.PasosDeFabricacion.Actual.FechaDeEgreso <> Null) and (_HRNoConforme.PasosDeFabricacion.Actual.FechaDeEgreso <> 0);

          if _SigueProceso then
            begin
              if not HayFechaEgreso then
                begin
                  CrearPasoDeFabricacion;
                  EncontroPrimerPaso := True;
                end;
              if _AgregarPasoCalidad then
                if EncontroPrimerPaso and not YaAgregoPasoDeCalidad then
                  begin
                    CrearPasoDeFabricacionCalidad;
                    YaAgregoPasoDeCalidad := True;
                  end;
            end
          else
            CrearPasoDeFabricacion;

          _HRNoConforme.PasosDeFabricacion.Next;
        end;
    end;
end;

procedure THojaDeRuta.AgregarRuteoParcial(_HRParcial: THojaDeRuta; _ConFechas: Boolean);
var
  HRPF: THojaDeRutaPasoDeFabricacion;
  HayFechaEgreso : Boolean;

  Procedure CrearPasoDeFabricacion(_HRPF : THojaDeRutaPasoDeFabricacion);
  begin
    HRPF                         := THojaDeRutaPasoDeFabricacion.Create;
    HRPF.HojaDeRutaID            := ID;
    HRPF.TmpEsNoConformeOParcial := True;
    HRPF.Secuencia               := _HRPF.Secuencia;
    HRPF.PasoDeFabricacionID     := _HRPF.PasoDeFabricacionID;
    HRPF.RecursoID               := _HRPF.RecursoID;
    HRPF.EsUltimoPaso            := _HRPF.EsUltimoPaso;

    if _ConFechas then
      begin
        if (_HRPF.FechaDeFinDePaso <> Null) then
          HRPF.FechaDeFinDePaso  := _HRPF.FechaDeFinDePaso;
        if (_HRPF.FechaDeIngreso <> Null) then
          HRPF.FechaDeIngreso    := _HRPF.FechaDeIngreso;
        if (_HRPF.FechaDeEgreso <> Null) then
          HRPF.FechaDeEgreso     := _HRPF.FechaDeEgreso;
      end;

    HRPF.save;
    PasosDeFabricacion.Add( HRPF );
    HRPF.NilObject;
  end;
begin
  if ( _HRParcial.PasosDeFabricacion.Count > 0 ) then
    begin
      _HRParcial.PasosDeFabricacion.first;
      while not _HRParcial.PasosDeFabricacion.IsLast do
        begin
          HayFechaEgreso := (_HRParcial.PasosDeFabricacion.Actual.FechaDeEgreso <> Null) and (_HRParcial.PasosDeFabricacion.Actual.FechaDeEgreso <> 0);
          if not HayFechaEgreso then
            CrearPasoDeFabricacion( _HRParcial.PasosDeFabricacion.Actual );
          _HRParcial.PasosDeFabricacion.Next;
        end;
    end;
end;

Procedure THojaDeRuta.AgregarUltimoRuteo;
var
  HRL      : THojaDeRutaList;
  HRPF     : THojaDeRutaPasoDeFabricacion;
begin
  if (ProductoParte.RuteoDefault.Count > 0) then
    begin
      ProductoParte.RuteoDefault.First;
      while not ProductoParte.RuteoDefault.IsLast do
        begin
          HRPF                     := THojaDeRutaPasoDeFabricacion.Create;
          HRPF.HojaDeRutaID        := ID;
          HRPF.Secuencia           := ProductoParte.RuteoDefault.Actual.Secuencia;
          HRPF.PasoDeFabricacionID := ProductoParte.RuteoDefault.Actual.PasoDeFabricacionID ;
          HRPF.RecursoID           := ProductoParte.RuteoDefault.Actual.RecursoID ;
          HRPF.EsUltimoPaso        := ProductoParte.RuteoDefault.Actual.EsUltimoPaso;
          HRPF.Save;
          PasosDeFabricacion.Add(HRPF);
          HRPF.NilObject;
          ProductoParte.RuteoDefault.Next;
        end;
    end
  else
    begin
      try
        HRL := THojaDeRutaList.CreateByUltimaHojaDeRutaAndProductoParte(ProductoParte);
        if ( HRL.Count > 0 ) then
          if ( HRL.Actual.PasosDeFabricacion.Count > 0 ) then
            begin
              HRL.First;
              HRL.Actual.PasosDeFabricacion.first;
              while not HRL.Actual.PasosDeFabricacion.IsLast do
                begin
                  HRPF                     := THojaDeRutaPasoDeFabricacion.Create;
                  HRPF.HojaDeRutaID        := ID;
                  HRPF.Secuencia           := HRL.Actual.PasosDeFabricacion.Actual.Secuencia;
                  HRPF.PasoDeFabricacionID := HRL.Actual.PasosDeFabricacion.Actual.PasoDeFabricacionID;
                  HRPF.RecursoID           := HRL.Actual.PasosDeFabricacion.Actual.RecursoID;
                  HRPF.EsUltimoPaso        := HRL.Actual.PasosDeFabricacion.Actual.EsUltimoPaso;
                  HRPF.Save;
                  PasosDeFabricacion.Add( HRPF );
                  HRPF.NilObject;
                  HRL.Actual.PasosDeFabricacion.Next;
                end;
            end;
      Finally
        if Assigned(HRL) then
          FreeAndNil(HRL);
      end;
    end;
end;

procedure THojaDeRuta.AsignarUltimoRuteoYSecuencia;
var
  I : Integer;
begin
  if (PasosDeFabricacion.Count = 0) then
    exit;
  PasosDeFabricacion.Sort;

  i := PasosDeFabricacion.Count;
  PasosDeFabricacion.Last;
  PasosDeFabricacion.Actual.EsUltimoPaso := True;
  PasosDeFabricacion.Actual.Secuencia := i;
  PasosDeFabricacion.Actual.Save;
  if I = 1 then
    exit;
  repeat
    PasosDeFabricacion.Previous;
    i := i -1;
    PasosDeFabricacion.Actual.EsUltimoPaso := False;
    PasosDeFabricacion.Actual.Secuencia    := i;
    PasosDeFabricacion.Actual.Save;
  until PasosDeFabricacion.IsFirst;
  PasosDeFabricacion.First;
end;

Procedure THojaDeRuta.AsignarColorDeHojaDeRuta;
var
  ColorID : TObjectID;
begin
  ColorID := Producto.Fabricado.articulo.familiaDeArticulo.ColorDeHojaDeRutaID;
  if (ColorID = NullID) then
    ColorID := PedidoDeVentaItem.PedidoDeVenta.Cliente.CategoriaDeCliente.ColorDeHojaDeRutaID;
  ColorDeHojaDeRutaID := ColorID;
  TipoDeFormularioID  := ColorDeHojaDeRuta.TipoDeFormularioID;
end;

function THojaDeRuta.CalcularProductoParteSemiID: TObjectID;
var
  FL : TFabricadoList;
  F  : TFabricado;
begin
  if ProductoParte.EsFabricado then
    if ( ProductoParte.Fabricado.Articulo.Material.TerminacionNaturalID <> NullID ) then
      try
        FL := TFabricadoList.CreateByArticuloTerminacionCunio( ProductoParte.Fabricado.Articulo, ProductoParte.Fabricado.Articulo.Material.TerminacionNatural, ProductoParte.Fabricado.Cunio );
        if FL.Count =0 then
          begin
            F := TFabricado.Create;
            F.ArticuloID    := ProductoParte.Fabricado.ArticuloID;
            F.TerminacionID := ProductoParte.Fabricado.Articulo.Material.TerminacionNaturalID;
            F.CunioID       := ProductoParte.Fabricado.CunioID;
            F.Crc           := 0;
            F.Descripcion   := F.DescripcionTraducida;
            F.Save;
            FL.Add( F );
          end
        else
          FL.First;
      finally
        Result := FL.Actual.ProductoID;
        FL.ApplyUpdates;
        FreeAndNil(FL);
      end
    else
      Result := ProductoParteID;
end;

function THojaDeRuta.ColorDeHojaDeRutaNoConformeID: TObjectID;
var
  CL : TColorDeHojaDeRutaList;
begin
  Try
    CL := TColorDeHojaDeRutaList.CreateByDescripcionLike('AMARILLA', TColorDeHojaDeRutaDM._Descripcion);
    if (CL.Count>0) then
      begin
        CL.First;
        Result := CL.Actual.ID;
      end
    else
      Result := NullID;
  Finally
    FreeAndNil(CL);
  End;
end;

procedure THojaDeRuta.CrearHojaDelPadre;
var
  HR  : THojaDeRuta;
  HRL : THojaDeRutaList;
  EHRL : TEstadoDeHojaDeRutaList;
  IDEstado : TObjectID;
begin
  try
    HRL := THojaDeRutaList.CreateEmpty;
    HR := THojaDeRuta.Create;
    try
      EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_PendienteDeRuteo, False);
      IDEstado := EHRL.Actual.ID;
    finally
      FreeAndNil(EHRL);
    end;
    HR.NumeroImprimible              := NumeroImprimible;
    HR.NumeroDeParte                 := NumeroDeParte;
    HR.PedidoDeVentaItemID           := PedidoDeVentaItemID;
    HR.ProductoID                    := ProductoID;
    HR.ProductoParteID               := ProductoPadreInmediatoParteID;
    HR.ProductoPadreInmediatoParteID := ProductoID;
    HR.MaterialProductoParteID       := MaterialProductoParteID;
    HR.CantidadPedida                := CantidadPedida;
    HR.CantidadExtra                 := CantidadExtra;
    HR.CantidadBuena                 := 0;
    HR.FechaDeCarga                  := FechaDeCarga;
    HR.FechaPrometida                := FechaPrometida;
    HR.ObservacionProduccion         := ObservacionProduccion;
    HR.EstadoDeHojaDeRutaID          := IDEstado;
    HR.ColorDeHojaDeRutaID           := ColorDeHojaDeRutaID;
    HR.TipoDeFormularioID            := TipoDeFormularioID;
    HR.Save;
    HR.AgregarUltimoRuteo;
    HR.AgregarNuevoEstadoAlLog;
    HRL.Add(HR);
    HRL.ApplyUpdates;
    HR.NilObject;
  finally
    FreeAndNil(HRL);
  end;
end;

procedure THojaDeRuta.CrearHojaDuplicada;
var
  HR  : THojaDeRuta;
  HRL : THojaDeRutaList;
  IDEstado : TObjectID;
begin
  try
    HRL                              := THojaDeRutaList.CreateEmpty;
    HR                               := THojaDeRuta.Create;
    HR.NumeroImprimible              := NumeroImprimible;
    HR.PedidoDeVentaItemID           := PedidoDeVentaItemID;
    HR.ProductoID                    := ProductoID;
    HR.ProductoParteID               := ProductoParteID;
    HR.ProductoPadreInmediatoParteID := ProductoPadreInmediatoParteID;
    HR.MaterialProductoParteID       := MaterialProductoParteID;
    HR.CantidadPedida                := CantidadPedida;
    HR.CantidadExtra                 := CantidadExtra;
    HR.CantidadBuena                 := 0;
    HR.FechaDeCarga                  := FechaDeCarga;
    HR.FechaPrometida                := FechaPrometida;
    HR.ObservacionProduccion         := ObservacionProduccion;
    HR.NumeroDeParte                 := NumeroDeParte;
    HR.EstadoDeHojaDeRutaID          := EstadoDeHojaDeRutaID;
    HR.ColorDeHojaDeRutaID           := ColorDeHojaDeRutaID;
    HR.tipoDeFormularioID            := tipoDeFormularioID;
    HR.Save;
    HR.AgregarUltimoRuteo;
    HR.AgregarNuevoEstadoAlLog;
    HRL.Add(HR);
    HRL.ApplyUpdates;
    HR.NilObject;
  finally
    FreeAndNil(HRL);
  end;
end;

Class procedure THojaDeRuta.CrearHojasDeRutaNoConforme(_HRNC: THojaDeRuta; _EsPorElTotal: Boolean; _AgregarPasoCalidad : Boolean);
var
  HR  : THojaDeRuta;
  HRL : THojaDeRutaList;
  EHRL : TEstadoDeHojaDeRutaList;
  IDEstadoReproceso,IDEstadoParaImprimir : TObjectID;
  CantidadDeHojas , I : Integer;
begin
  try
    HRL := THojaDeRutaList.CreateEmpty;
    if _EsPorElTotal then
      CantidadDeHojas := 1
    else
      CantidadDeHojas := 2;
    try
      EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_Reproceso, False);
      IDEstadoReproceso := EHRL.Actual.ID;
      EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_ReprocesoParaImp, False);
      IDEstadoParaImprimir := EHRL.Actual.ID;
    finally
      FreeAndNil(EHRL);
    end;

   for I := 0 to CantidadDeHojas - 1 do
    begin
      HR := THojaDeRuta.Create;
      HR.NumeroImprimible              := _HRNC.NumeroImprimible ;
      HR.PedidoDeVentaItemID           := _HRNC.PedidoDeVentaItemID;
      HR.ProductoID                    := _HRNC.ProductoID;
      HR.ProductoParteID               := _HRNC.ProductoParteID;
      HR.ProductoPadreInmediatoParteID := _HRNC.ProductoPadreInmediatoParteID;
      HR.MaterialProductoParteID       := _HRNC.MaterialProductoParteID;
      HR.FechaDeCarga                  := _HRNC.FechaDeCarga;
      HR.FechaPrometida                := _HRNC.FechaPrometida;
      HR.NumeroDeParte                 := _HRNC.NumeroDeParte;
      if _EsPorElTotal then
        begin
          HR.CantidadPedida            := _HRNC.CantidadPedida;
          HR.CantidadExtra             := _HRNC.CantidadExtra;
          HR.CantidadBuena             := 0;
          HR.EstadoDeHojaDeRutaID      := IDEstadoReproceso;
          HR.ColorDeHojaDeRutaID       := _HRNC.ColorDeHojaDeRutaNoConformeID;
          HR.TipoDeFormularioID        := HR.ColorDeHojaDeRuta.TipoDeFormularioID;
          HR.ObservacionProduccion     := _HRNC.MotivoDeNoConforme.Descripcion;
          HR.Save;
          HR.AgregarRuteoNoConforme(_HRNC,False, _AgregarPasoCalidad);
        end
      else
        begin
          if I = 0 then
            begin  // primer hoja por la cantidad buena
              HR.CantidadPedida            := _HRNC.CantidadBuena;
              HR.CantidadExtra             := 0;
              HR.CantidadBuena             := 0;
              HR.EstadoDeHojaDeRutaID      := IDEstadoParaImprimir;
              HR.ColorDeHojaDeRutaID       := _HRNC.ColorDeHojaDeRutaID;
              HR.TipoDeFormularioID        := _HRNC.TipoDeFormularioID;
              HR.Save;
              HR.AgregarRuteoNoConforme(_HRNC,True, _AgregarPasoCalidad);
              HR.PasosDeFabricacion.Sort;
              HR.RenumerarPasos;
              HR.PasosDeFabricacion.First;
              HR.IngresarHojaDeRuta(HR.PasosDeFabricacion.Actual.PasoDeFabricacion);
            end
          else  // Segunda hoja por la cantidad mala
            begin
              HR.CantidadPedida            := (_HRNC.CantidadPedida - _HRNC.CantidadBuena);
              HR.CantidadExtra             := 0;
              HR.CantidadBuena             := 0;
              HR.EstadoDeHojaDeRutaID      := IDEstadoReproceso;
              HR.ColorDeHojaDeRutaID       := _HRNC.ColorDeHojaDeRutaNoConformeID;
              HR.TipoDeFormularioID        := HR.ColorDeHojaDeRuta.TipoDeFormularioID;
              HR.ObservacionProduccion     := _HRNC.MotivoDeNoConforme.Descripcion;
              HR.Save;
              HR.AgregarRuteoNoConforme(_HRNC,False,_AgregarPasoCalidad);
            end;
        end;
      HR.AgregarNuevoEstadoAlLog;
      HRL.Add(HR);
      HRL.ApplyUpdates;
      HR.NilObject;
    end;
  finally
    FreeAndNil(HRL);
  end;
end;

procedure THojaDeRuta.CrearHojasDeRutaParcial(_HRP: THojaDeRuta);
var
  HR  : THojaDeRuta;
  HRL : THojaDeRutaList;
  EHRL : TEstadoDeHojaDeRutaList;
  IDEstadoParaImprimir : TObjectID;
  CantidadDeHojas , I : Integer;
begin
  try
    HRL  := THojaDeRutaList.CreateEmpty;
    try
      EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_ParcialParaImprimir, False);
      IDEstadoParaImprimir := EHRL.Actual.ID;
    finally
      FreeAndNil(EHRL);
    end;
    CantidadDeHojas := 2;
    for I := 0 to CantidadDeHojas - 1 do
      begin
        HR   := THojaDeRuta.Create;
        HR.NumeroImprimible              := _HRP.NumeroImprimible;
        HR.PedidoDeVentaItemID           := _HRP.PedidoDeVentaItemID;
        HR.ProductoID                    := _HRP.ProductoID;
        HR.ProductoParteID               := _HRP.ProductoParteID;
        HR.ProductoPadreInmediatoParteID := _HRP.ProductoPadreInmediatoParteID;
        HR.MaterialProductoParteID       := _HRP.MaterialProductoParteID;
        HR.NumeroDeParte                 := _HRP.NumeroDeParte;
        HR.FechaDeCarga                  := _HRP.FechaDeCarga;
        HR.FechaPrometida                := _HRP.FechaPrometida;
        HR.EstadoDeHojaDeRutaID          := IDEstadoParaImprimir;
        HR.FechaEstimadaProduccion       := _HRP.FechaEstimadaProduccion;
        HR.ObservacionProduccion         := _HRP.ObservacionProduccion;
        case I of
          0:
            begin
              HR.CantidadPedida          := _HRP.CantidadParcial;
              HR.CantidadExtra           := 0;
              HR.CantidadBuena           := 0;
            end;
          1:
            begin
              HR.CantidadPedida          := (_HRP.CantidadPedida - _HRP.CantidadParcial);
              HR.CantidadExtra           := _HRP.CantidadExtra;// todo el exedente queda en la hoja que sigue en fabricacion
              HR.CantidadBuena           := 0;
            end;
        end;
        HR.ColorDeHojaDeRutaID     := _HRP.ColorDeHojaDeRutaID;
        HR.TipoDeFormularioID      := _HRP.ColorDeHojaDeRuta.TipoDeFormularioID;
        HR.Save;
        HR.AgregarRuteoParcial(_HRP, True);
        //ingreso del primer paso
        HR.PasosDeFabricacion.First;
        HR.IngresarHojaDeRuta(HR.PasosDeFabricacion.Actual.PasoDeFabricacion);
        HR.AgregarNuevoEstadoAlLog;
        HRL.Add(HR);
        HRL.ApplyUpdates;
        HR.NilObject;
      end;
  finally
    FreeAndNil(HRL);
  end;
end;

procedure THojaDeRuta.CrearHojasDeRutaReparacion(_HRRP: THojaDeRuta);
var
  HR  : THojaDeRuta;
  HRL : THojaDeRutaList;
  EHRL : TEstadoDeHojaDeRutaList;
  IDEstado : TObjectID;
begin
  try
    HRL := THojaDeRutaList.CreateEmpty;
    HR := THojaDeRuta.Create;
    try
      EHRL := TEstadoDeHojaDeRutaList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoHR_Reparacion, False);
      IDEstado := EHRL.Actual.ID;
    finally
      FreeAndNil(EHRL);
    end;
    HR.NumeroImprimible              := NumeroImprimible;
    HR.PedidoDeVentaItemID           := PedidoDeVentaItemID;
    HR.ProductoID                    := ProductoID;
    HR.ProductoParteID               := ProductoParteID;
    HR.ProductoPadreInmediatoParteID := ProductoPadreInmediatoParteID;
    HR.MaterialProductoParteID       := MaterialProductoParteID;
    HR.CantidadPedida                := CantidadPedida;
    HR.CantidadExtra                 := CantidadExtra;
    HR.CantidadBuena                 := 0;
    HR.FechaDeCarga                  := FechaDeCarga;
    HR.FechaPrometida                := FechaPrometida;
    HR.ObservacionProduccion         := ObservacionProduccion;
    HR.NumeroDeParte                 := NumeroDeParte;
    HR.EstadoDeHojaDeRutaID          := IDEstado;
    HR.ColorDeHojaDeRutaID           := ColorDeHojaDeRutaID;
    HR.tipoDeFormularioID            := TipoDeFormularioID;
    HR.Save;
//    HR.AgregarUltimoRuteo;
    HR.AgregarRuteoParcial( Self, True );
    HR.AgregarNuevoEstadoAlLog;
    HRL.Add(HR);
    HRL.ApplyUpdates;
    HR.NilObject;
  finally
    FreeAndNil(HRL);
  end;
end;

constructor THojaDeRuta.Create;
begin
  inherited;
  SaveSqlLog                     := False;
  DMObject                       := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaDM);
  FNumero                        := Null;
  FCantidadPedida                := 0;
  FCantidadExtra                 := 0;
  FCantidadbuena                 := 0;
  FCantidadParcial               := 0;
  FPedidoDeVentaItemID           := NullID;
  FEstadoDeHojaDeRutaID          := NullID;
  FMotivoDeNoConformeID          := NullID;
  FProductoID                    := NullID;
  FProductoParteID               := NullID;
  FProductoPadreInmediatoParteID := NullID;
  FTipoDeFormularioID            := NullID;
  FObservacionProduccion         := Null;
  FFechaEstimadaProduccion       := Null;
  FFechaDeCarga                  := Null;
  FFechaPrometida                := Null;
  FStocks                        := nil;
  FProductoParteSemiID           := NullID;
  // del create compuesto
  FCCFabricadoParteID                        := NullID;
  FCCPasoDeFabricacionActualSectorID         := NullID;
  FCCServicioID                              := NullID;
  FCCMateriaPrimaID                          := NullID;
  FCCFabricadoID                             := NullID;
  FCCMaterialParteDescripcion                := Null;
  FCCFabricadoParteCodigo                    := Null;
  FCCEstadoCodigo                            := Null;
  FCCTerminacionParteDescripcion             := Null;
  FCCCunioParteDescripcion                   := Null;
  FCCCunioParteCodigo                        := Null;
  FCCMaterialParteCodigo                     := Null;
  FCCFabricadoParteDescripcion               := Null;
  FCCEstadoDescripcion                       := Null;
  FCCProductoCodigo                          := Null;
  FCCTipoDePedidoDeVentaCodigo               := Null;
  FCCTipoDePedidoDeVentaDescripcion          := Null;
  FCCTipoDePedidoDeVentaSeProduceParaStock   := Null;
  FCCTipoDeFlexibilidadCodigo                := Null;
  FCCTipoDeFlexibilidadDescripcion           := Null;
  FCCClienteCodigo                           := Null;
  FCCClienteDescripcion                      := Null;
  FCCObservacionVentas                       := Null;
  FCCServicioCodigo                          := Null;
  FCCServicioDescripcion                     := Null;
  FCCCunioFechaDeFinDeConstruccion           := Null;
  FCCColorDeHojaDeRutaDescripcion            := Null;
  FCCObservacionPasoDeFabricacionActual      := Null;
  FCCPasoDeFabricacionActualCodigo           := Null;
  FCCFechaDeFinDePasoPasoDeFabricacionActual := Null;
  FCCFechaDeFinDePasoUltimoPasoDeFabricacion := Null;
  FCCFechaDeIngresoPasoDeFabricacionActual   := Null;
  FCCFechaDeFinDePasoPasoDeFabricacionEmpaque:= Null;
  FCCFechaDeEgresoPasoDeFabricacionEmpaque   := Null;
  FCCMateriaPrimaDescripcion                 := Null;
  FCCMateriaPrimaCodigo                      := Null;
  FCCFabricadoCodigo                         := Null;
  FCCFabricadoParteSemiCodigo                := Null;
  FCCFabricadoParteSemiDescripcion           := Null;
end;

procedure THojaDeRuta.Delete;
begin
  PasosDeFabricacion.DeleteAll;
  StateLogs.DeleteAll;
  inherited;
end;

destructor THojaDeRuta.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure THojaDeRuta.EgresarHojaDeRuta(_PF : TPasoDeFabricacion ; _CantEgresada: Integer);
begin
  if PasosDeFabricacion.FindPasoDeFabricacion(_PF) then
    try
      THojaDeRuta.OperacionesHandler(Self, _PF);
      THojaDeRuta.MotivoDeAtrasoHandler(Self, _PF);


      PasosDeFabricacion.Actual.FechaDeEgreso    := Aplicacion.DateTimeService.FechaHoraActual;
      if ( _CantEgresada > 0 ) then
        PasosDeFabricacion.Actual.CantidadEgresada := _CantEgresada
      else
        PasosDeFabricacion.Actual.CantidadEgresada := CantidadAFabricar;

      PasosDeFabricacion.Actual.Save;

      // LE DOY INGRESO AUTOMATICO AL SIGUIENTE SECTOR
      if not (PasosDeFabricacion.Actual.EsUltimoPaso) then
        begin
          PasosDeFabricacion.Next;
          IngresarHojaDeRuta(PasosDeFabricacion.Actual.PasoDeFabricacion,_CantEgresada,True);
        end;
    except
      on e : exception do
        Aplicacion.RaiseExceptionCreate('Error al egresar la hoja de ruta ' + e.Message);
    end;
end;

function THojaDeRuta.ElPasoEstaEnLaHojaDeRuta(_PasoActual: TPasoDeFabricacion): Boolean;
begin
  Result:= PasosDeFabricacion.FindPasoDeFabricacion( _PasoActual );
end;

function THojaDeRuta.Save: Boolean;
begin
  if not IsAssigned then
    FNumero := NuevoNumeroDeHojaDeRuta;

  if (FProductoParteSemiID = NullID) then
    FProductoParteSemiID := CalcularProductoParteSemiID;

  Result := Inherited Save;
end;

procedure THojaDeRuta.SetCantidadExtra(const Value: TReal);
begin
  FCantidadExtra := Aplicacion.MathService.RedondearExtraProduccion(Value);
end;

procedure THojaDeRuta.SetColorDeHojaDeRutaID(const Value: TObjectID);
begin
  if (Value <> FColorDeHojaDeRutaID) and assigned(FColorDeHojaDeRuta) then
    FreeAndNil(FColorDeHojaDeRuta);
  FColorDeHojaDeRutaID := Value;
end;

procedure THojaDeRuta.SetEstadoAnteriorID(const Value: TObjectID);
begin
  if (Value <> FEstadoAnteriorID) and Assigned(FEstadoAnterior) then
    FreeAndNil(FEstadoAnterior);
  FEstadoAnteriorID := Value;
end;

procedure THojaDeRuta.SetEstadoDeHojaDeRutaID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeHojaDeRutaID) and assigned(FEstadoDeHojaDeRuta) then
    FreeAndNil(FEstadoDeHojaDeRuta);
  FEstadoDeHojaDeRutaID := Value;
end;

procedure THojaDeRuta.SetMaterialProductoParteID(const Value: TObjectID);
begin
  if (Value <> FMaterialProductoParteID) and assigned(FMaterialProductoParte) then
    FreeAndNil(FMaterialProductoParte);
  FMaterialProductoParteID := Value;
end;

procedure THojaDeRuta.setMotivoDeNoConformeID(const Value: TObjectID);
begin
  if (Value <> FMotivoDeNoConformeID) and assigned(FMotivoDeNoConforme) then
    FreeAndNil(FMotivoDeNoConforme);
  FMotivoDeNoConformeID := Value;
end;

procedure THojaDeRuta.SetPedidoDeVentaItemID(Value: TObjectID);
begin
  if (Value <> FPedidoDeVentaItemID) and assigned(FPedidoDeVentaItem) then
    FreeAndNil(FPedidoDeVentaItem);
  FPedidoDeVentaItemID := Value;
end;

function THojaDeRuta.GetCantidadAFabricar: TReal;
begin
  Result := CantidadPedida + CantidadExtra;
end;

function THojaDeRuta.GetCCClienteCodigo: TString;
begin
  if (FCCClienteCodigo = Unassigned) or (FCCClienteCodigo = Null) then
    FCCClienteCodigo := PedidoDeVentaItem.PedidoDeVenta.Cliente.Codigo;
  Result := FCCClienteCodigo;
end;

function THojaDeRuta.GetCCClienteDescripcion: TString;
begin
  if (FCCClienteDescripcion = Unassigned) or (FCCClienteDescripcion = Null) then
    FCCClienteDescripcion := PedidoDeVentaItem.PedidoDeVenta.Cliente.Descripcion;
  Result := FCCClienteDescripcion;
end;

function THojaDeRuta.GetCCClienteRankingCrediticio: TString;
begin
  if (FCCClienteRankingCrediticio = Unassigned) or (FCCClienteRankingCrediticio = Null) then
    FCCClienteRankingCrediticio := PedidoDeVentaItem.PedidoDeVenta.Cliente.RankingCrediticio.Descripcion;
  Result := FCCClienteRankingCrediticio;
end;

function THojaDeRuta.GetCCColorDeHojaDeRutaDescripcion: TString;
begin
  if (FCCColorDeHojaDeRutaDescripcion = Unassigned) or (FCCColorDeHojaDeRutaDescripcion = Null) then
    FCCColorDeHojaDeRutaDescripcion := ColorDeHojaDeRuta.Descripcion;
  Result := FCCColorDeHojaDeRutaDescripcion;
end;

function THojaDeRuta.GetCCCunioFechaDeFinDeConstruccion: TFecha;
begin
  if Producto.EsFabricado and  (FCCCunioFechaDeFinDeConstruccion = Unassigned) or (FCCCunioFechaDeFinDeConstruccion = Null) then
    FCCCunioFechaDeFinDeConstruccion := ProductoParte.Fabricado.Cunio.FechaDeFinDeConstruccion;
  Result := FCCCunioFechaDeFinDeConstruccion;
end;

function THojaDeRuta.GetCCCunioParteCodigo: TString;
begin
  if producto.EsFabricado and  (FCCCunioParteCodigo = Unassigned) or (FCCCunioParteCodigo = Null) then
    FCCCunioParteCodigo := ProductoParte.Fabricado.Cunio.codigo;
  Result := FCCCunioParteCodigo;
end;

function THojaDeRuta.GetCCCunioParteDescripcion: TString;
begin
  if producto.EsFabricado and (FCCCunioParteDescripcion = Unassigned) or (FCCCunioParteDescripcion = Null) then
    FCCCunioParteDescripcion := ProductoParte.Fabricado.Cunio.Descripcion;
  Result := FCCCunioParteDescripcion;
end;

function THojaDeRuta.GetCCEsEstadoCancelado: TBoolean;
begin
  if (FCCEsEstadoCancelado = Unassigned) or (FCCEsEstadoCancelado = Null) then
    FCCEsEstadoCancelado := EstadoDeHojaDeRuta.EsEstadoCancelado;
  Result := FCCEsEstadoCancelado;
end;

function THojaDeRuta.GetCCEsEstadoCumplido: TBoolean;
begin
  if (FCCEsEstadoCumplido = Unassigned) or (FCCEsEstadoCumplido = Null) then
    FCCEsEstadoCumplido := EstadoDeHojaDeRuta.EsEstadoCumplido;
  Result := FCCEsEstadoCumplido;
end;

function THojaDeRuta.GetCCEstadoCodigo: TString;
begin
  if (FCCEstadoCodigo = Unassigned) or (FCCEstadoCodigo = Null) then
    FCCEstadoCodigo := EstadoDeHojaDeRuta.codigo;
  Result := FCCEstadoCodigo;
end;

function THojaDeRuta.GetCCEstadoColor: TEntero;
begin
  if (FCCEstadoColor = Unassigned) or (FCCEstadoColor = Null) then    
    FCCEstadoColor := EstadoDeHojaDeRuta.Color;  
  Result := FCCEstadoColor;
end;

function THojaDeRuta.GetCCEstadoDescripcion: TString;
begin
  if (FCCEstadoDescripcion = Unassigned) or (FCCEstadoDescripcion = Null) then
    FCCEstadoDescripcion := EstadoDeHojaDeRuta.Descripcion;
  Result := FCCEstadoDescripcion;
end;

function THojaDeRuta.GetCCFabricadoCodigo: TString;
begin
  if (FCCFabricadoCodigo = Unassigned) or (FCCFabricadoCodigo = Null) then
    FCCFabricadoCodigo := Producto.Fabricado.Codigo;
  Result := FCCFabricadoCodigo;
end;    

function THojaDeRuta.GetCCFabricadoID: TObjectID;
begin
  if (FCCFabricadoID = Unassigned) or (FCCFabricadoID = NullID) then
    FCCFabricadoID := Producto.FabricadoID;
  Result := FCCFabricadoID;
end;

function THojaDeRuta.GetCCFabricadoParteCodigo: TString;
begin
  if (FCCFabricadoParteCodigo = Unassigned) or (FCCFabricadoParteCodigo = Null) then
    begin
      if (FCCFabricadoParteID <> NullID) then
        FCCFabricadoParteCodigo := ProductoParte.Fabricado.Codigo
      else if (FCCServicioID <> NullID) then
        FCCFabricadoParteCodigo := CCServicioCodigo
      else if (FCCMateriaPrimaID <> NullID) then
        FCCFabricadoParteCodigo := CCMateriaPrimaCodigo;
    end;
  Result := FCCFabricadoParteCodigo;
end;

function THojaDeRuta.GetCCFabricadoParteDescripcion: TString;
begin
  if (FCCFabricadoParteDescripcion = Unassigned) or (FCCFabricadoParteDescripcion = Null) then
    begin
      if (FCCFabricadoParteID <> NullID) then
        FCCFabricadoParteDescripcion := ProductoParte.Descripcion
      else if (FCCServicioID <> NullID) then
        FCCFabricadoParteDescripcion := CCServicioDescripcion
      else if (FCCMateriaPrimaID <> NullID) then
        FCCFabricadoParteDescripcion := CCMateriaPrimaDescripcion;
    end;
  Result := FCCFabricadoParteDescripcion;
end;

function THojaDeRuta.GetCCFechaDeEgresoPasoDeFabricacionEmpaque: TFecha;
begin
  if (FCCFechaDeEgresoPasoDeFabricacionEmpaque = Unassigned) or (FCCFechaDeEgresoPasoDeFabricacionEmpaque = Null) then
    FCCFechaDeEgresoPasoDeFabricacionEmpaque := CCFechaDeFinDePasoPasoDeFabricacionEmpaque; // si no tiene fecha de egreso de Empaque
  Result := FCCFechaDeEgresoPasoDeFabricacionEmpaque;
end;

function THojaDeRuta.GetCCFechaDeFinDePasoPasoDeFabricacionActual: TFecha;
begin
  if (FCCFechaDeFinDePasoPasoDeFabricacionActual = Unassigned) or (FCCFechaDeFinDePasoPasoDeFabricacionActual = NUll) then
    FCCFechaDeFinDePasoPasoDeFabricacionActual := PasoDeFabricacionActual.FechaDeFinDePaso;
  Result := FCCFechaDeFinDePasoPasoDeFabricacionActual;
end;

function THojaDeRuta.GetCCFechaDeFinDePasoPasoDeFabricacionEmpaque: TFecha;
begin
  if (FCCFechaDeFinDePasoPasoDeFabricacionEmpaque = Unassigned) or (FCCFechaDeFinDePasoPasoDeFabricacionEmpaque = Null) then
    FCCFechaDeFinDePasoPasoDeFabricacionEmpaque := FechaPrometida; // si no tiene fecha de fin de paso de Empaque
  Result := FCCFechaDeFinDePasoPasoDeFabricacionEmpaque;
end;

function THojaDeRuta.GetCCFechaDeFinDePasoUltimoPasoDeFabricacion: TFecha;
begin
  if (FCCFechaDeFinDePasoUltimoPasoDeFabricacion = Unassigned) or (FCCFechaDeFinDePasoUltimoPasoDeFabricacion = NUll) then
    if Assigned(FHojaDeRutaUltimoPasoDeFabricacion) then
      FCCFechaDeFinDePasoUltimoPasoDeFabricacion := UltimoPasoDeFabricacion.FechaDeFinDePaso;
  Result := FCCFechaDeFinDePasoUltimoPasoDeFabricacion;
end;

function THojaDeRuta.GetCCFechaDeIngresoPasoDeFabricacionActual: TFecha;
begin
  if (FCCFechaDeIngresoPasoDeFabricacionActual = Unassigned) or (FCCFechaDeIngresoPasoDeFabricacionActual = Null) then
    FCCFechaDeIngresoPasoDeFabricacionActual := PasoDeFabricacionActual.FechaDeIngreso;
  Result := FCCFechaDeIngresoPasoDeFabricacionActual;
end;

function THojaDeRuta.GetCCImporteNetoDelPedido: TReal;
begin
  if (FCCImporteNetoDelPedido = Unassigned) or (FCCImporteNetoDelPedido = Null) then
    FCCImporteNetoDelPedido := PedidoDeVentaItem.PedidoDeVenta.ImporteNetoDelPedido;
  Result := FCCImporteNetoDelPedido;
end;

function THojaDeRuta.GetCCMaterialParteCodigo: TString;
begin
  if (FCCMaterialParteCodigo = Unassigned) or (FCCMaterialParteCodigo = Null) then
    FCCMaterialParteCodigo := ProductoParte.Fabricado.Articulo.Material.codigo;
  Result := FCCMaterialParteCodigo;
end;

function THojaDeRuta.GetCCMaterialParteDescripcion: TString;
begin
  if (FCCMaterialParteDescripcion = Unassigned) or (FCCMaterialParteDescripcion = Null) then
    FCCMaterialParteDescripcion := ProductoParte.Fabricado.Articulo.material.Descripcion;
  Result := FCCMaterialParteDescripcion;
end;

function THojaDeRuta.GetCCMateriaPrimaCodigo: TString;
begin
  if (FCCMateriaPrimaCodigo = Unassigned) or (FCCMateriaPrimaCodigo = Null) then
    FCCMateriaPrimaCodigo := Producto.Codigo;
  Result := FCCMateriaPrimaCodigo;
end;

function THojaDeRuta.GetCCMateriaPrimaDescripcion: TString;
begin
  if (FCCMateriaPrimaDescripcion = Unassigned) or (FCCMateriaPrimaDescripcion = Null) then
    FCCMateriaPrimaDescripcion := Producto.Codigo;
  Result := FCCMateriaPrimaDescripcion;
end;

function THojaDeRuta.GetCCMateriaPrimaID: TObjectID;
begin
if (FCCMateriaPrimaID = Unassigned) or (FCCMateriaPrimaID = NullID) then
    FCCMateriaPrimaID := Producto.MateriaPrimaID;
  Result := FCCMateriaPrimaID;
end;

function THojaDeRuta.GetCCPasoDeFabricacionActualCodigo: TString;
begin
  if (FCCPasoDeFabricacionActualCodigo = Unassigned) or (FCCPasoDeFabricacionActualCodigo = Null) then
    if Assigned(PasoDeFabricacionActual) then
      FCCPasoDeFabricacionActualCodigo := PasoDeFabricacionActual.PasoDeFabricacion.Codigo;
  Result := FCCPasoDeFabricacionActualCodigo;
end;

function THojaDeRuta.GetCCPasoDeFabricacionActualSectorID: TObjectID;
begin
  if (FCCPasoDeFabricacionActualSectorID = Unassigned) or (FCCPasoDeFabricacionActualSectorID = Null) then
    if Assigned(PasoDeFabricacionActual) then
      FCCPasoDeFabricacionActualSectorID := PasoDeFabricacionActual.PasoDeFabricacion.SectorID;
  Result := FCCPasoDeFabricacionActualSectorID;
end;

function THojaDeRuta.GetCCRecursoActualCodigo: TString;
begin
  if (FCCRecursoActualCodigo = Unassigned) or (FCCRecursoActualCodigo = Null) then
    if Assigned(PasoDeFabricacionActual) and ( PasoDeFabricacionActual.RecursoID <> NullID ) then
      FCCRecursoActualCodigo := PasoDeFabricacionActual.Recurso.Codigo;
  Result := FCCRecursoActualCodigo;
end;

function THojaDeRuta.GetCCServicioCodigo: TString;
begin
  if (FCCServicioCodigo = Unassigned) or (FCCServicioCodigo = Null) then
    FCCServicioCodigo := Producto.Codigo;
  Result := FCCServicioCodigo;
end;

function THojaDeRuta.GetCCServicioDescripcion: TString;
begin
  if (FCCServicioDescripcion = Unassigned) or (FCCServicioDescripcion = Null) then
    FCCServicioDescripcion := Producto.Descripcion;
  Result := FCCServicioDescripcion;
end;

function THojaDeRuta.GetCCServicioID: TObjectID;
begin
if (FCCServicioID = Unassigned) or (FCCServicioID = NullID) then
    FCCServicioID := Producto.ServicioID;
  Result := FCCServicioID;
end;

function THojaDeRuta.GetCCTerminacionParteDescripcion: TString;
begin
  if (FCCTerminacionParteDescripcion = Unassigned) or (FCCTerminacionParteDescripcion = Null) then
    FCCTerminacionParteDescripcion := ProductoParte.Fabricado.Terminacion.Descripcion;
  Result := FCCTerminacionParteDescripcion;
end;

function THojaDeRuta.GetCCTipoDeFlexibilidadCodigo: TString;
begin
  if (FCCTipoDeFlexibilidadCodigo = Unassigned) or (FCCTipoDeFlexibilidadCodigo = Null) then
    FCCTipoDeFlexibilidadCodigo := PedidoDeVentaItem.TipoDeFlexibilidad.codigo;
  Result := FCCTipoDeFlexibilidadCodigo;
end;

function THojaDeRuta.GetCCTipoDeFlexibilidadDescripcion: TString;
begin
  if (FCCTipoDeFlexibilidadDescripcion = Unassigned) or (FCCTipoDeFlexibilidadDescripcion = Null) then
    FCCTipoDeFlexibilidadDescripcion := PedidoDeVentaItem.TipoDeFlexibilidad.Descripcion;
  Result := FCCTipoDeFlexibilidadDescripcion;
end;

function THojaDeRuta.GetCCTipoDePedidoDeVentaCodigo: TString;
begin
  if (FCCTipoDePedidoDeVentaCodigo = Unassigned) or (FCCTipoDePedidoDeVentaCodigo = Null) then
    begin
      FCCTipoDePedidoDeVentaCodigo      := PedidoDeVentaItem.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion := PedidoDeVentaItem.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVentaItem.TipoDePedidoDeVenta.SeProduceParaStock;
    end;
  Result := FCCTipoDePedidoDeVentaCodigo;
end;

function THojaDeRuta.GetCCTipoDePedidoDeVentaDescripcion: TString;
begin
  if (FCCTipoDePedidoDeVentaDescripcion = Unassigned) or (FCCTipoDePedidoDeVentaDescripcion = Null) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVentaItem.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVentaItem.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVentaItem.TipoDePedidoDeVenta.SeProduceParaStock;
    end;
  Result := FCCTipoDePedidoDeVentaDescripcion;
end;

function THojaDeRuta.GetCCTipoDePedidoDeVentaSeProduceParaStock: TString;
begin
  if (FCCTipoDePedidoDeVentaSeProduceParaStock = Unassigned) or (FCCTipoDePedidoDeVentaSeProduceParaStock = Null) then
    begin
      FCCTipoDePedidoDeVentaCodigo             := PedidoDeVentaItem.TipoDePedidoDeVenta.codigo;
      FCCTipoDePedidoDeVentaDescripcion        := PedidoDeVentaItem.TipoDePedidoDeVenta.Descripcion;
      FCCTipoDePedidoDeVentaSeProduceParaStock := PedidoDeVentaItem.TipoDePedidoDeVenta.SeProduceParaStock;
    end;
  Result := FCCTipoDePedidoDeVentaSeProduceParaStock;
end;

function THojaDeRuta.GetCCFabricadoParteID: TObjectID;
begin
  if (FCCFabricadoParteID = Unassigned) or (FCCFabricadoParteID = NullID) then
    FCCFabricadoParteID := ProductoParte.FabricadoID;
  Result := FCCFabricadoParteID;
end;

function THojaDeRuta.GetCCFabricadoParteSemiCodigo: TString;
begin
  if (FCCFabricadoParteSemiCodigo = Unassigned) or (FCCFabricadoParteSemiCodigo = Null) then
    FCCFabricadoParteSemiCodigo := ProductoParteSemi.Fabricado.Codigo;
  Result := FCCFabricadoParteSemiCodigo;
end;

function THojaDeRuta.GetCCFabricadoParteSemiDescripcion: TString;
begin
  if (FCCFabricadoParteSemiDescripcion = Unassigned) or (FCCFabricadoParteSemiDescripcion = Null) then
    FCCFabricadoParteSemiDescripcion := ProductoParteSemi.Fabricado.Descripcion;
  Result := FCCFabricadoParteSemiDescripcion;
end;

function THojaDeRuta.GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
begin
  if not assigned(FColorDeHojaDeRuta) then
    GetObject(TColorDeHojaDeRuta, FColorDeHojaDeRuta, ColorDeHojaDeRutaID);
  Result := TColorDeHojaDeRuta(FColorDeHojaDeRuta);
end;

function THojaDeRuta.GetDiaFechaDeFinDeFabricacion: String;
begin
  if (CCFechaDeFinDePasoUltimoPasoDeFabricacion <> Null) and (CCFechaDeFinDePasoUltimoPasoDeFabricacion <> 0) then
    Result := Aplicacion.DateTimeService.Dia( CCFechaDeFinDePasoUltimoPasoDeFabricacion );
end;

function THojaDeRuta.GetEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
begin
  if not assigned(FEstadoDeHojaDeRuta) then
    GetObject(TEstadoDeHojaDeRuta, FEstadoDeHojaDeRuta, EstadoDeHojaDeRutaID);
  Result := TEstadoDeHojaDeRuta(FEstadoDeHojaDeRuta);
end;

function THojaDeRuta.GetEsEstadoEnFabricacion: TBoolean;
begin
  if (FCCEsEstadoEnFabricacion = Unassigned) or (FCCEsEstadoEnFabricacion = Null) then
    FCCEsEstadoEnFabricacion := EstadoDeHojaDeRuta.EsEstadoEnFabricacion;
  Result := FCCEsEstadoEnFabricacion;
end;

function THojaDeRuta.GetEstadoAnterior: TEstadoDeHojaDeRuta;
begin
  if not Assigned(FEstadoAnterior) then
    GetObject(TEstadoDeHojaDeRuta, FEstadoAnterior, EstadoAnteriorID);
  Result := TEstadoDeHojaDeRuta(FEstadoAnterior);
end;

function THojaDeRuta.GetFabricadoParteCodigo: TString;
begin
  if (CCFabricadoParteID <> NullID) then
    Result := FCCFabricadoParteCodigo
  else if (CCServicioID <> NullID) then
    Result := FCCServicioCodigo
  else if (CCMateriaPrimaID <> NullID) then
    Result := FCCMateriaPrimaCodigo
end;

function THojaDeRuta.GetFabricadoParteDescripcion: TString;
begin
  if (CCFabricadoParteID <> NullID) then
    Result := FCCFabricadoParteDescripcion
  else if (CCServicioID <> NullID) then
    Result := FCCServicioDescripcion
  else if (CCMateriaPrimaID <> NullID) then
    Result := FCCMateriaPrimaDescripcion
end;

function THojaDeRuta.GetFechaEstimadaProduccion: TFechaHora;
begin
//  if ( (FFechaEstimadaProduccion = Null) or (FFechaEstimadaProduccion = 0) ) and EstadoDeHojaDeRuta.EsEstadoEnFabricacion then
//  if EstadoDeHojaDeRuta.EsEstadoEnFabricacion then
//    if PasoDeFabricacionActual.FechaDeFinDePaso < Aplicacion.DateTimeService.FechaActual then // significa que esta atrasada.
//      FFechaEstimadaProduccion := UltimoPasoDeFabricacion.FechaDeFinDePaso + ( Aplicacion.DateTimeService.FechaActual - PasoDeFabricacionActual.FechaDeFinDePaso)
//    else
//      FFechaEstimadaProduccion := UltimoPasoDeFabricacion.FechaDeFinDePaso;
  Result := FFechaEstimadaProduccion;
end;

function THojaDeRuta.GetFechaImpresion: TFecha;
begin
  if (FFechaImpresion = NULL) or (FFechaImpresion = 0) then
    begin
      StateLogs.First;
      while not StateLogs.IsLast do
        begin
          if (StateLogs.Actual.EstadoDeHojaDeRuta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoHR_ParaImprimir) or
             (StateLogs.Actual.EstadoDeHojaDeRuta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoHR_ParcialParaImprimir) or
             (StateLogs.Actual.EstadoDeHojaDeRuta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoHR_EnCalidadParaImp) or
             (StateLogs.Actual.EstadoDeHojaDeRuta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoHR_ReparacionParaImp) or
             (StateLogs.Actual.EstadoDeHojaDeRuta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoHR_ReprocesoParaImp)then
            begin
              FFechaImpresion := TFecha(StateLogs.Actual.FechaHora);
              break;
            end;
          StateLogs.Next
        end;
    end;
  Result := FFechaImpresion;
end;

function THojaDeRuta.GetHistorialDeNoConformes: THojaDeRutaNoConformeList;
begin
  If not assigned(FHistorialDeNoConformes) Then
    GetList(TPDList(FHistorialDeNoConformes), TPDList(THojaDeRutaNoConformeList.CreateByProductoParte(ProductoParte)));
  Result := FHistorialDeNoConformes;
end;

function THojaDeRuta.GetHojaDeRutaPasoDeFabricacionActual: THojaDeRutaPasoDeFabricacion;
var
  SP               : TStoreProcedure;
  CadenaDelimitada : String;
  I, Elemento      : Integer;
begin
  if not Assigned(FHojaDeRutaPasoDeFabricacionActual) and (PasosDeFabricacion.Count > 0) then
    begin
      try
        SP := TStoreProcedure.Create( Aplicacion.Database );
        SP.StoredProcName := Aplicacion.ParametrosDelSistema.StoredProc_HojasDeRuta_PasoDeFabricacionActual;
        SP.Prepare;
        SP.Params[1].AsString := IntToStr(ID);
        CadenaDelimitada := 'Select ' + THojaDeRutaPasoDeFabricacionDM.CreateCompuesto(1) + ' from ' + THojaDeRutaPasoDeFabricacionDM.TableName + ' ' + THojaDeRutaPasoDeFabricacionDM.CreateCompuesto(2);
        CadenaDelimitada := WrapText(CadenaDelimitada, '|', [' '], 800 );
        Elemento := 2;
        for I := 1 to Aplicacion.TextService.ContarSeparadosXComas(CadenaDelimitada,'|') do
          begin
            SP.Params[Elemento].AsString := Aplicacion.TextService.ObtenerSeparadosXComas(CadenaDelimitada,'|',I );
            Inc(Elemento);
          end;
        SP.ExecProc;
        if (SP.RecordCount <> 0) then // si es 0 significa que todos los pasos fueron cumplidos, es decir tengo que ir al ultimo paso
          GetObject(THojaDeRutaPasoDeFabricacion,FHojaDeRutaPasoDeFabricacionActual,SP.FieldByName(THojaDeRutaPasoDeFabricacionDM.ID_FieldName).Value)
        else
          GetObject(THojaDeRutaPasoDeFabricacion,FHojaDeRutaPasoDeFabricacionActual,UltimoPasoDeFabricacion.ID)
      finally
        SP.Active  := False;
        FreeAndNil( SP);
      end;
    end;
  Result := THojaDeRutaPasoDeFabricacion(FHojaDeRutaPasoDeFabricacionActual);
end;

function THojaDeRuta.GetHojaDeRutaUltimoPasoDeFabricacion: THojaDeRutaPasoDeFabricacion;
var
  SP : TStoreProcedure;
  CadenaDelimitada : String;
  I, Elemento : Integer;
begin
  if not Assigned(FHojaDeRutaUltimoPasoDeFabricacion) and (PasosDeFabricacion.Count > 0) then
    begin
      try
        SP := TStoreProcedure.Create( Aplicacion.Database );
        SP.StoredProcName := Aplicacion.ParametrosDelSistema.StoredProc_HojasDeRuta_PasoDeFabricacionUltimo;
        SP.Prepare;
        SP.Params[1].AsString := IntToStr(ID);
        CadenaDelimitada := WrapText( 'Select ' +  THojaDeRutaPasoDeFabricacionDM.CreateCompuesto(1) + ' from ' + THojaDeRutaPasoDeFabricacionDM.Tablename + ' ' + THojaDeRutaPasoDeFabricacionDM.CreateCompuesto(2) , '|', [' '], 800 );
        Elemento := 2;
        for I := 1 to Aplicacion.TextService.ContarSeparadosXComas(CadenaDelimitada,'|') do
          begin
            SP.Params[Elemento].AsString := Aplicacion.TextService.ObtenerSeparadosXComas(CadenaDelimitada,'|',I );
            Inc(Elemento);
          end;
        SP.ExecProc;
        if (SP.RecordCount <> 0) then
          GetObject(THojaDeRutaPasoDeFabricacion,FHojaDeRutaUltimoPasoDeFabricacion,SP.FieldByName(THojaDeRutaPasoDeFabricacionDM.ID_FieldName).Value);
      finally
        SP.Active  := False;
        FreeAndNil( SP);
      end;
    end;
  Result := THojaDeRutaPasoDeFabricacion(FHojaDeRutaUltimoPasoDeFabricacion);
end;

function THojaDeRuta.GetMaterialProductoParte: TMaterial;
begin
  if not assigned(FMaterialProductoParte) then
    GetObject(TMaterial, FMaterialProductoParte, MaterialProductoParteID);
  Result := TMaterial(FMaterialProductoParte);
end;

function THojaDeRuta.getMesFechaDeFinDeFabricacion: String;
begin
  if (CCFechaDeFinDePasoUltimoPasoDeFabricacion <> Null) and (CCFechaDeFinDePasoUltimoPasoDeFabricacion <> 0) then
    Result := Aplicacion.DateTimeService.Mes( CCFechaDeFinDePasoUltimoPasoDeFabricacion );
end;

function THojaDeRuta.getMotivoDeNoConforme: TMotivoDeNoConforme;
begin
  if not assigned(FMotivoDeNoConforme) then
    GetObject(TMotivoDeNoConforme, FMotivoDeNoConforme, MotivoDeNoConformeID);
  Result := TMotivoDeNoConforme(FMotivoDeNoConforme);
end;

function THojaDeRuta.GetNoConformes: THojaDeRutaNoConformeList;
begin
  If not assigned(FNoConformes) Then
    GetList(TPDList(FNoConformes), TPDList(THojaDeRutaNoConformeList.CreateByHojaDeRuta(Self)));
  Result := FNoConformes;
end;

function THojaDeRuta.GetPasosDeFabricacion: THojaDeRutaPasoDeFabricacionList;
begin
  If not assigned(FPasosDeFabricacion) Then
    GetList(TPDList(FPasosDeFabricacion), TPDList(THojaDeRutaPasoDeFabricacionList.CreateByHojaDeRuta(Self)));
  Result := FPasosDeFabricacion;
end;

function THojaDeRuta.GetPedidoDeVentaItem: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) then
    GetObject(TPedidoDeVentaItem, FPedidoDeVentaItem, PedidoDeVentaItemID);
  Result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

procedure THojaDeRuta.SetProductoID(Value: TObjectID);
begin
  if (Value <> FProductoID) and assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

procedure THojaDeRuta.SetProductoPadreInmediatoParteID(const Value: TObjectID);
begin
  if (Value <> FProductoPadreInmediatoParteID) and assigned(FProductoPadreInmediatoParte) then
    FreeAndNil(FProductoPadreInmediatoParte);
  FProductoPadreInmediatoParteID := Value;
end;

procedure THojaDeRuta.SetProductoParteID(const Value: TObjectID);
begin
  if (Value <> FProductoParteID) and assigned(FProductoParte) then
    FreeAndNil(FProductoParte);
  FProductoParteID := Value;
end;

procedure THojaDeRuta.SetProductoParteSemiID(const Value: TObjectID);
begin
  if (Value <> FProductoParteSemiID) and assigned(FProductoParteSemi) then
    FreeAndNil(FProductoParteSemi);
  FProductoParteSemiID := Value;
end;

procedure THojaDeRuta.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value <> FTipoDeFormularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;


Function THojaDeRuta.ValidarSecuenciaDeFechas : Boolean;
var
  FechaAnterior : TFecha;
  FechaActual   : TFecha;
begin
  Result := True;
  if (PasosDeFabricacion.Count = 0) then
    exit;
  PasosDeFabricacion.First;
  FechaAnterior := PasosDeFabricacion.Actual.FechaDeFinDePaso;
  PasosDeFabricacion.Next;
  while not PasosDeFabricacion.IsLast and (FechaAnterior <> Null) do
    begin
      if (PasosDeFabricacion.Actual.FechaDeFinDePaso = Null)  then
        begin
          Result := False;
          Aplicacion.raiseExceptionCreate('Paso ' + PasosDeFabricacion.Actual.PasoDeFabricacion.codigo + ': ' + 'La fecha es requerida');
        end;
      FechaActual := PasosDeFabricacion.Actual.FechaDeFinDePaso;
      if not (FechaActual >= FechaAnterior) then
        begin
          Result := False;
          Aplicacion.raiseExceptionCreate('Paso ' + PasosDeFabricacion.Actual.PasoDeFabricacion.codigo + ': ' + DateToStr(FechaActual) + #10#13 + 'Error en la secuencia de Fechas, debe corregirlo para poder guardar los cambios.');
        end;
      FechaAnterior := PasosDeFabricacion.Actual.FechaDeFinDePaso;
      PasosDeFabricacion.Next;
    end;
end;

procedure THojaDeRuta.VerHojaDeRuta(_Imprimir : Boolean);
var
  frxHojaDeRuta            : TfrxReport;
  frxDBDtstHojaDeRuta      : TfrxDBDataset;
  frxDBDtstHojaDeRutaItems : TfrxDBDataset;
  frxDBDtstArbolProducto   : TfrxDBDataset;
  ClntDtStHojaDeRuta       : TClientDataSet;
  ClntDtStHojaDeRutaItems  : TClientDataSet;
  ClntDtStArbolProducto    : TClientDataSet;
  P                        : TPicture;
  Desc : String;
  MatePri,TipoDeRecursoDesc,CajonDesc : TReal;

  procedure CrearComponentes;
  begin
    ClntDtStHojaDeRuta := TClientDataSet.Create(nil);
    ClntDtStHojaDeRuta.LoadFromFile(TipoDeFormulario.ArchivoXMLCamposEncabezado);
    ClntDtStHojaDeRuta.Open;

    frxDBDtstHojaDeRuta         := TfrxDBDataset.Create(nil);
    frxDBDtstHojaDeRuta.Name    := 'frxDBDtstHojaDeRuta';
    frxDBDtstHojaDeRuta.DataSet := ClntDtStHojaDeRuta;
    frxDBDtstHojaDeRuta.Open;

    ClntDtStHojaDeRutaItems := TClientDataSet.Create(nil);
    ClntDtStHojaDeRutaItems.LoadFromFile(TipoDeFormulario.ArchivoXMLCamposItems);
    ClntDtStHojaDeRutaItems.Open;

    frxDBDtstHojaDeRutaItems         := TfrxDBDataset.Create(nil);
    frxDBDtstHojaDeRutaItems.Name    := 'frxDBDtstHojaDeRutaItems';
    frxDBDtstHojaDeRutaItems.DataSet := ClntDtStHojaDeRutaItems;
    frxDBDtstHojaDeRutaItems.Open;

    ClntDtStArbolProducto := TClientDataSet.Create(nil);
    ClntDtStArbolProducto.LoadFromFile(ExtractFilePath(TipoDeFormulario.ArchivoReporte)+'Campos\ClntdtstArbolHojaDeRuta.xml');
    ClntDtStArbolProducto.Open;

    frxDBDtstArbolProducto         := TfrxDBDataset.Create(nil);
    frxDBDtstArbolProducto.Name    := 'frxDBDtstArbolProducto';
    frxDBDtstArbolProducto.DataSet := ClntDtStArbolProducto;
    frxDBDtstArbolProducto.Open;

    frxHojaDeRuta := TfrxReport.Create(nil);
    if not (Aplicacion.Usuario.TipoDeUsuario.codigo = 'ADMINIST') then
      if not (Aplicacion.Usuario.TipoDeUsuario.codigo = 'PRODUCCION') then
        frxHojaDeRuta.PreviewOptions.Buttons :=[pbZoom,pbFind,pbOutline,pbNavigator];

    frxHojaDeRuta.LoadFromFile(TipoDeFormulario.ArchivoReporte, True);

  end;
  Procedure CargarDatos;
  begin
    ClntDtStHojaDeRuta.EmptyDataSet;
    ClntDtstHojaDeRuta.Append;
    ClntDtStHojaDeRuta.FieldByName('NumeroPedido').AsString              := NumeroImprimible;
    ClntDtStHojaDeRuta.FieldByName('TipoDePedido').Value                 := CCTipoDePedidoDeVentaCodigo;
    ClntDtStHojaDeRuta.FieldByName('TipoDeFlexCodigo').Value             := CCTipoDeFlexibilidadCodigo;
    ClntDtStHojaDeRuta.FieldByName('TipoDeFlexDescripcion').Value        := CCTipoDeFlexibilidadDescripcion;
    ClntDtStHojaDeRuta.FieldByName('Cliente').Value                      := CCClienteDescripcion;
    ClntDtStHojaDeRuta.FieldByName('FechaDePedido').Value                := FechaDeCarga;
    ClntDtStHojaDeRuta.FieldByName('FechaPrometida').Value               := CCFechaDeFinDePasoUltimoPasoDeFabricacion;
    ClntDtStHojaDeRuta.FieldByName('MesFechaPrometida').AsString         := MesFechaDeFinDeFabricacion;
    ClntDtStHojaDeRuta.FieldByName('DiaFechaPrometida').AsString         := DiaFechaDeFinDeFabricacion;
    ClntDtStHojaDeRuta.FieldByName('NumeroHR').AsString                  := Aplicacion.TextService.RellenarCodigo(IntToStr(Numero), 8)  ;
    ClntDtStHojaDeRuta.FieldByName('CodigoParte').AsString               := CCFabricadoParteCodigo;
    ClntDtStHojaDeRuta.FieldByName('DescripcionParte').AsString          := CCFabricadoParteDescripcion;
    ClntDtStHojaDeRuta.FieldByName('CodigoLogo').AsString                := CCCunioParteCodigo;
    ClntDtStHojaDeRuta.FieldByName('DescripcionLogo').AsString           := CCCunioParteDescripcion;
    ClntDtStHojaDeRuta.FieldByName('Terminacion').AsString               := CCTerminacionParteDescripcion;
    ClntDtStHojaDeRuta.FieldByName('Material').AsString                  := CCMaterialParteDescripcion;
    ClntDtStHojaDeRuta.FieldByName('Cantidad').Value                     := CantidadPedida;
    ClntDtStHojaDeRuta.FieldByName('CantidadExtra').Value                := CantidadExtra;
    ClntDtStHojaDeRuta.FieldByName('CantidadTotal').Value                := CantidadAFabricar;
    ClntDtStHojaDeRuta.FieldByName('ObservacionVentas').AsString         := CCObservacionVentas;
    ClntDtStHojaDeRuta.FieldByName('ObservacionProduccion').AsString     := ObservacionProduccion;
    ClntDtStHojaDeRuta.FieldByName('DescripcionDeLosProcesos').AsString  := Productoparte.fabricado.DescripcionDeLosProcesos;
    if _Imprimir then
      ClntDtStHojaDeRuta.FieldByName('ColorDeImpresion').Value             := clNone
    else
      ClntDtStHojaDeRuta.FieldByName('ColorDeImpresion').Value             := ColorDeHojaDeRuta.ColorDeImpresion;

    if not ProductoParte.Fabricado.articulo.familiaDeArticulo.EsMatriz then
      if ProductoParte.Fabricado.Cunio.ArticulosPosibles.FindComponente( ProductoParte.Fabricado.Articulo ) and ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.FindDefault then
        begin
          if (ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.TipoDeHerramentalID <> NullID) then
            Desc := ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.TipoDeHerramental.Descripcion + ' (' +  ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.TipoDeHerramental.TipoDeRecurso.Descripcion + ') '
          else if (ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.HerramentalID <> NullID) then
            begin
              Desc := ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.Herramental.Descripcion;
              TipoDeRecursoDesc := ProductoParte.Fabricado.Cunio.ArticulosPosibles.Actual.Herramentales.Actual.Herramental.TipoDeRecurso.Descripcion;
              if (TipoDeRecursoDesc <> Null) and (TipoDeRecursoDesc <> '') then
                Desc := Desc + ' (' + TipoDeRecursoDesc + ')';
            end;
          CajonDesc := ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.Cajon;
          if (CajonDesc <> Null) or (CajonDesc <> '') then
            Desc := Desc + ' Cajon: ' + CajonDesc;
          ClntDtStHojaDeRuta.FieldByName('Herramentales').AsString     := Desc;
          MatePri := ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.CantidadDeMateriaPrimaNecesaria(CantidadAFabricar);
          ClntDtStHojaDeRuta.FieldByName('MateriaPrima').AsString := ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.MateriaPrima.Codigo + ' ';
          ClntDtStHojaDeRuta.FieldByName('CantidadMateriaPrima').AsString := FloatToStrF(MatePri,ffNumber, 10, 3) + ' ' + ProductoParte.Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.Actual.CantidadUnitariaConScrapUnidadDeMedida.UnidadDeEquivalencia.Codigo;
        end
      else if ProductoParte.Fabricado.articulo.MetodosDeCorte.FindDefault then
        begin
          Desc := ProductoParte.Fabricado.articulo.MetodosDeCorte.Actual.Herramental.Descripcion;
          TipoDeRecursoDesc := ProductoParte.Fabricado.articulo.MetodosDeCorte.Actual.Herramental.TipoDeRecurso.Descripcion;
          if (TipoDeRecursoDesc <> Null) and (TipoDeRecursoDesc <> '') then
          Desc := Desc + ' (' + TipoDeRecursoDesc + ')';
          ClntDtStHojaDeRuta.FieldByName('Herramentales').AsString     := Desc;
          MatePri := ProductoParte.Fabricado.articulo.MetodosDeCorte.Actual.CantidadDeMateriaPrimaNecesaria(CantidadAFabricar);
          ClntDtStHojaDeRuta.FieldByName('MateriaPrima').AsString := ProductoParte.Fabricado.Articulo.MetodosDeCorte.Actual.MateriaPrima.codigo + ' ';
          ClntDtStHojaDeRuta.FieldByName('CantidadMateriaPrima').AsString := FloatToStrF(MatePri,ffNumber, 10, 3) + ' ' + ProductoParte.Fabricado.articulo.MetodosDeCorte.Actual.PesoUnitarioConScrapUnidadDeMedida.UnidadDeEquivalencia.Codigo;
        end;
    if (ProductoParte.Fabricado.desarrolloID <> NullID) then
      TGraphicField(ClntDtStHojaDeRuta.FieldByName('CunioImagen')).LoadFromFile(ProductoParte.Fabricado.desarrollo.archivoDeImagen)
    else
      TGraphicField(ClntDtStHojaDeRuta.FieldByName('CunioImagen')).LoadFromFile(ProductoParte.Fabricado.Cunio.archivoDeImagen2D);
    TGraphicField(ClntDtStHojaDeRuta.FieldByName('ParteImagen')).LoadFromFile(ProductoParte.Fabricado.articulo.archivoDeImagen);
    ClntDtstHojaDeRuta.Post;
    ClntDtStHojaDeRutaItems.EmptyDataSet;
    PasosDeFabricacion.First;
    while not PasosDeFabricacion.IsLast do
      begin
        ClntDtStHojaDeRutaItems.Append;
        ClntDtStHojaDeRutaItems.FieldByName('Paso').AsString              := PasosDeFabricacion.Actual.PasoDeFabricacion.codigo;
        if PasosDeFabricacion.Actual.RecursoID <> NullID then
          ClntDtStHojaDeRutaItems.FieldByName('Recurso').AsString           := PasosDeFabricacion.Actual.Recurso.Codigo;
        ClntDtStHojaDeRutaItems.FieldByName('FechaFinPaso').Value         := PasosDeFabricacion.Actual.FechaDeFinDePaso;
        if (PasosDeFabricacion.Actual.FechaDeIngreso <> Null) then
          ClntDtStHojaDeRutaItems.FieldByName('FechaIngreso').Value         := PasosDeFabricacion.Actual.FechaDeIngreso;
        if (PasosDeFabricacion.Actual.FechaDeEgreso <> Null) then
          ClntDtStHojaDeRutaItems.FieldByName('FechaEgreso').Value          := PasosDeFabricacion.Actual.FechaDeEgreso;
        ClntDtStHojaDeRutaItems.FieldByName('CantidadIngresada').Value    := PasosDeFabricacion.Actual.CantidadIngresada;
        ClntDtStHojaDeRutaItems.FieldByName('CantidadPendiente').Value    := PasosDeFabricacion.Actual.CantidadPendiente;
        ClntDtStHojaDeRutaItems.FieldByName('ObservacionesPaso').AsString := PasosDeFabricacion.Actual.Observacion;
        ClntDtStHojaDeRutaItems.Post;
        PasosDeFabricacion.Next;
      end;
    ClntDtStArbolProducto.EmptyDataSet;

    if not Producto.Fabricado.articulo.familiaDeArticulo.EsMatriz then
      begin
        if Producto.Fabricado.ComponentesDesplegados.Count = 0 then
          begin
            P := TPicture.Create;
            ClntDtStArbolProducto.Append;
            ClntDtStArbolProducto.FieldByName('ID').AsInteger                              := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('PadreID').AsInteger                         := NullID;
            ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger                     := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger     := NullID;
            ClntDtStArbolProducto.FieldByName('Nivel').AsInteger                           := 1;
            if (ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger <> NullID)then
            begin
              ClntDtStArbolProducto.FieldByName('FabricadoCodigo').AsString                := Producto.Fabricado.articulo.codigo;
              ClntDtStArbolProducto.FieldByName('FabricadoDescripcion').AsString           := Producto.Fabricado.Descripcion;
            end;
            P.LoadFromFile(Producto.Fabricado.articulo.archivoDeImagen);
            ClntDtStArbolProducto.FieldByName('Imagen').Assign(P.Graphic);
            ClntDtStArbolProducto.Post;
          end
        else
          begin
            P := TPicture.Create;
              //agrego el padre principal
            ClntDtStArbolProducto.Append;
            ClntDtStArbolProducto.FieldByName('ID').AsInteger                          := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('PadreID').AsInteger                     := NullID;
            ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger                 := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger := NullID;
            ClntDtStArbolProducto.FieldByName('Nivel').AsInteger                       := 1;
              if (ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger <> NullID)then
              begin
                ClntDtStArbolProducto.FieldByName('FabricadoCodigo').AsString             := Producto.Fabricado.articulo.codigo;
                ClntDtStArbolProducto.FieldByName('FabricadoDescripcion').AsString        := Producto.Fabricado.Descripcion;
              end;
            P.LoadFromFile(Producto.Fabricado.articulo.archivoDeImagen);
            ClntDtStArbolProducto.FieldByName('Imagen').Assign(P.Graphic);
            ClntDtStArbolProducto.Post;

            Producto.Fabricado.ComponentesDesplegados.First;
            while not Producto.Fabricado.ComponentesDesplegados.IsLast do
              begin
                ClntDtStArbolProducto.Append;
                ClntDtStArbolProducto.FieldByName('ID').AsInteger                           := Producto.Fabricado.ComponentesDesplegados.Actual.ID;
                ClntDtStArbolProducto.FieldByName('PadreID').AsInteger                      := Producto.Fabricado.ComponentesDesplegados.Actual.FabricadoPadreID;
                ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger                  := Producto.Fabricado.ComponentesDesplegados.Actual.FabricadoID;
                ClntDtStArbolProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger  := Producto.Fabricado.ComponentesDesplegados.Actual.ComponenteDesplegadoPadreID;
                ClntDtStArbolProducto.FieldByName('Nivel').AsInteger                        := Producto.Fabricado.ComponentesDesplegados.Actual.ComponenteDesplegadoNivel;
                if (ClntDtStArbolProducto.FieldByName('PadreID').AsInteger <> NullID) then
                begin
                  ClntDtStArbolProducto.FieldByName('PadreCodigo').AsString      := Producto.Fabricado.ComponentesDesplegados.Actual.FabricadoPadre.articulo.codigo;
                  ClntDtStArbolProducto.FieldByName('PadreDescripcion').AsString := Producto.Fabricado.ComponentesDesplegados.Actual.FabricadoPadre.Descripcion;
                end;
                if (ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger <> NullID) then
                begin
                  ClntDtStArbolProducto.FieldByName('FabricadoCodigo').AsString      := Producto.Fabricado.ComponentesDesplegados.Actual.Fabricado.articulo.codigo;
                  ClntDtStArbolProducto.FieldByName('FabricadoDescripcion').AsString := Producto.Fabricado.ComponentesDesplegados.Actual.Fabricado.Descripcion;
                end;
                P.LoadFromFile(Producto.Fabricado.ComponentesDesplegados.Actual.Fabricado.articulo.archivoDeImagen);
                ClntDtStArbolProducto.FieldByName('Imagen').Assign(P.Graphic);
                P.LoadFromFile(Producto.Fabricado.ComponentesDesplegados.Actual.FabricadoPadre.archivoDeImagen);
                ClntDtStArbolProducto.FieldByName('ImagenPadre').Assign(P.Graphic);
                ClntDtStArbolProducto.Post;
                Producto.Fabricado.ComponentesDesplegados.next;
              end;
          end;
          end
        else
          begin
            P := TPicture.Create;
              //agrego el padre principal
            ClntDtStArbolProducto.Append;
            ClntDtStArbolProducto.FieldByName('ID').AsInteger                          := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('PadreID').AsInteger                     := NullID;
            ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger                  := Producto.Fabricado.ID;
            ClntDtStArbolProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger := NullID;
            ClntDtStArbolProducto.FieldByName('Nivel').AsInteger                       := 1;
              if (ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger <> NullID)then
              begin
                ClntDtStArbolProducto.FieldByName('FabricadoCodigo').AsString             := Producto.Fabricado.articulo.codigo;
                ClntDtStArbolProducto.FieldByName('FabricadoDescripcion').AsString        := Producto.Fabricado.Descripcion;
              end;
            P.LoadFromFile(Producto.Fabricado.articulo.archivoDeImagen);
            ClntDtStArbolProducto.FieldByName('Imagen').Assign(P.Graphic);
            ClntDtStArbolProducto.Post;

            Producto.Fabricado.articulo.ComponentesDeMatrices.First;
            while not Producto.Fabricado.articulo.ComponentesDeMatrices.IsLast do
              begin
                ClntDtStArbolProducto.Append;
                ClntDtStArbolProducto.FieldByName('ID').AsInteger                           := Producto.Fabricado.articulo.ComponentesDeMatrices.Actual.ID;
                ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger                  := Producto.Fabricado.articulo.ComponentesDeMatrices.Actual.componenteDeMatrizID;
                if (ClntDtStArbolProducto.FieldByName('FabricadoID').AsInteger <> NullID) then
                begin
                  ClntDtStArbolProducto.FieldByName('FabricadoCodigo').AsString      := Producto.Fabricado.articulo.ComponentesDeMatrices.Actual.componenteDeMatriz.codigo;
                  ClntDtStArbolProducto.FieldByName('FabricadoDescripcion').AsString := Producto.Fabricado.articulo.ComponentesDeMatrices.Actual.componenteDeMatriz.Descripcion;
                end;
                ClntDtStArbolProducto.Post;
                Producto.Fabricado.articulo.ComponentesDeMatrices.next;
          end;
      end;
  end;

  Procedure DestroyComponentes;
  begin
    FreeAndNil(frxHojaDeRuta);
    FreeAndNil(frxDBDtstHojaDeRuta);
    FreeAndNil(frxDBDtstHojaDeRutaItems);
    FreeAndNil(frxDBDtstArbolProducto);
    FreeAndNil(ClntDtStHojaDeRuta);
    FreeAndNil(ClntDtStHojaDeRutaItems);
    FreeAndNil(ClntDtStArbolProducto);
    P := nil;
  end;

begin
 try
    Aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;
    if _Imprimir then
      begin
        frxHojaDeRuta.PrintOptions.ShowDialog := False;
        frxHojaDeRuta.ShowProgress            := True;
        if (TipoDeFormulario.ImpresoraDefaultID <> NullID) then
          frxHojaDeRuta.Report.PrintOptions.Printer    := TipoDeFormulario.ImpresoraDefault.DireccionDeRed;
        frxHojaDeRuta.PrepareReport;
        frxHojaDeRuta.Print;
      end
    else
      if not TipoDeFormulario.EditarPorAdministrador then
        frxHojaDeRuta.ShowReport
      else
        frxHojaDeRuta.DesignReport;
  finally
    DestroyComponentes;
    FreeObjectsFromMemory;
    Aplicacion.ColocarCursorNormal;
  end;
end;

function THojaDeRuta.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, ProductoID);
  Result := TProducto(FProducto);
end;

function THojaDeRuta.GetProductoCodigo: TString;
begin
  if (CCFabricadoID <> NullID) then
    Result := CCFabricadoCodigo
  else if (CCServicioID <> NullID) then
    Result := CCServicioCodigo
  else if (CCMateriaPrimaID <> NullID) then
    Result := CCMateriaPrimaCodigo
end;

function THojaDeRuta.getProductoPadreInmediatoParte: TProducto;
begin
  if not Assigned(FProductoPadreInmediatoParte) then
    GetObject(TProducto, FProductoPadreInmediatoParte, ProductoPadreInmediatoParteID);
  Result := TProducto(FProductoPadreInmediatoParte);
end;

function THojaDeRuta.GetProductoParte: TProducto;
begin
  if not assigned(FProductoParte) then
    GetObject(TProducto, FProductoParte, ProductoParteID);
  Result := TProducto(FProductoParte);
end;

function THojaDeRuta.GetProductoParteSemi: TProducto;
begin
  if not assigned(FProductoParteSemi) then
    GetObject(TProducto, FProductoParteSemi, ProductoParteSemiID);
  Result := TProducto(FProductoParteSemi);
end;

function THojaDeRuta.GetProductoParteSemiID: TObjectID;
var
  FL : TFabricadoList;
  F  : TFabricado;
begin
  if ( FProductoParteSemiID = nullID ) and ProductoParte.EsFabricado then
    if ( ProductoParte.Fabricado.Articulo.Material.TerminacionNaturalID <> NullID ) then
      try
        FL := TFabricadoList.CreateByArticuloTerminacionCunio( ProductoParte.Fabricado.Articulo, ProductoParte.Fabricado.Articulo.Material.TerminacionNatural, ProductoParte.Fabricado.Cunio );
        if FL.Count =0 then
          begin
            F := TFabricado.Create;
            F.ArticuloID    := ProductoParte.Fabricado.ArticuloID;
            F.TerminacionID := ProductoParte.Fabricado.Articulo.Material.TerminacionNaturalID;
            F.CunioID       := ProductoParte.Fabricado.CunioID;
            F.Crc           := 0;
            F.Descripcion   := F.DescripcionTraducida;
            F.Save;
            FL.Add( F );
          end
        else
          FL.First;
      finally
        FProductoParteSemiID := FL.Actual.ProductoID;
        if Assigned( FProductoParteSemi ) then
          FreeAndNil(FProductoParteSemi);
        FL.ApplyUpdates;
        FreeAndNil(FL);
      end
    else
      begin
        FProductoParteSemiID := ProductoParteID;
        if Assigned( FProductoParteSemi ) then
          FreeAndNil(FProductoParteSemi);
      end;
  Result := FProductoParteSemiID;
end;

function THojaDeRuta.GetStateLogs: THojaDeRutaStateLogList;
begin
  if not assigned(FStateLogs) then
    GetList(TPDList(FStateLogs), TPDList(THojaDeRutaStateLogList.CreateByHojaDeRuta(Self)));
  Result := FStateLogs;
end;

function THojaDeRuta.GetStocks: TStockItemList;
begin
  if not Assigned( FStocks ) then
    FStocks := TStockItemList.CreateByCodigoLikeSemielaborado( ProductoParte.Fabricado.Articulo.Codigo + '-___-' + ProductoParte.Fabricado.Cunio.Codigo);
  Result := FStocks;
end;

function THojaDeRuta.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, tipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

function THojaDeRuta.HojaRuteadaConFechas: Boolean;
begin
  Result := True;
  if PasosDeFabricacion.Count = 0 then
    begin
      Result := False;
      exit;
    end;
  Self.PasosDeFabricacion.First;
  while not Self.PasosDeFabricacion.IsLast do
  begin
    if (Self.PasosDeFabricacion.Actual.FechaDeFinDePaso = Null) then
      begin
        Result := False;
        exit;
      end;
    Self.PasosDeFabricacion.Next;
  end;
end;

procedure THojaDeRuta.IngresarHojaDeRuta(_PF : TPasoDeFabricacion ; _CantIngresada : integer; _AutoIngreso : Boolean);
begin
  if not _AutoIngreso then
    begin
      PasosDeFabricacion.First;
      if (PasosDeFabricacion.FindPasoDeFabricacion(_PF)) then
        begin
          if (PasosDeFabricacion.Actual.FechaDeIngreso = Null) or (PasosDeFabricacion.Actual.FechaDeIngreso = 0) then
            PasosDeFabricacion.Actual.FechaDeIngreso := Aplicacion.DateTimeService.FechaHoraActual;

          if (PasosDeFabricacion.Actual.CantidadIngresada = 0) then
          if (_CantIngresada > 0) then
            PasosDeFabricacion.Actual.CantidadIngresada := _CantIngresada
          else
            PasosDeFabricacion.Actual.CantidadIngresada := CantidadAFabricar;

          PasosDeFabricacion.Actual.Save;
        end
      else
        Aplicacion.raiseExceptionCreate('La hoja de Ruta Procesada no posee el paso de fabricación Actual')
    end
  else
    begin
      PasosDeFabricacion.Actual.FechaDeIngreso    := Aplicacion.DateTimeService.FechaHoraActual;
      if (_CantIngresada > 0) then
        PasosDeFabricacion.Actual.CantidadIngresada := _CantIngresada
      else
        PasosDeFabricacion.Actual.CantidadIngresada := CantidadAFabricar;
      PasosDeFabricacion.Actual.Save;
    end;
end;

procedure THojaDeRuta.LimpiarIngresosYEgresos;
begin
  try
    PasosDeFabricacion.First;
    while not PasosDeFabricacion.IsLast do
      begin
        PasosDeFabricacion.Actual.FechaDeIngreso    := Null;
        PasosDeFabricacion.Actual.CantidadIngresada := 0;
        PasosDeFabricacion.Actual.FechaDeEgreso     := Null;
        PasosDeFabricacion.Actual.CantidadEgresada  := 0;
        PasosDeFabricacion.Actual.Save;
        PasosDeFabricacion.Next;
      end;
  finally
    PasosDeFabricacion.First;
  end;
end;

Class Procedure THojaDeRuta.MotivoDeAtrasoHandler(_HR : THojaDeRuta; _PF : TPasoDeFabricacion);
var
  MotivoDeAtrasoID   : TObjectID;
  ComentarioDeAtraso : String;
  PasoAnterior       : THojaDeRutaPasoDeFabricacion;
  LeadTimeIdeal, LeadTimeReal : TEntero;
begin
  if not Aplicacion.ParametrosDelSistema.ActivarModuloMotivosDeAtraso then
    exit;

  try
    PasoAnterior := THojaDeRutaPasoDeFabricacion.Create;
    MotivoDeAtrasoID   := 0;
    ComentarioDeAtraso := '';
    if (_PF.MotivosDeAtraso.Count > 0) then
      begin
        if not _HR.PasosDeFabricacion.IsFirst then   // si es el primero no puedo hacer un previous
          begin
            if (_HR.PasosDeFabricacion.Actual.FechaDeFinDePaso < Aplicacion.DateTimeService.FechaActual ) then
              begin
                _HR.PasosDeFabricacion.Previous;
                PasoAnterior.Load(_HR.PasosDeFabricacion.Actual.ID);
                _HR.PasosDeFabricacion.next;
                // si se da esta condicion el sector no cumple con el lead time
                LeadTimeIdeal := Trunc(Aplicacion.DateTimeService.DiasHabilesEntreFechas(_HR.PasosDeFabricacion.Actual.FechaDeFinDePaso, PasoAnterior.FechaDeFinDePaso));
                LeadTimeReal  := Trunc(Aplicacion.DateTimeService.DiasHabilesEntreFechas( Aplicacion.DateTimeService.FechaActual, TFecha(_HR.PasosDeFabricacion.Actual.FechaDeIngreso)));
                if (LeadTimeIdeal < LeadTimeReal) Then
                  begin
                    if ( TfrmPopupMotivosDeAtrasoHojaDeRuta.Edit( MotivoDeAtrasoID, ComentarioDeAtraso, _HR.PasosDeFabricacion.Actual.PasoDeFabricacion) = mrOk ) and (MotivoDeAtrasoID <> NullID) then
                      Begin
                        _HR.PasosDeFabricacion.Actual.MotivoDeAtrasoID   := MotivoDeAtrasoID;
                        _HR.PasosDeFabricacion.Actual.ComentarioDeAtraso := ComentarioDeAtraso;
                      End
                    else
                      Aplicacion.raiseExceptionCreate('No ha informado ningún motivo de atraso. No puede Continuar.');
                  end;
              end;
          end
        else
          begin
            if _HR.EstadoDeHojaDeRuta.EsEstadoReproceso then
              begin
                LeadTimeIdeal := _HR.PasosDeFabricacion.Actual.PasoDeFabricacion.LeadTimeDefaultNoConforme;
                LeadTimeReal  := Trunc (Aplicacion.DateTimeService.DiasHabilesEntreFechas( Aplicacion.DateTimeService.FechaHoraActual, _HR.FechaImpresion  ) );
                if ( LeadTimeIdeal < LeadTimeReal ) then
                  begin
                    if ( TfrmPopupMotivosDeAtrasoHojaDeRuta.Edit( MotivoDeAtrasoID, ComentarioDeAtraso, _HR.PasosDeFabricacion.Actual.PasoDeFabricacion) = mrOk ) and (MotivoDeAtrasoID <> NullID) then
                      Begin
                        _HR.PasosDeFabricacion.Actual.MotivoDeAtrasoID   := MotivoDeAtrasoID;
                        _HR.PasosDeFabricacion.Actual.ComentarioDeAtraso := ComentarioDeAtraso;
                      End
                    else
                      Aplicacion.raiseExceptionCreate('No ha informado ningún motivo de atraso. No puede Continuar.');
                  end;
              end
            else if (_HR.PasosDeFabricacion.Actual.FechaDeFinDePaso < Aplicacion.DateTimeService.FechaActual )  then
              begin
                if ( TfrmPopupMotivosDeAtrasoHojaDeRuta.Edit( MotivoDeAtrasoID, ComentarioDeAtraso, _HR.PasosDeFabricacion.Actual.PasoDeFabricacion) = mrOk ) and (MotivoDeAtrasoID <> NullID) then
                  Begin
                    _HR.PasosDeFabricacion.Actual.MotivoDeAtrasoID   := MotivoDeAtrasoID;
                    _HR.PasosDeFabricacion.Actual.ComentarioDeAtraso := ComentarioDeAtraso;
                  End
                else
                  Aplicacion.raiseExceptionCreate('No ha informado ningún motivo de atraso. No puede Continuar.');
              end;
          end;
      end;
  finally
    if Assigned(PasoAnterior) then
      FreeAndNil(PasoAnterior);
  end;
end;

function THojaDeRuta.NuevoNumeroDeHojaDeRuta: Integer;
var
  HRNumeros : THojaDeRutaList;
begin
  try
    HRNumeros := THojaDeRutaList.CreateByUltimoNumero;
    if (HRNumeros.Count > 0) then
      Result := HRNumeros.Actual.Numero + 1
    else
      Result := 1;
  finally
    FreeAndNil(HRNumeros);
  end;
end;

class procedure THojaDeRuta.OperacionesHandler(_HR : THojaDeRuta ; _PF : TPasoDeFabricacion ; _OwnerForm : TForm);
var
  int : Integer;
  RD   : TProductoRuteoDefault;
  PO   : TProductoOperacion;

  Function HayTiemposCargados(_POL: TProductoOperacionList) : Boolean;
  begin
    _POL.First;
    while not _POL.IsLast do
      begin
        Result := (_POL.Actual.Duracion > 0);
        if result then
          break;
        _POL.next;
      end;
  end;
begin
  if not Aplicacion.ParametrosDelSistema.ActivarModuloOperaciones then
    exit;

  if not (_PF.Operaciones.Count > 0) then
    exit;

  if not _HR.ProductoParte.RuteoDefault.FindPasoDeFabricacion( _PF ) then
    Aplicacion.RaiseExceptionCreate('El paso ' + _PF.Descripcion + ' no se encuentra en el ruteo default del producto. Avise a programación para poder cargar los datos.');

  if (_HR.ProductoParte.RuteoDefault.Actual.Operaciones.Count = 0) then //nunca cargaron datos de este producto
    begin
      _PF.Operaciones.First;
      while not _PF.Operaciones.IsLast do
        begin
          PO                              := TProductoOperacion.Create;
          PO.ProductoRuteoDefaultID       := _HR.ProductoParte.RuteoDefault.Actual.ID;
          PO.PasoDeFabricacionOperacionID := _PF.Operaciones.Actual.ID;
          PO.UnidadDeMedidaDuracionID     := Aplicacion.MeasureService.UnidadDeMedidaTiempoDefault.ID;
          PO.Duracion                     := 0;
          PO.Save;
          _HR.ProductoParte.RuteoDefault.Actual.Operaciones.Add(PO);
          _PF.Operaciones.next;
          PO.NilObject;
        end;
    end;
  if (_HR.ProductoParte.RuteoDefault.Actual.CantidadProcesada = 0) or
     (_HR.ProductoParte.RuteoDefault.Actual.RecursoID = NullID) or
     (_HR.ProductoParte.RuteoDefault.Actual.HerramentalID = NullID) or
     (Not HayTiemposCargados(_HR.ProductoParte.RuteoDefault.Actual.Operaciones) ) then //cargaron los datos pero los dejaron en 0

    begin
     int := TfrmPopupABMProductoOperaciones.Edit(_OwnerForm, _HR.ProductoParte.RuteoDefault.Actual.Operaciones, _HR.ProductoParte.RuteoDefault.Actual, False, 'Operaciones del Producto : ' + _HR.ProductoParte.Codigo + ' ' + _HR.ProductoParte.RuteoDefault.Actual.PasoDeFabricacion.Descripcion  );

//  if (_HR.ProductoParte.RuteoDefault.Actual.CantidadProcesada <= 0) then
//    Aplicacion.raiseExceptionCreate('No ha informado la cantidad de unidades procesada. No puede Continuar.');
//
//  if (_HR.ProductoParte.RuteoDefault.Actual.RecursoID = NullID) then
//    Aplicacion.raiseExceptionCreate('No ha informado el recurso utilizado. No puede Continuar.');
//
//  if (_HR.ProductoParte.RuteoDefault.Actual.HerramentalID = NullID) then
//    Aplicacion.raiseExceptionCreate('No ha informado el herramental utilizado. No puede Continuar.');

      if not ( int = mrOk ) then
        Aplicacion.raiseExceptionCreate('No ha informado tiempos. No puede Continuar.');
        if (_HR.ProductoParte.RuteoDefault.Actual.Operaciones.Modified) then
          _HR.ProductoParte.RuteoDefault.Actual.Operaciones.ApplyUpdates
//            begin
//              if (Aplicacion.Mensaje('¿Desea guardar los cambios realizados?','Aviso',MB_YESNO) = mrYes) then
//                _HR.ProductoParte.RuteoDefault.Actual.Operaciones.ApplyUpdates
//              else
//                _HR.ProductoParte.RuteoDefault.Actual.Operaciones.CancelUpdates;
//            end;
    end;
end;

Procedure THojaDeRuta.FreeObjectsFromMemory;
begin
  if Assigned(FProducto) then
    FreeAndNil(FProducto);
  if Assigned(FEstadoDeHojaDeRuta) then
    FreeAndNil(FEstadoDeHojaDeRuta);
  if Assigned(FProductoParte) then
    FreeAndNil(FProductoParte);
  if Assigned(FMaterialProductoParte) then
    FreeAndNil(FMaterialProductoParte);
  if Assigned(FPasosDeFabricacion) then
    FreeAndNil(FPasosDeFabricacion);
  if Assigned(FStateLogs) then
    FreeAndNil(FStateLogs);
  if Assigned(FProductoPadreInmediatoParte) then
    FreeAndNil(FProductoPadreInmediatoParte);
  if Assigned(FMotivoDeNoConforme) then
    FreeAndNil(FMotivoDeNoConforme);
  if Assigned(FEstadoAnterior) then
    FreeAndNil(FEstadoAnterior);
  if Assigned(FNoConformes) then
    FreeAndNil(FNoConformes);
  if Assigned(FHistorialDeNoConformes) then
    FreeAndNil(FHistorialDeNoConformes);
end;

function THojaDeRuta.PermiteEgreso(_PF : TPasoDeFabricacion): Boolean;
begin
  Result := False;
  if PasosDeFabricacion.FindPasoDeFabricacion(_PF) then
    begin
      if (PasosDeFabricacion.Actual.FechaDeIngreso <> Null) and (PasosDeFabricacion.Actual.FechaDeEgreso = Null)  then // si el paso Actual esta ingresado, permite Egresar
        Result := True;
    end;
end;

function THojaDeRuta.PermiteIngreso(_PF : TPasoDeFabricacion): Boolean;
begin
  Result := False;
  if PasosDeFabricacion.FindPasoDeFabricacion(_PF) then
    begin
      if PasosDeFabricacion.IsFirst then
        begin
          Result := True;
          exit;
        end;
      if (PasosDeFabricacion.Actual.FechaDeIngreso = Null) then // verifico que el paso Actual no este ingresado, para que no ingrese 2 veces
        begin
          PasosDeFabricacion.Previous; //me voy al paso anterior para ver si ya esta egresado
          if  (PasosDeFabricacion.Actual.FechaDeEgreso <> Null) then
            Result := True;
        end;
    end;
end;

function THojaDeRuta.PrimerPaso: String;
begin
  if ( PasosDeFabricacion.Count > 0 ) then
    begin
      PasosDeFabricacion.First;
      Result := PasosDeFabricacion.Actual.PasoDeFabricacion.codigo;
      PasosDeFabricacion.First;
    end
  else
    Result := '';
end;

function THojaDeRuta.PuedeCumplir : Boolean;
begin
//  la hoja debería poder cumplirse cuando ya estan todos sus pasos egresados
  Result := CCEsEstadoEnFabricacion and (CCFechaDeIngresoUltimoPasoDeFabricacion <> Null) and (CCFechaDeEgresoUltimoPasoDeFabricacion <> Null);
end;

procedure THojaDeRuta.Reactivar;
begin
  if StateLogs.FindEstadoCanceladoOCumplido and not StateLogs.IsFirst then
    begin
      StateLogs.Previous;
      Self.EstadoDeHojaDeRutaID := StateLogs.Actual.EstadoDeHojaDeRutaID;
      Self.Save;
      Self.AgregarNuevoEstadoAlLog('Reactivación');
    end
  else
    Aplicacion.RaiseExceptionCreate('No se pudo encontrar el estado cancelado o cumplido en el seguimiento de la hoja de ruta.' );
end;

procedure THojaDeRuta.RenumerarPasos;
var
  i : integer;
begin
  PasosDeFabricacion.First;
  i := 1;
  while not PasosDeFabricacion.IsLast do
    begin
      PasosDeFabricacion.Actual.Secuencia := i;
      PasosDeFabricacion.Actual.TmpEsNoConformeOParcial := True;
      PasosDeFabricacion.Actual.Save;
      inc(i);
      PasosDeFabricacion.next;
    end;
end;

{ THojaDeRutaDM }
class function THojaDeRutaDM.TableName: string;
begin
  Result := 'HojasDeRuta';
end;

class function THojaDeRutaDM.ViewName: string;
begin
  Result := 'MonitorHojasDeRuta';
end;

class function THojaDeRutaDM.SelectCountByPedidoDeVentaItemID(_PVI: TobjectID): String;
begin
  result := 'select count('+ ID_FieldName + ') as RecordCount from ' + TableName ;
  result := result + ' left join '+ TEstadoDeHojaDeRutaDM.TableName +' EHR on ( EHR.'+ TEstadoDeHojaDeRutaDM.ID_FieldName +' = ' + TableName + '.' + _EstadoDeHojaDeRutaID +') ';
  result := result + 'where ' + _PedidoDeVentaItemID + ' in( select ' + TPedidoDeVentaItemDM.ID_FieldName + ' from ' + TPedidoDeVentaItemDM.TableName;
  result := result + ' where ' + TPedidoDeVentaItemDM.ID_FieldName + ' = ' + IntToStr( _PVI ) +') ';
end;

class function THojaDeRutaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function THojaDeRutaDM.ID_FieldName: string;
begin
  Result := 'HojaDeRutaID';
end;

procedure THojaDeRutaDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRuta(PDObject) do
  begin
    IntegerField[_numero]                   := Numero;
    StringField[_NumeroImprimible]          := NumeroImprimible;
    IDField[_TipoDeFormularioID]            := FTipoDeFormularioID;
    IDField[_PedidoDeVentaItemID]           := FPedidoDeVentaItemID;
    IDField[_ProductoID]                    := FProductoID;
    IDField[_ProductoParteID]               := FProductoParteID;
    IDField[_ProductoParteSemiID]           := FProductoParteSemiID;
    IDField[_ProductoPadreInmediatoParteID] := FProductoPadreInmediatoParteID;
    IDField[_MaterialProductoParteID]       := FMaterialProductoParteID;
    IDField[_EstadoDeHojaDeRutaID]          := FEstadoDeHojaDeRutaID;
    FloatField[_CantidadPedida]             := FCantidadPedida;
    FloatField[_CantidadExtra]              := FCantidadExtra;
    StringField[_ObservacionProduccion]     := FObservacionProduccion;
    DateField[_FechaDeCarga]                := FechaDeCarga;
    DateField[_FechaPrometida]              := FechaPrometida;
    IDField[_MotivoDeNoConformeID]          := FMotivoDeNoConformeID;
    FloatField[_CantidadBuena]              := FCantidadbuena;
    FloatField[_CantidadParcial]            := FCantidadParcial;
    BooleanField[_EsPrioridad]              := FEsPrioridad;
    IDField[_EstadoAnteriorID]              := FEstadoAnteriorID;
    DateField[_FechaEstimadaProduccion]     := FFechaEstimadaProduccion;
    IntegerField[_NumeroDeParte]            := FNumeroDeParte;
    IDField[_ColorDeHojaDeRutaID]           := FColorDeHojaDeRutaID;
  end;
end;

procedure THojaDeRutaDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRuta(PDObject) do
  begin
    Fnumero                        := IntegerField[_numero];
    FNumeroImprimible              := StringField[_NumeroImprimible];
    FTipoDeFormularioID            := IDField[_TipoDeFormularioID];
    FPedidoDeVentaItemID           := IDField[_PedidoDeVentaItemID];
    FProductoID                    := IDField[_ProductoID];
    FProductoParteID               := IDField[_ProductoParteID];
    FProductoParteSemiID           := IDField[_ProductoParteSemiID];
    FProductoPadreInmediatoParteID := IDField[_ProductoPadreInmediatoParteID];
    FMaterialProductoParteID       := IDField[_MaterialProductoParteID];
    FEstadoDeHojaDeRutaID          := IDField[_EstadoDeHojaDeRutaID];
    FCantidadPedida                := FloatField[_CantidadPedida];
    FCantidadExtra                 := FloatField[_CantidadExtra];
    FObservacionProduccion         := StringField[_ObservacionProduccion];
    FechaDeCarga                   := DateField[_FechaDeCarga];
    FechaPrometida                 := DateField[_FechaPrometida];
    FMotivoDeNoConformeID          := IDField[_MotivoDeNoConformeID];
    FCantidadbuena                 := FloatField[_CantidadBuena];
    FCantidadParcial               := FloatField[_CantidadParcial];
    FEsPrioridad                   := BooleanField[_EsPrioridad];
    FEstadoAnteriorID              := IDField[_EstadoAnteriorID];
    FFechaEstimadaProduccion       := DateField[_FechaEstimadaProduccion];
    FNumeroDeParte                 := IntegerField[_NumeroDeParte];
    FColorDeHojaDeRutaID           := IDField[_ColorDeHojaDeRutaID];
// DE LA VISTA
    FCCFabricadoID                              := IDField[_CCFabricadoID];
    FCCServicioID                               := IDField[_CCServicioID];
    FCCMateriaPrimaID                           := IDField[_CCMateriaPrimaID];
    FCCProductoCodigo                           := StringField[_CCFabricadoCodigo];
    FCCFabricadoCodigo                          := StringField[_CCFabricadoCodigo];
    FCCServicioCodigo                           := StringField[_CCServicioCodigo];
    FCCServicioDescripcion                      := StringField[_CCServicioDescripcion];
    FCCFabricadoParteDescripcion                := StringField[_CCFabricadoParteDescripcion];
    FCCFabricadoParteCodigo                     := StringField[_CCFabricadoParteCodigo];
    FCCFabricadoParteID                         := IDField[_CCFabricadoParteID];
    FCCEstadoCodigo                             := StringField[_CCEstadoCodigo];
    FCCEstadoColor                              := StringField[_CCEstadoColor];
    FCCEstadoDescripcion                        := StringField[_CCEstadoDescripcion];
    FCCEsEstadoEnFabricacion                    := BooleanField[_CCEsEstadoEnFabricacion];
    FCCEsEstadoCumplido                         := BooleanField[_CCEsEstadoCumplido];
    FCCEsEstadoCancelado                        := BooleanField[_CCEsEstadoCancelado];
    FCCTerminacionParteDescripcion              := StringField[_CCTerminacionParteDescripcion];
    FCCCunioParteCodigo                         := StringField[_CCCunioParteCodigo];
    FCCCunioParteDescripcion                    := StringField[_CCCunioParteDescripcion];
    FCCCunioFechaDeFinDeConstruccion            := DateField[_CCCunioFechaDeFinDeConstruccion];
    FCCMaterialParteCodigo                      := StringField[_CCMaterialParteCodigo];
    FCCMaterialParteDescripcion                 := StringField[_CCMaterialParteDescripcion];
    FCCTipoDeFlexibilidadCodigo                 := StringField[_CCTipoDeFlexibilidadCodigo];
    FCCTipoDeFlexibilidadDescripcion            := StringField[_CCTipoDeFlexibilidadDescripcion];
    FCCClienteCodigo                            := StringField[_CCClienteCodigo];
    FCCClienteDescripcion                       := StringField[_CCClienteDescripcion];
    FCCClienteRankingCrediticio                 := StringField[_CCClienteRankingCrediticio];
    FCCObservacionVentas                        := StringField[_CCObservacionVentas];
    FCCTipoDePedidoDeVentaCodigo                := StringField[_CCTipoDePedidoDeVentaCodigo];
    FCCColorDeHojaDeRutaDescripcion             := StringField[_CCColorDeHojaDeRutaDescripcion];
    FCCCriticidadCodigo                         := StringField[_CCCriticidadCodigo];
    // paso actual
    FCCFechaDeFinDePasoPasoDeFabricacionActual  := DateField[_CCFechaDeFinDePasoPasoDeFabricacionActual];
    FCCFechaDeIngresoPasoDeFabricacionActual    := DateTimeField[_CCFechaDeIngresoPasoDeFabricacionActual];
    FCCFechaDeEgresoPasoDeFabricacionActual     := DateTimeField[_CCFechaDeEgresoPasoDeFabricacionActual];
    FCCEsUltimoPasoPasoDeFabricacionActual      := BooleanField[_CCEsUltimoPasoPasoDeFabricacionActual];
    FCCObservacionPasoDeFabricacionActual       := StringField[_CCObservacionPasoDeFabricacionActual];
    FCCPasoDeFabricacionActualCodigo            := StringField[_CCPasoDeFabricacionActualCodigo];
    FCCRecursoActualCodigo                      := StringField[_CCRecursoActualCodigo];
    // ultimo paso
    FCCFechaDeFinDePasoUltimoPasoDeFabricacion  := DateField[_CCFechaDeFinDePasoUltimoPasoDeFabricacion];
    FCCFechaDeIngresoUltimoPasoDeFabricacion    := DateTimeField[_CCFechaDeIngresoUltimoPasoDeFabricacion];
    FCCFechaDeEgresoUltimoPasoDeFabricacion     := DateTimeField[_CCFechaDeEgresoUltimoPasoDeFabricacion];
    //paso empaque
    FCCFechaDeFinDePasoPasoDeFabricacionEmpaque := DateField[_CCFechaDeFinDePasoPasoDeFabricacionEmpaque];
    FCCFechaDeEgresoPasoDeFabricacionEmpaque    := DateField[_CCFechaDeEgresoPasoDeFabricacionEmpaque];
  end;
end;


{ THojaDeRutaList }
function THojaDeRutaList.GetActual: THojaDeRuta;
begin
  Result := THojaDeRuta(CurrentObject);
end;

constructor THojaDeRutaList.CreateByAtrasadas(_FiltroPasos : TStringList);
Function WhereString : String;
var
  I : Integer;
  begin
    Result := '( ' + THojaDeRutaDM._CCFechaDeFinDePasoPasoDeFabricacionActual + ' < ' + QuotedStr(DateToStr(Aplicacion.DateTimeService.FechaActual)) + ' )' ;
    Result := Result + ' and (' + THojaDeRutaDM._CCEsEstadoEnFabricacion + ' =1)';

    if Assigned(_FiltroPasos) then
      begin
        Result := Result + ' and (' + THojaDeRutaDM._CCPasoDeFabricacionActualID + ' in( ';
        for I := 0 to _FiltroPasos.count - 1 do
          Result := Result + _FiltroPasos[I] + ' , ';
        Result := Result + '-1 ) )';
      end;
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString, False, THojaDeRutaDM._Numero));
end;

constructor THojaDeRutaList.CreateByCodigoParteAndFechaDesdeFechaHasta(_CodigoParte: String; _FechaDesde, _FechaHasta: TDateTime);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM._ProductoParteID  + ' in ( SELECT ' + TFabricadoDM._productoID + ' FROM  ' + TFabricadoDM.TableName + ' WHERE ' + TFabricadoDM._Codigo + ' LIKE ' + QuotedStr(_CodigoParte) + ' ) ' +
    ' AND ' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' NOT IN ( SELECT ' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' FROM ' + TEstadoDeHojaDeRutaDM.TableName + ' WHERE '+  TEstadoDeHojaDeRutaDM._Codigo + ' IN (' + QuotedStr(Aplicacion.ConstantAllocator.CodigoEstadoHR_Cancelada) + ',' + QuotedStr(Aplicacion.ConstantAllocator.CodigoEstadoHR_NoConforme) + ',' + QuotedStr(Aplicacion.ConstantAllocator.CodigoEstadoHR_Parcial) +' ))' +
    ' AND ' + THojaDeRutaDM._FechaDeCarga + ' BETWEEN ' + QuotedStr( DateToStr(_FechaDesde) + _PrimerHora ) + ' AND ' + QuotedStr(DateToStr(_FechaHasta) + _UltimaHora);
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString, False, THojaDeRutaDM._FechaDeCarga));
end;

constructor THojaDeRutaList.CreateByCumplidas;
Function WhereString : String;
  begin
    Result :=          '( ' + THojaDeRutaDM._CCFechaDeIngresoUltimoPasoDeFabricacion + ' is not Null )' + ' and ';
    Result := Result + '( ' + THojaDeRutaDM._CCFechaDeEgresoUltimoPasoDeFabricacion  + ' is not Null )' + ' and ';
    Result := Result + '( ' + THojaDeRutaDM._CCEsEstadoEnFabricacion                 + ' = 1 )';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByCustomizadosFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: TFecha; _SoloEnProduccion: Boolean);
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM._FechaDeCarga + ' Between ' + QuotedStr(DateToStr(_FechaDesde) + _PrimerHora ) + ' And '+ QuotedStr(DateToStr(_FechaHasta) + _UltimaHora );
    if _SoloEnProduccion then
      Result := Result + ' and ' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in (Select ' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' where (' +  TEstadoDeHojaDeRutaDM._EsEstadoEnFabricacion + '=1 or ' + TEstadoDeHojaDeRutaDM._EsEstadoNoProgramado + '=1) and (' + TEstadoDeHojaDeRutaDM._EsEstadoCancelado + '=0 ) )' ;
    Result := Result + ' and ' + THojaDeRutaDM._ProductoParteID + ' in (Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM._CRC + ' <> 0 )';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByEnFabricacion;
  function WhereString: String;
  begin
    Result := '(' + THojaDeRutaDM._CCEsEstadoEnFabricacion + '=1)';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByEstado(_EstadoID: TObjectID);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM._EstadoDeHojaDeRutaID + ' = ' + IntToStr(_EstadoID);
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByEstados(_Est: String);
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in(' + _Est + ')';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByEstadosAndAtrasadas(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  Function IDsEstadosDeHojaDeRuta: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeHojaDeRutaID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in(' + IDsEstadosDeHojaDeRuta + ')';
    Result := Result + ' and ( ' + THojaDeRutaDM._CCFechaDeFinDePasoPasoDeFabricacionActual + ' < ' + QuotedStr(DateToStr(Aplicacion.DateTimeService.FechaActual)) + ' )' ;
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString, false, THojaDeRutaDM._FechaDeCarga ));
end;

constructor THojaDeRutaList.CreateByFechaDesdeFechaHastaTipoDePedidoClienteAndProducto(_FechaDesde, _FechaHasta: TFecha; _TipoPedido, _Cliente, _ProductoCodigo: String);
  Function WhereString : String;
  begin
    IF (_FechaDesde <> NULL) and (_Fechahasta <> NULL) then
  		Result := '(' + THojaDeRutaDM._FechaDeCarga + ' Between ' + QuotedStr(DateToStr(_FechaDesde)+ _PrimerHora ) + ' and ' + QuotedStr(DateToStr(_FechaHasta)+ _UltimaHora) + ')'
	  else
		  begin
        IF (_FechaDesde <> Null) then
          Result := '( ' + THojaDeRutaDM._FechaDeCarga + ' >= ' + QuotedStr(DateToStr(_FechaDesde) + _PrimerHora ) + ')'
        else
          Result := '( ' + THojaDeRutaDM._FechaDeCarga + ' <= ' + QuotedStr(DateToStr(_FechaHasta) + _UltimaHora ) + ')'
  		end;

    IF (_TipoPedido <> NULL) and (_TipoPedido <> '') then
      begin
        Result := Result +  IfThen(Result > '', ' and ', '');
        Result := Result +  TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._Codigo + ' = ' + QuotedStr(_TipoPedido) + ')';
      end;

  	if (_Cliente <> NULL) and (_Cliente <> '') then
	    begin
        Result := Result + IfThen(Result > '', ' and ', '');
        Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ' = ' + QuotedStr(_Cliente) + ')';
    	end;

    if (_ProductoCodigo <> NULL) and (_ProductoCodigo <> '') then
    begin
      Result := Result + IfThen(Result > '', ' and ', '');
      Result := Result + THojaDeRutaDM._CCFabricadoCodigo + ' like ' + QuotedStr('%' + _ProductoCodigo + '%' )+ ')';
    end;
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByItem(_PVI: TPedidoDeVentaItem);
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM._PedidoDeVentaItemID + ' = ' + IntToStr(_PVI.ID);
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  Function IDsEstadosDeHojaDeRuta: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeHojaDeRutaID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in(' + IDsEstadosDeHojaDeRuta + ')';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByNumero(_Numero: Integer);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM._Numero + ' = ' + IntToStr(_Numero);
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll( False, WhereString ));
end;

constructor THojaDeRutaList.CreateByPasoDeFabricacion(_P: TPasoDeFabricacion);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM.ID_FieldName + ' in (Select ' + THojaDeRutaPasoDeFabricacionDM.ID_FieldName + ' From ' + THojaDeRutaPasoDeFabricacionDM.TableName + ' where ' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in(Select ' +
    TPasoDeFabricacionDM.ID_FieldName + ' From ' + TPasoDeFabricacionDM.TableName + ' where ' +  TPasoDeFabricacionDM.ID_FieldName + ' = ' + IntToStr(_P.ID) +' ))';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByPasoDeFabricacionIngresadas(_P: TPasoDeFabricacion);
  Function WhereString : String;
  begin
    Result := '( ' + THojaDeRutaDM._CCFechaDeIngresoPasoDeFabricacionActual + ' is not null and '
                   + THojaDeRutaDM._CCFechaDeEgresoPasoDeFabricacionActual  + ' is null and '
                   + THojaDeRutaDM._CCEsEstadoEnFabricacion + ' = 1 and '
                   + THojaDeRutaDM._CCPasoDeFabricacionActualID + ' = ' + IntToStr(_P.ID) + ' )';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByPasoDeFabricacionNoIngresadas(_P: TPasoDeFabricacion);
  Function WhereString : String;
  begin
    Result := THojaDeRutaDM.ID_FieldName + ' in (Select ' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' From ' + THojaDeRutaPasoDeFabricacionDM.TableName;
    Result := Result  + ' Where ' +  THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso + ' is NULL And ' +  THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' = ' +  IntToStr(_P.ID) + ' )';
    Result := Result  + ' And '   + THojaDeRutaDM._CCEsEstadoEnFabricacion + ' = 1';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByPedido(_NumPed: String);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM._NumeroImprimible + ' like ' + QuotedStr( _NumPed + '%' );
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False,WhereString));
end;

constructor THojaDeRutaList.CreateByPedidoDeVenta(_PV: TPedidoDeVenta);
  function WhereString: String;
  begin
    Result := THojaDeRutaDM._PedidoDeVentaItemID + ' in (' +
              ' Select ' + TPedidoDeVentaItemDM.ID_FieldName + ' from ' + TPedidoDeVentaItemDM.TableName + ' where ' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in (' +
              ' Select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ' + TPedidoDeVentaDM._numero + ' = ' + IntToStr( _PV.numero ) + '))';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByPendientesAndCodigoParte(_ProductoParte: TProducto; _PasoDeFabricacion: TPasoDeFabricacion);
  function WhereString: String;
  begin
    Result :=          '( ' + THojaDeRutaDM._ProductoParteID + ' = ' + IntToStr(_ProductoParte.ID) + ' ) and ';
    Result := Result + '( ' + THojaDeRutaDM._CCEsEstadoEnFabricacion + ' = 1 ) And ';
    Result := Result + '( ' + THojaDeRutaDM.ID_FieldName + ' in ( Select ' +  THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' from ' + THojaDeRutaPasoDeFabricacionDM.TableName + ' where ';
    Result := Result +        THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' = ' + IntToStr( _PasoDeFabricacion.ID) + ' and ';
    Result := Result +        THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is null ) ';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaList.CreateByUltimaHojaDeRutaAndProductoParte(_ProdParte: TProducto);
  Function WhereString : String;
  begin
    Result :=            '(' + THojaDeRutaDM._ProductoParteID + ' = ' + IntToStr(_ProdParte.ID) + ') and ';
    Result := Result + '( (' + THojaDeRutaDM._CCEsEstadoEnFabricacion + ' = 1) or (' + THojaDeRutaDM._CCEsEstadoCumplido + ' = 1 ) )';
  end;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False, WhereString, False, THojaDeRutaDM._Numero + ' Desc'));
end;

constructor THojaDeRutaList.CreateByUltimoNumero;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateTop(1, '', THojaDeRutaDM._Numero + ' Desc '));
end;

function THojaDeRutaList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRuta.Create;
end;

function THojaDeRutaList.Find(_numero: Integer): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (THojaDeRuta(CurrentObject).Numero = _Numero);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor THojaDeRutaList.CreateAll;
begin
  inherited Create(THojaDeRuta, THojaDeRutaDM.CreateAll(False));
end;

 { THojaDeRutaPasosDeFabricacion }
procedure THojaDeRutaPasoDeFabricacion.AjustarStock;
var
  TFASL : TTipoDeFormularioAccionStockList;
  ESL   : TEstadoDeStockList;

  procedure AjustarStockMP;
  var
    MPConsumida: Real;
  begin
    MPConsumida := ConsumoMP + ConsumoMPStockSemi + ConsumoMPRechazado;
    if (MPConsumida > 0 ) and TFASL.Actual.TipoDeMovimientoDeStock.EsAjusteDeMateriaPrima and  ( TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID = NullID ) and
           not HojaDeRuta.ProductoParte.Fabricado.articulo.familiaDeArticulo.EsMatriz and (MateriaPrimaID <> NullID) then
      Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
            TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
            TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
            TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
            TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
            MateriaPrima.ProductoID,
            MPConsumida,
            NullID,
            0 );
  end;

  Procedure AjustarStockSemi;
  var
    AjustarStock : Boolean;
    AjustarStockAsignado : Boolean;
  Begin
    AjustarStock := HojaDeRuta.ProductoParteSemi.EsStockeable;
    AjustarStock := AjustarStock and (CantidadUsadaDeStock > 0 );
    AjustarStock := AjustarStock and TFASL.Actual.TipoDeMovimientoDeStock.EsAjusteDeSemielaborados;
    AjustarStock := AjustarStock and (TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID = NullID ) ;

    if AjustarStock then // hace ajuste SEMI usados de stock
      begin
        if PasoDeFabricacion.ConsumeMP then
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
              HojaDeRuta.ProductoParteSemiID,
              CantidadUsadaDeStock,
              NullID,
              HojaDeRuta.ProductoParteSemi.Fabricado.Articulo.UnidadesPorEnvase )

        else
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
              HojaDeRuta.ProductoParteID,
              CantidadUsadaDeStock,
              NullID,
              HojaDeRuta.ProductoParte.Fabricado.Articulo.UnidadesPorEnvase );
      end;

    AjustarStockAsignado := HojaDeRuta.ProductoParteSemi.EsStockeable;
    AjustarStockAsignado := AjustarStockAsignado and (CantidadUsadaDeStockAsignado > 0 );
    AjustarStockAsignado := AjustarStockAsignado and TFASL.Actual.TipoDeMovimientoDeStock.EsAjusteDeSemielaborados;
    AjustarStockAsignado := AjustarStockAsignado and (TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID = NullID ) ;
    if AjustarStockAsignado then // hace ajuste SEMI usados de stock Asignado
      begin
        if PasoDeFabricacion.RequiereStockAsignado then
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
              HojaDeRuta.ProductoParteSemiID,
              CantidadUsadaDeStockAsignado,
              HojaDeRuta.PedidoDeVentaItemID,
              HojaDeRuta.ProductoParteSemi.Fabricado.Articulo.UnidadesPorEnvase )
      end;
  End;

  Procedure AgregarStockSemi;
  var
    AgregarStock : Boolean;
  Begin
    AgregarStock := HojaDeRuta.ProductoParteSemi.EsStockeable;
    AgregarStock := AgregarStock and (CantidadParaStock > 0 );
    AgregarStock := AgregarStock and TFASL.Actual.TipoDeMovimientoDeStock.EsAjusteDeSemielaborados;
    AgregarStock := AgregarStock and (TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID = NullID );

    if AgregarStock then // hace ajuste SEMI producidos para stock
      Begin
        if PasoDeFabricacion.ConsumeMP then
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
              HojaDeRuta.ProductoParteSemiID,
              CantidadParaStock,
              NullID,
              HojaDeRuta.ProductoParteSemi.Fabricado.Articulo.UnidadesPorEnvase )
        else
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoDestinoID,
              HojaDeRuta.ProductoParteID,
              CantidadParaStock,
              NullID,
              HojaDeRuta.ProductoParte.Fabricado.Articulo.UnidadesPorEnvase );
      End;
  End;

  Procedure AgregarStockRechazado;
  var
    AgregarStockRechazado : Boolean;  
  Begin
    AgregarStockRechazado := HojaDeRuta.ProductoParteSemi.EsStockeable;
    AgregarStockRechazado := AgregarStockRechazado and (CantidadRechazada > 0 );
    AgregarStockRechazado := AgregarStockRechazado and TFASL.Actual.TipoDeMovimientoDeStock.EsAjusteDeSemielaborados; 
    AgregarStockRechazado := AgregarStockRechazado and (TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID = NullID );
  
    if AgregarStockRechazado then // hace ajuste SEMI producidos para stock Rechazados
      try
        ESL   := TEstadoDeStockList.CreateByCodigo( aplicacion.ConstantAllocator.CodigoEstadoDeStockRechazado );
        if (ESL.count = 0) then
          Aplicacion.RaiseExceptionCreate('No se encontró el estado de stock Rechazado. Cód.(' + aplicacion.ConstantAllocator.CodigoEstadoDeStockRechazado +')' );
        ESL.First;
        if PasoDeFabricacion.ConsumeMP then
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              ESL.Actual.ID,                // Cambio el estado por Rechazado
              HojaDeRuta.ProductoParteSemiID,
              CantidadRechazada,
              NullID,
              HojaDeRuta.ProductoParteSemi.Fabricado.Articulo.UnidadesPorEnvase )
        else
          Aplicacion.StockManager.MoverStock( HojaDeRuta.TipoDeFormulario, '', 0,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.EstadoOrigenID,
              TFASL.Actual.TipoDeMovimientoDeStock.DepositoDestinoID,
              ESL.Actual.ID,                // Cambio el estado por Rechazado
              HojaDeRuta.ProductoParteID,
              CantidadParaStock,
              NullID,
              HojaDeRuta.ProductoParte.Fabricado.Articulo.UnidadesPorEnvase );
      finally
        FreeAndNil( ESL );
      End;
  End;


begin
  try
    TFASL := TTipoDeFormularioAccionStockList.CreateByTipoDeFormularioYPasoDeFabricacionID( HojaDeRuta.TipoDeFormulario, PasoDeFabricacionID );
    TFASL.First;
    if ( TFASL.count > 0 )  then // si lo encuentra es porque hay acciobnes de stock
      begin
        while not TFASL.IsLast do
          begin
            AjustarStockMP;
            AjustarStockSemi;
            AgregarStockSemi;
            AgregarStockRechazado;
            TFASL.Next;
          end;
      end;

  finally
    FreeAndNil( TFASL );
  end;

end;

constructor THojaDeRutaPasoDeFabricacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaPasoDeFabricacionDM);
  SaveSqlLog            := False;
  FTmpEsNoConformeOParcial := False;
  FFechaDeEgreso        := Null;
  FFechaDeIngreso       := Null;
  FFechaDeFinDePaso     := Null;
  FCantidadIngresada    := 0;
  FCantidadEgresada     := 0;
  FUsuarioDeEgresoID    := NullID;
  FMotivoDeAtrasoID     := NullID;
  FCantidadParaStock    := 0;
  FConsumoMP            := 0;
  FConsumoMPStockSemi   := 0;
  FConsumoMPRechazado   := 0;
  FUnidadDeMedidaMPID   := NullID;
  FTmpEsEgreso          := False;
end;

procedure THojaDeRutaPasoDeFabricacion.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;

procedure THojaDeRutaPasoDeFabricacion.SetRecursoID(const Value: TObjectID);
begin
  if (Value<>FRecursoID) and Assigned(FRecurso) then
    FreeAndNil(FRecurso);
  FRecursoID := Value;
end;

procedure THojaDeRutaPasoDeFabricacion.SetUnidadDeMedidaMPID(const Value: TObjectID);
begin
  if (FUnidadDeMedidaMPID <> Value) and Assigned(FUnidadDeMedidaMP) then
    FreeAndNil(FUnidadDeMedidaMP );
  FUnidadDeMedidaMPID := Value;
end;

procedure THojaDeRutaPasoDeFabricacion.SetUsuarioDeEgresoID(const Value: TObjectID);
begin
  if (Value<>FUsuarioDeEgresoID) and Assigned(FUsuarioDeEgreso) then
    FreeAndNil(FUsuarioDeEgreso);
  FUsuarioDeEgresoID := Value;
end;

function THojaDeRutaPasoDeFabricacion.SortBy: String;
begin
  SortBy := Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(Secuencia),'0',3);
end;

procedure THojaDeRutaPasoDeFabricacion.Delete;
begin
  DeleteContabiliodadDeCostos;
  inherited;
end;

procedure THojaDeRutaPasoDeFabricacion.DeleteContabiliodadDeCostos;
begin
  if  Assigned( ContabilidadDeCosto ) and ( ContabilidadDeCosto.Count > 0 ) then
    begin
      ContabilidadDeCosto.First;
      repeat
        ContabilidadDeCosto.Actual.Delete;
        ContabilidadDeCosto.Next;
      until ContabilidadDeCosto.IsLast;
    end;
end;

function THojaDeRutaPasoDeFabricacion.GetCantidadPendiente: TReal;
begin
  FCantidadPendiente := CantidadIngresada - CantidadEgresada;
  Result := FCantidadPendiente
end;

function THojaDeRutaPasoDeFabricacion.GetConsumoMPDescripcion: TString;
begin
  if (UnidadDeMedidaMPID <> NullID)  then
    Result := FloatToStrF(ConsumoMP + ConsumoMPRechazado + ConsumoMPSemiEgresado,ffNumber, 10, 3) + ' ' + UnidadDeMedidaMP.Codigo
end;

function THojaDeRutaPasoDeFabricacion.GetContabilidadDeCosto: THRPFContabilidadDeCostoList;
begin
  if not assigned(FContabilidadDeCosto) then
    GetList(TPDList(FContabilidadDeCosto), TPDList(THRPFContabilidadDeCostoList.CreateByHojaDeRutaPasoDeFabricacion(Self)));
  Result := FContabilidadDeCosto;
end;

function THojaDeRutaPasoDeFabricacion.GetHojaDeRuta: THojaDeRuta;
begin
  if not assigned(FHojaDeRuta) then
    GetObject(THojaDeRuta, FHojaDeRuta, HojaDeRutaID);
  Result := THojaDeRuta(FHojaDeRuta);
end;

function THojaDeRutaPasoDeFabricacion.GetMateriaPrima: TMateriaPrima;
begin
  if not Assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

function THojaDeRutaPasoDeFabricacion.GetMotivoDeAtraso: TMotivoDeAtraso;
begin
  if not Assigned(FMotivoDeAtraso) then
    GetObject(TMotivoDeAtraso, FMotivoDeAtraso, MotivoDeAtrasoID);
  Result := TMotivoDeAtraso(FMotivoDeAtraso);
end;

function THojaDeRutaPasoDeFabricacion.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, PasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function THojaDeRutaPasoDeFabricacion.GetRecurso: TRecurso;
begin
  if not Assigned(FRecurso) then
    GetObject(TRecurso, FRecurso, RecursoID);
  Result := TRecurso(FRecurso);
end;

function THojaDeRutaPasoDeFabricacion.GetUnidadDeMedidaMP: TUnidadDeMedida;
begin
  if not Assigned( FUnidadDeMedidaMP ) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaMP, UnidadDeMedidaMPID);
  Result := TUnidadDeMedida(FUnidadDeMedidaMP);
end;

function THojaDeRutaPasoDeFabricacion.GetUsuarioDeEgreso: TUsuario;
begin
  if not Assigned(FUsuarioDeEgreso) then
    GetObject(TUsuario, FUsuarioDeEgreso, UsuarioDeEgresoID);
  Result := TUsuario(FUsuarioDeEgreso);
end;

function THojaDeRutaPasoDeFabricacion.Save: Boolean;
var
  TopeMaximo, TopeMinimo : TReal;
begin
  if TmpEsEgreso then
    begin
      if (not EsUltimoPaso) and (CantidadEgresada = 0) then
        Aplicacion.RaiseExceptionCreate('Está intentando egresar la hoja de ruta sin indicar una cantidad que de por cumplida la misma en el sector.');

      TopeMaximo := HojaDeRuta.CantidadAFabricar + Aplicacion.MathService.Porcentaje( HojaDeRuta.CantidadAFabricar, Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta  );
      TopeMinimo := HojaDeRuta.CantidadAFabricar - Aplicacion.MathService.Porcentaje(HojaDeRuta.CantidadAFabricar, Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta );
      if (CantidadEgresada  > TopeMaximo) then
        Aplicacion.RaiseExceptionCreate('Se está informando una cantidad Mayor al ' + FloatToStr( Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta)  +'% del Pedido. Haga un ' + QuotedStr('NO CONFORME'))
      else if ( CantidadEgresada  < TopeMinimo) then
        Aplicacion.RaiseExceptionCreate('Se está informando una cantidad Menor al ' + FloatToStr( Aplicacion.ParametrosDelSistema.PorcentajeExtraEnHojasDeRuta)  +'% del Pedido, solicite un ' + QuotedStr('PARCIAL'))
      else if PasoDeFabricacion.ConsumeMP and (ConsumoMP = 0) and ( CantidadUsadaDeStock <> CantidadEgresada ) then
        Aplicacion.RaiseExceptionCreate('Debe informar el consumo de Materia Prima.');

      AjustarStock;
      TmpEsEgreso  := False;
    end;

  Result := inherited Save;
end;

procedure THojaDeRutaPasoDeFabricacion.SetFechaDeEgreso(const Value: TFechaHora);
begin
  if (Value = 0) or (Value = Null) then
    FFechaDeEgreso := Null
  else
    begin
      FFechaDeEgreso := Value;
      FUsuarioDeEgresoID := Aplicacion.Usuario.ID;
      if (PasoDeFabricacion.codigo = Aplicacion.ConstantAllocator.CodigoPasoDeFabricacionEmpaque) and not TmpEsNoConformeOParcial then
      begin
        HojaDeRuta.PedidoDeVentaItem.EsCambioDeEstado := True;
        HojaDeRuta.PedidoDeVentaItem.FechaDeEmpaque   := Value;
        HojaDeRuta.PedidoDeVentaItem.Save;
      end;
    end;
end;

procedure THojaDeRutaPasoDeFabricacion.SetFechaDeIngreso(const Value: TFechaHora);
begin
  if (Value = 0) then
    FFechaDeIngreso := Null
  else
    FFechaDeIngreso := Value;
end;

procedure THojaDeRutaPasoDeFabricacion.SetHojaDeRutaID(Value : TObjectID);
begin
  if (Value<>FHojaDeRutaID) and Assigned(FHojaDeRuta) then
    FreeAndNil(FHojaDeRuta);
  FHojaDeRutaID := Value;
end;
 procedure THojaDeRutaPasoDeFabricacion.SetMateriaPrimaID(const Value: TObjectID);
begin
  if (Value<>FMateriaPrimaID) and Assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure THojaDeRutaPasoDeFabricacion.SetMotivoDeAtrasoID(const Value: TObjectID);
begin
  if (Value<>FMotivoDeAtrasoID) and Assigned(FMotivoDeAtraso) then
    FreeAndNil(FMotivoDeAtraso);
  FMotivoDeAtrasoID := Value;
end;

{ THojaDeRutaPasosDeFabricacionDM }
class function THojaDeRutaPasoDeFabricacionDM.TableName : string;
begin
  Result := 'HojaDeRutaPasosDeFabricacion';
end;

class function THojaDeRutaPasoDeFabricacionDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  var
    camposTablaHojasDeRutaPasos     : String;
    camposTablaHojasDeRuta          : String;
  begin
    CamposTablaHojasDeRutaPasos    := TableName + '.*';
    CamposTablaHojasDeRuta         := THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._CantidadPedida + ' + ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._CantidadExtra + ' as ' + _CantidadAFabricar;
    Result :=          camposTablaHojasDeRutaPasos + ', ';
    Result := Result + camposTablaHojasDeRuta;
  end;
  Function LeftJoinString : String;
  var
    IDNameTablaHojasDeRuta          : String;
    ID1NameTablaHojasDeRutaPasos    : string;
  begin
    ID1NameTablaHojasDeRutaPasos  := TableName   + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID;
    IDNameTablaHojasDeRuta        := THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName;
    Result := ' Left Join ' + THojaDeRutaDM.TableName + ' on (' + ID1NameTablaHojasDeRutaPasos  + '=' + IDNameTablaHojasDeRuta + ') ';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function THojaDeRutaPasoDeFabricacionDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaPasoDeFabricacionID';
end;


procedure THojaDeRutaPasoDeFabricacionDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaPasoDeFabricacion(PDObject) do
  begin
    FloatField[_CantidadIngresada] := FCantidadIngresada;
    FloatField[_CantidadEgresada]  := FCantidadEgresada;
    FloatField[_CantidadRechazada] := FCantidadRechazada;
    FloatField[_CantidadParaStock] := FCantidadParaStock;
    FloatField[_CantidadUsadaDeStock] := FCantidadUsadaDeStock;
    DateTimeField[_FechaDeEgreso]  := FFechaDeEgreso;
    DateTimeField[_FechaDeIngreso] := FFechaDeIngreso;
    DateField[_FechaDeFinDePaso]   := FFechaDeFinDePaso;
    IntegerField[_Secuencia]       := FSecuencia;
    IDField[_PasoDeFabricacionID]  := FPasoDeFabricacionID;
    IDField[_RecursoID          ]  := FRecursoID;
    IDField[_HojaDeRutaID]         := FHojaDeRutaID;
    BooleanField[_EsUltimoPaso]    := FEsUltimoPaso;
    StringField[_Observacion]      := FObservacion;
    IDField[_UsuarioDeEgresoID]    := FUsuarioDeEgresoID;
    IDField[_MotivoDeAtrasoID]     := FMotivoDeAtrasoID;
    StringField[_ComentarioDeAtraso]:= FComentarioDeAtraso;
    FloatField[_ConsumoMP]         := FConsumoMP;
    FloatField[_ConsumoMPStockSemi]:= FConsumoMPStockSemi;
    FloatField[_ConsumoMPRechazado]:= FConsumoMPRechazado;
    FloatField[_ConsumoMPSemiEgresado]  := FConsumoMPSemiEgresado;
    FloatField[_ConsumoTeoricoMP]  := FConsumoTeoricoMP;
    IDField[_MateriaPrimaID]       := FMateriaPrimaID;
    IDField[_UnidadDeMedidaMPID]   := FUnidadDeMedidaMPID;
  end;
end;


procedure THojaDeRutaPasoDeFabricacionDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRutaPasoDeFabricacion(PDObject) do
  begin
    FCantidadIngresada   := FloatField[_CantidadIngresada];
    FCantidadEgresada    := FloatField[_CantidadEgresada];
    FCantidadRechazada   := FloatField[_CantidadRechazada];
    FCantidadParaStock   := FloatField[_CantidadParaStock];
    FCantidadUsadaDeStock:= FloatField[_CantidadUsadaDeStock];
    FFechaDeEgreso       := DateTimeField[_FechaDeEgreso];
    FFechaDeIngreso      := DateTimeField[_FechaDeIngreso];
    FFechaDeFinDePaso    := DateField[_FechaDeFinDePaso];
    Secuencia            := IntegerField[_Secuencia];      //lamar a secuencia y para que haga el seter
    FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
    FRecursoID           := IDField[_RecursoID];
    FHojaDeRutaID        := IDField[_HojaDeRutaID];
    FEsUltimoPaso        := BooleanField[_EsUltimoPaso];
    FObservacion         := StringField[_Observacion];
    FUsuarioDeEgresoID   := IDField[_UsuarioDeEgresoID];
    FMotivoDeAtrasoID    := IDField[_MotivoDeAtrasoID];
    FComentarioDeAtraso  := StringField[_ComentarioDeAtraso];
    FconsumoMP           := FloatField[_ConsumoMP];
    FConsumoMPStockSemi  := FloatField[_ConsumoMPStockSemi];
    FConsumoMPRechazado  := FloatField[_ConsumoMPRechazado];
    FConsumoMPSemiEgresado := FloatField[_ConsumoMPSemiEgresado];
    FMateriaPrimaID      := IDField[_MateriaPrimaID];
    FUnidadDeMedidaMPID  := IDField[_UnidadDeMedidaMPID];
    FConsumoTeoricoMP    := IDField[_ConsumoTeoricoMP];
    // del create compuesto
    FCCCantidadAFabricar := FloatField[_CantidadAFabricar];
  end;
end;

//function THojaDeRutaPasoDeFabricacionDM.sqlLoadObject(OBjectToLoad: TPDObject): string;
//begin
//  Result := THojaDeRutaPasoDeFabricacionDM.CreateCompuesto + ' WHERE ' +  THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM.ID_FieldName + '=' + IntToStr(OBjectToLoad.ID);
//end;

{ THojaDeRutaPasosDeFabricacionList }
function THojaDeRutaPasoDeFabricacionList.GetActual : THojaDeRutaPasoDeFabricacion;
begin
  Result := THojaDeRutaPasoDeFabricacion(CurrentObject);
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByAtrasadas(_FechaHasta: TFecha);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeFinDePaso + ' < ' + QuotedStr(DateToStr(_FechaHasta)) + ' and not ' +
    THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeIngreso + ' is null and ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' +THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is null and ' +
    THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' in ( select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName + ' from ' + THojaDeRutaDM.TableName +
    ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._EstadoDeHojaDeRutaID + ' in ( Select ' + TEstadoDeHojaDeRutaDM.ID_FieldName + ' from ' + TEstadoDeHojaDeRutaDM.TableName + ' where ' + TEstadoDeHojaDeRutaDM._EsEstadoEnFabricacion + '=1))';
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID;
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll( False, WhereString, False, OrderBy ));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByHojaDeRuta(_HR: THojaDeRuta);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' = ' + IntToStr(_HR.ID);
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll(False, WhereString, False, THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._Secuencia ));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByHojaDeRutaAndPasoDeFabricacion(_HR: THojaDeRuta; _PF: TPasoDeFabricacion);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' = ' + IntToStr(_HR.ID) +
              ' and '   + THojaDeRutaPasoDeFabricacionDM.TableName + '.' +THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' = ' + IntToStr(_PF.ID);
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByPasoDeFabricacion(_Paso: TPasoDeFabricacion);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in(' +
    'Select ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' From ' + TPasoDeFabricacionDM.TableName + ' where ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._Codigo + ' = ' + QuotedStr(_Paso.codigo) + ')'
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByPasoDeFabricacionAndFechaDesdeFechaHasta(_PasoCodigo: String; _FechaDesde, _FechaHasta: TFecha);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in(' +
    'Select ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' From ' + TPasoDeFabricacionDM.TableName + ' where '
    + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._Codigo + ' = ' + QuotedStr(_PasoCodigo)+ ') and ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is not null and '
    + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeFinDePaso + ' between ' + QuotedStr(DateToStr(_FechaDesde) + _PrimerHora) + ' And ' + QuotedStr(DateToStr(_FechaHasta) + _UltimaHora);
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeFinDePaso;
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByPasoDeFabricacionAndRecursoAndFechaDesdeFechaHasta(_PasoCodigo, _RecursoCodigo: String; _FechaDesde, _FechaHasta: TFecha);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._PasoDeFabricacionID + ' in(' +
    'Select ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' From ' + TPasoDeFabricacionDM.TableName + ' where ' +
    TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._Codigo + ' = ' + QuotedStr(_PasoCodigo)+ ') and ' +
    THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._RecursoID + ' in(' +
    'Select ' + TRecursoDM.TableName + '.' + TRecursoDM.ID_FieldName + ' From ' + TRecursoDM.TableName + ' where ' +
    TRecursoDM.TableName + '.' + TRecursoDM._Codigo + ' = ' + QuotedStr(_RecursoCodigo)+ ') and ' +
    THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeEgreso + ' is not null and ' + THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeFinDePaso + ' between ' + QuotedStr(DateToStr(_FechaDesde)+ _PrimerHora) + ' And ' + QuotedStr(DateToStr(_FechaHasta)+ _UltimaHora);
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._FechaDeFinDePaso;
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateByUltimoPaso(_HR: THojaDeRuta);
  function WhereString: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' + THojaDeRutaPasoDeFabricacionDM._HojaDeRutaID + ' = ' + IntToStr(_HR.ID);
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaPasoDeFabricacionDM.TableName + '.' +THojaDeRutaPasoDeFabricacionDM._Secuencia + ' Desc';
  end;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateTop(1, WhereString, OrderBy));
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateEmpty;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateEmpty);
end;

function THojaDeRutaPasoDeFabricacionList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaPasoDeFabricacion.Create;
end;


function THojaDeRutaPasoDeFabricacionList.FindPasoDeFabricacion(_PF: TPasoDeFabricacion): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := THojaDeRutaPasoDeFabricacion(CurrentObject).PasoDeFabricacionID = _PF.ID;
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function THojaDeRutaPasoDeFabricacionList.FindPasoDeCalidad: Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := THojaDeRutaPasoDeFabricacion(CurrentObject).PasoDeFabricacion.EsPasoDeCalidad;
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function THojaDeRutaPasoDeFabricacionList.FindPasoDeFabricacion(_C: String): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := AnsiLowerCase(THojaDeRutaPasoDeFabricacion(CurrentObject).PasoDeFabricacion.Codigo) = AnsiLowerCase(_C);
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

function THojaDeRutaPasoDeFabricacionList.FindPasoDeFabricacionActual: String;
begin
  Result := '';
  if (Count = 0) then
    Exit;

  First;
  while (Result = '') and (not IsLast) do
  begin
    if ( THojaDeRutaPasoDeFabricacion(CurrentObject).FechaDeEgreso = Null ) then
      Result := THojaDeRutaPasoDeFabricacion(CurrentObject).PasoDeFabricacion.codigo;
    if (Result = '') then
      Next;
  end;

  if IsLast then
    First;
end;

function THojaDeRutaPasoDeFabricacionList.FindPasoDeFabricacionActualFecha: TFecha;
begin
  Result := Null;
  if (Count = 0) then
    Exit;

  First;
  while (Result = Null) and (not IsLast) do
  begin
    if ( THojaDeRutaPasoDeFabricacion(CurrentObject).FechaDeEgreso = Null ) then
      Result := THojaDeRutaPasoDeFabricacion(CurrentObject).FechaDeFinDePaso;
    if (Result = Null) then
      Next;
  end;

  if IsLast then
    First;
end;

function THojaDeRutaPasoDeFabricacionList.FindSecuenciaDeFabricacion(_Sec: TEntero): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (THojaDeRutaPasoDeFabricacion(CurrentObject).Secuencia = _Sec);
    if not Result then
      Next;
  end;
  if IsLast then
    First;
end;

constructor THojaDeRutaPasoDeFabricacionList.CreateAll;
begin
  inherited Create(THojaDeRutaPasoDeFabricacion,THojaDeRutaPasoDeFabricacionDM.CreateAll( False ) );
end;

 { THojaDeRutaStateLog }
constructor THojaDeRutaStateLog.Create;
begin
  inherited;
  DMObject       := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaStateLogDM);
  SaveSQLLog     := False;
  FObservaciones := Null;
  FFechaHora     := Null;
end;

procedure THojaDeRutaStateLog.SetHojaDeRutaID(Value : TObjectID);
begin
  if (Value<>FHojaDeRutaID) and Assigned(FHojaDeRuta) then
    FreeAndNil(FHojaDeRuta);
  FHojaDeRutaID := Value;
end;

procedure THojaDeRutaStateLog.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;

destructor THojaDeRutaStateLog.Destroy;
begin
  FreeObjectFromMemory;
  inherited;
end;

Procedure THojaDeRutaStateLog.FreeObjectFromMemory;
begin
  if Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  if Assigned(FEstadoDeHojaDeRuta) then
    FreeAndNil(FEstadoDeHojaDeRuta);
end;

function THojaDeRutaStateLog.getEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
begin
  if not assigned(FEstadoDeHojaDeRuta) then
    GetObject(TEstadoDeHojaDeRuta, FEstadoDeHojaDeRuta, EstadoDeHojaDeRutaID);
  Result := TEstadoDeHojaDeRuta(FEstadoDeHojaDeRuta);
end;

function THojaDeRutaStateLog.GetHojaDeRuta: THojaDeRuta;
begin
  if not assigned(FHojaDeRuta) then
    GetObject(THojaDeRuta, FHojaDeRuta, HojaDeRutaID);
  Result := THojaDeRuta(FHojaDeRuta);
end;

function THojaDeRutaStateLog.getUsuario: TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);
  Result := TUsuario(FUsuario);
end;

procedure THojaDeRutaStateLog.SetEstadoDeHojaDeRutaID(Value : TObjectID);
begin
  if (Value<>FEstadoDeHojaDeRutaID) and Assigned(FEstadoDeHojaDeRuta) then
    FreeAndNil(FEstadoDeHojaDeRuta);
  FEstadoDeHojaDeRutaID := Value;
end;
 { THojaDeRutaStateLogDM }
class function THojaDeRutaStateLogDM.TableName : string;
begin
  Result := 'HojaDeRutaStateLogs';
end;

class function THojaDeRutaStateLogDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaStateLogID';
end;


procedure THojaDeRutaStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaStateLog(PDObject) do
    begin
      StringField[_Observaciones]     := Observaciones;
      IDField[_HojaDeRutaID]          := FHojaDeRutaID;
      DateTimeField[_FechaHora]       := FFechaHora;
      IDField[_UsuarioID]             := FUsuarioID;
      StringField[_IPAddress]         := FIPAddress;
      IDField[_EstadoDeHojaDeRutaID]  := FEstadoDeHojaDeRutaID;
    end;
end;


procedure THojaDeRutaStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRutaStateLog(PDObject) do
    begin
      FObservaciones        := StringField[_Observaciones];
      FHojaDeRutaID         := IDField[_HojaDeRutaID];
      FFechaHora            := DateTimeField[_FechaHora];
      FUsuarioID            := IDField[_UsuarioID];
      FIPAddress            := StringField[_IPAddress];
      FEstadoDeHojaDeRutaID := IDField[_EstadoDeHojaDeRutaID];
    end;
end;

 { THojaDeRutaStateLogList }
function THojaDeRutaStateLogList.GetActual : THojaDeRutaStateLog;
begin
  Result := THojaDeRutaStateLog(CurrentObject);
end;

constructor THojaDeRutaStateLogList.CreateByHojaDeRuta(_HR: THojaDeRuta);
  function WhereString: String;
  begin
    Result := THojaDeRutaStateLogDM._HojaDeRutaID + '=' + IntToStr(_HR.ID);
  end;
  function OrderByString: String;
  begin
    Result := THojaDeRutaStateLogDM._FechaHora;
  end;
begin
  inherited Create(THojaDeRutaStateLog, THojaDeRutaStateLogDM.CreateAll(False, WhereString, False, OrderByString));
end;

constructor THojaDeRutaStateLogList.CreateEmpty;
begin
  inherited Create(THojaDeRutaStateLog,THojaDeRutaStateLogDM.CreateEmpty);
end;

function THojaDeRutaStateLogList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaStateLog.Create;
end;

function THojaDeRutaStateLogList.FindEstadoCanceladoOCumplido: Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.EstadoDeHojaDeRuta.EsEstadoCancelado or Self.Actual.EstadoDeHojaDeRuta.EsEstadoCumplido );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor THojaDeRutaStateLogList.CreateAll;
begin
  inherited Create(THojaDeRutaStateLog,THojaDeRutaStateLogDM.CreateAll(False));
end;

 { THojaDeRutaRuteoDefault }
destructor THojaDeRutaRuteoDefault.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

Procedure THojaDeRutaRuteoDefault.FreeObjectsFromMemory;
begin
  if Assigned(FPasosDeFabricacion) then
    FreeAndNil(FPasosDeFabricacion);
  if Assigned(FCategoriaDeMateriaPrima) then
    FreeAndNil(FCategoriaDeMateriaPrima);
end;

function THojaDeRutaRuteoDefault.getCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
begin
  if not assigned(FCategoriaDeMateriaPrima) then
    GetObject(TCategoriaDeMateriaPrima, FCategoriaDeMateriaPrima, CategoriaDeMateriaPrimaID);
  Result := TCategoriaDeMateriaPrima(FCategoriaDeMateriaPrima);
end;

function THojaDeRutaRuteoDefault.GetDescriptibleAbreviadoListClass;
begin
  Result := THojaDeRutaRuteoDefaultList;
end;

function THojaDeRutaRuteoDefault.GetFamiliasDeArticulo: THojaDeRutaRuteoDefaultFamiliaList;
begin
  if not Assigned(FFamiliasDeArticulo) then
    GetList(TPDList(FFamiliasDeArticulo),TPDList(THojaDeRutaRuteoDefaultFamiliaList.CreateByRuteoDefault(Self)));
  Result := FFamiliasDeArticulo;
end;

function THojaDeRutaRuteoDefault.GetPasosDeFabricacion: THojaDeRutaRuteoDefaultPasoList;
begin
  if not assigned(FPasosDeFabricacion) then
    GetList(TPDList(FPasosDeFabricacion),TPDList(THojaDeRutaRuteoDefaultPasoList.CreateByRuteoDefault(Self)));
  Result := FPasosDeFabricacion;
end;

function THojaDeRutaRuteoDefault.UltimoSecuenciaRuteo: Integer;
begin
  if PasosDeFabricacion.Count = 0 then
    Result := 0
  else
    begin
      PasosDeFabricacion.First;
      while not PasosDeFabricacion.IsLast do
        begin
          Result := PasosDeFabricacion.Actual.Secuencia;
          PasosDeFabricacion.Next;
        end;
    end;
end;

constructor THojaDeRutaRuteoDefault.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaRuteoDefaultDM);
end;

 { THojaDeRutaRuteoDefaultDM }
class function THojaDeRutaRuteoDefaultDM.TableName : string;
begin
  Result := 'HojaDeRutaRuteosDefault';
end;

class function THojaDeRutaRuteoDefaultDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo
end;

class function THojaDeRutaRuteoDefaultDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaRuteoDefaultID';
end;

procedure THojaDeRutaRuteoDefaultDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaRuteoDefault(PDObject) do
    begin
      BooleanField[_EsInactivo]           := EsInactivo;
      StringField[_Descripcion]           := Descripcion;
      StringField[_Codigo]                := Codigo;
      IDField[_CategoriaDeMateriaPrimaID] := FCategoriaDeMateriaPrimaID;
    end;
end;

procedure THojaDeRutaRuteoDefaultDM.PopulateObject(PDObject: TPDObject);
begin
 with THojaDeRutaRuteoDefault(PDObject) do
    begin
      EsInactivo                := BooleanField[_EsInactivo];
      Descripcion               := StringField[_Descripcion];
      Codigo                    := StringField[_Codigo];
      CategoriaDeMateriaPrimaID := IDField[_CategoriaDeMateriaPrimaID];
    end;
end;

 { THojaDeRutaRuteoDefaultList }
function THojaDeRutaRuteoDefaultList.GetActual : THojaDeRutaRuteoDefault;
begin
  Result := THojaDeRutaRuteoDefault(CurrentObject);
end;

function THojaDeRutaRuteoDefaultList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaRuteoDefault.Create;
end;

constructor THojaDeRutaRuteoDefaultList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(THojaDeRutaRuteoDefault,THojaDeRutaRuteoDefaultDM.CreateAll(False, '', _SoloActivos));
end;

constructor THojaDeRutaRuteoDefaultList.CreateByCategoriaDeMateriaPrima(_Categoria: TCategoriaDeMateriaPrima; _IncluyeNulls: Boolean; _SoloActivos: Boolean);
  Function  WhereString : String;
  begin
    Result := THojaDeRutaRuteoDefaultDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr(_Categoria.ID);
    if _IncluyeNulls then
      Result := Result  + ' or ' + THojaDeRutaRuteoDefaultDM._CategoriaDeMateriaPrimaID + ' is null';
  end;
begin
  inherited Create(THojaDeRutaRuteoDefault,THojaDeRutaRuteoDefaultDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor THojaDeRutaRuteoDefaultList.CreateByCategoriaDeMateriaPrimaAndFamilia(_Categoria: TCategoriaDeMateriaPrima; _Familia: TFamiliaDeArticulo; _SoloActivos: Boolean);
  Function  WhereString : String;
  begin
    Result := THojaDeRutaRuteoDefaultDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr(_Categoria.ID)+' or ' + THojaDeRutaRuteoDefaultDM._CategoriaDeMateriaPrimaID + ' is Null ' +
    ' And ' + THojaDeRutaRuteoDefaultDM.ID_FieldName + ' in (Select ' + THojaDeRutaRuteoDefaultFamiliaDM._HojaDeRutaRuteoDeFaultID + ' From ' + THojaDeRutaRuteoDefaultFamiliaDM.TableName + ' Where ' + THojaDeRutaRuteoDefaultFamiliaDM._FamiliaDeArticuloID +  ' = ' + IntToStr(_Familia.ID) +  ')'
  end;
begin
  inherited Create(THojaDeRutaRuteoDefault,THojaDeRutaRuteoDefaultDM.CreateAll( False, WhereString, _SoloActivos ));
end;

 { THojaDeRutaRuteoDefaultPaso }
constructor THojaDeRutaRuteoDefaultPaso.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaRuteoDefaultPasoDM);
  FPasoID    := NullID;
end;

destructor THojaDeRutaRuteoDefaultPaso.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

Procedure THojaDeRutaRuteoDefaultPaso.FreeObjectsFromMemory;
begin
  if Assigned(FPaso) then
    FreeAndNil(FPaso);
end;

function THojaDeRutaRuteoDefaultPaso.getHojaDeRutaRuteoDefault: THojaDeRutaRuteoDefault;
begin
  if not assigned(FHojaDeRutaRuteoDefault) then
    GetObject(THojaDeRutaRuteoDefault, FHojaDeRutaRuteoDefault, HojaDeRutaRuteoDefaultID);
  Result := THojaDeRutaRuteoDefault(FHojaDeRutaRuteoDefault);
end;

function THojaDeRutaRuteoDefaultPaso.getPaso: TPasoDeFabricacion;
begin
  if not assigned(FPaso) then
    GetObject(TPasoDeFabricacion, FPaso, PasoID);
  Result := TPasoDeFabricacion(FPaso);
end;

procedure THojaDeRutaRuteoDefaultPaso.SetHojaDeRutaRuteoDefaultID(const Value: TObjectID);
begin
  if (Value<>FHojaDeRutaRuteoDefaultID) and Assigned(FHojaDeRutaRuteoDefault) then
    FreeAndNil(FHojaDeRutaRuteoDefault);
  FHojaDeRutaRuteoDefaultID := Value;
end;

procedure THojaDeRutaRuteoDefaultPaso.SetPasoID(const Value: TObjectID);
begin
  FPasoID := Value;
end;

{ THojaDeRutaRuteoDefaultPasoDM }
class function THojaDeRutaRuteoDefaultPasoDM.TableName : string;
begin
  Result := 'HojaDeRutaRuteoDefaultPasos';
end;


class function THojaDeRutaRuteoDefaultPasoDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaRuteoDefaultPasoID';
end;


procedure THojaDeRutaRuteoDefaultPasoDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaRuteoDefaultPaso(PDObject) do
    begin
      IDField[_HojaDeRutaRuteoDefaultID] := FHojaDeRutaRuteoDefaultID;
      IDField[_PasoID]                   := FPasoID;
      IntegerField[_Secuencia]           := FSecuencia;
    end;
end;


procedure THojaDeRutaRuteoDefaultPasoDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRutaRuteoDefaultPaso(PDObject) do
    begin
      FHojaDeRutaRuteoDefaultID := IDField[_HojaDeRutaRuteoDefaultID];
      FSecuencia                := IntegerField[_Secuencia];
      FPasoID                   := IntegerField[_PasoID];
    end;
end;

 { THojaDeRutaRuteoDefaultPasoList }
function THojaDeRutaRuteoDefaultPasoList.GetActual : THojaDeRutaRuteoDefaultPaso;
begin
  Result := THojaDeRutaRuteoDefaultPaso(CurrentObject);
end;

constructor THojaDeRutaRuteoDefaultPasoList.CreateByRuteoDefault(_HRRD: THojaDeRutaRuteoDefault);
  function WhereString: String;
  begin
    Result := THojaDeRutaRuteoDefaultPasoDM._HojaDeRutaRuteoDefaultID + ' = ' + IntToStr(_HRRD.ID);
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaRuteoDefaultPasoDM.TableName + '.' + THojaDeRutaRuteoDefaultPasoDM._Secuencia;
  end;
begin
  inherited Create(THojaDeRutaRuteoDefaultPaso,THojaDeRutaRuteoDefaultPasoDM.CreateAll(False, WhereString, False, OrderBy));
end;

function THojaDeRutaRuteoDefaultPasoList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaRuteoDefaultPaso.Create;
end;

function THojaDeRutaRuteoDefaultPasoList.FindPasoID(_PasoID: TObjectID): boolean;
begin
  Result := false;
  if (Count=0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
    begin
      Result := (  Actual.FPasoID  =  _PasoID );
      if not Result then
        next;
    end;
  if isLast then
    first;
end;

constructor THojaDeRutaRuteoDefaultPasoList.CreateAll;
begin
  inherited Create(THojaDeRutaRuteoDefaultPaso,THojaDeRutaRuteoDefaultPasoDM.CreateAll(False));
end;

 { THojaDeRutaRuteoDefaultFamilia }
constructor THojaDeRutaRuteoDefaultFamilia.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaRuteoDefaultFamiliaDM);
end;

destructor THojaDeRutaRuteoDefaultFamilia.Destroy;
begin
  FreeObjectFromMemory;
  inherited;
end;

procedure THojaDeRutaRuteoDefaultFamilia.FreeObjectFromMemory;
begin
  if Assigned(FFamiliaDeArticulo) then
    FreeAndNil(FFamiliaDeArticulo);
end;

function THojaDeRutaRuteoDefaultFamilia.GetFamiliaDeArticulo: TFamiliaDeArticulo;
begin
  if not assigned(FFamiliaDeArticulo) then
    GetObject(TFamiliaDeArticulo, FFamiliaDeArticulo, FamiliaDeArticuloID);
  Result := TFamiliaDeArticulo(FFamiliaDeArticulo);
end;

function THojaDeRutaRuteoDefaultFamilia.GetHojaDeRutaRuteoDeFault: THojaDeRutaRuteoDeFault;
begin
  if not assigned(FHojaDeRutaRuteoDeFault) then
    GetObject(THojaDeRutaRuteoDeFault, FHojaDeRutaRuteoDeFault, FHojaDeRutaRuteoDeFaultID);
  Result := THojaDeRutaRuteoDeFault(FHojaDeRutaRuteoDeFault);
end;

procedure THojaDeRutaRuteoDefaultFamilia.SetFamiliaDeArticuloID(Value : TObjectID);
begin
  if (Value<>FFamiliaDeArticuloID) and Assigned(FFamiliaDeArticulo) then
    FreeAndNil(FFamiliaDeArticulo);
  FFamiliaDeArticuloID := Value;
end;

procedure THojaDeRutaRuteoDefaultFamilia.SetHojaDeRutaRuteoDeFaultID(Value : TObjectID);
begin
  if (Value<>FHojaDeRutaRuteoDeFaultID) and Assigned(FHojaDeRutaRuteoDeFault) then
    FreeAndNil(FHojaDeRutaRuteoDeFault);

  FHojaDeRutaRuteoDeFaultID := Value;

end;
 { THojaDeRutaRuteoDefaultFamiliaDM }
class function THojaDeRutaRuteoDefaultFamiliaDM.TableName : string;
begin
  Result := 'HojaDeRutaRuteoDefaultFamilias';
end;

class function THojaDeRutaRuteoDefaultFamiliaDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaRuteoDefaultFamiliaID';
end;

procedure THojaDeRutaRuteoDefaultFamiliaDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaRuteoDefaultFamilia(PDObject) do
    begin
      IDField[_FamiliaDeArticuloID] := FFamiliaDeArticuloID;
      IDField[_HojaDeRutaRuteoDeFaultID] := FHojaDeRutaRuteoDeFaultID;
    end;
end;

procedure THojaDeRutaRuteoDefaultFamiliaDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRutaRuteoDefaultFamilia(PDObject) do
    begin
      FFamiliaDeArticuloID := IDField[_FamiliaDeArticuloID];
      FHojaDeRutaRuteoDeFaultID := IDField[_HojaDeRutaRuteoDeFaultID];
    end;
end;

 { THojaDeRutaRuteoDefaultFamiliaList }
function THojaDeRutaRuteoDefaultFamiliaList.GetActual : THojaDeRutaRuteoDefaultFamilia;
begin
  Result := THojaDeRutaRuteoDefaultFamilia(CurrentObject);
end;

constructor THojaDeRutaRuteoDefaultFamiliaList.CreateByRuteoDefault(_HRRD: THojaDeRutaRuteoDefault);
  function WhereString: String;
  begin
    Result := THojaDeRutaRuteoDefaultFamiliaDM._HojaDeRutaRuteoDeFaultID + ' = ' + IntToStr(_HRRD.ID);
  end;
begin
  inherited Create(THojaDeRutaRuteoDefaultFamilia,THojaDeRutaRuteoDefaultFamiliaDM.CreateALl(False, WhereString));
end;

function THojaDeRutaRuteoDefaultFamiliaList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaRuteoDefaultFamilia.Create;
end;

constructor THojaDeRutaRuteoDefaultFamiliaList.CreateAll;
begin
  inherited Create(THojaDeRutaRuteoDefaultFamilia,THojaDeRutaRuteoDefaultFamiliaDM.CreateAll(False));
end;

 { TUsuarioPasoDeFabricacion }
constructor TUsuarioPasoDeFabricacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TUsuarioPasoDeFabricacionDM);
end;

function TUsuarioPasoDeFabricacion.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion,FPasoDeFabricacion,PasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function TUsuarioPasoDeFabricacion.GetUsuario: TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,FUsuarioID);
  Result := TUsuario(FUsuario);
end;

procedure TUsuarioPasoDeFabricacion.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;

procedure TUsuarioPasoDeFabricacion.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;
 { TUsuarioPasoDeFabricacionDM }
class function TUsuarioPasoDeFabricacionDM.TableName : string;
begin
  Result := 'UsuarioPasosDeFabricacion';
end;

class function TUsuarioPasoDeFabricacionDM.ID_FieldName : string;
begin
  Result := 'UsuarioPasoDeFabricacionID';
end;

procedure TUsuarioPasoDeFabricacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TUsuarioPasoDeFabricacion(PDObject) do
    begin
      IDField[_PasoDeFabricacionID] := FPasoDeFabricacionID;
      IDField[_UsuarioID]           := FUsuarioID;
    end;
end;

procedure TUsuarioPasoDeFabricacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TUsuarioPasoDeFabricacion(PDObject) do
    begin
      FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
       FUsuarioID          := IDField[_UsuarioID];
    end;
end;

 { TUsuarioPasoDeFabricacionList }
function TUsuarioPasoDeFabricacionList.GetActual : TUsuarioPasoDeFabricacion;
begin
  Result := TUsuarioPasoDeFabricacion(CurrentObject);
end;

constructor TUsuarioPasoDeFabricacionList.CreatebyUsuario(_U: TUsuario);
  function WhereString: String;
  begin
    Result := TUsuarioPasoDeFabricacionDM._UsuarioID + '=' + IntToStr(_U.ID);
  end;
begin
  inherited Create(TUsuarioPasoDeFabricacion,TUsuarioPasoDeFabricacionDM.CreateAll(False, WhereString));
end;

function TUsuarioPasoDeFabricacionList.CreateNewObject: TPDObject;
begin
  Result := TUsuarioPasoDeFabricacion.Create;
end;

function TUsuarioPasoDeFabricacionList.FindPasoDeFabricacionID(_PFID: Integer): Boolean;
begin
  Result := False;
  if (count = 0) then
    Exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := TUsuarioPasoDeFabricacion(CurrentObject).PasoDeFabricacionID = _PFID;
    if not Result then
      Next;
  end;

  if IsLast then
    First;
end;

constructor TUsuarioPasoDeFabricacionList.CreateAll;
begin
  inherited Create(TUsuarioPasoDeFabricacion,TUsuarioPasoDeFabricacionDM.CreateAll(False));
end;

 { TMotivoDeNoConforme }
constructor TMotivoDeNoConforme.Create;
begin
  inherited;
  DMObject    := Aplicacion.DMPRovider.GetGlobalDM(TMotivoDeNoConformeDM);
  EsInactivo  := False;
  FSectorID   := NullID;
  FColor      := 0;
end;

function TMotivoDeNoConforme.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, SectorID);
  Result := TSector(FSector);
end;

 { TMotivoDeNoConformeDM }
class function TMotivoDeNoConformeDM.TableName : string;
begin
  Result := 'MotivosDeNoConforme';
end;

class function TMotivoDeNoConformeDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMotivoDeNoConformeDM.ID_FieldName : string;
begin
  Result := 'MotivoDeNoConformeID';
end;

procedure TMotivoDeNoConformeDM.PopulateFields(PDObject: TPDObject);
begin
  with TMotivoDeNoConforme(PDObject) do
    begin
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
      IDField[_SectorID]        := FSectorID;
      IntegerField[_Color]      := FColor;
    end;
end;

procedure TMotivoDeNoConformeDM.PopulateObject(PDObject: TPDObject);
begin
  with TMotivoDeNoConforme(PDObject) do
    begin
      Descripcion := StringField[_Descripcion];
      EsInactivo := BooleanField[_EsInactivo];
      FSectorID   := IDField[_SectorID];
      FColor      := IntegerField[_Color];
    end;
end;

 { TMotivoDeNoConformeList }
function TMotivoDeNoConformeList.GetActual : TMotivoDeNoConforme;
begin
  Result := TMotivoDeNoConforme(CurrentObject);
end;

function TMotivoDeNoConformeList.CreateNewObject: TPDObject;
begin
  Result := TMotivoDeNoConforme.Create;
end;

constructor TMotivoDeNoConformeList.CreateAll( _SoloActivos: Boolean);
begin
    inherited Create(TMotivoDeNoConforme,TMotivoDeNoConformeDM.CreateAll(False, '', _SoloActivos));
end;


 { THojaDeRutaNoConforme }


procedure THojaDeRutaNoConforme.CleanK1;
begin
  FK1 := 0;
end;

constructor THojaDeRutaNoConforme.Create;
begin
  inherited;
  DMObject                := Aplicacion.DMPRovider.GetGlobalDM(THojaDeRutaNoConformeDM);
  FFechaDeCierre          := Null;
  FFechaDeApertura        := Null;
  FFechaDeCreacion        := Null;
  FObservaciones          := Null;
  FPorcentajeNoConforme   := 0;
  FPorcentajeRechazado    := 0;
  FNumeroDeNoConforme     := 0;
  FCantidad               := 0;
  FK1                     := 0;
  FK1MonedaID             := NullID;
end;

destructor THojaDeRutaNoConforme.Destroy;
begin
  FreeObjectFromMemory;
  inherited;
end;

Procedure THojaDeRutaNoConforme.FreeObjectFromMemory;
begin
  if Assigned(FHojaDeRuta) then
    FreeAndNil(FHojaDeRuta);
  if Assigned(FMotivoDeNoConforme) then
    FreeAndNil(FMotivoDeNoConforme);
  if Assigned(FDisposicion) then
    FreeAndNil(FDisposicion);
  if Assigned(FEstadoDeDeteccionNoConforme) then
    FreeAndNil(FEstadoDeDeteccionNoConforme);
end;

procedure THojaDeRutaNoConforme.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;

procedure THojaDeRutaNoConforme.SetProductoID(const Value: TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

procedure THojaDeRutaNoConforme.SetTipoDeNoConformeID(const Value: TObjectID);
begin
  if (Value <> FTipoDeNoConformeID) and Assigned(FTipoDeNoConforme) then
    FreeAndNil(FTipoDeNoConforme);
  FTipoDeNoConformeID := Value;
end;

procedure THojaDeRutaNoConforme.Validate;
begin
  if (FechaDeApertura= Null) or ( FechaDeApertura=0) then
    begin
      aplicacion.Mensaje('La fecha de apertura no es válida.', 'Validación', MB_OK );
      abort;
    end;
  if (FechaDeCierre= Null) or ( FechaDeCierre=0) then
    begin
      aplicacion.Mensaje('La fecha de cierre no es válida.', 'Validación', MB_OK );
      abort;
    end;
end;

procedure THojaDeRutaNoConforme.ValidateOnInsert;
begin
  inherited;
//  Validate;
end;

procedure THojaDeRutaNoConforme.ValidateOnUpdate;
begin
  inherited;
  Validate;
end;

function THojaDeRutaNoConforme.GetCCHojaDeRutaCantidadAFabricar: TReal;
begin
  if FCCHojaDeRutaCantidadAFabricar = Unassigned then
    FCCHojaDeRutaCantidadAFabricar := HojaDeRuta.CantidadAFabricar;
  Result := FCCHojaDeRutaCantidadAFabricar;
end;

function THojaDeRutaNoConforme.GetCCCunioParteCodigo: TString;
begin
  if FCCCunioParteCodigo = Unassigned then
    FCCCunioParteCodigo := HojaDeRuta.ProductoParte.Fabricado.Cunio.codigo;
  Result := FCCCunioParteCodigo;
end;

function THojaDeRutaNoConforme.GetCCCunioParteDescripcion: TString;
begin
  if FCCCunioParteDescripcion = Unassigned then
    FCCCunioParteDescripcion := HojaDeRuta.ProductoParte.Fabricado.Cunio.Descripcion;
  Result := FCCCunioParteDescripcion;
end;

function THojaDeRutaNoConforme.GetDisposicion: TDisposicionDeNoConforme;
begin
  if not assigned(FDisposicion) then
    GetObject(TDisposicionDeNoConforme, FDisposicion, DisposicionID);
  Result := TDisposicionDeNoConforme(FDisposicion);
end;

function THojaDeRutaNoConforme.GetEstadoDeDeteccionNoConforme: TEstadoDeDeteccionNoConforme;
begin
  if not assigned(FEstadoDeDeteccionNoConforme) then
    GetObject(TEstadoDeDeteccionNoConforme, FEstadoDeDeteccionNoConforme, EstadoDeDeteccionNoConformeID);
  Result := TEstadoDeDeteccionNoConforme(FEstadoDeDeteccionNoConforme);
end;

function THojaDeRutaNoConforme.GetCCDisposicionActuaSobreProdTotal: TBoolean;
begin
  if FCCDisposicionActuaSobreProdTotal = Unassigned then
    FCCDisposicionActuaSobreProdTotal := Disposicion.ActuaSobreProduccionTotal;
  Result := FCCDisposicionActuaSobreProdTotal;
end;

function THojaDeRutaNoConforme.GetCCDisposicionDescripcion: TString;
begin
  if FCCDisposicionDescripcion = Unassigned then
    FCCDisposicionDescripcion := Disposicion.Descripcion;
  Result := FCCDisposicionDescripcion;
end;

function THojaDeRutaNoConforme.GetCCFabricadoFinalCodigo: TString;
begin
  if FCCFabricadoFinalCodigo = Unassigned then
    FCCFabricadoFinalCodigo := HojaDeRuta.Producto.Fabricado.Codigo;
  Result := FCCFabricadoFinalCodigo;
end;

function THojaDeRutaNoConforme.GetCCFabricadoParteCodigo: TString;
begin
  if FCCFabricadoParteCodigo = Unassigned then
    FCCFabricadoParteCodigo := HojaDeRuta.ProductoParte.Fabricado.Codigo;
  Result := FCCFabricadoParteCodigo;
end;

function THojaDeRutaNoConforme.GetHojaDeRuta: THojaDeRuta;
begin
  if not assigned(FHojaDeRuta) then
    GetObject(THojaDeRuta, FHojaDeRuta, HojaDeRutaID);
  Result := THojaDeRuta(FHojaDeRuta);
end;

function THojaDeRutaNoConforme.GetK1: TReal;
var
  DMFormulas : TDMFormulas;
begin
  if (FK1=0) then
    Try
      DMFormulas := TDMFormulas.Create(Nil);
      if (Producto.FabricadoID <> NullID) then
        begin
          DMFormulas.Fabricado := Self.HojaDeRuta.ProductoParte.Fabricado;
          DMFormulas.JvInterpreterProgram.Pas.Clear;
          DMFormulas.JvInterpreterProgram.Pas.Add(Aplicacion.FormulasDelSistema.FormulaK1);
          DMFormulas.JvInterpreterProgram.Run;
          FK1 := DMFormulas.JvInterpreterProgram.VResult;
        end;
    Finally
      FK1MonedaID := Aplicacion.MonedaDefault.ID;
      if Assigned (DMFormulas) then
        FreeAndNil(DMFormulas);
    end;
  Result := FK1;
end;

function THojaDeRutaNoConforme.GetK1Moneda: TMoneda;
begin
  if not Assigned(FK1Moneda) then
    GetObject(TMoneda, FK1Moneda, K1MonedaID);
  Result := TMoneda(FK1Moneda);
end;

function THojaDeRutaNoConforme.GetCCHojaDeRutaNumero: TEntero;
begin
  if FCCHojaDeRutaNumero = Unassigned then
    FCCHojaDeRutaNumero := HojaDeRuta.Numero;
  Result := FCCHojaDeRutaNumero;
end;

function THojaDeRutaNoConforme.GetCCHojaDeRutaNumeroImprimible: TString;
begin
  if FCcHojaDeRutaNumeroImprimible = Unassigned then
    FCCHojaDeRutaNumeroImprimible := HojaDeRuta.NumeroImprimible;
  Result := FCCHojaDeRutaNumeroImprimible;
end;

function THojaDeRutaNoConforme.GetCCK1MonedaCodigo: TString;
begin
  if FCCK1MonedaCodigo = Unassigned then
    if K1MonedaID <> NullID then
      FCCK1MonedaCodigo := K1Moneda.Codigo;
  Result := FCCK1MonedaCodigo;
end;

function THojaDeRutaNoConforme.GetMotivoDeNoConforme: TMotivoDeNoConforme;
begin
  if not assigned(FMotivoDeNoConforme) then
    GetObject(TMotivoDeNoConforme, FMotivoDeNoConforme, MotivoDeNoConformeID);
  Result := TMotivoDeNoConforme(FMotivoDeNoConforme);
end;

function THojaDeRutaNoConforme.GetCCMotivoDeNoConformeDescripcion: TString;
begin
  if FCCMotivoDeNoConformeDescripcion = Unassigned then
    FCCMotivoDeNoConformeDescripcion := MotivoDeNoConforme.Descripcion;
  Result := FCCMotivoDeNoConformeDescripcion;
end;

function THojaDeRutaNoConforme.GetCCNumeroPedido: TEntero;
begin
  Result := FCCNumeroPedido;
end;

function THojaDeRutaNoConforme.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, PasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function THojaDeRutaNoConforme.GetProducto: TProducto;
begin
  if not Assigned(FProducto) then
    if (HojaDeRutaID<>NullID) then
      GetObject(TProducto, FProducto, HojaDeRuta.ProductoParteID)
    else
      GetObject(TProducto, FProducto, ProductoID);
  Result := TProducto(FProducto);
end;

function THojaDeRutaNoConforme.GetTipoDeNoConforme: TTipoDeNoConforme;
begin
  if not Assigned(FTipoDeNoConforme) then
    GetObject(TTipoDeNoConforme, FTipoDeNoConforme, TipoDeNoConformeID);
  Result := TTipoDeNoConforme(FTipoDeNoConforme);
end;

function THojaDeRutaNoConforme.GetCCPasoDeFabricacionCodigo: TString;
begin
  if FCCPasoDeFabricacionCodigo = Unassigned then
    FCCPasoDeFabricacionCodigo := PasoDeFabricacion.codigo;
  Result := FCCPasoDeFabricacionCodigo;
end;

function THojaDeRutaNoConforme.GetCCPasoDeFabricacionDescripcion: TString;
begin
  if FCCPasoDeFabricacionDescripcion = Unassigned then
    FCCPasoDeFabricacionDescripcion := PasoDeFabricacion.Descripcion;
  Result := FCCPasoDeFabricacionDescripcion;
end;

function THojaDeRutaNoConforme.GetCCPedidoDeVentaCantidadPedida: TEntero;
begin
  if FCCPedidoDeVentaCantidadPedida = Unassigned then
    FCCPedidoDeVentaCantidadPedida := HojaDeRuta.PedidoDeVentaItem.CantidadPedida;
  Result := FCCPedidoDeVentaCantidadPedida;
end;

function THojaDeRutaNoConforme.GetCCDisposicionPorcentajePerdidas: TReal;
begin
//  if FCCPorcentajePerdidas = Unassigned then
//    FCCPorcentajePerdidas := Disposicion.PorcentajePerdidas;
  Result := FCCDisposicionPorcentajePerdidas;
end;

function THojaDeRutaNoConforme.GetCCEstadoDeDeteccionDescripcion: TString;
begin
  if FCCEstadoDeDeteccionDescripcion = Unassigned then
    FCCEstadoDeDeteccionDescripcion := EstadoDeDeteccionNoConforme.Descripcion;
  Result := FCCEstadoDeDeteccionDescripcion;
end;

function THojaDeRutaNoConforme.GetCCTerminacionParteCodigo: TString;
begin
  if FCCTerminacionParteCodigo = Unassigned then
    FCcTerminacionParteCodigo := HojaDeRuta.ProductoParte.Fabricado.Terminacion.codigo;
  Result := FCCTerminacionParteCodigo;
end;

function THojaDeRutaNoConforme.GetCCTerminacionParteDescripcion: TString;
begin
  if FCCTerminacionParteDescripcion = Unassigned then
    FCCTerminacionParteDescripcion := HojaDeRuta.ProductoParte.Fabricado.Terminacion.Descripcion;
  Result := FCCTerminacionParteDescripcion;
end;

function THojaDeRutaNoConforme.GetCCTipoDeNoConformeDescripcion: TString;
begin
  if FCCTipoDeNoConformeDescripcion = Unassigned then
    FCCTipoDeNoConformeDescripcion := TipoDeNoConforme.Descripcion;
  Result := FCCTipoDeNoConformeDescripcion;
end;

function THojaDeRutaNoConforme.Save: Boolean;
begin
  if (FFechaDeCreacion = Null) then
    FFechaDeCreacion    := Aplicacion.DateTimeService.FechaActual;
  Result := inherited Save;
end;

procedure THojaDeRutaNoConforme.SetDisposicionID(Value : TObjectID);
begin
  if (Value <> FDisposicionID) and Assigned(FDisposicion) then
    FreeAndNil(FDisposicion);
  FDisposicionID := Value;
end;

procedure THojaDeRutaNoConforme.SetEstadoDeDeteccionNoConformeID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeDeteccionNoConformeID) and Assigned(FEstadoDeDeteccionNoConforme) then
    FreeAndNil(FEstadoDeDeteccionNoConforme);
  FEstadoDeDeteccionNoConformeID := Value;
end;

procedure THojaDeRutaNoConforme.SetMotivoDeNoConformeID(Value : TObjectID);
begin
  if (Value <> FMotivoDeNoConformeID) and Assigned(FMotivoDeNoConforme) then
    FreeAndNil(FMotivoDeNoConforme);
  FMotivoDeNoConformeID := Value;
end;

procedure THojaDeRutaNoConforme.SetHojaDeRutaID(Value : TObjectID);
begin
  if (Value<>FHojaDeRutaID) and Assigned(FHojaDeRuta) then
    FreeAndNil(FHojaDeRuta);
  FHojaDeRutaID := Value;
end;

procedure THojaDeRutaNoConforme.SetK1MonedaID(const Value: TObjectID);
begin
  if (Value <> FK1MonedaID) and Assigned(FK1Moneda) then
    FreeAndNil(FK1Moneda);
  FK1MonedaID := Value;
end;

 { THojaDeRutaNoConformeDM }
class function THojaDeRutaNoConformeDM.TableName : string;
begin
  Result := 'HojaDeRutaNoConformes';
end;

class function THojaDeRutaNoConformeDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ';
    Result := Result + THojaDeRutaDM.TableName                  + '.' + THojaDeRutaDM._Numero           + ' as ' + _CCHojaDeRutaNumero           + ' , ';
    Result := Result + THojaDeRutaDM.TableName                  + '.' + THojaDeRutaDM._NumeroImprimible + ' as ' + _CCHojaDeRutaNumeroImprimible + ' , ';
    Result := Result + THojaDeRutaDM.TableName                  + '.' + THojaDeRutaDM._CantidadPedida + ' + ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._CantidadExtra + ' as ' + _CCHojaDeRutaCantidadAFabricar + ' , ';
    Result := Result + TMotivoDeNoConformeDM.TableName          + '.' + TMotivoDeNoConformeDM._Descripcion                    + ' as ' + _CCMotivoDeNoConformeDescripcion  + ', ';
    Result := Result + TEstadoDeDeteccionNoConformeDM.TableName + '.' + TEstadoDeDeteccionNoConformeDM._Descripcion       + ' as ' + _CCEstadoDeDeteccionDescripcion   + ', ';
    Result := Result + TDisposicionDeNoConformeDM.TableName     + '.' + TDisposicionDeNoConformeDM._Descripcion               + ' as ' + _CCDisposicionDescripcion         + ', ';
    Result := Result + TDisposicionDeNoConformeDM.TableName     + '.' + TDisposicionDeNoConformeDM._PorcentajePedidas         + ' as ' + _CCDisposicionPorcentajePerdidas  + ', ';
    Result := Result + TDisposicionDeNoConformeDM.TableName     + '.' + TDisposicionDeNoConformeDM._ActuaSobreProduccionTotal + ' as ' + _CCDisposicionActuaSobreProdTotal + ', ';
    Result := Result + TPasoDeFabricacionDM.TableName           + '.' + TPasoDeFabricacionDM._Codigo            + ' as ' + _CCPasoDeFabricacionCodigo                      + ', ';
    Result := Result + TPasoDeFabricacionDM.TableName           + '.' + TPasoDeFabricacionDM._Descripcion       + ' as ' + _CCPasoDeFabricacionDescripcion                 + ', ';
    Result := Result + 'PP.' + TFabricadoDM._Codigo             + ' as ' + _CCFabricadoParteCodigo            + ', ';
    Result := Result + 'PF.' + TFabricadoDM._Codigo             + ' as ' + _CCFabricadoFinalCodigo            + ', ';
    Result := Result + TTerminacionDM.TableName                 + '.' + TTerminacionDM._Descripcion             + ' as ' + _CCTerminacionParteDescripcion     + ', ';
    Result := Result + TTerminacionDM.TableName                 + '.' + TTerminacionDM._Codigo                  + ' as ' + _CCTerminacionParteCodigo          + ', ';
    Result := Result + TCunioDM.TableName                       + '.' + TCunioDM._Descripcion                   + ' as ' + _CCCunioParteDescripcion           + ', ';
    Result := Result + TCunioDM.TableName                       + '.' + TCunioDM._Codigo                        + ' as ' + _CCCunioParteCodigo                + ', ';
    Result := Result + TPedidoDeVentaItemDM.TableName           + '.' + TPedidoDeVentaItemDM._CantidadPedida    + ' as ' + _CCPedidoDeVentaItemCantidadPedida + ', ';
    Result := Result + TPedidoDeVentaDM.TableName               + '.' + TPedidoDeVentaDM._Numero                + ' as ' + _CCNumeroPedido                    + ', ';
    Result := Result + TMonedaDM.TableName                      + '.' + TMonedaDM._Codigo                       + ' as ' + _CCK1MonedaCodigo                  + ', ';
    Result := Result + TEstadoDeDeteccionNoConformeDM.TableName + '.' + TEstadoDeDeteccionNoConformeDM._Descripcion + ' as ' + _CCEstadoDeDeteccionDescripcion+ ', ';
    Result := Result + TTipoDeNoConformeDM.TableName            + '.' + TTipoDeNoConformeDM._Descripcion        + ' as ' + _CCTipoDeNoConformeDescripcion;

  end;
  Function LeftJoinString : String;
  var
    ID1NameTablaHojaDeRutaNoConformes, ID2NameTablaHojaDeRutaNoConformes, ID3NameTablaHojaDeRutaNoConformes,
    ID4NameTablaHojaDeRutaNoConformes, ID5NameTablaHojaDeRutaNoConformes, ID6NameTablaHojaDeRutaNoConformes : String;
    IDNameTablaMotivos                        : String;
    IDNameTablaDisposiciones                  : String;
    IDNameTablaPasos                          : String;
    IDNameTablaFabricados                     : String;
    IDNameTablaHojasDeRuta, ID1NameTablaHojasDeRuta, ID2NameTablaHojasDeRuta, ID3NameTablaHojasDeRuta : String;
    ID1NameTablaFabricados, ID2NameTablaFabricados : String;
    IDNameTablaTerminaciones                  : String;
    IDNameTablaCunios                         : String;
    IDNameTablaPedidos, ID1NameTablaPedidos   : String;
    IDNameTablaItems, ID1NameTablaItems       : String;
    IDNameTablaMonedas                        : String;
    IDNameTablaFabricadosPF                   : String;
    IDNameTablaEstadosDeDeteccion             : String;
    IDNameTablaTiposDeNoConforme, ID7NameTablaHojaDeRutaNoConformes : String;
  begin
    ID1NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._HojaDeRutaID;
    ID2NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._MotivoDeNoConformeID;
    ID3NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._DisposicionID;
    ID4NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._PasoDeFabricacionID;
    ID5NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._K1MonedaID;
    ID6NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._EstadoDeDeteccionNoConformeID;
    ID7NameTablaHojaDeRutaNoConformes  := TableName            + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID;
    IDNameTablaHojasDeRuta   := THojaDeRutaDM.TableName              + '.' + THojaDeRutaDM.ID_FieldName;
    ID1NameTablaHojasDeRuta  := THojaDeRutaDM.TableName              + '.' + THojaDeRutaDM._ProductoParteID;
    ID2NameTablaHojasDeRuta  := THojaDeRutaDM.TableName              + '.' + THojaDeRutaDM._PedidoDeVentaItemID;
    ID3NameTablaHojasDeRuta  := THojaDeRutaDM.TableName              + '.' + THojaDeRutaDM._ProductoID;
    IDNameTablaMotivos       := TMotivoDeNoConformeDM.TableName      + '.' + TMotivoDeNoConformeDM.ID_FieldName;
    IDNameTablaDisposiciones := TDisposicionDeNoConformeDM.TableName + '.' + TDisposicionDeNoConformeDM.ID_FieldName;
    IDNameTablaPasos         := TPasoDeFabricacionDM.TableName       + '.' + TPasoDeFabricacionDM.ID_FieldName;
    IDNameTablaTerminaciones := TTerminacionDM.TableName             + '.' + TTerminacionDM.ID_FieldName;
    IDNameTablaCunios        := TCunioDM.TableName                   + '.' + TCunioDM.ID_FieldName;
    IDNameTablaFabricados    := 'PP.' + TFabricadoDM._ProductoID;
    ID1NameTablaFabricados   := 'PP.' + TFabricadoDM._TerminacionID;
    ID2NameTablaFabricados   := 'PP.' + TFabricadoDM._CunioID;
    IDNameTablaItems         := TPedidoDeVentaItemDM.TableName       + '.' + TPedidoDeVentaItemDM.ID_FieldName;
    ID1NameTablaItems        := TPedidoDeVentaItemDM.TableName       + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    IDNameTablaPedidos       := TPedidoDeVentaDM.TableName           + '.' + TPedidoDeVentaDM.ID_FieldName;
    ID1NameTablaPedidos      := TPedidoDeVentaDM.TableName           + '.' + TPedidoDeVentaDM._MonedaID;
    IDNameTablaMonedas       := TMonedaDM.TableName                  + '.' + TMonedaDM.ID_FieldName;
    IDNameTablaFabricadosPF  := 'PF.' + TFabricadoDM._ProductoID;
    IDNameTablaEstadosDeDeteccion := TEstadoDeDeteccionNoConformeDM.TableName + '.' + TEstadoDeDeteccionNoConformeDM.ID_FieldName;
    IDNameTablaTiposDeNoConforme  := TTipoDeNoConformeDM.TableName + '.' + TTipoDeNoConformeDM.ID_FieldName;

    Result :=          ' Left Join ' + THojaDeRutaDM.TableName              + ' on (' + IDNameTablaHojasDeRuta   + '=' + ID1NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TMotivoDeNoConformeDM.TableName      + ' on (' + IDNameTablaMotivos       + '=' + ID2NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TDisposicionDeNoConformeDM.TableName + ' on (' + IDNameTablaDisposiciones + '=' + ID3NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TPasoDeFabricacionDM.TableName       + ' on (' + IDNameTablaPasos         + '=' + ID4NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName               + ' PP on (' + IDNameTablaFabricados + '=' + ID1NameTablaHojasDeRuta           + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName               + ' PF on (' + IDNameTablaFabricadosPF + '=' + ID3NameTablaHojasDeRuta           + ') ';
    Result := Result + ' Left Join ' + TTerminacionDM.TableName             + ' on (' + IDNameTablaTerminaciones + '=' + ID1NameTablaFabricados            + ') ';
    Result := Result + ' Left Join ' + TCunioDM.TableName                   + ' on (' + IDNameTablaCunios        + '=' + ID2NameTablaFabricados            + ') ';
    Result := Result + ' Left Join ' + TPedidoDeVentaItemDM.TableName       + ' on (' + IDNameTablaItems         + '=' + ID2NameTablaHojasDeRuta           + ') ';
    Result := Result + ' Left Join ' + TPedidoDeVentaDM.TableName           + ' on (' + IDNameTablaPedidos       + '=' + ID1NameTablaItems                 + ') ';
    Result := Result + ' Left Join ' + TMonedaDM.TableName                  + ' on (' + IDNameTablaMonedas       + '=' + ID5NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TEstadoDeDeteccionNoConformeDM.TableName + ' on (' + IDNameTablaEstadosDeDeteccion + '=' + ID6NameTablaHojaDeRutaNoConformes + ') ';
    Result := Result + ' Left Join ' + TTipoDeNoConformeDM.TableName        + ' on (' + IDNameTablaTiposDeNoConforme + '=' + ID7NameTablaHojaDeRutaNoConformes + ') ';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function THojaDeRutaNoConformeDM.ID_FieldName : string;
begin
  Result := 'HojaDeRutaNoConformeID';
end;

procedure THojaDeRutaNoConformeDM.PopulateFields(PDObject: TPDObject);
begin
  with THojaDeRutaNoConforme(PDObject) do
    begin
      DateField[_FechaDeCierre]               := FFechaDeCierre;
      DateField[_FechaDeApertura]             := FFechaDeApertura;
      StringField[_Observaciones]             := Observaciones;
      IDField[_PasoDeFabricacionID]           := FPasoDeFabricacionID;
      IDField[_DisposicionID]                 := FDisposicionID;
      FloatField[_PorcentajeNoConforme]       := FPorcentajeNoConforme;
      FloatField[_PorcentajeRechazado]        := FPorcentajeRechazado;
      IDField[_MotivoDeNoConformeID]          := FMotivoDeNoConformeID;
      IDField[_HojaDeRutaID]                  := FHojaDeRutaID;
      DateField[_FechaDeCreacion]             := FFechaDeCreacion;
      IntegerField[_NumeroDeNoConforme]       := FNumeroDeNoConforme;
      FloatField[_K1]                         := K1;
      IDField[_K1MonedaID]                    := FK1MonedaID;
      IDField[_EstadoDeDeteccionNoConformeID] := FEstadoDeDeteccionNoConformeID;
      IDField[_TipoDeNoConformeID]            := FTipoDeNoConformeID;
      IntegerField[_Cantidad]                 := FCantidad;
    end;
end;

procedure THojaDeRutaNoConformeDM.PopulateObject(PDObject: TPDObject);
begin
  with THojaDeRutaNoConforme(PDObject) do
    begin
      FFechaDeCierre                    := DateField[_FechaDeCierre];
      FFechaDeApertura                  := DateField[_FechaDeApertura];
      FObservaciones                    := StringField[_Observaciones];
      FPasoDeFabricacionID              := IDField[_PasoDeFabricacionID];
      FDisposicionID                    := IDField[_DisposicionID];
      FPorcentajeNoConforme             := FloatField[_PorcentajeNoConforme];
      FPorcentajeRechazado              := FloatField[_PorcentajeRechazado];
      FMotivoDeNoConformeID             := IDField[_MotivoDeNoConformeID];
      FHojaDeRutaID                     := IDField[_HojaDeRutaID];
      FFechaDeCreacion                  := DateField[_FechaDeCreacion];
      FNumeroDeNoConforme               := IntegerField[_NumeroDeNoConforme];
      FK1                               := FloatField[_K1];
      FK1MonedaID                       := IDField[_K1MonedaID];
      FEstadoDeDeteccionNoConformeID    := IDField[_EstadoDeDeteccionNoConformeID];
      FTipoDeNoConformeID               := IDField[_TipoDeNoConformeID];
      FCantidad                         := IntegerField[_Cantidad];
      // del Create Compuesto
      FCCHojaDeRutaNumeroImprimible     := StringField[_CCHojaDeRutaNumeroImprimible];
      FCCHojaDeRutaNumero               := IntegerField[_CCHojaDeRutaNumero];
      FCCHojaDeRutaCantidadAFabricar    := FloatField[_CCHojaDeRutaCantidadAFabricar];
      FCCMotivoDeNoConformeDescripcion  := StringField[_CCMotivoDeNoConformeDescripcion];
      FCCEstadoDeDeteccionDescripcion   := StringField[_CCEstadoDeDeteccionDescripcion];
      FCCDisposicionDescripcion         := StringField[_CCDisposicionDescripcion];
      FCCDisposicionPorcentajePerdidas  := FloatField[_CCDisposicionPorcentajePerdidas];
      FCCDisposicionActuaSobreProdTotal := BooleanField[_CCDisposicionActuaSobreProdTotal];
      FCCPasoDeFabricacionCodigo        := StringField[_CCPasoDeFabricacionCodigo];
      FCCFabricadoParteCodigo           := StringField[_CCFabricadoParteCodigo];
      FCCFabricadoFinalCodigo           := StringField[_CCFabricadoFinalCodigo];
      FCCTerminacionParteCodigo         := StringField[_CCTerminacionParteCodigo];
      FCCTerminacionParteDescripcion    := StringField[_CCTerminacionParteDescripcion];
      FCCCunioParteCodigo               := StringField[_CCCunioParteCodigo];
      FCCCunioParteDescripcion          := StringField[_CCCunioParteDescripcion];
      FCCPedidoDeVentaCantidadPedida    := IntegerField[_CCPedidoDeVentaItemCantidadPedida];
      FCCNumeroPedido                   := IntegerField[_CCNumeroPedido];
      FCCK1MonedaCodigo                 := StringField[_CCK1MonedaCodigo];
      FCCTipoDeNoConformeDescripcion    := StringField[_CCTipoDeNoConformeDescripcion];
    end;
end;

{ THojaDeRutaNoConformeList }
function THojaDeRutaNoConformeList.GetActual : THojaDeRutaNoConforme;
begin
  Result := THojaDeRutaNoConforme(CurrentObject);
end;

constructor THojaDeRutaNoConformeList.CreateByFaltanteExcedente;
  function WhereString: String;
  begin
    Result := '(' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeApertura + ') >= ' + QuotedStr(DateToStr(Aplicacion.DateTimeService.FechaActual - 365));
    Result := Result + ' and (' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID + ' in ( Select ' + TTipoDeNoConformeDM.ID_FieldName + ' from ' + TTipoDeNoConformeDM.TableName + ' where ' + TTipoDeNoConformeDM._EsDefectoCalidad + ' =0))'
  end;
  Function OrderByString: String;
  Begin
    Result := 'Year( ' +THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) desc , ';
    Result := Result + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._NumeroDeNoConforme + ' desc ' ;
  End;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString, False, OrderByString));
end;

constructor THojaDeRutaNoConformeList.CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: TFecha; _SoloNoConformes : Boolean);
  function WhereString: String;
  begin
    Result := THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeApertura + ' between ' + QuotedStr(DateToStr(_FechaDesde) + _PrimerHora ) + ' and ' + QuotedStr(DateToStr(_FechaHasta) + _UltimaHora);
    if _SoloNoConformes then
      Result := Result + ' and ' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID + ' in ( Select ' + TTipoDeNoConformeDM.ID_FieldName + ' from ' + TTipoDeNoConformeDM.TableName + ' where ' + TTipoDeNoConformeDM._EsDefectoCalidad + ' =1)'
  end;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaNoConformeList.CreateByHojaDeRuta(_HR: THojaDeRuta);
  function WhereString: String;
  begin
    Result := THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._HojaDeRutaID + ' = ' + IntToStr(_HR.ID);
  end;
  function OrderBy: String;
  begin
    Result := THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion;
  end;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaNoConformeList.CreateByMaximoNumero( _TNC : TTipoDeNoConforme; _Year : String );
  function WhereString: String;
  begin
    if (_Year = '' ) then
      Result := '( year( '  + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) = year(GETDATE())'
    Else
      Result := '( year( '  + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) = ' + _Year +')' ;

    Result := Result + ' and ' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID + '=' + IntToStr(_TNC.ID);
  end;
begin
  inherited Create(THojaDeRutaNoConforme, THojaDeRutaNoConformeDM.CreateTop(1, WhereString, THojaDeRutaNoConformeDM._NumeroDeNoConforme + ' desc' ));
end;

constructor THojaDeRutaNoConformeList.CreateByNoConformes;
  function WhereString: String;
  begin
    Result := '(' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeApertura + ') >= ' + QuotedStr(DateToStr(Aplicacion.DateTimeService.FechaActual - 365));
    Result := Result + ' and (' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID + ' in ( Select ' + TTipoDeNoConformeDM.ID_FieldName + ' from ' + TTipoDeNoConformeDM.TableName + ' where ' + TTipoDeNoConformeDM._EsDefectoCalidad + ' =1))'
  end;
  Function OrderByString: String;
  Begin
    Result := 'Year( ' +THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) desc , ';
    Result := Result + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._NumeroDeNoConforme + ' desc ' ;
  End;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString, False, OrderByString));
end;

constructor THojaDeRutaNoConformeList.CreateBySectorAndFechaDesdeFechaHasta(_Sector : TSector ; _FechaDesde, _FechaHasta: TFecha; _SoloNoConformes : Boolean);
  function WhereString: String;
  begin
    Result := THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._MotivoDeNoConformeID + ' in ( Select '
            + TMotivoDeNoConformeDM.TableName   + '.' + TMotivoDeNoConformeDM.ID_FieldName + ' from ' + TMotivoDeNoConformeDM.TableName + ' where '
            + TMotivoDeNoConformeDM.TableName   + '.' + TMotivoDeNoConformeDM._SectorID + ' = ' +  IntToStr(_Sector.ID) + ') And '
            + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._PasoDeFabricacionID + ' in ( Select '
            + TPasoDeFabricacionDM.TableName    + '.' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' where '
            + TPasoDeFabricacionDM.TableName    + '.' + TPasoDeFabricacionDM._SectorID + ' = ' +  IntToStr(_Sector.ID) + ') '
            + ' And ' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeApertura + ' between ' + QuotedStr(DateToStr(_FechaDesde)+ _PrimerHora) + ' and ' +QuotedStr(DateToStr(_FechaHasta) + _UltimaHora);

    if _SoloNoConformes then
      Result := Result + ' and ' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._TipoDeNoConformeID + ' in ( Select ' + TTipoDeNoConformeDM.ID_FieldName + ' from ' + TTipoDeNoConformeDM.TableName + ' where ' + TTipoDeNoConformeDM._EsDefectoCalidad + ' =1)'
  end;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString));
end;

constructor THojaDeRutaNoConformeList.CreateEmpty;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateEmpty);
end;

constructor THojaDeRutaNoConformeList.CreateByProductoParte(_P: TProducto);
  Function WhereString : String;
  begin
    Result := THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._HojaDeRutaID + ' in ( Select ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM.ID_FieldName
             + ' from ' + THojaDeRutaDM.TableName + ' where ' + THojaDeRutaDM.TableName + '.' + THojaDeRutaDM._ProductoParteID + ' = ' + IntToStr(_P.ID)  + ' )'
  end;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString));
end;

function THojaDeRutaNoConformeList.CreateNewObject: TPDObject;
begin
  Result := THojaDeRutaNoConforme.Create;
end;

constructor THojaDeRutaNoConformeList.CreateAll;
  function WhereString: String;
  begin
    Result := '(' + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeApertura + ') >= ' + QuotedStr(DateToStr(Aplicacion.DateTimeService.FechaActual - 365)) ;
  //  Result := 'Year( ' +THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) = ' + IntToStr(YearOf(Aplicacion.DateTimeService.FechaActual));
  end;
  Function OrderByString: String;
  Begin
    Result := 'Year( ' +THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._FechaDeCreacion + ' ) desc , ';
    Result := Result + THojaDeRutaNoConformeDM.TableName + '.' + THojaDeRutaNoConformeDM._NumeroDeNoConforme + ' desc ' ;
  End;
begin
  inherited Create(THojaDeRutaNoConforme,THojaDeRutaNoConformeDM.CreateAll(False, WhereString, False, OrderByString ));
end;

 { TDisposicionDeNoConforme }
constructor TDisposicionDeNoConforme.Create;
begin
  inherited;
  DMObject                   := Aplicacion.DMPRovider.GetGlobalDM(TDisposicionDeNoConformeDM);
  Descripcion                := Null;
  EsInactivo                 := False;
  RequiereReprogramacion     := False;
  FPorcentajePerdidas        := 0;
  FActuaSobreProduccionTotal := False;
end;

 function TDisposicionDeNoConforme.GetTipoDeNoConforme: TTipoDeNoConforme;
begin
  if not Assigned(FTipoDeNoConforme) then
    GetObject(TTipoDeNoConforme, FTipoDeNoConforme, TipoDeNoConformeID);
  Result := TTipoDeNoConforme(FTipoDeNoConforme);
end;

procedure TDisposicionDeNoConforme.SetTipoDeNoConformeID(const Value: TObjectID);
begin
  if (Value <> FTipoDeNoConformeID) and Assigned(FTipoDeNoConforme) then
    FreeAndNil(FTipoDeNoConforme);
  FTipoDeNoConformeID := Value;
end;

{ TDisposicionDeNoConformeDM }
class function TDisposicionDeNoConformeDM.TableName : string;
begin
  Result := 'DisposicionesDeNoConforme';
end;

class function TDisposicionDeNoConformeDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TDisposicionDeNoConformeDM.ID_FieldName : string;
begin
  Result := 'DisposicionDeNoConformeID';
end;

procedure TDisposicionDeNoConformeDM.PopulateFields(PDObject: TPDObject);
begin
  with TDisposicionDeNoConforme(PDObject) do
    begin
      StringField[_Descripcion]                := Descripcion;
      BooleanField[_EsInactivo]                := EsInactivo;
      BooleanField[_RequiereReprogramacion]    := FRequiereReprogramacion;
      FloatField[_PorcentajePedidas]           := FPorcentajePerdidas;
      BooleanField[_ActuaSobreProduccionTotal] := FActuaSobreProduccionTotal;
      IDField[_TipoDeNoConformeID]             := FTipoDeNoConformeID;
    end;
end;

procedure TDisposicionDeNoConformeDM.PopulateObject(PDObject: TPDObject);
begin
  with TDisposicionDeNoConforme(PDObject) do
    begin
      Descripcion                := StringField[_Descripcion];
      EsInactivo                 := BooleanField[_EsInactivo];
      FRequiereReprogramacion    := BooleanField[_RequiereReprogramacion];
      FPorcentajePerdidas        := FloatField[_PorcentajePedidas];
      FActuaSobreProduccionTotal := BooleanField[_ActuaSobreProduccionTotal];
      FTipoDeNoConformeID        := IDField[_TipoDeNoConformeID];
    end;
end;

 { TDisposicionDeNoConformeList }
function TDisposicionDeNoConformeList.GetActual : TDisposicionDeNoConforme;
begin
  Result := TDisposicionDeNoConforme(CurrentObject);
end;

constructor TDisposicionDeNoConformeList.CreateByNoRequiereReprogramacion(_SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TDisposicionDeNoConformeDM._RequiereReprogramacion + '=0 )';
  end;
begin
  inherited Create(TDisposicionDeNoConforme,TDisposicionDeNoConformeDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TDisposicionDeNoConformeList.CreateByTipoDeNoConformeID(_TNCID: TObjectID; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TDisposicionDeNoConformeDM._TipoDeNoConformeID + '=' + IntToStr(_TNCID) +')';
  end;
begin
  inherited Create(TDisposicionDeNoConforme,TDisposicionDeNoConformeDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TDisposicionDeNoConformeList.CreateByTipoDeNoConformeIDAndDescripcionLike(_TNCID: TObjectID; _D: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TDisposicionDeNoConformeDM._TipoDeNoConformeID + '=' + IntToStr(_TNCID) +') and ';
    Result := Result + '(' + TDisposicionDeNoConformeDM._Descripcion + ' like ' + QuotedStr('%' + _D + '%') + ')';
  end;
begin
  inherited Create(TDisposicionDeNoConforme,TDisposicionDeNoConformeDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TDisposicionDeNoConformeList.CreateNewObject: TPDObject;
begin
  Result := TDisposicionDeNoConforme.Create;
end;

constructor TDisposicionDeNoConformeList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TDisposicionDeNoConforme,TDisposicionDeNoConformeDM.CreateAll(false, '', _SoloActivos));
end;

{ TDocumentoList }

constructor TDocumentoList.Create(PDClass: TPDClass; DMObject: TDMObject);
begin
  aplicacion.ColocarCursorEspera;
  inherited Create(PDClass, DMObject);
  aplicacion.ColocarCursorNormal;
end;

constructor TDocumentoList.CreateByID(_ID: TObjectID; _SoloActivos: Boolean);
var
  P: TPDObject;
  Function WhereString : String;
  begin
    if (TSQLDBX_DMClass(P.DMClass).ViewName > '') then
      Result := '(' + TSQLDBX_DMClass(P.DMClass).ViewName  + '.' + TSQLDBX_DMClass(P.DMClass).ID_FieldName + '=' + IntToStr(_ID) + ')'
    else
      Result := '(' + TSQLDBX_DMClass(P.DMClass).TableName + '.' + TSQLDBX_DMClass(P.DMClass).ID_FieldName + '=' + IntToStr(_ID) + ')'
  end;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDocumentoList.CreateEmpty;
var
  P: TPDObject;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType),TSQLDBX_DMClass(P.DMClass).CreateEmpty);
  finally
    FreeAndNil(P);
  end;
end;

{ TEstadoDeDeteccionNoConforme }
constructor TEstadoDeDeteccionNoConforme.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TEstadoDeDeteccionNoConformeDM);
  SaveSQLLog := True;
  FCoeficiente := null;
end;

 { TEstadoDeDeteccionNoConformeDM }

class function TEstadoDeDeteccionNoConformeDM.TableName : string;
begin
  result := 'EstadosDeDeteccionNoConforme';
end;


class function TEstadoDeDeteccionNoConformeDM.ID_FieldName : string;
begin
  result := 'EstadoDeDeteccionNoConformeID';
end;

class function TEstadoDeDeteccionNoConformeDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TEstadoDeDeteccionNoConformeDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeDeteccionNoConforme(PDObject) do
    begin
      FloatField[_Coeficiente] := Coeficiente;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;


procedure TEstadoDeDeteccionNoConformeDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeDeteccionNoConforme(PDObject) do
    begin
      FCoeficiente := FloatField[_Coeficiente];
      Descripcion := StringField[_Descripcion];
      EsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TEstadoDeDeteccionNoConformeList }
function TEstadoDeDeteccionNoConformeList.GetActual : TEstadoDeDeteccionNoConforme;
begin
  result := TEstadoDeDeteccionNoConforme(CurrentObject);
end;

function TEstadoDeDeteccionNoConformeList.CreateNewObject: TPDObject;
begin
  result := TEstadoDeDeteccionNoConforme.Create;
end;

constructor TEstadoDeDeteccionNoConformeList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TEstadoDeDeteccionNoConforme,TEstadoDeDeteccionNoConformeDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TRemito }
class procedure TRemito.ActualizarEstados(_R: TRemito; _MuestraDialog: Boolean);
var
  RL : TRemitoList;
begin
  try
    RL := TRemitoList.CreateByID(_R.ID);
    TRemito.ActualizarEstados(RL, _MuestraDialog);
  finally
    FreeAndNil(RL);
  end;
end;

class procedure TRemito.ActualizarEstados(_RL: TRemitoList; _MuestraDialog: Boolean);
var
  dlg: T_FrmDialogsService;

  Function ActualizoEstadodelRemito ( _R : TRemito ) : Boolean;
  var
    ERL : TEstadoDeRemitoList;
  begin
    try
      Result := False;
      if _R.TieneFacturaConfirmada then
        begin
          if (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoPreFacturado) or
             (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoSinFacturar ) then
             ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido)
          else if (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_PreFacturadoSinRemitir ) or (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
            ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_FacturadoSinRemitir);
          if Assigned( ERL ) then
            begin
              _R.TmpMoverStock    := False;
              _R.EsCambioDeEstado := True;
              _R.EstadoDeRemitoID := ERL.Actual.ID;
              Result              := True;
            end;
        end
      else if (_R.LasPreFacturasEstanCanceladas) or (_R.Facturas.Count = 0) then
        begin
          if (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_PreFacturadoSinRemitir ) or
             (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_FacturadoSinRemitir ) Then
            ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado)
          else if ((_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_PreFacturadoRemitido) or
                   (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoPreFacturado)) then
             ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoSinFacturar);

          if Assigned( ERL ) then
            begin
              _R.TmpMoverStock    := False;
              _R.EsCambioDeEstado := True;
              _R.EstadoDeRemitoID := ERL.Actual.ID;
              Result              := True;
            end;
        end;
    finally
      FreeAndNil(ERL);
    end;
  end;
begin
  try
    if _MuestraDialog then
      Aplicacion.DialogsService.CrearDialogo(dlg, 'Actualizando Estados ...', TAviComunes.Check);
    _RL.first;
    while Not _RL.islast do
      begin
        if ActualizoEstadodelRemito ( _RL.Actual ) then
          begin
            _RL.actual.Save;
            _RL.ApplyUpdates;
//            if (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Facturado) or
//            (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_FacturadoSinRemitir) or
//            (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido) then
//              TRemito.CambiarEstadoEnSifab(_RL.Actual, 430) // facturado
//            else if (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado) or
//            (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoAnulado) or
//            (_RL.Actual.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_RemitidoAnulado) then
//              TRemito.CambiarEstadoEnSifab(_RL.Actual, 112) //anulado
          end;
        _RL.next;
        Application.ProcessMessages;
      end;
  finally
    if _MuestraDialog then
      Aplicacion.DialogsService.CerrarDialogo(dlg);
  end;
end;

Class function TRemito.ObtenerNumeroFacturaSifab(_NumeroRemito: Integer): String; // solo para las facturas de expo
const
  _CodigoInternoEmpresaAPH = '2'; // APH
var
  Numero : Integer;
  Letra, CentroDeFacturacion : String;
begin
  Result := '';
  if Aplicacion.Sesion.ConexionSifab.SqlQuery.Active then
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  try
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := 'select Genericas.DescripcionItemCorta as Letra,  CentroFacturacion.CodigoCentroFacturacion as Centro, ComprobanteFacturacion.NumeroComprobante as Numero from ComprobanteFacturacion';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' Left Join CentroFacturacion on (ComprobanteFacturacion.CodigoInternoCentroFacturacion = CentroFacturacion.CodigoInternoCentroFacturacion) ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' Left join genericas on (ComprobanteFacturacion.CodigoletraComprobante = genericas.CodigoItem)';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' where CodigoInternoRemito in ';
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + '( select CodigoInternoRemito from Remito where NumeroRemito = ' + IntToStr( _NumeroRemito ) ;
    Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text := Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.Text + ' ) and ComprobanteFacturacion.codigoInternoEmpresa = ' + _CodigoInternoEmpresaAPH;
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Open;

    if (Aplicacion.Sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
      begin
        Aplicacion.Sesion.ConexionSifab.SqlQuery.First;
        Numero := (Aplicacion.Sesion.ConexionSifab.SqlQuery.FieldByName('Numero').Value);
        Letra  := (Aplicacion.Sesion.ConexionSifab.SqlQuery.FieldByName('Letra').Value);
        CentroDeFacturacion := (Aplicacion.Sesion.ConexionSifab.SqlQuery.FieldByName('Centro').Value);
        Result  := Letra + '-' + Aplicacion.TextService.RellenarAlaIzquierda( CentroDeFacturacion , '0' , 4) + '-' + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(Numero), '0', 8 )
      end
    else
        Result :=  '';

  finally
    Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
  end;
end;

procedure TRemito.ActualizarItems;
begin
  Items.First;
  while not Items.IsLast do
    begin
      Items.Actual.TmpMoverStock              := TmpMoverStock;
      Items.Actual.TmpEstadoDeRemitoOrigenID  := TmpEstadoAnteriorID;
      Items.Actual.TmpEstadoDeRemitoID        := EstadoDeRemitoID;
      Items.Actual.TmpTipoDeFormularioID      := TipoDeFormularioID;
      Items.Actual.NumeroDePreparacion        := NumeroDePreparacion;
      Items.Actual.Save;
      Items.Next;
    end;
  Items.First;
end;

procedure TRemito.ActualizarPedidos;
var
  PVID : TObjectID;
begin
  PVID := NullID;
  Items.First;
  while not Items.IsLast do
    begin
      if PVID <> Items.Actual.PedidoDeVentaItem.PedidoDeVentaID then
        Begin
          TPedidoDeVenta.ActualizarEstados( Items.Actual.PedidoDeVentaItem.PedidoDeVenta );
          PVID := Items.Actual.PedidoDeVentaItem.PedidoDeVentaID;
        End;
      Items.Next;
    end;
end;

procedure TRemito.AgregarNuevoEstadoAlLog;
var
  S: TRemitoStateLog;
begin
    S := TRemitoStateLog.Create;
  try
    S.EstadoDeRemitoID        := EstadoDeRemitoID;
    S.UsuarioID               := Aplicacion.Usuario.ID;
    S.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
    S.RemitoID                := Self.ID;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

class Function TRemito.AsignarNumero : Integer;
var
  RNumeros : TRemitoList;
begin
  try
    RNumeros := TRemitoList.CreateByUltimoNumero;
    if (RNumeros.Count > 0) then
      Result := RNumeros.Actual.Numero + 1
    else
      Result := 1;
  finally
    FreeAndNil(RNumeros);
  end;
end;


constructor TRemito.Create;
begin
  inherited;
  DMObject                  := Aplicacion.DMPRovider.GetGlobalDM(TRemitoDM);
  FHorarioDeEntrega         := Null;
  FFechaDeEmision           := Null;
  FGrupoDeVendedorID        := NullID;
  FEstadoDeRemitoID         := NullID;
  FEmpresaID                := NullID;
  FLicenciatarioID          := NullID;
  FDepositoDeEntregaID      := NullID;
  FEmpresaFleteID           := NullID;
  FCondicionDeVentaID       := NullID;
  FCondicionDeIvaID         := NullID;
  FCodigoInternoSifab       := Null;
  FEstaEnSifab              := Null;
  FFacturas                 := Nil;
  FNumeroDePreparacion      := Null;
  FTmpEstadoAnteriorID       := NullID;
  FTmpMoverStock            := True;
  FIDTeamplace              := Null;
  FNumeroDeFacturaTeamplace := Null;
  FTalonarioTeamplace        := -99;
end;

class function TRemito.FinnegansMigrarRemitoDeVenta( _R: TRemito ; _E : TEmpresa ; _Prioridad : Real; _ES : TEmpresaDeSistema; _TipoDeDocumento, _WorkFlow, _Vendedor : String): Boolean;
var
  OpApholos : OperacionApholosWS;
  XML       : IXMLDocument;
  XMLResp   : IXMLDocument;
  RootNode, PrimaryNode, ItemsNode ,CurNode : IXMLNode;
  Respuesta : String;
  REM       : TRemitoEstadoDeMigracion;
  CantItemsParaRemitir : Integer;
  DescripKit : String;
  Nprecio    : Real;
begin
  Result := False;

  // Primero verifico si hay items para pasar con el remito. Puede ser que los items sean tomados del pedido (servicios)
  _R.Items.First;
  CantItemsParaRemitir := 0;
  while not _R.Items.IsLast do
    begin
      if not _R.Items.actual.PedidoDeVentaItem.PendienteDeFacturar then // estos van por pedido
        inc(CantItemsParaRemitir);
      _R.Items.Next;
    end;
  if (CantItemsParaRemitir = 0) then
    begin
      Result := True;
      Exit;
    end;

  _R.Items.First;
  try
    XML := NewXMLDocument;
    XML.Encoding                                    := 'utf-8';
    XML.Options                                     := [doNodeAutoIndent]; // looks better in Editor
    RootNode                                        := XML.AddChild('xmlTransaccion');
    PrimaryNode                                     := RootNode.AddChild('OperacionXml');
    //DatosCabecera
    PrimaryNode.Attributes['Cliente']               := _E.Codigo;
    PrimaryNode.Attributes['ComprobanteExterno']    := _R.NumeroFinal;
    PrimaryNode.Attributes['CondicionPago']         := _R.CondicionDeVenta.Codigo;
    PrimaryNode.Attributes['Descripcion']           := 'Importación desde Aphosoft';
    PrimaryNode.Attributes['DireccionEntrega']      := _R.DepositoDeEntrega.DireccionCompleta;
    PrimaryNode.Attributes['Fecha']                 := IntToStr( YearOf( _R.FechaDeEmision ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _R.FechaDeEmision ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _R.FechaDeEmision ) ) , '0', 2) ;
    PrimaryNode.Attributes['FechaBaseVencimiento']  := IntToStr( YearOf( _R.FechaDeEmision ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _R.FechaDeEmision ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _R.FechaDeEmision ) ) , '0', 2) ;

    if (_R.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.IncotermID <> NullID) then
      PrimaryNode.Attributes['Inconterm']           := _R.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Incoterm.Codigo
    else
      PrimaryNode.Attributes['Inconterm']           := 'FOB'; //mauro la puta que te pario, esta mal escrito el campo

    PrimaryNode.Attributes['Moneda']                := _R.Items.Actual.PedidoDeVentaItem.MonedaDelPedido.CodigoTeamplace;
    PrimaryNode.Attributes['NumeroDocumento']       := _R.NumeroFinal;
    PrimaryNode.Attributes['NumeroInterno']         := '';
    PrimaryNode.Attributes['ProvinciaDestino']      := IntToStr( _R.DepositoDeEntrega.Localidad.ProvinciaID );
    PrimaryNode.Attributes['ProvinciaOrigen']       := IntToStr( Aplicacion.Empresa.Localidad.ProvinciaID );
    PrimaryNode.Attributes['Puerto']                := 'BA';

    PrimaryNode.Attributes['TipoDocumento']         := _TipoDeDocumento;
    PrimaryNode.Attributes['Workflow']              := _WorkFlow;

    PrimaryNode.Attributes['Transporte']            := 'B1';
    PrimaryNode.Attributes['Empresa']               := _ES.CodigoTeamplace;
    PrimaryNode.Attributes['Vendedor']              := _Vendedor;

    if (_R.PackingList.Count > 0) then
      begin
        _R.PackingList.Last;
        PrimaryNode.Attributes['Bultos']                := Aplicacion.TextService.ReemplazarEn( FloatToStr( _R.PackingList.Actual.CantidadDeCajasTotal ), ',', '.') ;
        PrimaryNode.Attributes['PesoBruto']             := Aplicacion.TextService.ReemplazarEn( FloatToStr( _R.PackingList.Actual.PesoBrutoTotal       ), ',', '.') ;
        PrimaryNode.Attributes['PesoNeto']              := Aplicacion.TextService.ReemplazarEn( FloatToStr( _R.PackingList.Actual.PesoNetoTotal        ), ',', '.') ;
      end
    else
      begin
        PrimaryNode.Attributes['Bultos']                := '1';
        PrimaryNode.Attributes['PesoBruto']             := IntToStr(0);
        PrimaryNode.Attributes['PesoNeto']              := IntToStr(0);
      end;

    ItemsNode                                       := PrimaryNode.AddChild('Items');
    if _R.EsParaKit then
      begin
//        agregar a los items la cantidad de kits remitidos   es un geter
//        agregar a los items El numero de preparacion cuando se unifican y siempre
//        recorrer los items y tomar el primero encontrado de cada preparación y con ese generar el concepto para el despacho finnegans
        _R.ItemsDeKit.First;
        while not _R.ItemsDeKit.IsLast do
          begin
            CurNode                                         := ItemsNode.AddChild('ItemProducto');
            CurNode.Attributes['Cantidad']                  := _R.ItemsDeKit.actual.CantidadDeKitsRemitidos; //_R.CantidadDeKitsRemitidos;
            if (_R.ItemsDeKit.actual.CantidadDeKitsRemitidos > 1) then
              DescripKit                                    := 'KITS '
            else
              DescripKit                                    := 'KIT ';
            if not _R.Empresa.EsExportacion then
              begin
                DescripKit                                  := DescripKit + Aplicacion.ParametrosDelSistema.DescripcionKit + ' ('+IntToStr(_R.ItemsDeKit.actual.PedidoDeVentaItem.CCPVNumero)+')' ;
                CurNode.Attributes['Descripcion']           := DescripKit;
              end
            else
              begin
                DescripKit                                  := DescripKit + Aplicacion.ParametrosDelSistema.DescriptionKit + ' ('+IntToStr(_R.ItemsDeKit.Actual.PedidoDeVentaItem.CCPVNumero)+')' ;
                CurNode.Attributes['Descripcion']           := DescripKit;
              end;

            nPrecio := _R.ItemsDeKit.actual.PedidoDeVentaItem.PedidoDeVenta.ImporteNetoDelPedido / _R.ItemsDeKit.Actual.PedidoDeVentaItem.PedidoDeVenta.CantidadDeKitsPedidos * _Prioridad ;
            CurNode.Attributes['Precio']                    := Aplicacion.TextService.ReemplazarEn( FloatToStr( nPrecio ) , ',', '.') ;
            CurNode.Attributes['Importe']                   := Aplicacion.TextService.ReemplazarEn( FloatToStr( nPrecio * _R.CantidadDeKitsRemitidos  ) , ',', '.') ;

            CurNode.Attributes['PrecioSobre']               := IntToStr(0);
    //        CurNode.Attributes['Producto']                  := 'KIT-'+ IntToStr(_R.ItemsDeKit.actual.PedidoDeVentaItem.CCPVNumero);
            CurNode.Attributes['Producto']                  := 'KIT';
            CurNode                                         := CurNode.AddChild('DimensionDistribucion');
            CurNode.Attributes['Dimension']                 := 'DIMCTC';
            CurNode.Attributes['Distribucion']              := 'Ventas';
           _R.ItemsDeKit.Next;
          end;

{        CurNode                                         := ItemsNode.AddChild('ItemProducto');
        CurNode.Attributes['Cantidad']                  := _R.CantidadDeKitsRemitidos;
        if (_R.CantidadDeKitsRemitidos > 1) then
          DescripKit                                := 'KITS '
        else
          DescripKit                                := 'KIT ';
        if not _R.Empresa.EsExportacion then
          begin
            DescripKit                                  := DescripKit + Aplicacion.ParametrosDelSistema.DescripcionKit + ' ('+IntToStr(_R.Items.actual.PedidoDeVentaItem.CCPVNumero)+')' ;
            CurNode.Attributes['Descripcion']           := DescripKit;
          end
        else
          begin
            DescripKit                                  := DescripKit + Aplicacion.ParametrosDelSistema.DescriptionKit + ' ('+IntToStr(_R.Items.actual.PedidoDeVentaItem.CCPVNumero)+')' ;
            CurNode.Attributes['Descripcion']           := DescripKit;
          end;
        nPrecio := _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.ImporteNetoDelPedido / _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.CantidadDeKitsPedidos * _Prioridad ;
        CurNode.Attributes['Precio']                    := Aplicacion.TextService.ReemplazarEn( FloatToStr( nPrecio ) , ',', '.') ;
        CurNode.Attributes['Importe']                   := Aplicacion.TextService.ReemplazarEn( FloatToStr( nPrecio * _R.CantidadDeKitsRemitidos  ) , ',', '.') ;

        CurNode.Attributes['PrecioSobre']               := IntToStr(0);
//        CurNode.Attributes['Producto']                  := 'KIT-'+ IntToStr(_R.Items.actual.PedidoDeVentaItem.CCPVNumero);
        CurNode.Attributes['Producto']                  := 'KIT';
        CurNode                                         := CurNode.AddChild('DimensionDistribucion');
        CurNode.Attributes['Dimension']                 := 'DIMCTC';
        CurNode.Attributes['Distribucion']              := 'Ventas';
}
      end
    else
      begin
        _R.Items.First;
        while not _R.Items.IsLast do
          begin

            CurNode                                         := ItemsNode.AddChild('ItemProducto');
            CurNode.Attributes['Cantidad']                  := _R.Items.actual.Cantidad;

            if not _R.Empresa.EsExportacion then
              begin
                if _R.Items.actual.Producto.EsFabricado then
                  begin
                    if ( _R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente > '' ) then
                      CurNode.Attributes['Descripcion']               := '['+_R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente + '] - ' + _R.Items.actual.Descripcion
                    else
                      CurNode.Attributes['Descripcion']               := _R.Items.actual.Producto.Codigo + ' - ' + _R.Items.actual.Descripcion;
                  end
                else
                  begin
                    if ( _R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente > '' ) then
                      CurNode.Attributes['Descripcion']               := '['+_R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente + '] - ' + _R.Items.actual.PedidoDeVentaItem.DescripcionDelItem
                    else
                      CurNode.Attributes['Descripcion']               := _R.Items.actual.Producto.Codigo + ' - ' + _R.Items.actual.PedidoDeVentaItem.DescripcionDelItem;
                  end;
              end
            else
              begin
                if _R.Items.actual.Producto.EsFabricado then
                  begin
                    if ( _R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente > '' ) then
                      CurNode.Attributes['Descripcion']               := '['+_R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente + '] - ' +_R.Items.actual.Producto.Fabricado.DescripcionParaExportacion
                    else
                      CurNode.Attributes['Descripcion']               := _R.Items.actual.Producto.Fabricado.DescripcionParaExportacion;
                  end
                else
                  if ( _R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente > '' ) then
                    CurNode.Attributes['Descripcion']               := '['+_R.Items.actual.PedidoDeVentaItem.CodigoProductoCliente + '] - ' + _R.Items.actual.Producto.Servicio.DescripcionParaExportacion
                  else
                    CurNode.Attributes['Descripcion']               := _R.Items.actual.Producto.Servicio.DescripcionParaExportacion;
              end;

            CurNode.Attributes['Importe']                   := Aplicacion.TextService.ReemplazarEn( FloatToStr(_R.Items.actual.Cantidad * _R.Items.actual.PedidoDeVentaItem.PrecioDeVenta * _Prioridad) , ',', '.') ;
            CurNode.Attributes['Precio']                    := Aplicacion.TextService.ReemplazarEn( FloatToStr(_R.Items.actual.PedidoDeVentaItem.PrecioDeVenta * _Prioridad) , ',', '.');
            CurNode.Attributes['PrecioSobre']               := IntToStr(0);
            if _R.Items.actual.Producto.EsFabricado then
              CurNode.Attributes['Producto']                  := _R.Items.actual.Producto.Fabricado.Articulo.Codigo
            else
              CurNode.Attributes['Producto']                  := _R.Items.actual.Producto.Codigo;
            CurNode                                         := CurNode.AddChild('DimensionDistribucion');
            CurNode.Attributes['Dimension']                 := 'DIMCTC';
            CurNode.Attributes['Distribucion']              := 'Ventas';
            _R.Items.Next;
          end;

        _R.Items.First;

      end;

    if _R.Items.IsLast then
      _R.Items.First;

    if _R.Empresa.EsExportacion then
      begin
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := '1';
        CurNode.Attributes['Moneda']                    := _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Moneda.CodigoTeamplace;
      end
    else
      begin
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := Aplicacion.TextService.ReemplazarEn( FloatToStrF( _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.MonedaCotizacion , ffNumber, 10, 3 ) , ',', '.') ;
        CurNode.Attributes['Moneda']                    := _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Moneda.CodigoTeamplace;
        CurNode                                         := PrimaryNode.AddChild('Cotizaciones');
        CurNode.Attributes['Cotizacion']                := Aplicacion.TextService.ReemplazarEn( FloatToStrF( Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar, _R.FechaDeEmision, True ), ffNumber, 10, 3 ) , ',', '.') ;
        CurNode.Attributes['Moneda']                    := Aplicacion.MonedaDolar.CodigoTeamplace;
      end;
    OpApholos := GetOperacionApholosWS;
    Respuesta := OpApholos.ImportarTransaccion('int', 'dnedri', 'BSA', 'APHOLOS', _ES.CodigoTeamplace ,XML.XML.Text);
    try
      XMLResp               := NewXMLDocument;
      XMLResp.Encoding      := 'utf-8';
      XMLResp.Options       := [doNodeAutoIndent];
      XMLResp.XML.Text      := FormatXMLData( Respuesta );
      XMLResp.Active        := True;
      REM                   := TRemitoEstadoDeMigracion.Create;
      REM.RemitoID          := _R.ID;
      REM.UsuarioID         := Aplicacion.Sesion.Usuario.ID;
      REM.EmpresaDestinoID  := _ES.ID;
      REM.FechaHora         := Aplicacion.DateTimeService.FechaHoraActual;
      CurNode               := XMLResp.ChildNodes.FindNode('Operaciones');
      CurNode               := CurNode.ChildNodes.FindNode('Operacion');
      REM.EstadoDeMigracion := (LowerCase( CurNode.Attributes['Resultado'] ) = 'true');
      Result                := REM.EstadoDeMigracion;
      if REM.EstadoDeMigracion then
        REM.DetalleDeError    := 'Migración OK.'
      else
        REM.DetalleDeError    := CurNode.Attributes['DetallesError'];
      REM.Save;
      _R.EstadosDeMigracion.Add(REM);
      _R.EstadosDeMigracion.ApplyUpdates;
    finally
      REM.NilObject;
      XMLResp := nil;
    end;

  finally
    XML           := nil;
    OpApholos     := nil;
    RootNode      := nil;
    PrimaryNode   := nil;
    ItemsNode     := nil;
    CurNode       := nil;
  end;
end;

function TRemito.FinnegansMigrarRemitoDeVenta(_R: TRemito): Boolean;
var
  PV                      : TPedidoDeVenta;
  ListaDePedidosRemitidos : TStringList;
  I                       : Integer;
begin
{
Nombre: Remito de venta local
Código: REMVTAL
Workflow: VENTASLOCAL

Nombre: Packing list
Código: PACKLIST
Workflow: VTASEXP

En empresa Tribeca
Nombre: Remito de venta Tribeca
Código: RTOEXT
Workflow: VTASEXT
}

  // Guardo una lista con los PedidoID que estoy remitiendo
  ListaDePedidosRemitidos := TStringList.Create;
  _R.Items.First;
  while not _R.Items.IsLast do
    begin
      if (ListaDePedidosRemitidos.IndexOf(IntToStr( _R.Items.actual.PedidoDeVentaItem.PedidoDeVentaID)) = -1) then
        ListaDePedidosRemitidos.Add( IntToStr( _R.Items.actual.PedidoDeVentaItem.PedidoDeVentaID) );
      _R.Items.Next;
    end;

  // Recorro los items del remito y envío
  _R.Items.First;
  if (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.ClienteTribecaID <> NullID) then
    begin
      if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
        Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente       , 1                                                          , Aplicacion.Sesion.EmpresaDeSistema       ,'PACKLIST', 'VTASEXP', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);

      if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaTribeca ) then
        Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca, Aplicacion.ParametrosDelSistema.CoeficienteDeEmpresaTribeca, Aplicacion.Sesion.EmpresaDeSistemaTribeca,'RTOEXT'  , 'VTASEXT', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoVendedorTribeca.Codigo);
    end
  else if _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.EsAutonumerado then
    begin
      if _R.Empresa.EsExportacion then
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente, (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.Prioridad/100)        , Aplicacion.Sesion.EmpresaDeSistema  ,'PACKLIST', 'VTASEXP', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaProf ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente, (1 - (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.Prioridad/100)  ), Aplicacion.Sesion.EmpresaDeSistemaProf ,'RTOEXT', 'VTASEXP', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);
        end
      else
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente, (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.Prioridad/100)        , Aplicacion.Sesion.EmpresaDeSistema  ,'REMVTAL' , 'VENTASLOCAL', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistemaProf ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Cliente, (1 - (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.Prioridad/100)  ), Aplicacion.Sesion.EmpresaDeSistemaProf ,'REMVTAL' , 'VENTASLOCAL', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);
        end;
    end
  else
    begin
      if _R.Empresa.EsExportacion then
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Empresa, 1, Aplicacion.Sesion.EmpresaDeSistema,'PACKLIST', 'VTASEXP', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo)
        end
      else
        begin
          if not EstaEnTeamplace( Aplicacion.Sesion.EmpresaDeSistema ) then
            Result := TRemito.FinnegansMigrarRemitoDeVenta(_R, _R.Empresa, 1, Aplicacion.Sesion.EmpresaDeSistema,'REMVTAL' , 'VENTASLOCAL', _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.GrupoDeVendedor.Codigo);
        end;
    end;

    // enviar items del pedido no remitibles para facturar
    for I := 0 to ListaDePedidosRemitidos.Count - 1 do
    Try
      PV := TPedidoDeVenta.Create;
      PV.load( StrToInt( ListaDePedidosRemitidos[I] )  );
      PV.ItemsNoRemitiblesFactPendientes.First;
      while not PV.ItemsNoRemitiblesFactPendientes.IsLast do
        begin
          PV.FinnegansMigrarPedidoDeVenta(PV);
          PV.ItemsNoRemitiblesFactPendientes.Next;
        end;
    Finally
      FreeAndNil(PV);
    End;
end;

procedure TRemito.FreeObjectFromMemory;
begin
  if assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  if assigned(FEstadoDeRemito) then
    FreeAndNil(FEstadoDeRemito);
  if assigned(FEmpresa) then
    FreeAndNil(FEmpresa);
  if assigned(FLicenciatario) then
    FreeAndNil(FLicenciatario);
  if assigned(FDepositoDeEntrega) then
    FreeAndNil(FDepositoDeEntrega);
  if assigned(FEmpresaFlete) then
    FreeAndNil(FEmpresaFlete);
  if assigned(FItems) then
    FreeAndNil(FItems);
  if assigned(FFacturas) then
    FreeAndNil(FFacturas);
  if assigned(FStateLogs) then
    FreeAndNil(FStateLogs);
  if assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  if assigned(FEmpresaApholos) then
    FEmpresaApholos.NilObject;
  if assigned(FTipoDeFormularioFacturacion) then
    FreeAndNil(FTipoDeFormularioFacturacion);
end;

function TRemito.GetCodigoInternoSifab: TEntero;
begin
  if isAssigned and (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Remito', 'NumeroRemito = ' + InttoStr(Numero), 'CodigoInternoRemito');
  Result := FCodigoInternoSifab;
end;

function TRemito.GetCondicionDeIva: TCondiciondeIVA;
begin
  if not assigned(FCondicionDeIva) then
    GetObject(TCondicionDeIva,FCondicionDeIva,CondicionDeIvaID);
  result := TCondicionDeIva(FCondicionDeIva);
end;

function TRemito.GetCondicionDeVenta: TCondicionDeVenta;
begin
  if not assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta,FCondicionDeVenta,CondicionDeVentaID);
  result := TCondicionDeVenta(FCondicionDeVenta);
end;

function TRemito.GetDepositoDeEntrega: TDeposito;
begin
  if not assigned(FDepositoDeEntrega) then
    GetObject(TDeposito, FDepositoDeEntrega, DepositoDeEntregaID);
  result := TDeposito(FDepositoDeEntrega);
end;

function TRemito.GetEmpresa : TEmpresa;
begin
  if not assigned(FEmpresa) then
    GetObject(TEmpresa,FEmpresa,EmpresaID);
  result := TEmpresa(FEmpresa);
end;

function TRemito.GetEmpresaApholos: TEmpresa;
begin
  if not Assigned(FEmpresaApholos) then
    FEmpresaApholos := Aplicacion.Empresa;
  Result := FEmpresaApholos
end;

function TRemito.GetEmpresaFlete: TEmpresa;
begin
  if not assigned(FEmpresaFlete) then
    GetObject(TEmpresa,FEmpresaFlete,EmpresaFleteID);
  result := TEmpresa(FEmpresaFlete);
end;

function TRemito.GetTalonarioTeamplace: TEntero;
const
  _TeamplaceTalonarioRemito  = '37';
  _TeamplaceTalonarioPacking = '66';
begin
  if ( FTalonarioTeamplace = -99 ) then
    if Empresa.EsExportacion then
      FTalonarioTeamplace := _TeamplaceTalonarioPacking
    else
      FTalonarioTeamplace := _TeamplaceTalonarioRemito;
  Result := FTalonarioTeamplace;
end;

function TRemito.GetTieneFacturaConfirmada: TBoolean;
begin
  // recorre las facturas y devuelve True si al menos una de las facturas está confirmada
  Result := false;
  if (Facturas.Count >0 ) then
    Begin
      Facturas.First;
      while not Facturas.IsLast do
        begin
          Result := (Facturas.Actual.EstadoDeFactura.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado);
          if Result then
            Break;
          Facturas.Next;
        end;
    End
  else
    begin
      Items.first;
      while not Items.IsLast do
        begin
          Result := (Items.Actual.PedidoDeVentaItem.CantidadFacturada >=  Items.Actual.Cantidad ) or
                    (Items.Actual.PedidoDeVentaItem.ImporteTotal = 0 );
          if Not Result then
            Break;
          Items.Next;
        end;
    end;
end;

function TRemito.GetTienePreFactura: TBoolean;
begin
  // recorre las facturas y devuelve True si al menos una de las facturas está en estado Grabado
  Result := false;
  if (Facturas.count = 0) then
    Exit;

  Facturas.First;
  while not Facturas.IsLast do
    begin
      Result := (Facturas.Actual.EstadoDeFactura.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado);
      if Result then
        Break;
      Facturas.Next;
    end;
end;

function TRemito.GetLicenciatario : TEmpresa;
begin
  if not assigned(FLicenciatario) then
    GetObject(TEmpresa,FLicenciatario,LicenciatarioID);
  result := TEmpresa(FLicenciatario);
end;

function TRemito.GetNumeroDeFacturaTeamplace: TString;
Var
  SqlQuery                : TUniQuery;
  ListaDePedidosRemitidos : TStringList;
  PV                      : TPedidoDeVenta;
  I                       : Integer;

  procedure QueryFactura( _IDTeamplace : TObjectID );
  Begin
    SqlQuery := TUniQuery.Create(Nil);
    SqlQuery.Connection := Aplicacion.Sesion.ConexionTeamPlace.Conexion;
    SqlQuery.Sql.Text := 'Select TransaccionID, NumeroDocumento, Fecha from BSTransaccion where TransaccionID in( ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Select distinct TransaccionDestino.TransaccionID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'From BSOperacion OperacionDestino ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSTRansaccion TransaccionDestino ON OperacionDestino.TransaccionID = TransaccionDestino.TransaccionID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItem Destino          ON OperacionDestino.TransaccionID = Destino.TransaccionID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItemCancelacion       ON Destino.OperacionItemID = BSOperacionItemCancelacion.OperacionItemIDDestino and BSOperacionItemCancelacion.activo = 1 ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItem Origen           ON BSOperacionItemCancelacion.OperacionItemIDOrigen = Origen.OperacionItemID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacion OperacionOrigen      ON Origen.TransaccionID           = OperacionOrigen.TransaccionID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSTRansaccion TransaccionOrigen  ON OperacionOrigen.TransaccionID  = TransaccionOrigen.TransaccionID ';
    SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Where TransaccionOrigen.TransaccionID = ' + IntToStr( _IDTeamplace ) + ')';
  End;

begin
  if (FNumeroDeFacturaTeamplace = Null) or (FNumeroDeFacturaTeamplace = '') then
    begin
      if not Aplicacion.ParametrosDelSistema.UpdateTeamplace then
        Exit;
      try
        FNumeroDeFacturaTeamplace := '';
        QueryFactura( IDTeamplace );
        SqlQuery.Open;
        if (SqlQuery.RecordCount > 0) then
          begin
            FNumeroDeFacturaTeamplace :=  SqlQuery.Fieldbyname('NumeroDocumento').AsString;
            FFechaDeFacturaTeamplace  :=  SqlQuery.Fieldbyname('Fecha').AsDateTime;
          end
        else
          begin
            // verifico si el pedido está facturado
            ListaDePedidosRemitidos := TStringList.Create;
            Items.First;
            while not Items.IsLast do
              begin
                if (ListaDePedidosRemitidos.IndexOf(IntToStr( Items.actual.PedidoDeVentaItem.PedidoDeVentaID)) = -1) then
                  ListaDePedidosRemitidos.Add( IntToStr( Items.actual.PedidoDeVentaItem.PedidoDeVentaID) );
                Items.Next;
              end;

            // enviar items del pedido no remitibles para facturar
            for I := 0 to ListaDePedidosRemitidos.Count - 1 do
              Try
                PV := TPedidoDeVenta.Create;
                PV.load( StrToInt( ListaDePedidosRemitidos[I] )  );
                QueryFactura( PV.IDTeamplace );
                SqlQuery.Open;
                if (SqlQuery.RecordCount > 0) then
                  begin
                    FNumeroDeFacturaTeamplace :=  SqlQuery.Fieldbyname('NumeroDocumento').AsString;
                    FFechaDeFacturaTeamplace  :=  SqlQuery.Fieldbyname('Fecha').AsDateTime;
                    Break;
                  end;
              Finally
                FreeAndNil(PV);
              End;
          end;

      finally
        SqlQuery.Close;
        FreeAndNil(SqlQuery);
      end;
    end;
  Result := FNumeroDeFacturaTeamplace;
end;

function TRemito.GetNumeroDePreparacion: TEntero;
Var
  RL : TRemitoList;
begin
  if ( FNumeroDePreparacion =0) or (FNumeroDePreparacion = Null) then
    Try
      RL := TRemitoList.CreateByUltimoNumeroDePreparacion;
      RL.First;
      if ( RL.Count=0) then
        FNumeroDePreparacion := 1
      else
        FNumeroDePreparacion := (RL.Actual.NumeroDePreparacion +1) ;
    Finally
      FreeAndNil(RL);
    End;

  Result := FNumeroDePreparacion;
end;

function TRemito.GetPackingList: TPackingList;
begin
  if not Assigned(FPackingList) then
    GetLIst(TPDlist(FPackingList),TPDlist(TPackingList.CreateByRemito(Self)));
  Result := FPackingList;
end;

function TRemito.GetLasPreFacturasEstanCanceladas: TBoolean;
begin
  if (Facturas.count = 0) then
    begin
      Result := False;
      Exit;
    end;

  Result := True;
  Facturas.First;
  while not Facturas.IsLast do
    begin
      Result := (Facturas.Actual.EstadoDeFactura.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cancelado);
      if not Result then
        Break;
      Facturas.Next;
    end;
end;

function TRemito.GetStateLogs: TRemitoStateLogList;
begin
  if not Assigned(FStateLogs) then
    GetLIst(TPDlist(FStateLogs),TPDlist(TRemitoStateLogList.CreateByRemito(self.id)));
  Result := FStateLogs;
end;

function TRemito.GetTipoDeFormularioFacturacion: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormularioFacturacion) then
    GetObject(TTipoDeFormulario,FTipoDeFormularioFacturacion, TipoDeFormularioFacturacionID);
  result := TTipoDeFormulario(FTipoDeFormularioFacturacion);
end;

function TRemito.GetTmpEstadoAnterior: TEstadoDeRemito;
begin
  if not Assigned(FTmpEstadoAnterior) then
    GetObject(TEstadoDeRemito,FTmpEstadoAnterior, TmpEstadoAnteriorID);
  result := TEstadoDeRemito(FTmpEstadoAnterior);
end;

procedure TRemito.LimpiarItemsDeMemoria;
begin
  If not assigned(FItems) Then
    FreeAndNil(FItems);
end;

function TRemito.ObtenerEstadoID(_Cod: String): TObjectID;
Var
  EL : TEstadoDeRemitoList;
Begin
  Result := NullID;
  Try
    EL := TEstadoDeRemitoList.CreateByCodigo(_Cod, False);
    if (El.Count = 0) then
      Raise Exception.Create('No existe el Estado de Remito: ' +  _Cod + ' en la tabla');
    Result := El.Actual.ID;
  Finally
    FreeAndNil (EL);
  End;
end;

//class function TRemito.CambiarEstadoEnSifab(_R: TRemito ; _CodigoEstado : Integer): Boolean;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  Result := Aplicacion.Sesion.ConexionSifab.Update_Field('Remito','CodigoInternoRemito =' + IntToStr(_R.CodigoInternoSifab), 'CodigoEstado', _CodigoEstado );
//end;

//class function TRemito.RemitirEnSifab(_R: TRemito): Boolean;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  Result := Aplicacion.Sesion.ConexionSifab.Update_Field('Remito','CodigoInternoRemito =' + IntToStr(_R.CodigoInternoSifab), 'FechaEntrega', Aplicacion.DateTimeService.FechaHoraActual );
//end;

Class Function TRemito.Reporte ( _R: TRemito ; _Imprimir : Boolean ) : String;
var
  Foto                  : String;
  frxReport             : TfrxReport;
  frxDBDtstReporte      : TfrxDBDataset;
  frxDBDtstReporteItems : TfrxDBDataset;
  Exportfilter          : TfrxCustomExportFilter;
  frxPDFExport          : TfrxPDFExport;
  frxRichObject         : TfrxRichObject;
  ClntDtStReporte       : TClientDataSet;
  ClntDtStReporteItems  : TClientDataSet;

  procedure CargarTitulos;
  begin
    if (_R.Empresa.Localidad.pais.ResourceLanguagePais.codigo = 'ES') then
      if FileExists( _R.TipoDeFormulario.ArchivoFD3TitulosES ) then
        frxReport.Variables.LoadFromFile( _R.TipoDeFormulario.ArchivoFD3TitulosES )
      else
        raise Exception.Create('Falta el archivo ' + _R.TipoDeFormulario.ArchivoFD3TitulosES);

    if (_R.Empresa.Localidad.Pais.ResourceLanguagePais.codigo = 'EN') then
      if FileExists( _R.TipoDeFormulario.ArchivoFD3TitulosEN ) then
        frxReport.Variables.LoadFromFile( _R.TipoDeFormulario.ArchivoFD3TitulosEN )
      else
        raise Exception.Create('Falta el archivo ' + _R.TipoDeFormulario.ArchivoFD3TitulosEN);

    if (_R.Empresa.Localidad.pais.ResourceLanguagePais.codigo = 'PO') then
      if FileExists( _R.TipoDeFormulario.ArchivoFD3TitulosPO ) then
        frxReport.Variables.LoadFromFile( _R.TipoDeFormulario.ArchivoFD3TitulosPO )
      else
        raise Exception.Create('Falta el archivo ' + _R.TipoDeFormulario.ArchivoFD3TitulosPO);
  end;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile( _R.TipoDeFormulario.ArchivoXMLCamposEncabezado );

    ClntDtStReporte.Open;

    frxDBDtstReporte := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;

    ClntDtStReporteItems := TClientDataSet.Create(nil);
    ClntDtStReporteItems.LoadFromFile( _R.TipoDeFormulario.ArchivoXMLCamposItems );
    ClntDtStReporteItems.Open;

    frxDBDtstReporteItems := TfrxDBDataset.Create(nil);
    frxDBDtstReporteItems.Name := 'frxDBDtstReporteItems';
    frxDBDtstReporteItems.DataSet := ClntDtStReporteItems;
    frxDBDtstReporteItems.Open;

    frxReport := TfrxReport.Create(nil);
    frxReport.LoadFromFile( _R.TipoDeFormulario.ArchivoReporte, True );
    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.DataSets.Add(frxDBDtstReporteItems);
    frxReport.Report.DataSets.Add(frxDBDtstReporte);
    frxReport.Report.DataSets.Add(frxDBDtstReporteItems);
    frxReport.PreviewOptions.Buttons := [pbZoom, pbFind, pbOutline, pbNavigator, pbPrint, pbExportQuick ];

    frxRichObject:= TfrxRichObject.Create(frxReport);
    frxPDFExport := TfrxPDFExport.Create(frxReport);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.PrintOptimized := True;
    frxPDFExport.OpenAfterExport := False;
    frxPDFExport.Outline := True;
    frxPDFExport.ProtectionFlags := [ePrint];

    frxPDFExport.Title := 'Recepcion de pedido';
    frxPDFExport.Author := Aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := _R.numeroFinal;
    frxPDFExport.Creator := Aplicacion.Nombre + ' ' + Aplicacion.Version + ' (' + _R.EmpresaApholos.Descripcion + ')';

    Exportfilter            := TfrxCustomExportFilter(frxPDFExport);
    ExportFilter.ShowDialog := False;
    ExportFilter.FileName := 'R' + IntToStr( _R.Numero ) + '.Pdf';

    CargarTitulos;
  end;

  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporteItems.EmptyDataSet;
    // cargo datos de cabecera
    ClntDtStReporte.Append;
    ClntDtStReporte.FieldByName('ID').AsInteger                 := _R.ID;
    ClntDtStReporte.FieldByName('FechaDeEmision').Value         := _R.FechaDeEmision;
    ClntDtStReporte.FieldByName('FechaDeImpresion').Value       := _R.FechaDeImpresion;
    ClntDtStReporte.FieldByName('Letra').AsString               := _R.TipoDeFormulario.Letra;
    ClntDtStReporte.FieldByName('CodigoFiscal').AsString        := _R.TipoDeFormulario.CodigoFiscal;
    ClntDtStReporte.FieldByName('NumeroDeRemito').AsString      := AnsiReplaceStr(_R.NumeroFinal, _R.TipoDeFormulario.Letra + '-', '');
    ClntDtStReporte.FieldByName('Vendedor').AsString            := _R.GrupoDeVendedor.Codigo + '-' + _R.GrupoDeVendedor.Descripcion;

    if (_R.LicenciatarioID <> NullID) then
      begin
        ClntDtStReporte.FieldByName('CodigoEmpresa').AsString       := _R.Licenciatario.Codigo;
        ClntDtStReporte.FieldByName('NombreEmpresa').AsString       := _R.Licenciatario.Descripcion;
        ClntDtStReporte.FieldByName('CUITEmpresa').AsString         := _R.Licenciatario.CUIT;
        ClntDtStReporte.FieldByName('DireccionEmpresa').AsString    := _R.Licenciatario.Domicilio;
        ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString := _R.Licenciatario.CodigoPostal;
        ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString    := _R.Licenciatario.Localidad.DescripcionConProvinciaYPais;
      end
    else
      begin
        ClntDtStReporte.FieldByName('CodigoEmpresa').AsString       := _R.Empresa.Codigo;
        ClntDtStReporte.FieldByName('NombreEmpresa').AsString       := _R.Empresa.Descripcion;
        ClntDtStReporte.FieldByName('CUITEmpresa').AsString         := _R.Empresa.CUIT;
        ClntDtStReporte.FieldByName('DireccionEmpresa').AsString    := _R.Empresa.Domicilio;
        ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString := _R.Empresa.CodigoPostal;
        ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString    := _R.Empresa.Localidad.DescripcionConProvinciaYPais;
      end;
    // datos de apholos
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := _R.EmpresaApholos.Descripcion;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := _R.EmpresaApholos.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := _R.EmpresaApholos.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalApholos').AsString := _R.EmpresaApholos.CodigoPostal;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := _R.EmpresaApholos.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('NroIngresosBrutos').AsString   := _R.EmpresaApholos.NumeroDeIngresosBrutos;
    ClntDtStReporte.FieldByName('FechaInicioActividades').Value := _R.EmpresaApholos.FechaInicioActividad;
    ClntDtStReporte.FieldByName('CondicionDeIVA').AsString      := _R.EmpresaApholos.CondicionDeIva.Descripcion;
    // datos de apholos
    // datos de Transportista
    ClntDtStReporte.FieldByName('Flete').AsString              := _R.EmpresaFlete.Descripcion;
    ClntDtStReporte.FieldByName('FleteCUIT').AsString          := _R.EmpresaFlete.Cuit;
    ClntDtStReporte.FieldByName('FleteDireccion').AsString     := _R.EmpresaFlete.Domicilio + ' - ' + _R.EmpresaFlete.Localidad.DescripcionConProvinciaYPais;
    // datos de Transportista
    ClntDtStReporte.FieldByName('DepositoDeEntrega').AsString  := _R.DepositoDeEntrega.Domicilio + ' - ' + _R.DepositoDeEntrega.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('HorariodeEntrega').AsString   := _R.HorarioDeEntrega;
    ClntDtStReporte.FieldByName('CondiciondeVenta').AsString   := _R.CondicionDeVenta.Descripcion;

    if _R.EsParaKit and (_R.CantidadDeKitsRemitidos >0) then
      Begin
        _R.Items.First;
        ClntDtStReporte.FieldByName('LeyendaKits').AsString      := 'El detalle corresponde a la cantidad de ' + IntToStr( _R.CantidadDeKitsRemitidos) + ' kits segun pedido de venta ' +  IntToStr(_R.Items.actual.CCPedidoDeVentaNumero ) ;
      End;

    ClntDtStReporte.FieldByName('TextoPieImpresion').AsString  := _R.TipoDeFormulario.PieImpresion;
    ClntDtStReporte.FieldByName('Observaciones').AsString      := _R.Observaciones;
    ClntDtStReporte.FieldByName('FechaVtoCAI').Value           := _R.FechaDeVtoCAI;
    ClntDtStReporte.FieldByName('CAI').AsString                := _R.CAI;
    ClntDtStReporte.Post;
    // cargo los items
    _R.Items.First;
    repeat
      ClntDtStReporteItems.Append;
      ClntDtStReporteItems.FieldByName('ID').Value                  := _R.Items.Actual.ID;
      ClntDtStReporteItems.FieldByName('Item').Value                := _R.Items.Actual.ItemNro;
      ClntDtStReporteItems.FieldByName('Cantidad').Value            := _R.Items.Actual.Cantidad;
      ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString   := _R.Items.Actual.Producto.codigo;
      ClntDtStReporteItems.FieldByName('Descripcion').AsString      := _R.Items.Actual.Descripcion;
      ClntDtStReporteItems.FieldByName('OrdenDeCompra').AsString    := _R.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.NroOrdenDeCompraCliente;
      ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString   := _R.Items.Actual.Producto.Fabricado.UnidadDeMedida.Codigo;
      ClntDtStReporteItems.FieldByName('CantidadDeBultos').Value    := _R.Items.Actual.CantidadDeBultos;
      ClntDtStReporteItems.FieldByName('PedidoItem').AsString       := IntToStr(_R.Items.Actual.PedidoDeVentaItem.CCPVNumero) + '/' + IntToStr(_R.Items.Actual.PedidoDeVentaItem.ItemNro);
      If (_R.Items.Actual.Producto.FabricadoID <> NullID) Then
        TGraphicField(ClntDtStReporteItems.FieldByName('ImagenArticulo')).LoadFromFile(_R.Items.Actual.Producto.archivoDeImagen);
      ClntDtStReporteItems.Post;
      _R.Items.Next;
    until _R.Items.IsLast;
  end;
  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(frxDBDtstReporteItems);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(ClntDtStReporteItems);
  end;
begin
 try
    Aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;
    if _Imprimir and (_R.EstadoDeRemito.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
      begin
        frxReport.PrintOptions.ShowDialog := False;
        frxReport.ShowProgress            := True;
        if (_R.TipoDeFormulario.ImpresoraDefaultID <> NullID) then
          frxReport.Report.PrintOptions.Printer    := _R.TipoDeFormulario.ImpresoraDefault.DireccionDeRed;
        if _R.Empresa.EsExportacion then
          frxReport.Report.PrintOptions.Copies := 1
        else if (_R.EmpresaFleteID = Aplicacion.Empresa.ID) then
          frxReport.Report.PrintOptions.Copies := 2
        else
          frxReport.Report.PrintOptions.Copies := 3;
        frxReport.PrepareReport;
        frxReport.Report.Print;
      end
    else
      begin
        if (_R.TipoDeFormulario.ImpresoraDefaultID <> NullID) then
          frxReport.Report.PrintOptions.Printer    := _R.TipoDeFormulario.ImpresoraDefault.DireccionDeRed;
        if not _R.TipoDeFormulario.EditarPorAdministrador then
          frxReport.ShowReport
        else
          frxReport.DesignReport;
      end
  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
  end;
end;

function TRemito.Save: Boolean;
begin
  If (EstadoDeRemitoID = NullID) then
    FEstadoDeRemitoID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado  );
  Result := Inherited Save;
  if Result then
    Begin
      if EsCambioDeEstado then
        AgregarNuevoEstadoAlLog;
      ActualizarItems;
    End;
  FTmpMoverStock     := True; // por si se usó false en alguna rutina
end;

procedure TRemito.SetCondicionDeIvaID(const Value: TObjectID);
begin
  if (FCondicionDeIvaID <> Value) and assigned( FCondicionDeIva ) then
    FreeAndNil(FCondicionDeIva);
  FCondicionDeIvaID := Value;
end;

procedure TRemito.SetCondicionDeVentaID(const Value: TObjectID);
begin
  if (Value<>FCondicionDeVentaID) and Assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  FCondicionDeVentaID := Value;
end;

procedure TRemito.SetDepositoDeEntregaID(const Value: TObjectID);
begin
  if (Value<>FDepositoDeEntregaID) and Assigned(FDepositoDeEntrega) then
    FreeAndNil(FDepositoDeEntrega);
  fDepositoDeEntregaID := Value;
end;

procedure TRemito.SetEmpresaFleteID(const Value: TObjectID);
begin
  if (Value<>FEmpresaFleteID) and Assigned(FEmpresaFlete) then
    FreeAndNil(FEmpresaFlete);
  fEmpresaFleteID := Value;
end;

procedure TRemito.SetEmpresaID(Value : TObjectID);
begin
  if (Value<>FEmpresaID) and Assigned(FEmpresa) then
    FreeAndNil(FEmpresa);
  FEmpresaID := Value;
end;

function TRemito.GetEstadoDeRemito : TEstadoDeRemito;
begin
  if not assigned(FEstadoDeRemito) then
    GetObject(TEstadoDeRemito,FEstadoDeRemito,EstadoDeRemitoID);
  result := TEstadoDeRemito(FEstadoDeRemito);
end;

function TRemito.GetEstadosDeMigracion: TRemitoEstadoDeMigracionList;
begin
  if FEstadosDeMigracion = nil then
    GetLIst(TPDlist(FEstadosDeMigracion),TPDlist(TRemitoEstadoDeMigracionList.CreateByRemito(Self)));
  Result := FEstadosDeMigracion;
end;

function TRemito.GetEstaEnSifab: TBoolean;
begin
  if (FEstaEnSifab = Null) then
    FEstaEnSifab := (CodigoInternoSifab <> 0);
  Result := FEstaEnSifab;
end;

class function TRemito.EstadoCumplidoID: TObjectID;
var
  ERL : TEstadoDeRemitoList;
begin
  Try
    Result := NullID;
    ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido );
    if (ERL.count = 0 ) then
      Raise exception.Create( 'No se encontró el parametro ' + QuotedStr( 'CodigoEstadoDocumento_Cumplido' ) );
    Result := ERL.actual.ID;
  Finally
    FreeAndNil( ERL);
  End;
end;

Class Function TRemito.EstadoRemitidoID: TObjectID;
var
  ERL : TEstadoDeRemitoList;
begin
  Try
    Result := NullID;
    ERL := TEstadoDeRemitoList.CreateByCodigo( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Remitido );
    if (ERL.count = 0 ) then
      Raise exception.Create( 'No se encontró el parametro ' + QuotedStr( 'CodigoEstadoDocumento_Remitido' ) );
    Result := ERL.actual.ID;
  Finally
    FreeAndNil( ERL);
  End;
end;

function TRemito.EstaEnTeamplace(_E: TEmpresaDeSistema): Boolean;
var
  RemitoID : Integer;
begin
  RemitoID := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(_E.IDTeamplace) + ')' , TRemitoDM._TeamplaceID );
  Result := ( RemitoID <> NullID);
end;

function TRemito.GetFacturas: TFacturaList;
begin
  if not Assigned(FFacturas) then
    GetLIst(TPDlist(FFacturas),TPDlist(TFacturaList.CreateByRemito(Self)));
  Result := FFacturas;
end;

function TRemito.GetFechaDeEstadoRemitido: TFechaHora;
begin
  if (FFechaDeEstadoRemitido = Null) then
    if (StateLogs.Count = 0) or (not StateLogs.FindEstadoRemitido) then
      FFechaDeEstadoRemitido := 0
    else
      FFechaDeEstadoRemitido := StateLogs.Actual.FechaHora;
  Result := FFechaDeEstadoRemitido;
end;

function TRemito.GetFechaDeFacturaTeamplace: TDateTime;
Var
  SqlQuery: TUniQuery;
begin
  if (FFechaDeFacturaTeamplace = Null) or (FFechaDeFacturaTeamplace = 0) then
    begin
      if not Aplicacion.ParametrosDelSistema.UpdateTeamplace then
        Exit;
      try
        FFechaDeFacturaTeamplace := 0;
        SqlQuery := TUniQuery.Create(Nil);
        SqlQuery.Connection := Aplicacion.Sesion.ConexionTeamPlace.Conexion;
        SqlQuery.Sql.Text := 'Select TransaccionID, NumeroDocumento, Fecha from BSTransaccion where TransaccionID in( ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Select distinct TransaccionDestino.TransaccionID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'From BSOperacion OperacionDestino ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSTRansaccion TransaccionDestino ON OperacionDestino.TransaccionID = TransaccionDestino.TransaccionID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItem Destino          ON OperacionDestino.TransaccionID = Destino.TransaccionID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItemCancelacion       ON Destino.OperacionItemID = BSOperacionItemCancelacion.OperacionItemIDDestino and BSOperacionItemCancelacion.activo = 1 ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacionItem Origen           ON BSOperacionItemCancelacion.OperacionItemIDOrigen = Origen.OperacionItemID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSOperacion OperacionOrigen      ON Origen.TransaccionID           = OperacionOrigen.TransaccionID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Inner Join BSTRansaccion TransaccionOrigen  ON OperacionOrigen.TransaccionID  = TransaccionOrigen.TransaccionID ';
        SqlQuery.Sql.Text := SqlQuery.Sql.Text + 'Where TransaccionOrigen.TransaccionID = ' + IntToStr( IDTeamplace ) + ')';
        SqlQuery.Open;
        if (SqlQuery.RecordCount > 0) then
          begin
            FFechaDeFacturaTeamplace :=  SqlQuery.Fieldbyname('Fecha').AsDateTime;
            FNumeroDeFacturaTeamplace :=  SqlQuery.Fieldbyname('NumeroDocumento').AsString;
          end;
      finally
        SqlQuery.Close;
        FreeAndNil(SqlQuery);
      end;
    end;
  Result := FFechaDeFacturaTeamplace;
end;

procedure TRemito.SetEstadoDeRemitoID(Value : TObjectID);
begin
  if (Value<>FEstadoDeRemitoID) and Assigned(FEstadoDeRemito) then
    FreeAndNil(FEstadoDeRemito);
  FEstadoDeRemitoID := Value;
end;


function TRemito.GetGrupoDeVendedor : TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor,FGrupoDeVendedor,GrupoDeVendedorID);
  result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

procedure TRemito.SetGrupoDeVendedorID(Value : TObjectID);
begin
  if (Value<>FGrupoDeVendedorID) and Assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

procedure TRemito.SetLicenciatarioID(const Value: TObjectID);
begin
  if (Value<>FLicenciatarioID) and Assigned(FLicenciatario) then
    FreeAndNil(FLicenciatario);
  FLicenciatarioID := Value;
end;

procedure TRemito.SetTipoDeFormularioFacturacionID(const Value: TObjectID);
begin
  if (FTipoDeFormularioFacturacionID <> Value) and assigned( FTipoDeFormularioFacturacion) then
    FreeAndNil( FTipoDeFormularioFacturacion);
  FTipoDeFormularioFacturacionID := Value;
end;

procedure TRemito.SetTmpEstadoAnteriorID(const Value: TObjectID);
begin
  if (FTmpEstadoAnteriorID <> Value) and assigned( FTmpEstadoAnterior ) then
    FreeAndNil(FTmpEstadoAnterior);
  FTmpEstadoAnteriorID := Value;
end;

function TRemito.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TRemitoDM._TeamplaceTableName, '(' +  TRemitoDM._TeamplaceNumeroDocumento + ' = ' + QuotedStr( NumeroFinal ) + ') and (' + TRemitoDM._TeamplaceEmpresaID + '=' + IntToStr(Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace) + ') and ('+ TRemitoDM._TeamplaceTalonarioID +' = '+ intTostr( TalonarioTeamplace ) + ')' , TRemitoDM._TeamplaceID );
  Result := FIDTeamplace;
end;

function TRemito.GetItems : TRemitoItemList;
begin
  if not assigned(FItems) then
    GetList(TPDList(FItems),TPDList(TRemitoItemList.CreateByRemito(self)));
  result := TRemitoItemList(FItems);
end;

function TRemito.GetItemsDeKit: TRemitoItemList;
var
  RI : TRemitoItem;
  NPrepAnterior : Integer;
begin
  If not Assigned(FItemsDeKit) Then
    begin
      FItemsDeKit := TRemitoItemList.CreateEmpty;
      Items.First;
      NPrepAnterior := 0;
      while not Items.Islast do
        begin
          if NPrepAnterior <> Items.Actual.NumeroDePreparacion then
            try
              NPrepAnterior := Items.Actual.NumeroDePreparacion;
              RI := TRemitoItem.Create;
              RI.Load(Items.Actual.ID);
              FItemsDeKit.Add(RI);
            finally
              RI.NilObject;
            end;
          Items.next;
        end;
      Items.First;
    end;
  Result := FItemsDeKit;
end;

 { TRemitoDM }
class function TRemitoDM.TableName : string;
begin
  Result := 'Remitos';
end;

class function TRemitoDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TRemitoDM.ID_FieldName : string;
begin
  Result := 'RemitoID';
end;

procedure TRemitoDM.PopulateFields(PDObject: TPDObject);
begin
  with TRemito(PDObject) do
    begin
      IntegerField[_NumeroDePreparacion] := NumeroDePreparacion; // No usar FNumeroDePreparacion para que haga el getter
      IDField[_TipoDeFormularioID]    := FTipoDeFormularioID;
      IDField[_EmpresaID]             := FEmpresaID;
      IDField[_EmpresaFleteID]        := FEmpresaFleteID;
      IDField[_LicenciatarioID]       := FLicenciatarioID;
      IDField[_GrupoDeVendedorID]     := FGrupoDeVendedorID;
      IDField[_DepositoDeEntregaID]   := FDepositoDeEntregaID;
      IDField[_EstadoDeRemitoID]      := FEstadoDeRemitoID;
      IDField[_CentroDeFacturacionID] := CentroDeFacturacionID;
      IDField[_CondicionDeVentaID]    := FCondicionDeVentaID;
      IDField[_CondicionDeIvaID]      := FCondicionDeIvaID;
      StringField[_HorarioDeEntrega]  := FHorarioDeEntrega;
      StringField[_NumeroDocumento]   := Numero;
      StringField[_Observaciones]     := FObservaciones;
      StringField[_CAI]               := FCAI;
      DateField[_FechaDeEmision]      := FFechaDeEmision;
      DateField[_FechaDeVtoCAI]       := FFechaDeVtoCAI;
      DateField[_FechaDeImpresion]    := FFechaDeImpresion;
      BooleanField[_EsParaKit]        := EsParaKit;
      IntegerField[_UnidadesPorKit]   := UnidadesPorKit;
      IntegerField[_CantidadDeKitsRemitidos]   := CantidadDeKitsRemitidos;
    end;
end;

procedure TRemitoDM.PopulateObject(PDObject: TPDObject);
begin
  with TRemito(PDObject) do
    begin
      FNumeroDePreparacion   := IntegerField[_NumeroDePreparacion];
      FTipoDeFormularioID    := IDField[_TipoDeFormularioID];
      FEmpresaID             := IDField[_EmpresaID];
      FEmpresaFleteID        := IDField[_EmpresaFleteID];
      FLicenciatarioID       := IDField[_LicenciatarioID];
      FGrupoDeVendedorID     := IDField[_GrupoDeVendedorID];
      FDepositoDeEntregaID   := IDField[_DepositoDeEntregaID];
      FEstadoDeRemitoID      := IDField[_EstadoDeRemitoID];
      FCentroDeFacturacionID := IDField[_CentroDeFacturacionID];
      FCondicionDeVentaID    := IDField[_CondicionDeVentaID];
      FCondicionDeIvaID      := IDField[_CondicionDeIvaID];
      FHorarioDeEntrega      := StringField[_HorarioDeEntrega];
      FFechaDeEmision        := DateField[_FechaDeEmision];
      Numero                 := StringField[_NumeroDocumento];
      FObservaciones         := StringField[_Observaciones];
      FCAI                   := StringField[_CAI];
      FFechaDeVtoCAI         := DateField[_FechaDeVtoCAI];
      FFechaDeImpresion      := DateField[_FechaDeImpresion];
      FEsParaKit             := BooleanField[_EsParaKit];
      FUnidadesPorKit        := IntegerField[_UnidadesPorKit];
      FCantidadDeKitsRemitidos := IntegerField[_CantidadDeKitsRemitidos];
    end;
end;

 { TRemitoList }
function TRemitoList.GetActual : TRemito;
begin
  Result := TRemito(CurrentObject);
end;

constructor TRemitoList.CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  Function IDsEstadosDeRemito: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeRemitoID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function WhereString : String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in(' + IDsEstadosDeRemito + ')';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll( False, WhereString ));
end;

constructor TRemitoList.CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FechaDesde, _FechaHasta: String);
  Function Condicion1: String;
  begin
    Result := '((( ' + TRemitoDM.TableName+'.'+TRemitoDM._EmpresaID + ' = ' + IntToStr(_C.ID)+ ' ) ' ;
    Result := Result + ' and (' + TRemitoDM.TableName+'.'+TRemitoDM._LicenciatarioID + ' is Null))';
    Result := Result + ' or (' + TRemitoDM.TableName+'.'+TRemitoDM._LicenciatarioID + ' = ' + IntToStr(_C.ID)+ ' )) ' ;
  end;
  Function Condicion2: String;
  begin
    Result := ' ( ' + TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ' ) ';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, Condicion1 + ' And ' + Condicion2));
end;

constructor TRemitoList.CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeRemito(_C: TCliente; _FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '((( ' + TRemitoDM.TableName+'.'+TRemitoDM._EmpresaID + ' = ' + IntToStr(_C.ID)+ ' ) ' ;
    Result := Result + ' and (' + TRemitoDM.TableName+'.'+TRemitoDM._LicenciatarioID + ' is Null))';
    Result := Result + ' or (' + TRemitoDM.TableName+'.'+TRemitoDM._LicenciatarioID + ' = ' + IntToStr(_C.ID)+ ' )) ' ;
    Result := Result + ' and (' + TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
    Result := Result + ' and ( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy: String;
  begin
    Result := TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByEstados(_Est: String);
  Function WhereString : String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in(' + _Est + ')';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll( False, WhereString ));
end;

constructor TRemitoList.CreateByEstadosAndTipoDeCliente(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsExportacion: Boolean);
  Function CondicionExpoLocal : String;
  begin
    Result := '( ' + TRemitoDM.TableName + '.' + TRemitoDM._EmpresaID;
    Result := Result + ' in( Select ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName;
    Result := Result + ' where ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._localidadID + ' in( Select ' + TLocalidadDM.TableName + '.' + TLocalidadDM.ID_FieldName + ' from ';
    Result := Result + TLocalidadDM.TableName + ' where ' + TLocalidadDM.TableName + '.' + TLocalidadDM._ProvinciaID + ' in( Select ' + TProvinciaDM.TableName + '.' + TProvinciaDM.ID_FieldName + ' from ';
    if _EsExportacion then
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' <> ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )'
    else
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' = ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )';
  end;
  Function IDsEstadosDeRemito: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeRemitoID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function WhereString : String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in(' + IDsEstadosDeRemito + ')';
    Result := Result + ' and ' + CondicionExpoLocal;
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll( False, WhereString ));
end;

constructor TRemitoList.CreateByEstadosAndTipoDeCliente(_Est: String; _EsExportacion: Boolean);
  Function CondicionExpoLocal : String;
  begin
//LocalidadID in (select LocalidadID from Localidades where ProvinciaID in ( select ProvinciaID from Provincias where PaisID <> 100000011))
    Result := '( ' + TRemitoDM.TableName + '.' + TRemitoDM._EmpresaID;
    Result := Result + ' in( Select ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName;
    Result := Result + ' where ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._localidadID + ' in( Select ' + TLocalidadDM.TableName + '.' + TLocalidadDM.ID_FieldName + ' from ';
    Result := Result + TLocalidadDM.TableName + ' where ' + TLocalidadDM.TableName + '.' + TLocalidadDM._ProvinciaID + ' in( Select ' + TProvinciaDM.TableName + '.' + TProvinciaDM.ID_FieldName + ' from ';
    if _EsExportacion then
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' <> ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )'
    else
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' = ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )';
  end;
  Function WhereString : String;
  begin
    Result := '( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in(' + _Est + ') )' ;
    Result := Result + ' and ' + CondicionExpoLocal;
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll( False, WhereString ));
end;

constructor TRemitoList.CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;
  Function OrderBy : String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TRemito,TRemitoDM.CreateAll(False,WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByFechaDesdeFechaHastaAndEstadosDeRemito(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if Assigned(_EstadosID) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (' + _EstadosID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision + ' Desc,' + TRemitoDM.TableName + '.' + TRemitoDM._NumeroDocumento + ' Desc'
    else
      Result := TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision  +','+ TRemitoDM.TableName + '.' + TRemitoDM._NumeroDocumento;
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByGrupoDeVendedoresAndFechaDesdeFechaHasta(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String);
  Function Condicion1: String;
  begin
    Result := ' (' + TRemitoDM.TableName + '.' +  TRemitoDM._GrupoDeVendedorID + ' in (';
    _GVL.First;
    while Not _GVL.IsLast do
      begin
        Result := Result + IntToStr(  _GVL.Actual.ID ) +', ';
        _GVL.Next;
      end;
    Result := Result + '-1)) ';
  end;

  Function Condicion2: String;
  begin
    Result := ' and (' + TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
  end;
begin
 inherited Create(TRemito, TRemitoDM.CreateAll(False, Condicion1 + Condicion2));
end;

constructor TRemitoList.CreateByGrupoDeVendedoresAndFechaDesdeFechaHastaAndEstadosDeRemito(_GVL: TGrupoDeVendedorList; _FechaDesde, _FechaHasta: String;
  _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := ' (' + TRemitoDM.TableName + '.' +  TRemitoDM._GrupoDeVendedorID + ' in (';
    _GVL.First;
    while Not _GVL.IsLast do
      begin
        Result := Result + IntToStr(  _GVL.Actual.ID ) +', ';
        _GVL.Next;
      end;
    Result := Result + '-1)) ';

    Result := Result + ' and ( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
    Result := Result + ' and (' + TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision + ' between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' and ' + QuotedStr(_FechaHasta + _UltimaHora) + ')';
  end;
  Function OrderBy: String;
  begin
    Result := TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' Desc';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByNumeroDesdeNumeroHasta(_NumeroDesde, _NumeroHasta: Integer; _Descendente, _FitrarPorVendedor: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TRemitoDM.TableName + '.' + TRemitoDM._NumeroDocumento + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';
  end;

  Function OrderByString: String;
  begin
    Result := TRemitoDM.TableName+'.'+ TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' Desc';
  end;
begin
  inherited Create(TRemito,TRemitoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TRemitoList.CreateByNumeroDesdeNumeroHastaAndEstadosDeRemito(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TRemitoDM.TableName + '.' + TRemitoDM._NumeroDocumento + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';
    Result := Result + ' and ( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy : String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByPedidoDeVenta(_P: TPedidoDeVenta);
  Function WhereString : String;
    begin
      Result := TRemitoDM.TableName + '.' + TRemitoDM.ID_FieldName + ' in ( Select ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._RemitoID;
      Result := Result + ' from '   + TRemitoItemDM.TableName + ' where ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID + ' in ( ';
      Result := Result + ' select ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' from ' + TPedidoDeVentaItemDM.TableName;
      Result := Result + ' where '  + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( select ' + TPedidoDeVentaDM.ID_FieldName + ' from  ' + TPedidoDeVentaDM.TableName;
      Result := Result + ' where '  + TPedidoDeVentaDM._numero + ' = ' + IntToStr( _P.Numero ) + ' )))';
    end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString, False));
end;

constructor TRemitoList.CreateByPedidoDeVentaAndEstadosDeRemito(_P: TPedidoDeVenta;_EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM.ID_FieldName + ' in ( Select ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._RemitoID;
    Result := Result + ' from '   + TRemitoItemDM.TableName + ' where ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID + ' in ( ';
    Result := Result + ' select ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName + ' from ' + TPedidoDeVentaItemDM.TableName;
    Result := Result + ' where '  + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( select ' + TPedidoDeVentaDM.ID_FieldName + ' from  ' + TPedidoDeVentaDM.TableName;
    Result := Result + ' where '  + TPedidoDeVentaDM._numero + ' = ' + IntToStr( _P.Numero ) + ' )))';

    Result := Result + ' and ( ' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ', ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy: String;
  begin
    Result := TRemitoDM.TableName+'.'+TRemitoDM._FechaDeEmision;
    if _Descendente then
      Result := Result + ' Desc';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TRemitoList.CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
  Function WhereString: String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM.ID_FieldName + ' in (select ' + TRemitoItemDM.TableName + '.' +  TRemitoItemDM._RemitoID  + ' from ';
    Result := Result + TRemitoItemDM.TableName + ' where ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID  + ' = ' +  IntToStr(_PVI.ID) + ' )';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString));
end;

constructor TRemitoList.CreateByPedidoDeVentaItemAndEstadoDeRemitoCodigo(_PVI: TPedidoDeVentaItem; _CodigoEstado: TString);
  Function WhereString: String;
  begin
    Result := TRemitoDM.TableName + '.' + TRemitoDM.ID_FieldName + ' in (select ' + TRemitoItemDM.TableName + '.' +  TRemitoItemDM._RemitoID  + ' from ';
    Result := Result + TRemitoItemDM.TableName + ' where ' + TRemitoItemDM.TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID  + ' = ' +  IntToStr(_PVI.ID) + ' )';
    Result := Result + ' and (' + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID + ' in (select '+ TEstadoDeRemitoDM.ID_FieldName + ' from ' + TEstadoDeRemitoDM.TableName + ' where ' + TEstadoDeRemitoDM._Codigo + ' = ' + quotedStr( _CodigoEstado ) +'))';
  end;
begin
  inherited Create(TRemito, TRemitoDM.CreateAll(False, WhereString));
end;

constructor TRemitoList.CreateByUltimoNumero;
begin
  inherited Create(TRemito, TRemitoDM.CreateTop(1, '', TRemitoDM._NumeroDocumento + ' Desc '));
end;

constructor TRemitoList.CreateByUltimoNumeroDePreparacion;
begin
  inherited Create(TRemito, TRemitoDM.CreateTop(1, '', TRemitoDM._NumeroDePreparacion + ' Desc '));
end;

function TRemitoList.CreateNewObject: TPDObject;
begin
  result := TRemito.Create;
end;

constructor TRemitoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TRemito,TRemitoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TRemitoItem }
//class function TRemitoItem.ActualizarFacturaEnSifab(_RI: TRemitoItem; _CodigoInternoFactura: Integer): Boolean;
//begin
//  Result := Aplicacion.Sesion.ConexionSifab.Update_Field('RemitoItem','CodigoInternoRemito =' + IntToStr(_RI.Remito.CodigoInternoSifab) + ' and CodigoItemRemito =' + IntToStr(_RI.ItemNro)  , 'CodigoInternoComprobanteFacturacion', _CodigoInternoFactura );
//  Result := Aplicacion.Sesion.ConexionSifab.Update_Field('Remito','CodigoInternoRemito =' + IntToStr(_RI.Remito.CodigoInternoSifab)  , 'CodigoInternoComprobanteFacturacion', _CodigoInternoFactura );
//end;

constructor TRemitoItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TRemitoItemDM);
  FRemitoID         := nullID;
  FCantidadDeBultos := null;
  FCantidad         := null;
  FEsFacturable     := null;
  FItemNro          := null;
  FDescripcion      := null;
  FProductoID       := NullID;
  FPedidoDeVentaItemID := NullID;
  FTmpMoverStock    := True;
  FUnidadesPorPrenda       := -1;
  FCantidadDeKitsRemitidos := -1;
end;


function TRemitoItem.GetCantidadDeKitsRemitidos: TEntero;
begin
  if (FCantidadDeKitsRemitidos = -1 ) then
    if (UnidadesPorPrenda >0) then
      FCantidadDeKitsRemitidos := Cantidad / UnidadesPorPrenda / PedidoDeVentaItem.TipoDePedidoDeVenta.UnidadesPorKitDefault
    else
      FCantidadDeKitsRemitidos := 0;
  Result := FCantidadDeKitsRemitidos;
end;

function TRemitoItem.GetPedidoDeVentaItem: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) then
    GetObject(TPedidoDeVentaItem, FPedidoDeVentaItem, PedidoDeVentaItemID);
  result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

function TRemitoItem.GetProducto: TProducto;
begin
  if not assigned(FProducto) and ((ProductoID <> NullID) or ( ProductoID <> Null )) then
    GetObject(TProducto, FProducto, ProductoID);
  result := TProducto(FProducto);
end;

function TRemitoItem.GetProductoID: TObjectID;
begin
  If ((FProductoID = NullId ) or (FProductoID = Null) ) and (PedidoDeVentaItemID <> NullID ) then
    FProductoID := PedidoDeVentaItem.ProductoID;

  Result := FProductoID;
end;

function TRemitoItem.GetRemito: TRemito;
begin
  if not assigned(FRemito) then
    GetObject(TRemito, FRemito, FRemitoID);
  result := TRemito(FRemito);
end;

function TRemitoItem.GetTmpEstadoDeRemito: TEstadoDeRemito;
begin
  if not assigned(FTmpEstadoDeRemito) and ((FTmpEstadoDeRemitoID <> NullID) or ( FTmpEstadoDeRemitoID <> Null )) then
    GetObject(TEstadoDeRemito, FTmpEstadoDeRemito, FTmpEstadoDeRemitoID);
  result := TEstadoDeRemito(FTmpEstadoDeRemito);
end;

function TRemitoItem.GetTmpEstadoDeRemitoID: TObjectID;
begin
  If (FTmpEstadoDeRemitoID = NullID ) and Assigned(Remito) then
    FTmpEstadoDeRemitoID := Remito.EstadoDeRemitoID;
  Result := FTmpEstadoDeRemitoID;
end;

function TRemitoItem.GetTmpEstadoDeRemitoOrigen: TEstadoDeRemito;
begin
  if not assigned(FTmpEstadoDeRemitoOrigen) and ((FTmpEstadoDeRemitoOrigenID <> NullID) or ( FTmpEstadoDeRemitoOrigenID <> Null )) then
    GetObject(TEstadoDeRemito, FTmpEstadoDeRemitoOrigen, FTmpEstadoDeRemitoOrigenID);
  result := TEstadoDeRemito(FTmpEstadoDeRemitoOrigen);
end;

function TRemitoItem.GetTmpEstadoDeRemitoOrigenID: TObjectID;
begin
  If (FTmpEstadoDeRemitoOrigenID = NullID ) and Assigned(Remito) then
    FTmpEstadoDeRemitoOrigenID := Remito.EstadoDeRemitoID;
  Result := FTmpEstadoDeRemitoOrigenID;
end;

function TRemitoItem.GetTmpTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTmpTipoDeFormulario) and ((FTmpTipoDeFormularioID <> NullID) or ( FTmpTipoDeFormularioID <> Null )) then
    GetObject(TTipoDeFormulario, FTmpTipoDeFormulario, FTmpTipoDeFormularioID);
  result := TTipoDeFormulario(FTmpTipoDeFormulario);
end;

function TRemitoItem.GetTmpTipoDeFormularioID: TObjectID;
begin
  If (TmpTipoDeFormularioID = NullID ) and Assigned(Remito) then
    TmpTipoDeFormularioID := Remito.TipoDeFormularioID;
  Result := TmpTipoDeFormularioID;
end;

function TRemitoItem.GetUnidadesPorPrenda: TEntero;
begin
  if (FUnidadesPorPrenda = -1) then
    FUnidadesPorPrenda := PedidoDeVentaItem.UnidadesPorPrenda;
  Result := FUnidadesPorPrenda;
end;

function TRemitoItem.Save: Boolean;
begin
  if (FTmpTipoDeFormularioID = NullID) or (FTmpEstadoDeRemitoID = NullID) then
    Raise exception.create('La propiedades temporales (TmpTipoDeFormularioID, FTmpEstadoDeRemitoID)'+#10#13+'deben asignarse en los ítems en tiempo de diseño.');

  if (FTmpEstadoDeRemitoID <> Remito.EstadoDeRemitoID) then
    if TmpTipoDeFormulario.AccionesDeStock.FindEstadoDeRemitoOrigenYDestinoID(TmpEstadoDeRemitoOrigenID, TmpEstadoDeRemitoID) and (Cantidad > 0) then
      if (PedidoDeVentaItemID <> NullID ) then
        begin
          if Producto.EsStockeable and ( TmpMoverStock ) then
            if PedidoDeVentaItem.PedidoDeVenta.ClienteTribecaID <> NullID then
              Aplicacion.StockManager.MoverStock( TmpTipoDeFormulario,
                                                  PedidoDeVentaItem.PedidoDeVenta.NumeroFinal,
                                                  PedidoDeVentaItem.ItemNro,
                                                  TmpTipoDeFormulario.AccionesDeStock.Actual.TipoDeMovimientoDeStock,
                                                  PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.DepositoVirtualDeStockID,
                                                  ProductoID,
                                                  Cantidad,
                                                  PedidoDeVentaItemID )
            else
              Aplicacion.StockManager.MoverStock( TmpTipoDeFormulario,
                                                  PedidoDeVentaItem.PedidoDeVenta.NumeroFinal,
                                                  PedidoDeVentaItem.ItemNro,
                                                  TmpTipoDeFormulario.AccionesDeStock.Actual.TipoDeMovimientoDeStock,
                                                  PedidoDeVentaItem.PedidoDeVenta.Cliente.DepositoVirtualDeStockID,
                                                  ProductoID,
                                                  Cantidad,
                                                  PedidoDeVentaItemID );
        end
      else
        begin
          if Producto.EsStockeable and ( TmpMoverStock ) then
            Aplicacion.StockManager.MoverStock( TmpTipoDeFormulario,
                                                '',
                                                0,
                                                TmpTipoDeFormulario.AccionesDeStock.Actual.TipoDeMovimientoDeStock,
                                                NullID,
                                                ProductoID,
                                                Cantidad,
                                                NullID ) ;
        end;
  Result := inherited Save;
  FTmpMoverStock     := True; // por si se usó false en alguna rutina
end;

procedure TRemitoItem.SetPedidoDeVentaItemID(Value : TObjectID);
begin
  if (Value<>FPedidoDeVentaItemID) and Assigned(FPedidoDeVentaItem) then
    FreeAndNil(FPedidoDeVentaItem);
  FPedidoDeVentaItemID := Value;
end;

procedure TRemitoItem.SetProductoID(Value : TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);

  FProductoID := Value;

end;
 procedure TRemitoItem.SetTmpEstadoDeRemitoID(const Value: TObjectID);
begin
  If Assigned( FTmpEstadoDeRemito ) and (FTmpEstadoDeRemitoID <> Value) then
    FreeAndNil( FTmpEstadoDeRemito);
  FTmpEstadoDeRemitoID := Value;
end;

procedure TRemitoItem.SetTmpEstadoDeRemitoOrigenID(const Value: TObjectID);
begin
  If Assigned( FTmpEstadoDeRemitoOrigen ) and (FTmpEstadoDeRemitoOrigenID <> Value) then
    FreeAndNil( FTmpEstadoDeRemitoOrigen );
  FTmpEstadoDeRemitoID := Value;
end;

procedure TRemitoItem.SetTmpTipoDeFormularioID(const Value: TObjectID);
begin
  If Assigned( FTmpTipoDeFormulario ) and (FTmpTipoDeFormularioID <> Value) then
    FreeAndNil( FTmpTipoDeFormulario);
  FTmpTipoDeFormularioID := Value;
end;

{ TRemitoItemDM }
class function TRemitoItemDM.TableName : string;
begin
  Result := 'RemitoItems';
end;


class function TRemitoItemDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CamposTablaItems, CamposTablaRemitos, CamposTablaFabricados, CamposTablaServicios : string;
    CamposTablaPedidoDeVentaItems, CamposTablaPedidosDeVenta : String;
    CamposTablaEmpresas , CamposTablaGrupoDeVendedor : string;
    CamposTablaLicenciatarios : string;
    CamposTablaCentroDeFacturacion, CamposProductos, CamposTablaEstadosDeRemito :String;
  begin
    CamposTablaItems   := TRemitoItemDM.TableName + '.*';

    CamposTablaRemitos :=                      TRemitoDM.TableName + '.' + TRemitoDM._NumeroDocumento      + ' AS ' + _CCRNumero               + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._Observaciones        + ' AS ' + _CCRObservaciones        + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._CondiciondeVentaID   + ' AS ' + _CCRCondiciondeVentaID   + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._FechaDeEmision       + ' AS ' + _CCRFechaDeEmision       + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._FechaDeImpresion     + ' AS ' + _CCRFechaDeImpresion     + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._EmpresaID            + ' AS ' + _CCREmpresaID            + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._EmpresaFleteID       + ' AS ' + _CCREmpresaFleteID       + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._LicenciatarioID      + ' AS ' + _CCRLicenciatarioID      + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._GrupoDeVendedorID    + ' AS ' + _CCRGrupoDeVendedorID    + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._DepositoDeEntregaID  + ' AS ' + _CCRDirecciondeEntregaID + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._TipoDeFormularioID   + ' AS ' + _CCRTipoDeFormularioID   + ', ';
    CamposTablaRemitos := CamposTablaRemitos + TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID     + ' AS ' + _CCREstadoDeRemitoID;

    CamposTablaPedidoDeVentaItems := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro  + ' AS ' + _CCPedidoDeVentaItemItemNro;
    CamposTablaPedidosDeVenta     := TPedidoDeVentaDM.TableName     + '.' + TPedidoDeVentaDM._numero       + ' AS ' + _CCPedidoDeVentaNumero;

    CamposProductos := ' ISNULL('+ TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo + ',' + TServicioDM.TableName + '.' + TServicioDM._Codigo + ') as '+ _CCPCodigoDeProducto;

    CamposTablaCentroDeFacturacion := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM._codigo   + ' as ' + _CCCentroDeFacturacionCodigo;

    CamposTablaFabricados :=                         TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID    + ' as ' + _CCFBarticuloID    + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID       + ' as ' + _CCFBcunioID       + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' as ' + _CCFBterminacionID + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM.ID_FieldName   + ' as ' + _CCFBFabricadoID   + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo        + ' as ' + _CCFBCodigo        + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Crc           + ' as ' + _CCFBCrc           + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._desarrolloID  + ' as ' + _CCFBDesarrolloID  + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Descripcion   + ' as ' + _CCFBDescripcion;

    CamposTablaServicios :=                        TServicioDM.TableName + '.' + TServicioDM._Codigo      + ' as ' + _CCServicioCodigo      + ', ';
//    CamposTablaServicios := CamposTablaServicios + TServicioDM.TableName + '.' + TServicioDM._Codigo      + ' as ' + _CCServicioCodigoSifab + ', ';
    CamposTablaServicios := CamposTablaServicios + TServicioDM.TableName + '.' + TServicioDM._Descripcion + ' as ' + _CCServicioDescripcion;

    CamposTablaEmpresas :=                       TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCClienteCodigo + ', ';
    CamposTablaEmpresas := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCClienteDescripcion;

    CamposTablaLicenciatarios  :=                             'L.' + TAbstractEmpresaDM._Codigo       + ' as ' + _CCLicenciatarioCodigo + ', ';
    CamposTablaLicenciatarios  := CamposTablaLicenciatarios + 'L.' + TAbstractEmpresaDM._Descripcion  + ' as ' + _CCLicenciatarioDescripcion;

    CamposTablaEstadosDeRemito :=                              TEstadoDeRemitoDM.TableName + '.'+ TEstadoDeRemitoDM._Codigo      + ' as ' + _CCEstadoDeRemitoCodigo + ', ';
    CamposTablaEstadosDeRemito := CamposTablaEstadosDeRemito + TEstadoDeRemitoDM.TableName + '.'+ TEstadoDeRemitoDM._Descripcion + ' as ' + _CCEstadoDeRemitoDescripcion;

    CamposTablaGrupoDeVendedor        := TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Descripcion + ' as ' + _CCGrupoDeVendedorDescripcion;


    Result :=          CamposTablaItems                  + ', ';
    Result := Result + CamposTablaRemitos                + ', ';
    Result := Result + CamposTablaPedidoDeVentaItems     + ', ';
    Result := Result + CamposTablaPedidosDeVenta         + ', ';
    Result := Result + CamposTablaFabricados             + ', ';
    Result := Result + CamposTablaServicios              + ', ';
    Result := Result + CamposProductos                   + ', ';
    Result := Result + CamposTablaEmpresas               + ', ';
    Result := Result + CamposTablaLicenciatarios         + ', ';
    Result := Result + CamposTablaEstadosDeRemito        + ', ';
    Result := Result + CamposTablaCentroDeFacturacion    + ', ';
    Result := Result + CamposTablaGrupoDeVendedor;

  end;

  Function LeftJoinString : String;
  var
    ID1TablaItems, ID2TablaItems, ID3TablaItems : String;
    IDTablaRemitos, ID1TablaRemitos, ID2TablaRemitos, ID3TablaRemitos, ID4TablaRemitos, ID5TablaRemitos, ID6TablaRemitos : String;
    IDTablaPedidoDeVentaItems, ID1TablaPedidoDeVentaItems , IDTablaPedidos: String;
    IDTablaFabricados, ID1TablaFabricados, ID2TablaFabricados, ID3TablaFabricados: String;
    IDTablaEmpresas, IDTablaEstadosDeRemito: string;
    IDTablaServicios, IDTablaGruposDeVendedor , IDTablaLicenciatarios :String;
    IDTablaCentroDeFacturacion  : String;

  begin
    ID1TablaItems                 := TableName + '.' + TRemitoItemDM._RemitoID;
    ID2TablaItems                 := TableName + '.' + TRemitoItemDM._ProductoID;
    ID3TablaItems                 := TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID;

    IDTablaRemitos                := TRemitoDM.TableName + '.' + TRemitoDM.ID_FieldName;
    ID1TablaRemitos               := TRemitoDM.TableName + '.' + TRemitoDM._EstadoDeRemitoID;
    ID2TablaRemitos               := TRemitoDM.TableName + '.' + TRemitoDM._EmpresaID;
    ID3TablaRemitos               := TRemitoDM.TableName + '.' + TRemitoDM._LicenciatarioID;
    ID4TablaRemitos               := TRemitoDM.TableName + '.' + TRemitoDM._GrupoDeVendedorID;
    ID6TablaRemitos               := TRemitoDM.TableName + '.' + TRemitoDM._CentroDeFacturacionID;
    IDTablaPedidoDeVentaItems     := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM.ID_FieldName;
    ID1TablaPedidoDeVentaItems    := TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID;
    IDTablaPedidos                := TPedidoDeVentaDM.TableName + '.' + TPedidoDeVentaDM.ID_FieldName;
    IDTablaFabricados             := TFabricadoDM.TableName     + '.' + TFabricadoDM._ProductoID;
    ID1TablaFabricados            := TFabricadoDM.TableName     + '.' + TFabricadoDM._CunioID;
    ID2TablaFabricados            := TFabricadoDM.TableName     + '.' + TFabricadoDM._ArticuloID;
    ID3TablaFabricados            := TFabricadoDM.TableName     + '.' + TFabricadoDM._TerminacionID;
    IDTablaServicios              := TServicioDM.TableName      + '.' + TServicioDM._ProductoID;
    IDTablaEmpresas               := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName;
    IDTablaLicenciatarios         := 'L.' + TAbstractEmpresaDM.ID_FieldName;
    IDTablaEstadosDeRemito        := TEstadoDeRemitoDM.TableName + '.' + TEstadoDeremitoDM.ID_FieldName;
    IDTablaGruposDeVendedor       := TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDTablaCentroDeFacturacion    := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM.ID_FieldName;

    Result := Result + ' Left Join ' + TRemitoDM.TableName               + ' on     (' + ID1TablaItems      + '=' + IDTablaRemitos             + ') ';
    Result := Result + ' Left Join ' + TPedidoDeVentaItemDM.TableName    + ' on     (' + ID3TablaItems      + '=' + IDTablaPedidoDeVentaItems  + ') ';
    Result := Result + ' Left Join ' + TPedidoDeVentaDM.TableName        + ' on     (' + ID1TablaPedidoDeVentaItems + '=' + IDTablaPedidos     + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName            + ' on     (' + ID2TablaItems      + '=' + IDTablaFabricados          + ') ';
    Result := Result + ' Left Join ' + TServicioDM.TableName             + ' on     (' + ID2TablaItems      + '=' + IDTablaServicios           + ') ';
    Result := Result + ' Left Join ' + TEstadoDeRemitoDM.TableName       + ' on     (' + ID1TablaRemitos    + '=' + IDTablaEstadosDeRemito     + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName      + ' on     (' + ID2TablaRemitos    + '=' + IDTablaEmpresas            + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName      + ' L on   (' + ID3TablaRemitos    + '=' + IDTablaLicenciatarios      + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName      + ' on     (' + ID4TablaRemitos    + '=' + IDTablaGruposDeVendedor    + ') ';
    Result := Result + ' Left Join ' + TCentroDeFacturacionDM.TableName  + ' on     (' + ID6TablaRemitos    + '=' + IDTablaCentroDeFacturacion + ') ';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TRemitoItemDM.ID_FieldName : string;
begin
  result := 'RemitoItemID';
end;


procedure TRemitoItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TRemitoItem(PDObject) do
    begin
      IntegerField[_CantidadDeBultos] := CantidadDeBultos;
      FloatField[_Cantidad]           := Cantidad;
      BooleanField[_EsFacturable]     := EsFacturable;
      IntegerField[_ItemNro]          := ItemNro;
      StringField[_Descripcion ]      := Descripcion;
      IDField[_PedidoDeVentaItemID]   := PedidoDeVentaItemID;
      IDField[_ProductoID]            := ProductoID;
      IDField[_RemitoID]              := RemitoID;
      IntegerField[_UnidadesPorPrenda]:= UnidadesPorPrenda;
      IntegerField[_NumeroDePreparacion]:= NumeroDePreparacion;
    end;
end;


procedure TRemitoItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TRemitoItem(PDObject) do
    begin
      FCantidadDeBultos    := IntegerField[_CantidadDeBultos];
      FCantidad            := FloatField[_Cantidad];
      FEsFacturable        := BooleanField[_EsFacturable];
      FItemNro             := IntegerField[_ItemNro];
      FDescripcion         := StringField[_Descripcion ];
      FPedidoDeVentaItemID := IDField[_PedidoDeVentaItemID];
      FProductoID          := IDField[_ProductoID];
      FRemitoID            := IDField[_RemitoID];
      FUnidadesPorPrenda   := IntegerField[_UnidadesPorPrenda];
      FNumeroDePreparacion := IntegerField[_NumeroDePreparacion];
      // del create compuesto
      FCCRemitoNumero               := IntegerField[_CCRNumero];
      FCCRemitoObservaciones        := StringField[_CCRObservaciones ];
      FCCRemitoCondiciondeVentaID   := IDField[_CCRCondiciondeVentaID];
      FCCRemitoFechaDeEmision       := DateTimeField[_CCRFechaDeEmision ];
      FCCRemitoFechaDeImpresion     := DateTimeField[_CCRFechaDeImpresion ];
      FCCRemitoEmpresaID            := IDField[_CCREmpresaID];
      FCCRemitoEmpresaFleteID       := IDField[_CCREmpresaFleteID];
      FCCRemitoLicenciatarioID      := IDField[_CCRLicenciatarioID];
      FCCRemitoGrupoDeVendedorID    := IDField[_CCRGrupoDeVendedorID];
      FCCRemitoDirecciondeEntregaID := IDField[_CCRDirecciondeEntregaID];
      FCCRemitoTipoDeFormularioID   := IDField[_CCRTipoDeFormularioID];
      FCCRemitoEstadoDeRemitoID     := IDField[_CCREstadoDeRemitoID];
      FCCProductoCodigo             := StringField[_CCPCodigoDeProducto ];
      FCCCentroDeFacturacionCodigo  := StringField[_CCCentroDeFacturacionCodigo ];
      FCCClienteCodigo              := StringField[_CCClienteCodigo ];
      FCCClienteDescripcion         := StringField[_CCClienteDescripcion ];
      FCCLicenciatarioCodigo        := StringField[_CCLicenciatarioCodigo ];
      FCCLicenciatarioDescripcion   := StringField[_CCLicenciatarioDescripcion ];
      FCCEstadoDeRemitoCodigo       := StringField[_CCEstadoDeRemitoCodigo ];
      FCCEstadoDeRemitoDescripcion  := StringField[_CCEstadoDeRemitoDescripcion ];
      FCCGrupoDeVendedorDescripcion := StringField[_CCGrupoDeVendedorDescripcion ];
      FCCPedidoDeVentaItemItemNro   := IntegerField[_CCPedidoDeVentaItemItemNro];
      FCCPedidoDeVentaNumero        := IntegerField[_CCPedidoDeVentaNumero];
    end;
end;

{ TRemitoItemList }
function TRemitoItemList.Getactual : TRemitoItem;
begin
  result := TRemitoItem(CurrentObject);
end;

constructor TRemitoItemList.CreateByRemito(_R: TRemito);
begin
  CreateByRemitoID( _R.ID );
end;

constructor TRemitoItemList.CreateByID(_ID: TObjectID);
begin
  inherited Create(TRemitoItem, TRemitoItemDM.CreateByID( _ID ));
end;

constructor TRemitoItemList.CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem  );
  Function WhereString: String;
  begin
    Result := '('+TRemitoItemDM.TableName + '.' + TRemitoItemDM._PedidoDeVentaItemID + '=' + IntToStr( _PVI.ID)+')'  ;
  end;
  Function OrderByString: String;
  begin
    Result := TRemitoItemDM.TableName + '.' + TRemitoItemDM._ItemNro;
  end;
begin
  inherited Create(TRemitoItem,TRemitoItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TRemitoItemList.CreateByRemitoID(_RemitoID: TObjectID);
  Function WhereString: String;
  begin
    Result := '('+TRemitoItemDM.TableName + '.' + TRemitoItemDM._RemitoID + '=' + IntToStr( _RemitoID)+')'  ;
  end;
  Function OrderByString: String;
  begin
    Result := TRemitoItemDM.TableName + '.' + TRemitoItemDM._ItemNro ;           // campos separados por coma
  end;
begin
  inherited Create(TRemitoItem,TRemitoItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TRemitoItemList.CreateEmpty;
begin
  inherited Create(TRemitoItem, TRemitoDM.CreateEmpty);
end;

function TRemitoItemList.CreateNewObject: TPDObject;
begin
  result := TRemitoItem.Create;
end;

constructor TRemitoItemList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TRemitoItem,TRemitoItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;



{ TRemitoStateLog }
constructor TRemitoStateLog.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TRemitoStateLogDM);
  SaveSQLLog := False;
  FfechaHora := null;
  FusuarioID := -9999;
end;

procedure TRemitoStateLog.SetEstadoDeRemitoID(const Value: TObjectID);
begin
  if (Value<>FEstadoDeRemitoID) and Assigned(FEstadoDeRemito) then
    FreeAndNil(FEstadoDeRemito);
  FEstadoDeRemitoID := Value;
end;

function TRemitoStateLog.GetEstadoDeRemito : TEstadoDeRemito;
begin
  if not assigned(FEstadoDeRemito) then
    GetObject(TEstadoDeRemito,FEstadoDeRemito,EstadoDeRemitoID);
  Result := TEstadoDeRemito(FEstadoDeRemito);
end;


procedure TRemitoStateLog.SetusuarioID(Value : TObjectID);
begin
  if (Value<>FusuarioID) and Assigned(Fusuario) then
    FreeAndNil(Fusuario);
  FusuarioID := Value;
end;

function TRemitoStateLog.Getusuario : TUsuario;
begin
  if not assigned(Fusuario) then
    GetObject(TUsuario,Fusuario,usuarioID);
  Result := TUsuario(Fusuario);
end;


{ TRemitoStateLogDM }
class function TRemitoStateLogDM.TableName : string;
begin
  Result := 'remitostatelogs';
end;

class function TRemitoStateLogDM.ID_FieldName : string;
begin
  Result := 'remitoStateLogID';
end;


procedure TRemitoStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TRemitoStateLog(PDObject) do
    begin
      IDField[_estadoDeRemitoID]:= FEstadoDeRemitoID;
      IDField[_usuarioID]       := FusuarioID;
      DateTimeField[_fechaHora] := FfechaHora;
      IDField[_RemitoID]        := FRemitoID;
    end;
end;

procedure TRemitoStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TRemitoStateLog(PDObject) do
    begin
      FEstadoDeRemitoID := IDField[_EstadoDeRemitoID];
      FusuarioID        := IDField[_usuarioID];
      FfechaHora        := DateTimeField[_fechaHora];
      FRemitoID         := IDField[_RemitoID];
    end;
end;

{ TRemitoStateLogList }
function TRemitoStateLogList.GetActual : TRemitoStateLog;
begin
  Result := TRemitoStateLog(CurrentObject);
end;

constructor TRemitoStateLogList.CreateByRemito(_R: TRemito);
begin
  CreateByRemito( _R.ID);
end;

constructor TRemitoStateLogList.CreateByRemito(_RID: TObjectID);
  Function WhereString : String;
  begin
    Result := '(' + TRemitoStateLogDM._RemitoID + ' = ' + IntToStr(_RID) + ')';
  end;
begin
  inherited Create(TRemitoStateLog,TRemitoStateLogDM.CreateAll(False, WhereString));
end;

function TRemitoStateLogList.CreateNewObject: TPDObject;
begin
  Result := TRemitoStateLog.Create;
end;

function TRemitoStateLogList.FindEstadoCumplido: Boolean;
begin
  Result := FindEstadoID( TRemito.EstadoCumplidoID );
end;

function TRemitoStateLogList.FindEstadoID(_EID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
    begin
      Result := Actual.EstadoDeRemitoID = _EID;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TRemitoStateLogList.FindEstadoRemitido: Boolean;
begin
  Result := FindEstadoID( TRemito.EstadoRemitidoID );
end;

constructor TRemitoStateLogList.CreateAll;
begin
  inherited Create(TRemitoStateLog,TRemitoStateLogDM.CreateAll(False));
end;

 { TArchivo }
constructor TArchivo.Create;
begin
  inherited;
  DMObject         := Aplicacion.DMPRovider.GetGlobalDM(TArchivoDM);
  SaveSQLLog       := True;
  FAutor           := Null;
  FFechaDeCreacion := Null;
  FNombre          := Null;
  FRuta            := Null;
  Version          := Null;
end;

function TArchivo.GetPerfilesPermitidos: TArchivoPerfilPermitidoList;
begin
  if not Assigned(FPerfilesPermitidos) then
    GetList(TPDList(FPerfilesPermitidos),TPDList(TArchivoPerfilPermitidoList.CreateByArchivo(Self)));
  result := TArchivoPerfilPermitidoList(FPerfilesPermitidos);
end;

function TArchivo.GetSector: TSector;
begin
  if not assigned(FSector) then
    GetObject(TSector, FSector, SectorID);
  Result := TSector(FSector);
end;

function TArchivo.GetUsuario: TUsuario;
begin
  if not Assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);
  Result := TUsuario(FUsuario);
end;

procedure TArchivo.SetSectorID(Value : TObjectID);
begin
  if (Value<>FSectorID) and Assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

procedure TArchivo.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;
 { TArchivoDM }
class function TArchivoDM.TableName : string;
begin
  Result := 'Archivos';
end;

class function TArchivoDM.ID_FieldName : string;
begin
  Result := 'ArchivoID';
end;

class function TArchivoDM.EsInactivo_FieldName : string;
begin
  Result := _EsInactivo;
end;

procedure TArchivoDM.PopulateFields(PDObject: TPDObject);
begin
  with TArchivo(PDObject) do
    begin
      StringField[_Autor]             := Autor;
      StringField[_Descripcion]       := Descripcion;
      BooleanField[_EsInactivo]       := EsInactivo;
      DateTimeField[_FechaDeCreacion] := FechaDeCreacion;
      StringField[_Nombre]            := Nombre;
      StringField[_Ruta]              := Ruta;
      IDField[_SectorID]              := SectorID;
      IDField[_UsuarioID]             := UsuarioID;
      StringField[_Version]           := Version;
    end;
end;


procedure TArchivoDM.PopulateObject(PDObject: TPDObject);
begin
  with TArchivo(PDObject) do
    begin
      FAutor           := StringField[_Autor];
      Descripcion      := StringField[_Descripcion];
      EsInactivo       := BooleanField[_EsInactivo];
      FFechaDeCreacion := DateTimeField[_FechaDeCreacion];
      FNombre          := StringField[_Nombre];
      FRuta            := StringField[_Ruta];
      FSectorID        := IDField[_SectorID];
      FUsuarioID       := IDField[_UsuarioID];
      FVersion         := StringField[_Version];
    end;
end;

 { TArchivoList }
function TArchivoList.GetActual : TArchivo;
begin
  result := TArchivo(CurrentObject);
end;

constructor TArchivoList.CreateByPerfilDeUsuario(_P: TPerfil ; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '( ' + TArchivoDM.ID_FieldName + ' in (select ' + TArchivoPerfilPermitidoDM._ArchivoID + ' from ' + TArchivoPerfilPermitidoDM.TableName + ' where ' + TArchivoPerfilPermitidoDM._PerfilID + ' = ' + IntToStr(_P.ID) + ') )';
  end;
begin
  inherited Create(TArchivo,TArchivoDM.CreateAll( False, WhereString, _SoloActivos));
end;

function TArchivoList.CreateNewObject: TPDObject;
begin
  result := TArchivo.Create;
end;

constructor TArchivoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TArchivo,TArchivoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TFactura }
//class function TFactura.AgregarACuentaCorrienteSifab( _F: TFactura; _CodInt : Integer ): Boolean;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    Aplicacion.Sesion.ConexionSifab.Conexion.StartTransaction;
//    with Aplicacion.Sesion.ConexionSifab.StoredProc do
//      begin
//        StoredProcName := 'CP_CuentaCorrienteMovimientoProveedorAgregar';
//        Prepare;
//        ParamByName('fechaMovimiento').Value                := _F.FechaHora;
//        ParamByName('codigoInternoEmpresa').Value           := 2;
//        ParamByName('CodigoInternoUsuario').Value           := 138; // Interface
//        ParamByName('codigoInternoCliente').Value           := _F.Empresa.CodigoInternoSifab;
//        ParamByName('codigoTipoMovimiento').Value           := 423; //  comprobante de cliente
//        ParamByName('codigoMovimiento').Value               := _F.TipoDeFormulario.Formulario.CodigoInternoSifab;
//        ParamByName('codigoMoneda').Value                   := _F.Moneda.CodigoInternoSifab;
//        if _CodInt = 0 then
//          ParamByName('codigoInternoOrigen').Value            := _F.CodigoInternoSifab
//        else
//          ParamByName('codigoInternoOrigen').Value            := _CodInt;
//        ParamByName('codigoInternoGrupoCotizacion').Value   := 1; // si la cotizacion no es la del dia va 2
//        ParamByName('factorConversion').Value               := _F.Cotizacion;
//        if (_F.TipoDeFormulario.Formulario.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeFormularioFactura) or
//           (_F.TipoDeFormulario.Formulario.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeFormularioNotaDeDebito) then
//          ParamByName('codigoOperacion').Value                := 1
//        else if (_F.TipoDeFormulario.Formulario.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeFormularioNotaDeCredito) then
//          ParamByName('codigoOperacion').Value                := -1;
//
//        ParamByName('importeNeto').Value                    := _F.ImporteNetoGravado + _F.ImporteNetoNoGravado;
//        ParamByName('importeNetoMonedaBase').Value          := Aplicacion.CurrencyService.ConvertirAMonedaOficial(_F.ImporteNetoGravado + _F.ImporteNetoNoGravado, _F.Moneda, _F.FechaContabilizacion);
//        ParamByName('importeImpositivo').Value              := _F.TotalImpuestos;
//        ParamByName('importeImpositivoMonedaBase').Value    := Aplicacion.CurrencyService.ConvertirAMonedaOficial(_F.TotalImpuestos, _F.Moneda, _F.FechaContabilizacion);;
//        ParamByName('importeTotal').Value                   := _F.TotalFacturado;
//        ParamByName('importeTotalMonedaBase').Value         := Aplicacion.CurrencyService.ConvertirAMonedaOficial(_F.TotalFacturado, _F.Moneda, _F.FechaContabilizacion);
//        ParamByName('numeroOrigen').Value                   := _F.Numero;
//        ParamByName('numeroInternoOrigen').Value            := _F.CodigoInternoOrigenSifab;
//        ParamByName('fechaEmision').Value                   := _F.FechaDeImpresion;
//        ParamByName('fechaContabilizacion').Value           := _F.FechaContabilizacion;
//        ParamByName('fechaVencimiento').Value               := _F.FechaContabilizacion;
//        ParamByName('cuotas').Value                         := 0;
//        ParamByName('codigoIdentificadorComprobante').Value := _F.TipoDeFormulario.CodigoInternoLetraSifab;
//        ExecProc;
//        Aplicacion.Sesion.ConexionSifab.Conexion.Commit;
//        Result := True;
//      end;
//  except
//    Aplicacion.Sesion.ConexionSifab.Conexion.Rollback;
//  end;
//  If Not Result Then
//    Aplicacion.Mensaje('No pudo agregarse la Cuenta Corriente de La factura '+ _F.NumeroFinal +' a Sifab', 'Aviso', MB_OK );
//end;

class procedure TFactura.AgregarImpuestosCabecera(_F: TFactura);
var
  AlicImpuesto            : TReal;
  FImp                    : TFacturaImpuesto;
begin
  if _F.Empresa.ImpuestosActivos then
    begin
      _F.Empresa.Impuestos.First;
      while not _F.Empresa.Impuestos.IsLast do
        begin
          if ( not _F.Empresa.Impuestos.actual.ImpuestoConcepto.SeAplicaAItems) and ( _F.ImporteNetoGravado >= _F.Empresa.Impuestos.actual.ImpuestoConcepto.CalcularAPartirDe ) then
            begin
              if (_F.FechaDeImpresion = Null ) or (_F.FechaDeImpresion = 0 ) then
                AlicImpuesto := _F.Empresa.AlicuotaImpuesto( _F.Empresa.Impuestos.actual.ImpuestoConcepto, _F.FechaHora, True )
              else
                AlicImpuesto := _F.Empresa.AlicuotaImpuesto( _F.Empresa.Impuestos.actual.ImpuestoConcepto, _F.FechaDeImpresion, True );

              _F.TotalImpuestosCabecera := _F.TotalImpuestosCabecera + (_F.ImporteNetoGravado * ( AlicImpuesto / 100));
              if (AlicImpuesto > 0) and (_F.ImporteNetoGravado <> 0) then
                try
                  FImp := TFacturaImpuesto.Create;
                  FImp.FacturaID          := _F.ID;
                  FImp.ImpuestoConceptoID := _F.Empresa.Impuestos.actual.ImpuestoConceptoID;
                  FImp.PorcentajeImpuesto := AlicImpuesto;
                  FImp.ImporteNetoGravado := _F.ImporteNetoGravado;
                  FImp.Impuesto           := (_F.ImporteNetoGravado * ( AlicImpuesto / 100));
                  FImp.Save;
                  _F.Impuestos.Add(FImp)
                finally
                  FImp.NilObject;
                end;
            end;
          _F.Empresa.Impuestos.next;
        end;
    end;
end;

class procedure TFactura.AgregarImpuestosItems(_FI: TFacturaItem; _F : TFactura);
var
  FIImp : TFacturaItemImpuesto;
begin
  if _F.Empresa.ImpuestosActivos and _F.Empresa.Impuestos.FindPredeterminadoProductos then
    begin
      if _FI.Producto.EsFabricado and _FI.Producto.Fabricado.Articulo.ImpuestosActivos then
        begin
          _FI.Producto.Fabricado.Articulo.Impuestos.First;
//          _F.ImporteNetoGravado := _F.ImporteNetoGravado + _FI.ImporteItem;
          if ( _FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.CalcularAPartirDe =0 ) or ( _FI.ImporteItem >= _FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.CalcularAPartirDe ) then // NO GRABO IMPUESTOS DE ITEMS SI EL IMPORTE ES 0
            begin
              if ( _FI.ImporteItem <> 0 ) and (_FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.Alicuota > 0) then // NO GRABO IMPUESTOS DE ITEMS SI EL IMPORTE ES 0
                try
                  _F.TotalImpuestoItems := _F.TotalImpuestoItems + (_FI.ImporteItem * (_FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.Alicuota/100));
                  FIImp := TFacturaItemImpuesto.Create;
                  FIImp.FacturaItemID      := _FI.ID;
                  FIImp.ImpuestoConceptoID := _FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConceptoID;
                  FIImp.PorcentajeImpuesto := _FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.Alicuota;
                  FIImp.BaseImponible      := _FI.ImporteItem;
                  FIImp.Impuesto           := (_FI.ImporteItem * (_FI.Producto.Fabricado.Articulo.Impuestos.Actual.ImpuestoConcepto.Alicuota/100));
                  FIImp.Save;
                  _FI.Impuestos.Add(FIImp);
                finally
                  FIImp.NilObject;
                end;
            end;
        end
      else if _FI.Producto.EsServicio and _FI.Producto.Servicio.ImpuestosActivos then
        begin
          _FI.Producto.Servicio.Impuestos.First;
//          _F.ImporteNetoGravado := _F.ImporteNetoGravado + _FI.ImporteItem;
          if  (_FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.CalcularAPartirDe=0) or ( _FI.ImporteItem >= _FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.CalcularAPartirDe ) then // NO GRABO IMPUESTOS DE ITEMS SI EL IMPORTE ES 0
            begin
              if ( _FI.ImporteItem <> 0 ) and ( _FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.Alicuota>0) then // NO GRABO IMPUESTOS DE ITEMS SI EL IMPORTE ES 0
                try
                  _F.TotalImpuestoItems := _F.TotalImpuestoItems + (_FI.ImporteItem * (_FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.Alicuota/100));
                  FIImp := TFacturaItemImpuesto.Create;
                  FIImp.FacturaItemID      := _FI.ID;
                  FIImp.ImpuestoConceptoID := _FI.Producto.Servicio.Impuestos.Actual.ImpuestoConceptoID;
                  FIImp.PorcentajeImpuesto := _FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.Alicuota;
                  FIImp.BaseImponible      := _FI.ImporteItem;
                  FIImp.Impuesto           := (_FI.ImporteItem * (_FI.Producto.Servicio.Impuestos.Actual.ImpuestoConcepto.Alicuota/100));
                  FIImp.Save;
                  _FI.Impuestos.Add(FIImp);
                finally
                  FIImp.NilObject;
                end;
            end;
        end;
    end;

  _FI.Save;
end;


procedure TFactura.AgregarNuevoEstadoAlLog;
var
  S: TFacturaStateLog;
begin
    S := TFacturaStateLog.Create;
  try
    S.EstadoDeFacturaID := EstadoDeFacturaID;
    S.UsuarioID         := Aplicacion.Usuario.ID;
    S.FechaHora         := Aplicacion.DateTimeService.FechaHoraActual;
    S.FacturaID         := Self.ID;
    S.Observaciones     := ObservacionDeEstado;
    S.Save;
    StateLogs.Add(S);
  finally
    S.NilObject;
  end;
end;

//class function TFactura.AgregarSaldoSifab(_F: TFactura; _CodInt : Integer): Boolean;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    Aplicacion.Sesion.ConexionSifab.Conexion.StartTransaction;
//    with Aplicacion.Sesion.ConexionSifab.StoredProc do
//      begin
//        StoredProcName := 'CP_SaldoFinancieroComprobanteAgregar';
//        Prepare;
//        ParamByName('codigoTipoMovimiento').Value        := 423; //  comprobante de cliente
//        ParamByName('CodigoTipoComprobante').Value       := _F.TipoDeFormulario.Formulario.CodigoInternoSifab;
//        if _CodInt = 0 then
//          ParamByName('CodigoInternoComprobante').Value  := _F.CodigoInternoSifab
//        else
//          ParamByName('CodigoInternoComprobante').Value  := _CodInt;
//        ParamByName('NumeroCuota').Value                 := _F.Empresa.CodigoInternoSifab;
//        ParamByName('Fecha').Value                       := _F.FechaContabilizacion;
//        ParamByName('Importe').Value                     := _F.TotalFacturado;
//        ParamByName('ImporteMonedaBase').Value           := Aplicacion.CurrencyService.ConvertirAMonedaOficial( _F.TotalFacturado, _F.Moneda, _F.FechaContabilizacion );
//        ExecProc;
//        Aplicacion.Sesion.ConexionSifab.Conexion.Commit;
//        Result := True;
//      end;
//  except
//    Aplicacion.Sesion.ConexionSifab.Conexion.Rollback;
//  end;
//  If Not Result Then
//    Aplicacion.Mensaje('No pudo agregarse el saldo de La factura '+ _F.NumeroFinal +' a Sifab', 'Aviso', MB_OK );
//end;

function TFactura.AsignarNombreDePdf: string;
begin
  Result := TipoDeFormulario.Codigo+'_'+ Empresa.CUIT +'_' + IntToHex(ID, 8) + '.Pdf';
end;

class function TFactura.AsignarUltimoNumero ( _TF : TTipoDeFormulario ) : Integer;
var
  FNumeros : TFacturaList;
begin
  try
    FNumeros := TFacturaList.CreateByUltimoNumero( _TF );
    if (FNumeros.Count > 0) then
      Result := FNumeros.Actual.Numero + 1
    else
      Result := 1;
  finally
    FreeAndNil(FNumeros);
  end;
end;

procedure TFactura.ColocarEstadoConfirmado;
begin
  FEstadoDeFacturaID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado  );
end;

procedure TFactura.ColocarEstadoGrabado;
begin
  if  (TipoDeFormulario.Formulario.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeFormularioFactura ) then
    FEstadoDeFacturaID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado  )
  else
    FEstadoDeFacturaID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_AAutorizarPorAdmin  )
end;

procedure TFactura.ColocarEstadoRechazado;
begin
  FEstadoDeFacturaID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Rechazado  );
end;

class function TFactura.CrearFacturaDesdeRemitoOPedido( _R : TRemito = nil ; _P : TPedidoDeVenta = nil ): Boolean;
var
  F                       : TFactura;
  FI                      : TFacturaItem;
  ImporteSinDescuento     : TReal;
  PV                      : TPedidoDeVenta;
  NumeroItem              : Integer;

  Procedure CrearFacturaDesdeRemito(_R : TRemito);
  var
    ListaDePedidosRemitidos : TStringList;
    I                       : Integer;
  begin
    try
      if _R.Items.Count = 0 then
        Aplicacion.raiseExceptionCreate('El remito a facturar no posee ítems.');

//      _R.Items.First; // primero me fijo si los pedidos estan cargados en sifab.
//      while not _R.Items.IsLast do
//        begin
//          if not _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.ElPedidoEstaEnSifab then
//            Aplicacion.raiseExceptionCreate('El pedido '+ _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.NumeroFinal +' no se encuentra en sifab');
//          _R.Items.Next
//        end;

      // Guardo una lista con los PedidoID que estoy remitiendo
      ListaDePedidosRemitidos := TStringList.Create;
      _R.Items.First;
      while not _R.Items.IsLast do
        begin
          if (ListaDePedidosRemitidos.IndexOf(IntToStr( _R.Items.actual.PedidoDeVentaItem.PedidoDeVentaID)) = -1) then
            ListaDePedidosRemitidos.Add( IntToStr( _R.Items.actual.PedidoDeVentaItem.PedidoDeVentaID) );
          _R.Items.Next;
        end;
      F                        := TFactura.Create;
      F.UsuarioID              := Aplicacion.Sesion.Usuario.ID;
      F.CondicionDeVentaID     := _R.CondicionDeVentaID;
      F.TipoDeFormularioID     := _R.TipoDeFormularioFacturacionID;

      if (_R.LicenciatarioID <> NullID) then
        F.EmpresaID              := _R.LicenciatarioID
      else
        F.EmpresaID              := _R.EmpresaID;
      F.GrupoDeVendedorID      := _R.GrupoDeVendedorID;
      F.FechaHora              := Aplicacion.DateTimeService.FechaHoraActual;
      F.FechaContabilizacion   := Aplicacion.DateTimeService.FechaHoraActual;
      _R.Items.First;
      F.MonedaID           := _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.MonedaID;
      F.Cotizacion         := Aplicacion.CurrencyService.CotizarAMonedaLocal( _R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Moneda, F.FechaHora, True );
      if (_R.Items.actual.PedidoDeVentaItem.PedidoDeVenta.Moneda.Codigo = Aplicacion.ParametrosDelSistema.CodigoMonedaDolar) then
        F.CotizacionDolar := F.Cotizacion
      else
        F.CotizacionDolar    := Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar, F.FechaHora, True );
      F.Save;
      _R.Items.First;
      numeroItem := 1;
      while not _R.Items.IsLast do
        begin
          FI := TFacturaItem.Create;
          FI.FacturaID           := F.ID;
          FI.PedidoDeVentaItemID := _R.Items.Actual.PedidoDeVentaItemID;
          FI.RemitoItemID        := _R.Items.Actual.ID;
          FI.ProductoID          := _R.Items.Actual.ProductoID;
          FI.ItemNro             := NumeroItem;

          if _R.Items.Actual.PedidoDeVentaItem.TipoDePedidoDeVenta.EsAutonumerado then
            FI.PrecioUnitario      := _R.Items.Actual.PedidoDeVentaItem.PrecioDeVenta * (_R.Items.Actual.PedidoDeVentaItem.TipoDePedidoDeVenta.Prioridad / 100)
          else
            FI.PrecioUnitario      := _R.Items.Actual.PedidoDeVentaItem.PrecioDeVenta;

          FI.Cantidad            := _R.Items.Actual.Cantidad;
          FI.PorcentajeDescuento := _R.Items.Actual.PedidoDeVentaItem.PorcentajeDescuento;
          ImporteSinDescuento    := (FI.PrecioUnitario * FI.Cantidad);
          FI.ImporteItem         := ( ImporteSinDescuento - (ImporteSinDescuento * (FI.PorcentajeDescuento/100)) );
          FI.Save;
          F.Items.Add(FI);
          FI.NilObject;
          inc( numeroItem );
          _R.Items.Next;
        end;

      // agrego items no remitibles pendientes de facturar
      for I := 0 to ListaDePedidosRemitidos.Count - 1 do
        Try
          PV := TPedidoDeVenta.Create;
          PV.load( StrToInt( ListaDePedidosRemitidos[I] )  );
          while not PV.ItemsNoRemitiblesFactPendientes.IsLast do
            begin
              FI := TFacturaItem.Create;
              FI.FacturaID           := F.ID;
              FI.PedidoDeVentaItemID := PV.ItemsNoRemitiblesFactPendientes.Actual.ID;
              FI.RemitoItemID        := NullID;
              FI.ProductoID          := PV.ItemsNoRemitiblesFactPendientes.Actual.ProductoID;
              FI.ItemNro             := numeroItem;
              FI.PrecioUnitario      := PV.ItemsNoRemitiblesFactPendientes.Actual.PrecioDeVenta;
              FI.Cantidad            := PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPedida;
              FI.PorcentajeDescuento := PV.ItemsNoRemitiblesFactPendientes.Actual.PorcentajeDescuento;
              ImporteSinDescuento    := (PV.ItemsNoRemitiblesFactPendientes.Actual.PrecioDeVenta * PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPedida);
              FI.ImporteItem         := ( ImporteSinDescuento - (ImporteSinDescuento * (PV.ItemsNoRemitiblesFactPendientes.Actual.PorcentajeDescuento/100)) );
              FI.Save;
              F.Items.Add(FI);
              FI.NilObject;
              Inc( numeroItem );
              PV.ItemsNoRemitiblesFactPendientes.Actual.PendienteDeFacturar := False;
              PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadEntregadaHistorica := PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPendiente;
              PV.ItemsNoRemitiblesFactPendientes.Actual.Save;
              PV.ItemsNoRemitiblesFactPendientes.Next;
            end;
        Finally
          FreeAndNil(PV);
        End;

        TFactura.CalcularImportesNetos( F ); // hacer esto siempre antes de agregarImpuestosItems
        F.Items.First;
        while not F.Items.IsLast do
        begin
          TFactura.AgregarImpuestosItems(F.Items.Actual, F);
          F.Items.Next;
        end;
      TFactura.AgregarImpuestosCabecera(F); // siempre despues de agregar impuestos items para que calcule el importenetogravado

      F.TotalImpuestos := F.TotalImpuestoItems + F.TotalImpuestosCabecera;
      F.TotalFacturado := F.ImporteNetoGravado + F.ImporteNetoNoGravado + F.ImporteExcento + F.TotalImpuestos;
      F.Save; // fuerzo el save para que calcule los importes en el encabezado.
    finally
      F.NilObject;
      FreeAndNil( ListaDePedidosRemitidos );
    end;
  end;

  Procedure CrearFacturaDesdePedido( _PV : TPedidoDeVenta );
  begin
    try

      if _PV.ItemsNoRemitiblesFactPendientes.Count = 0 then
        Aplicacion.raiseExceptionCreate('El pedido a facturar no posee ítems no remitibles pendientes .');
      F                        := TFactura.Create;
      F.SetObservacionDeEstado(_PV.ObservacionDeEstado);
      F.UsuarioID              := Aplicacion.Sesion.Usuario.ID;
      F.CondicionDeVentaID     := _PV.CondicionDeVentaID;
      F.TipoDeFormularioID     := _PV.TipoDeFormularioFacturacionID;
      F.EmpresaID              := _PV.ClienteID;
      F.GrupoDeVendedorID      := _PV.GrupoDeVendedorID;
      F.FechaHora              := Aplicacion.DateTimeService.FechaHoraActual;
      F.FechaContabilizacion   := Aplicacion.DateTimeService.FechaHoraActual;
      F.MonedaID               := _PV.MonedaID;
      F.Cotizacion             := Aplicacion.CurrencyService.CotizarAMonedaLocal( _PV.Moneda, F.FechaHora, True );
      if (_PV.Moneda.Codigo = Aplicacion.ParametrosDelSistema.CodigoMonedaDolar) then
        F.CotizacionDolar := F.Cotizacion
      else
        F.CotizacionDolar    := Aplicacion.CurrencyService.CotizarAMonedaLocal( Aplicacion.MonedaDolar, F.FechaHora, True );
      F.Save;
      _PV.ItemsNoRemitiblesFactPendientes.First;
      NumeroItem := 1;
      while not _PV.ItemsNoRemitiblesFactPendientes.IsLast do
        begin
          FI                     := TFacturaItem.Create;
          FI.FacturaID           := F.ID;
          FI.PedidoDeVentaItemID := _PV.ItemsNoRemitiblesFactPendientes.Actual.ID;
          FI.RemitoItemID        := NullID;
          FI.ProductoID          := _PV.ItemsNoRemitiblesFactPendientes.Actual.ProductoID;
          FI.ItemNro             := NumeroItem;
          if _PV.TipoDePedidoDeVenta.EsAutonumerado then
            FI.PrecioUnitario      := _PV.ItemsNoRemitiblesFactPendientes.Actual.PrecioDeVenta * (_PV.ItemsNoRemitiblesFactPendientes.Actual.TipoDePedidoDeVenta.Prioridad / 100)
          else
            FI.PrecioUnitario      := _PV.ItemsNoRemitiblesFactPendientes.Actual.PrecioDeVenta;
          FI.Cantidad            := _PV.ItemsNoRemitiblesFactPendientes.Actual.CantidadPedida;
          FI.PorcentajeDescuento := _PV.ItemsNoRemitiblesFactPendientes.Actual.PorcentajeDescuento;
          ImporteSinDescuento    := (FI.PrecioUnitario * FI.Cantidad);
          FI.ImporteItem         := ( ImporteSinDescuento - (ImporteSinDescuento * (FI.PorcentajeDescuento/100)) );
          FI.Save;
          F.Items.Add(FI);
          FI.NilObject;
          Inc( NumeroItem );
          _PV.ItemsNoRemitiblesFactPendientes.Next;
        end;

      TFactura.CalcularImportesNetos( F ); // hacer esto siempre antes de agregarImpuestosItems
      F.Items.First;
      while not F.Items.IsLast do
      begin
        TFactura.AgregarImpuestosItems(F.Items.Actual, F );
        F.Items.Next;
      end;
      TFactura.AgregarImpuestosCabecera(F); // siempre despues de agregar impuestos items para que calcule el importenetogravado
      F.TotalImpuestos := F.TotalImpuestoItems + F.TotalImpuestosCabecera;
      F.TotalFacturado := F.ImporteNetoGravado + F.ImporteNetoNoGravado + F.ImporteExcento + F.TotalImpuestos;
      F.Save;
    finally
      F.NilObject;
    end;
  end;
begin
  Result := False;

  if not ( Assigned(_R) Xor Assigned(_P) ) then
    Aplicacion.raiseExceptionCreate('No asignó ningún documento para la función "crear factura".');

  if Assigned(_R) then
    begin
      CrearFacturaDesdeRemito( _R );
      Result := True;
    end;
  if Assigned(_P) then
    begin
      CrearFacturaDesdePedido( _P );
      Result := True;
    end;
end;

class procedure TFactura.CalcularImportesNetos(_F: TFactura);
begin
  _F.ImporteNetoGravado     := 0;
  _F.ImporteNetoNoGravado   := 0;
  _F.ImporteExcento         := 0;

  _F.Items.First;
  while not _F.Items.IsLast do
    begin
      if _F.Empresa.ImpuestosActivos and _F.Empresa.Impuestos.FindPredeterminadoProductos then
        begin
          if _F.Items.actual.Producto.EsFabricado and _F.Items.actual.Producto.Fabricado.Articulo.ImpuestosActivos then
            _F.ImporteNetoGravado   := _F.ImporteNetoGravado + _F.Items.actual.ImporteItem
          else if _F.Items.actual.Producto.EsServicio and _F.Items.actual.Producto.Servicio.ImpuestosActivos then
            _F.ImporteNetoGravado   := _F.ImporteNetoGravado + _F.Items.actual.ImporteItem
          else
            _F.ImporteNetoNoGravado := _F.ImporteNetoNoGravado + _F.Items.actual.ImporteItem;
        end
      else
        _F.ImporteExcento := _F.ImporteExcento + _F.Items.actual.ImporteItem;
      _F.Items.Next;
    end;

  if _F.ImporteNetoGravado < 0 then
    Aplicacion.RaiseExceptionCreate('El importe neto grabado del comprobante no puede ser negativo.');
end;

class function TFactura.AFIPAutorizarFacturaLocal(_F: TFactura): String;
var
  SolicitudCAE  : IXMLFECAESolicitarType;
  I             : Integer;
  SqlQuery      : TUniQuery;
  TKA           : TAFIPTicketAcceso;
  AFEAFIP       : IAutorizacionElectronicaAfip;
  ProximoNumero : Integer;
begin
  if _F.Empresa.EsExportacion then
    Aplicacion.raiseExceptionCreate('Este Servicio Web es sólo para Clientes Locales');
  try
    SolicitudCAE := NewFECAESolicitar;
    try
      TKA                     := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSLocal);
      SolicitudCAE.Auth.Token := TKA.Token;
      SolicitudCAE.Auth.Sign  := TKA.Sign;
      SolicitudCAE.Auth.Cuit  := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
    finally
      FreeAndNil(TKA);
    end;
    //cabecera factura
    SolicitudCAE.FeCAEReq.FeCabReq.CantReg  := IntToStr(1);
    SolicitudCAE.FeCAEReq.FeCabReq.PtoVta   := IntToStr( StrToInt( _F.TipoDeFormulario.CentroDeFacturacion.Codigo ) );
    SolicitudCAE.FeCAEReq.FeCabReq.CbteTipo := IntToStr( StrToInt( _F.TipoDeFormulario.CodigoFiscal ) );
    //detalle
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Concepto      := _F.ConceptoAFIP;

    if (_F.ConceptoAFIP = 2) or (_F.ConceptoAFIP = 3) then
      begin
        //Fecha de inicio  del abono para el  servicio FchServHasta String (8) FchVtoPago String (8) a facturar. Dato  obligatorio  para concepto 2 o 3 (Servicios / Productos y Servicios). Formato  yyyymmdd
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.FchServDesde := IntToStr( YearOf( _F.FechaDeImpresion ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _F.FechaDeImpresion ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _F.FechaDeImpresion ) ) , '0', 2) ;
        // Fecha de fin del abono para el  servicio a facturar. Dato  obligatorio  para concepto 2 o 3 (Servicios / Productos y Servicios). Formato  yyyymmdd. FchServHasta no puede ser menor a FchServDesde
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.FchServHasta := IntToStr( YearOf( _F.FechaDeImpresion ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _F.FechaDeImpresion ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _F.FechaDeImpresion ) ) , '0', 2) ;
        //Fecha de vencimiento  del  pago servicio a facturar. Dato  obligatorio  para concepto 2 o 3 (Servicios / Productos y Servicios). Formato  yyyymmdd. Debe ser igual o posterior a la fecha del comprobante.
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.FchVtoPago   := IntToStr( YearOf( _F.FechaDeImpresion ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _F.FechaDeImpresion ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _F.FechaDeImpresion ) ) , '0', 2) ;
      end;
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.DocTipo       := IntToStr(80);
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.DocNro        := Aplicacion.TextService.ReemplazarEn( _F.Empresa.CUIT, '-', '');
    ProximoNumero := TFactura.AFIPConsultarUltimoNumeroLocal(_F.TipoDeFormulario);
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbteDesde     := IntToStr(ProximoNumero);
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbteHasta     := IntToStr(ProximoNumero);
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbteFch       := IntToStr( YearOf( _F.FechaDeImpresion ) ) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( MonthOf( _F.FechaDeImpresion ) ) , '0', 2) + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr( DayOf( _F.FechaDeImpresion ) ) , '0', 2) ;
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpTotal      := FloatToStr(_F.TotalFacturado);
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpTotConc    := FloatToStr(_F.ImporteNetoNoGravado );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpNeto       := FloatToStr(_F.ImporteNetoGravado );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpOpEx       := FloatToStr(_F.ImporteExcento );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpTrib       := FloatToStr(_F.TotalImpuestosCabecera );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.ImpIVA        := FloatToStr(_F.TotalImpuestoItems );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.MonCotiz      := FloatToStr(_F.Cotizacion );
    SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.MonId         := _F.Moneda.CodigoAfip;

    if (_F.FacturaAsociadaID <> NullID) then
      begin
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbtesAsoc.Add;
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbtesAsoc.CbteAsoc[I].Nro    := IntToStr( _F.FacturaAsociada.Numero );
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbtesAsoc.CbteAsoc[I].PtoVta := IntToStr( StrToInt( _F.FacturaAsociada.CentroDeFacturacion.Codigo ) );
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.CbtesAsoc.CbteAsoc[I].Tipo   := IntToStr( StrToInt( _F.FacturaAsociada.TipoDeFormulario.CodigoFiscal ) );
      end;

    //tributos
    _F.Impuestos.First;
    I := 0;
    while not _F.Impuestos.IsLast do
      begin
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Add;
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Tributo[I].Id       := _F.Impuestos.Actual.ImpuestoConcepto.CodigoAfip;
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Tributo[I].Desc     := _F.Impuestos.Actual.ImpuestoConcepto.Descripcion;
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Tributo[I].BaseImp  := FloatToStr(_F.Impuestos.Actual.ImporteNetoGravado );
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Tributo[I].Alic     := FloatToStr(_F.Impuestos.Actual.PorcentajeImpuesto );
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Tributos.Tributo[I].Importe  := FloatToStr(_F.Impuestos.Actual.Impuesto );
        I := I + 1;
        _F.Impuestos.Next;
      end;
    //IVA
    SqlQuery := TUniQuery.Create(nil);
    SqlQuery.Connection := Aplicacion.Database.ConexionReal;
    SqlQuery.Active := False;
    SqlQuery.SQL.Clear;
    SqlQuery.SQL.Text := TFacturaDM.ImpuestosItemsFiltrados(_F);
    SqlQuery.Active := True;
    for I := 0 to SqlQuery.RecordCount - 1 do
      begin
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Iva.Add;
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Iva.AlicIva[I].BaseImp := FloatToStr(Aplicacion.MathService.Redondear( SqlQuery.FieldByName( TFacturaItemImpuestoDM._BaseImponible ).Value , 2 ) );
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Iva.AlicIva[I].Importe := FloatToStr(Aplicacion.MathService.Redondear( SqlQuery.FieldByName( TFacturaItemImpuestoDM._Impuesto ).Value , 2 ));
        SolicitudCAE.FeCAEReq.FeDetReq.FECAEDetRequest.Iva.AlicIva[I].Id      := SqlQuery.FieldByName( TFacturaItemImpuestoDM._CodigoAfip ).Value;
        SqlQuery.Next;
      end;
    SqlQuery.Active := False;
    AFEAFIP := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip( Aplicacion.DataService.URLWebServiceAfipLocal, Aplicacion.ConstantAllocator.CTE_FECAESolicitar, SolicitudCAE.XML);
    Result := AFEAFIP.GetAutorizacionAfip;
  finally
    SolicitudCAE := nil;
    FreeAndNil(SqlQuery);
    AFEAFIP := nil;
  end;
end;

procedure TFactura.ActualizarRemitos;
begin
  if (Remitos.Count > 0) then
    TRemito.ActualizarEstados( Remitos );
end;


class function TFactura.AFIPAutorizarFacturaExpo(_F: TFactura): String;
var
  SolicitudCAE     : IXMLFEXAuthorizeType;
  I                : Integer;
  SqlQuery         : TUniQuery;
  TKA              : TAFIPTicketAcceso;
  MyFormatSettings : TFormatSettings;
  AFEAFIP          : IAutorizacionElectronicaAfip;
begin
  if not _F.Empresa.EsExportacion then
    Aplicacion.raiseExceptionCreate('Este Servicio Web es sólo para Clientes de Exportación');
  try
    SolicitudCAE := NewFEXAuthorize;
    try
      TKA                     := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSExpo);
      SolicitudCAE.Auth.Token := TKA.Token;
      SolicitudCAE.Auth.Sign  := TKA.Sign;
      SolicitudCAE.Auth.Cuit  := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
    finally
      FreeAndNil(TKA);
    end;

    SolicitudCAE.Cmp.Id                := IntToStr( TFactura.AFIPConsultarUltimoIDExpo + 1 );

    GetLocaleFormatSettings(LOCALE_SYSTEM_DEFAULT, MyFormatSettings);
    MyFormatSettings.ShortDateFormat   := 'yyyymmdd';

    SolicitudCAE.Cmp.Fecha_cbte        := DateToStr( Aplicacion.DateTimeService.FechaActual, MyFormatSettings );
    SolicitudCAE.Cmp.Cbte_Tipo         := IntToStr( StrToInt( _F.TipoDeFormulario.CodigoFiscal ) );
    SolicitudCAE.Cmp.Punto_vta         := IntToStr( StrToInt( _F.TipoDeFormulario.CentroDeFacturacion.Codigo ) );
    SolicitudCAE.Cmp.Cbte_nro          := IntToStr( TFactura.AFIPConsultarUltimoNumeroExpo(_F.TipoDeFormulario) );
    SolicitudCAE.Cmp.Tipo_expo         := _F.ConceptoAFIP;
    if (_F.TipoDeFormulario.CodigoFiscal = '020') or (_F.TipoDeFormulario.CodigoFiscal = '021') then
      SolicitudCAE.Cmp.Permiso_existente := ' '
    else
      SolicitudCAE.Cmp.Permiso_existente := 'N';
    SolicitudCAE.Cmp.Dst_cmp           := _F.Empresa.Localidad.pais.CodigoDestinoFacturaElectronica;
    SolicitudCAE.Cmp.Cliente           := AnsiLeftStr(_F.Empresa.Descripcion, 200);
    SolicitudCAE.Cmp.Cuit_pais_cliente := Aplicacion.TextService.ReemplazarEn( _F.Empresa.CUIT, '-', '');
    SolicitudCAE.Cmp.Domicilio_cliente := _F.Empresa.Domicilio;
//    SolicitudCAE.Cmp.Id_impositivo no es oblgatorio si se especifica cuit_pais_cliente
    SolicitudCAE.Cmp.Id_impositivo     := '';
    SolicitudCAE.Cmp.Moneda_Id         := _F.Moneda.CodigoAfip;
    SolicitudCAE.Cmp.Moneda_ctz        := Aplicacion.TextService.ReemplazarEn( FloatToStr(_F.Cotizacion) , ',', '.');
    SolicitudCAE.Cmp.Obs_comerciales   := '';
    SolicitudCAE.Cmp.Imp_total         := Aplicacion.TextService.ReemplazarEn( FloatToStr(_F.TotalFacturado) , ',', '.');
    SolicitudCAE.Cmp.Obs               := '';
    SolicitudCAE.Cmp.Forma_pago        := _F.CondicionDeVenta.Descripcion;
    SolicitudCAE.Cmp.Idioma_cbte       := IntToStr(1); //_F.Empresa.Localidad.Pais.Idioma.CodigoAfip;
    _F.Items.First;
    if _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.IncotermID <> NullID then
      begin
        SolicitudCAE.Cmp.Incoterms         := _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Incoterm.Codigo;
        SolicitudCAE.Cmp.Incoterms_Ds      := _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Incoterm.Descripcion;
      end;
    for I := 0 to _F.Items.Count - 1 do
      begin
        SolicitudCAE.Cmp.Items.Add;
        SolicitudCAE.Cmp.Items[I].Pro_codigo       := _F.Items.Actual.Producto.Codigo;
        SolicitudCAE.Cmp.Items[I].Pro_ds           := _F.Items.Actual.Producto.Descripcion;
        SolicitudCAE.Cmp.Items[I].Pro_qty          := IntToStr(_F.Items.Actual.Cantidad);
        SolicitudCAE.Cmp.Items[I].Pro_umed         := _F.Items.Actual.Producto.UnidadDeMedida.CodigoAfip;
        SolicitudCAE.Cmp.Items[I].Pro_precio_uni   := Aplicacion.TextService.ReemplazarEn( FloatToStr( _F.Items.Actual.PrecioUnitario ) , ',', '.');
        SolicitudCAE.Cmp.Items[I].Pro_bonificacion := '0';
        SolicitudCAE.Cmp.Items[I].Pro_total_item   := Aplicacion.TextService.ReemplazarEn( FloatToStr( _F.Items.Actual.ImporteItem    ) , ',', '.');
        _F.Items.Next;
      end;
    AFEAFIP := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip( Aplicacion.DataService.URLWebServiceAfipExpo, Aplicacion.ConstantAllocator.CTE_FEXAuthorize, FormatXMLData(SolicitudCAE.XML) );
    Result := AFEAFIP.GetAutorizacionAfip;
  finally
    SolicitudCAE := Nil;
    AFEAFIP := Nil;
  end;
end;

class function TFactura.AFIPDummyExpo: Boolean;
var
  DummyResponse : IXMLFEXDummyResponseType;
  AFEAFIP       : IAutorizacionElectronicaAfip;
  XML           : TXMLDocument;
begin
  try
    AFEAFIP       := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipExpo, Aplicacion.ConstantAllocator.CTE_FEXDummy, '' );
    XML           := TXMLDocument.Create(nil);
    XML.XML.Text  := AFEAFIP.GetAutorizacionAfip;
    XML.Active    := True;
    DummyResponse := GetFEXDummyResponse(XML);
    Result        := (DummyResponse.FEXDummyResult.AppServer = 'OK') and (DummyResponse.FEXDummyResult.DbServer = 'OK') and (DummyResponse.FEXDummyResult.AuthServer = 'OK');
  finally
    XML           := nil;
    DummyResponse := nil;
  end;
end;

class function TFactura.AFIPDummyLocal : Boolean;
var
  DummyResponse : IXMLFEDummyResponseType;
  AFEAFIP       : IAutorizacionElectronicaAfip;
  XML           : TXMLDocument;
begin
  try
    AFEAFIP       := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipLocal, Aplicacion.ConstantAllocator.CTE_FEDummy, '' );
    XML           := TXMLDocument.Create(nil);
    XML.XML.Text  := AFEAFIP.GetAutorizacionAfip;
    XML.Active    := True;
    DummyResponse := GetFEDummyResponse(XML);
    Result := (DummyResponse.FEDummyResult.AppServer = 'OK') and (DummyResponse.FEDummyResult.DbServer = 'OK') and (DummyResponse.FEDummyResult.AuthServer = 'OK');
  finally
    XML           := nil;
    DummyResponse := nil;
  end;
end;

constructor TFactura.Create;
begin
  inherited;
  DMObject                := Aplicacion.DMPRovider.GetGlobalDM(TFacturaDM);
  FFechaHora              := null;
  FCotizacion             := 0;
  FCotizacionDolar        := 0;
  FImporteNetoGravado     := 0;
  FImporteNetoNoGravado   := 0;
  FTotalFacturado         := 0;
  FTotalImpuestoItems     := 0;
  FTotalImpuestos         := 0;
  FTotalImpuestosCabecera := 0;
  FCodigoDeBarras         := Null;
  FNumeroFinal            := Null;
  FNumero                 := 0;
//  FEstaEnSifab            := Null;
  FRemitos                := Nil;
//  FCodigoInternoSifab     := Null;
//  FCodigoInternoOrigenSifab := Null;
  fObservaciondeEstado      := NUll;
  FEsTesting                := False;
  FImporteTotalServicios  := Null
end;

destructor TFactura.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TFactura.FreeObjectsFromMemory;
begin
  if Assigned( FRemitos) then
    FreeAndNil(FRemitos);
  if Assigned( FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  if Assigned( FEmpresa) then
    FreeAndNil(FEmpresa);
  if Assigned( FEstadoDeFactura) then
    FreeAndNil(FEstadoDeFactura);
  if Assigned( FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  if Assigned( FMoneda) then
    FreeAndNil(FMoneda);
  if Assigned( FUsuario) then
    FreeAndNil(FUsuario);
  if Assigned( FItems) then
    FreeAndNil(FItems);
  if Assigned( FItemsFabricados) then
    FreeAndNil(FItemsFabricados);
  if Assigned( FItemsServicios) then
    FreeAndNil(FItemsServicios);
  if Assigned( FStateLogs) then
    FreeAndNil(FStateLogs);
  if Assigned( FImpuestos) then
    FreeAndNil(FImpuestos);
  if Assigned( FImpuestosItems) then
    FreeAndNil(FImpuestosItems);
  if Assigned( FAutorizaciones) then
    FreeAndNil(FAutorizaciones);
  if Assigned( FRemitos) then
    FreeAndNil(FRemitos);
end;

class function TFactura.AFIPConsultarFacturaExpo(_TF: TTipoDeFormulario; _Numero: String): String;
var
  XML         : TXMLDocument;
  Comprobante : IXMLFEXGetCMPResponseType;
  AFEAFIP     : IAutorizacionElectronicaAfip;
  function XMLFEXGetCMPRequest : String;
  var
    Request : IXMLFEXGetCMPType;
    TKA     : TAFIPTicketAcceso;
  begin
    try
      Request := NewFEXGetCMP;
      try
        TKA                    := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSExpo);
        Request.Auth.Token     := TKA.Token;
        Request.Auth.Sign      := TKA.Sign;
        Request.Auth.Cuit      := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
        Request.Cmp.Cbte_Tipo  := IntToStr( StrToInt( _TF.CodigoFiscal ) );
        Request.Cmp.Punto_vta  := IntToStr( StrToInt( _TF.CentroDeFacturacion.Codigo ) );
        Request.Cmp.Cbte_nro   := _Numero;
      finally
        FreeAndNil(TKA);
      end;
      Result := Request.XML;
    finally
      Request := nil;
    end;
  end;
begin
  try
    AFEAFIP      := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipExpo, Aplicacion.ConstantAllocator.CTE_FEXGetCMP, XMLFEXGetCMPRequest );
    XML          := TXMLDocument.Create(nil);
    XML.XML.Text := AFEAFIP.GetAutorizacionAfip;
    XML.Active   := True;
    Comprobante  := GetFEXGetCMPResponse(XML);
    Result       := Comprobante.XML;
    if (Comprobante.FEXGetCMPResult.FEXResultGet.Resultado <> 'A') and ( Comprobante.FEXGetCMPResult.FEXResultGet.FEXErr.ErrCode > '' ) then
      raise Exception.Create(Comprobante.FEXGetCMPResult.FEXResultGet.FEXErr.ErrCode + '-' + Comprobante.FEXGetCMPResult.FEXResultGet.FEXErr.ErrMsg);
  finally
    XML         := nil;
    Comprobante := nil;
  end;
end;

class function TFactura.AFIPConsultarFacturaLocal(_TF: TTipoDeFormulario; _Numero: String): String;
var
  XML         : TXMLDocument;
  Comprobante : IXMLFECompConsultarResponseType;
  AFEAFIP     : IAutorizacionElectronicaAfip;
  function XMLFECompConsultarRequest : String;
  var
    Request : IXMLFECompConsultarType;
    TKA     : TAFIPTicketAcceso;
  begin
    try
      Request := NewFECompConsultar;
      try
        TKA                    := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSLocal);
        Request.Auth.Token     := TKA.Token;
        Request.Auth.Sign      := TKA.Sign;
        Request.Auth.Cuit      := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
        Request.FeCompConsReq.CbteTipo := IntToStr( StrToInt( _TF.CodigoFiscal ) );
        Request.FeCompConsReq.PtoVta   := IntToStr( StrToInt( _TF.CentroDeFacturacion.Codigo ) );
        Request.FeCompConsReq.CbteNro  := _Numero;
      finally
        FreeAndNil(TKA);
      end;
      Result := Request.XML;
    finally
      Request := nil;
    end;
  end;
begin
  try
    AFEAFIP      := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipLocal, Aplicacion.ConstantAllocator.CTE_FECompConsultar, XMLFECompConsultarRequest );
    XML          := TXMLDocument.Create(nil);
    XML.XML.Text := AFEAFIP.GetAutorizacionAfip;
    XML.Active   := True;
    Comprobante  := GetFECompConsultarResponse(XML);
    Result       := Comprobante.XML;
  finally
    XML         := nil;
    Comprobante := nil;
  end;
end;

class function TFactura.AFIPConsultarUltimoIDExpo : Int64;
var
  XML              : TXMLDocument;
  UltimoIDResponse : IXMLFEXGetLast_IDResponseType;
  AFEAFIP          : IAutorizacionElectronicaAfip;
  function XMLFEXGetLast_IDRequest : String;
  var
    UltimoID : IXMLFEXGetLast_IDType;
    TKA      : TAFIPTicketAcceso;
  begin
    try
      UltimoID := NewFEXGetLast_ID;
      try
        TKA                     := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSExpo);
        UltimoID.Auth.Token     := TKA.Token;
        UltimoID.Auth.Sign      := TKA.Sign;
        UltimoID.Auth.Cuit      := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
      finally
        FreeAndNil(TKA);
      end;
      Result := UltimoID.XML;
    finally
      UltimoID := nil;
    end;
  end;
begin
  try
    AFEAFIP      := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipExpo, Aplicacion.ConstantAllocator.CTE_FEXGetLast_ID, XMLFEXGetLast_IDRequest );
    XML          := TXMLDocument.Create(nil);
    XML.XML.Text := AFEAFIP.GetAutorizacionAfip;
    XML.Active   := True;
    UltimoIDResponse := GetFEXGetLast_IDResponse(XML);
    Result := StrToInt64( UltimoIDResponse.FEXGetLast_IDResult.FEXResultGet.Id );
  finally
    XML := nil;
    UltimoIDResponse := nil;
  end;
end;

class function TFactura.AFIPConsultarUltimoNumeroExpo(_TF: TTipoDeFormulario): Integer;
var
  XML : TXMLDocument;
  UltimoNumeroResponse : IXMLFEXGetLast_CMPResponseType;
  AFEAFIP : IAutorizacionElectronicaAfip;
  function XMLFEXGetLast_CMPRequest(_TF: TTipoDeFormulario): String;
  var
    UltimoNumero : IXMLFEXGetLast_CMPType;
    TKA          : TAFIPTicketAcceso;
  begin
    try
      UltimoNumero := NewFEXGetLast_CMP;
      try
        TKA                         := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSExpo);
        UltimoNumero.Auth.Token     := TKA.Token;
        UltimoNumero.Auth.Sign      := TKA.Sign;
        UltimoNumero.Auth.Cuit      := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
        UltimoNumero.Auth.Pto_venta := IntToStr( StrToInt( _TF.CentroDeFacturacion.Codigo ) );
        UltimoNumero.Auth.Cbte_Tipo := IntToStr( StrToInt( _TF.CodigoFiscal ) );
      finally
        FreeAndNil(TKA);
      end;
      Result := UltimoNumero.XML;
    finally
      UltimoNumero := nil;
    end;
  end;
begin
  try
    AFEAFIP      := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipExpo, Aplicacion.ConstantAllocator.CTE_FEXGetLast_CMP, XMLFEXGetLast_CMPRequest( _TF ) );
    XML          := TXMLDocument.Create(nil);
    XML.XML.Text := AFEAFIP.GetAutorizacionAfip;
    XML.Active   := True;
    UltimoNumeroResponse := GetFEXGetLast_CMPResponse(XML);
    Result := StrToInt( UltimoNumeroResponse.FEXGetLast_CMPResult.FEXResult_LastCMP.Cbte_nro ) + 1;
  finally
    XML := nil;
    UltimoNumeroResponse := nil;
  end;
end;

class function TFactura.AFIPConsultarUltimoNumeroLocal(_TF: TTipoDeFormulario): Integer;
var
  XML : TXMLDocument;
  UltimoNumeroResponse : IXMLFECompUltimoAutorizadoResponseType;
  AFEAFIP : IAutorizacionElectronicaAfip;
  function XMLFECompUltimoAutorizadoRequest(_TF: TTipoDeFormulario): String;
  var
    UltimoNumero : IXMLFECompUltimoAutorizadoType;
    TKA          : TAFIPTicketAcceso;
  begin
    try
      UltimoNumero := NewFECompUltimoAutorizado;
      try
        TKA                     := Aplicacion.DataService.TicketAfipVigente(Aplicacion.ConstantAllocator.PRM_AFIP_TSLocal);
        UltimoNumero.Auth.Token := TKA.Token;
        UltimoNumero.Auth.Sign  := TKA.Sign;
        UltimoNumero.Auth.Cuit  := Aplicacion.TextService.ReemplazarEn( Aplicacion.Empresa.CUIT, '-', '');
      finally
        FreeAndNil(TKA);
      end;
      UltimoNumero.PtoVta   := IntToStr( StrToInt( _TF.CentroDeFacturacion.Codigo ) );
      UltimoNumero.CbteTipo := IntToStr( StrToInt( _TF.CodigoFiscal ) );
      Result                := UltimoNumero.XML;
    finally
      UltimoNumero := nil;
    end;
  end;
begin
  try
    AFEAFIP      := GetIAutorizacionElectronicaAfip;
    AFEAFIP.SendAutorizacionAfip(Aplicacion.DataService.URLWebServiceAfipLocal, Aplicacion.ConstantAllocator.CTE_FECompUltimoAutorizado, XMLFECompUltimoAutorizadoRequest( _TF ) );
    XML          := TXMLDocument.Create(nil);
    XML.XML.Text := AFEAFIP.GetAutorizacionAfip;
    XML.Active   := True;
    UltimoNumeroResponse := GetFECompUltimoAutorizadoResponse(XML);
    Result := StrToInt( UltimoNumeroResponse.FECompUltimoAutorizadoResult.CbteNro ) + 1;
  finally
    XML := nil;
    UltimoNumeroResponse := nil;
  end;
end;

function TFactura.GetArchivoPdf: TString;
begin
  if ((FArchivoPdf=Null ) or (FArchivoPdf='')) and (Numero <> 0) then
    FArchivoPdf := AsignarNombreDePdf;
  Result := FArchivoPdf;
end;

function TFactura.GetAutorizaciones: TFacturaAutorizacionAfipList;
begin
  if not Assigned(FAutorizaciones) then
    GetList(TPDList(FAutorizaciones),TPDList(TFacturaAutorizacionAfipList.CreateByFactura(Self)));
  result := TFacturaAutorizacionAfipList(FAutorizaciones);
end;

function TFactura.GetCodigoDeBarras: TString;
begin
  if ((FCodigoDeBarras='') or (FCodigoDeBarras=Null)) and ( Numero <> 0 ) then
    begin
      FCodigoDeBarras := AnsiReplaceStr( Aplicacion.Empresa.CUIT, '-', '' ) + AnsiRightStr( TipoDeFormulario.CodigoFiscal,2 );
      FCodigoDeBarras := FCodigoDeBarras + CentroDeFacturacion.Codigo + CAI ;
      FCodigoDeBarras := FCodigoDeBarras + FormatDateTime('yyyymmdd', FechaDeVtoCAI );
      FCodigoDeBarras := FCodigoDeBarras + Aplicacion.TextService.DigitoVerificadorFactura( FCodigoDeBarras );
    end;
  Result := FCodigoDeBarras;
end;

//function TFactura.GetCodigoInternoOrigenSifab: TEntero;
//Var
//  Condicion : String;
//begin
//  if (FCodigoInternoOrigenSifab = Null) or (FCodigoInternoOrigenSifab = 0) then
//    begin
//      Condicion := '( NumeroComprobante = ' + InttoStr(Numero) + ' and codigoTipoComprobante = ' + InTToStr(TipoDeFormulario.Formulario.CodigoInternoSifab) + ' and CodigoInternoCentroFacturacion = ' + IntToStr( TipoDeFormulario.CentroDeFacturacion.CodigoInternoSifab ) + ' and CodigoLetraComprobante = ' + IntToStr( TipoDeFormulario.CodigoInternoLetraSifab ) + ' )';
//      FCodigoInternoOrigenSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('ComprobanteFacturacion', Condicion, 'CodigoComprobanteFacturacion');
//    end;
//  Result := FCodigoInternoOrigenSifab;
//end;

//function TFactura.GetCodigoInternoSifab: TEntero;
//Var
//  Condicion : String;
//begin
//  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
//    begin
//      Condicion := '( NumeroComprobante = ' + InttoStr(Numero) + ' and codigoTipoComprobante = ' + InTToStr(TipoDeFormulario.Formulario.CodigoInternoSifab) + ' and CodigoInternoCentroFacturacion = ' + IntToStr( TipoDeFormulario.CentroDeFacturacion.CodigoInternoSifab ) + ' and CodigoLetraComprobante = ' + IntToStr( TipoDeFormulario.CodigoInternoLetraSifab ) + ' )';
//      FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('ComprobanteFacturacion', Condicion, 'CodigoInternoComprobanteFacturacion');
//    end;
//  Result := FCodigoInternoSifab;
//end;

function TFactura.GetConceptoAFIP: TEntero;
var
  HayProductos : Boolean;
  HayServicios : Boolean;
begin
  HayServicios := (ItemsServicios.Count > 0);
  HayProductos := (ItemsFabricados.Count > 0);
  // 1- productos 2- servicios 3-ambos
  // 1- expo definitiva de bienes 2- servicios 4- otros - para expo
  if HayServicios and HayProductos then
    begin
      if Empresa.EsExportacion then
        Result := 4
      else
        Result := 3;
    end
  else if HayServicios then
    begin
      if Empresa.EsExportacion then
        Result := 4
      else
        Result := 2
    end
  else if HayProductos then
    Result := 1
  else
    Result := -1;
end;

function TFactura.GetCondicionDeVenta : TCondicionDeVenta;
begin
  if not assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta,FCondicionDeVenta,CondicionDeVentaID);
  result := TCondicionDeVenta(FCondicionDeVenta);
end;

function TFactura.GetCotizacion: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FCotizacion , 2 );
end;

function TFactura.GetCotizacionDolar: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FCotizacionDolar , 2 );
end;

function TFactura.Save: Boolean;
begin
  If (EstadoDeFacturaID = NullID) then
    begin
      EsCambioDeEstado := True;
      ColocarEstadoGrabado;
    end;

  VerificaCai := TipoDeFormulario.VerificaCai and not TipoDeFormulario.CentroDeFacturacion.EsElectronico and (EstadoDeFactura.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado);

  Result := Inherited Save;

  if Result then
    begin
      if EsCambioDeEstado then
        AgregarNuevoEstadoAlLog;
    end
  else
    begin
      ColocarEstadoRechazado;
      AgregarNuevoEstadoAlLog;
    end;
  EsCambioDeEstado := False;
end;

procedure TFactura.SetCondicionDeVentaID(Value : TObjectID);
begin
  if (Value<>FCondicionDeVentaID) and Assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);
  FCondicionDeVentaID := Value;
end;

procedure TFactura.SetCotizacion(const Value: TReal);
begin
  FCotizacion := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetCotizacionDolar(const Value: TReal);
begin
  FCotizacionDolar := Aplicacion.MathService.Redondear( Value , 2 );
end;

function TFactura.GetEmpresa : TEmpresa;
begin
  if not assigned(FEmpresa) then
    GetObject(TEmpresa,FEmpresa,EmpresaID);
  result := TEmpresa(FEmpresa);
end;

procedure TFactura.SetEmpresaID(Value : TObjectID);
begin
  if (Value<>FEmpresaID) and Assigned(FEmpresa) then
    FreeAndNil(FEmpresa);
  FEmpresaID := Value;
end;

function TFactura.GetEstadoDeFactura : TEstadoDeFactura;
begin
  if not assigned(FEstadoDeFactura) then
    GetObject(TEstadoDeFactura,FEstadoDeFactura,EstadoDeFacturaID);
  result := TEstadoDeFactura(FEstadoDeFactura);
end;

//function TFactura.GetEstaEnSifab: TBoolean;
//begin
//  if (FEstaEnSifab = Null) then
//    FEstaEnSifab := (CodigoInternoSifab <> 0);
//  Result := FEstaEnSifab;
//end;

function TFactura.GetFacturaAsociada: TFactura;
begin
  if not Assigned(FFacturaAsociada) then
    GetObject(TFactura,FFacturaAsociada,FacturaAsociadaID);
  result := TFactura(FFacturaAsociada);
end;

procedure TFactura.SetEstadoDeFacturaID(Value : TObjectID);
begin
  if (Value<>FEstadoDeFacturaID) and Assigned(FEstadoDeFactura) then
    FreeAndNil(FEstadoDeFactura);
  FEstadoDeFacturaID := Value;
end;

procedure TFactura.SetFacturaAsociadaID(const Value: TObjectID);
begin
  if (Value<>FFacturaAsociadaID) and Assigned(FFacturaAsociada) then
    FreeAndNil(FFacturaAsociada);
  FFacturaAsociadaID := Value;
end;

function TFactura.GetGrupoDeVendedor : TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor,FGrupoDeVendedor,GrupoDeVendedorID);
  result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TFactura.GetImporteExcento: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImporteExcento , 2 );
end;

function TFactura.GetImporteNetoGravado: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImporteNetoGravado , 2 );
end;

function TFactura.GetImporteTotalServicios: TReal;
begin
  if (FImporteTotalServicios = Null) then
    begin
      FImporteTotalServicios := 0;
      ItemsServicios.First;
      while not ItemsServicios.IsLast do
        begin
          if (ItemsServicios.Actual.Impuestos.Count > 0) then
            begin
              ItemsServicios.Actual.Impuestos.First;
              FImporteTotalServicios := FImporteTotalServicios + (ItemsServicios.Actual.ImporteItem * (ItemsServicios.Actual.Impuestos.Actual.PorcentajeImpuesto/100));
            end
          else
            FImporteTotalServicios := FImporteTotalServicios + ItemsServicios.Actual.ImporteItem;
          ItemsServicios.Next;
        end;
    end;
  Result := FImporteTotalServicios;
end;

function TFactura.GetImporteNetoNoGravado: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImporteNetoNoGravado , 2 );
end;

function TFactura.GetTotalFacturado: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FTotalFacturado , 2 );
end;

function TFactura.GetImpuestos: TFacturaImpuestoList;
begin
  if not Assigned(FImpuestos) then
    GetList(TPDList(FImpuestos),TPDList(TFacturaImpuestoList.CreateByFactura(Self)));
  result := TFacturaImpuestoList(FImpuestos);
end;

function TFactura.GetImpuestosItems: TFacturaItemImpuestoList;
begin
  if not Assigned(FImpuestosItems) then
    GetList(TPDList(FImpuestosItems),TPDList(TFacturaItemImpuestoList.CreateByFactura(Self)));
  Result := TFacturaItemImpuestoList(FImpuestosItems);
end;

function TFactura.GetItems: TFacturaItemList;
begin
  if not Assigned(FItems) then
    GetList(TPDList(FItems),TPDList(TFacturaItemList.CreateByFactura(Self, False, False)));
  result := TFacturaItemList(FItems);
end;

function TFactura.GetItemsFabricados: TFacturaItemList;
begin
  if not Assigned(fItemsFabricados) then
    GetList(TPDList(fItemsFabricados),TPDList(TFacturaItemList.CreateByFactura(Self, True, False)));
  result := TFacturaItemList(fItemsFabricados);
end;

function TFactura.GetItemsServicios: TFacturaItemList;
begin
  if not Assigned(fItemsServicios) then
    GetList(TPDList(fItemsServicios),TPDList(TFacturaItemList.CreateByFactura(Self, False, True)));
  result := TFacturaItemList(fItemsServicios);
end;

procedure TFactura.SetGrupoDeVendedorID(Value : TObjectID);
begin
  if (Value<>FGrupoDeVendedorID) and Assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

procedure TFactura.SetImporteExcento(const Value: TReal);
begin
  FImporteExcento := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetImporteNetoGravado(const Value: TReal);
begin
  FImporteNetoGravado := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetImporteNetoNoGravado(const Value: TReal);
begin
  FImporteNetoNoGravado := Aplicacion.MathService.Redondear( Value , 2 );
end;


function TFactura.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  result := TMoneda(FMoneda);
end;

function TFactura.GetObservaciondeEstado: TString;
begin
  if (FObservaciondeEstado = Null) then
    If StateLogs.count > 0 then
      Begin
        StateLogs.Last;
        If StateLogs.Actual.Observaciones = Null then
          FObservaciondeEstado := ''
        else
          FObservaciondeEstado := StateLogs.Actual.Observaciones;
      End
    else
      FObservaciondeEstado := '';
  Result := FObservaciondeEstado;
end;

function TFactura.GetRemitos: TRemitoList;
var
  R : TRemito;
begin
  if Not Assigned( FRemitos ) then
    begin
      FRemitos := TRemitoList.CreateEmpty;
      Items.First;
      while not Items.IsLast do
        begin
          if (Items.Actual.RemitoItem.RemitoID <> NullID) and not FRemitos.Find( Items.Actual.RemitoItem.RemitoID)  then
            Begin
              R := TRemito.Create;
              R.Load( Items.Actual.RemitoItem.RemitoID );
              FRemitos.Add( R );
              R.NilObject;
            End;
          Items.Next
        end;
      FRemitos.First;
    end;
  Result := TRemitoList( FRemitos );
end;

function TFactura.GetStateLogs: TFacturaStateLogList;
begin
  if not Assigned(FStateLogs) then
    GetList(TPDList(FStateLogs),TPDList(TFacturaStateLogList.CreateByFactura(Self)));
  result := TFacturaStateLogList(FStateLogs);
end;

function TFactura.GetTotalImpuestoItems: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FTotalImpuestoItems , 2 );
end;

function TFactura.GetTotalImpuestos: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FTotalImpuestos , 2 );
end;

function TFactura.GetTotalImpuestosCabecera: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FTotalImpuestosCabecera , 2 );
end;

procedure TFactura.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

procedure TFactura.SetObservacionDeEstado(_ObservacionDeEstado: String);
begin
  fObservaciondeEstado := _ObservacionDeEstado;
end;

procedure TFactura.SetTotalFacturado(const Value: TReal);
begin
  FTotalFacturado := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetTotalImpuestoItems(const Value: TReal);
begin
  FTotalImpuestoItems := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetTotalImpuestos(const Value: TReal);
begin
  FTotalImpuestos := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFactura.SetTotalImpuestosCabecera(const Value: TReal);
begin
  FTotalImpuestosCabecera := Aplicacion.MathService.Redondear( Value , 2 );
end;

function TFactura.GetUsuario : TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);
  result := TUsuario(FUsuario);
end;

procedure TFactura.LimpiarItemsDeMemoria;
begin
  If not assigned(FItems) Then
    FreeAndNil(FItems);
end;

function TFactura.ObtenerEstadoID(_Cod: String): TObjectID;
Var
  EL : TEstadoDeFacturaList;
Begin
  Result := NullID;
  Try
    EL := TEstadoDeFacturaList.CreateByCodigo(_Cod, False);
    if (EL.Count = 0) then
      Raise Exception.Create ('No existe el Estado de Factura: ' +  _Cod + ' en la tabla');
    Result := El.Actual.ID;
  Finally
    FreeAndNil (EL);
  End;
end;

procedure TFactura.RecalcularImpuestos;
begin
  // se borran los impuestos de cada item
  Items.First;
  while not Items.IsLast do
    begin
      Items.actual.Impuestos.DeleteAll;
      Items.Next;
    end;
  // se borran los impuestos de la cabecera
  Impuestos.DeleteAll;
  TotalImpuestosCabecera := 0;
  TotalImpuestoItems     := 0;
  TotalImpuestos         := 0;

  TFactura.CalcularImportesNetos( Self );
  if ImporteNetoGravado > 0 then
    begin
  Items.First;
  while not Items.IsLast do
    begin
      TFactura.AgregarImpuestosItems( Items.actual, Self );
      Items.Next;
    end;
    end;
  TFactura.AgregarImpuestosCabecera( self ); // siempre debe ir despues de   TFactura.AgregarImpuestosCabecera( self ) para que se calcule primero el importenetogravado;

  TotalImpuestos := TotalImpuestoItems + TotalImpuestosCabecera;
  TotalFacturado := ImporteNetoGravado + ImporteNetoNoGravado + ImporteExcento + TotalImpuestos;
end;

class function TFactura.Reporte(_F: TFactura; _PreView, _Imprimir, _ExportarPDF: Boolean): String;
var
  frxReport                 : TfrxReport;
  frxDBDtstReporte          : TfrxDBDataset;
  frxDBDtstReporteItems     : TfrxDBDataset;
  frxDBDtstReporteImpuestos : TfrxDBDataset;
  Exportfilter              : TfrxCustomExportFilter;
  frxPDFExport              : TfrxPDFExport;
  frxRichObject             : TfrxRichObject;
  ClntDtStReporte           : TClientDataSet;
  ClntDtStReporteItems      : TClientDataSet;
  ClntDtStReporteImpuestos  : TClientDataSet;

  procedure CargarTitulos;
  begin
    if (_F.Empresa.Localidad.Pais.ResourceLanguagePais.codigo = 'ES') then
      if FileExists( _F.TipoDeFormulario.ArchivoFD3TitulosES ) then
        frxReport.Variables.LoadFromFile( _F.TipoDeFormulario.ArchivoFD3TitulosES )
      else
        raise Exception.Create('Falta el archivo ' + _F.TipoDeFormulario.ArchivoFD3TitulosES);

    if (_F.Empresa.Localidad.Pais.ResourceLanguagePais.codigo = 'EN') then
      if FileExists( _F.TipoDeFormulario.ArchivoFD3TitulosEN ) then
        frxReport.Variables.LoadFromFile( _F.TipoDeFormulario.ArchivoFD3TitulosEN )
      else
        raise Exception.Create('Falta el archivo ' + _F.TipoDeFormulario.ArchivoFD3TitulosEN);

    if (_F.Empresa.Localidad.pais.ResourceLanguagePais.codigo = 'PO') then
      if FileExists( _F.TipoDeFormulario.ArchivoFD3TitulosPO ) then
        frxReport.Variables.LoadFromFile( _F.TipoDeFormulario.ArchivoFD3TitulosPO )
      else
        raise Exception.Create('Falta el archivo ' + _F.TipoDeFormulario.ArchivoFD3TitulosPO);
  end;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile( _F.TipoDeFormulario.ArchivoXMLCamposEncabezado );
    ClntDtStReporte.Open;

    frxDBDtstReporte := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;

    ClntDtStReporteItems := TClientDataSet.Create(nil);
    ClntDtStReporteItems.LoadFromFile( _F.TipoDeFormulario.ArchivoXMLCamposItems );
    ClntDtStReporteItems.Open;

    frxDBDtstReporteItems := TfrxDBDataset.Create(nil);
    frxDBDtstReporteItems.Name := 'frxDBDtstReporteItems';
    frxDBDtstReporteItems.DataSet := ClntDtStReporteItems;
    frxDBDtstReporteItems.Open;

    ClntDtStReporteImpuestos := TClientDataSet.Create(nil);
    ClntDtStReporteImpuestos.LoadFromFile( '\\aph-fserver.apholos.local\usuarios\aphsoftware\Reportes\campos\ClntdtstCabeceraFacturaImpuestos.xml' );
    ClntDtStReporteImpuestos.Open;

    frxDBDtstReporteImpuestos := TfrxDBDataset.Create(nil);
    frxDBDtstReporteImpuestos.Name := 'frxDBDtstReporteImpuestos';
    frxDBDtstReporteImpuestos.DataSet := ClntDtStReporteImpuestos;
    frxDBDtstReporteImpuestos.Open;

    frxReport := TfrxReport.Create(nil);
    frxReport.LoadFromFile( _F.TipoDeFormulario.ArchivoReporte, True );
    frxReport.PreviewOptions.Buttons := [pbZoom, pbFind, pbOutline, pbNavigator, pbPrint, pbExportQuick ];

    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.DataSets.Add(frxDBDtstReporteItems);
    frxReport.DataSets.Add(frxDBDtstReporteImpuestos);

    frxPDFExport := TfrxPDFExport.Create(frxReport);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.PrintOptimized := True;
    frxPDFExport.OpenAfterExport := False;
    frxPDFExport.Outline := True;
    frxPDFExport.ProtectionFlags := [ePrint];

    frxPDFExport.Title := _F.TipoDeFormulario.Descripcion;
    frxPDFExport.Author := Aplicacion.Empresa.Descripcion;
    frxPDFExport.Subject := _F.numeroFinal;
    frxPDFExport.Creator := Aplicacion.Empresa.Descripcion + ' (' + Aplicacion.Empresa.CUIT + ')';

    Exportfilter := TfrxCustomExportFilter(frxPDFExport);
    ExportFilter.FileName := Aplicacion.ParametrosDelSistema.Carpeta_FacturasPDF +'\'+ _F.ArchivoPdf ;

    if (_F.TipoDeFormulario.ImpresoraDefaultID <> NullID) then
      frxReport.Report.PrintOptions.Printer    := _F.TipoDeFormulario.ImpresoraDefault.DireccionDeRed
    else
      frxReport.Report.PrintOptions.Printer    := Aplicacion.ParametroLocal.ImpresoraPredetWindows;
    frxReport.Report.PrintOptions.Copies       := _F.TipoDeFormulario.CantidadDeImpresiones;

    CargarTitulos;
  end;

  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporteItems.EmptyDataSet;
    // cargo datos de cabecera
    ClntDtStReporte.Append;
    ClntDtStReporte.FieldByName('EsTesting').Value              := _F.EsTesting;
    ClntDtStReporte.FieldByName('ID').AsInteger                 := _F.ID;
    ClntDtStReporte.FieldByName('FechaDeEmision').Value         := _F.FechaHora;
    ClntDtStReporte.FieldByName('FechaDeImpresion').Value       := _F.FechaDeImpresion;
    ClntDtStReporte.FieldByName('Formulario').AsString          := _F.TipoDeFormulario.Formulario.Descripcion;
    ClntDtStReporte.FieldByName('Letra').AsString               := _F.TipoDeFormulario.Letra;
    ClntDtStReporte.FieldByName('CodigoFiscal').AsString        := _F.TipoDeFormulario.CodigoFiscal;

    if (_F.ObservacionDeEstado > '') then
      ClntDtStReporte.FieldByName('TextoPieImpresion').AsString   := _F.ObservacionDeEstado;
    if (ClntDtStReporte.FieldByName('TextoPieImpresion').AsString > '') then
      begin
        ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := ClntDtStReporte.FieldByName('TextoPieImpresion').AsString + #10#13 + #10#13;
        ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := ClntDtStReporte.FieldByName('TextoPieImpresion').AsString + _F.TipoDeFormulario.PieImpresion;
      end
    else
      ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := + _F.TipoDeFormulario.PieImpresion;

    ClntDtStReporte.FieldByName('NumeroDeFactura').AsString     := AnsiReplaceStr(_F.NumeroFinal, _F.TipoDeFormulario.Letra + '-', '');
    ClntDtStReporte.FieldByName('EsElectronica').Value          := _F.TipoDeFormulario.CentroDeFacturacion.EsElectronico;
    ClntDtStReporte.FieldByName('Vendedor').AsString            := _F.GrupoDeVendedor.Codigo + '-' + _F.GrupoDeVendedor.Descripcion;
    ClntDtStReporte.FieldByName('CodigoEmpresa').AsString       := _F.Empresa.Codigo;
    ClntDtStReporte.FieldByName('NombreEmpresa').AsString       := _F.Empresa.Descripcion;
    ClntDtStReporte.FieldByName('CUITEmpresa').AsString         := _F.Empresa.CUIT;
    ClntDtStReporte.FieldByName('DireccionEmpresa').AsString    := _F.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString := _F.Empresa.CodigoPostal;
    ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString    := _F.Empresa.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('CondicionDeIVA').AsString      := _F.Empresa.CondicionDeIva.Descripcion;
    // datos de apholos
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := Aplicacion.Empresa.Descripcion;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := Aplicacion.Empresa.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := Aplicacion.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalApholos').AsString := Aplicacion.Empresa.CodigoPostal;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := Aplicacion.Empresa.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('NroIngresosBrutos').AsString   := Aplicacion.Empresa.NumeroDeIngresosBrutos;
    ClntDtStReporte.FieldByName('FechaInicioActividades').Value := Aplicacion.Empresa.FechaInicioActividad;
    ClntDtStReporte.FieldByName('CondicionDeIVAApholos').AsString := Aplicacion.Empresa.CondicionDeIva.Descripcion;
    // datos de apholos

    // datos de exportacion
    if _F.Empresa.EsExportacion then
      begin
        if (_F.Empresa.Localidad.pais.TipoDeClaveFiscalID <> NullID) then
          ClntDtStReporte.FieldByName('TipoIDImpositivoExterior').AsString := _F.Empresa.Localidad.pais.TipoDeClaveFiscal.Codigo;
        ClntDtStReporte.FieldByName('IDImpositivoExterior').AsString:= _F.Empresa.IDImpositivoExterior;
        _F.Items.First;
        if (_F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.IncotermID <> NullID) then
          ClntDtStReporte.FieldByName('Incoterm').AsString := _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Incoterm.Codigo;
      end;
    // datos de exportacion

    if _F.FacturaAsociadaID <> NullID then
      if (ClntDtStReporte.FieldByName('TextoPieImpresion').AsString >'') then
        Begin
          ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := ClntDtStReporte.FieldByName('TextoPieImpresion').AsString + #10#13;
          ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := ClntDtStReporte.FieldByName('TextoPieImpresion').AsString + 'Asociado con comprobante: ' + _F.FacturaAsociada.TipoDeFormulario.Descripcion + ' ' + _F.FacturaAsociada.NumeroFinal;
        End
      else
        ClntDtStReporte.FieldByName('TextoPieImpresion').AsString := 'Asociado con comprobante: ' + _F.FacturaAsociada.TipoDeFormulario.Descripcion + ' ' + _F.FacturaAsociada.NumeroFinal;

    ClntDtStReporte.FieldByName('CondiciondeVenta').AsString   := _F.CondicionDeVenta.Descripcion;
    ClntDtStReporte.FieldByName('Observaciones').AsString      := _F.Observaciones;
    ClntDtStReporte.FieldByName('FechaVtoCAI').Value           := _F.FechaDeVtoCAI;
    ClntDtStReporte.FieldByName('CAI').AsString                := _F.CAI;
    ClntDtStReporte.FieldByName('Moneda').AsString             := _F.Moneda.Codigo;
    ClntDtStReporte.FieldByName('MonedaDescripcion').AsString  := _F.Moneda.Descripcion;
    ClntDtStReporte.FieldByName('Cotizacion').Value            := _F.Cotizacion;
    ClntDtStReporte.FieldByName('CotizacionDolar').Value       := _F.CotizacionDolar;
    ClntDtStReporte.FieldByName('ImporteSinImpuestos').Value   := _F.ImporteNetoGravado + _F.ImporteNetoNoGravado;
    ClntDtStReporte.FieldByName('ImporteTotal').Value          := _F.TotalFacturado;
    ClntDtStReporte.FieldByName('ImporteTotalTexto').AsString  := Aplicacion.TextService.NumeroToLetras( _F.TotalFacturado, True, True);
    if _F.CodigoDeBarras <> Null then
      ClntDtStReporte.FieldByName('CodigoDeBarras').AsString     := _F.CodigoDeBarras;
    ClntDtStReporte.FieldByName('CodigoQR').AsString           := Aplicacion.ParametrosDelSistema.URLBase_FacturasPDF+_F.ArchivoPdf;
    ClntDtStReporte.FieldByName('URLPdf').AsString             := Aplicacion.ParametrosDelSistema.URLBase_FacturasPDF+_F.ArchivoPdf;

    ClntDtStReporte.Post;
    // cargo los items
    _F.Items.First;
    while not _F.Items.IsLast  do
      begin
        ClntDtStReporteItems.Append;
        ClntDtStReporteItems.FieldByName('ID').Value                  := _F.Items.Actual.ID;
        ClntDtStReporteItems.FieldByName('Item').Value                := _F.Items.Actual.ItemNro;
        ClntDtStReporteItems.FieldByName('Cantidad').Value            := _F.Items.Actual.Cantidad;
        ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString   := _F.Items.Actual.Producto.Codigo;
        ClntDtStReporteItems.FieldByName('PrecioUnitarioConIva').Value:= _F.Items.Actual.PrecioUnitario;
        if (_F.Items.Actual.Impuestos.Count > 0) then
          begin
            _F.Items.Actual.Impuestos.First;
            ClntDtStReporteItems.FieldByName('Alicuota').Value            := _F.Items.Actual.Impuestos.Actual.ImpuestoConcepto.Alicuota;
            ClntDtStReporteItems.FieldByName('PrecioUnitarioConIva').Value:= _F.Items.Actual.PrecioUnitario * (1+(_F.Items.Actual.Impuestos.Actual.ImpuestoConcepto.Alicuota / 100));
          end;
        if (_F.Items.Actual.RemitoItemID <> NullID) then
          ClntDtStReporteItems.FieldByName('RemitoItem').AsString     := IntToStr(_F.Items.Actual.RemitoItem.Remito.Numero) + '/' + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(_F.Items.Actual.RemitoItem.ItemNro) , '0', 2 );

        if (_F.Items.Actual.PedidoDeVentaItemID <> NullID) then
          begin
            ClntDtStReporteItems.FieldByName('PedidoItem').AsString     := IntToStr(_F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Numero) + '/' + Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(_F.Items.Actual.PedidoDeVentaItem.ItemNro) , '0', 2 );
            if _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.TipoDePedidoDeVenta.EsAutonumerado and _F.Items.Actual.Producto.EsFabricado then // esto es si detalla accesorios del producto
              begin
                ClntDtStReporteItems.FieldByName('AccesorioCodigo').AsString  := _F.Items.Actual.Producto.CodigoAccesorio;
                ClntDtStReporteItems.FieldByName('Descripcion').AsString    := 'Accesorios P/' + _F.Items.Actual.Producto.Fabricado.Articulo.Descripcion;
              end
            else
              if _F.Empresa.EsExportacion and _F.Items.Actual.Producto.EsFabricado then
                ClntDtStReporteItems.FieldByName('Descripcion').AsString          := _F.Items.Actual.Producto.Fabricado.DescripcionParaExportacion
              else
                ClntDtStReporteItems.FieldByName('Descripcion').AsString    :=  _F.Items.Actual.PedidoDeVentaItem.DescripcionDelItem;
          end
        else
          if _F.Empresa.EsExportacion and _F.Items.Actual.Producto.EsFabricado then
           ClntDtStReporteItems.FieldByName('Descripcion').AsString      := _F.Items.Actual.Producto.Fabricado.DescripcionParaExportacion
         else
           ClntDtStReporteItems.FieldByName('Descripcion').AsString    := _F.Items.Actual.Producto.Descripcion;
        ClntDtStReporteItems.FieldByName('OrdenDeCompra').AsString    := _F.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.NroOrdenDeCompraCliente;
        ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString   := _F.Items.Actual.Producto.Fabricado.UnidadDeMedida.Codigo;
        ClntDtStReporteItems.FieldByName('PrecioUnitario').Value      := _F.Items.Actual.PrecioUnitario;
        ClntDtStReporteItems.FieldByName('Importe').Value             := _F.Items.Actual.ImporteItem;

        _F.Items.Actual.Impuestos.first; // al importe neto le sumo los impuestos del item
        ClntDtStReporteItems.FieldByName('ImporteConIva').Value       := _F.Items.Actual.ImporteItem;
        while Not _F.Items.Actual.Impuestos.IsLast do
          begin
            ClntDtStReporteItems.FieldByName('ImporteConIva').Value   := ClntDtStReporteItems.FieldByName('ImporteConIva').Value + _F.Items.Actual.Impuestos.Actual.Impuesto;
            _F.Items.Actual.Impuestos.Next;
          end;
        ClntDtStReporteItems.Post;
        _F.Items.Next;
      End;

    if (_F.Items.Count > 0) and _F.Empresa.CondicionDeIva.DiscriminaIVA then
      begin
        _F.Items.First;
        repeat
          if ( _F.Items.Actual.Impuestos.Count > 0) then
            begin
              _F.Items.Actual.Impuestos.First;
              repeat
                if not ClntDtStReporteImpuestos.Locate('ImpuestoConcepto', _F.Items.Actual.Impuestos.Actual.ImpuestoConcepto.Descripcion , []) then
                  begin
                    ClntDtStReporteImpuestos.Append;
                    ClntDtStReporteImpuestos.FieldByName('ImpuestoConceptoID').Value  := _F.Items.Actual.Impuestos.Actual.ImpuestoConceptoID;
                    ClntDtStReporteImpuestos.FieldByName('ImpuestoConcepto').AsString := _F.Items.Actual.Impuestos.Actual.ImpuestoConcepto.Descripcion;
                    ClntDtStReporteImpuestos.FieldByName('ImporteNetoGravado').Value  := _F.Items.Actual.Impuestos.Actual.BaseImponible;
                    ClntDtStReporteImpuestos.FieldByName('PorcentajeImpuesto').Value  := _F.Items.Actual.Impuestos.Actual.PorcentajeImpuesto;
                    ClntDtStReporteImpuestos.FieldByName('Impuesto').Value            := _F.Items.Actual.Impuestos.Actual.Impuesto;
                    ClntDtStReporteImpuestos.Post;
                  end
                else
                  begin
                    ClntDtStReporteImpuestos.Edit;
                    ClntDtStReporteImpuestos.FieldByName('ImporteNetoGravado').Value  := ClntDtStReporteImpuestos.FieldByName('ImporteNetoGravado').Value + _F.Items.Actual.Impuestos.Actual.BaseImponible;
                    ClntDtStReporteImpuestos.FieldByName('Impuesto').Value            := ClntDtStReporteImpuestos.FieldByName('Impuesto').Value + _F.Items.Actual.Impuestos.Actual.Impuesto;
                    ClntDtStReporteImpuestos.Post;
                  end;
                _F.Items.Actual.Impuestos.Next;
              until _F.Items.Actual.Impuestos.IsLast;
            end;
            _F.Items.Next;
        until _F.Items.IsLast;
      end;
    // cargo los impuestos
    if ( _F.Impuestos.Count > 0) then
      begin
        _F.Impuestos.First;
        repeat
          ClntDtStReporteImpuestos.Append;
          ClntDtStReporteImpuestos.FieldByName('ImpuestoConceptoID').Value  := _F.Impuestos.Actual.ImpuestoConceptoID;
          ClntDtStReporteImpuestos.FieldByName('ImpuestoConcepto').AsString := _F.Impuestos.Actual.ImpuestoConcepto.Descripcion;
          ClntDtStReporteImpuestos.FieldByName('ImporteNetoGravado').Value  := _F.Impuestos.Actual.ImporteNetoGravado;
          ClntDtStReporteImpuestos.FieldByName('PorcentajeImpuesto').Value  := _F.Impuestos.Actual.PorcentajeImpuesto;
          ClntDtStReporteImpuestos.FieldByName('Impuesto').Value            := _F.Impuestos.Actual.Impuesto;
          ClntDtStReporteImpuestos.Post;
          _F.Impuestos.Next;
        until _F.Impuestos.IsLast;
      end
    else
      if (ClntDtStReporteImpuestos.RecordCount = 0 ) then
        begin
          // grabo un registro vacío para que me muestre el total
          ClntDtStReporteImpuestos.Append;
          ClntDtStReporteImpuestos.Post;
        end;
  end;
  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(frxDBDtstReporteItems);
    FreeAndNil(frxDBDtstReporteImpuestos);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(ClntDtStReporteItems);
    FreeAndNil(ClntDtStReporteImpuestos);
  end;

  procedure MostrarPDF( _File, _Titulo : String);
  var
    PDF : TFrmMostrarPDF;
  begin
    try
      PDF               := TfrmMostrarPDF.Create(nil);
      PDF.RutaDeArchivo := _File;
      PDF.TituloDelForm := _Titulo;
      PDF.VerArbol      := False;
      PDF.ShowModal;
    finally
      PDF := Nil;
    end;
  end;

begin
 try
    if not _F.TipoDeFormulario.EditarPorAdministrador and _PreView and  (_F.ArchivoPdf > '') and fileExists( Aplicacion.ParametrosDelSistema.Carpeta_FacturasPDF+'\'+_F.ArchivoPdf  ) then
      begin
        MostrarPDF( Aplicacion.ParametrosDelSistema.Carpeta_FacturasPDF+'\'+_F.ArchivoPdf, _F.NumeroFinal );
        exit;
      end;

    Aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;

    if _F.TipoDeFormulario.EditarPorAdministrador then
      begin
        frxReport.DesignReport;
        exit;
      end;

    if _PreView then
      begin
        frxReport.Report.PrintOptions.ShowDialog := True;
        ExportFilter.ShowDialog := true;
        frxReport.ShowReport;
      end
    else if (_F.EstadoDeFactura.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Confirmado) then
      begin
        frxReport.PrintOptions.ShowDialog := False;
        frxReport.ShowProgress            := False;
        frxReport.PrepareReport;
        if _Imprimir and _ExportarPDF then
          begin
            frxReport.Report.PrintOptions.ShowDialog := False;
            frxReport.Report.Print;
            ExportFilter.ShowDialog := False;
            frxReport.Export(ExportFilter);
          end
        else if _Imprimir then
          begin
            frxReport.Report.PrintOptions.ShowDialog := False;
            frxReport.Report.Print;
          end
        else if _ExportarPDF then
          begin
            ExportFilter.ShowDialog := False;
            frxReport.Export(ExportFilter);
          end;
      end;

  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
  end;
end;

class function TFactura.RevertirFacturaConNotaDeCredito(_F: TFactura; _TF: TTipoDeFormulario; _Obs : String): Boolean;
var
  F     : TFactura;
  FI    : TFacturaItem;
  FImp  : TFacturaImpuesto;
  FIImp : TFacturaItemImpuesto;
  FL    : TFacturaList;
begin
  try
    FL := TFacturaList.CreateEmpty;

    if _F.Items.Count = 0 then
      Aplicacion.raiseExceptionCreate('La Factura no posee ítems.');

    F                         := TFactura.Create;
    F.UsuarioID               := Aplicacion.Sesion.Usuario.ID;
    F.CondicionDeVentaID      := _F.CondicionDeVentaID;
    F.TipoDeFormularioID      := _TF.ID;
    F.EmpresaID               := _F.EmpresaID;
    F.GrupoDeVendedorID       := _F.GrupoDeVendedorID;
    F.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
    F.MonedaID                := _F.MonedaID;
    F.Cotizacion              := _F.Cotizacion;
    F.CotizacionDolar         := _F.CotizacionDolar;
    F.ImporteNetoGravado      := _F.ImporteNetoGravado;
    F.ImporteNetoNoGravado    := _F.ImporteNetoNoGravado;
    F.ImporteExcento          := _F.ImporteExcento;
    F.TotalFacturado          := _F.TotalFacturado;
    F.TotalImpuestoItems      := _F.TotalImpuestoItems;
    F.TotalImpuestosCabecera  := _F.TotalImpuestosCabecera;
    F.TotalImpuestos          := _F.TotalImpuestos;
    F.FacturaAsociadaID       := _F.ID;
    F.Observaciones           := _Obs;


    F.Save;
    _F.Impuestos.First;
    while not _F.Impuestos.IsLast do
      begin
        try
          FImp                    := TFacturaImpuesto.Create;
          FImp.FacturaID          := F.ID;
          FImp.ImpuestoConceptoID := _F.Impuestos.Actual.ImpuestoConceptoID;
          FImp.PorcentajeImpuesto := _F.Impuestos.Actual.PorcentajeImpuesto;
          FImp.ImporteNetoGravado := _F.Impuestos.Actual.ImporteNetoGravado;
          FImp.Impuesto           := _F.Impuestos.Actual.Impuesto;
          FImp.Save;
          F.Impuestos.Add(FImp)
        finally
          FImp.NilObject;
        end;
        _F.Impuestos.Next;
      end;
    _F.Items.First;
    while not _F.Items.IsLast do
      begin
        FI                     := TFacturaItem.Create;
        FI.FacturaID           := F.ID;
        FI.PedidoDeVentaItemID := _F.Items.Actual.PedidoDeVentaItemID;
        FI.RemitoItemID        := _F.Items.Actual.RemitoItemID;
        FI.ProductoID          := _F.Items.Actual.ProductoID;
        FI.ItemNro             := _F.Items.Actual.ItemNro;
        FI.PrecioUnitario      := _F.Items.Actual.PrecioUnitario;
        FI.Cantidad            := _F.Items.Actual.Cantidad;
        FI.PorcentajeDescuento := _F.Items.Actual.PorcentajeDescuento;
        FI.ImporteItem         := _F.Items.Actual.ImporteItem;
        FI.Save;
        while not _F.Items.Actual.Impuestos.IsLast do
          begin
            try
              FIImp                    := TFacturaItemImpuesto.Create;
              FIImp.FacturaItemID      := FI.ID;
              FIImp.ImpuestoConceptoID := _F.Items.Actual.Impuestos.Actual.ImpuestoConceptoID;
              FIImp.PorcentajeImpuesto := _F.Items.Actual.Impuestos.Actual.PorcentajeImpuesto;
              FIImp.BaseImponible      := _F.Items.Actual.Impuestos.Actual.BaseImponible;
              FIImp.Impuesto           := _F.Items.Actual.Impuestos.Actual.Impuesto;
              FIImp.Save;
              FI.Impuestos.Add(FIImp);
            finally
              FIImp.NilObject;
            end;
            _F.Items.Actual.Impuestos.Next;
          end;
        FI.Save;
        F.Items.Add(FI);
        FI.NilObject;
        _F.Items.Next;
      end;
    F.Save;
    FL.Add(F);
    FL.ApplyUpdates;
  finally
    F.NilObject;
  end;
end;

procedure TFactura.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;
 { TFacturaDM }
class function TFacturaDM.TableName : string;
begin
  Result := 'Facturas';
end;

class function TFacturaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TFacturaDM.ID_FieldName : string;
begin
  Result := 'FacturaID';
end;

class function TFacturaDM.ImpuestosItemsFiltrados(_F : TFactura): String;
begin
  Result := 'Select ' + TImpuestoConceptoDM.TableName + '.' +  TImpuestoConceptoDM._CodigoAfip + ', ' +
  TFacturaItemImpuestoDM.TableName + '.' + TFacturaItemImpuestoDM._ImpuestoConceptoID +
   ', SUM( ' + TFacturaItemImpuestoDM.TableName + '.' + TFacturaItemImpuestoDM._BaseImponible + ') as ' + TFacturaItemImpuestoDM._BaseImponible +
   ', SUM( ' + TFacturaItemImpuestoDM.TableName + '.' + TFacturaItemImpuestoDM._Impuesto      + ') as ' + TFacturaItemImpuestoDM._Impuesto;
  Result := Result + ' from ' + TFacturaItemImpuestoDM.TableName;
  Result := Result + ' Left Join ' + TImpuestoConceptoDM.TableName + ' on (' + TImpuestoConceptoDM.TableName + '.' + TImpuestoConceptoDM.ID_FieldName + '=' + TFacturaItemImpuestoDM.TableName + '.' + TFacturaItemImpuestoDM._ImpuestoConceptoID + ')';
  Result := Result + ' where ' + TFacturaItemImpuestoDM._FacturaItemID + ' in (select ' + TFacturaItemDM.ID_FieldName + ' from ' + TFacturaItemDM.TableName;
  Result := Result + ' where ' + TFacturaItemDM._FacturaID + ' = ' + IntToStr(_F.ID) + ' )';
  Result := Result + ' GROUP BY ' + TFacturaItemImpuestoDM.TableName + '.' + TFacturaItemImpuestoDM._ImpuestoConceptoID + ', ' + TImpuestoConceptoDM.TableName + '.' +  TImpuestoConceptoDM._CodigoAfip;
end;

procedure TFacturaDM.PopulateFields(PDObject: TPDObject);
begin
  with TFactura(PDObject) do
    begin
      IDField[_CentroDeFacturacionID]     := CentroDeFacturacionID;
      IDField[_CondicionDeVentaID]        := CondicionDeVentaID;
      FloatField[_Cotizacion]             := Cotizacion;
      FloatField[_CotizacionDolar]        := CotizacionDolar;
      IDField[_EmpresaID]                 := EmpresaID;
      IDField[_EstadoDeFacturaID]         := EstadoDeFacturaID;
      DateTimeField[_FechaHora]           := FechaHora;
      IDField[_GrupoDeVendedorID]         := GrupoDeVendedorID;
      FloatField[_ImporteNetoGravado]     := ImporteNetoGravado;
      FloatField[_ImporteNetoNoGravado]   := ImporteNetoNoGravado;
      FloatField[_ImporteExcento]         := ImporteExcento;
      FloatField[_ImporteTotal]           := TotalFacturado;
      IDField[_MonedaID]                  := MonedaID;
      IntegerField[_Numero]               := Numero;
      IntegerField[_NumeroSugerido]       := NumeroSugerido;
      IDField[_TipoDeFormularioID]        := TipoDeFormularioID;
      FloatField[_TotalImpuestoItems]     := TotalImpuestoItems;
      FloatField[_TotalImpuestos]         := TotalImpuestos;
      FloatField[_TotalImpuestosCabecera] := TotalImpuestosCabecera;
      IDField[_UsuarioID]                 := UsuarioID;
      DateTimeField[_FechaDeImpresion]    := FechaDeImpresion;
      DateField[_FechaContabilizacion]    := FechaContabilizacion;
      StringField[_CAI]                   := FCAI;
      DateField[_FechaVtoCAI]             := FechaDeVtoCAI;
      IntegerField[_IDSolicitudCAI]       := IDSolicitudCAI;
      StringField[_ArchivoPdf]            := FArchivoPdf;
      IDField[_FacturaAsociadaID]         := FacturaAsociadaID;
      StringField[_Observaciones]         := FObservaciones;
      BooleanField[_esTesting]            := EsTesting;
    end;
end;


procedure TFacturaDM.PopulateObject(PDObject: TPDObject);
begin
  with TFactura(PDObject) do
    begin
      FCentroDeFacturacionID  := IDField[_CentroDeFacturacionID];
      FCondicionDeVentaID     := IDField[_CondicionDeVentaID];
      FCotizacion             := FloatField[_Cotizacion];
      FCotizacionDolar        := FloatField[_CotizacionDolar];
      FEmpresaID              := IDField[_EmpresaID];
      FEstadoDeFacturaID      := IDField[_EstadoDeFacturaID];
      FFechaHora              := DateTimeField[_FechaHora];
      FGrupoDeVendedorID      := IDField[_GrupoDeVendedorID];
      FImporteNetoGravado     := FloatField[_ImporteNetoGravado];
      FImporteNetoNoGravado   := FloatField[_ImporteNetoNoGravado];
      FImporteExcento         := FloatField[_ImporteExcento];
      FTotalFacturado         := FloatField[_ImporteTotal];
      FMonedaID               := IDField[_MonedaID];
      FNumero                 := IntegerField[_Numero];
      FNumeroSugerido         := IntegerField[_Numero];
      FTipoDeFormularioID     := IDField[_TipoDeFormularioID];
      FTotalImpuestoItems     := FloatField[_TotalImpuestoItems];
      FTotalImpuestos         := FloatField[_TotalImpuestos];
      FTotalImpuestosCabecera := FloatField[_TotalImpuestosCabecera];
      FUsuarioID              := IDField[_UsuarioID];
      FFechaDeImpresion       := DateTimeField[_FechaDeImpresion];
      FFechaContabilizacion    := DateField[_FechaContabilizacion];
      FFechaDeVtoCAI          := DateField[_FechaVtoCAI];
      FCAI                    := StringField[_CAI];
      FIDSolicitudCAI         := IntegerField[_IDSolicitudCAI];
      FArchivoPdf             := StringField[_ArchivoPdf];
      FFacturaAsociadaID      := IDField[_FacturaAsociadaID];
      FObservaciones          := StringField[_Observaciones];
      FEsTesting              := BooleanField[_esTesting];
    end;
end;

 { TFacturaList }
function TFacturaList.GetActual : TFactura;
begin
  result := TFactura(CurrentObject);
end;

constructor TFacturaList.CreateByEstados(_Est: TOrganizacionDeMonitorEstadoPermitidoList);
  Function IDsEstadosDeFactura: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeFacturaID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function WhereString : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in(' + IDsEstadosDeFactura + ')';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString ));
end;

constructor TFacturaList.CreateByClienteAndFechaDesdeFechaHasta(_Empresa : TEmpresa ;_FechaDesde, _FechaHasta: String; _Descendente: Boolean);
  Function Condicion1: String;
  begin
    begin
      Result := ' (' + TFacturaDM.TableName + '.' + TFacturaDM._EmpresaID + ' = ' + IntToStr(_Empresa.ID) + ' ) and ';
    end;
  end;
  Function Condicion2: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;
  Function OrderBy : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TFacturaList.CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeFactura(_Empresa: TEmpresa; _FechaDesde, _FechaHasta: String;
  _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._EmpresaID + ' = ' + IntToStr(_Empresa.ID) + ' ) and ';
    Result := Result + '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if Assigned( _EstadosID ) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (' + _EstadosID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
    else
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ',' + TFacturaDM.TableName + '.' + TFacturaDM._Numero;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByClienteAndFechaDesdeFechaHastaAndEstadosDeFacturaAndTiposDeFormulario(_Empresa: TEmpresa; _FechaDesde, _FechaHasta: String;
  _EstadosID, _TiposDeFormularioID: TStringlist; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result :=          '(' + TFacturaDM.TableName + '.' + TFacturaDM._EmpresaID + ' = ' + IntToStr(_Empresa.ID) + ' ) and ';
    Result := Result + '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';

    if Assigned( _EstadosID ) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (' + _EstadosID.CommaText + '))';
    if Assigned( _TiposDeFormularioID ) and (_TiposDeFormularioID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._TipoDeFormularioID + ' in (' + _TiposDeFormularioID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
    else
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ',' + TFacturaDM.TableName + '.' + TFacturaDM._Numero;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByEstados(_Est: String);
  Function WhereString : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in(' + _Est + ')';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString ));
end;

constructor TFacturaList.CreateByEstadosAndTipoDeCliente(_Est: TOrganizacionDeMonitorEstadoPermitidoList; _EsExportacion: Boolean);
  Function IDsEstadosDeFactura: String;
  begin
    _Est.First;
    Result := '';
    Repeat
      if (Result >'') then
        Result := Result +', ';
      Result := Result + IntToStr(_Est.Actual.EstadoDeFacturaID);
      _Est.Next;
    until _Est.IsLast;
  end;
  Function CondicionExpoLocal : String;
  begin
    Result := '( ' + TFacturaDM.TableName + '.' + TFacturaDM._EmpresaID;
    Result := Result + ' in( Select ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName;
    Result := Result + ' where ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._localidadID + ' in( Select ' + TLocalidadDM.TableName + '.' + TLocalidadDM.ID_FieldName + ' from ';
    Result := Result + TLocalidadDM.TableName + ' where ' + TLocalidadDM.TableName + '.' + TLocalidadDM._ProvinciaID + ' in( Select ' + TProvinciaDM.TableName + '.' + TProvinciaDM.ID_FieldName + ' from ';
    if _EsExportacion then
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' <> ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )'
    else
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' = ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )';
  end;
  Function WhereString : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in(' + IDsEstadosDeFactura + ')';
    Result := Result + ' and ' + CondicionExpoLocal;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString ));
end;

constructor TFacturaList.CreateByEstadosAndTipoDeCliente(_Est: String; _EsExportacion: Boolean);
  Function CondicionExpoLocal : String;
  begin
    Result := '( ' + TFacturaDM.TableName + '.' + TFacturaDM._EmpresaID;
    Result := Result + ' in( Select ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName;
    Result := Result + ' where ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._localidadID + ' in( Select ' + TLocalidadDM.TableName + '.' + TLocalidadDM.ID_FieldName + ' from ';
    Result := Result + TLocalidadDM.TableName + ' where ' + TLocalidadDM.TableName + '.' + TLocalidadDM._ProvinciaID + ' in( Select ' + TProvinciaDM.TableName + '.' + TProvinciaDM.ID_FieldName + ' from ';
    if _EsExportacion then
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' <> ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )'
    else
      Result := Result + TProvinciaDM.TableName + ' where ' + TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + ' = ' + IntToStr( Aplicacion.Empresa.Localidad.paisID) + ') ) ) )';
  end;
  Function WhereString : String;
  begin
    Result := '( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in(' + _Est + ') )' ;
    Result := Result + ' and ' + CondicionExpoLocal;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString ));
end;

constructor TFacturaList.CreateByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: String; _EstadoID: TObjectID; _Descendente: Boolean);
  Function Condicion1: String;
  begin
    Result := '';
    if (_EstadoID <> NullID) then
    begin
      Result := ' (' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' = ' + IntToStr(_EstadoID) + ' ) and ';
    end;
  end;
  Function Condicion2: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
  end;
  Function OrderBy : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, Condicion1 + Condicion2, False, OrderBy));
end;

constructor TFacturaList.CreateByFechaDesdeFechaHastaAndEstadosDeFactura(_FechaDesde, _FechaHasta: String; _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if Assigned( _EstadosID ) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (' + _EstadosID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
    else
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ',' + TFacturaDM.TableName + '.' + TFacturaDM._Numero;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByFechaDesdeFechaHastaAndEstadosDeFacturaAndTiposDeFormulario(_FechaDesde, _FechaHasta: String; _EstadosID,
  _TiposDeFormularioID: TStringlist; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion + ' Between ' + QuotedStr(_FechaDesde + _PrimerHora) + ' And ' + QuotedStr(_FechaHasta + _UltimaHora) + ' )';
    if Assigned( _EstadosID ) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (' + _EstadosID.CommaText + '))';
    if Assigned( _TiposDeFormularioID ) and (_TiposDeFormularioID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._TipoDeFormularioID + ' in (' + _TiposDeFormularioID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
    else
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ',' + TFacturaDM.TableName + '.' + TFacturaDM._Numero;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByNumero(_Numero: Integer);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' = ' + IntToStr(_Numero)+ ' )';
  end;
begin
  inherited Create(TFactura,TFacturaDM.CreateAll(False, WhereString, false ));
end;

constructor TFacturaList.CreateByNumeroDesdeNumeroHasta(_NumeroDesde, _NumeroHasta: Integer; _Descendente, _FitrarPorVendedor: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';
  end;

  Function OrderByString: String;
  begin
    Result := TFacturaDM.TableName+'.'+ TFacturaDM._FechaDeImpresion;
    if _Descendente then
      Result := Result + ' Desc';
  end;
begin
  inherited Create(TFactura,TFacturaDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TFacturaList.CreateByNumeroDesdeNumeroHastaAndEstadosDeFactura(_NumeroDesde, _NumeroHasta: Integer; _EstadosID: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Between ' + IntToStr(_NumeroDesde) + ' And ' + IntToStr(_NumeroHasta) + ' )';
    Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (';
    for I := 0 to _EstadosID.count - 1 do
      Result := Result + _EstadosID[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy : String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByNumeroDesdeNumeroHastaAndEstadosDeFacturaAndTiposDeFormulario(_NumeroDesde, _NumeroHasta: Integer; _EstadosID,
  _TiposDeFormularioID: TStringlist; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result :=          '(' + TFacturaDM.TableName + '.' + TFacturaDM._Numero    + ' Between ' + IntToStr(_NumeroDesde) + ' and ' + IntToStr(_NumeroHasta) + ' )';

    if Assigned( _EstadosID ) and (_EstadosID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID + ' in (' + _EstadosID.CommaText + '))';
    if Assigned( _TiposDeFormularioID ) and (_TiposDeFormularioID.Count > 0) then
      Result := Result + ' and ( ' + TFacturaDM.TableName + '.' + TFacturaDM._TipoDeFormularioID + ' in (' + _TiposDeFormularioID.CommaText + '))';
  end;
  Function OrderBy: String;
  begin
    if _Descendente then
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
    else
      Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ',' + TFacturaDM.TableName + '.' + TFacturaDM._Numero;
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll( False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByPedidoDeVenta(_PV: TPedidoDeVenta);
  Function WhereString: String;
  begin
    Result := TFacturaDM.ID_FieldName + ' in ( select ' + TFacturaItemDM._FacturaID + ' From ' +TFacturaItemDM.TableName+ ' where ' ;
    Result := Result + TFacturaItemDM.TableName + '.' + TFacturaItemDM._PedidoDeVentaItemID + ' in (select ' + TPedidoDeVentaItemDM.TableName + '.' +  TPedidoDeVentaItemDM.ID_FieldName  + ' from ' + TPedidoDeVentaItemDM.TableName;
    Result := Result + ' where ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID  + ' = ' +  IntToStr(_PV.ID) + ' ))';
  end;
  Function OrderBy: String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion  + ' Desc,' + TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' Desc'
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TFacturaList.CreateByPedidoDeVentaItem(_PVI: TPedidoDeVentaItem);
  Function WhereString: String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM.ID_FieldName + ' in (select ' + TFacturaItemDM.TableName + '.' +  TFacturaItemDM._FacturaID  + ' from ';
    Result := Result + TFacturaItemDM.TableName + ' where ' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._PedidoDeVentaItemID  + ' = ' +  IntToStr(_PVI.ID) + ' )';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll(False, WhereString));
end;

constructor TFacturaList.CreateByRemito(_R: TRemito);
  Function WhereString: String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM.ID_FieldName + ' in (select ' + TFacturaItemDM.TableName + '.' +  TFacturaItemDM._FacturaID  + ' from ';
    Result := Result + TFacturaItemDM.TableName + ' where ' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._RemitoItemID  + ' in (select ';
    Result := Result + TRemitoItemDM.TableName + '.' + TRemitoItemDM.ID_FieldName  + ' from ' + TRemitoItemDM.TableName + ' where ' + TRemitoItemDM._RemitoID + '=' + IntToStr(_R.ID) + '))';
//    Result := Result + ' and ' +  TFacturaDM.TableName + '.' + TFacturaDM._EstadoDeFacturaID +  ' in (Select ' + TEstadoDeFacturaDM.TableName + '.' + TEstadoDeFacturaDM.ID_FieldName + ' from ' + TEstadoDeFacturaDM.TableName + ' where ' + TEstadoDeFacturaDM._EsEstadoCancelado + ' =0)'
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateAll(False, WhereString));
end;

constructor TFacturaList.CreateByUltimoNumero(_TF : TTipoDeFormulario);
  Function WhereString : String;
  begin
    Result := '(' + TFacturaDM._TipoDeFormularioID + '=' + IntToStr( _TF.ID ) + ')';
  end;
begin
  inherited Create(TFactura, TFacturaDM.CreateTop(1, WhereString, TFacturaDM._Numero + ' Desc '));
end;

function TFacturaList.CreateNewObject: TPDObject;
begin
  result := TFactura.Create;
end;

constructor TFacturaList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFactura,TFacturaDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TFacturaItem }
constructor TFacturaItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TFacturaItemDM);
  FCantidad := null;
  FImporteItem := null;
  FItemNro := null;
  FPorcentajeDescuento := null;
  FPrecioUnitario := null;

  fCCFBDescripcion        := Null;
  fCCFBcunioID            := NullID;
  fCCFBarticuloID         := NullID;
  fCCServicioCodigo       := Null;
  fCCFBCrc                := -99;
  fCCFBFabricadoID        := NullID;
  fCCFBCodigo             := Null;
//  fCCServicioCodigoSifab  := Null;
  fCCFBDesarrolloID       := NullID;
  fCCServicioDescripcion  := Null;
  fCCPCodigoDeProducto    := Null;
  fCCFBterminacionID      := NullID;
  FCCFGrupoDeVendedorDescripcion     := Null;
  FCCFEstadoCodigo                   := Null;
  FCCFTipoDeFormularioDescripcion    := Null;
  FCCFFechaDeImpresion               := Null;
  FCCFMonedaDescripcion              := Null;
  FCCFNumero                         := Null;
  FCCFEmpresaDescripcion             := Null;
  FCCFFechaHora                      := Null;
  FCCFCentroDeFacturacionDescripcion := Null;
  FCCFCotizacion                     := Null;
  FCCFTipoDeFormularioCodigo         := Null;
  FCCFEstadoDescripcion              := Null;
  FCCFFechaContabilizacion           := Null;
  FCCFMonedaCodigo                   := Null;
  FCCFEmpresaCodigo                  := Null;
  FCCFCentroDeFacturacionCodigo      := Null;
end;

function TFacturaItem.GetCCFBarticuloID: TObjectID;
begin
  if ( fCCFBarticuloID= NullId ) and producto.esFabricado then
    fCCFBarticuloID := producto.fabricado.articuloid;
  Result := fCCFBarticuloID;
end;

function TFacturaItem.GetCCFBCodigo: TString;
begin
  if ( fCCFBCodigo= Null ) then
    fCCFBCodigo := producto.Fabricado.Codigo;
  Result := fCCFBCodigo;
end;

function TFacturaItem.GetCCFBCrc: TEntero;
begin
  if ( fCCFBCrc = -99 ) and producto.esFabricado then
    fCCFBCrc := producto.fabricado.crc;
  Result := fCCFBCrc;
end;

function TFacturaItem.GetCCFBcunioID: TObjectID;
begin
  if ( fCCFBcunioID = NullID ) and producto.esFabricado then
    fCCFBcunioID := producto.fabricado.cunioID;
  Result := fCCFBcunioID;
end;

function TFacturaItem.GetCCFBDesarrolloID: TObjectID;
begin
  if ( fCCFBDesarrolloID = NullID ) and producto.esFabricado then
    fCCFBDesarrolloID := producto.fabricado.DesarrolloID;
  Result := fCCFBDesarrolloID;
end;

function TFacturaItem.GetCCFBDescripcion: TString;
begin
  if ( fCCFBDescripcion = Null ) and producto.esFabricado then
    fCCFBDescripcion := producto.fabricado.Descripcion;
  Result := fCCFBDescripcion;
end;

function TFacturaItem.GetCCFBFabricadoID: TObjectID;
begin
  if ( fCCFBFabricadoID = NullID ) and producto.esFabricado then
    fCCFBFabricadoID := producto.fabricadoID;
  Result := fCCFBFabricadoID;
end;

function TFacturaItem.GetCCFBterminacionID: TObjectID;
begin
  if ( fCCFBTerminacionID = NullID ) and producto.esFabricado then
    fCCFBTerminacionID := producto.fabricado.TerminacionID;
  Result := fCCFBTerminacionID;
end;

function TFacturaItem.GetCCFCentroDeFacturacionCodigo: TString;
begin
  if ( FCCFCentroDeFacturacionCodigo = Null ) then
    FCCFCentroDeFacturacionCodigo := Factura.CentroDeFacturacion.Codigo;
  Result := FCCFCentroDeFacturacionCodigo;
end;

function TFacturaItem.GetCCFCentroDeFacturacionDescripcion: TString;
begin
  if ( FCCFCentroDeFacturacionDescripcion = Null ) then
    FCCFCentroDeFacturacionDescripcion := Factura.CentroDeFacturacion.Descripcion;
  Result := FCCFCentroDeFacturacionDescripcion;
end;

function TFacturaItem.GetCCFCotizacion: TReal;
begin
  if ( FCCFCotizacion = Null ) then
    FCCFCotizacion := Factura.Cotizacion;
  Result := FCCFCotizacion;
end;

function TFacturaItem.GetCCFEmpresaCodigo: TString;
begin
  if ( FCCFEmpresaCodigo = Null ) then
    FCCFEmpresaCodigo := Factura.Empresa.Codigo;
  Result := FCCFEmpresaCodigo;
end;

function TFacturaItem.GetCCFEmpresaDescripcion: TString;
begin
  if ( FCCFEmpresaDescripcion = Null ) then
    FCCFEmpresaDescripcion := Factura.Empresa.Descripcion;
  Result := FCCFEmpresaDescripcion;
end;

function TFacturaItem.GetCCFEstadoCodigo: TString;
begin
  if ( FCCFEstadoCodigo = Null ) then
    FCCFEstadoCodigo := Factura.EstadoDeFactura.Codigo;
  Result := FCCFEstadoCodigo;
end;

function TFacturaItem.GetCCFEstadoDescripcion: TString;
begin
  if ( FCCFEstadoDescripcion = Null ) then
    FCCFEstadoDescripcion := Factura.EstadoDeFactura.Descripcion;
  Result := FCCFEstadoDescripcion;
end;

function TFacturaItem.GetCCFFechaContabilizacion: TFechaHora;
begin
  if ( FCCFFechaContabilizacion = Null ) then
    FCCFFechaContabilizacion := Factura.FechaContabilizacion;
  Result := FCCFFechaContabilizacion;
end;

function TFacturaItem.GetCCFFechaDeImpresion: TFechaHora;
begin
  if ( FCCFFechaDeImpresion = Null ) then
    FCCFFechaDeImpresion := Factura.FechaDeImpresion;
  Result := FCCFFechaDeImpresion;
end;

function TFacturaItem.GetCCFFechaHora: TFechaHora;
begin
  if ( FCCFFechaHora = Null ) then
    FCCFFechaHora := Factura.FechaHora;
  Result := FCCFFechaHora;
end;

function TFacturaItem.GetCCFGrupoDeVendedorDescripcion: TString;
begin
  if ( FCCFGrupoDeVendedorDescripcion = Null ) then
    FCCFGrupoDeVendedorDescripcion := Factura.GrupoDeVendedor.Descripcion;
  Result := FCCFGrupoDeVendedorDescripcion;
end;

function TFacturaItem.GetCCFMonedaCodigo: TString;
begin
  if ( FCCFMonedaCodigo = Null ) then
    FCCFMonedaCodigo := Factura.Moneda.Codigo;
  Result := FCCFMonedaCodigo;
end;

function TFacturaItem.GetCCFMonedaDescripcion: TString;
begin
  if ( FCCFMonedaDescripcion = Null ) then
    FCCFMonedaDescripcion := Factura.Moneda.Descripcion;
  Result := FCCFMonedaDescripcion;
end;

function TFacturaItem.GetCCFTipoDeFormularioCodigo: TString;
begin
  if ( FCCFTipoDeFormularioCodigo = Null ) then
    FCCFTipoDeFormularioCodigo := Factura.TipoDeFormulario.Codigo;
  Result := FCCFTipoDeFormularioCodigo;
end;

function TFacturaItem.GetCCFTipoDeFormularioDescripcion: TString;
begin
  if ( FCCFTipoDeFormularioDescripcion = Null ) then
    FCCFTipoDeFormularioDescripcion := Factura.TipoDeFormulario.Descripcion;
  Result := FCCFTipoDeFormularioDescripcion;
end;

function TFacturaItem.GetCCPCodigoDeProducto: TString;
begin
  if ( fCCPCodigoDeProducto= Null ) then
    fCCPCodigoDeProducto := producto.codigo;
  Result := fCCPCodigoDeProducto;
end;

function TFacturaItem.GetCCServicioCodigo: TString;
begin
  if ( fCCServicioCodigo= Null ) then
    fCCServicioCodigo := producto.Servicio.Codigo;
  Result := fCCServicioCodigo;
end;

//function TFacturaItem.GetCCServicioCodigoSifab: TString;
//begin
//  if ( fCCServicioCodigoSifab= Null ) then
//    fCCServicioCodigoSifab := producto.Servicio.CodigoSifab;
//  Result := fCCServicioCodigoSifab;
//end;

function TFacturaItem.GetCCServicioDescripcion: TString;
begin
  if ( fCCServicioDescripcion= Null ) then
    fCCServicioDescripcion := producto.Servicio.Descripcion;
  Result := fCCServicioDescripcion;
end;

function TFacturaItem.GetCCServicioID: TObjectID;
begin
  if ( fCCServicioID = NullID ) and producto.esServicio then
    fCCServicioID := producto.ServicioID;
  Result := fCCServicioID;
end;

function TFacturaItem.GetCFNumero: TEntero;
begin

end;

function TFacturaItem.GetFactura : TFactura;
begin
  if not Assigned(FFactura) then
    GetObject(TFactura,FFactura,FacturaID);
  result := TFactura(FFactura);
end;

function TFacturaItem.GetImporteItem: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImporteItem , 2 );
end;

function TFacturaItem.GetImpuestos: TFacturaItemImpuestoList;
begin
  if not Assigned(FImpuestos) then
    GetList(TPDList(FImpuestos),TPDList(TFacturaItemImpuestoList.CreateByFacturaItem(Self)));
  result := TFacturaItemImpuestoList(FImpuestos);
end;

procedure TFacturaItem.SetFacturaID(Value : TObjectID);
begin
  if (Value<>FFacturaID) and Assigned(FFactura) then
    FreeAndNil(FFactura);
  FFacturaID := Value;
end;

procedure TFacturaItem.SetImporteItem(const Value: TReal);
begin
  FImporteItem := Aplicacion.MathService.Redondear( Value , 2 );
end;

function TFacturaItem.GetPedidoDeVentaItem : TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) then
    GetObject(TPedidoDeVentaItem,FPedidoDeVentaItem,PedidoDeVentaItemID);
  result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

function TFacturaItem.GetPorcentajeDescuento: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPorcentajeDescuento , 2 );
end;

procedure TFacturaItem.SetPedidoDeVentaItemID(Value : TObjectID);
begin
  if (Value<>FPedidoDeVentaItemID) and Assigned(FPedidoDeVentaItem) then
    FreeAndNil(FPedidoDeVentaItem);
  FPedidoDeVentaItemID := Value;
end;

procedure TFacturaItem.SetPorcentajeDescuento(const Value: TReal);
begin
  FPorcentajeDescuento := Aplicacion.MathService.Redondear( Value , 2 );
end;

function TFacturaItem.GetPrecioUnitario: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecioUnitario , 5 );
end;

function TFacturaItem.GetProducto : TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto,FProducto,ProductoID);
  result := TProducto(FProducto);
end;

procedure TFacturaItem.SetPrecioUnitario(const Value: TReal);
begin
  FPrecioUnitario := Aplicacion.MathService.Redondear( Value , 5 );
end;

procedure TFacturaItem.SetProductoID(Value : TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

function TFacturaItem.GetRemitoItem : TRemitoItem;
begin
  if not assigned(FRemitoItem) then
    GetObject(TRemitoItem,FRemitoItem,RemitoItemID);
  result := TRemitoItem(FRemitoItem);
end;

procedure TFacturaItem.SetRemitoItemID(Value : TObjectID);
begin
  if (Value<>FRemitoItemID) and Assigned(FRemitoItem) then
    FreeAndNil(FRemitoItem);
  FRemitoItemID := Value;
end;
 { TFacturaItemDM }
class function TFacturaItemDM.TableName : string;
begin
  result := 'FacturaItems';
end;


class function TFacturaItemDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CamposTablaItems, CamposTablaFacturas, CamposProductos, CamposTablaFabricados, CamposTablaServicios : string;
    CamposTablaEmpresas, CamposTablaCentros, CamposTablaEstados, CamposTablaGruposDeVendedor, CamposTablaTipoDeFormularios, CamposTablaMonedas : STring;
  begin
    CamposTablaItems      := TFacturaItemDM.TableName + '.*';
    CamposTablaFacturas   := TFacturaDM.TableName + '.' + TFacturaDM._Numero + ' as ' + _CCFNumero + ', ';
    CamposTablaFacturas   := CamposTablaFacturas + TFacturaDM.TableName + '.' + TFacturaDM._Cotizacion           + ' as ' + _CCFCotizacion + ', ';
    CamposTablaFacturas   := CamposTablaFacturas + TFacturaDM.TableName + '.' + TFacturaDM._FechaHora            + ' as ' + _CCFFechaHora + ', ';
    CamposTablaFacturas   := CamposTablaFacturas + TFacturaDM.TableName + '.' + TFacturaDM._FechaDeImpresion     + ' as ' + _CCFFechaDeImpresion + ', ';
    CamposTablaFacturas   := CamposTablaFacturas + TFacturaDM.TableName + '.' + TFacturaDM._FechaContabilizacion + ' as ' + _CCFFechaContabilizacion;

    CamposTablaEmpresas          := TAbstractEmpresaDM.TableName     + '.' + TAbstractEmpresaDM._Codigo     + ' as ' + _CCFEmpresaCodigo + ', ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCFEmpresaDescripcion;
    CamposTablaCentros           := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM._Codigo + ' as ' + _CCFCentroDeFacturacionCodigo + ', ' + TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM._Descripcion + ' as ' + _CCFCentroDeFacturacionDescripcion;
    CamposTablaEstados           := TEstadoDeFacturaDM.TableName     + '.' + TEstadoDEFacturaDM._Codigo     + ' as ' + _CCFEstadoCodigo + ', ' + TEstadoDeFacturaDM.TableName + '.' + TEstadoDeFacturaDM._Descripcion + ' as ' + _CCFEstadoDescripcion;
    CamposTablaGruposDeVendedor  := TGrupoDeVendedorDM.TableName     + '.' + TGrupoDeVendedorDM._Descripcion+ ' as ' + _CCFGrupoDeVendedorDescripcion;
    CamposTablaTipoDeFormularios := TTipoDeFormularioDM.TableName    + '.' + TTipoDeFormularioDM._Codigo    + ' as ' + _CCFTipoDeFormularioCodigo + ', ' + TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._Descripcion + ' as ' + _CCFTipoDeFormularioDescripcion;
    CamposTablaMonedas           := TMonedaDM.TableName              + '.' + TMonedaDM._Codigo              + ' as ' + _CCFMonedaCodigo + ', ' + TMonedaDM.TableName + '.' + TMonedaDM._Descripcion + ' as ' + _CCFMonedaDescripcion;

    CamposProductos       := ' ISNULL('+ TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo + ',' + TServicioDM.TableName + '.' + TServicioDM._Codigo + ') as '+ _CCPCodigoDeProducto;
    CamposTablaFabricados :=                         TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID    + ' as ' + _CCFBarticuloID        + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID       + ' as ' + _CCFBcunioID           + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' as ' + _CCFBterminacionID     + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM.ID_FieldName   + ' as ' + _CCFBFabricadoID       + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo        + ' as ' + _CCFBCodigo            + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Crc           + ' as ' + _CCFBCrc               + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._desarrolloID  + ' as ' + _CCFBDesarrolloID      + ', ';
    CamposTablaFabricados := CamposTablaFabricados + TFabricadoDM.TableName + '.' + TFabricadoDM._Descripcion   + ' as ' + _CCFBDescripcion       ;
    CamposTablaServicios  :=                         TServicioDM.TableName  + '.' + TServicioDM._Codigo         + ' as ' + _CCServicioCodigo      + ', ';
    CamposTablaServicios  := CamposTablaServicios  + TServicioDM.TableName  + '.' + TServicioDM.ID_FieldName    + ' as ' + _CCServicioID          + ', ';
//    CamposTablaServicios  := CamposTablaServicios  + TServicioDM.TableName  + '.' + TServicioDM._Codigo         + ' as ' + _CCServicioCodigoSifab + ', ';
    CamposTablaServicios  := CamposTablaServicios  + TServicioDM.TableName  + '.' + TServicioDM._Descripcion    + ' as ' + _CCServicioDescripcion ;

    Result :=          CamposTablaItems             + ', ';
    Result := Result + CamposTablaFacturas          + ', ';
    Result := Result + CamposTablaEmpresas          + ', ';
    Result := Result + CamposTablaCentros           + ', ';
    Result := Result + CamposTablaEstados           + ', ';
    Result := Result + CamposTablaGruposDeVendedor  + ', ';
    Result := Result + CamposTablaTipoDeFormularios + ', ';
    Result := Result + CamposTablaMonedas           + ', ';
    Result := Result + CamposProductos              + ', ';
    Result := Result + CamposTablaFabricados        + ', ';
    Result := Result + CamposTablaServicios ;

  end;

  Function LeftJoinString : String;
  var
    IDTablaItemFactura, IDTablaItemProducto, IDTablaProductoFabricado, IDTablaProductoServicio :String;
    IDTablaProducto, IDTablaFabricado, IDTablaServicio :String;
    IDTablaFactura, ID1TablaFactura, ID2TablaFactura, ID3TablaFactura, ID4TablaFactura, ID5TablaFactura, ID6TablaFactura : String;
    IDTablaEmpresas, IDTablaCentros, IDTablaEstados, IDTablaGruposDeVendedor, IDTablaTipoDeFormularios, IDTablaMonedas : STring;
  begin
    IDTablaItemFactura       := TableName                        + '.' + TFacturaItemDM._FacturaID;
    IDTablaItemProducto      := TableName                        + '.' + TFacturaItemDM._ProductoID;
    IDTablaFactura           := TFacturaDM.TableName             + '.' + TFacturaDM.ID_FieldName;
    ID1TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._CentroDeFacturacionID;
    ID2TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._EmpresaID;
    ID3TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._EstadoDeFacturaID;
    ID4TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._GrupoDeVendedorID;
    ID5TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._TipoDeFormularioID;
    ID6TablaFactura          := TFacturaDM.TableName             + '.' + TFacturaDM._MonedaID;
    IDTablaProductoFabricado := TProductoDM.TableName            + '.' + TProductoDM._FabricadoID;
    IDTablaProductoServicio  := TProductoDM.TableName            + '.' + TProductoDM._ServicioID;
    IDTablaProducto          := TProductoDM.TableName            + '.' + TProductoDM.ID_FieldName;
    IDTablaFabricado         := TFabricadoDM.TableName           + '.' + TFabricadoDM.ID_FieldName;
    IDTablaServicio          := TServicioDM.TableName            + '.' + TServicioDM.ID_FieldName;
    IDTablaEmpresas          := TAbstractEmpresaDM.TableName     + '.' + TAbstractEmpresaDM.ID_FieldName;
    IDTablaCentros           := TCentroDeFacturacionDM.TableName + '.' + TCentroDeFacturacionDM.ID_FieldName;
    IDTablaEstados           := TEstadoDeFacturaDM.TableName     + '.' + TEstadoDeFacturaDM.ID_FieldName;
    IDTablaGruposDeVendedor  := TGrupoDeVendedorDM.TableName     + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDTablaTipoDeFormularios := TTipoDeFormularioDM.TableName    + '.' + TTipoDeFormularioDM.ID_FieldName;
    IDTablaMonedas           := TMonedaDM.TableName              + '.' + TMonedaDM.ID_FieldName;

    Result := Result + ' Left Join ' + TProductoDM.TableName    + ' on     (' + IDTablaItemProducto      + '=' + IDTablaProducto      + ') ';
    Result := Result + ' Left Join ' + TFabricadoDM.TableName   + ' on     (' + IDTablaProductoFabricado + '=' + IDTablaFabricado     + ') ';
    Result := Result + ' Left Join ' + TServicioDM.TableName    + ' on     (' + IDTablaProductoServicio  + '=' + IDTablaServicio      + ') ';
    Result := Result + ' Left Join ' + TFacturaDM.TableName     + ' on     (' + IDTablaItemFactura       + '=' + IDTablaFactura       + ') ';

    Result := Result + ' Left Join ' + TCentroDeFacturacionDM.TableName + ' on     (' + ID1TablaFactura          + '=' + IDTablaCentros      + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName     + ' on     (' + ID2TablaFactura          + '=' + IDTablaEmpresas     + ') ';
    Result := Result + ' Left Join ' + TEstadoDeFacturaDM.TableName     + ' on     (' + ID3TablaFactura          + '=' + IDTablaEstados      + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName     + ' on     (' + ID4TablaFactura          + '=' + IDTablaGruposDeVendedor  + ') ';
    Result := Result + ' Left Join ' + TTipoDeFormularioDM.TableName    + ' on     (' + ID5TablaFactura          + '=' + IDTablaTipoDeFormularios + ') ';
    Result := Result + ' Left Join ' + TMonedaDM.TableName              + ' on     (' + ID5TablaFactura          + '=' + IDTablaMonedas           + ') ';

  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TFacturaItemDM.ID_FieldName : string;
begin
  result := 'FacturaItemID';
end;


procedure TFacturaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TFacturaItem(PDObject) do
    begin
      IntegerField[_Cantidad]          := Cantidad;
      IDField[_FacturaID]              := FacturaID;
      FloatField[_ImporteItem]         := ImporteItem;
      IntegerField[_ItemNro]           := ItemNro;
      IDField[_PedidoDeVentaItemID]    := PedidoDeVentaItemID;
      FloatField[_PorcentajeDescuento] := PorcentajeDescuento;
      FloatField[_PrecioUnitario]      := PrecioUnitario;
      IDField[_ProductoID]             := ProductoID;
      IDField[_RemitoItemID]           := RemitoItemID;
    end;
end;


procedure TFacturaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TFacturaItem(PDObject) do
    begin
      FCantidad            := IntegerField[_Cantidad];
      FFacturaID           := IDField[_FacturaID];
      FImporteItem         := FloatField[_ImporteItem];
      FItemNro             := IntegerField[_ItemNro];
      FPedidoDeVentaItemID := IDField[_PedidoDeVentaItemID];
      FPorcentajeDescuento := FloatField[_PorcentajeDescuento];
      FPrecioUnitario      := FloatField[_PrecioUnitario];
      FProductoID          := IDField[_ProductoID];
      FRemitoItemID        := IDField[_RemitoItemID];

      // del createcompuesto
      fCCPCodigoDeProducto    := StringField[_CCPCodigoDeProducto];
      fCCFBFabricadoID        := IDField[_CCFBFabricadoID];
      fCCFBCodigo             := StringField[_CCFBCodigo];
      fCCFBDescripcion        := StringField[_CCFBDescripcion];
      fCCFBarticuloID         := IDField[_CCFBarticuloID];
      fCCFBterminacionID      := IDField[_CCFBterminacionID];
      fCCFBcunioID            := IDField[_CCFBcunioID];
      fCCFBCrc                := IntegerField[_CCFBCrc];
      fCCFBDesarrolloID       := IDField[_CCFBDesarrolloID];
      fCCServicioID           := IDField[_CCServicioID];
      fCCServicioCodigo       := StringField[_CCServicioCodigo];
//      fCCServicioCodigoSifab  := StringField[_CCServicioCodigoSifab];
      fCCServicioDescripcion  := StringField[_CCServicioDescripcion];
      FCCFNumero                         := IntegerField[_CCFNumero];
      FCCFCotizacion                     := FloatField[_CCFCotizacion];
      FCCFFechaHora                      := DateField[_CCFFechaHora];
      FCCFFechaDeImpresion               := DateField[_CCFFechaDeImpresion];
      FCCFFechaContabilizacion           := DateField[_CCFFechaContabilizacion];
      FCCFEmpresaCodigo                  := StringField[_CCFEmpresaCodigo];
      FCCFEmpresaDescripcion             := StringField[_CCFEmpresaDescripcion];
      FCCFCentroDeFacturacionCodigo      := StringField[_CCFCentroDeFacturacionCodigo];
      FCCFCentroDeFacturacionDescripcion := StringField[_CCFCentroDeFacturacionDescripcion];
      FCCFEstadoCodigo                   := StringField[_CCFEstadoCodigo];
      FCCFEstadoDescripcion              := StringField[_CCFEstadoDescripcion];
      FCCFGrupoDeVendedorDescripcion     := StringField[_CCFGrupoDeVendedorDescripcion];
      FCCFTipoDeFormularioCodigo         := StringField[_CCFTipoDeFormularioCodigo];
      FCCFTipoDeFormularioDescripcion    := StringField[_CCFTipoDeFormularioDescripcion];
      FCCFMonedaCodigo                   := StringField[_CCFMonedaCodigo];
      FCCFMonedaDescripcion              := StringField[_CCFMonedaDescripcion];
    end;
end;

 { TFacturaItemList }
function TFacturaItemList.GetActual : TFacturaItem;
begin
  Result := TFacturaItem(CurrentObject);
end;

constructor TFacturaItemList.CreateByFactura( _F : TFactura; _SoloFabricados: TBoolean; _SoloServicios: TBoolean );
  Function WhereString: String;
  begin
    Result := '(' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._FacturaID + '=' + IntToStr( _F.ID ) + ')';
    if (not _SoloFabricados) and (not _SoloServicios) or ( _SoloFabricados and _SoloServicios) then
      Exit;

    if _SoloFabricados then
      Result := Result + ' and ( ' + TFabricadoDM.TableName + '.'+TFabricadoDM.ID_FieldName + ' <> ' + IntToStr( NullID ) + ')';
    if _SoloServicios then
      Result := Result + ' and ( ' + TServicioDM.TableName + '.'+TServicioDM.ID_FieldName + ' <> ' + IntToStr( NullID ) + ')';
  end;

  Function OrderByString: String;
  begin
    Result := TFacturaItemDM.TableName + '.' + TFacturaItemDM._ItemNro ;           // campos separados por coma
  end;
begin
  inherited Create(TFacturaItem,TFacturaItemDM.CreateAll(False, WhereString, False, OrderByString ));
end;

constructor TFacturaItemList.CreateByPedidodeVentaItem(_PVI: TPedidoDeVentaItem; _PrimerFactura, _UltimaFactura: TBoolean);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._PedidoDeVentaItemID + '=' + IntToStr( _PVI.ID ) + ')';
  end;

  Function OrderByString: String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaHora ;
  end;

  Function OrderByStringBottom: String;
  begin
    Result := TFacturaDM.TableName + '.' + TFacturaDM._FechaHora + ' desc ' ;
  end;

begin
  if (Not _PrimerFactura) and (Not _UltimaFactura) then
    inherited Create(TFacturaItem,TFacturaItemDM.CreateAll(False, WhereString, False, OrderByString )); // devuelve todas
  if _PrimerFactura then
    inherited Create(TFacturaItem,TFacturaItemDM.CreateTop(1, WhereString, OrderByString )); // devuelve la primera
  if _UltimaFactura then
    inherited Create(TFacturaItem,TFacturaItemDM.CreateTop(1, WhereString, OrderByStringBottom )); // devuelve la ultima
end;

constructor TFacturaItemList.CreateByRemitoID(_ID: TObjectID);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaItemDM.TableName + '.' + TFacturaItemDM._RemitoItemID + ' in ( Select ' ;
    Result := Result + TRemitoItemDM.ID_FieldName + ' from ' + TRemitoItemDM.TableName + ' where ';
    Result := Result + TRemitoItemDM.TableName + '.' + TRemitoItemDM._RemitoID + '=' + IntToStr(_ID ) + '))';
  end;

  Function OrderByString: String;
  begin
    Result := '';
  end;
begin
  inherited Create(TFacturaItem,TFacturaItemDM.CreateAll(False, WhereString, False, OrderByString ));
end;

function TFacturaItemList.CreateNewObject: TPDObject;
begin
  result := TFacturaItem.Create;
end;

constructor TFacturaItemList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFacturaItem,TFacturaItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TFacturaStateLog }
constructor TFacturaStateLog.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TFacturaStateLogDM);
  SaveSQLLog := False;
  FFechaHora := null;
  FObservaciones := null;
end;

function TFacturaStateLog.GetEstadoDeFactura : TEstadoDeFactura;
begin
  if not assigned(FEstadoDeFactura) then
    GetObject(TEstadoDeFactura,FEstadoDeFactura,EstadoDeFacturaID);
  result := TEstadoDeFactura(FEstadoDeFactura);
end;

procedure TFacturaStateLog.SetEstadoDeFacturaID(Value : TObjectID);
begin
  if (Value<>FEstadoDeFacturaID) and Assigned(FEstadoDeFactura) then
    FreeAndNil(FEstadoDeFactura);
  FEstadoDeFacturaID := Value;
end;

function TFacturaStateLog.GetFactura : TFactura;
begin
  if not assigned(FFactura) then
    GetObject(TFactura,FFactura,FacturaID);
  result := TFactura(FFactura);
end;

procedure TFacturaStateLog.SetFacturaID(Value : TObjectID);
begin
  if (Value<>FFacturaID) and Assigned(FFactura) then
    FreeAndNil(FFactura);
  FFacturaID := Value;
end;

function TFacturaStateLog.GetUsuario : TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);
  result := TUsuario(FUsuario);
end;

procedure TFacturaStateLog.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;
 { TFacturaStateLogDM }
class function TFacturaStateLogDM.TableName : string;
begin
  result := 'FacturaStateLogs';
end;

class function TFacturaStateLogDM.ID_FieldName : string;
begin
  result := 'FacturaStateLogID';
end;


procedure TFacturaStateLogDM.PopulateFields(PDObject: TPDObject);
begin
  with TFacturaStateLog(PDObject) do
    begin
      IDField[_EstadoDeFacturaID] := EstadoDeFacturaID;
      IDField[_FacturaID] := FacturaID;
      DateTimeField[_FechaHora] := FechaHora;
      StringField[_Observaciones] := Observaciones;
      IDField[_UsuarioID] := UsuarioID;
    end;
end;


procedure TFacturaStateLogDM.PopulateObject(PDObject: TPDObject);
begin
  with TFacturaStateLog(PDObject) do
    begin
      FEstadoDeFacturaID := IDField[_EstadoDeFacturaID];
      FFacturaID := IDField[_FacturaID];
      FFechaHora := DateTimeField[_FechaHora];
      FObservaciones := StringField[_Observaciones];
      FUsuarioID := IDField[_UsuarioID];
    end;
end;

 { TFacturaStateLogList }
function TFacturaStateLogList.GetActual : TFacturaStateLog;
begin
  result := TFacturaStateLog(CurrentObject);
end;

constructor TFacturaStateLogList.CreateByFactura(_F: TFactura);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaStateLogDM.TableName + '.' + TFacturaStateLogDM._FacturaID + '=' + IntToStr( _F.ID ) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := TFacturaStateLogDM.TableName + '.' + TFacturaStateLogDM._FechaHora ;           // campos separados por coma
  end;
begin
  inherited Create(TFacturaStateLog,TFacturaStateLogDM.CreateAll(False, WhereString, False, OrderByString ));
end;

function TFacturaStateLogList.CreateNewObject: TPDObject;
begin
  result := TFacturaStateLog.Create;
end;

constructor TFacturaStateLogList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFacturaStateLog,TFacturaStateLogDM.CreateAll(False, WhereString, false, OrderByString ));
end;
 { TFacturaItemImpuesto }
constructor TFacturaItemImpuesto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TFacturaItemImpuestoDM);
  FBaseImponible := null;
  FImpuesto := null;
  FPorcentajeImpuesto := null;
end;

function TFacturaItemImpuesto.GetBaseImponible: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FBaseImponible , 2 );
end;

function TFacturaItemImpuesto.GetFacturaItem: TFacturaItem;
begin
  if not Assigned(FFacturaItem) then
    GetObject(TFacturaItem,FFacturaItem,FacturaItemID);
  result := TFacturaItem(FFacturaItem);
end;

function TFacturaItemImpuesto.GetImpuesto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImpuesto , 2 );
end;

function TFacturaItemImpuesto.GetImpuestoConcepto : TImpuestoConcepto;
begin
  if not assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto,FImpuestoConcepto,ImpuestoConceptoID);
  result := TImpuestoConcepto(FImpuestoConcepto);
end;

function TFacturaItemImpuesto.GetPorcentajeImpuesto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPorcentajeImpuesto , 2 );
end;

procedure TFacturaItemImpuesto.SetBaseImponible(const Value: TReal);
begin
  FBaseImponible := Aplicacion.MathService.Redondear( Value , 2 );;
end;

procedure TFacturaItemImpuesto.SetFacturaItemID(Value: TObjectID);
begin
  if (Value<>FFacturaItemID) and Assigned(FFacturaItem) then
    FreeAndNil(FFacturaItem);
  FFacturaItemID := Value;
end;

procedure TFacturaItemImpuesto.SetImpuesto(const Value: TReal);
begin
  FImpuesto := Aplicacion.MathService.Redondear( Value , 2 );;
end;

procedure TFacturaItemImpuesto.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value<>FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);
  FImpuestoConceptoID := Value;
end;
 procedure TFacturaItemImpuesto.SetPorcentajeImpuesto(const Value: TReal);
begin
  FPorcentajeImpuesto := Aplicacion.MathService.Redondear( Value , 2 );;
end;

{ TFacturaItemImpuestoDM }
class function TFacturaItemImpuestoDM.TableName : string;
begin
  result := 'FacturaItemImpuestos';
end;

class function TFacturaItemImpuestoDM.ID_FieldName : string;
begin
  result := 'FacturaItemImpuestoID';
end;

procedure TFacturaItemImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFacturaItemImpuesto(PDObject) do
    begin
      FloatField[_BaseImponible] := BaseImponible;
      IDField[_FacturaItemID] := FacturaItemID;
      FloatField[_Impuesto] := Impuesto;
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
      FloatField[_PorcentajeImpuesto] := PorcentajeImpuesto;
    end;
end;

procedure TFacturaItemImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFacturaItemImpuesto(PDObject) do
    begin
      FBaseImponible := FloatField[_BaseImponible];
      FFacturaItemID := IDField[_FacturaItemID];
      FImpuesto := FloatField[_Impuesto];
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
      FPorcentajeImpuesto := FloatField[_PorcentajeImpuesto];
    end;
end;

 { TFacturaItemImpuestoList }
function TFacturaItemImpuestoList.Getactual : TFacturaItemImpuesto;
begin
  result := TFacturaItemImpuesto(CurrentObject);
end;

constructor TFacturaItemImpuestoList.CreateByFactura(_F: TFactura);
  Function WhereString: String;
  begin
    Result :=  '(' + TFacturaItemImpuestoDM._FacturaItemID + ' in (Select ' + TFacturaItemDM.ID_FieldName + ' from ' + TFacturaItemDM.TableName + ' where ' + TFacturaItemDM._FacturaID + '=' + IntToStr( _F.ID ) + ' ))';
  end;
begin
  inherited Create(TFacturaItemImpuesto,TFacturaItemImpuestoDM.CreateAll(False, WhereString, false));
end;

constructor TFacturaItemImpuestoList.CreateByFacturaItem(_FI: TFacturaItem);
  Function WhereString: String;
  begin
    Result :=  '(' + TFacturaItemImpuestoDM._FacturaItemID + '=' + IntToStr(_FI.ID) + ')';
  end;
begin
  inherited Create(TFacturaItemImpuesto,TFacturaItemImpuestoDM.CreateAll(False, WhereString, false));
end;

function TFacturaItemImpuestoList.CreateNewObject: TPDObject;
begin
  result := TFacturaItemImpuesto.Create;
end;

constructor TFacturaItemImpuestoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFacturaItemImpuesto,TFacturaItemImpuestoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TFacturaImpuesto }
constructor TFacturaImpuesto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TFacturaImpuestoDM);
  FImporteNetoGravado := null;
  FImpuesto := null;
  FPorcentajeImpuesto := null;
end;

procedure TFacturaImpuesto.SetFacturaID(Value : TObjectID);
begin
  if (Value<>FFacturaID) and Assigned(FFactura) then
    FreeAndNil(FFactura);
  FFacturaID := Value;
end;

function TFacturaImpuesto.GetFactura: TFactura;
begin
  if not Assigned(FFactura) then
    GetObject(TFactura,FFactura,FacturaID);
  result := TFactura(FFactura);
end;

function TFacturaImpuesto.GetImporteNetoGravado: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImporteNetoGravado , 2 );
end;

function TFacturaImpuesto.GetImpuesto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FImpuesto , 2 );
end;

function TFacturaImpuesto.GetImpuestoConcepto : TImpuestoConcepto;
begin
  if not assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto,FImpuestoConcepto,ImpuestoConceptoID);
  result := TImpuestoConcepto(FImpuestoConcepto);
end;

function TFacturaImpuesto.GetPorcentajeImpuesto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPorcentajeImpuesto , 2 );
end;

procedure TFacturaImpuesto.SetImporteNetoGravado(const Value: TReal);
begin
  FImporteNetoGravado := Aplicacion.MathService.Redondear( Value , 2 );
end;

procedure TFacturaImpuesto.SetImpuesto(const Value: TReal);
begin
  FImpuesto := Aplicacion.MathService.Redondear( Value , 2 );;
end;

procedure TFacturaImpuesto.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value<>FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);
  FImpuestoConceptoID := Value;

end;
 procedure TFacturaImpuesto.SetPorcentajeImpuesto(const Value: TReal);
begin
  FPorcentajeImpuesto := Aplicacion.MathService.Redondear( Value , 2 );;
end;

{ TFacturaImpuestoDM }
class function TFacturaImpuestoDM.TableName : string;
begin
  result := 'FacturaImpuestos';
end;


class function TFacturaImpuestoDM.ID_FieldName : string;
begin
  result := 'FacturaImpuestoID';
end;


procedure TFacturaImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFacturaImpuesto(PDObject) do
    begin
      IDField[_FacturaID] := FacturaID;
      FloatField[_ImporteNetoGravado] := ImporteNetoGravado;
      FloatField[_Impuesto] := Impuesto;
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
      FloatField[_PorcentajeImpuesto] := PorcentajeImpuesto;
    end;
end;


procedure TFacturaImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFacturaImpuesto(PDObject) do
    begin
      FFacturaID := IDField[_FacturaID];
      FImporteNetoGravado := FloatField[_ImporteNetoGravado];
      FImpuesto := FloatField[_Impuesto];
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
      FPorcentajeImpuesto := FloatField[_PorcentajeImpuesto];
    end;
end;

 { TFacturaImpuestoList }
function TFacturaImpuestoList.GetActual : TFacturaImpuesto;
begin
  result := TFacturaImpuesto(CurrentObject);
end;

constructor TFacturaImpuestoList.CreateByFactura(_F: TFactura);
  Function WhereString: String;
  begin
    Result := '(' + TFacturaImpuestoDM.TableName + '.' + TFacturaImpuestoDM._FacturaID + '=' + IntToStr( _F.ID ) + ')';
  end;
begin
  inherited Create(TFacturaImpuesto,TFacturaImpuestoDM.CreateAll( False, WhereString, False ));
end;

function TFacturaImpuestoList.CreateNewObject: TPDObject;
begin
  result := TFacturaImpuesto.Create;
end;

constructor TFacturaImpuestoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFacturaImpuesto,TFacturaImpuestoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TFacturaAutorizacionAfip }
constructor TFacturaAutorizacionAfip.Create;
begin
  inherited;
  DMObject               := Aplicacion.DMPRovider.GetGlobalDM(TFacturaAutorizacionAfipDM);
  FFecha                 := Null;
  FFechaDeVencimientoCAE := Null;
  FNumeroCAE             := Null;
  FObservaciones         := Null;
  FErrores               := Null;
  FResultado             := Null;
  FNumeroComprobante     := Null;
  IDSolicitudCAE         := Null;
end;

function TFacturaAutorizacionAfip.GetFactura : TFactura;
begin
  if not assigned(FFactura) then
    GetObject(TFactura,FFactura,FacturaID);
  result := TFactura(FFactura);
end;

procedure TFacturaAutorizacionAfip.SetFacturaID(Value : TObjectID);
begin
  if (Value<>FFacturaID) and Assigned(FFactura) then
    FreeAndNil(FFactura);
  FFacturaID := Value;
end;

function TFacturaAutorizacionAfip.GetUsuario : TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);
  result := TUsuario(FUsuario);
end;

procedure TFacturaAutorizacionAfip.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;
 { TFacturaAutorizacionAfipDM }
class function TFacturaAutorizacionAfipDM.TableName : string;
begin
  result := 'FacturaAutorizacionesAFIP';
end;

class function TFacturaAutorizacionAfipDM.ID_FieldName : string;
begin
  result := 'FacturaAutorizacionAfipID';
end;

procedure TFacturaAutorizacionAfipDM.PopulateFields(PDObject: TPDObject);
begin
  with TFacturaAutorizacionAfip(PDObject) do
    begin
      IDField[_FacturaID]                   := FacturaID;
      DateTimeField[_Fecha]                 := Fecha;
      DateTimeField[_FechaDeVencimientoCAE] := FechaDeVencimientoCAE;
      StringField[_IDSolicitudCAE]          := IDSolicitudCAE;
      StringField[_NumeroCAE]               := NumeroCAE;
      StringField[_Observaciones]           := Observaciones;
      StringField[_Errores]                 := Errores;
      StringField[_Resultado]               := Resultado;
      IDField[_UsuarioID]                   := UsuarioID;
      IntegerField[_NumeroComprobante]      := NumeroComprobante;
    end;
end;

procedure TFacturaAutorizacionAfipDM.PopulateObject(PDObject: TPDObject);
begin
  with TFacturaAutorizacionAfip(PDObject) do
    begin
      FFacturaID             := IDField[_FacturaID];
      FFecha                 := DateTimeField[_Fecha];
      FFechaDeVencimientoCAE := DateTimeField[_FechaDeVencimientoCAE];
      FIDSolicitudCAE        := StringField[_IDSolicitudCAE];
      FNumeroCAE             := StringField[_NumeroCAE];
      FObservaciones         := StringField[_Observaciones];
      FErrores               := StringField[_Errores];
      FResultado             := StringField[_Resultado];
      FUsuarioID             := IDField[_UsuarioID];
      FNumeroComprobante     := IntegerField[_NumeroComprobante];
    end;
end;

 { TFacturaAutorizacionAfipList }
function TFacturaAutorizacionAfipList.GetActual : TFacturaAutorizacionAfip;
begin
  result := TFacturaAutorizacionAfip(CurrentObject);
end;

constructor TFacturaAutorizacionAfipList.CreateByFactura(_F: TFactura);
  Function WhereString: String;
  begin
    Result := '( ' + TFacturaAutorizacionAfipDM._FacturaID + '=' + IntToStr(_F.ID) + ' )'; // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := TFacturaAutorizacionAfipDM._Fecha; // campos separados por coma
  end;
begin
  inherited Create(TFacturaAutorizacionAfip,TFacturaAutorizacionAfipDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TFacturaAutorizacionAfipList.CreateNewObject: TPDObject;
begin
  result := TFacturaAutorizacionAfip.Create;
end;

constructor TFacturaAutorizacionAfipList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFacturaAutorizacionAfip,TFacturaAutorizacionAfipDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TArchivoPerfilPermitido }
constructor TArchivoPerfilPermitido.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TArchivoPerfilPermitidoDM);
  SaveSQLLog := True;
end;

function TArchivoPerfilPermitido.GetArchivo : TArchivo;
begin
  if not assigned(FArchivo) then
    GetObject(TArchivo,FArchivo,ArchivoID);
  result := TArchivo(FArchivo);
end;

procedure TArchivoPerfilPermitido.SetArchivoID(Value : TObjectID);
begin
  if (Value<>FArchivoID) and Assigned(FArchivo) then
    FreeAndNil(FArchivo);
  FArchivoID := Value;
end;

function TArchivoPerfilPermitido.GetPerfil : TPerfil;
begin
  if not assigned(FPerfil) then
    GetObject(TPerfil,FPerfil,PerfilID);
  result := TPerfil(FPerfil);
end;

procedure TArchivoPerfilPermitido.SetPerfilID(Value : TObjectID);
begin
  if (Value<>FPerfilID) and Assigned(FPerfil) then
    FreeAndNil(FPerfil);
  FPerfilID := Value;
end;
 { TArchivoPerfilPermitidoDM }
class function TArchivoPerfilPermitidoDM.TableName : string;
begin
  result := 'ArchivoPerfilesPermitidos';
end;


class function TArchivoPerfilPermitidoDM.ID_FieldName : string;
begin
  result := 'ArchivoPerfilPermitidoID';
end;


procedure TArchivoPerfilPermitidoDM.PopulateFields(PDObject: TPDObject);
begin
  with TArchivoPerfilPermitido(PDObject) do
    begin
      IDField[_ArchivoID] := ArchivoID;
      IDField[_PerfilID] := PerfilID;
    end;
end;


procedure TArchivoPerfilPermitidoDM.PopulateObject(PDObject: TPDObject);
begin
  with TArchivoPerfilPermitido(PDObject) do
    begin
      FArchivoID := IDField[_ArchivoID];
      FPerfilID := IDField[_PerfilID];
    end;
end;

 { TArchivoPerfilPermitidoList }
function TArchivoPerfilPermitidoList.GetActual : TArchivoPerfilPermitido;
begin
  result := TArchivoPerfilPermitido(CurrentObject);
end;

constructor TArchivoPerfilPermitidoList.CreateByArchivo(_A: TArchivo);
  Function WhereString: String;
  begin
    Result := '(' + TArchivoPerfilPermitidoDM._ArchivoID + '=' + IntToStr(_A.ID) + ')';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TArchivoPerfilPermitido,TArchivoPerfilPermitidoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TArchivoPerfilPermitidoList.CreateNewObject: TPDObject;
begin
  result := TArchivoPerfilPermitido.Create;
end;

constructor TArchivoPerfilPermitidoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TArchivoPerfilPermitido,TArchivoPerfilPermitidoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { THRPFContabilidadDeCosto }
constructor THRPFContabilidadDeCosto.Create;
begin
  inherited;
  DMObject     := Aplicacion.DMPRovider.GetGlobalDM(THRPFContabilidadDeCostoDM);
  FImporte     := null;
  FPeriodoAnio := null;
  FPeriodoMes  := null;
end;

function THRPFContabilidadDeCosto.GetCentroDeCosto: TCentroDeCosto;
begin
  if not Assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto,FCentroDeCosto,CentroDeCostoID);
  result := TCentroDeCosto(FCentroDeCosto);
end;

function THRPFContabilidadDeCosto.GetCuentaContable : TCuentaContable;
begin
  if not assigned(FCuentaContable) then
    GetObject(TCuentaContable,FCuentaContable,CuentaContableID);
  result := TCuentaContable(FCuentaContable);
end;

procedure THRPFContabilidadDeCosto.SetCentroDeCostoID(const Value: TObjectID);
begin
  if (Value<>FCentroDeCostoID) and Assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  FCentroDeCostoID := Value;
end;

procedure THRPFContabilidadDeCosto.SetCuentaContableID(Value : TObjectID);
begin
  if (Value<>FCuentaContableID) and Assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);
  FCuentaContableID := Value;
end;

function THRPFContabilidadDeCosto.GetHojaDeRutaPasoDeFabricacion : THojaDeRutaPasoDeFabricacion;
begin
  if not assigned(FHojaDeRutaPasoDeFabricacion) then
    GetObject(THojaDeRutaPasoDeFabricacion,FHojaDeRutaPasoDeFabricacion,HojaDeRutaPasoDeFabricacionID);
  result := THojaDeRutaPasoDeFabricacion(FHojaDeRutaPasoDeFabricacion);
end;

procedure THRPFContabilidadDeCosto.SetHojaDeRutaPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FHojaDeRutaPasoDeFabricacionID) and Assigned(FHojaDeRutaPasoDeFabricacion) then
    FreeAndNil(FHojaDeRutaPasoDeFabricacion);
  FHojaDeRutaPasoDeFabricacionID := Value;
end;

function THRPFContabilidadDeCosto.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  result := TMoneda(FMoneda);
end;

procedure THRPFContabilidadDeCosto.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;
 { THRPFContabilidadDeCostoDM }
class function THRPFContabilidadDeCostoDM.TableName : string;
begin
  Result := 'HRPFContabilidadDeCostos';
end;

class function THRPFContabilidadDeCostoDM.ID_FieldName : string;
begin
  Result := 'HRPFContabilidadDeCostoID';
end;

procedure THRPFContabilidadDeCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with THRPFContabilidadDeCosto(PDObject) do
    begin
      IDField[_CuentaContableID]              := CuentaContableID;
      IDField[_CentroDeCostoID]               := CentroDeCostoID;
      IDField[_HojaDeRutaPasoDeFabricacionID] := HojaDeRutaPasoDeFabricacionID;
      FloatField[_Importe]                    := Importe;
      IDField[_MonedaID]                      := MonedaID;
      IntegerField[_PeriodoAnio]              := PeriodoAnio;
      IntegerField[_PeriodoMes]               := PeriodoMes;
      IntegerField[_DiasEnElPaso]             := DiasEnElPaso;
    end;
end;


procedure THRPFContabilidadDeCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with THRPFContabilidadDeCosto(PDObject) do
    begin
      FCuentaContableID              := IDField[_CuentaContableID];
      FCentroDeCostoID               := IDField[_CentroDeCostoID];
      FHojaDeRutaPasoDeFabricacionID := IDField[_HojaDeRutaPasoDeFabricacionID];
      FImporte                       := FloatField[_Importe];
      FMonedaID                      := IDField[_MonedaID];
      FPeriodoAnio                   := IntegerField[_PeriodoAnio];
      FPeriodoMes                    := IntegerField[_PeriodoMes];
      FDiasEnElPaso                  := IntegerField[_DiasEnElPaso];
    end;
end;

 { THRPFContabilidadDeCostoList }
function THRPFContabilidadDeCostoList.GetActual : THRPFContabilidadDeCosto;
begin
  result := THRPFContabilidadDeCosto(CurrentObject);
end;

constructor THRPFContabilidadDeCostoList.CreateByHojaDeRutaPasoDeFabricacion(_HRPF: THojaDeRutaPasoDeFabricacion);
  Function WhereString: String;
  begin
    Result := '(' + THRPFContabilidadDeCostoDM._HojaDeRutaPasoDeFabricacionID + '=' + IntToStr(_HRPF.ID) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(THRPFContabilidadDeCosto,THRPFContabilidadDeCostoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function THRPFContabilidadDeCostoList.CreateNewObject: TPDObject;
begin
  result := THRPFContabilidadDeCosto.Create;
end;

constructor THRPFContabilidadDeCostoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(THRPFContabilidadDeCosto,THRPFContabilidadDeCostoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TTipoDeNoConforme }
constructor TTipoDeNoConforme.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeNoConformeDM);
  SaveSQLLog := True;
end;

{ TTipoDeNoConformeDM }
class function TTipoDeNoConformeDM.TableName : string;
begin
  Result := 'TiposDeNoConforme';
end;


class function TTipoDeNoConformeDM.ID_FieldName : string;
begin
  Result := 'TipoDeNoConformeID';
end;

class function TTipoDeNoConformeDM.EsInactivo_FieldName : string;
begin
  Result := _EsInactivo;
end;


procedure TTipoDeNoConformeDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeNoConforme(PDObject) do
    begin
      StringField[_Descripcion]       := Descripcion;
      BooleanField[_EsInactivo]       := EsInactivo;
      BooleanField[_EsDefectoCalidad] := EsDefectoCalidad;
    end;
end;


procedure TTipoDeNoConformeDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeNoConforme(PDObject) do
    begin
      Descripcion      := StringField[_Descripcion];
      EsInactivo       := BooleanField[_EsInactivo];
      EsDefectoCalidad := BooleanField[_EsDefectoCalidad];
    end;
end;

 { TTipoDeNoConformeList }
function TTipoDeNoConformeList.GetActual : TTipoDeNoConforme;
begin
  result := TTipoDeNoConforme(CurrentObject);
end;

constructor TTipoDeNoConformeList.CreateByEsDefectoCalidad(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTipoDeNoConformeDM.TableName + '.' + TTipoDeNoConformeDM._EsDefectoCalidad + '=1)';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTipoDeNoConforme,TTipoDeNoConformeDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

constructor TTipoDeNoConformeList.CreateByNoEsDefectoCalidad(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTipoDeNoConformeDM.TableName + '.' + TTipoDeNoConformeDM._EsDefectoCalidad + '=0)';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTipoDeNoConforme,TTipoDeNoConformeDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

function TTipoDeNoConformeList.CreateNewObject: TPDObject;
begin
  result := TTipoDeNoConforme.Create;
end;

constructor TTipoDeNoConformeList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTipoDeNoConforme,TTipoDeNoConformeDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TPacking }
procedure TPacking.AgregarNuevoEstadoAlLog;
//var
//  S: TRemitoStateLog;
begin
//    S := TRemitoStateLog.Create;
//  try
//    S.EstadoDeRemitoID        := EstadoDeRemitoID;
//    S.UsuarioID               := Aplicacion.Usuario.ID;
//    S.FechaHora               := Aplicacion.DateTimeService.FechaHoraActual;
//    S.RemitoID                := Self.ID;
//    S.Save;
//    StateLogs.Add(S);
//  finally
//    S.NilObject;
//  end;
end;

function TPacking.ObtenerEstadoID(_Cod: String): TObjectID;
Var
  EL : TEstadoDePackingList;
Begin
  Result := NullID;
  Try
    EL := TEstadoDePackingList.CreateByCodigo(_Cod, False);
    if (El.Count = 0) then
      Raise Exception.Create('No existe el Estado de Packing List: ' +  _Cod + ' en la tabla');
    Result := El.Actual.ID;
  Finally
    FreeAndNil (EL);
  End;
end;

procedure TPacking.AsignarNumero;
var
  PL : TPackingList;
begin
  try
    PL := TPackingList.CreateByUltimoNumero;
    if (PL.Count > 0) then
      FNumero := PL.Actual.Numero + 1
    else
      FNumero := 1;
  finally
    FreeAndNil(PL);
  end;
end;

constructor TPacking.Create;
begin
  inherited;
  DMObject                    := Aplicacion.DMPRovider.GetGlobalDM(TPackingDM);
  FVerificaCai                := False;
  FFecha                      := Null;
  FNumero                     := Null;
  FEstadoDePackingID          := NullID;
  FCantidadDeCajasTotal       := Null;
  FPesoNetoTotal              := Null;
  FPesoBrutoTotal             := Null;
  FVolumenTotal               := Null;
end;

function TPacking.GetCantidadDeCajasDescripcion: String;
begin
  Result := FloatToStrF(CantidadDeCajasTotal,ffNumber, 10, 2) + ' ' + Aplicacion.MeasureService.UnidadDeMedidaCantidadDefault.Codigo;
end;

function TPacking.GetCantidadDeCajasTotal: TReal;
begin
  if ( FCantidadDeCajasTotal = Null )then
    FCantidadDeCajasTotal := Items.Count;
  Result := FCantidadDeCajasTotal;
end;

function TPacking.GetCliente : TEmpresa;
begin
  if not assigned(FCliente) then
    GetObject(TEmpresa,FCliente,ClienteID);
  result := TEmpresa(FCliente);
end;

function TPacking.GetDeposito: TDeposito;
begin
  if not Assigned(FDeposito) then
    GetObject(TDeposito,FDeposito,DepositoID);
  result := TDeposito(FDeposito);
end;

function TPacking.GetEstadoDePacking: TEstadoDePacking;
begin
  if not Assigned(FEstadoDePacking) then
    GetObject(TEstadoDePacking, FEstadoDePacking, EstadoDePackingID);
  result := TEstadoDePacking(FEstadoDePacking);
end;

function TPacking.Save: Boolean;
begin
  If (EstadoDePackingID = NullID) then
    FEstadoDePackingID := ObtenerEstadoID( Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Grabado  );
  Result := Inherited Save;
  if Result then
    Begin
      if EsCambioDeEstado then
        AgregarNuevoEstadoAlLog;
    End;
end;

procedure TPacking.SetClienteID(Value : TObjectID);
begin
  if (Value <> FClienteID) and Assigned(FCliente) then
    FreeAndNil(FCliente);
  FClienteID := Value;
end;

procedure TPacking.SetDepositoID(const Value: TObjectID);
begin
  if (Value<>FDepositoID) and Assigned(FDeposito) then
    FreeAndNil(FDeposito);
  FDepositoID := Value;
end;

procedure TPacking.SetEstadoDePackingID(const Value: TObjectID);
begin
  if (Value <> FEstadoDePackingID) and Assigned(FEstadoDePacking) then
    FreeAndNil(FEstadoDePacking);
  FEstadoDePackingID := Value;
end;

function TPacking.GetIncoterm : TIncoterm;
begin
  if not assigned(FIncoterm) then
    GetObject(TIncoterm,FIncoterm,IncotermID);
  result := TIncoterm(FIncoterm);
end;

function TPacking.GetItems: TPackingItemList;
begin
  If not Assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TPackingItemList.CreateByPacking(Self)));
  Result := FItems;
end;

function TPacking.GetPesoBrutoTotal: TReal;
begin
  if ( FPesoBrutoTotal = Null )then
    begin
      FPesoBrutoTotal := 0;
      Items.First;
      while not Items.IsLast do
        begin
          FPesoBrutoTotal := FPesoBrutoTotal +  Aplicacion.MeasureService.ConvertirUnidadDeMedida(Items.Actual.UnidadDeMedidaPeso, Aplicacion.MeasureService.UnidadDeMedidaPesoDefault, Items.Actual.PesoBruto);
          Items.next;
        end;
    end;
  Result := FPesoBrutoTotal;
end;

function TPacking.GetPesoBrutoTotalDescripcion: String;
begin
  Result := FloatToStrF(PesoBrutoTotal,ffNumber, 10, 2) + ' ' + Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.Codigo;
end;

function TPacking.GetPesoNetoTotal: TReal;
begin
  if ( FPesoNetoTotal = Null )then
    begin
      FPesoNetoTotal := 0;
      Items.first;
      while not Items.IsLast do
        begin
          FPesoNetoTotal := FPesoNetoTotal +  Aplicacion.MeasureService.ConvertirUnidadDeMedida(Items.Actual.UnidadDeMedidaPeso, Aplicacion.MeasureService.UnidadDeMedidaPesoDefault, Items.Actual.PesoNeto);
          Items.next;
        end;
    end;
  Result := FPesoNetoTotal;
end;

function TPacking.GetPesoNetoTotalDescripcion: String;
begin
  Result := FloatToStrF(PesoNetoTotal,ffNumber, 10, 2) + ' ' + Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.Codigo;
end;

function TPacking.GetRemito: TRemito;
begin
  if not Assigned(FRemito) then
    GetObject(TRemito, FRemito, RemitoID);
  result := TRemito(FRemito);
end;

function TPacking.GetVolumenTotal: TReal;
begin
  if ( FVolumenTotal = Null )then
    begin
      FVolumenTotal := 0;
      Items.first;
      while not Items.IsLast do
        begin
          FVolumenTotal := FVolumenTotal + Items.Actual.Volumen;
          Items.next;
        end;
    end;
  Result := FVolumenTotal;
end;

function TPacking.GetVolumenTotalDescripcion: String;
begin
  Result := FloatToStrF(VolumenTotal,ffNumber, 10, 2) + ' ' + Aplicacion.MeasureService.UnidadDeMedidaVolumenDefault.Codigo;
end;

procedure TPacking.LimpiarItemsDeMemoria;
begin
  If not Assigned(FItems) Then
    FreeAndNil(FItems);
end;

class function TPacking.Reporte(_P: TPacking; _Imprimir: Boolean): String;
var
  Foto                  : String;
  frxReport             : TfrxReport;
  frxDBDtstReporte      : TfrxDBDataset;
  frxDBDtstReporteItems : TfrxDBDataset;
  Exportfilter          : TfrxCustomExportFilter;
  frxPDFExport          : TfrxPDFExport;
  frxRichObject         : TfrxRichObject;
  ClntDtStReporte       : TClientDataSet;
  ClntDtStReporteItems  : TClientDataSet;
  Aux : String;

  procedure CargarTitulos;
  begin
    if (_P.Cliente.Localidad.Pais.ResourceLanguagePais.Codigo = 'ES') then
      if FileExists( _P.TipoDeFormulario.ArchivoFD3TitulosES ) then
        frxReport.Variables.LoadFromFile( _P.TipoDeFormulario.ArchivoFD3TitulosES )
      else
        raise Exception.Create('Falta el archivo ' + _P.TipoDeFormulario.ArchivoFD3TitulosES);

    if (_P.Cliente.Localidad.Pais.ResourceLanguagePais.codigo = 'EN') then
      if FileExists( _P.TipoDeFormulario.ArchivoFD3TitulosEN ) then
        frxReport.Variables.LoadFromFile( _P.TipoDeFormulario.ArchivoFD3TitulosEN )
      else
        raise Exception.Create('Falta el archivo ' + _P.TipoDeFormulario.ArchivoFD3TitulosEN);

    if (_P.Cliente.Localidad.Pais.ResourceLanguagePais.Codigo = 'PO') then
      if FileExists( _P.TipoDeFormulario.ArchivoFD3TitulosPO ) then
        frxReport.Variables.LoadFromFile( _P.TipoDeFormulario.ArchivoFD3TitulosPO )
      else
        raise Exception.Create('Falta el archivo ' + _P.TipoDeFormulario.ArchivoFD3TitulosPO);
  end;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile( _P.TipoDeFormulario.ArchivoXMLCamposEncabezado );

    ClntDtStReporte.Open;

    frxDBDtstReporte         := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name    := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;

    ClntDtStReporteItems := TClientDataSet.Create(nil);
    ClntDtStReporteItems.LoadFromFile( _P.TipoDeFormulario.ArchivoXMLCamposItems );
    ClntDtStReporteItems.Open;

    frxDBDtstReporteItems         := TfrxDBDataset.Create(nil);
    frxDBDtstReporteItems.Name    := 'frxDBDtstReporteItems';
    frxDBDtstReporteItems.DataSet := ClntDtStReporteItems;
    frxDBDtstReporteItems.Open;

    frxReport := TfrxReport.Create(nil);

    frxReport.LoadFromFile( _P.TipoDeFormulario.ArchivoReporte, True );

    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.DataSets.Add(frxDBDtstReporteItems);
    frxReport.Report.DataSets.Add(frxDBDtstReporte);
    frxReport.Report.DataSets.Add(frxDBDtstReporteItems);
    frxReport.PreviewOptions.Buttons := [pbZoom, pbFind, pbOutline, pbNavigator, pbPrint, pbExportQuick ];

    frxRichObject:= TfrxRichObject.Create(frxReport);
    frxPDFExport := TfrxPDFExport.Create(frxReport);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.PrintOptimized := True;
    frxPDFExport.OpenAfterExport := False;
    frxPDFExport.Outline := True;
    frxPDFExport.ProtectionFlags := [ePrint];

    frxPDFExport.Title   := 'Packing List';
    frxPDFExport.Author  := Aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := _P.NumeroFinal;
    frxPDFExport.Creator := Aplicacion.Nombre + ' ' + Aplicacion.Version + ' (' + Aplicacion.Empresa.Descripcion + ')';

    Exportfilter            := TfrxCustomExportFilter(frxPDFExport);
    ExportFilter.ShowDialog := True;
    ExportFilter.FileName   := 'PK' + IntToStr( _P.Numero ) + '.Pdf';
    frxReport.Report.PrintOptions.Copies       := _P.TipoDeFormulario.CantidadDeImpresiones;

    CargarTitulos;
  end;

  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporteItems.EmptyDataSet;
    // cargo datos de cabecera
    ClntDtStReporte.Append;
    ClntDtStReporte.FieldByName('ID').AsInteger                 := _P.ID;
    ClntDtStReporte.FieldByName('Fecha').Value                  := _P.Fecha;
    ClntDtStReporte.FieldByName('Letra').AsString               := _P.TipoDeFormulario.Letra;
    ClntDtStReporte.FieldByName('NumeroDePacking').AsString     := AnsiReplaceStr(_P.NumeroFinal, _P.TipoDeFormulario.Letra + '-', '');

    if (_P.Remito.Facturas.Count > 0) then
      begin
        _P.Remito.Facturas.First;
        ClntDtStReporte.FieldByName('Factura').AsString             := _P.Remito.Facturas.Actual.NumeroFinal;
      end
    else
      ClntDtStReporte.FieldByName('Factura').AsString := _P.Remito.NumeroDeFacturaTeamplace;

    //Datos del cliente
    ClntDtStReporte.FieldByName('CodigoEmpresa').AsString       := _P.Cliente.Codigo;
    ClntDtStReporte.FieldByName('NombreEmpresa').AsString       := _P.Cliente.Descripcion;
    ClntDtStReporte.FieldByName('CUITEmpresa').AsString         := _P.Cliente.CUIT;
    ClntDtStReporte.FieldByName('DireccionEmpresa').AsString    := _P.Cliente.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString := _P.Cliente.CodigoPostal;
    ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString    := _P.Cliente.Localidad.DescripcionConProvinciaYPais;

    ClntDtStReporte.FieldByName('Incoterm').AsString            := _P.Incoterm.Codigo;
    ClntDtStReporte.FieldByName('IDImpositivo').AsString        := _P.Cliente.CodigoIDImpositivoExterior;
    ClntDtStReporte.FieldByName('IDImpositivoNro').AsString     := _P.Cliente.IDImpositivoExterior;
    // datos de apholos
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := Aplicacion.Empresa.Descripcion;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := Aplicacion.Empresa.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := Aplicacion.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalApholos').AsString := Aplicacion.Empresa.CodigoPostal;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := Aplicacion.Empresa.Localidad.DescripcionConProvinciaYPais;
    ClntDtStReporte.FieldByName('NroIngresosBrutos').AsString   := Aplicacion.Empresa.NumeroDeIngresosBrutos;
    ClntDtStReporte.FieldByName('FechaInicioActividades').Value := Aplicacion.Empresa.FechaInicioActividad;
    ClntDtStReporte.FieldByName('CondicionDeIVA').AsString      := Aplicacion.Empresa.CondicionDeIva.Descripcion;
    // datos de apholos
    _P.Items.First;
    if (_P.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.Cliente.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (_P.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.ClienteTribecaID <> NullID) then
      ClntDtStReporte.FieldByName('DepositoDeEntrega').AsString  := _P.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.Codigo + ' - ' + _P.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.Descripcion + ' - ' + _P.Deposito.Domicilio + ' - ' + _P.Deposito.Localidad.DescripcionConProvinciaYPais
    else
      ClntDtStReporte.FieldByName('DepositoDeEntrega').AsString  := _P.Deposito.Domicilio + ' - ' + _P.Deposito.Localidad.DescripcionConProvinciaYPais;

    ClntDtStReporte.FieldByName('HorariodeEntrega').AsString   := _P.Deposito.HorarioDeEntrega;
    ClntDtStReporte.FieldByName('TextoPieImpresion').AsString  := _P.TipoDeFormulario.PieImpresion;
    ClntDtStReporte.FieldByName('CantidadCajas').AsString    := IntToStr(_P.Items.Count);
    ClntDtStReporte.FieldByName('PesoNetoTotal').AsString    := _P.PesoNetoTotalDescripcion;
    ClntDtStReporte.FieldByName('PesoBrutoTotal').AsString   := _P.PesoBrutoTotalDescripcion;
    ClntDtStReporte.FieldByName('VolumenTotal').AsString     := _P.VolumenTotalDescripcion;

    _P.Items.First;
    Aux := Aplicacion.MeasureService.ConvertirUnidadDeMedidaDescripcion( _P.Items.Actual.MateriaPrima.UnidadDeMedidaAnchoDeTira, Aplicacion.MeasureService.UnidadDeMedidaLongitudCentimetro , _P.Items.Actual.MateriaPrima.AnchoDeTira, 0);
    Aux := Aux + ' X ' + Aplicacion.MeasureService.ConvertirUnidadDeMedidaDescripcion( _P.Items.Actual.MateriaPrima.UnidadDeMedidaEspesor, Aplicacion.MeasureService.UnidadDeMedidaLongitudCentimetro , _P.Items.Actual.MateriaPrima.Espesor, 0);
    Aux := Aux + ' X ' + Aplicacion.MeasureService.ConvertirUnidadDeMedidaDescripcion( _P.Items.Actual.MateriaPrima.UnidadDeMedidaLongitud, Aplicacion.MeasureService.UnidadDeMedidaLongitudCentimetro , _P.Items.Actual.MateriaPrima.Longitud, 0);
    ClntDtStReporte.FieldByName('MedidasCaja').AsString := Aux ;

    ClntDtStReporte.Post;
    // cargo los items
    repeat
      ClntDtStReporteItems.Append;
      ClntDtStReporteItems.FieldByName('ID').Value                      := _P.Items.Actual.ID;
      ClntDtStReporteItems.FieldByName('Item').Value                    := _P.Items.Actual.ItemNro;
      ClntDtStReporteItems.FieldByName('Cantidad').Value                := _P.Items.Actual.Cantidad;
      ClntDtStReporteItems.FieldByName('ProductoCodigo').AsString       := _P.Items.Actual.PedidoDeVentaItem.Producto.codigo;
      ClntDtStReporteItems.FieldByName('Descripcion').AsString          := _P.Items.Actual.PedidoDeVentaItem.Producto.Fabricado.DescripcionParaExportacion;
      ClntDtStReporteItems.FieldByName('OrdenDeCompra').AsString        := _P.Items.Actual.PedidoDeVentaItem.PedidoDeVenta.NroOrdenDeCompraCliente;
      ClntDtStReporteItems.FieldByName('UnidadDeMedida').AsString       := _P.Items.Actual.PedidoDeVentaItem.Producto.Fabricado.UnidadDeMedida.Codigo;
      ClntDtStReporteItems.FieldByName('PesoNeto').AsString             := _P.Items.Actual.PesoNeto;
      ClntDtStReporteItems.FieldByName('PesoNetoDescripcion').AsString  := _P.Items.Actual.PesoNetoDescripcion;
      ClntDtStReporteItems.FieldByName('PesoBruto').AsString            := _P.Items.Actual.PesoBruto;
      ClntDtStReporteItems.FieldByName('PesoBrutoDescripcion').AsString := _P.Items.Actual.PesoBrutoDescripcion;
      ClntDtStReporteItems.FieldByName('PedidoItem').AsString           := IntToStr(_P.Items.Actual.PedidoDeVentaItem.CCPVNumero) + '/' + IntToStr(_P.Items.Actual.PedidoDeVentaItem.ItemNro);
      ClntDtStReporteItems.Post;

      _P.Items.Next;
    until _P.Items.IsLast;
  end;
  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(frxDBDtstReporteItems);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(ClntDtStReporteItems);
  end;
begin
  try
    Aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;
    if _Imprimir then
      begin
        frxReport.PrintOptions.ShowDialog := False;
        frxReport.ShowProgress            := True;

        if (_P.TipoDeFormulario.ImpresoraDefaultID <> NullID) then
          frxReport.Report.PrintOptions.Printer    := _P.TipoDeFormulario.ImpresoraDefault.DireccionDeRed;

        frxReport.Report.PrintOptions.Copies := 1;
        frxReport.PrepareReport;
        frxReport.Report.Print;
      end
    else
      begin
        if (_P.TipoDeFormulario.ImpresoraDefaultID <> NullID) then
          frxReport.Report.PrintOptions.Printer    := _P.TipoDeFormulario.ImpresoraDefault.DireccionDeRed;
        if not _P.TipoDeFormulario.EditarPorAdministrador then
          frxReport.ShowReport
        else
          frxReport.DesignReport;
      end
  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
  end;
end;

procedure TPacking.SetIncotermID(Value : TObjectID);
begin
  if (Value<>FIncotermID) and Assigned(FIncoterm) then
    FreeAndNil(FIncoterm);
  FIncotermID := Value;
end;

procedure TPacking.SetRemitoID(const Value: TObjectID);
begin
  if (Value <> FRemitoID) and Assigned(FRemito) then
    FreeAndNil(FRemito);
  FRemitoID := Value;
end;

{ TPackingDM }
class function TPackingDM.TableName : string;
begin
  result := 'Packings';
end;

class function TPackingDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TPackingDM.ID_FieldName : string;
begin
  Result := 'PackingID';
end;

procedure TPackingDM.PopulateFields(PDObject: TPDObject);
begin
  with TPacking(PDObject) do
    begin
      IDField[_ClienteID]          := ClienteID;
      IDField[_IncotermID]         := IncotermID;
      IDField[_DepositoID]         := DepositoID;
      IDField[_TipoDeFormularioID] := TipoDeFormularioID;
      IDField[_RemitoID]           := RemitoID;
      DateTimeField[_Fecha]        := Fecha;
      IntegerField[_Numero]        := Numero;
      IDField[_EstadoDePackingID]  := EstadoDePackingID;
    end;
end;

procedure TPackingDM.PopulateObject(PDObject: TPDObject);
begin
  with TPacking(PDObject) do
    begin
      FClienteID          := IDField[_ClienteID];
      FIncotermID         := IDField[_IncotermID];
      FDepositoID         := IDField[_DepositoID];
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FRemitoID           := IDField[_RemitoID];
      FFecha              := DateTimeField[_Fecha];
      FNumero             := IntegerField[_Numero];
      FEstadoDePackingID  := IDField[_EstadoDePackingID];
    end;
end;

 { TPackingList }
function TPackingList.GetActual : TPacking;
begin
  Result := TPacking(CurrentObject);
end;

constructor TPackingList.CreateByClienteAndFechaDesdeFechaHasta(_C: TCliente; _FDesde, _FHasta: String; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Fecha + ' between ' + QuotedStr( _FDesde + _PrimerHora ) + ' and ' + QuotedStr(_FHasta + _UltimaHora) + ')';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._ClienteID + '=' + IntToStr(_C.ID) + ' )';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, False, OrderBy ));
end;

constructor TPackingList.CreateByClienteAndFechaDesdeFechaHastaAndEstados(_C: TCliente; _FDesde, _FHasta: String; _SL: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I : Integer;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Fecha + ' between ' + QuotedStr( _FDesde + _PrimerHora ) + ' and ' + QuotedStr(_FHasta + _UltimaHora) + ')';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._ClienteID + '=' + IntToStr(_C.ID) + ' )';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._EstadoDePackingID + ' in (';
    for I := 0 to _SL.count - 1 do
      Result := Result + _SL[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, False, OrderBy ));
end;

constructor TPackingList.CreateByFechaDesdeFechaHasta(_FDesde, _FHasta: String; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Fecha + ' between ' + QuotedStr( _FDesde + _PrimerHora ) + ' and ' + QuotedStr(_FHasta + _UltimaHora) + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, False, OrderBy ));
end;

constructor TPackingList.CreateByFechaDesdeFechaHastaAndEstados(_FDesde, _FHasta: String; _SL: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Fecha + ' Between ' + QuotedStr(_FDesde + _PrimerHora) + ' And ' + QuotedStr(_FHasta + _UltimaHora) + ' )';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._EstadoDePackingID + ' in (';
    for I := 0 to _SL.count - 1 do
      Result := Result + _SL[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking, TPackingDM.CreateAll(False, WhereString, False, OrderBy ));
end;

constructor TPackingList.CreateByNumeroDesdeNumeroHasta(_NDesde, _NHasta : String; _Descendente: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Numero + ' between ' + QuotedStr( _NDesde ) + ' and ' + QuotedStr(_NHasta) + ')';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, false, OrderBy ));
end;

constructor TPackingList.CreateByNumeroDesdeNumeroHastaAndEstados(_NDesde, _NHasta: String; _SL: TStringList; _Descendente: Boolean);
  Function WhereString: String;
  var
    I: Integer;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._Numero + ' Between ' + _NDesde + ' And ' + _NHasta + ' )';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._EstadoDePackingID + ' in (';
    for I := 0 to _SL.count - 1 do
      Result := Result + _SL[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
  Function OrderBy : String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Fecha;
    if _Descendente then
      Result := Result + ' desc';
  end;
begin
  inherited Create(TPacking, TPackingDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TPackingList.CreateByRemito(_R: TRemito);
  Function WhereString: String;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._RemitoID + '=' + IntToStr(_R.ID) + ')';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, false ));
end;

constructor TPackingList.CreateByRemitoAndEstados(_R: TRemito; _SL: TStringList);
  Function WhereString: String;
  var
    I : Integer;
  begin
    Result := '(' + TPackingDM.TableName + '.' + TPackingDM._RemitoID + '=' + IntToStr(_R.ID) + ')';
    Result := Result + ' and ( ' + TPackingDM.TableName + '.' + TPackingDM._EstadoDePackingID + ' in (';
    for I := 0 to _SL.count - 1 do
      Result := Result + _SL[I] + ' , ';
    Result := Result + '-1 ) )';
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, False ));
end;

constructor TPackingList.CreateByUltimoNumero;
  Function OrderByString: String;
  begin
    Result := TPackingDM.TableName + '.' + TPackingDM._Numero + ' desc';
  end;
begin
  inherited Create( TPacking, TPackingDM.CreateTop( 1, '', OrderByString ) );
end;

function TPackingList.CreateNewObject: TPDObject;
begin
  result := TPacking.Create;
end;

constructor TPackingList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPacking,TPackingDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TPackingItem }
constructor TPackingItem.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TPackingItemDM);
  FormatoDeEtiquetaID := NullID;
  FCantidad  := null;
  FItemNro   := null;
  FPesoBruto := null;
  FPesoNeto  := null;
  FVolumen   := null;
end;

class function TPackingItem.Etiqueta(_PI: TPackingItem; _Impresora : TFormatoDeEtiquetaImpresora ;_Imprimir: Boolean): Boolean;
var
  Foto                  : String;
  frxReport             : TfrxReport;
  frxDBDtstReporte      : TfrxDBDataset;
  ClntDtStReporte       : TClientDataSet;
  EstaFacturado         : Boolean;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte          := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile( _PI.FormatoDeEtiqueta.CamposDeEtiqueta );
    ClntDtStReporte.Open;
    frxDBDtstReporte         := TfrxDBDataset.Create(nil);
    frxDBDtstReporte.Name    := 'frxDBDtstReporte';
    frxDBDtstReporte.DataSet := ClntDtStReporte;
    frxDBDtstReporte.Open;
    frxReport                := TfrxReport.Create(nil);
    frxReport.LoadFromFile( _PI.FormatoDeEtiqueta.PlantillaDeEtiqueta, True );
    frxReport.DataSets.Add(frxDBDtstReporte);
    frxReport.Report.DataSets.Add(frxDBDtstReporte);
  end;

  Procedure CargarDatos;
  begin
    ClntDtStReporte.EmptyDataSet;
    ClntDtStReporte.Append;

    ClntDtStReporte.FieldByName('ID').Value                      := _PI.ID;
    ClntDtStReporte.FieldByName('Item').Value                    := _PI.ItemNro;
    ClntDtStReporte.FieldByName('CantidadDeCajas').Value         := _PI.Packing.Items.Count;

    // datos de apholos
    ClntDtStReporte.FieldByName('NombreApholos').AsString       := Aplicacion.Empresa.Descripcion;
    ClntDtStReporte.FieldByName('CUITApholos').AsString         := Aplicacion.Empresa.CUIT;
    ClntDtStReporte.FieldByName('DireccionApholos').AsString    := Aplicacion.Empresa.Domicilio;
    ClntDtStReporte.FieldByName('CodigoPostalApholos').AsString := Aplicacion.Empresa.CodigoPostal;
    ClntDtStReporte.FieldByName('ApholosLocalidad').AsString    := Aplicacion.Empresa.Localidad.DescripcionConProvinciaYPais;

    if (_PI.PedidoDeVentaItem.PedidoDeVenta.Cliente.Codigo = Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) and (_PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribecaID <> NullID) then
      begin
        ClntDtStReporte.FieldByName('CodigoEmpresa').AsString        := _PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.Codigo;
        ClntDtStReporte.FieldByName('NombreEmpresa').AsString        := _PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.Descripcion;
        ClntDtStReporte.FieldByName('CUITEmpresa').AsString          := _PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.CUIT;
        ClntDtStReporte.FieldByName('DireccionEmpresa').AsString     := _PI.Packing.Deposito.Domicilio;
        ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString  := _PI.Packing.Deposito.CodigoPostal;
        ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString     := _PI.Packing.Deposito.Localidad.DescripcionConProvinciaYPais;
        ClntDtStReporte.FieldByName('IDImpositivo').AsString         := _PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.CodigoIDImpositivoExterior;
        ClntDtStReporte.FieldByName('IDImpositivoNro').AsString      := _PI.PedidoDeVentaItem.PedidoDeVenta.ClienteTribeca.IDImpositivoExterior;
      end
    else
      begin
        ClntDtStReporte.FieldByName('CodigoEmpresa').AsString        := _PI.Packing.Cliente.Codigo;
        ClntDtStReporte.FieldByName('NombreEmpresa').AsString        := _PI.Packing.Cliente.Descripcion;
        ClntDtStReporte.FieldByName('CUITEmpresa').AsString          := _PI.Packing.Cliente.CUIT;
        ClntDtStReporte.FieldByName('DireccionEmpresa').AsString     := _PI.Packing.Deposito.Domicilio;
        ClntDtStReporte.FieldByName('CodigoPostalEmpresa').AsString  := _PI.Packing.Deposito.CodigoPostal;
        ClntDtStReporte.FieldByName('EmpresaLocalidad').AsString     := _PI.Packing.Deposito.Localidad.DescripcionConProvinciaYPais;
        ClntDtStReporte.FieldByName('IDImpositivo').AsString         := _PI.Packing.Cliente.CodigoIDImpositivoExterior;
        ClntDtStReporte.FieldByName('IDImpositivoNro').AsString      := _PI.Packing.Cliente.IDImpositivoExterior;
      end;

    ClntDtStReporte.FieldByName('ProductoCodigo').AsString       := _PI.PedidoDeVentaItem.Producto.codigo;
    ClntDtStReporte.FieldByName('Descripcion').AsString          := _PI.PedidoDeVentaItem.Producto.Fabricado.DescripcionParaExportacion;
    ClntDtStReporte.FieldByName('OrdenDeCompra').AsString        := _PI.PedidoDeVentaItem.PedidoDeVenta.NroOrdenDeCompraCliente;
    ClntDtStReporte.FieldByName('UnidadDeMedida').AsString       := _PI.PedidoDeVentaItem.Producto.Fabricado.UnidadDeMedida.Codigo;
    ClntDtStReporte.FieldByName('PesoNeto').AsString             := _PI.PesoNeto;
    ClntDtStReporte.FieldByName('PesoNetoDescripcion').AsString  := _PI.PesoNetoDescripcion;
    ClntDtStReporte.FieldByName('PesoBruto').AsString            := _PI.PesoBruto;
    ClntDtStReporte.FieldByName('PesoBrutoDescripcion').AsString := _PI.PesoBrutoDescripcion;
    ClntDtStReporte.FieldByName('PedidoItem').AsString           := IntToStr(_PI.PedidoDeVentaItem.CCPVNumero) + '/' + IntToStr(_PI.PedidoDeVentaItem.ItemNro);

    if (_PI.Packing.Remito.Facturas.Count > 0) then
      begin
        _PI.Packing.Remito.Facturas.First;
        ClntDtStReporte.FieldByName('Factura').AsString             := _PI.Packing.Remito.Facturas.Actual.NumeroFinal;
      end
    else
      ClntDtStReporte.FieldByName('Factura').AsString := _PI.Packing.Remito.NumeroDeFacturaTeamplace;

    ClntDtStReporte.Post;
  end;

  procedure DestroyComponentes;
  begin
    FreeAndNil(frxReport);
    FreeAndNil(frxDBDtstReporte);
    FreeAndNil(ClntDtStReporte);
  end;

begin
  Result := False;
  try
    Aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;

    EstaFacturado := (_PI.Packing.Remito.NumeroDeFacturaTeamplace  <> '');
    if Not EstaFacturado then
      Aplicacion.RaiseExceptionCreate('El Packing List no está facturado, no se pueden generar etiquetas');

    if _Imprimir then
      begin
        frxReport.Report.PrintOptions.Printer := _Impresora.ImpresoraCodigoDeBarra.DireccionDeRed;
        frxReport.PrintOptions.ShowDialog     := False;
        frxReport.ShowProgress                := True;
        frxReport.Report.PrintOptions.Copies  := 1;
        frxReport.PrepareReport;
        if not _PI.FormatoDeEtiqueta.EditarPorAdministrador then
          frxReport.Report.Print
        else
          frxReport.DesignReport;
      end
    else
      begin
        frxReport.Report.PrintOptions.Printer := _Impresora.ImpresoraCodigoDeBarra.DireccionDeRed;
        frxReport.PrintOptions.ShowDialog     := True;
        frxReport.ShowProgress                := True;
        if not _PI.FormatoDeEtiqueta.EditarPorAdministrador then
          frxReport.ShowReport
        else
          frxReport.DesignReport;
      end
  finally
    DestroyComponentes;
    Aplicacion.ColocarCursorNormal;
    Result := EstaFacturado;
  end;
end;

function TPackingItem.GetFormatoDeEtiqueta: TFormatoDeEtiqueta;
begin
  if not Assigned(FFormatoDeEtiqueta) then
    GetObject(TFormatoDeEtiqueta, FFormatoDeEtiqueta, FormatoDeEtiquetaID);
  Result := TFormatoDeEtiqueta(FFormatoDeEtiqueta);
end;

function TPackingItem.GetMateriaPrima: TMateriaPrima;
begin
  if not Assigned(FMateriaPrima) then
    GetObject(TMateriaPrima,FMateriaPrima,MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

function TPackingItem.GetPacking: TPacking;
begin
  if not Assigned(FPacking) then
    GetObject(TPacking,FPacking,PackingID);
  Result := TPacking(FPacking);
end;

function TPackingItem.GetPedidoDeVentaItem: TPedidoDeVentaItem;
begin
  if not assigned(FPedidoDeVentaItem) then
    GetObject(TPedidoDeVentaItem,FPedidoDeVentaItem,PedidoDeVentaItemID);
  Result := TPedidoDeVentaItem(FPedidoDeVentaItem);
end;

function TPackingItem.GetPesoBrutoDescripcion: String;
begin
  if (UnidadDeMedidaPesoID <> NullID)  then
    Result := FloatToStrF(PesoBruto,ffNumber, 10, 2) + ' ' + UnidadDeMedidaPeso.Codigo;
end;

function TPackingItem.GetPesoNetoDescripcion: String;
begin
  if (UnidadDeMedidaPesoID <> NullID)  then
    Result := FloatToStrF(PesoNeto,ffNumber, 10, 2) + ' ' + UnidadDeMedidaPeso.Codigo;
end;

function TPackingItem.Save: Boolean;
begin
  If (FormatoDeEtiquetaID = NullID) then
    FFormatoDeEtiquetaID := Aplicacion.FormatoEtiquetaGrandeExpoDefault.ID;
  Result := Inherited Save;
end;

procedure TPackingItem.SetFormatoDeEtiquetaID(const Value: TObjectID);
begin
  if (Value<>FFormatoDeEtiquetaID) and Assigned(FFormatoDeEtiqueta) then
    FreeAndNil(FFormatoDeEtiqueta);
  FFormatoDeEtiquetaID := Value;
end;

procedure TPackingItem.SetMateriaPrimaID(const Value: TObjectID);
begin
  if (Value<>FMateriaPrimaID) and Assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure TPackingItem.SetPackingID(const Value: TObjectID);
begin
  if (Value<>FPackingID) and Assigned(FPacking) then
    FreeAndNil(FPacking);
  FPackingID := Value;
end;

procedure TPackingItem.SetPedidoDeVentaItemID(const Value: TObjectID);
begin
  if (Value<>FPedidoDeVentaItemID) and Assigned(FPedidoDeVentaItem) then
    FreeAndNil(FPedidoDeVentaItem);
  FPedidoDeVentaItemID := Value;
end;


function TPackingItem.GetUnidadDeMedidaPeso : TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaPeso) then
    GetObject(TUnidadDeMedida,FUnidadDeMedidaPeso,UnidadDeMedidaPesoID);
  result := TUnidadDeMedida(FUnidadDeMedidaPeso);
end;

function TPackingItem.GetVolumen: TReal;
var
  Ancho, Alto, Largo : TReal;
begin
  if ( FVolumen = Null ) and ( MateriaPrimaID <> NullID) then
  begin
    Ancho := Aplicacion.MeasureService.ConvertirUnidadDeMedida(MateriaPrima.UnidadDeMedidaAnchoDeTira, Aplicacion.MeasureService.UnidadDeMedidaLongitudDefault ,MateriaPrima.AnchoDeTira);
    Alto  := Aplicacion.MeasureService.ConvertirUnidadDeMedida(MateriaPrima.UnidadDeMedidaEspesor    , Aplicacion.MeasureService.UnidadDeMedidaLongitudDefault ,MateriaPrima.Espesor);
    Largo := Aplicacion.MeasureService.ConvertirUnidadDeMedida(MateriaPrima.UnidadDeMedidaLongitud   , Aplicacion.MeasureService.UnidadDeMedidaLongitudDefault ,MateriaPrima.Longitud);
    // siempre en metros cubicos
    Fvolumen := (Ancho * Alto * Largo) ;
  end;
  Result := FVolumen;
end;

procedure TPackingItem.SetUnidadDeMedidaPesoID(Value : TObjectID);
begin
  if (Value<>FUnidadDeMedidaPesoID) and Assigned(FUnidadDeMedidaPeso) then
    FreeAndNil(FUnidadDeMedidaPeso);
  FUnidadDeMedidaPesoID := Value;
end;

 { TPackingItemDM }
class function TPackingItemDM.TableName : string;
begin
  result := 'PackingItems';
end;


class function TPackingItemDM.ID_FieldName : string;
begin
  result := 'PackingItemID';
end;


procedure TPackingItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TPackingItem(PDObject) do
    begin
      IDField[_PackingID]            := PackingID;
      IntegerField[_Cantidad]        := Cantidad;
      IntegerField[_ItemNro]         := ItemNro;
      FloatField[_PesoBruto]         := PesoBruto;
      FloatField[_PesoNeto]          := PesoNeto;
      IDField[_PedidoDeVentaItemID]  := PedidoDeVentaItemID;
      IDField[_UnidadDeMedidaPesoID] := UnidadDeMedidaPesoID;
      IDField[_MateriaPrimaID]       := MateriaPrimaID;
      IDField[_FormatoDeEtiquetaID]  := FormatoDeEtiquetaID;
    end;
end;


procedure TPackingItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TPackingItem(PDObject) do
    begin
      FPackingID            := IDField[_PackingID];
      FCantidad             := IntegerField[_Cantidad];
      FItemNro              := IntegerField[_ItemNro];
      FPesoBruto            := FloatField[_PesoBruto];
      FPesoNeto             := FloatField[_PesoNeto];
      FPedidoDeVentaItemID  := IDField[_PedidoDeVentaItemID];
      FUnidadDeMedidaPesoID := IDField[_UnidadDeMedidaPesoID];
      FMateriaPrimaID       := IDField[_MateriaPrimaID];
      FFormatoDeEtiquetaID  := IDField[_FormatoDeEtiquetaID];
    end;
end;

 { TPackingItemList }
function TPackingItemList.GetActual : TPackingItem;
begin
  result := TPackingItem(CurrentObject);
end;

constructor TPackingItemList.CreateByProducto(_P: TProducto);
  Function WhereString: String;
  begin
    Result := '(' + TPackingItemDM.TableName + '.' + TPackingItemDM._PedidoDeVentaItemID + ' in ( Select ' + TPedidoDeVentaItemDM.ID_FieldName + ' from ' +
              TPedidoDeVentaItemDM.TableName + ' where ' + TPedidoDeVentaItemDM._ProductoID + '=' + IntToStr(_P.ID) + '))'
  end;
  Function OrderByString: String;
  begin
    Result := TPackingItemDM.TableName + '.' + TPackingItemDM.ID_FieldName + ' desc';
  end;
begin
  inherited Create(TPackingItem, TPackingItemDM.CreateTop(1, WhereString, OrderByString ));
end;

constructor TPackingItemList.CreateByPacking(_P: TPacking);
  Function WhereString: String;
  begin
    Result := '(' + TPackingItemDM.TableName + '.' + TPackingItemDM._PackingID + '=' + IntToStr(_P.ID) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := TPackingItemDM.TableName + '.' + TPackingItemDM._ItemNro;
  end;
begin
  inherited Create(TPackingItem, TPackingItemDM.CreateAll(False, WhereString, False, OrderByString ));
end;

function TPackingItemList.CreateNewObject: TPDObject;
begin
  Result := TPackingItem.Create;
end;

constructor TPackingItemList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPackingItem,TPackingItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TRemitoEstadoDeMigracion }
constructor TRemitoEstadoDeMigracion.Create;
begin
  inherited;
  DMObject           := Aplicacion.DMPRovider.GetGlobalDM(TRemitoEstadoDeMigracionDM);
  FDetalleDeError    := null;
  FEstadoDeMigracion := null;
end;

function TRemitoEstadoDeMigracion.GetEmpresaDestino: TEmpresaDeSistema;
begin
  if not Assigned(FEmpresaDestino) then
    GetObject(TEmpresaDeSistema,FEmpresaDestino,EmpresaDestinoID);
  result := TEmpresaDeSistema(FEmpresaDestino);
end;

function TRemitoEstadoDeMigracion.GetRemito : TRemito;
begin
  if not assigned(FRemito) then
    GetObject(TRemito,FRemito,RemitoID);
  result := TRemito(FRemito);
end;

function TRemitoEstadoDeMigracion.GetUsuario: TUsuario;
begin
  if not Assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);
  result := TUsuario(FUsuario);
end;

procedure TRemitoEstadoDeMigracion.SetEmpresaDestinoID(const Value: TObjectID);
begin
  if (Value<>FEmpresaDestinoID) and Assigned(FEmpresaDestino) then
    FreeAndNil(FEmpresaDestino);
  FEmpresaDestinoID := Value;
end;

procedure TRemitoEstadoDeMigracion.SetRemitoID(Value : TObjectID);
begin
  if (Value<>FRemitoID) and Assigned(FRemito) then
    FreeAndNil(FRemito);
  FRemitoID := Value;

end;
 procedure TRemitoEstadoDeMigracion.SetUsuarioID(const Value: TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;

{ TRemitoEstadoDeMigracionDM }
class function TRemitoEstadoDeMigracionDM.TableName : string;
begin
  Result := 'RemitoEstadosDeMigracion';
end;

class function TRemitoEstadoDeMigracionDM.ID_FieldName : string;
begin
  Result := 'RemitoEstadoDeMigracionID';
end;

procedure TRemitoEstadoDeMigracionDM.PopulateFields(PDObject: TPDObject);
begin
  with TRemitoEstadoDeMigracion(PDObject) do
    begin
      StringField[_DetalleDeError]     := DetalleDeError;
      BooleanField[_EstadoDeMigracion] := EstadoDeMigracion;
      IDField[_RemitoID]               := RemitoID;
      IDField[_UsuarioID]              := UsuarioID;
      IDField[_EmpresaDestinoID]       := EmpresaDestinoID;
      DateTimeField[_FechaHora]        := FechaHora;
    end;
end;

procedure TRemitoEstadoDeMigracionDM.PopulateObject(PDObject: TPDObject);
begin
  with TRemitoEstadoDeMigracion(PDObject) do
    begin
      FDetalleDeError    := StringField[_DetalleDeError];
      FEstadoDeMigracion := BooleanField[_EstadoDeMigracion];
      FRemitoID          := IDField[_RemitoID];
      FUsuarioID         := IDField[_UsuarioID];
      FEmpresaDestinoID  := IDField[_EmpresaDestinoID];
      FFechaHora         := DateTimeField[_FechaHora];
    end;
end;

 { TRemitoEstadoDeMigracionList }
function TRemitoEstadoDeMigracionList.GetActual : TRemitoEstadoDeMigracion;
begin
  Result := TRemitoEstadoDeMigracion(CurrentObject);
end;

constructor TRemitoEstadoDeMigracionList.CreateByRemito(_R: TRemito);
  Function WhereString: String;
  begin
    Result := '( ' + TRemitoEstadoDeMigracionDM._RemitoID + ' = ' + IntToStr(_R.ID) + ' )' ;
  end;
begin
  inherited Create(TRemitoEstadoDeMigracion,TRemitoEstadoDeMigracionDM.CreateAll(False, WhereString, false ));
end;

function TRemitoEstadoDeMigracionList.CreateNewObject: TPDObject;
begin
  result := TRemitoEstadoDeMigracion.Create;
end;

constructor TRemitoEstadoDeMigracionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TRemitoEstadoDeMigracion,TRemitoEstadoDeMigracionDM.CreateAll(False, WhereString, false, OrderByString ));
end;


 { TPedidoDeVentaEstadoDeMigracion }
constructor TPedidoDeVentaEstadoDeMigracion.Create;
begin
  inherited;
  DMObject           := Aplicacion.DMPRovider.GetGlobalDM(TPedidoDeVentaEstadoDeMigracionDM);
  FDetalleDeError    := null;
  FEstadoDeMigracion := null;
end;

function TPedidoDeVentaEstadoDeMigracion.GetEmpresaDestino: TEmpresaDeSistema;
begin
  if not Assigned(FEmpresaDestino) then
    GetObject(TEmpresaDeSistema,FEmpresaDestino,EmpresaDestinoID);
  result := TEmpresaDeSistema(FEmpresaDestino);
end;

function TPedidoDeVentaEstadoDeMigracion.GetPedidoDeVenta : TPedidoDeVenta;
begin
  if not assigned(FPedidoDeVenta) then
    GetObject(TPedidoDeVenta,FPedidoDeVenta,PedidoDeVentaID);
  result := TPedidoDeVenta(FPedidoDeVenta);
end;

function TPedidoDeVentaEstadoDeMigracion.GetUsuario: TUsuario;
begin
  if not Assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);
  result := TUsuario(FUsuario);
end;

procedure TPedidoDeVentaEstadoDeMigracion.SetEmpresaDestinoID(const Value: TObjectID);
begin
  if (Value<>FEmpresaDestinoID) and Assigned(FEmpresaDestino) then
    FreeAndNil(FEmpresaDestino);
  FEmpresaDestinoID := Value;
end;

procedure TPedidoDeVentaEstadoDeMigracion.SetPedidoDeVentaID(Value : TObjectID);
begin
  if (Value<>FPedidoDeVentaID) and Assigned(FPedidoDeVenta) then
    FreeAndNil(FPedidoDeVenta);
  FPedidoDeVentaID := Value;
end;

procedure TPedidoDeVentaEstadoDeMigracion.SetUsuarioID(const Value: TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;

{ TPedidoDeVentaDeMigracionDM }
class function TPedidoDeVentaEstadoDeMigracionDM.TableName : string;
begin
  Result := 'PedidoDeVentaEstadosDeMigracion';
end;

class function TPedidoDeVentaEstadoDeMigracionDM.ID_FieldName : string;
begin
  Result := 'PedidoDeVentaEstadoDeMigracionID';
end;

procedure TPedidoDeVentaEstadoDeMigracionDM.PopulateFields(PDObject: TPDObject);
begin
  with TPedidoDeVentaEstadoDeMigracion(PDObject) do
    begin
      StringField[_DetalleDeError]     := DetalleDeError;
      BooleanField[_EstadoDeMigracion] := EstadoDeMigracion;
      IDField[_PedidoDeVentaID]        := PedidoDeVentaID;
      IDField[_UsuarioID]              := UsuarioID;
      IDField[_EmpresaDestinoID]       := EmpresaDestinoID;
      DateTimeField[_FechaHora]        := FechaHora;
    end;
end;

procedure TPedidoDeVentaEstadoDeMigracionDM.PopulateObject(PDObject: TPDObject);
begin
  with TPedidoDeVentaEstadoDeMigracion(PDObject) do
    begin
      FDetalleDeError    := StringField[_DetalleDeError];
      FEstadoDeMigracion := BooleanField[_EstadoDeMigracion];
      FPedidoDeVentaID   := IDField[_PedidoDeVentaID];
      FUsuarioID         := IDField[_UsuarioID];
      FEmpresaDestinoID  := IDField[_EmpresaDestinoID];
      FFechaHora         := DateTimeField[_FechaHora];
    end;
end;

 { TPedidoDeVentaEstadoDeMigracionList }
function TPedidoDeVentaEstadoDeMigracionList.GetActual : TPedidoDeVentaEstadoDeMigracion;
begin
  Result := TPedidoDeVentaEstadoDeMigracion(CurrentObject);
end;

constructor TPedidoDeVentaEstadoDeMigracionList.CreateByPedidoDeVenta(_PV: TPedidoDeVenta);
  Function WhereString: String;
  begin
    Result := '( ' + TPedidoDeVentaEstadoDeMigracionDM._PedidoDeVentaID + ' = ' + IntToStr(_PV.ID) + ' )' ;
  end;
begin
  inherited Create(TPedidoDeVentaEstadoDeMigracion, TPedidoDeVentaEstadoDeMigracionDM.CreateAll( False, WhereString, False ));
end;

function TPedidoDeVentaEstadoDeMigracionList.CreateNewObject: TPDObject;
begin
  result := TPedidoDeVentaEstadoDeMigracion.Create;
end;

constructor TPedidoDeVentaEstadoDeMigracionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPedidoDeVentaEstadoDeMigracion, TPedidoDeVentaEstadoDeMigracionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TDistribucionDeGasto }
constructor TDistribucionDeGasto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TDistribucionDeGastoDM);
  SaveSQLLog := True;
  FAnio := null;
  FMes := null;
end;

function TDistribucionDeGasto.GetUsuario : TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario,FUsuario,UsuarioID);

  result := TUsuario(FUsuario);
end;

procedure TDistribucionDeGasto.SetUsuarioID(Value : TObjectID);
begin
  if (Value<>FUsuarioID) and Assigned(FUsuario) then
    FreeAndNil(FUsuario);

  FUsuarioID := Value;

end;
 { TDistribucionDeGastoDM }
class function TDistribucionDeGastoDM.TableName : string;
begin
  result := 'DistribucionesDeGastos';
end;


class function TDistribucionDeGastoDM.ID_FieldName : string;
begin
  result := 'DistribucionDeGastoID';
end;

procedure TDistribucionDeGastoDM.PopulateFields(PDObject: TPDObject);
begin
  with TDistribucionDeGasto(PDObject) do
    begin
      IntegerField[_Anio]       := Anio;
      StringField[_Descripcion] := Descripcion;
      IntegerField[_Mes]        := Mes;
      IDField[_UsuarioID]       := UsuarioID;
    end;
end;

procedure TDistribucionDeGastoDM.PopulateObject(PDObject: TPDObject);
begin
  with TDistribucionDeGasto(PDObject) do
    begin
      FAnio       := IntegerField[_Anio];
      Descripcion := StringField[_Descripcion];
      FMes        := IntegerField[_Mes];
      FUsuarioID  := IDField[_UsuarioID];
    end;
end;

 { TDistribucionDeGastoList }
function TDistribucionDeGastoList.GetActual : TDistribucionDeGasto;
begin
  result := TDistribucionDeGasto(CurrentObject);
end;

function TDistribucionDeGastoList.CreateNewObject: TPDObject;
begin
  result := TDistribucionDeGasto.Create;
end;

constructor TDistribucionDeGastoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TDistribucionDeGasto,TDistribucionDeGastoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

end.
