unit uClasesABM;

interface

uses
  _uFramework, System.Classes, VCL.Controls, VCL.Menus, System.Math, VCL.dialogs, printers, DB, _uConnectionObject, ExtCtrls, WinApi.windows, Vcl.Graphics,
  Messages, Vcl.Imaging.jpeg, Vcl.Forms, _uSQLDBXForID_DMObject, DBClient,_uSQLDBX_DMObject,  Registry, System.StrUtils,
  System.SysUtils, Uni;

const
  _PrimerHora = ' 00:00:00';
  _UltimaHora = ' 23:59:59.99';

type
  TUsuario = class;
  TMenuAplicacionList = class;
  TParametro = class;
  TParametroList = class;
  TResource = class;
  TResourceList = class;
  TResourceLanguage = class;
  TResourceLanguageList = class;
  TResourceString = class;
  TResourceStringList = class;
  TAbstractEmpresa = class;
  TUnidadDeMedida = class;
  TDeposito = class;
  TProvincia = class;
  TPais = class;
  TPaisList = class;
  TProvinciaList = class;
  TPerfil = class;
  TMenuDePerfilList = class;
  TTipoDeDocumento = class;
  TMonedaCotizacionList = class;
  TVendedor = class;
  TGrupoDeVendedorItemList = class;
  TGrupoDeCuentasContables = class;
  TEmpresa = Class;
  TTelefonoDeEmpresa = Class;
  TJurisdiccionIngresosBrutos = Class;
  TTipoDeCosto = Class;
  TProceso = Class;
  TProcesoEspecificacion = Class;
  TZonaDeCliente = Class;
  TCategoriaDeMateriaPrima = Class;
  TTerminacionProcesoPosible = Class;
  TTerminacionTipoDeCosto = Class;
  TTerminacionProcesoPosibleTipodeCosto = Class;
  TTerminacionProcesoPosibleList = Class;
  TTerminacionTipoDeCostoList = Class;
  TTerminacionProcesoPosibleTipodeCostoList = Class;
  TArticulo = Class;
  TMateriaPrima = Class;
  TCategoriaDeCliente = Class;
  TCategoriaDeProveedor = Class;
  TCategoriaDeGanancias = Class;
  TCondicionDeVenta = Class;
  TCondiciondeIVA = Class;
  TRankingCrediticio = Class;
  TMoneda = Class;
  TMarcaAsociadaList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleCostoList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList  = Class;
  TFamiliaDeArticulo = Class;
  TMaterial = Class;
  TOrigenComercial = Class;
  TRubroDeArticulo = Class;
  TArticuloInsumoList = Class;
  TArticuloMetodoDeCorteList = Class;
  TArticuloMetodoDeCorte = Class;
  TArticuloComponenteList = Class;
  TArticuloCostoList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleList = Class;
  TCategoriaDeTerminacionesTerminacionPosible = Class;
  TEmpresaAsociadaList = Class;
  TTipoDeComponente = Class;
  TCategoriaDeGananciasItemList = Class;
  TEstadoDeRemito = Class;
  TProductoDetalle = Class;
  TProducto = Class;
  TServicio = Class;
  TLicenciatarioList = Class;
  TLicenciatario = Class;
  TCliente = Class;
  TFabricado = Class;
  TTmpFabricado = Class;
  TTipoDeFormulario = Class;
  TFormulario = Class;
  TDepositoList = Class;
  TSector = Class;
  TSectorList = Class;
  TTipoDeFormularioList = Class;
  TProcesoList = Class;
  TProcesoEspecificacionList = Class;
  TCunioArticuloPosibleList = Class;
  TEstadoDeBanco = Class;
  TEstadoDeStock = Class;
  TMatrizArticuloAsociadoList = Class;
  TMarcaAsociada = Class;
  TMarca = Class;
  TLocalidad = Class;
  TLocalidadList = Class;
  TCunio = Class;
  TTerminacion = Class;
  TCategoriaDeTerminacionesPosiblesList = Class;
  TCategoriaDeTerminacionesPosibles = Class;
  TEstadoDeAjusteDeStock = Class;
  TEstadoDeAjusteDeStockList = Class;
  TEstadoDeCierreDeStock = Class;
  TEstadoDeCierreDeStockList = Class;
  TMenuAplicacion = Class;
  TMenuDePerfil = Class;
  TEstadoDePedidoDeVenta = Class;
  TEstadoDePresupuestoDeVenta = Class;
  TInsumoCunioList = Class;
  TOperacionPermitidaDeUsuario = Class;
  TTipoDeUsuario = Class;
  TTipoDeUsuarioOperacionPermitida = Class;
  TTipoDeUsuarioOperacionPermitidaList = Class;
  TProductoList = Class;
  TFormularioObservacionList = Class;
  TFormularioObservacion = Class;
  TTipoDeFormularioConceptoPosibleList = Class;
  TTipoDeformularioConceptoPosible = Class;
  TGlobalIDList = Class;
  TContactoDeEmpresaList = Class;
  TTelefonoDeEmpresaList = Class;
  TActividad = Class;
  TGrupoDeVendedor = Class;
  TContactoDeEmpresa = Class;
  TTerminacionInsumoList = Class;
  TCategoriaDeTerminacionesTerminacionPosibleInsumoList = Class;
  TArticuloTraduccionList = Class;
  TTerminacionTraduccionList = Class;
  TTraduccionList = Class;
  TDescriptible = Class;
  TProcesoTraduccionList = Class;
  TKolorTraduccionList = Class;
  TTipoDeEmail = Class;
  TCondicionDeCompra = Class;
  TCondiciondecompraItemList = Class;
  TFabricadoProcesoList = Class;
  TFabricadoComponenteList = Class;
  TFabricadoProcesoEspecificacionList = Class;
  TTmpFabricadoProcesoList = Class;
  TTmpFabricadoComponenteList = Class;
  TTmpFabricadoProcesoEspecificacionList = Class;
  TTerminacionComponenteTerminacionDefaultList = Class;
  TGrupoDeVendedorComisionList = Class;
  TGrupoDeVendedorComision = class;
  TGrupoDeVendedorItemRepartoList = Class;
  TCondicionDeIngresosBrutos = Class;
  TServicioTraduccionList = Class;
  TMatrizComponenteList = Class;
//  TDesarrolloEmpresaList = Class;
  TDesarrolloArticuloPosibleList = Class;
  TDescuentoPorCantidadVendidaItemList = Class;
  TCobrador = Class;
  TTipoDePedidoDeVenta = Class;
  TTipoDePresupuestoDeVenta = Class;
  TArticuloComponenteDesplegadoList = Class;
  TTmpFabricadoComponenteDesplegadoList = Class;
  TTmpFabricadoComponenteDesplegado = Class;
  TArticuloList = Class;
  TCargoDeEmpresaItemList = Class;
  TCargoDeEmpresa = Class;
  TPaletaDeColor = Class;
  TTipoDeComponenteList = Class;
  TCentroDeCosto = Class;
  TTipoDeClaveFiscal = Class;
  TTipoDeComponenteTraduccionList = Class;
  TRubroDeArticuloTraduccionList = Class;
  TRecursoList = Class;
  TResponsableTecnico = Class;
  TCalibreDeControlPeriodoDeCalibracionList = Class;
  TCalibreDeControlResponsableTecnicoList = Class;
  TCalibreDeControlPeriodoDeCalibracionNovedadList = Class;
  TComentarioList = Class;
  TFabricadoList = Class;
  TListaDePrecio = Class;
  TArticuloPrecioList = Class;
  TTerminacionPrecioList = Class;
  TCunioPrecioList  = Class;
  TDesarrolloPrecioList  = Class;
  TProcesoPrecioList  = Class;
  TKolorPrecioList  = Class;
  TServicioPrecioList  = Class;
  TTipoDeRecurso  = Class;
  TCunioArticuloPosibleHerramental = Class;
  TCunioArticuloPosibleHerramentalList = Class;
  TarticuloComponenteOpcionalList  = Class;
  TTipoDeHerramental = Class;
  TTipoDeUnidadDeMedida = Class;
  TColorDeHojaDeRuta = Class;
  TTipoDeFormularioAccionStockList = Class;
  TTipoDeFormularioEmailFirmaList = Class;
  TTipoDeFormularioEmailCuerpoList = Class;
  TTipoDeFormularioEmailEncabezadoList = Class;
  TTipoDeFormularioEmailItemList = Class;
  TProductoRuteoDefaultList = Class;
  TPasoDeFabricacion = Class;
  TArticuloPasodeFabricacionList = Class;
  TPasoDeFabricacionRecursoList = Class;
  TRecurso = Class;
  TNivelDeServicioDeCliente = Class;
  TFormula = CLass;
  TCanalDeDistribucion = CLass;
  TCentroDeFacturacionCAIList = CLass;
  TCentroDeFacturacion = Class;
  TOrganizacionDeMonitorList = Class;
  TOrganizacionDeMonitorEstadoPermitidoList = Class;
  TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList = Class;
  TImpresoraDocumento = Class;
  TArticuloImpuestoList = Class;
  TImpuestoConcepto   = Class;
  TImpuestoConceptoList  = Class;
  TEmpresaImpuestoList  = Class;
  TPadron = class;
  TImpuestoCondicionList = class;
  TPadronItemList = Class;
  TPadronPublicacionList = Class;
  TPadronPublicacion = Class;
  TPadronCampoList = Class;
  TServicioImpuestoList = Class;
  TPeriodoContableList = Class;
  TTipodeAsiento = Class;
  TPasoDeFabricacionMotivoDeAtrasoList = Class;
  TOperacion = Class;
  TPasoDeFabricacionOperacionList = class;
  TPasoDeFabricacionOperacion = Class;
  TProductoOperacionList = Class;
  TRecursoHerramentalList = Class;
  TImpuestoConceptoPadronList = Class;
  TEmpresaList = Class;
  TArticuloCunioDefaultList = Class;
  TCunioPrecioDeListaList = Class;
  TGrupoDeTerminacionEspecial = Class;
  TGrupoDeTerminacionRecargoMaterialList = Class;
  TComplejidadDeDesarrollo = Class;
  TComplejidadDeDesarrolloPrecioList = Class;
  TTipoDePrecioCunio  = Class;
  TTerminacionCuentaContabilidadDeCostosList = Class;
  TSectorCuentaContableList  = CLass;
  TCategoriaDeMateriaPrimaMaterialList = Class;
  TCondicionDeVentaDetalleList = Class;
  TCondicionDeVentaDetalle = Class;
  TFabricadoDatoFisico = Class;
  TFabricadoDatoFisicoList = Class;
  TFormatoDeDireccion = Class;
  TCuentaContable = Class;


{ ///////////////  Clases Extra - NoPersistentes ///////////////// }
TTraductor = class
private
  FFatherObject: TDescriptible;
  FActiveLanguageID: TObjectID;
  FActiveLanguage: TPDObject;
  FTraducciones: TTraduccionList;
  procedure SetActiveLanguageID(const Value: TObjectID);
  function GetActiveLanguage: TResourceLanguage;
  function GetDescripcionTraducida: TString;
public
  constructor Create(_ActiveLanguage: TResourceLanguage; _FatherObject: TDescriptible; _Traducciones: TTraduccionList); overload;
  destructor Destroy; override;
  property ActiveLanguageID: TObjectID read fActiveLanguageID write SetActiveLanguageID;
  property ActiveLanguage: TResourceLanguage read GetActiveLanguage;
  property DescripcionTraducida: TString read GetDescripcionTraducida;

end;

{ ///////////////  Clases Persistentes ///////////////// }
TDescriptible = class(TPDObject)
  private
    FTraductor      : TTraductor;
    FDescripcion    : TString;
    FSoloMayusculas : Boolean;
    FEsInactivo     : TBoolean;
    function GetTraductor: TTraductor;
    function GetDescripcion: TString; virtual;
    procedure SetDescripcion(const Value: TString); virtual;
    property Solomayusculas: Boolean read fSoloMayusculas write fSoloMayusculas;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure CrearTraductor(_ActiveLanguage: TResourceLanguage; _Traducciones: TTraduccionList);
    procedure EliminarTraductor;
    property Descripcion: TString read GetDescripcion write SetDescripcion;
    property Traductor  : TTraductor read GetTraductor;
    property EsInactivo : TBoolean   read FEsInactivo Write FEsInactivo;
end;

TDescriptibleList = class(TPDList)
  public
    constructor Create(PDClass: TPDClass; DMObject: TDMObject); overload;
    constructor CreateByID(_ID: TObjectID; _SoloActivos: Boolean = False); virtual;
    constructor CreateByDescripcion(_Descripcion: String; _DescripcionPropertyName: String; _SoloActivos: Boolean = False); virtual;
    constructor CreateByDescripcionLike(_Like: String; _DescripcionPropertyName: String; _SoloActivos: Boolean = False; _StartRow : Integer = 0 ; _Rows : Integer = 0   ); virtual;



    constructor CreateByCondition(_Condition: String; _SoloActivos: Boolean = False); virtual;
    constructor CreateByPropertyLike(_Like, _PropertyName: String; _SoloActivos: Boolean= False); virtual;
    constructor CreateByDescripcionYIDDiferente(_D: string; _ID: TObjectID; _DescripcionPropertyName: String; _SoloActivos: Boolean);
    Function FindDescripction(_Descripcion: String): Boolean; virtual;
end;

TDescriptibleAbreviadoListClass = class of TDescriptibleAbreviadoList;

TDescriptibleAbreviado = class(TDescriptible)
private
  FCodigo: TString;
  FValidarDuplicados: Boolean;
  fLargoCodigo: TEntero;
  FRellenarCodigo: TBoolean;
  function GetCodigoRelleno( _valor: string ): String;
  function GetLargoCodigo: TEntero;
protected
  procedure SetCodigo(const Value: TString); Virtual;
  function GetCodigo: TString; virtual;
  procedure Validate(LC: TDescriptibleAbreviadoListClass);
  function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; virtual; abstract;
  property ValidarDuplicados: Boolean read FValidarDuplicados write FValidarDuplicados;
public
  constructor Create; override;
  function Save: Boolean; Override;
  Procedure GuardarEnSifab(_CodigoRotulo: Integer;_CodigoTipoCaracteristica: Integer; _CodigoEmpresa: Integer;_Descripcion: string);
  procedure ValidateOnInsert; override;
  procedure ValidateOnUpdate; override;
  property Codigo: TString read GetCodigo write SetCodigo;
  Property LargoCodigo : TEntero read GetLargoCodigo write fLargoCodigo;
  property RellenarCodigo : TBoolean read FRellenarCodigo write FRellenarCodigo;
end;

TDescriptibleAbreviadoList = class(TDescriptibleList)
protected
  function GetWhereByCodigoYIDDiferente(_cod: string; _ID: TObjectID): string; virtual;
  function GetWhereByInicialCodigo(_I: string): string;
public
  constructor CreateByCodigoYIdDiferente(_Cod: string; _ID: TObjectID; _SoloActivos: Boolean = False); virtual;
  constructor CreateByCodigo(_Cod: String; _SoloActivos: Boolean = False); virtual;
  constructor CreateByCodigoLike(_Cod: String; _SoloActivos: Boolean = False); virtual;
  function FindCodigo(_Codigo: String): Boolean; virtual;
end;

TTraduccion = class(TDescriptible)
  private
    FresourceLanguageID: TObjectID;
    FResourceLanguage: TPDObject;
    function getResourceLanguage: TResourceLanguage;
    procedure SetresourceLanguageID(const Value: TObjectID);
  public
    property ResourceLanguageID: TObjectID read FresourceLanguageID write  SetresourceLanguageID;
    property ResourceLanguage: TResourceLanguage read getResourceLanguage;
end;

TTraduccionList = class(TDescriptibleList)
  private
    function GetActual: TTraduccion;
  public
    function Find(_RL: TResourceLanguage): Boolean; overload;
    property Actual: TTraduccion read GetActual;
end;

// -------------------------------------------------------------------

TDeposito = class(TDescriptible)
  private
    FEmpresaID: TObjectID;
    FEmpresa: TPDObject;
    FDomicilio: TString;
    FLocalidadID: TObjectID;
    FLocalidad: TPDObject;
    FHorarioDeEntrega: TString;
    FHorarioDeRetiro: TString;
    FCodigoPostal: TString;
    FSePuedeBorrarDireccionLegal: Boolean;
    FCalle: TString;
    FDepartamento: TString;
    FPiso: TString;
    FNumeroCalle: TString;
    FesDepositoProductosTerminados: Boolean;
    FEsDepositoMateriaPrima: Boolean;
    FEsDepositoSemiElaborado: Boolean;
    FEsDepositoVirtual: Boolean;
    FSector: TPDObject;
    FSectorID: TObjectID;
    FFormatoDeDireccionID: TObjectID;
    FFormatoDeDireccion: TPDObject;
    FObservacion: TString;
    FCodigoSifab: TString;
    FCodigoInternoSifab: TEntero;
    FCodigoInternoDomicilioSifab: String;
    FIDTeamplace: TEntero;
    FEdificio: TString;
    function GetLocalidad: TLocalidad;
    function Getempresa: TEmpresa;
    function GetDescripcionConEmpresa: string;
    function GetCodigoPostal: TString;
    function GetDireccionCompleta: TString;
    procedure SetDomicilio(const Value: TString);
    procedure SetempresaID(const Value: TObjectID);
    procedure SetLocalidadID(const Value: TObjectID);
    procedure SetCalle(const Value: TString);
    procedure SetDepartamento(const Value: TString);
    procedure SetPiso(const Value: TString);
    function GetDomicilio: TString;
    function GetCodigoLugarDeEnvioSifab: String;
    function GetCodigoDomicilioSifab: String;
    function GetEsDireccionEnIngles: TBoolean;
    function GetCodigoInternoSifab: TEntero;
    procedure SetSectorID(const Value: TObjectID);
    function GetSector: TSector;
    procedure SetFormatoDeDireccionID(const Value: TObjectID);
    function GetFormatoDeDireccion: TFormatoDeDireccion;
    function GetIDTeamplace: TEntero;
    procedure SetEdificio(const Value: TString);
  public
    constructor Create; override;
    procedure Delete; override;
    property SectorID: TObjectID read FSectorID write SetSectorID;
    property Sector: TSector read GetSector;
    property EmpresaID: TObjectID read FempresaID write SetempresaID;
    property Empresa: TEmpresa read Getempresa;
    property EsDireccionEnIngles: TBoolean read GetEsDireccionEnIngles;
    property Domicilio: TString read GetDomicilio;
    property Calle: TString read FCalle write SetCalle;
    property NumeroCalle: TString read FNumeroCalle write FNumeroCalle;
    property Piso: TString read FPiso write SetPiso;
    property Departamento: TString read FDepartamento write SetDepartamento;
    property Edificio: TString read FEdificio write SetEdificio;
    property LocalidadID: TObjectID read FLocalidadID write SetLocalidadID;
    property Localidad: TLocalidad Read GetLocalidad;
    property CodigoPostal: TString Read GetCodigoPostal;
    property Observacion: TString read FObservacion write FObservacion;
    property DireccionCompleta: TString read GetDireccionCompleta;
    property HorarioDeEntrega : TString read FHorarioDeEntrega Write FHorarioDeEntrega;
    property HorarioDeRetiro  : TString read FHorarioDeRetiro Write FHorarioDeRetiro;
    property DescripcionConEmpresa: string read GetDescripcionConEmpresa;
    property SePuedeBorrarDireccionLegal : Boolean read FsePuedeBorrarDireccionLegal write FsePuedeBorrarDireccionLegal;

    Property EsDepositoProductosTerminados: Boolean Read FesDepositoProductosTerminados write FesDepositoProductosTerminados;
    Property EsDepositoMateriaPrima: Boolean Read FesDepositoMateriaPrima write FesDepositoMateriaPrima;
    Property EsDepositoSemiElaborado: Boolean Read FEsDepositoSemiElaborado write FEsDepositoSemiElaborado;
    Property EsDepositoVirtual: Boolean Read FEsDepositoVirtual write FEsDepositoVirtual;

    Property CodigoInternoSifab: TEntero Read GetCodigoInternoSifab;
    property CodigoSifab: TString Read FCodigoSifab Write FCodigoSifab;
    Property CodigoLugarDeEnvioSifab: String Read GetCodigoLugarDeEnvioSifab;
    Property CodigoDomicilioSifab: String Read GetCodigoDomicilioSifab;

    Property FormatoDeDireccionID : TObjectID read FFormatoDeDireccionID write SetFormatoDeDireccionID;
    Property FormatoDeDireccion   : TFormatoDeDireccion read GetFormatoDeDireccion;

    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_D : TDeposito) : Boolean;
end;

TDepositoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _EsInactivo                    = 'EsInactivo';
      _Descripcion                   = 'Deposito';
      _EmpresaID                     = 'EmpresaID';
      _LocalidadID                   = 'LocalidadID';
      _Calle                         = 'Calle';
      _NumeroCalle                   = 'NumeroCalleS';
      _Piso                          = 'Piso';
      _Departamento                  = 'Departamento';
      _Edificio                      = 'Edificio';
      _HorarioDeEntrega              = 'HorarioDeEntrega';
      _HorarioDeRetiro               = 'HorarioDeRetiro';
      _CodigoSifab                   = 'CodigoSifab';
      _EsDepositoProductosTerminados = 'EsDepositoProductosTerminados';
      _EsDepositoMateriaPrima        = 'EsDepositoMateriaPrima';
      _EsDepositoSemielaborado       = 'EsDepositoSemielaborado';
      _EsDepositoVirtual             = 'EsDepositoVirtual';
      _SectorID                      = 'SectorID';
      _FormatoDeDireccionID          = 'FormatoDeDireccionID';
      _Observacion                   = 'Observacion';
//teamplace
      _TeamplaceTableName            = 'BSDireccion';
      _TeamplaceDescripcion          = 'Descripcion';
      _TeamplaceEmpresaID            = 'OrganizacionID';
      _TeamplaceID                   = 'DireccionID';
      _TeamplaceCalle                = 'Calle';
      _TeamplaceNumero               = 'Numero';
      _TeamplacePiso                 = 'Piso';
      _TeamplaceDpto                 = 'Dpto';
      _TeamplaceCodigoPostal         = 'CodigoPostal';
      _TeamplaceLocalidadID          = 'LocalidadID';
      _TeamplaceProvinciaID          = 'ProvinciaID';
      _TeamplacePaisID               = 'PaisID';
      _TeamplaceTipo                 = 'Tipo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TDepositoList = class(TDescriptibleList)
  private
    function GetActual: TDeposito;
  public
    constructor CreateEmpty;
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateBySector(_S: TSector; _SoloActivos: Boolean= False);
    constructor CreateByEmpresa(_Emp: TAbstractEmpresa; _SoloActivos: Boolean= False);
    constructor CreateByEmpresaLocal( _SoloActivos: Boolean = True; _DPT: Boolean = False; _DPTVirtual: Boolean = False; _DMP: Boolean = False; _DSemi: Boolean = False );
    constructor CreateByEmpresaLocalSinSector( _SoloActivos: Boolean = True; _DPT: Boolean = False; _DPTVirtual: Boolean = False; _DMP: Boolean = False; _DSemi: Boolean = False );
    constructor CreateByDPTyVirtualDeLaEmpresa( _Emp: TAbstractEmpresa; _SoloActivos: Boolean = True );
    constructor CreateByDescripcionLikeAndEmpresa( _Des : String ; _SoloActivos: Boolean = True; _DefaultProductosTerminados: Boolean = False; _DefaultMateriaPrima: Boolean = False; _DefaultSemielaborados: Boolean = False );
    constructor CreateByTipoEmpresa(_Cliente, _Proveedor, _InterDeposito, _DepositoPropio : Boolean; _SoloActivos: Boolean = False);
    constructor CreateByLocalidad(_L: TLocalidad; _SoloActivos: Boolean = False );
    Constructor CreateByStockItemLibre(_ProductoID : TObjectID);
    constructor CreateByEmpresaLocalAll( _SoloActivos: Boolean = True ; _EsDepositoMP : Boolean = False);
    constructor CreateByEmpresaLocalAndDescripcionLike( _D : String ; _SoloActivos: Boolean = True; _EsDepositoMP : Boolean = False);

    function CreateNewObject: TPDObject; override;
    function FindByDescripcion(_Descripcion: TString): Boolean; overload;
    function FindByCodigoSifab(_CodigoSifab: TString): Boolean; overload;
    constructor CreateByEmpresaDepositosPosibles(_Emp: TAbstractEmpresa; _SoloActivos: Boolean);
    property Actual: TDeposito read GetActual;
end;

TAbstractEmpresa = class(TDescriptibleAbreviado)
  private
    FesProveedor: TBoolean;
    FesCliente: TBoolean;
    FcontactosDeEmpresa: TContactoDeEmpresaList;
    FTelefonosDeEmpresa: TTelefonoDeEmpresaList;
    FMarcas: TMarcaAsociadaList;
    FDepositosDeEmpresa: TDepositoList;
    FLicenciatarios: TLicenciatarioList;
    FCalle: TString;
    FDepartamento: TString;
    FPiso: TString;
    FNumeroCalle: TString;
    FObservacionDeUbicacion: TString;
    FpaginaWeb: TString;
    FZonaDeClienteID: TObjectID;
    FZonaDeCliente: TPDObject;
    FValoresALaOrdenDe: TString;
    FUbicacionFilcar: TString;
    FTelefonoEmpresaDefaultID: TObjectID;
    FTelefonoEmpresaDefault: TPDObject;
    FDireccionDeEntregaID: TObjectID;
    FDireccionDeEntrega: TPDObject; // Aca pondre un deposito

    FDireccionDeRetiroID: TObjectID;
    FDireccionDeRetiro: TPDObject; // Aca pondre un deposito
    FEntregaTotal: TBoolean;
    FPorcentajeDeTolerancia: TReal;

    FRankingCrediticioID: TObjectID;
    FRankingCrediticio: TPDObject;
    FContactoResponsable: TPDObject;
    FContactoResponsableID: TObjectID;
    FNumeroDeIngresosBrutos: TString;
    // FNombreDeFantasia : TString;
    FLocalidadID: TObjectID;
    FLocalidad: TPDObject;
    FJurisdiccionDeIngresosBrutosID: TObjectID;
    FJurisdiccionDeIngresosBrutos: TPDObject;
    FGrupoDeVendedorID: TObjectID;
    FGrupoDeVendedor: TPDObject;
    FFleteID: TObjectID;
    FFlete: TPDObject;
    FFechaInicioActividad: TFechaHora;
    FFaxDefaultID: TObjectID;
    FFaxDefault: TPDObject;
    FEsPersonaFisica: TBoolean;
    FEmpresasAsociadas: TOBject;
    FCodigoPostal: TString;
    FDireccion: TString;
    FLimiteDeCredito: TReal;
    FMonedaDeLimiteDeCredito: TPDObject;
    FMonedaDeLimiteDeCreditoID: TObjectID;
    FEvaluarCredito: TBoolean;
    FDescuentoEspecial: TReal;
    FCUIT: TString;
    FIDImpositivoExterior: TString;
    FCondiciondeVentaID: TObjectID;
    FCondicionDeVenta: TPDObject;
    FToleranciaDePagoEnDias: TEntero;
    FCondicionDeIvaID: TObjectID;
    FCondicionDeIva: TPDObject;
    FCondicionDeIngresosBrutosID: TObjectID;
    FCondicionDeIngresosBrutos: TPDObject;
    FCondicionDeCompraID: TObjectID;
    FCondicionDeCompra: TPDObject;
    FCondiciondeCobranzaID: TObjectID;
    FCondiciondeCobranza: TPDObject;
    FCategoriaDeGananciasID: TObjectID;
    FCategoriaDeGanancias: TPDObject;
    FCategoriaDeProveedorID: TObjectID;
    FCategoriaDeProveedor: TPDObject;
    FCategoriaDeClienteID: TObjectID;
    FCategoriaDeCliente: TPDObject;
    FActividadID: TObjectID;
    FActividad: TPDObject;
    FMonedaDefault: TPDObject;
    FMonedaDefaultID: TObjectID;
    FesFlete: TBoolean;
    FesBanco: TBoolean;
    FcodigoDeBanco: TString;
    FEstadoDeBancoID: TObjectID;
    FEstadoDeBanco: TPDObject;
    FEmailEmpresarial: TString;
    FCodigoSistemaAnterior: TString;
    FObservaciones: TString;
    FObservacionesTmp: TString;
    FHorarioDeReparto: TString;
    FHorarioDeEntrega: TString;
    FHorarioDeRetiro: TString;
    FCobradorID: TObjectID;
    FCobrador: TPDObject;
    FListaDePrecio: TPDObject;
    FCodigoIDImpositivoExterior: TString;
    FCondicionDeVentaDetalleID: TObjectID;
    FCondicionDeVentaDetalle: TPDObject;
    FComentarios: TComentarioList;
    FFechaDeIngreso: TFechaHora;
    FGrupoDeVendedorInicial: TPDObject;
    FVigenciaHastaGrupoDeVendedorInicial: TFecha;
    FGrupoDeVendedorInicialID: TObjectID;

    // TEmporales
    FDepositoIDTemporal: TObjectID;
    FEsExportacion: Boolean;
    FEsNuevo: Boolean;
    FCodigoInternoSifab: Integer;
    FesLicenciatario: TBoolean;
    FTieneComentarioNuevo: TBoolean;
    FClassNameComentario: String;
    FDeudaActual: Real;
    FListaDePrecioID: TObjectID;
    FAlertar: TBoolean;
    FDepositoVirtualDeStockID: TObjectID;
    FDepositoVirtualDeStock: TPDObject;
    FCCTelefonoDescripcion: TString;
    FCCPaisDescripcion: TString;
    FCCLocalidadDescripcion: TString;
    FCCGrupoDeVendedorDescripcion: TString;
    FCCGrupoDeVendedorInicialDescripcion: TString;
    FCCProvinciaDescripcion: TString;
    FCCActividadDescripcion: TString;
    FCCCategoriaDeClienteDescripcion: TString;
    FCCCobradorDescripcion: TString;
    FCCCondicionDeCompraDescripcion: TString;
    FCCCondicionDeVentaDetalleDescripcion: TString;
    FCCCondicionDeVentaDescripcion: TString;
    FCCRankingCrediticioDescripcion: TString;
    FCCMarcaDefaultDescripcion: TString;
    FCCFleteDescripcion: TString;
    FCCListaDePrecioDescripcion: TString;
    FCCDireccionDeEntregaDescripcion: TString;
    FCCRankingCrediticioConfeccionaPedido: TBoolean;
    FCCRankingCrediticioConfeccionaRemito: TBoolean;
    FCCRankingCrediticioEsContraEntrega: TBoolean;
    FCCRankingCrediticioConfeccionaFactura: TBoolean;
    FEsEmpresaNueva: TBoolean;
    FNivelDeServicioDeCliente: TPDObject;
    FNivelDeServicioDeClienteID: TObjectID;
    FCCNivelDeServicioDeCliente: TString;
    FCCNivelDeServicioDeClientePonderacion: TReal;
    FCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    FCCCanalDeDistribucion: TString;
    FCodigoInternoDomicilioSifab: TEntero;
    FCodigoInternoTransportistaSifab: Integer;
    FCodigoInternoDomicilioTransportistaSifab: TEntero;
    FMarcaDefault: TPDObject;
    FMarcaDefaultID: TObjectID;
    FMarcaAsociadaDefaultID: TObjectID;
    FImpuestos: TEmpresaImpuestoList;
    FImpuestosActivos: TBoolean;
    FEnActividad: TBoolean;
    FProgramarCalidad: TBoolean;
    FCCCondicionDeIIBBDescripcion: TString;
    FDepositosPosibles: TDepositoList;
    FIDTeamplace: TEntero;
    FEvaluarExcedente: TReal;
    FFormatoDeDireccionID: TObjectID;
    FFormatoDeDireccion: TPDObject;
    FDomicilio: TString;
    FTipoDeIdentificacionTributaria: TPDObject;
    FTipoDeIdentificacionTributariaID: TObjectID;
    FCuentaContable: TPDObject;
    FCuentaContableID: TObjectID;
    FEdificio: TString;
    FDiasPromedioDeMora: TEntero;
    FDiasPromedioDePago: TEntero;
    FCondicionDePagoEnDias: TEntero;


    function GetActividad: TActividad;
    function GetCategoriaDeCliente: TCategoriaDeCliente;
    function GetCategoriaDeProveedor: TCategoriaDeProveedor;
    function GetCategoriaDeGanancias: TCategoriaDeGanancias;
    function GetCondiciondeCobranza: TCondicionDeCompra;
    function GetCondicionDeIva: TCondiciondeIVA;
    function GetCondicionDeVenta: TCondicionDeVenta;
    function GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
    function GetFaxDefault: TTelefonoDeEmpresa;
    function GetFlete: TEmpresa;
    function GetGrupoDeVendedor: TGrupoDeVendedor;
    function GetJurisdiccionDeIngresosBrutos: TJurisdiccionIngresosBrutos;
    function GetLocalidad: TLocalidad;
    function GetRankingCrediticio: TRankingCrediticio;
    function GetTelefonoEmpresaDefault: TTelefonoDeEmpresa;
    function GetZonaDeCliente: TZonaDeCliente;
    Function getcontactosDeEmpresa: TContactoDeEmpresaList;
    function getTelefonosDeEmpresa: TTelefonoDeEmpresaList;
    function getDepositosDeEmpresa: TDepositoList;
    function GetDepositosPosibles: TDepositoList;
    function GetEmpresasAsociadas: TEmpresaAsociadaList;
    function GetCodigoSifab: Integer;
    function GetCodigoIDImpositivoExterior: TString;
    function GetCodigoDomicilioSifab: String;
    function GetEsDireccionEnIngles: TBoolean;
    function GetCodigoInternoSifab: Integer;
    function GetesLicenciatario: TBoolean;
    function GetInhibidoFinancieramente: Boolean;
    function GetComentarios: TComentarioList;
    function GetDeudaActual: Real;

    function GetSaldoCuentaCorriente: Real;
    function GetSaldoItemsPendientesSinIva: Real;
    function GetSaldoItemsPendientesConIva: Real;

    function GetSaldoItemsProgramados: Real;
    function GetInhabilitadoSifab: Boolean;
    function GetListaDePrecio: TListaDePrecio;
    function getLicenciatarios: TLicenciatarioList;
    function GetCondicionDeCompra: TCondicionDeCompra;
    function GetCobrador: TCobrador;
    function GetEsExportacion: Boolean;
    function GetDireccionDeEntrega: TDeposito;
    function GetDireccionDeRetiro: TDeposito;
    function getMarcas: TMarcaAsociadaList;
    function GetMonedaDefault: TMoneda;
    function GetMonedaDeLimiteDeCredito: TMoneda;
    function GetesCliente: TBoolean;
    function GetesProveedor: TBoolean;
    function getEstadoDeBanco: TEstadoDeBanco;
    function GetContactoResponsableID: TContactoDeEmpresa;
    function GetCondicionDeIngresosBrutos: TCondicionDeIngresosBrutos;
    function GetMarcaAsociadaDefault: TMarcaAsociada;
    function GetNivelDeServicioDeCliente: TNivelDeServicioDeCliente;
    function GetEsEmpresaNueva: TBoolean;
    function GetDepositoVirtualDeStock: TDeposito;
    function GetGrupoDeVendedorInicial: TGrupoDeVendedor;
    procedure SetCategoriaDeGananciasID(const Value: TObjectID);
    procedure SetCondiciondeCobranzaID(const Value: TObjectID);
    procedure SetCondiciondeVentaID(const Value: TObjectID);
    procedure SetGrupoDeVendedorID(const Value: TObjectID);
    procedure SetRankingCrediticioID(const Value: TObjectID);
    procedure SetZonaDeClienteID(const Value: TObjectID);
    procedure SetFleteID(const Value: TObjectID);
    procedure SetCategoriaDeProveedorID(const Value: TObjectID);
    procedure SetCondicionDeCompraID(const Value: TObjectID);
    procedure SetCondicionDeVentaDetalleID(const Value: TObjectID);
    procedure SetFCuit(const Value: TString);
    procedure SetActividadID(const Value: TObjectID);
    procedure SetCategoriaDeClienteID(const Value: TObjectID);
    procedure SetJurisdiccionDeIngresosBrutosID(const Value: TObjectID);
    procedure SetCondicionDeIVAId(const Value: TObjectID);
    procedure SetTelefonoEmpresaDefaultID(const Value: TObjectID);
    procedure SetFaxDefaultID(const Value: TObjectID);
    procedure SetDireccionDeEntregaID(const Value: TObjectID);
    procedure SetDireccionDeRetiroID(const Value: TObjectID);
    procedure ValidarCliente;
    procedure ValidarProveedor;
    procedure ValidarBanco;
    procedure AgregarDireccionLegal;
    procedure SetMonedaDefaultID(const Value: TObjectID);
    procedure setMonedaDeLimiteDeCreditoID(const Value: TObjectID);
    procedure SetesCliente(const Value: TBoolean);
    procedure SetesProveedor(const Value: TBoolean);
    procedure SetEstadoDeBancoID(const Value: TObjectID);
    procedure SetContactoResponsableID(const Value: TObjectID);
    procedure setEmailEmpresarial(const Value: TString);
    procedure SetPorcentajeDeTolerancia(const Value: TReal);
    procedure SetObservaciones(const Value: TString);
    procedure SetCondicionDeIngresosBrutosID(const Value: TObjectID);
    procedure SetMarcaAsociadaDefaultID(const Value: TObjectID);
    procedure SetCobradorID(const Value: TObjectID);
    procedure SetLocalidadID(const Value: TObjectID);
    procedure SetCalle(const Value: TString);
    procedure SetDepartamento(const Value: TString);
    procedure SetPiso(const Value: TString);
    procedure SetObservacionDeUbicacion(const Value: TString);
    procedure SetListaDePrecioID(const Value: TObjectID);
    procedure SetDepositoVirtualDeStockID(const Value: TObjectID);
    procedure SetGrupoDeVendedorInicialID(const Value: TObjectID);
    procedure SetNivelDeServicioDeClienteID(const Value: TObjectID);
    //de create compuesto
    function GetCCGrupoDeVendedorDescripcion: TString;
    function GetCCGrupoDeVendedorInicialDescripcion: TString;
    function GetCCNivelDeServicioDeCliente: TString;
    function GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
    function GetCCNivelDeServicioDeClientePonderacion: TReal;
    function GetCCActividadDescripcion: TString;
    function GetCCCanalDeDistribucion: TString;
    function GetCodigoInternoDomicilioSifab: TEntero;
    function GetMarcaDefaultID: TObjectID;
    function GetMarcaDefault: TMarca;
    procedure SetMarcaDefaultID(const Value: TObjectID);
    function GetCCMarcaDefaultDescripcion: TString;
    function GetCodigoInternoDomicilioTransportistaSifab: TEntero;
    function GetCodigoInternoTransportistaSifab: TEntero;
    function GetImpuestos: TEmpresaImpuestoList;
    function GetCCCondicionDeVentaDetalleDescripcion: TString;
    function GetCondicionDeVentaDescripcion: TString;
    function GetIDTeamplace: TEntero;
    procedure SetFormatoDeDireccionID(const Value: TObjectID);
    function GetFormatoDeDireccion: TFormatoDeDireccion;
    function GetDireccionCompleta: TString;
    function GetDomicilio: TString;
    function GetTipoDeIdentificacionTributaria: TTipoDeDocumento;
    procedure SetTipoDeIdentificacionTributariaID(const Value: TObjectID);
    procedure SetCuentaContableID(const Value: TObjectID);
    function GetCuentaContable: TCuentaContable;
    procedure SetEdificio(const Value: TString);
    function GetDiasPromedioDePago: TEntero;
    function GetDiasPromedioDeMora: TEntero;
  public
    // CLIENTE
    function GrupoDeVendedorActivo( _Fecha: TFecha) : TGrupoDeVendedor;
    Function AlicuotaImpuesto (_Imp : TImpuestoConcepto ; _Fecha : TFecha ; _EsVenta : Boolean = True ) : TReal;
    Procedure AgregarAlPadron;
    property ActividadID: TObjectID read FActividadID write SetActividadID;
    property Actividad: TActividad read GetActividad;
    property CategoriaDeCliente: TCategoriaDeCliente read GetCategoriaDeCliente;
    property CategoriaDeClienteID: TObjectID read FCategoriaDeClienteID write SetCategoriaDeClienteID;
    property CondicionDeVentaID: TObjectID read FCondiciondeVentaID write SetCondiciondeVentaID;
    property CondicionDeVenta: TCondicionDeVenta read GetCondicionDeVenta;
    property CondicionDeVentaDetalleID: TObjectID read FCondicionDeVentaDetalleID write SetCondicionDeVentaDetalleID;
    property CondicionDeVentaDetalle: TCondicionDeVentaDetalle read GetCondicionDeVentaDetalle;
    property ToleranciaDePagoEnDias: TEntero read FToleranciaDePagoEnDias write FToleranciaDePagoEnDias;
    property GrupoDeVendedorID: TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property GrupoDeVendedor: TGrupoDeVendedor read GetGrupoDeVendedor;
    property GrupoDeVendedorInicialID: TObjectID read FGrupoDeVendedorInicialID write SetGrupoDeVendedorInicialID;
    property GrupoDeVendedorInicial: TGrupoDeVendedor read GetGrupoDeVendedorInicial;
    property VigenciaHastaGrupoDeVendedorInicial: TFecha read FVigenciaHastaGrupoDeVendedorInicial write FVigenciaHastaGrupoDeVendedorInicial;
    property RankingCrediticioID: TObjectID read FRankingCrediticioID write SetRankingCrediticioID;
    property ZonaDeClienteID: TObjectID read FZonaDeClienteID write SetZonaDeClienteID;
    property FleteID: TObjectID read FFleteID write SetFleteID;
    property Flete: TEmpresa read GetFlete;
    property NivelDeServicioDeClienteID : TObjectID read FNivelDeServicioDeClienteID write SetNivelDeServicioDeClienteID;
    property NivelDeServicioDeCliente : TNivelDeServicioDeCliente read GetNivelDeServicioDeCliente;
    property LimiteDeCredito : TReal read FLimiteDeCredito write FLimiteDeCredito;
    property EvaluarCredito  : TBoolean read FEvaluarCredito write FEvaluarCredito;
    property Alertar  : TBoolean read FAlertar write FAlertar;
    property MonedaDefault: TMoneda read GetMonedaDefault;
    property MonedaDefaultID: TObjectID read FMonedaDefaultID write SetMonedaDefaultID;
    property MonedaDeLimiteDeCredito: TMoneda read GetMonedaDeLimiteDeCredito;
    property MonedaDeLimiteDeCreditoID : TObjectID read FMonedaDeLimiteDeCreditoID write setMonedaDeLimiteDeCreditoID;
    property DescuentoEspecial : TReal read FDescuentoEspecial write FDescuentoEspecial;

    property ZonaDeCliente: TZonaDeCliente read GetZonaDeCliente;
    property RankingCrediticio: TRankingCrediticio read GetRankingCrediticio;
    property DireccionDeEntrega: TDeposito read GetDireccionDeEntrega;
    property DireccionDeEntregaID: TObjectID read FDireccionDeEntregaID write SetDireccionDeEntregaID;
    property Marcas: TMarcaAsociadaList read getMarcas;
    property EntregaTotal: TBoolean read FEntregaTotal write FEntregaTotal;
    property PorcentajeDeTolerancia: TReal read FPorcentajeDeTolerancia write SetPorcentajeDeTolerancia;
    property EvaluarExcedente: TReal read FEvaluarExcedente write FEvaluarExcedente;

    property ListaDePrecioID: TObjectID read FListaDePrecioID Write SetListaDePrecioID;
    property ListaDePrecio  : TListaDePrecio read GetListaDePrecio;

    property HorarioDeReparto : TString read FHorarioDeReparto write FHorarioDeReparto;
    property HorarioDeEntrega : TString read FHorarioDeEntrega write FHorarioDeEntrega;
    property MarcaAsociadaDefaultID : TObjectID Read FMarcaAsociadaDefaultID Write SetMarcaAsociadaDefaultID;

    property MarcaDefault     : TMarca Read GetMarcaDefault;
    property MarcaDefaultID   : TObjectID Read GetMarcaDefaultID Write SetMarcaDefaultID;

    property CobradorID: TObjectID Read FCobradorID Write SetCobradorID;
    property Cobrador: TCobrador Read GetCobrador;
    property esLicenciatario: TBoolean Read GetesLicenciatario;

    // PROVEEDOR
    property DireccionDeRetiro: TDeposito read GetDireccionDeRetiro;
    property DireccionDeRetiroID: TObjectID read FDireccionDeRetiroID write SetDireccionDeRetiroID;
    property CategoriaDeProveedorID : TObjectID read FCategoriaDeProveedorID write SetCategoriaDeProveedorID;
    property CondicionDeCompra: TCondicionDeCompra read GetCondicionDeCompra;
    property CondiciondeCobranza : TCondicionDeCompra read GetCondiciondeCobranza;
    property CondicionDeCompraID: TObjectID read FCondicionDeCompraID write SetCondicionDeCompraID;
    property CondiciondeCobranzaID: TObjectID read FCondiciondeCobranzaID write SetCondiciondeCobranzaID;
    property CategoriaDeProveedor : TCategoriaDeProveedor read GetCategoriaDeProveedor;
    property ValoresALaOrdenDe : TString read FValoresALaOrdenDe write FValoresALaOrdenDe;
    property HorarioDeRetiro : TString read FHorarioDeRetiro write FHorarioDeRetiro;
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    procedure ValidarCUITDuplicado(_Cuit: String; _ID: TObjectID);
    procedure ValidarCodigoDeBancoDuplicado(_CodBanco: String; _ID: TObjectID);

    constructor Create; override;

    procedure ValidateOnInsert; override;
    procedure ValidateOnUpdate; override;
    procedure Delete; override;

    function Save: Boolean; override;

    procedure RPT_CC_Saldos_Detallado_Cliente( _TipoDeOperacion: String; _Prioridad : Integer = 0 ) ; // _TipoDeOperacion -> C = Cabecera  D = Detalle

    property paginaWeb: TString read FpaginaWeb write FpaginaWeb;
    // Temporales

    Property DepositoIDTemporal : TObjectID read FDepositoIDTemporal Write FDepositoIDTemporal;

    // PUBLIC DE TODA DE EMPRESA
    property ImpuestosActivos: TBoolean read FImpuestosActivos write FImpuestosActivos;
    property esProveedor: TBoolean read GetesProveedor write SetesProveedor;
    property esCliente: TBoolean read GetesCliente write SetesCliente;
    property esFlete: TBoolean read FesFlete write FesFlete;
    property esBanco: TBoolean read FesBanco write FesBanco;
    Property EsEmpresaNueva : TBoolean Read GetEsEmpresaNueva;
    property codigoDeBanco: TString read FcodigoDeBanco write FcodigoDeBanco;
    property EstadoDeBanco: TEstadoDeBanco read getEstadoDeBanco;
    property EstadoDeBancoID: TObjectID Read FEstadoDeBancoID write SetEstadoDeBancoID;
    property contactosDeEmpresa : TContactoDeEmpresaList read getcontactosDeEmpresa;
    property telefonosDeEmpresa : TTelefonoDeEmpresaList read getTelefonosDeEmpresa;
    property depositosDeEmpresa: TDepositoList read getDepositosDeEmpresa;
    property DepositosPosibles: TDepositoList read GetDepositosPosibles;
    property empresasAsociadas: TEmpresaAsociadaList Read GetEmpresasAsociadas;
    property Licenciatarios: TLicenciatarioList read getLicenciatarios;
    property NumeroDeIngresosBrutos: TString read FNumeroDeIngresosBrutos write FNumeroDeIngresosBrutos;
    property CondicionDeIva: TCondiciondeIVA read GetCondicionDeIva;
    property CondicionDeIVAId: TObjectID read FCondicionDeIvaID write SetCondicionDeIVAId;
    property CondicionDeIngresosBrutos: TCondicionDeIngresosBrutos read GetCondicionDeIngresosBrutos;
    property CondicionDeIngresosBrutosID : TObjectID read FCondicionDeIngresosBrutosID write SetCondicionDeIngresosBrutosID;

    property CUIT: TString read FCUIT write SetFCuit;
    property CodigoIDImpositivoExterior : TString read GetCodigoIDImpositivoExterior;
    property IDImpositivoExterior : TString read FIDImpositivoExterior write FIDImpositivoExterior;
    property Calle: TString read FCalle write SetCalle;
    property NumeroCalle: TString read FNumeroCalle write FNumeroCalle;
    property Piso: TString read FPiso write SetPiso;
    property Departamento: TString read FDepartamento write SetDepartamento;
    property Edificio  : TString read FEdificio write SetEdificio;
    property Domicilio : TString read GetDomicilio;
    property DireccionCompleta: TString read GetDireccionCompleta;
    property ObservacionDeUbicacion: TString Read FObservacionDeUbicacion Write SetObservacionDeUbicacion;
    property EsDireccionEnIngles: TBoolean read GetEsDireccionEnIngles;
    property CategoriaDeGanancias : TCategoriaDeGanancias read GetCategoriaDeGanancias;
    property CategoriaDeGananciasID : TObjectID read FCategoriaDeGananciasID write SetCategoriaDeGananciasID;
    property JurisdiccionDeIngresosBrutos: TJurisdiccionIngresosBrutos read GetJurisdiccionDeIngresosBrutos;
    property JurisdiccionDeIngresosBrutosID : TObjectID read FJurisdiccionDeIngresosBrutosID write SetJurisdiccionDeIngresosBrutosID;

    property EsPersonaFisica : TBoolean read FEsPersonaFisica write FEsPersonaFisica;
    property FaxDefault: TTelefonoDeEmpresa read GetFaxDefault;
    property FaxDefaultID: TObjectID read FFaxDefaultID write SetFaxDefaultID;
    property FechaInicioActividad: TFechaHora read FFechaInicioActividad write FFechaInicioActividad;
    property FechaDeIngreso: TFechaHora read FFechaDeIngreso write FFechaDeIngreso;
    property Localidad: TLocalidad read GetLocalidad;
    property LocalidadID: TObjectID read FLocalidadID write SetLocalidadID;
    property CodigoPostal: TString read FCodigoPostal write FCodigoPostal;
    // property NombreDeFantasia : TString read GetNombreDeFantasia write SetNombreDeFantasia;

    property TelefonoEmpresaDefault : TTelefonoDeEmpresa read GetTelefonoEmpresaDefault;
    property TelefonoEmpresaDefaultID : TObjectID read FTelefonoEmpresaDefaultID write SetTelefonoEmpresaDefaultID;

    property ContactoResponsableID : TObjectID read FContactoResponsableID Write SetContactoResponsableID;
    property ContactoResponsable   : TContactoDeEmpresa read GetContactoResponsableID;

    property UbicacionFilcar : TString read FUbicacionFilcar write FUbicacionFilcar;
    property EmailEmpresarial: TString Read FEmailEmpresarial Write setEmailEmpresarial;
    property Observaciones: TString Read FObservaciones Write SetObservaciones;
    property ObservacionesTmp : TString Read FObservacionesTmp Write FObservacionesTmp;
    property CodigoSistemaAnterior: TString read FCodigoSistemaAnterior write FCodigoSistemaAnterior;
    property InhibidoFinancieramente: Boolean read GetInhibidoFinancieramente;
    property InhabilitadoSifab: Boolean read GetInhabilitadoSifab;
    property DeudaActual: Real read GetDeudaActual;
    property SaldoCuentaCorriente: Real read GetSaldoCuentaCorriente;
    property SaldoItemsProgramados: Real read GetSaldoItemsProgramados;
    property SaldoItemsPendientesSinIva: Real read GetSaldoItemsPendientesSinIva;
    property SaldoItemsPendientesConIva: Real read GetSaldoItemsPendientesConIva;

    Property CodigoSifab: Integer read GetCodigoSifab;
    Property CodigoInternoSifab: Integer read GetCodigoInternoSifab;
    Property CodigoInternoTransportistaSifab: TEntero read GetCodigoInternoTransportistaSifab;
    Property CodigoInternoDomicilioTransportistaSifab : TEntero Read GetCodigoInternoDomicilioTransportistaSifab;
    Property CodigoDomicilioSifab: String read GetCodigoDomicilioSifab;
    Property CodigoInternoDomicilioSifab : TEntero Read GetCodigoInternoDomicilioSifab;
    property EsExportacion: Boolean Read GetEsExportacion;
    property EsNuevo: Boolean Read FEsNuevo Write FEsNuevo;
    property Comentarios: TComentarioList Read GetComentarios;
    property ClassNameComentario: String Read FClassNameComentario write FClassNameComentario;
    property DepositoVirtualDeStockID: TObjectID Read FDepositoVirtualDeStockID Write SetDepositoVirtualDeStockID;
    property DepositoVirtualDeStock: TDeposito Read GetDepositoVirtualDeStock;
    property Impuestos : TEmpresaImpuestoList read GetImpuestos;
    property EnActividad : TBoolean read FEnActividad Write FEnActividad;    // Campo que se actualiza solo y corresponde a los clientes que tienen por lo menos 1 pedido en el ultimo año
    property ProgramarCalidad : TBoolean read FProgramarCalidad Write FProgramarCalidad;    // Campo que se actualiza solo y corresponde a los clientes que tienen por lo menos 1 pedido en el ultimo año

    // del create compuesto
    Property CCTelefonoDescripcion                        : TString Read FCCTelefonoDescripcion;
    Property CCPaisDescripcion                            : TString Read FCCPaisDescripcion;
    Property CCProvinciaDescripcion                       : TString Read FCCProvinciaDescripcion;
    Property CCLocalidadDescripcion                       : TString Read FCCLocalidadDescripcion;
    property CCCategoriaDeClienteDescripcion              : TString Read FCCCategoriaDeClienteDescripcion;
    Property CCListaDePrecioDescripcion                   : TString Read FCCListaDePrecioDescripcion;
    Property CCCondicionDeCompraDescripcion               : TString Read FCCCondicionDeCompraDescripcion;
    Property CCCondicionDeVentaDescripcion                : TString Read GetCondicionDeVentaDescripcion;
    Property CCCondicionDeVentaDetalleDescripcion         : TString Read GetCCCondicionDeVentaDetalleDescripcion;
    Property CCCondicionDeIIBBDescripcion                 : TString Read FCCCondicionDeIIBBDescripcion;

    Property CCFleteDescripcion                           : TString Read FCCFleteDescripcion;
    Property CCCobradorDescripcion                        : TString Read FCCCobradorDescripcion;
    Property CCDireccionDeEntregaDescripcion              : TString Read FCCDireccionDeEntregaDescripcion;
    Property CCRankingCrediticioDescripcion               : TString Read FCCRankingCrediticioDescripcion;
    Property CCRankingCrediticioConfeccionaPedido         : TBoolean Read FCCRankingCrediticioConfeccionaPedido;
    Property CCRankingCrediticioConfeccionaRemito         : TBoolean Read FCCRankingCrediticioConfeccionaRemito;
    Property CCRankingCrediticioConfeccionaFactura        : TBoolean Read FCCRankingCrediticioConfeccionaFactura;
    Property CCRankingCrediticioEsContraEntrega           : TBoolean Read FCCRankingCrediticioEsContraEntrega;

    Property CCGrupoDeVendedorDescripcion                 : TString Read GetCCGrupoDeVendedorDescripcion;
    Property CCGrupoDeVendedorInicialDescripcion          : TString Read GetCCGrupoDeVendedorInicialDescripcion;
    Property CCActividadDescripcion                       : TString Read GetCCActividadDescripcion;
    Property CCCanalDeDistribucion                        : TString Read GetCCCanalDeDistribucion;
    Property CCMarcaDefaultDescripcion                    : TString Read GetCCMarcaDefaultDescripcion;
    Property CCNivelDeServicioDeCliente                   : TString Read GetCCNivelDeServicioDeCliente;
    Property CCNivelDeServicioDeClientePonderacion        : TReal   Read GetCCNivelDeServicioDeClientePonderacion;
    Property CCNivelDeServicioDeClienteColorIdentificador : TEntero Read GetCCNivelDeServicioDeClienteColorIdentificador;

    Property FormatoDeDireccionID                         : TObjectID Read FFormatoDeDireccionID Write SetFormatoDeDireccionID;
    Property FormatoDeDireccion                           : TFormatoDeDireccion Read GetFormatoDeDireccion;
    Property TipoDeIdentificacionTributariaID             : TObjectID        Read FTipoDeIdentificacionTributariaID Write SetTipoDeIdentificacionTributariaID;
    Property TipoDeIdentificacionTributaria               : TTipoDeDocumento Read GetTipoDeIdentificacionTributaria;
    Property CuentaContableID                             : TObjectID       Read FCuentaContableID Write SetCuentaContableID;
    Property CuentaContable                               : TCuentaContable Read GetCuentaContable;
    Property DiasPromedioDeMora                           : TEntero Read GetDiasPromedioDeMora;
    Property DiasPromedioDePago                           : TEntero Read GetDiasPromedioDePago; // Obtenido de Finnegans promedio ultimo año
    Property IDTeamplace                                  : TEntero Read GetIDTeamplace;
end;

TAbstractEmpresaDM = class(TSQLDBX_DMObject)
  strict protected
    Class Function CreateCompuesto(_Parte : Integer = 0): String; override;
  private
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    Const
      _esCliente                                    = 'esCliente';
      _esInactivo                                   = 'EsInactivo';
      _esPersonaFisica                              = 'EsPersonaFisica';
      _esProveedor                                  = 'esProveedor';
      _esBanco                                      = 'esBanco';
      _esFlete                                      = 'esFlete';
      _FechaInicioActividad                         = 'FechaIInicioActividad';
      _FechaDeIngreso                               = 'FechaDeIngreso';
      _LimiteDeCredito                              = 'LimiteDeCredito';
      _EvaluarCredito                               = 'EvaluarCredito';
      _Alertar                                      = 'Alertar';
      _descuentoEspecial                            = 'DescuentoEspecial';
      _ActividadID                                  = 'ActividadID';
      _CategoriaDeClienteID                         = 'CategoriaDeClienteID';
      _CategoriaDeGananciasID                       = 'CategoriaDeGananciasID';
      _CategoriaDeProveedorID                       = 'CategoriaDeProveedorID';
      _CondicionDeCobranzaID                        = 'CondicionDeCobranzaID';
      _CondicionDeCompraID                          = 'condicionDeCompraID';
      _CondicionDeIVAID                             = 'CondicionDeIVAID';
      _CondicionDeIngresosBrutosID                  = 'CondicionDeIngresosBrutosID';
      _CobradorID                                   = 'CobradorID';
      _ToleranciaDePagoEnDias                       = 'ToleranciaDePagoEnDias';
      _CondicionDeVentaID                           = 'CondicionDeVentaID'; // una vez implementado esto se debe eliminar de la tabla el campo condicionDeVentaID y condicionDePagoID
      _CondicionDeVentaDetalleID                    = 'CondicionDeVentaDetalleID';
      _DepositoDeEntregaID                          = 'DepositoDeEntregaID';
      _DepositoDeRetiroID                           = 'DepositoDeRetiroID';
      _FaxDefaultID                                 = 'FaxDefaultID';
      _EmpresaFleteID                               = 'EmpresaFleteID';
      _VigenciaHastaGrupoDeVendedorInicial          = 'VigenciaHastaGrupoDeVendedorInicial';
      _GrupoDeVendedorInicialID                     = 'GrupoDeVendedorInicialID';
      _GrupoDeVendedorID                            = 'GrupoDeVendedorID';
      _JurisdiccionDeIngresosBrutosID               = 'JurisdiccionDeIngresosBrutosID';
      _CodigoPostal                                 = 'CodigoPostal';
      _localidadID                                  = 'LocalidadID';
      _RankingCrediticioID                          = 'RankingCrediticioID'; // una vez implementado se debe eliminar de la tabla RankingCrediticioID
      _TelefonoEmpresaDefaultID                     = 'TelefonoEmpresaDefaultID';
      _ZonaDeClienteID                              = 'ZonaDeClienteID';
      _Codigo                                       = 'Codigo';
      _Descripcion                                  = 'Empresa';
      _Cuit                                         = 'CUIT';
      _Calle                                        = 'Calle';
      _NumeroCalle                                  = 'NumeroCalle';
      _Piso                                         = 'Piso';
      _Departamento                                 = 'Departamento';
      _Edificio                                     = 'Edificio';
      _ObservacionDeUbicacion                       = 'ObservacionUbicacion';
      _HorarioDeReparto                             = 'HorarioDeReparto';
      _HorarioDeEntrega                             = 'HorarioDeEntrega';
      _HorarioDeRetiro                              = 'HorarioDeRetiro';
      _NumeroDeIngresosBrutos                       = 'NumeroDeIngresosBrutos';
      _PaginaWEB                                    = 'PaginaWeb';
      _ContactoResponsableID                        = 'ContactoResponsableID';
      _UbicacionFilcar                              = 'UbicacionFilcar';
      _ValoresALaOrdenDe                            = 'valoresALaOrdenDe';
      _MonedaDefaultID                              = 'MonedaDefaultID';
      _MonedaDeLimiteDeCreditoID                    = 'limiteDeCreditoMonedaID';
      _CodigoDeBanco                                = 'CodigoDeBanco';
      _EmailEmpresarial                             = 'EmailEmpresarial';
      _EstadoDeBancoID                              = 'EstadoDeBancoID';
      _EntregaTotal                                 = 'entregaTotal';
      _PorcentajeDeTolerancia                       = 'porcentajeDeTolerancia';
      _EvaluarExcedente                             = 'EvaluarExcedente';
      _CodigoSistemaAnterior                        = 'CodigoSistemaAnterior';
      _Observaciones                                = 'Observaciones';
      _ListaDePrecioID                              = 'ListaDePrecioID';
      _MarcaAsociadaDefaultID                       = 'MarcaAsociadaDefaultID';
      _IDImpositivoExterior                         = 'IDImpositivoExterior';
      _CodigoIDImpositivoExterior                   = 'CodigoIDImpositivoExterior';
      _DepositoVirtualDeStockID                     = 'DepositoVirtualDeStockID';
      _NivelDeServicioDeClienteID                   = 'NivelDeServicioDeClienteID';
      _ImpuestosActivos                             = 'ImpuestosActivos';
      _EnActividad                                  = 'EnActividad';
      _ProgramarCalidad                             = 'ProgramarCalidad';
      _FormatoDeDireccionID                         = 'FormatoDeDireccionID';
      _TipoDeIdentificacionTributariaID             = 'TipoDeIdentificacionTributariaID';
      _CuentaContableID                             = 'CuentaContableID';
// del create compuesto
      _CCTelefonoDescripcion                        = 'TelefonoDescripcion';
      _CCPaisDescripcion                            = 'PaisDescripcion';
      _CCLocalidadDescripcion                       = 'LocalidadDescripcion';
      _CCGrupoDeVendedorDescripcion                 = 'GrupoDeVendedorDescripcion';
      _CCGrupoDeVendedorInicialDescripcion          = 'GrupoDeVendedorInicialDescripcion';
      _CCProvinciaDescripcion                       = 'ProvinciaDescripcion';
      _CCActividadDescripcion                       = 'Actividad';
      _CCCanalDeDistribucion                        = 'CanalDeDistribucion';
      _CCCategoriaDeClienteDescripcion              = 'CategoriaDeClienteDescripcion';
      _CCCobradorDescripcion                        = 'CobradorDescripcion';
      _CCCondicionDeCompraDescripcion               = 'CondicionDeCompraDescripcion';
      _CCCondicionDeVentaDetalleDescripcion         = 'CondicionDeVentaDetalleDescripcion';
      _CCCondicionDeVentaDescripcion                = 'CondicionDeVentaDescripcion';
      _CCCondicionDeIIBBDescripcion                 = 'CondicionDeIIBBDescripcion';
      _CCMarcaDefaultDescripcion                    = 'MarcaDefaultDescripcion';
      _CCMarcaID                                    = 'MarcaID';
      _CCFleteDescripcion                           = 'FleteDescripcion';
      _CCListaDePrecioDescripcion                   = 'ListaDePrecioDescripcion';
      _CCDireccionDeEntregaDescripcion              = 'DireccionDeEntregaDescripcion';
      _CCRankingCrediticioDescripcion               = 'RankingCrediticioDescripcion';
      _CCRankingCrediticioConfeccionaPedido         = 'RankingCrediticioConfeccionaPedido';
      _CCRankingCrediticioConfeccionaRemito         = 'RankingCrediticioConfeccionaRemito';
      _CCRankingCrediticioConfeccionaFactura        = 'RankingCrediticioConfeccionaFactura';
      _CCRankingCrediticioEsContraEntrega           = 'RankingCrediticioEsContraEntrega';
      _CCNivelDeServicioDeCliente                   = 'NivelDeServicioDeCliente';
      _CCNivelDeServicioDeClientePonderacion        = 'NivelDeServicioDeClientePonderacion';
      _CCNivelDeServicioDeClienteColorIdentificador = 'NivelDeServicioDeClienteColorIdentificador';
//Alias de la base de datos de Teamplace
      _TeamplaceTableName                           = 'BSOrganizacion';
      _TeamplaceCodigo                              = 'Codigo';
      _TeamplaceID                                  = 'OrganizacionID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEmpresaImpuesto = class(TPDObject)
  private
    FEmpresaID : TObjectID;
    FImpuestoConceptoID : TObjectID;
    FImpuestoConcepto : TPDObject;
    function GetImpuestoConcepto : TImpuestoConcepto;
    procedure SetImpuestoConceptoID(Value : TObjectID);
  public
    constructor Create; override;
    property ImpuestoConcepto : TImpuestoConcepto read GetImpuestoConcepto;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property EmpresaID : TObjectID read FempresaID write FEmpresaID;
end;

TEmpresaImpuestoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ImpuestoConceptoID = 'ImpuestoConceptoID';
    _empresaID          = 'empresaID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEmpresaImpuestoList = class(TPDList)
private
  function Getactual : TEmpresaImpuesto;
public
  constructor CreateAll;
  constructor CreateByEmpresa( _Emp: TAbstractEmpresa );
  function CreateNewObject: TPDObject; override;
  function FindPredeterminadoProductos: Boolean;
  property actual : TEmpresaImpuesto read Getactual;
end;

TComentario = class(TPDObject)
private
  FComentario: TString;
  FAsunto: TString;
  FFechaHora: TFechaHora;
  FUsuario: TPDObject;
  FUsuarioID: TObjectID;
  FPadreID: TObjectID;
  FClasePadre: TString;
  FPadre: TPDObject;
  procedure SetUsuarioID(Value: TObjectID);
  function GetUsuario: TUsuario;
public
  constructor Create; override;
  property ClasePadre: TString read FClasePadre write FClasePadre;
  property PadreID: TObjectID read FPadreID write FPadreID;
  property UsuarioID: TObjectID read FUsuarioID write SetUsuarioID;
  property Usuario: TUsuario read GetUsuario;
  property FechaHora: TFechaHora read FFechaHora write FFechaHora;
  property Asunto: TString read FAsunto write FAsunto;
  property Comentario: TString read FComentario write FComentario;
end;

TComentarioDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _ClasePadre = 'ClasePadre';
    _PadreID = 'PadreID';
    _UsuarioID = 'UsuarioID';
    _FechaHora = 'FechaHora';
    _Asunto = 'Asunto';
    _Comentario = 'Comentario';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TComentarioList = class(TPDList)
private
  function GetActual: TComentario;
public
  constructor CreateAll;
  constructor CreateByPadre(_Padre: TPDObject);
  function CreateNewObject: TPDObject; override;
  property Actual: TComentario read GetActual;
end;

TTipoDeDesarrollo = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TTipoDeDesarrolloDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'TipoDeDesarrollo';
      _EsInactivo  = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeDesarrolloList = class(TDescriptibleAbreviadoList)
  private
    function GetActual : TTipoDeDesarrollo;
  public
    constructor CreateAll(_SoloActivos: Boolean = false);
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeDesarrollo read GetActual;
end;

TDesarrollo = class(TDescriptibleAbreviado)
  private
    FArticulosPosibles: TOBject;
//    FEmpresas: TOBject;
    FMarca: TPDObject;
    FMarcaID: TObjectID;
    FFechaDeCreacion: TFechaHora;
    FEsEstandar: TBoolean;
    FTiempoEstimadoEnDias: TEntero;
    FObservacion: TString;
    FDescripcionMarca: TString;
    FArchivoDeImagen: TString;
    FArchivoDeImagen3D: TString;
    FArchivoDeImagen2D: TString;
    FArchivoSinImagen: TString;
    FArchivoDeImagenWeb: TString;
    FArchivoDeImagen3DWeb: TString;
    FArchivoDeImagen2DWeb: TString;
    FArchivoSinImagenWeb: TString;
    FPrecios: TDesarrolloPrecioList;
    FTipoDeDesarrolloID: TObjectID;
    FTipoDeDesarrollo: TPDObject;
    FComplejidadDeDesarrolloID: TObjectID;
    FComplejidadDeDesarrollo: TPDObject;
    FEmpresasAsociadas: TEmpresaList;
    procedure SetMarcaID(Value: TObjectID);
    procedure SetTipoDeDesarrolloID(const Value: TObjectID);
    procedure SetComplejidadDeDesarrolloID(const Value: TObjectID);

    function GetMarca: TMarca;
//    function GetEmpresas: TDesarrolloEmpresaList;
    function GetArticulosPosibles: TDesarrolloArticuloPosibleList;
    function GetDescripcionMarca: TString;
    function GetPrecios: TDesarrolloPrecioList;
    function GetTipoDeDesarrollo: TTipoDeDesarrollo;
    function GetComplejidadDeDesarrollo: TComplejidadDeDesarrollo;

    function GetArchivoDeImagen2D: TString;
    function GetArchivoDeImagen3D: TString;
    function GetArchivoSinImagen: TString;
    function GetArchivoDeImagen: TString;
    function GetArchivoDeImagen2DWeb: TString;
    function GetArchivoDeImagen3DWeb: TString;
    function GetArchivoDeImagenWeb: TString;
    function GetArchivoSinImagenWeb: TString;
    function GetEmpresasAsociadas: TEmpresaList;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    procedure SetCodigo(const Value: TString); Override;
  public
    constructor Create; override;
    function Save: Boolean; Override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda ): TReal;
    procedure Delete; override;
    property Observacion: TString read Fobservacion write Fobservacion;
    property TiempoEstimadoEnDias : TEntero read FtiempoEstimadoEnDias write FtiempoEstimadoEnDias;
    property EsEstandar: TBoolean read FesEstandar write FesEstandar;
    property FechaDeCreacion: TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property MarcaID: TObjectID read FmarcaID write SetmarcaID;
    property Marca: TMarca read Getmarca;
    property TipoDeDesarrolloID : TObjectID read FTipoDeDesarrolloID write SetTipoDeDesarrolloID;
    property TipoDeDesarrollo   : TTipoDeDesarrollo read GetTipoDeDesarrollo;
//    property Empresas: TDesarrolloEmpresaList read Getempresas;
    property ArticulosPosibles: TDesarrolloArticuloPosibleList read GetarticulosPosibles;
    property ArchivoDeImagen: TString read GetarchivoDeImagen;
    property ArchivoDeImagen3D: TString read GetarchivoDeImagen3D;
    property ArchivoDeImagen2D: TString read GetarchivoDeImagen2D;
    property ArchivoSinImagen: TString read GetarchivoSinImagen;
    property ArchivoDeImagenWeb: TString read GetarchivoDeImagenWeb;
    property ArchivoDeImagen3DWeb: TString read GetarchivoDeImagen3DWeb;
    property ArchivoDeImagen2DWeb: TString read GetarchivoDeImagen2DWeb;
    property ArchivoSinImagenWeb: TString read GetarchivoSinImagenWeb;
    property DescripcionMarca: TString read GetDescripcionMarca; // write FDescripcionMarca;
    property Precios : TDesarrolloPrecioList read GetPrecios;

    Property ComplejidadDeDesarrolloID : TObjectID read FComplejidadDeDesarrolloID write SetComplejidadDeDesarrolloID;
    Property ComplejidadDeDesarrollo   : TComplejidadDeDesarrollo read GetComplejidadDeDesarrollo;

    Property EmpresasAsociadas: TEmpresaList read GetEmpresasAsociadas;

end;

TDesarrolloDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
  const
    _Codigo               = 'Codigo';
    _Descripcion          = 'Desarrollo';
    _Observacion          = 'Observacion';
    _EsEstandar           = 'EsEstandar';
    _EsInactivo           = 'EsInactivo';
    _FechaDeCreacion      = 'FechaDeCreacion';
    _TiempoEstimadoEnDias = 'TiempoEstimadoEnDias';
    _MarcaID              = 'MarcaID';
    _TipoDeDesarrolloID   = 'TipoDeDesarrolloID';
    _ComplejidadDeDesarrolloID = 'ComplejidadDeDesarrolloID';
    // del createcompuesto
    _DescripcionMarca     = 'Marca';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TDesarrolloList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TDesarrollo;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  constructor CreateEmpty;
  constructor CreateByMarca(_M: TMarca; _SoloActivos: Boolean = True);
  constructor CreateByClienteAndArticuloAsociado(_A: TArticulo; _C: TCliente; _SoloActivos: Boolean = True);
  constructor CreateByMarcaAndArticuloAsociado(_A: TArticulo; _M: TMarca; _SoloActivos: Boolean = True);
  constructor CreateByMarcaAndArticuloAsociadoAndTipoDeDesarrollo(_A: TArticulo; _M: TMarca; _TD: TTipoDeDesarrollo ; _SoloActivos: Boolean = True);
  constructor CreateByArticuloAsociado(_A: TArticulo; _SoloActivos: Boolean = True);
  constructor CreateByClienteAndComponenteAsociadoAndMarca(_A: TArticulo; _C: TCliente; _M: TMarca; _SoloActivos: Boolean = True);
  constructor CreateByComponenteAsociado(_A: TArticulo; _SoloActivos: Boolean = True);
  function CreateNewObject: TPDObject; override;
  property Actual: TDesarrollo read GetActual;
end;

TDesarrolloEmpresa = class(TPDObject)
private
  Fempresa: TPDObject;
  FempresaID: TObjectID;
  FdesarrolloID: TObjectID;
  function Getempresa: TEmpresa;
public
  constructor Create; override;
  property desarrolloID: TObjectID read FdesarrolloID write FdesarrolloID;
  property empresaID: TObjectID read FempresaID write FempresaID;
  property empresa: TEmpresa read Getempresa;
end;

TDesarrolloEmpresaDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _desarrolloID = 'desarrolloID';
    _empresaID    = 'empresaID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TDesarrolloEmpresaList = class(TPDList)
private
  function GetActual: TDesarrolloEmpresa;
public
  constructor CreateAll ;
  constructor CreateByDesarrollo(_D: TDesarrollo);
  function CreateNewObject: TPDObject; override;
  property Actual: TDesarrolloEmpresa read GetActual;
end;

TDesarrolloArticuloPosible = class(TPDObject)
private
  Farticulo: TPDObject;
  FarticuloID: TObjectID;
  FdesarrolloID: TObjectID;
  FcomponenteID: TObjectID;
  FComponente: TPDObject;
  FDesarrollo: TPDObject;

  function Getarticulo: TArticulo;
  function GetComponente: TArticulo;
  function GetDesarrollo: TDesarrollo;
  procedure SetArticuloID(const Value: TObjectID);
  procedure SetcomponenteID(const Value: TObjectID);
public
  constructor Create; override;
  property desarrollo: TDesarrollo read GetDesarrollo;
  property desarrolloID: TObjectID read FdesarrolloID write FdesarrolloID;
  property articuloID: TObjectID read FarticuloID write SetArticuloID;
  property articulo: TArticulo read Getarticulo;
  property componenteID: TObjectID read FcomponenteID write SetcomponenteID;
  property componente: TArticulo read GetComponente;
end;

TDesarrolloArticuloPosibleDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _desarrolloID = 'desarrolloID';
      _articuloID   = 'articuloID';
      _ComponenteID = 'componenteID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TDesarrolloArticuloPosibleList = class(TPDList)
private
  function GetActual: TDesarrolloArticuloPosible;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByDesarrollo(_D: TDesarrollo);
  function CreateNewObject: TPDObject; override;
  property Actual: TDesarrolloArticuloPosible read GetActual;
end;

TDesarrolloPrecio = class(TPDObject)
private
  FMoneda : TPDObject;
  FMonedaID : TObjectID;
  FPrecio : TReal;
  FListaDePrecio : TPDObject;
  FListaDePrecioID : TObjectID;
  FDesarrollo : TPDObject;
  FDesarrolloID : TObjectID;
  FDesarrolloCodigo: TString;
  FDesarrolloDescripcion: TString;
  fListaDePrecioDescripcion: TString;
  fListaDePrecioCodigo: TString;
  fMonedaDescripcion: TString;
  fMonedaCodigo: TString;
  FDesarrolloMarca: TString;
  procedure SetDesarrolloID(Value : TObjectID);
  function GetDesarrollo : TDesarrollo;
  procedure SetListaDePrecioID(Value : TObjectID);
  function GetListaDePrecio : TListaDePrecio;
  procedure SetMonedaID(Value : TObjectID);
  function GetMoneda : TMoneda;
  function GetPrecio: TReal;
  procedure SetPrecio(const Value: TReal);
public
  constructor Create; override;
  property DesarrolloID : TObjectID read FDesarrolloID write SetDesarrolloID;
  property Desarrollo : TDesarrollo read GetDesarrollo;
  property ListaDePrecioID : TObjectID read FListaDePrecioID write SetListaDePrecioID;
  property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
  property Precio : TReal read GetPrecio write SetPrecio;
  property MonedaID : TObjectID read FMonedaID write SetMonedaID;
  property Moneda : TMoneda read GetMoneda;
  // del create compuesto
  property ListaDePrecioCodigo      : TString read fListaDePrecioCodigo;
  property ListaDePrecioDescripcion : TString read fListaDePrecioDescripcion;
  property DesarrolloCodigo         : TString read FDesarrolloCodigo;
  property DesarrolloDescripcion    : TString read FDesarrolloDescripcion;
  property DesarrolloMarca          : TString read FDesarrolloMarca;
  property MonedaCodigo             : TString read fMonedaCodigo;
  property MonedaDescripcion        : TString read fMonedaDescripcion;
end;

TDesarrolloPrecioDM = class(TSQLDBX_DMObject)
  strict protected
  class function CreateCompuesto(_Parte : Integer = 0): String; override;
public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _DesarrolloID    = 'DesarrolloID';
    _ListaDePrecioID            = 'ListaDePrecioID';
    _Precio                     = 'Precio';
    _MonedaID                   = 'MonedaID';
  // del create compuesto
    _CCListaDePrecioDescripcion = 'DescripcionLista';
    _CCListaDePrecioCodigo      = 'CodigoLista';
    _CCDesarrolloCodigo         = 'DesarrolloCodigo';
    _CCDesarrolloDescripcion    = 'DesarrolloDescripcion';
    _CCDesarrolloMarca          = 'DesarrolloMarca';
    _CCMonedaCodigo             = 'MonedaCodigo';
    _CCMonedaDescripcion        = 'MonedaDescripcion';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TDesarrolloPrecioList = class(TPDList)
private
  function GetActual : TDesarrolloPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByDesarrollo( _D : TDesarrollo ) ;
  constructor CreateByListaDePrecioAndDesarrollo( _LP : TListaDePrecio; _D : TDesarrollo ) ;
  function CreateNewObject: TPDObject; override;
  function FindDesarrollo( _D: TDesarrollo ): Boolean;
  function FindCodigoDesarrollo( _CD: String ): Boolean;
  property Actual : TDesarrolloPrecio read GetActual;
end;

TComplejidadDeDesarrollo = class(TDescriptibleAbreviado)
  private
    FExigePrecioEnDesarrollo        : TBoolean;
    FPreciosDeLista                 : TComplejidadDeDesarrolloPrecioList;
    FTipoDeDesarrolloID             : TObjectID;
    FTipoDeDesarrollo               : TPDObject;
    function GetPreciosDeLista: TComplejidadDeDesarrolloPrecioList;
    function GetTipoDeDesarrollo: TTipoDeDesarrollo;
    procedure SetTipoDeDesarrolloID(const Value: TObjectID);
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda ): TReal;
    property ExigePrecioEnDesarrollo : TBoolean read FExigePrecioEnDesarrollo write FExigePrecioEnDesarrollo;
    Property PreciosDeLista          : TComplejidadDeDesarrolloPrecioList Read GetPreciosDeLista;
    Property TipoDeDesarrolloID      : TObjectID Read FTipoDeDesarrolloID write SetTipoDeDesarrolloID;
    Property TipoDeDesarrollo        : TTipoDeDesarrollo Read GetTipoDeDesarrollo;
end;

TComplejidadDeDesarrolloDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Codigo                         = 'Codigo';
    _Descripcion                    = 'ComplejidadDeDesarrollo';
    _EsInactivo                     = 'EsInactivo';
    _ExigePrecioEnDesarrollo        = 'ExigePrecioDeListaEnDesarrollo';
    _TipoDeDesarrolloID             = 'TipoDeDesarrolloID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TComplejidadDeDesarrolloList = class(TDescriptibleAbreviadoList)
private
  function GetActual : TComplejidadDeDesarrollo;
public
  constructor CreateAll( _soloActivos: Boolean = false );
  constructor CreateByTipoDeDesarrolloID( _ID : TObjectID; _soloActivos: Boolean = false );
  function CreateNewObject: TPDObject; override;
  property Actual : TComplejidadDeDesarrollo read GetActual;
end;

TComplejidadDeDesarrolloPrecio = class(TPDObject)
  private
    FPrecio : TReal;
    FMonedaID : TObjectID;
    FMoneda : TPDObject;
    FListaDePrecioID : TObjectID;
    FListaDePrecio : TPDObject;
    FComplejidadDeDesarrolloID : TObjectID;
    FComplejidadDeDesarrollo : TPDObject;
    function GetComplejidadDeDesarrollo : TComplejidadDeDesarrollo;
    procedure SetComplejidadDeDesarrolloID(Value : TObjectID);
    function GetListaDePrecio : TListaDePrecio;
    procedure SetListaDePrecioID(Value : TObjectID);
    function GetMoneda : TMoneda;
    procedure SetMonedaID(Value : TObjectID);
  public
    constructor Create; override;
    property ComplejidadDeDesarrollo : TComplejidadDeDesarrollo read GetComplejidadDeDesarrollo;
    property ComplejidadDeDesarrolloID : TObjectID read FComplejidadDeDesarrolloID write SetComplejidadDeDesarrolloID;
    property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
    property ListaDePrecioID : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property Moneda : TMoneda read GetMoneda;
    property MonedaID : TObjectID read FMonedaID write SetMonedaID;
    property Precio : TReal read FPrecio write FPrecio;
end;

TComplejidadDeDesarrolloPrecioDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _ComplejidadDeDesarrolloID = 'ComplejidadDeDesarrolloID';
    _ListaDePrecioID           = 'ListaDePrecioID';
    _MonedaID                  = 'MonedaID';
    _Precio                    = 'Precio';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TComplejidadDeDesarrolloPrecioList = class(TPDList)
private
  function GetActual : TComplejidadDeDesarrolloPrecio;
public
  constructor CreateAll;
  constructor CreateByComplejidadDeDesarrollo (_C : TComplejidadDeDesarrollo);
  constructor CreateByListaDePrecio (_L : TListaDePrecio);
  constructor CreateEmpty;
  function FindCodigoComplejidad( _CD: String ): Boolean;
  function CreateNewObject: TPDObject; override;
  property Actual : TComplejidadDeDesarrolloPrecio read GetActual;
end;



TDescuentoPorCantidadVendida = class(TDescriptible)
  private
    FItems: TObject;
    function GetItems: TDescuentoPorCantidadVendidaItemList;
  public
    constructor Create; override;
    property Items: TDescuentoPorCantidadVendidaItemList read GetItems;
end;

TDescuentoPorCantidadVendidaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'DescuentoPorCantidadVendida';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TDescuentoPorCantidadVendidaList = class(TDescriptibleList)
  private
    function GetActual: TDescuentoPorCantidadVendida;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TDescuentoPorCantidadVendida read GetActual;
    function FindDescripcion(_Desc: String): Boolean;
end;

TDescuentoPorCantidadVendidaItem = class(TPDObject)
private
  FPorcentajeDescuento: TReal;
  FCantidadHasta: TEntero;
  FCantidadDesde: TEntero;
  FDescuentoPorCantidadVendidaID: TObjectID;
public
  constructor Create; override;
  function Save: Boolean; Override;
  property DescuentoPorCantidadVendidaID : TObjectID read FDescuentoPorCantidadVendidaID write FDescuentoPorCantidadVendidaID;
  property CantidadDesde: TEntero read FCantidadDesde write FCantidadDesde;
  property CantidadHasta: TEntero read FCantidadHasta write FCantidadHasta;
  property PorcentajeDescuento : TReal read FPorcentajeDescuento write FPorcentajeDescuento;
end;

TDescuentoPorCantidadVendidaItemDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _DescuentoPorCantidadVendidaID = 'descuentoPorCantidadVendidaID';
    _CantidadDesde                 = 'cantidadDesde';
    _CantidadHasta                 = 'cantidadHasta';
    _PorcentajeDescuento           = 'porcentajeDescuento';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TDescuentoPorCantidadVendidaItemList = class(TPDList)
private
  function GetActual: TDescuentoPorCantidadVendidaItem;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  constructor CreateByDescuento(_DPCV: TDescuentoPorCantidadVendida);
  function CreateNewObject: TPDObject; override;
  property Actual: TDescuentoPorCantidadVendidaItem read GetActual;
end;


TEstadoDeFactura = class(TDescriptibleAbreviado)
  private
    FEsEstadoCancelado: TBoolean;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsEstadoCancelado : TBoolean Read FEsEstadoCancelado Write FEsEstadoCancelado;
end;

TEstadoDeFacturaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo            = 'Codigo';
      _Descripcion       = 'EstadoDeFactura';
      _EsInactivo        = 'EsInactivo';
      _EsEstadoCancelado = 'EsEstadoCancelado';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeFacturaList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDeFactura;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDeFactura read GetActual;
end;

{ TEstadoDePedidoDeVenta }
TEstadoDePedidoDeVenta = class(TDescriptibleAbreviado)
  private
//    FCopiarPedidoAViejo       : TBoolean;
//    FCopiarPedidoASifab       : TBoolean;
    FCargarHojasDeRuta        : TBoolean;
    FEsEstadoDePedidoPendiente: TBoolean;
    FFiguraEnTiraDiaria: TBoolean;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
//    property CopiarPedidoASifab : TBoolean read FCopiarPedidoASifab write FCopiarPedidoASifab;
//    property CopiarPedidoAViejo : TBoolean read FCopiarPedidoAViejo write FCopiarPedidoAViejo;
    property CargarHojasDeRuta  : TBoolean read FCargarHojasDeRuta  write FCargarHojasDeRuta;
    property EsEstadoDePedidoPendiente  : TBoolean read FEsEstadoDePedidoPendiente  write FEsEstadoDePedidoPendiente;
    property FiguraEnTiraDiaria : TBoolean read FFiguraEnTiraDiaria  write FFiguraEnTiraDiaria;
end;

TEstadoDePedidoDeVentaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                     = 'Codigo';
      _Descripcion                = 'EstadoDePedidoDeVenta';
//      _CopiarPedidoASifab         = 'CopiarPedidoASifab';
//      _CopiarPedidoAViejo         = 'CopiarPedidoAViejo';
      _CargarHojasDeRuta          = 'CargarHojasDeRuta';
      _EsEstadoDePedidoPendiente  = 'EsEstadoDePedidoPendiente';
      _EsInactivo                 = 'EsInactivo';
      _FiguraEnTiraDiaria         = 'FiguraEnTiraDiaria';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePedidoDeVentaList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDePedidoDeVenta;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    constructor CreateEmpty;
    constructor CreateByEstadosDePedidoPendiente;
    constructor CreateByCodigosDeEstado(_SL: TStringList);
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDePedidoDeVenta read GetActual;
end;

TEstadoDePedidoDeVentaItem = class(TDescriptibleAbreviado)
  private
    FesEstadoDeItemPendiente: TBoolean;
    FesEstadoDeItemCumplido: TBoolean;
    FEsEstadoDeItemBloqueado: TBoolean;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsEstadoDeItemPendiente : TBoolean read FesEstadoDeItemPendiente write FesEstadoDeItemPendiente;
    property EsEstadoDeItemCumplido  : TBoolean read FesEstadoDeItemCumplido write FesEstadoDeItemCumplido;
    property EsEstadoDeItemBloqueado : TBoolean read FEsEstadoDeItemBloqueado write FEsEstadoDeItemBloqueado;
end;

TEstadoDePedidoDeVentaItemDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  const
    _Codigo                  = 'Codigo';
    _Descripcion             = 'EstadoDePedidoDeVentaItem';
    _EsEstadoDeItemPendiente = 'EsEstadoDeItemPendiente';
    _EsEstadoDeItemCumplido  = 'EsEstadoDeItemCumplido';
    _EsEstadoDeItemBloqueado = 'EsEstadoDeItemBloqueado';
    _EsInactivo              = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePedidoDeVentaItemList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDePedidoDeVentaItem;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByEstadosDeItemPendiente(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDePedidoDeVentaItem read GetActual;
end;

{ TEstadoDePresupuestoDeVenta }
TEstadoDePresupuestoDeVenta = class(TDescriptibleAbreviado)
private
protected
  function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TEstadoDePresupuestoDeVentaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'EstadoDePresupuestoDeVenta';
      _EsInactivo  = 'EsInactivo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePresupuestoDeVentaList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDePresupuestoDeVenta;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  constructor CreateEmpty;
  constructor CreateByCodigosDeEstado(_SL: TStringList);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDePresupuestoDeVenta read GetActual;
end;

TEstadoDePresupuestoDeVentaItem = class(TDescriptibleAbreviado)
protected
  function GetDescriptibleAbreviadoListClass  : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TEstadoDePresupuestoDeVentaItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'EstadoDePresupuestoDeVentaItem';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePresupuestoDeVentaItemList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDePresupuestoDeVentaItem;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDePresupuestoDeVentaItem read GetActual;
end;

{ TEstadoDePedidoDeProduccion }
TEstadoDePedidoDeProduccion = class(TDescriptibleAbreviado)
protected
  function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TEstadoDePedidoDeProduccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'EstadoDePedidoDeProduccion';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePedidoDeProduccionList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDePedidoDeProduccion;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  constructor CreateEmpty;
  constructor CreateByCodigosDeEstado(_SL: TStringList);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDePedidoDeProduccion read GetActual;
end;

TEstadoDePedidoDeProduccionItem = class(TDescriptibleAbreviado)
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TEstadoDePedidoDeProduccionItemDM = class(TSQLDBX_DMObject)
  public
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'EstadoDePedidoDeProduccionItem';
      _EsInactivo  = 'EsInactivo';
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePedidoDeProduccionItemList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDePedidoDeProduccionItem;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDePedidoDeProduccionItem read GetActual;
end;

{ TEstadoDeRemito }

TEstadoDeRemito = class(TDescriptibleAbreviado)
  private
    FSumaACantidadEnviada: TBoolean;
    FEsEstadoFacturado: TBoolean;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property SumaACantidadEnviada : TBoolean read FSumaACantidadEnviada write FSumaACantidadEnviada;
  property EsEstadoFacturado    : TBoolean read FEsEstadoFacturado    write FEsEstadoFacturado;
end;

TEstadoDeRemitoDM = class(TSQLDBX_DMObject)
  public
    class function TableName           : String; override;
    class function ID_FieldName        : String; override;
    class function EsInactivo_FieldName: String; override;
    Const
      _Codigo               = 'Codigo';
      _Descripcion          = 'EstadoDeRemito';
      _EsInactivo           = 'EsInactivo';
      _SumaACantidadEnviada = 'SumaACantidadEnviada';
      _EsEstadoFacturado    = 'EsEstadoFacturado';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeRemitoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDeRemito;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDeRemito read GetActual;
end;

{ TEstadoDePackingList}

TEstadoDePacking = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TEstadoDePackingDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo               = 'Codigo';
      _Descripcion          = 'EstadoDePacking';
      _EsInactivo           = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePackingList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDePacking;
  public
    constructor CreateAll( _SoloActivos: Boolean = False );
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDePacking read GetActual;
end;

{Estados de Hoja de ruta}
TEstadoDeHojaDeRuta = class(TDescriptibleAbreviado)
  private
    FEsEstadoNoProgramado  : Boolean;
    FEsEstadoCancelado     : Boolean;
    FEsEstadoEnFabricacion : Boolean;
    FColor                 : Integer;
    FEsEstadoCumplido      : Boolean;
    FEsEstadoReproceso     : Boolean;
    FEsEstadoEspecial: Boolean;
  Protected
    Function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  Public
    Constructor Create; override;
    Property EsEstadoCancelado     : Boolean Read FEsEstadoCancelado     Write FEsEstadoCancelado;
    Property EsEstadoCumplido      : Boolean Read FEsEstadoCumplido      Write FEsEstadoCumplido;
    Property EsEstadoNoProgramado  : Boolean Read FEsEstadoNoProgramado  Write FEsEstadoNoProgramado;
    Property EsEstadoEnFabricacion : Boolean Read FEsEstadoEnFabricacion Write FEsEstadoEnFabricacion;
    Property EsEstadoReproceso     : Boolean Read FEsEstadoReproceso     Write FEsEstadoReproceso;
    Property EsEstadoEspecial      : Boolean Read FEsEstadoEspecial      Write FEsEstadoEspecial;
    Property Color                 : Integer Read FColor                 Write FColor;
end;

TEstadoDeHojaDeRutaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                = 'Codigo';
      _Descripcion           = 'Descripcion';
      _EsEstadoCancelado     = 'EsEstadoCancelado';
      _EsEstadoCumplido      = 'EsEstadoCumplido';
      _EsEstadoNoProgramado  = 'EsEstadoNoProgramado';
      _EsEstadoEnFabricacion = 'EsEstadoEnFabricacion';
      _EsEstadoReproceso     = 'EsEstadoReproceso';
      _EsEstadoEspecial      = 'EsEstadoEspecial';
      _Color                 = 'Color';
      _EsInactivo            = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeHojaDeRutaList = class(TDescriptibleAbreviadoList)
private
  function GetActual : TEstadoDeHojaDeRuta;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TEstadoDeHojaDeRuta read GetActual;
end;

TEstadoDeStock = class(TDescriptibleAbreviado)
  private
    FOrden                  : TEntero;
    FEsAsignacionPedidoItem : Boolean;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property Orden           : TEntero read Forden write Forden;
    property EsAsignacionPedidoItem : Boolean Read FesAsignacionPedidoItem write FesAsignacionPedidoItem;
end;

TEstadoDeStockDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  Const
    _Codigo                 = 'Codigo';
    _Descripcion            = 'EstadoDeStock';
    _Orden                  = 'Orden';
    _EsAsignacionPedidoItem = 'EsAsignacionPedidoItem';
    _EsInactivo             = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeStockList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDeStock;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDeStock read GetActual;
end;

TComponenteDeMatriz = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TComponenteDeMatrizDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'ComponenteDeMatriz';
      _Codigo      = 'Codigo';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TComponenteDeMatrizList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TComponenteDeMatriz;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TComponenteDeMatriz read GetActual;
end;

TContactoDeEmpresa = class(TDescriptible)
  private
    FEmpresaID: TObjectID;
    FEmpresa: TPDObject;
    FCargoDeEmpresaID: TObjectID;
    FCargoDeEmpresa: TPDObject;
    FNumeroDeInterno: TString;
    FTelefono: TString;
    FCelular: TString;
    FEmail: TString;
    FEnviarEmail: Boolean;
    FCodigoSifab: TString;
    FObservacion: TString;
    FHabilitado: TBoolean;
    function Getempresa: TEmpresa;
    function GetCargoDeEmpresa: TCargoDeEmpresa;
    function GetCodigoContactoSifab: String;
    function GetCodigoDomicilioSifab: String;
    procedure Setemail(const Value: TString);
    procedure SetempresaID(Value: TObjectID);
    procedure SetCargoDeEmpresaID(const Value: TObjectID);
  public
    function Save: Boolean; Override;
    constructor Create; override;
    property EmpresaID: TObjectID read FempresaID write SetempresaID;
    property Empresa: TEmpresa read Getempresa;
    property Telefono: TString read FTelefono write FTelefono;
    property NumeroDeInterno : TString read FnumeroDeInterno write FnumeroDeInterno;
    property Celular: TString read FCelular write FCelular;
    property EnviarEmail: Boolean read FEnviarEmail write FEnviarEmail;
    property Email: TString read Femail write Setemail;
    property Observacion: TString read Fobservacion write Fobservacion;
    property CargoDeEmpresaID: TObjectID read FCargoDeEmpresaID write SetCargoDeEmpresaID;
    property CargoDeEmpresa: TCargoDeEmpresa read GetCargoDeEmpresa;
    property CodigoSifab: TString read FCodigoSifab write FCodigoSifab;
    Property CodigoContactoSifab: String Read GetCodigoContactoSifab;
    Property CodigoDomicilioSifab: String Read GetCodigoDomicilioSifab;
end;

TContactoDeEmpresaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion      = 'ContactoDeEmpresa';
      _Email            = 'Email';
      _NumeroDeInterno  = 'NumeroDeInterno';
      _Telefono         = 'Telefono';
      _Celular          = 'Celular';
      _EmpresaID        = 'EmpresaID';
      _CargoDeEmpresaID = 'CargoDeEmpresaID';
      _EnviarEmail      = 'EnviarEmail';
      _CodigoSifab      = 'CodigoSifab';
      _Observacion      = 'Observacion';
      _EsInactivo       = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TContactoDeEmpresaList = class(TDescriptibleList)
private
  function GetActual: TContactoDeEmpresa;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByEmpresa(_E: TAbstractEmpresa;_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TContactoDeEmpresa read GetActual;
  function FindDescripcion(_Desc: String): Boolean;
end;

TComposicionDeProducto = class
  class Procedure ArmarListaComponentes(_PL: TProductoList; _A: TArticulo; _T: TTerminacion; _C: TCunio);
end;

TCostoCunio = class(TPDObject)
private
  FCunio: TPDObject;
  FCunioID: TObjectID;
  FMoneda: TPDObject;
  FMonedaID: TObjectID;
  FCosto: TReal;
  FTipoDeCosto: TPDObject;
  FTipoDeCostoID: TObjectID;
  FCostoCunioID: TObjectID;
  procedure SetTipoDeCostoID(Value: TObjectID);
  function GetTipoDeCosto: TTipoDeCosto;
  procedure SetMonedaID(Value: TObjectID);
  function GetMoneda: TMoneda;
  procedure SetCunioID(Value: TObjectID);
  function GetCunio: TCunio;
public
  constructor Create; override;
  property CostoCunioID: TObjectID read FCostoCunioID write FCostoCunioID;
  property TipoDeCostoID : TObjectID read FTipoDeCostoID write SetTipoDeCostoID;
  property TipoDeCosto: TTipoDeCosto read GetTipoDeCosto;
  property Costo: TReal read FCosto write FCosto;
  property MonedaID: TObjectID read FMonedaID write SetMonedaID;
  property Moneda: TMoneda read GetMoneda;
  property CunioID: TObjectID read FCunioID write SetCunioID;
  property Cunio: TCunio read GetCunio;
end;

TCostoCunioDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _CostoCunioID  = 'CostoCunioID';
      _TipoDeCostoID = 'TipoDeCostoID';
      _Costo         = 'Costo';
      _MonedaID      = 'MonedaID';
      _CunioID       = 'CunioID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCostoCunioList = class(TPDList)
private
  function GetActual: TCostoCunio;
public
  constructor CreateAll;
  constructor CreateByCunio(_C: TCunio);
  function CreateNewObject: TPDObject; override;
  property Actual: TCostoCunio read GetActual;
end;

TCuentaContable = class(TDescriptibleAbreviado)
  private
    FSaldoInicial: TReal;
    FNivelDeCuenta: TEntero;
    FGrupoDeCuentasContables: TPDObject;
    FGrupoDeCuentasContablesID: TObjectID;
    FesImputable: TBoolean;
    FCuentaMadre: TPDObject;
    FCuentaMadreID: TObjectID;
    FGrabado: TBoolean;
    FMonedaID: TObjectID;
    FMoneda: TPDObject;
    FCodigoInternoSifab: TEntero;
    FIDTeamplace: TEntero;
    procedure SetcuentaMadreID(Value: TObjectID);
    function GetcuentaMadre: TCuentaContable;
    procedure SetgrupoDeCuentasContablesID(Value: TObjectID);
    function GetgrupoDeCuentasContables: TGrupoDeCuentasContables;
    function GetMoneda: TMoneda;
    procedure SetMonedaID(const Value: TObjectID);
    function GetCodigoInternoSifab: TEntero;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property Grabado: TBoolean Read FGrabado Write FGrabado;
    property CuentaMadreID: TObjectID read FcuentaMadreID write SetcuentaMadreID;
    property CuentaMadre: TCuentaContable read GetcuentaMadre;
    property MonedaID: TObjectID read FMonedaID write SetMonedaID;
    property Moneda: TMoneda read GetMoneda;
    property GrupoDeCuentasContablesID : TObjectID read FgrupoDeCuentasContablesID write SetgrupoDeCuentasContablesID;
    property GrupoDeCuentasContables: TGrupoDeCuentasContables read GetgrupoDeCuentasContables;
    property EsImputable: TBoolean read FesImputable write FesImputable;
    property SaldoInicial: TReal read FsaldoInicial write FsaldoInicial;
    property CodigoInternoSifab: TEntero read GetCodigoInternoSifab;
    Property IDTeamplace : TEntero read GetIDTeamplace;
end;

TCuentaContableDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo                    = 'Codigo';
      _Descripcion               = 'CuentaContable';
      _CuentaMadreID             = 'CuentamadreID';
      _GrupoDeCuentasContablesID = 'GrupoDeCuentasContablesID';
      _MonedaID                  = 'MonedaID';
      _EsImputable               = 'EsImputable';
      _Grabado                   = 'Grabado';
      _SaldoInicial              = 'SaldoInicial';
      _EsInactivo                = 'EsInactivo';
//Teamplace
      _TeamplaceTableName        = 'BSCuenta';
      _TeamplaceCodigo           = 'Codigo';
      _TeamplaceID               = 'CuentaID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCuentaContableList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TCuentaContable;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateBySortGrupoDeCuentas(_SoloActivos: Boolean = False);
  constructor CreateImputables( _SoloActivos: Boolean = False; _SoloDeEgreso: Boolean = False);
  constructor CreateImputablesByCodigoLike( _Like: String; _SoloActivos: Boolean = False; _SoloDeEgreso: Boolean = False);
  constructor CreateNotImputables( _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TCuentaContable read GetActual;
end;

TCunio = class(TDescriptibleAbreviado)
  private
    FarticulosPosibles: TCunioArticuloPosibleList;
    FTiempoEstimadoEnDiasDesarrollo: TEntero;
    FesCunioNuevo: TBoolean;
    FMonedaCostoDeMatriceria: TPDObject;
    FMonedaCostoDeMatriceriaID: TObjectID;
    FCostos: TCostoCunioList;
    FInsumos: TInsumoCunioList;
    FEmpresasAsociadas: TEmpresaList;
    FTiempoEstimadoEnDiasReposicion: TEntero;
    Fobservacion: TString;
    FEsCunioEstandar: TBoolean;
    FfechaDeCreacion: TFechaHora;
    FFueFacturado: TBoolean;
    Fmarca: TPDObject;
    FmarcaID: TObjectID;
    FDescripcionMarca: TString;
    FHorasDeMecanizadoEstimadas: TReal;
    FHorasDeMecanizadoReales: TReal;
    FArchivoDeImagen: TString;
    FArchivoDeImagen2D: TString;
    FArchivoSinImagen: TString;
    FArchivoDeImagenWeb: TString;
    FArchivoDeImagen2DWeb: TString;
    FArchivoSinImagenWeb: TString;
    FNumeroDeDesarrollo: TString;
    FPrecios: TCunioPrecioList;
    FFechaDeFinDeConstruccion: TFecha;
    FFechaModificacionFechaDeFinDeConst: TFechaHora;
    FUsuarioModificacionFechaFindeConstID: TObjectID;
    FFechaAsignacionFechaDeFinDeConst: TFechaHora;
    FUsuarioAsignacionFechaFindeConstID: TObjectID;
    FUsuarioAsignacionFechaFindeConst: TPDObject;
    FUsuarioModificacionFechaFindeConst: TPDObject;
    FFechaDeFinDeConstruccionOriginal: TFecha;
    FPreciosDeLista: TCunioPrecioDeListaList;
    FEsInyectado: TBoolean;
    FOrigenComercial: TPDObject;
    FOrigenComercialID: TObjectID;
    FFotoID: TObjectID;
    Function GetarticulosPosibles: TCunioArticuloPosibleList;
    Function GetCostos: TCostoCunioList;
    Function GetInsumos: TInsumoCunioList;
    function GetEmpresasAsociadas: TEmpresaList;
    Function GetCodigoSinCerosAdelante: TString;
    Procedure SetObservacion(const Value: TString);
    Function Getmarca: TMarca;
    Procedure SetmarcaID(const Value: TObjectID);
    Function GetTiempoEstimadoEnDias: TEntero;
    function GetDescripcionMarca: TString;
    function GetesCunioNuevo: TBoolean;
    function GetPrecios: TCunioPrecioList;
    Function GetarchivoDeImagen2D: TString;
    Function GetarchivoDeImagen: TString;
    Function GetarchivoSinImagen: TString;
    function GetarchivoDeImagenWeb: TString;
    function GetarchivoDeImagen2DWeb: TString;
    Function GetarchivoSinImagenWeb: TString;
    procedure SetUsuarioAsignacionFechaFindeConstID(const Value: TObjectID);
    procedure SetUsuarioModificacionFechaFindeConstID(const Value: TObjectID);
    function GetUsuarioAsignacionFechaFindeConst: TUsuario;
    function GetUsuarioModificacionFechaFindeConst: TUsuario;
    function GetPreciosDeLista: TCunioPrecioDeListaList;
    procedure SetOrigenComercialID(const Value: TObjectID);
    function GetOrigenComercial: TOrigenComercial;
    function GetFotoID: TObjectID;
  protected
    Function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  Public
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    Procedure Delete; override;
    Function Save: Boolean; Override;
    function GetLastNumber(_devolverDisponibleParaUsar: Boolean = False) : String;
//    function PrecioDeLista(_ListaDePrecioID: TObjectID ; _Moneda: TMoneda ): TReal;
    function CostoDeMatriceria(_ListaDePrecioID: TObjectID ; _Moneda: TMoneda ): TReal;
    property ArticulosPosibles: TCunioArticuloPosibleList read GetarticulosPosibles;
    property TiempoEstimadoEnDiasDesarrollo: TEntero read FTiempoEstimadoEnDiasDesarrollo write FTiempoEstimadoEnDiasDesarrollo;
    property TiempoEstimadoEnDiasReposicion: TEntero read FTiempoEstimadoEnDiasReposicion write FTiempoEstimadoEnDiasReposicion;
    property TiempoEstimadoEnDias: TEntero read GetTiempoEstimadoEnDias;
    function ArchivoDeImagenConArticuloTerminacion(_T: string; _A: string): TString;
    property ArchivoDeImagen: TString read GetarchivoDeImagen;
    property ArchivoDeImagen2D: TString read GetarchivoDeImagen2D;
    property ArchivoSinImagen: TString read GetarchivoSinImagen;
    property ArchivoDeImagenWeb: TString read GetarchivoDeImagenWeb;
    property ArchivoDeImagen2DWeb: TString read GetarchivoDeImagen2DWeb;
    property ArchivoSinImagenWeb: TString read GetarchivoSinImagenWeb;
    property FotoID: TObjectID Read GetFotoID;
    property EsCunioNuevo: TBoolean read GetesCunioNuevo;
    property EsInyectado: TBoolean read FEsInyectado write FEsInyectado;
    property MarcaID: TObjectID read FmarcaID write SetmarcaID;
    property Marca: TMarca read Getmarca;
    property Observacion: TString read Fobservacion write SetObservacion;
    property EsCunioEstandar : TBoolean read FEsCunioEstandar write FEsCunioEstandar;
    Property Costos: TCostoCunioList read GetCostos;
    Property Insumos: TInsumoCunioList read GetInsumos;
    Property EmpresasAsociadas: TEmpresaList read GetEmpresasAsociadas;
    Property PreciosDeLista: TCunioPrecioDeListaList read GetPreciosDeLista;

    property CodigoSinCerosAdelante               : TString read GetCodigoSinCerosAdelante;
    Property FechaDeCreacion                      : TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property FueFacturado                         : TBoolean read FFueFacturado write FFueFacturado;
    property HorasDeMecanizadoEstimadas           : TReal read FHorasDeMecanizadoEstimadas write FHorasDeMecanizadoEstimadas;
    property HorasDeMecanizadoReales              : TReal read FHorasDeMecanizadoReales write FHorasDeMecanizadoReales;
    property NumeroDeDesarrollo                   : TString read FNumeroDeDesarrollo Write FNumeroDeDesarrollo;
    property Precios                              : TCunioPrecioList read GetPrecios;
    property FechaDeFinDeConstruccion             : TFecha read FFechaDeFinDeConstruccion write FFechaDeFinDeConstruccion;
    Property FechaAsignacionFechaDeFinDeConst     : TFechaHora read FFechaAsignacionFechaDeFinDeConst write FFechaAsignacionFechaDeFinDeConst;
    Property UsuarioAsignacionFechaFindeConstID   : TObjectID read FUsuarioAsignacionFechaFindeConstID write SetUsuarioAsignacionFechaFindeConstID;
    Property FechaModificacionFechaDeFinDeConst   : TFechaHora read FFechaModificacionFechaDeFinDeConst write FFechaModificacionFechaDeFinDeConst;
    Property UsuarioModificacionFechaFindeConstID : TObjectID read FUsuarioModificacionFechaFindeConstID write SetUsuarioModificacionFechaFindeConstID;
    Property UsuarioAsignacionFechaFindeConst     : TUsuario read GetUsuarioAsignacionFechaFindeConst;
    Property UsuarioModificacionFechaFindeConst   : TUsuario read GetUsuarioModificacionFechaFindeConst;

    property OrigenComercialID : TObjectID        read FOrigenComercialID write SetOrigenComercialID;
    property OrigenComercial   : TOrigenComercial read GetOrigenComercial;

    // properties de marcas
    property DescripcionMarca : TString read GetDescripcionMarca write FDescripcionMarca;
    // temporal
    property FechaDeFinDeConstruccionOriginal : TFecha read FFechaDeFinDeConstruccionOriginal write FFechaDeFinDeConstruccionOriginal;

end;

TCunioDM = class(TSQLDBX_DMObject)
  protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      // Campos de cuños
      _Codigo                               = 'Codigo';
      _Descripcion                          = 'Cunio';
      _MarcaID                              = 'MarcaID';
      _MonedaCostoID                        = 'MonedaCostoID';
      _TiempoEstimadoEnDiasDesarrollo       = 'TiempoEstimadoEnDiasDesarrollo';
      _TiempoEstimadoEnDiasReposicion       = 'TiempoEstimadoEnDiasReposicion';
      _Observacion                          = 'Observacion';
      _EsInactivo                           = 'EsInactivo';
      _EsCunioEstandar                      = 'EsCunioEstandar';
      _FechaDeCreacion                      = 'FechaDeCreacion';
      _FechaDeFinDeConstruccion             = 'FechaDeFinDeConstruccion';
      _FechaAsignacionFechaDeFinDeConst     = 'FechaAsignacionFechaDeFinDeConst';
      _UsuarioAsignacionFechaFindeConstID   = 'UsuarioAsignacionFechaFindeConstID';
      _FechaModificacionFechaDeFinDeConst   = 'FechaModificacionFechaDeFinDeConst';
      _UsuarioModificacionFechaFindeConstID = 'UsuarioModificacionFechaFindeConstID';
      _FueFacturado                         = 'FueFacturado';
      _HorasDeMecanizadoEstimadas           = 'HorasDeMecanizadoEstimadas';
      _HorasDeMecanizadoReales              = 'HorasDeMecanizadoReales';
      _NumeroDeDesarrollo                   = 'NumeroDeDesarrollo';
      _EsInyectado                          = 'EsInyectado';
      _OrigenComercialID                    = 'OrigenComercialID';
      // del createcompuesto
      _DescripcionMarca                     = 'Marca';

    Procedure PopulateFields(PDObject: TPDObject); override;
    Procedure PopulateObject(PDObject: TPDObject); override;
end;

TCunioList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCunio;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateEmpty;
    constructor CreateByCliente(_C: TCliente; _SoloActivos: Boolean = True; _IncluyeEstandar: Boolean = True);
    constructor CreateByClienteAndArticuloAsociado(_A: TArticulo; _C: TCliente; _SoloActivos: Boolean = True ; _IncluyeEstandar: Boolean = True);
    constructor CreateByClienteAndComponenteAsociadoAndMarca(_A: TArticulo; _C: TCliente; _M: TMarca; _SoloActivos: Boolean = True; _IncluyeEstandar : Boolean = True);
    constructor CreateByClienteAndMarca  (_C: TCliente; _M: TMarca; _SoloActivos: Boolean = True ; _IncluyeEstandar: Boolean = True);

    constructor CreateByArticuloAsociado(_A: TArticulo; _SoloActivos: Boolean = True);
    constructor CreateByArticuloAsociadoLike(_A: TString; _SoloActivos : Boolean = False);
    constructor CreateByComponenteAsociado(_A: TArticulo; _SoloActivos: Boolean = True);

    constructor CreateByEstandar(_SoloActivos: Boolean = True);
    constructor CreateByMarca(_M: TMarca; _SoloActivos: Boolean = True);
    constructor CreateBySinMarca(_SoloActivos: Boolean = True);
    constructor CreateByMarcaAndArticuloAsociado(_A: TArticulo; _M: TMarca; _SoloActivos: Boolean = True ; _EvauluarProductoCompleto: Boolean = False);
    constructor CreateByNumeroDeDesarrollo(_Des: String; _SoloActivos: Boolean = True);
    constructor CreateByCodigoDesdeHasta(_Desde, _Hasta: String; _SoloActivos: Boolean = False);
    constructor CreateByMateriaPrima(_M: TMateriaPrima ; _SoloActivos:Boolean = False);
    constructor CreateTop;
    function CreateNewObject: TPDObject; override;
    property Actual: TCunio read GetActual;
end;

TCunioPrecio = class(TPDObject)
  private
    FCostoDeDesarrollo : TReal;
    FMoneda : TPDObject;
    FMonedaID : TObjectID;
    FPrecio : TReal;
    FListaDePrecio : TPDObject;
    FListaDePrecioID : TObjectID;
    FCunio : TPDObject;
    FCunioID : TObjectID;
    fListaDePrecioDescripcion: TString;
    FCunioDescripcion: TString;
    fListaDePrecioCodigo: TString;
    FCunioCodigo: TString;
    fMonedaDescripcion: TString;
    fMonedaCodigo: TString;
    fCunioMarca: TString;
    procedure SetCunioID(Value : TObjectID);
    function GetCunio : TCunio;
    procedure SetListaDePrecioID(Value : TObjectID);
    function GetListaDePrecio : TListaDePrecio;
    procedure SetMonedaID(Value : TObjectID);
    function GetMoneda : TMoneda;
    function GetPrecio: TReal;
    procedure SetPrecio(const Value: TReal);
  public
    constructor Create; override;
    property CunioID : TObjectID read FCunioID write SetCunioID;
    property Cunio : TCunio read GetCunio;
    property ListaDePrecioID : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
    property Precio : TReal read GetPrecio write SetPrecio;
    property MonedaID : TObjectID read FMonedaID write SetMonedaID;
    property Moneda : TMoneda read GetMoneda;
    property CostoDeDesarrollo : TReal read FCostoDeDesarrollo write FCostoDeDesarrollo;
    // del create compuesto
    property ListaDePrecioCodigo      : TString read fListaDePrecioCodigo;
    property ListaDePrecioDescripcion : TString read fListaDePrecioDescripcion;
    property CunioCodigo              : TString read FCunioCodigo;
    property CunioDescripcion         : TString read FCunioDescripcion;
    property CunioMarca               : TString read fCunioMarca;
    property MonedaCodigo             : TString read fMonedaCodigo;
    property MonedaDescripcion        : TString read fMonedaDescripcion;
end;

TCunioPrecioDM = class(TSQLDBX_DMObject)
  protected
    Class Function CreateCompuesto(_Parte : Integer = 0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _CunioID                    = 'CunioID';
      _ListaDePrecioID            = 'ListaDePrecioID';
      _Precio                     = 'Precio';
      _MonedaID                   = 'MonedaID';
      _CostoDeDesarrollo          = 'CostoDeDesarrollo';
    // del create compuesto
      _CCListaDePrecioDescripcion = 'DescripcionLista';
      _CCListaDePrecioCodigo      = 'CodigoLista';
      _CCCunioCodigo              = 'CunioCodigo';
      _CCCunioDescripcion         = 'CunioDescripcion';
      _CCCunioMarca               = 'CunioMarca';
      _CCMonedaCodigo             = 'MonedaCodigo';
      _CCMonedaDescripcion        = 'MonedaDescripcion';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCunioPrecioList = class(TPDList)
private
  function GetActual : TCunioPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByCunio( _C : TCunio ) ;
  constructor CreateByListaDePrecioAndCunio( _LP : TListaDePrecio; _C : TCunio ) ;
  function CreateNewObject: TPDObject; override;
  function FindCunio( _C: TCunio ): Boolean;
  function FindCodigoCunio( _CC: String ): Boolean;
  property Actual : TCunioPrecio read GetActual;
end;


TCunioPrecioDeLista = class(TPDObject)
  private
    FTipoDePrecioID : TObjectID;
    FTipoDePrecio : TPDObject;
    FPrecio : TReal;
    FMonedaID : TObjectID;
    FMoneda : TPDObject;
    FMaterialID : TObjectID;
    FMaterial : TPDObject;
    FListaDePrecioID : TObjectID;
    FListaDePrecio : TPDObject;
    FFamiliaID : TObjectID;
    FFamilia : TPDObject;
    FCunioID : TObjectID;
    FCampoDeBusquedaID : TObjectID;
    FCunio:  TPDObject;
    fCunioMarca: TString;
    fListaDePrecioDescripcion: TString;
    FCunioDescripcion: TString;
    fMonedaDescripcion: TString;
    fCunioEsInyectado: TBoolean;
    fCunioEsEstandar: TBoolean;
    fListaDePrecioCodigo: TString;
    FCunioCodigo: TString;
    fMonedaCodigo: TString;
    FCampoDeBusquedaCodigo: TString;
    FCampoDeBusquedaDescripcion: TString;
    FPrecioAutorizado: TReal;
    procedure SetCunioID(Value : TObjectID);
    function GetFamilia : TFamiliaDeArticulo;
    procedure SetFamiliaID(Value : TObjectID);
    function GetListaDePrecio : TListaDePrecio;
    procedure SetListaDePrecioID(Value : TObjectID);
    function GetMaterial : TMaterial;
    procedure SetMaterialID(Value : TObjectID);
    function GetMoneda : TMoneda;
    procedure SetMonedaID(Value : TObjectID);
    function GetTipoDePrecio : TTipoDePrecioCunio;
    procedure SetTipoDePrecioID(Value : TObjectID);
    function GetCunio: TCunio;
//    del cc
    function GetCunioCodigo: TString;
    function GetCunioDescripcion: TString;
    function GetCunioEsEstandar: TBoolean;
    function GetCunioEsInyectado: TBoolean;
    function GetCunioMarca: TString;
    function GetListaDePrecioCodigo: TString;
    function GetListaDePrecioDescripcion: TString;
    function GetMonedaCodigo: TString;
    function GetMonedaDescripcion: TString;
    function GetCampoDeBusquedaCodigo: TString;
    function GetCampoDeBusquedaDescripcion: TString;
    procedure SetCampoDeBusquedaID(const Value: TObjectID);

  public
    constructor Create; override;

    property CampoDeBusquedaID          : TObjectID read FCampoDeBusquedaID write SetCampoDeBusquedaID;
    property CampoDeBusquedaCodigo      : TString read GetCampoDeBusquedaCodigo;
    property CampoDeBusquedaDescripcion : TString read GetCampoDeBusquedaDescripcion;

    property CunioID : TObjectID read FCunioID write SetCunioID;
    property Cunio : TCunio read GetCunio;
    property Familia : TFamiliaDeArticulo read GetFamilia;
    property FamiliaID : TObjectID read FFamiliaID write SetFamiliaID;
    property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
    property ListaDePrecioID : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property Material : TMaterial read GetMaterial;
    property MaterialID : TObjectID read FMaterialID write SetMaterialID;
    property Moneda : TMoneda read GetMoneda;
    property MonedaID : TObjectID read FMonedaID write SetMonedaID;
    property Precio : TReal read FPrecio write FPrecio;
    property PrecioAutorizado : TReal read FPrecioAutorizado write FPrecioAutorizado;
    property TipoDePrecio : TTipoDePrecioCunio read GetTipoDePrecio;
    property TipoDePrecioID : TObjectID read FTipoDePrecioID write SetTipoDePrecioID;

    // del create compuesto
    property ListaDePrecioCodigo      : TString read GetListaDePrecioCodigo;
    property ListaDePrecioDescripcion : TString read GetListaDePrecioDescripcion;
    property CunioCodigo              : TString read GetCunioCodigo;
    property CunioDescripcion         : TString read GetCunioDescripcion;
    property CunioMarca               : TString read GetCunioMarca;
    property CunioEsInyectado         : TBoolean read GetCunioEsInyectado;
    property CunioEsEstandar          : TBoolean read GetCunioEsEstandar;
    property MonedaCodigo             : TString read GetMonedaCodigo;
    property MonedaDescripcion        : TString read GetMonedaDescripcion;
end;

TCunioPrecioDeListaDM = class(TSQLDBX_DMObject)
  protected
    Class Function CreateCompuesto(_Parte : Integer = 0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _CampoDeBusquedaID  = 'CampoBusquedaID';
    _CunioID            = 'CunioID';
    _FamiliaID          = 'FamiliaID';
    _ListaDePrecioID    = 'ListaDePrecioID';
    _MaterialID         = 'MaterialID';
    _MonedaID           = 'MonedaID';
    _Precio             = 'Precio';
    _PrecioAutorizado   = 'PrecioAutorizado';
    _TipoDePrecioID     = 'TipoDePrecioID';

// del create compuesto
    _CCListaDePrecioDescripcion = 'DescripcionLista';
    _CCListaDePrecioCodigo      = 'CodigoLista';
    _CCCunioCodigo              = 'CunioCodigo';
    _CCCunioDescripcion         = 'CunioDescripcion';
    _CCCunioEsInyectado         = 'CunioEsInyectado';
    _CCCunioEsEstandar          = 'CunioEsEstandar';
    _CCCunioMarca               = 'CunioMarca';
    _CCMonedaCodigo             = 'MonedaCodigo';
    _CCMonedaDescripcion        = 'MonedaDescripcion';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCunioPrecioDeListaList = class(TPDList)
private
  function GetActual : TCunioPrecioDeLista;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByCunio( _C: TCunio);
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByListaDePrecioAndCunio( _LP : TListaDePrecio; _C : TCunio ) ;
  constructor CreateByListaFamiliaMaterialTipo( _CunioID, _ListaID, _FamiliaID, _MaterialID, _TipoDePrecioID, _CampoDeBusquedaID: TObjectID  );

  function CreateNewObject: TPDObject; override;
  function FindCunio( _C: TCunio ): Boolean;
  function FindCodigoCunio( _CC: String ): Boolean;

  property Actual : TCunioPrecioDeLista read GetActual;
end;

TCunioArticuloPosible = class(TPDObject)
  private
    Farticulo: TPDObject;
    FarticuloID: TObjectID;
    FComponente: TPDObject;
    FcomponenteID: TObjectID;
    FCunioID: TObjectID;
    FCunio: TPDObject;
    FHerramentales: TCunioArticuloPosibleHerramentalList;
    function GetCunio: TCunio;
    procedure SetCunioID(Value: TObjectID);
    procedure SetArticuloID(Value: TObjectID);
    function Getarticulo: TArticulo;
    function GetComponente: TArticulo;
    procedure SetcomponenteID(const Value: TObjectID);
    function GetHerramentales: TCunioArticuloPosibleHerramentalList;
  public
    constructor Create; override;
    Procedure Delete; override;
    function Save: Boolean; Override;
    property Cunio        : TCunio read GetCunio;
    property CunioID      : TObjectID read FCunioID write SetCunioID;
    property ArticuloID   : TObjectID read FArticuloID write SetArticuloID;
    property Articulo     : TArticulo read Getarticulo;
    property ComponenteID : TObjectID read FComponenteID write SetComponenteID;
    property Componente   : TArticulo read GetComponente;
    property Herramentales : TCunioArticuloPosibleHerramentalList read GetHerramentales ;
end;

TCunioArticuloPosibleDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _CunioID      = 'CunioID';
    _ArticuloID   = 'ArticuloID';
    _ComponenteID = 'ComponenteID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCunioArticuloPosibleList = class(TPDList)
private
  function GetActual: TCunioArticuloPosible;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByCunio(_C: TCunio);
  constructor CreateByArticulo(_A: TArticulo);
  constructor CreateByArticuloYCunio(_A: TArticulo; _C: TCunio);
  constructor CreateByArticuloYCliente(_A: TArticulo; _C: TCliente);
  function CreateNewObject: TPDObject; override;
  property Actual: TCunioArticuloPosible read GetActual;
  function FindArticulo(_A: TArticulo): Boolean;
  function FindComponente(_A: TArticulo): Boolean;
end;

TTerminacion = class(TDescriptibleAbreviado)
  private
    FprocesosPosibles: TOBject;
    FtiposdeCosto: TOBject;
    FInsumos: TOBject;
    FnumeroDeOrden: TReal;
    FTraducciones: TOBject;
    FIdentificaMatriz: TBoolean;
    FtiempoEstimadoEnDias: TEntero;
    FarchivoDeImagen: TString;
    FarchivoSinImagen: TString;
    FfechaDeCreacion: TFechaHora;
    FRequiereProceso: TBoolean;
    FComponentesTerminacionesDefault: TOBject;
    FPrecios: TTerminacionPrecioList;
    FarchivoDeImagenWeb: TString;
    FarchivoSinImagenWeb: TString;
    FGrupoDeTerminacionEspecial: TPDObject;
    FGrupoDeTerminacionEspecialID: TObjectID;
    FCCGrupoDeTerminacionEspecialDescripcion: TString;
    FAjustarPrecioPorTerminacionEspecial: TBoolean;
    FCuentasContabilidadDeCostos: TTerminacionCuentaContabilidadDeCostosList;
    FObservaciones: TString;
    FEsNatural: TBoolean;
    function GetarchivoDeImagen: TString;
    function GetarchivoDeImagenWeb: TString;
    function GetarchivoSinImagen: TString;
    function GetarchivoSinImagenWeb: TString;
    function GettiposdeCosto: TTerminacionTipoDeCostoList;
    function GetprocesosPosibles: TTerminacionProcesoPosibleList;
    function GetInsumos: TTerminacionInsumoList;
    function GetTraducciones: TTerminacionTraduccionList;
    function GetComponentesTerminacionesDefault: TTerminacionComponenteTerminacionDefaultList;
    function GetPrecios: TTerminacionPrecioList;
    procedure SetGrupoDeTerminacionEspecialID(const Value: TObjectID);
    function GetGrupoDeTerminacionEspecial: TGrupoDeTerminacionEspecial;
    function GetCCGrupoDeTerminacionEspecialDescripcion: TString;
    function GetCuentasContabilidadDeCostos: TTerminacionCuentaContabilidadDeCostosList;
  protected
    Function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  Public
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    function Save: Boolean; Override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _Articulo: TArticulo; _Cunio : TCunio; _TipoDePrecioID: TObjectID ): TReal;
    procedure Delete; override;
    procedure ClearComponentesTerminacionesDefault;
    Property GrupoDeTerminacionEspecialID : TObjectID read FGrupoDeTerminacionEspecialID write SetGrupoDeTerminacionEspecialID;
    Property GrupoDeTerminacionEspecial   : TGrupoDeTerminacionEspecial read GetGrupoDeTerminacionEspecial;
    property NumeroDeOrden: TReal read FnumeroDeOrden write FnumeroDeOrden;
    property ArchivoDeImagen: TString read GetarchivoDeImagen;
    property ArchivoDeImagenWeb: TString read GetarchivoDeImagenWeb;
    property ArchivoSinImagen: TString read GetarchivoSinImagen;
    property ArchivoSinImagenWeb: TString read GetarchivoSinImagenWeb;
    property TiempoEstimadoEnDias : TEntero read FtiempoEstimadoEnDias write FtiempoEstimadoEnDias;
    property FechaDeCreacion : TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property IdentificaMatriz : TBoolean read FIdentificaMatriz write FIdentificaMatriz;
    property EsNatural : TBoolean read FEsNatural write FEsNatural;
    property RequiereProceso : TBoolean read FRequiereProceso write FRequiereProceso;
    Property AjustarPrecioPorTerminacionEspecial : TBoolean read FAjustarPrecioPorTerminacionEspecial write FAjustarPrecioPorTerminacionEspecial;
    Property Observaciones : TString read FObservaciones write FObservaciones;

    property Precios : TTerminacionPrecioList read GetPrecios;
    property Traducciones: TTerminacionTraduccionList read GetTraducciones;
    property TiposdeCosto: TTerminacionTipoDeCostoList read GettiposdeCosto;
    property CuentasContabilidadDeCostos : TTerminacionCuentaContabilidadDeCostosList read GetCuentasContabilidadDeCostos;
    property ComponentesTerminacionesDefault: TTerminacionComponenteTerminacionDefaultList read GetComponentesTerminacionesDefault;
    property ProcesosPosibles: TTerminacionProcesoPosibleList read GetprocesosPosibles;
    property Insumos: TTerminacionInsumoList read GetInsumos;
    // del create compuesto
    Property CCGrupoDeTerminacionEspecialDescripcion : TString read GetCCGrupoDeTerminacionEspecialDescripcion;
end;

TTerminacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
    Const
      _Codigo                              = 'Codigo';
      _descripcion                         = 'Terminacion';
      _numeroDeOrden                       = 'NumeroDeOrden';
      _EsInactivo                          = 'EsInactivo';
      _IdentificaMatriz                    = 'IdentificaMatriz';
      _tiempoEstimadoEnDias                = 'TiempoEstimadoEnDias';
      _fechaDeCreacion                     = 'FechaDeCreacion';
      _requiereProceso                     = 'RequiereProceso';
      _GrupoDeTerminacionEspecialID        = 'GrupoDeTerminacionEspecialID';
      _AjustarPrecioPorTerminacionEspecial = 'AjustarPrecioPorTerminacionEspecial';
      _Observaciones                       = 'Observaciones';
      _EsNatural                           = 'EsNatural';
      // del create compuesto
      _CCGTDescripcion                       = 'GrupoDeTerminacionEspecialDescripcion';
      _CCGTRecargo                           = 'PorcentajeRecargo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTerminacion;
public
  constructor CreateAll( _SoloActivos: Boolean = False; _IncluyeIdentificaMatriz: Boolean = False); reintroduce; Overload;
  constructor CreateByNaturales( _SoloActivos: Boolean = False);
  constructor CreateByNaturalesAndCodigoLike( _C : String; _SoloActivos: Boolean = False);
  constructor CreateEmpty;
  constructor CreateByInicialCodigo(_I: string);

  //Para la app mobile
  constructor CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _SoloActivos: Boolean = True; _IncluyeIdentificaMatriz: Boolean = False; _StartRow : Integer = 0 ; _Rows : Integer = 0 );
  constructor CreateAll(_SoloActivos: Boolean = True; _IncluyeIdentificaMatriz: Boolean = False; _StartRow : Integer = 0 ; _Rows : Integer = 0 ); reintroduce; Overload;


  // para mobile


  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacion read GetActual;
end;

TGrupoDeTerminacionEspecial = class(TDescriptible)
  private
    FRecargosPorMaterial: TGrupoDeTerminacionRecargoMaterialList;
  protected
    function GetRecargosPorMaterial: TGrupoDeTerminacionRecargoMaterialList;
    Function SePuedeBorrar: Boolean;
  public
    constructor Create; override;
    procedure Delete; override;
    Property RecargosPorMaterial : TGrupoDeTerminacionRecargoMaterialList read GetRecargosPorMaterial;
end;

TGrupoDeTerminacionEspecialDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion       = 'GrupoDeTerminacionEspecial';
    _EsInactivo        = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeTerminacionEspecialList = class(TDescriptibleList)
private
  function GetActual : TGrupoDeTerminacionEspecial;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property Actual : TGrupoDeTerminacionEspecial read GetActual;
end;

TGrupoDeTerminacionRecargoMaterial = class(TPDObject)
  private
    FPorcentajeDeRecargo : TReal;
    FMaterialID : TObjectID;
    FMaterial : TPDObject;
    FGrupoDeTerminacionEspecialID : TObjectID;
    function GetMaterial : TMaterial;
    procedure SetMaterialID(Value : TObjectID);
  public
    constructor Create; override;
    property GrupoDeTerminacionEspecialID : TObjectID read FGrupoDeTerminacionEspecialID write FGrupoDeTerminacionEspecialID;
    property Material : TMaterial read GetMaterial;
    property MaterialID : TObjectID read FMaterialID write SetMaterialID;
    property PorcentajeDeRecargo : TReal read FPorcentajeDeRecargo write FPorcentajeDeRecargo;
end;

TGrupoDeTerminacionRecargoMaterialDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _GrupoDeTerminacionEspecialID = 'GrupoDeTerminacionEspecialID';
    _MaterialID                   = 'MaterialDeArticuloID';
    _PorcentajeDeRecargo          = 'PorcentajeDeRecargo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeTerminacionRecargoMaterialList = class(TPDList)
private
  function Getactual : TGrupoDeTerminacionRecargoMaterial;
public
  constructor CreateAll;
  constructor CreateByGrupoDeTerminacionEspecial( _GTE : TGrupoDeTerminacionEspecial );
  function CreateNewObject: TPDObject; override;
  function FindMaterial( _M: TMaterial ): Boolean;
  property actual : TGrupoDeTerminacionRecargoMaterial read Getactual;
end;

TTerminacionTraduccion = class(TTraduccion)
private
  FterminacionID: TObjectID;
  Fterminacion: TPDObject;
  function Getterminacion: TTerminacion;
  procedure SetterminacionID(Value: TObjectID);
public
  constructor Create; override;
  property terminacion: TTerminacion read Getterminacion;
  property terminacionID : TObjectID read FterminacionID write SetterminacionID;
end;

TTerminacionTraduccionDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _terminacionID      = 'terminacionID';
    _resourceLanguageID = 'resourceLanguageID';
    _Descripcion        = 'terminacion';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionTraduccionList = class(TTraduccionList)
private
  function GetActual: TTerminacionTraduccion;
public
  constructor CreateByTerminacion(_T: TTerminacion);
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionTraduccion read GetActual;
end;

TTerminacionInsumo = class(TPDObject)
private
  FMateriaPrima: TPDObject;
  FMateriaPrimaID: TObjectID;
  FterminacionID: TObjectID;
  procedure SetMateriaPrimaID(Value: TObjectID);
  function GetMateriaPrima: TMateriaPrima;
public
  constructor Create; override;
  property TerminacionID: TObjectID read FterminacionID write FterminacionID;
  property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
  property MateriaPrima: TMateriaPrima read GetMateriaPrima;
end;

TTerminacionInsumoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _terminacionID = 'terminacionID';
    _MateriaPrimaID = 'MateriaPrimaID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionInsumoList = class(TPDList)
private
  function GetActual: TTerminacionInsumo;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByTerminacion(_T: TTerminacion);
  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionInsumo read GetActual;
end;

TTerminacionPrecio = class(TPDObject)
  private
    FMoneda : TPDObject;
    FMonedaID : TObjectID;
    FPrecio : TReal;
    FListaDePrecio : TPDObject;
    FListaDePrecioID : TObjectID;
    FTerminacion : TPDObject;
    FTerminacionID : TObjectID;
    FTerminacionDescripcion: TString;
    fListaDePrecioDescripcion: TString;
    FTerminacionCodigo: TString;
    fListaDePrecioCodigo: TString;
    fMonedaDescripcion: TString;
    fMonedaCodigo: TString;
    fGrupoDeTeminacionEspecial: TString;
    FExigePrecioEnCunio: TBoolean;
    procedure SetTerminacionID(Value : TObjectID);
    function GetTerminacion : TTerminacion;
    procedure SetListaDePrecioID(Value : TObjectID);
    function GetListaDePrecio : TListaDePrecio;
    procedure SetMonedaID(Value : TObjectID);
    function GetMoneda : TMoneda;
    function GetPrecio: TReal;
    procedure SetPrecio(const Value: TReal);
  public
    constructor Create; override;
    property TerminacionID             : TObjectID read FTerminacionID write SetTerminacionID;
    property Terminacion               : TTerminacion read GetTerminacion;
    property ListaDePrecioID           : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property ListaDePrecio             : TListaDePrecio read GetListaDePrecio;
    property Precio                    : TReal read GetPrecio write SetPrecio;
    property MonedaID                  : TObjectID read FMonedaID write SetMonedaID;
    property Moneda                    : TMoneda read GetMoneda;
    Property ExigePrecioEnCunio        : TBoolean Read FExigePrecioEnCunio Write FExigePrecioEnCunio;
    // del create compuesto
    property ListaDePrecioCodigo       : TString read fListaDePrecioCodigo;
    property ListaDePrecioDescripcion  : TString read fListaDePrecioDescripcion;
    property TerminacionCodigo         : TString read FTerminacionCodigo;
    property TerminacionDescripcion    : TString read FTerminacionDescripcion;
    property MonedaCodigo              : TString read fMonedaCodigo;
    property MonedaDescripcion         : TString read fMonedaDescripcion;
    property GrupoDeTeminacionEspecial : TString read fGrupoDeTeminacionEspecial;
end;

TTerminacionPrecioDM = class(TSQLDBX_DMObject)
protected
  class function CreateCompuesto(_Parte: Integer=0): String; override;
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _TerminacionID      = 'TerminacionID';
    _ListaDePrecioID    = 'ListaDePrecioID';
    _Precio             = 'Precio';
    _MonedaID           = 'MonedaID';
    _ExigePrecioEnCunio = 'ExigePrecioEnCunio';
// del create compuesto
    _CCListaDePrecioDescripcion  = 'DescripcionLista';
    _CCListaDePrecioCodigo       = 'CodigoLista';
    _CCTerminacionCodigo         = 'TerminacionCodigo';
    _CCTerminacionDescripcion    = 'TerminacionDescripcion';
    _CCMonedaCodigo              = 'MonedaCodigo';
    _CCMonedaDescripcion         = 'MonedaDescripcion';
    _CCGrupoDeTeminacionEspecial = 'GrupoDeTeminacionEspecial';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionPrecioList = class(TPDList)
private
  function GetActual : TTerminacionPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByTerminacion( _T : TTerminacion ) ;
  constructor CreateByListaDePrecioAndTerminacion( _LP : TListaDePrecio; _T : TTerminacion ) ;

  function CreateNewObject: TPDObject; override;
  function FindTerminacion( _T: TTerminacion ): Boolean;
  function FindCodigoTerminacion( _CT: String ): Boolean;

  property Actual : TTerminacionPrecio read GetActual;
end;

TTerminacionTipoDeCosto = class(TPDObject)
private
  FTipoDeCosto: TPDObject;
  FTipoDeCostoID: TObjectID;
  FterminacionID: TObjectID;
  Fterminacion: TPDObject;
  procedure SetTipoDeCostoID(Value: TObjectID);
  function GetTipoDeCosto: TTipoDeCosto;
  procedure AutomatizarTipoDeCostoEnTerminacionEnCategorias;
  function Getterminacion: TTerminacion;
  procedure SetterminacionID(const Value: TObjectID);
public
  constructor Create; override;
  procedure Delete; override;
  function Save: Boolean; override;
  property TipoDeCostoID : TObjectID read FTipoDeCostoID write SetTipoDeCostoID;
  property TipoDeCosto   : TTipoDeCosto read GetTipoDeCosto;
  property terminacionID : TObjectID read FterminacionID write SetterminacionID;
  property terminacion   : TTerminacion read Getterminacion;
end;

TTerminacionTipoDeCostoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _TipoDeCostoID = 'TipoDeCostoID';
    _TerminacionID = 'TerminacionID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionTipoDeCostoList = class(TPDList)
private
  function GetActual: TTerminacionTipoDeCosto;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByTerminacion(_T: TTerminacion);
  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionTipoDeCosto read GetActual;
end;


TTerminacionCuentaContabilidadDeCostos = class(TPDObject)
  private
    FTerminacionID : TObjectID;
    FCuentaContableID : TObjectID;
    FCuentaContable : TPDObject;
    function GetCuentaContable : TCuentaContable;
    procedure SetCuentaContableID(Value : TObjectID);
  public
    constructor Create; override;
    property CuentaContable : TCuentaContable read GetCuentaContable;
    property CuentaContableID : TObjectID read FCuentaContableID write SetCuentaContableID;
    property TerminacionID : TObjectID read FTerminacionID write FTerminacionID;
end;

TTerminacionCuentaContabilidadDeCostosDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CuentaContableID = 'CuentaContableID';
    _TerminacionID = 'TerminacionID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionCuentaContabilidadDeCostosList = class(TPDList)
private
  function Getactual : TTerminacionCuentaContabilidadDeCostos;
public
  constructor CreateAll;
  constructor CreateByTerminacion( _T : TTerminacion );
  function CreateNewObject: TPDObject; override;
  property actual : TTerminacionCuentaContabilidadDeCostos read Getactual;
end;


TTerminacionProcesoPosible = class(TPDObject)
private
  Fproceso: TPDObject;
  FprocesoID: TObjectID;
  FterminacionID: TObjectID;
  FtiposdeCosto: TTerminacionProcesoPosibleTipodeCostoList;
  FUsaColor: TBoolean;
  procedure SetprocesoID(Value: TObjectID);
  function Getproceso: TProceso;
  function GettiposdeCosto: TTerminacionProcesoPosibleTipodeCostoList;
  function getUsaColor: TBoolean;
public
  constructor Create; override;
  procedure Delete; override;
  property procesoID: TObjectID read FprocesoID write SetprocesoID;
  property proceso: TProceso read Getproceso;
  property terminacionID: TObjectID read FterminacionID write FterminacionID;
  property tiposdeCosto: TTerminacionProcesoPosibleTipodeCostoList read GettiposdeCosto;
  property usaColor: TBoolean read getUsaColor;
end;

TTerminacionProcesoPosibleDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _ProcesoID     = 'ProcesoID';
      _TerminacionID = 'TerminacionID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionProcesoPosibleList = class(TPDList)
private
  function GetActual: TTerminacionProcesoPosible;
public
  constructor CreateAll;
  constructor CreateByTerminacion(_T: TTerminacion);
  constructor CreateByTerminacionYProceso(_T: TTerminacion; _P: TProceso);
  constructor CreateByTerminacionYProcesoLike(_T: TTerminacion; _cod: TString);
  function Find(_P: TProceso): Boolean; overload;
  function FindCodigo(_cod: String): Boolean; overload;
  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionProcesoPosible read GetActual;
end;

TTerminacionProcesoPosibleTipodeCosto = class(TPDObject)
private
  FTipoDeCostoID: TObjectID;
  FTipoDeCosto: TPDObject;
  FterminacionProcesoPosibleID: TObjectID;
  FterminacionProcesoPosible: TPDObject;
  function GetTipoDeCosto: TTipoDeCosto;
  procedure SetTipoDeCostoID(Value: TObjectID);
  function GetterminacionProcesoPosible: TTerminacionProcesoPosible;
  procedure SetterminacionProcesoPosibleID(const Value: TObjectID);
  procedure AutomatizarCostoEnProcesosDeTerminacionesEnCategorias;
public
  constructor Create; override;
  function Save: Boolean; override;
  procedure Delete; override;
  property TipoDeCosto: TTipoDeCosto read GetTipoDeCosto;
  property TipoDeCostoID : TObjectID read FTipoDeCostoID write SetTipoDeCostoID;
  property terminacionProcesoPosible: TTerminacionProcesoPosible read GetterminacionProcesoPosible;
  property terminacionProcesoPosibleID : TObjectID read FterminacionProcesoPosibleID write SetterminacionProcesoPosibleID;
end;

TTerminacionProcesoPosibleTipoDeCostoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
 const
    _TipoDeCostoID     = 'TipoDecostoID';
    _TermProcPosibleID = 'TermProcPosibleID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionProcesoPosibleTipodeCostoList = class(TPDList)
private
  function GetActual: TTerminacionProcesoPosibleTipodeCosto;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByTerminacionProcesoPosible(_TPP: TTerminacionProcesoPosible; _SoloActivos: Boolean  = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionProcesoPosibleTipodeCosto read GetActual;
end;

TTerminacionComponenteTerminacionDefault = class(TPDObject)
private
  FTerminacionDefault: TPDObject;
  FTerminacionDefaultID: TObjectID;
  FTipoDeComponente: TPDObject;
  FTipoDeComponenteID: TObjectID;
  FterminacionID: TObjectID;
  procedure SetTipoDeComponenteID(Value: TObjectID);
  function GetTipoDeComponente: TTipoDeComponente;
  procedure SetTerminacionDefaultID(Value: TObjectID);
  function GetTerminacionDefault: TTerminacion;
public
  constructor Create; override;
  property terminacionID: TObjectID read FterminacionID write FterminacionID;
  property TipoDeComponenteID: TObjectID read FTipoDeComponenteID write SetTipoDeComponenteID;
  property TipoDeComponente: TTipoDeComponente read GetTipoDeComponente;
  property TerminacionDefaultID: TObjectID read FTerminacionDefaultID write SetTerminacionDefaultID;
  property TerminacionDefault: TTerminacion read GetTerminacionDefault;
end;

TTerminacionComponenteTerminacionDefaultDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _TerminacionID        = 'TerminacionID';
    _TipoDeComponenteID   = 'TipoDeComponenteID';
    _TerminacionDefaultID = 'TerminacionDefaultID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTerminacionComponenteTerminacionDefaultList = class(TPDList)
private
  function GetActual: TTerminacionComponenteTerminacionDefault;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByTerminacion(_T: TTerminacion);
  constructor CreateByTerminacionDefault(_TD: TTerminacion);
  constructor CreateByTerminacionAndTipoDeComponente(_T: TTerminacion; _TC: TTipoDeComponente);
  constructor CreateByTipoDeComponente(_TC: TTipoDeComponente);

  function Find(_TC: TTipoDeComponente): Boolean; overload;

  function CreateNewObject: TPDObject; override;
  property Actual: TTerminacionComponenteTerminacionDefault read GetActual;
end;


TTipoDeMovimientoDeStock = class(TDescriptible)
   private
    FAsignaPedido : TBoolean;
    FEsAjusteDeMateriaPrima : TBoolean;
    FEstadoDestino : TPDObject;
    FDepositoDestino : TPDObject;
    FEstadoOrigen : TPDObject;
    FDepositoOrigen : TPDObject;
    FEstadoDestinoID : TObjectID;
    FDepositoDestinoID : TObjectID;
    FEstadoOrigenID : TObjectID;
    FDepositoOrigenID : TObjectID;
    FusaDepositoDestinoVirtualCliente: TBoolean;
    FusaDepositoOrigenVirtualCliente: TBoolean;
    FEsAjusteDeSemielaborados: TBoolean;
    procedure SetDepositoOrigenID(Value : TObjectID);
    procedure SetEstadoOrigenID(Value : TObjectID);
    procedure SetDepositoDestinoID(Value : TObjectID);
    procedure SetEstadoDestinoID(Value : TObjectID);
    function GetDepositoOrigen : TDeposito;
    function GetEstadoOrigen : TEstadoDeStock;
    function GetDepositoDestino : TDeposito;
    function GetEstadoDestino : TEstadoDeStock;
  public
    constructor Create; override;
    property DepositoOrigenID : TObjectID read FDepositoOrigenID write SetDepositoOrigenID;
    property usaDepositoOrigenVirtualCliente: TBoolean read FusaDepositoOrigenVirtualCliente write FusaDepositoOrigenVirtualCliente;
    property EstadoOrigenID : TObjectID read FEstadoOrigenID write SetEstadoOrigenID;
    property DepositoDestinoID : TObjectID read FDepositoDestinoID write SetDepositoDestinoID;
    property usaDepositoDestinoVirtualCliente: TBoolean read FusaDepositoDestinoVirtualCliente write FusaDepositoDestinoVirtualCliente;
    property EstadoDestinoID : TObjectID read FEstadoDestinoID write SetEstadoDestinoID;
    property DepositoOrigen : TDeposito read GetDepositoOrigen;
    property EstadoOrigen : TEstadoDeStock read GetEstadoOrigen;
    property DepositoDestino : TDeposito read GetDepositoDestino;
    property EstadoDestino : TEstadoDeStock read GetEstadoDestino;
    property EsAjusteDeMateriaPrima : TBoolean read FEsAjusteDeMateriaPrima write FEsAjusteDeMateriaPrima;
    property EsAjusteDeSemielaborados : TBoolean read FEsAjusteDeSemielaborados write FEsAjusteDeSemielaborados;
    property AsignaPedido : TBoolean read FAsignaPedido write FAsignaPedido;
end;

TTipoDeMovimientoDeStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _descripcion                      = 'TipoDeMovimientoDeStock';
      _DepositoOrigenID                 = 'DepositoOrigenID';
      _usaDepositoOrigenVirtualCliente  = 'usaDepositoOrigenVirtualCliente';
      _EstadoOrigenID                   = 'EstadoOrigenID';
      _DepositoDestinoID                = 'DepositoDestinoID';
      _usaDepositoDestinoVirtualCliente = 'usaDepositoDestinoVirtualCliente';
      _EstadoDestinoID                  = 'EstadoDestinoID';
      _EsAjusteDeMateriaPrima           = 'EsAjusteDeMateriaPrima';
      _EsAjusteDeSemielaborados         = 'EsAjusteDeSemielaborados';
      _AsignaPedido                     = 'AsignaPedido';
      _EsInactivo                       = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeMovimientoDeStockList = class(TDescriptibleList)
private
  function GetActual : TTipoDeMovimientoDeStock;
public
  constructor CreateAll( _SoloActivos : Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TTipoDeMovimientoDeStock read GetActual;
end;


TCargoDeEmpresaItem = class(TPDObject)
  private
    FCargoDeEmpresaID: TObjectID;
    FFormularioID: TObjectID;
    FFormulario: TPDObject;
    Function GetFormulario: TFormulario;
    Procedure SetFormularioID(Value: TObjectID);
    Procedure SetCargoDeEmpresaID(const Value: TObjectID);
  public
    Constructor Create; override;
    Property CargoDeEmpresaID: TObjectID read FCargoDeEmpresaID write SetCargoDeEmpresaID;
    Property Formulario: TFormulario read GetFormulario;
    Property FormularioID: TObjectID read FFormularioID write SetFormularioID;
end;

TCargoDeEmpresaItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _FormularioID            = 'FormularioID';
      _CargoDeEmpresaID        = 'CargoDeEmpresaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCargoDeEmpresaItemList = class(TPDList)
private
  function GetActual: TCargoDeEmpresaItem;
public
  property Actual: TCargoDeEmpresaItem read GetActual;
  constructor CreateAll;
  constructor CreateByCargoDeEmpresa(_CE: TCargoDeEmpresa);
  function CreateNewObject: TPDObject; override;
  function FindFormularioCodigo(_FormularioCodigo: String): Boolean; overload;
end;

TCargoDeEmpresa = class(TDescriptible)
  private
    FItems: TCargoDeEmpresaItemList;
    function GetItems: TCargoDeEmpresaItemList;
  public
    constructor Create; override;
    property Items: TCargoDeEmpresaItemList read GetItems;
end;

TCargoDeEmpresaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'CargoDeEmpresa';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCargoDeEmpresaList = class(TDescriptibleList)
private
  function GetActual: TCargoDeEmpresa;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TCargoDeEmpresa read GetActual;
end;

TFeriado = class(TDescriptible)
  private
    FSeAdelanta : TBoolean;
    FFecha : TFecha;
  public
    constructor Create; override;
    property Fecha      : TFecha read FFecha write FFecha;
    property SeAdelanta : TBoolean read FSeAdelanta write FSeAdelanta;
end;

TFeriadoDM = class(TSQLDBX_DMObject)
  public
    const
      _Fecha                = 'Fecha';
      _SeAdelanta           = 'SeAdelanta';
      _Descripcion          = 'Feriado';
      _SP_Feriado_By_Fecha  = 'Feriado_By_Fecha';
      _SP_Feriados_Futuros  = 'Feriados_Futuros';
      _EsInactivo           = 'EsInactivo';  
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFeriadoList = class(TDescriptibleList)
private
  function GetActual : TFeriado;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor SP_Feriado_By_Fecha( _F: Tfecha ); // devuelve una fecha si es feriado
  constructor SP_Feriados_Futuros( _F: TFecha ); // devuelve una fecha si es feriado
  constructor CreateFeriadosByMes(_Month: Word ; _Year : Word; _SoloActivos: Boolean = False );
  constructor CreateFeriadosByFechaDesdeFechaHasta(_FechaDesde: TFecha ; _FechaHasta: TFecha; _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TFeriado read GetActual;
end;

TFormulario = class(TDescriptibleAbreviado)
  private
    FTiposDeFormulario       : TOBject;
    FObservacionDefaultID    : TObjectID;
    FObservacionDefault      : TPDObject;
    FEsFormularioAFIP        : TBoolean;
    FOrganizacionesDeMonitor : TOrganizacionDeMonitorList;
    FCodigoInternoSifab      : TEntero;
    FTipodeAsientoID         : TObjectID;
    FTipodeAsiento           : TPDObject;
    FEsFormularioFacturable  : TBoolean;
    function GetTiposDeFormulario: TTipoDeFormularioList;
    function GetObsercacionDefault: TFormularioObservacion;
    function GetOrganizacionesDeMonitor: TOrganizacionDeMonitorList;
    function GetCodigoInternoSifab: TEntero;
    function GetTipodeAsiento: TTipodeAsiento;
    procedure SetTipodeAsientoID(const Value: TObjectID);
    procedure SetObservacionDefaultID(const Value: TObjectID);
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property ObservacionDefaultID    : TObjectID read FObservacionDefaultID write SetObservacionDefaultID;
    property ObservacionDefault      : TFormularioObservacion Read GetObsercacionDefault;
    property EsFormularioAFIP        : TBoolean Read FEsFormularioAFIP write FEsFormularioAFIP;
    property EsFormularioFacturable  : TBoolean Read FEsFormularioFacturable write FEsFormularioFacturable;
    property TiposDeFormulario       : TTipoDeFormularioList read GetTiposDeFormulario;
    property OrganizacionesDeMonitor : TOrganizacionDeMonitorList read GetOrganizacionesDeMonitor;
    property TipodeAsientoID         : TObjectID read FTipodeAsientoID write SetTipodeAsientoID;
    property TipodeAsiento           : TTipodeAsiento Read GetTipodeAsiento;
    property CodigoInternoSifab      : TEntero read GetCodigoInternoSifab;
end;

TFormularioDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                 = 'Codigo';
      _Descripcion            = 'Formulario';
      _EsFormularioAFIP       = 'EsFormularioAFIP';
      _ObservacionDefaultID   = 'ObservacionDefaultID';
      _EsInactivo             = 'EsInactivo';
      _TipoDeAsientoID        = 'TipoDeAsientoID';
      _EsFormularioFacturable = 'EsFacturable';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFormularioList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TFormulario;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TFormulario read GetActual;
end;

{ Organizacion de Monitores}
TOrganizacionDeMonitor = class(TPDObject)
  private
    FMonitor            : TString;
    FNombreMonitor      : TString;
    FEstadosPermitidos  : TPDList;
    FFormularioID       : TObjectID;
    FFormulario         : TPDObject;
    FEsMonitorExpo      : TBoolean;
    FEsMonitorLocal     : TBoolean;
    function GetEstadosPermitidos: TOrganizacionDeMonitorEstadoPermitidoList;
    procedure SetFormularioID(const Value: TObjectID);
    function GetFormulario: TFormulario;
  public
    constructor Create; override;
    procedure Delete; override;
    property FormularioID       : TObjectID read FFormularioID write SetFormularioID;
    property Formulario         : TFormulario read GetFormulario;
    property Monitor            : TString read FMonitor write FMonitor;
    property NombreMonitor      : TString read FNombreMonitor write FNombreMonitor;
    property EstadosPermitidos  : TOrganizacionDeMonitorEstadoPermitidoList read GetEstadosPermitidos;
    Property EsMonitorLocal     : TBoolean Read FEsMonitorLocal Write FEsMonitorLocal;
    Property EsMonitorExpo      : TBoolean Read FEsMonitorExpo Write FEsMonitorExpo;
end;

TOrganizacionDeMonitorDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _Monitor        = 'Monitor';
      _NombreMonitor  = 'NombreMonitor';
      _FormularioID   = 'FormularioID';
      _EsMonitorLocal = 'EsMonitorLocal';
      _EsMonitorExpo  = 'EsMonitorExpo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TOrganizacionDeMonitorList = class(TPDList)
private
  function GetActual : TOrganizacionDeMonitor;
public
  constructor CreateAll;
  constructor CreateByMonitor(_MonitorClass:String);
  constructor CreateByFormularioID(_FID : TObjectID);
  function CreateNewObject: TPDObject; override;
  property Actual : TOrganizacionDeMonitor read GetActual;
end;

{ TOrganizacionDeMonitorEstadoPermitido}
TOrganizacionDeMonitorEstadoPermitido = class(TPDObject)
  private
    FOrganizacionDeMonitorID     : TObjectID;
    FEstadoDePedidoDeVentaID     : TObjectID;
    FEstadoDePedidoDeVenta       : TPDObject;
    FOrganizacionDeMonitor       : TPDObject;
    FEstadoDeRemito              : TPDObject;
    FEstadoDeRemitoID            : TObjectID;
    FEstadoDeHojaDeRutaID        : TObjectID;
    FEstadoDeHojaDeRuta          : TPDObject;
    FEstadoDePresupuestoDeVentaID: TObjectID;
    FEstadoDePresupuestoDeVenta  : TPDObject;
    FEstadoDeAjusteDeStockID     : TObjectID;
    FEstadoDeAjusteDeStock       : TPDObject;
    FEstadoDeFacturaID           : TObjectID;
    FEstadoDeFactura             : TPDObject;
    FEstadoDeCierreDeStock       : TPDObject;
    FEstadoDeCierreDeStockID     : TObjectID;
    FAccionesPermitidas          : TPDList;
    procedure SetOrganizacionDeMonitorID(const Value: TObjectID);
    function GetOrganizacionDeMonitor: TOrganizacionDeMonitor;
    function GetAccionesPermitidas: TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList;
    procedure SetEstadoDePedidoDeVentaID(const Value: TObjectID);
    function GetEstadoDePedidoDeVenta: TEstadoDePedidoDeVenta;
    procedure SetEstadoDeRemitoID(const Value: TObjectID);
    function GetEstadoDeRemito: TEstadoDeRemito;
    procedure SetEstadoDeHojaDeRutaID(const Value: TObjectID);
    function GetEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
    procedure SetEstadoDePresupuestoDeVentaID(const Value: TObjectID);
    function GetEstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta;
    procedure SetEstadoDeAjusteDeStockID(const Value: TObjectID);
    function GetEstadoDeAjusteDeStock: TEstadoDeAjusteDeStock;
    procedure SetEstadoDeFacturaID(const Value: TObjectID);
    function GetEstadoDeFactura: TEstadoDeFactura;
    procedure SetEstadoDeCierreDeStockID(const Value: TObjectID);
    function GetEstadoDeCierreDeStock: TEstadoDeCierreDeStock;
  public
    constructor Create; override;
    procedure Delete; override;
    property OrganizacionDeMonitorID      : TObjectID read FOrganizacionDeMonitorID write SetOrganizacionDeMonitorID;
    property OrganizacionDeMonitor        : TOrganizacionDeMonitor read GetOrganizacionDeMonitor;
    property EstadoDePedidoDeVentaID      : TObjectID read FEstadoDePedidoDeVentaID write SetEstadoDePedidoDeVentaID;
    property EstadoDePedidoDeVenta        : TEstadoDePedidoDeVenta read GetEstadoDePedidoDeVenta;
    property EstadoDePresupuestoDeVentaID : TObjectID read FEstadoDePresupuestoDeVentaID write SetEstadoDePresupuestoDeVentaID;
    property EstadoDePresupuestoDeVenta   : TEstadoDePresupuestoDeVenta read GetEstadoDePresupuestoDeVenta;
    property EstadoDeRemitoID             : TObjectID read FEstadoDeRemitoID write SetEstadoDeRemitoID;
    property EstadoDeRemito               : TEstadoDeRemito read GetEstadoDeRemito;
    property EstadoDeFacturaID            : TObjectID read FEstadoDeFacturaID write SetEstadoDeFacturaID;
    property EstadoDeFactura              : TEstadoDeFactura read GetEstadoDeFactura;
    property EstadoDeHojaDeRutaID         : TObjectID read FEstadoDeHojaDeRutaID write SetEstadoDeHojaDeRutaID;
    property EstadoDeHojaDeRuta           : TEstadoDeHojaDeRuta read GetEstadoDeHojaDeRuta;
    property EstadoDeAjusteDeStockID      : TObjectID read FEstadoDeAjusteDeStockID write SetEstadoDeAjusteDeStockID;
    property EstadoDeAjusteDeStock        : TEstadoDeAjusteDeStock read GetEstadoDeAjusteDeStock;
    property EstadoDeCierreDeStockID      : TObjectID read FEstadoDeCierreDeStockID write SetEstadoDeCierreDeStockID;
    property EstadoDeCierreDeStock        : TEstadoDeCierreDeStock read GetEstadoDeCierreDeStock;
    property AccionesPermitidas           : TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList read GetAccionesPermitidas;
end;

TOrganizacionDeMonitorEstadoPermitidoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _OrganizacionDeMonitorID      = 'OrganizacionDeMonitorID';
      _EstadoDePedidoDeVentaID      = 'EstadoDePedidoDeVentaID';
      _EstadoDeRemitoID             = 'EstadoDeRemitoID';
      _EstadoDeHojaDeRutaID         = 'EstadoDeHojaDeRutaID';
      _EstadoDePresupuestoDeVentaID = 'EstadoDePresupuestoDeVentaID';
      _EstadoDeAjusteDeStockID      = 'EstadoDeAjusteDeStockID';
      _EstadoDeCierreDeStockID      = 'EstadoDeCierreDeStockID';
      _EstadoDeFacturaID            = 'EstadoDeFacturaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TOrganizacionDeMonitorEstadoPermitidoList = class(TPDList)
private
  function GetActual : TOrganizacionDeMonitorEstadoPermitido;
public
  constructor CreateAll;
  Constructor CreateByMonitorPadre( _MonitorPadre : TOrganizacionDeMonitor );
  function CreateNewObject: TPDObject; override;
  property Actual : TOrganizacionDeMonitorEstadoPermitido read GetActual;
  function FindEstadoDePedidoDeVentaID     ( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDePresupuestoDeVentaID( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDeRemitoID            ( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDeFacturaID           ( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDeHojaDeRutaID        ( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDeAjusteDeStockID     ( _ID : TObjectID ) : boolean; overload;
  function FindEstadoDeCierreDeStockID     ( _ID : TObjectID ) : boolean; overload;
end;

{ OrganizacionDeMonitorEstadoPermitidoAccionPermitida}

TOrganizacionDeMonitorEstadoPermitidoAccionPermitida = class(TPDObject)
  private
    FOrganizacionDeMonitorEstadoPermitido   : TPDObject;
    FOrganizacionDeMonitorEstadoPermitidoID : TObjectID;
    FRequiereComentario                     : Boolean;
    FEstadoDePedidoAccionPermitidaID        : TObjectID;
    FEstadoDePedidoAccionPermitida          : TPDObject;
    FEstadoDeRemitoAccionPermitidaID        : TObjectID;
    FEstadoDeRemitoAccionPermitida          : TPDObject;
    FEstadoDeHojaDeRutaAccionPermitidaID    : TObjectID;
    FEstadoDeHojaDeRutaAccionPermitida      : TPDObject;
    FEstadoDePresupuestoAccionPermitida     : TPDObject;
    FEstadoDePresupuestoAccionPermitidaID   : TObjectID;
    FEstadoDeAjusteDeStockAccionPermitidaID : TObjectID;
    FEstadoDeAjusteDeStockAccionPermitida   : TPDObject;
    FEstadoDeFacturaAccionPermitidaID       : TObjectID;
    FEstadoDeFacturaAccionPermitida         : TPDObject;
    FEstadoDeCierreDeStockAccionPermitidaID : TObjectID;
    FEstadoDeCierreDeStockAccionPermitida   : TPDObject;
    procedure SetOrganizacionDeMonitorEstadoPermitidoID(Value : TObjectID);
    function GetOrganizacionDeMonitorEstadoPermitido: TPDObject;
    procedure SetEstadoDePedidoAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDePedidoAccionPermitida: TEstadoDePedidoDeVenta;
    procedure SetEstadoDeRemitoAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDeRemitoAccionPermitida: TEstadoDeRemito;
    procedure SetEstadoDeHojaDeRutaAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDeHojaDeRutaAccionPermitida: TEstadoDeHojaDeRuta;
    procedure SetEstadoDePresupuestoAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDePresupuestoAccionPermitida: TEstadoDePresupuestoDeVenta;
    procedure SetEstadoDeAjusteDeStockAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDeAjusteDeStockAccionPermitida: TEstadoDeAjusteDeStock;
    function GetEstadoDeFacturaAccionPermitida: TEstadoDeFactura;
    procedure SetEstadoDeFacturaAccionPermitidaID(const Value: TObjectID);
    function GetEstadoDeCierreDeStockAccionPermitida: TEstadoDeCierreDeStock;
    procedure SetEstadoDeCierreDeStockAccionPermitidaID(const Value: TObjectID);
  public
    constructor Create; override;
    Property EstadoDePedidoAccionPermitidaID        : TObjectID Read FEstadoDePedidoAccionPermitidaID Write SetEstadoDePedidoAccionPermitidaID;
    Property EstadoDePedidoAccionPermitida          : TEstadoDePedidoDeVenta Read GetEstadoDePedidoAccionPermitida;
    Property EstadoDePresupuestoAccionPermitidaID   : TObjectID Read FEstadoDePresupuestoAccionPermitidaID Write SetEstadoDePresupuestoAccionPermitidaID;
    Property EstadoDePresupuestoAccionPermitida     : TEstadoDePresupuestoDeVenta Read GetEstadoDePresupuestoAccionPermitida;
    Property EstadoDeRemitoAccionPermitidaID        : TObjectID Read FEstadoDeRemitoAccionPermitidaID Write SetEstadoDeRemitoAccionPermitidaID;
    Property EstadoDeRemitoAccionPermitida          : TEstadoDeRemito Read GetEstadoDeRemitoAccionPermitida;
    Property EstadoDeFacturaAccionPermitidaID       : TObjectID Read FEstadoDeFacturaAccionPermitidaID Write SetEstadoDeFacturaAccionPermitidaID;
    Property EstadoDeFacturaAccionPermitida         : TEstadoDeFactura Read GetEstadoDeFacturaAccionPermitida;
    Property EstadoDeHojaDeRutaAccionPermitidaID    : TObjectID Read FEstadoDeHojaDeRutaAccionPermitidaID Write SetEstadoDeHojaDeRutaAccionPermitidaID;
    Property EstadoDeHojaDeRutaAccionPermitida      : TEstadoDeHojaDeRuta Read GetEstadoDeHojaDeRutaAccionPermitida;
    Property EstadoDeAjusteDeStockAccionPermitidaID : TObjectID Read FEstadoDeAjusteDeStockAccionPermitidaID Write SetEstadoDeAjusteDeStockAccionPermitidaID;
    Property EstadoDeAjusteDeStockAccionPermitida   : TEstadoDeAjusteDeStock Read GetEstadoDeAjusteDeStockAccionPermitida;
    Property EstadoDeCierreDeStockAccionPermitidaID : TObjectID Read FEstadoDeCierreDeStockAccionPermitidaID Write SetEstadoDeCierreDeStockAccionPermitidaID;
    Property EstadoDeCierreDeStockAccionPermitida   : TEstadoDeCierreDeStock Read GetEstadoDeCierreDeStockAccionPermitida;
    property OrganizacionDeMonitorEstadoPermitidoID : TObjectID read FOrganizacionDeMonitorEstadoPermitidoID write SetOrganizacionDeMonitorEstadoPermitidoID;
    property OrganizacionDeMonitorEstadoPermitido   : TPDObject read GetOrganizacionDeMonitorEstadoPermitido ;
    property RequiereComentario                     : Boolean read FRequiereComentario write FRequiereComentario;
end;

TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _OrganizacionDeMonitorEstadoPermitidoID  = 'OrganizacionDeMonitorEstadoPermitidoID';
      _EstadoDePedidoAccionPermitidaID         = 'EstadoDePedidoAccionPermitidaID';
      _EstadoDeRemitoAccionPermitidaID         = 'EstadoDeRemitoAccionPermitidaID';
      _EstadoDeFacturaAccionPermitidaID        = 'EstadoDeFacturaAccionPermitidaID';
      _EstadoDeHojaDeRutaAccionPermitidaID     = 'EstadoDeHojaDeRutaAccionPermitidaID';
      _EstadoDePresupuestoAccionPermitidaID    = 'EstadoDePresupuestoAccionPermitidaID';
      _EstadoDeAjusteDeStockAccionPermitidaID  = 'EstadoDeAjusteDeStockAccionPermitidaID';
      _EstadoDeCierreDeStockAccionPermitidaID  = 'EstadoDeCierreDeStockAccionPermitidaID';
      _RequiereComentario                      = 'RequiereComentario';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList = class(TPDList)
private
  function GetActual : TOrganizacionDeMonitorEstadoPermitidoAccionPermitida;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  Constructor CreateByEstadoPadre( _EstadoPadre : TOrganizacionDeMonitorEstadoPermitido  );
  property Actual : TOrganizacionDeMonitorEstadoPermitidoAccionPermitida read GetActual;
  function FindAccionPermitidaPedidos       ( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaPresupuestos  ( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaRemitos       ( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaFacturas      ( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaHojasDeRuta   ( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaAjustesDeStock( _AccPer : TString ) : boolean; overload;
  function FindAccionPermitidaCierresDeStock( _AccPer : TString ) : boolean; overload;
end;

TTipoDeFormularioAccionStock = class(TPDObject)
  private
    FTipoDeMovimientoDeStock   : TPDObject;
    FTipoDeMovimientoDeStockID : TObjectID;
    FPasoDeFabricacionID       : TObjectID;
    FEstadoDeRemito            : TPDObject;
    FEstadoDeRemitoID          : TObjectID;
    FEstadoDePedidoItem        : TPDObject;
    FEstadoDePedidoItemID      : TObjectID;
    FEsHojaDeRuta              : TBoolean;
    FEsRemito                  : TBoolean;
    FEsPedido                  : TBoolean;
    FTipoDeFormularioID        : TObjectID;
    FPasoDeFabricacion         : TPDObject;
    FesAjusteDeStock           : TBoolean;
    FComentario                 : Tstring;
    FEstadoDePedidoItemOrigen   : TPDObject;
    FEstadoDePedidoItemOrigenID : TObjectID;
    FEstadoDeRemitoOrigenID     : TObjectID;
    FEstadoDeRemitoOrigen       : TPDObject;
    procedure SetTipoDeMovimientoDeStockID(Value : TObjectID);
    procedure SetestadoDePedidoItemID(Value : TObjectID);
    procedure SetEstadoDePedidoItemOrigenID(const Value: TObjectID);
    procedure SetestadoDeRemitoID(Value : TObjectID);
    procedure SetEstadoDeRemitoOrigenID(const Value: TObjectID);
    function GetestadoDePedidoItem        : TEstadoDePedidoDeVentaItem;
    function GetestadoDeRemito            : TEstadoDeRemito;
    function GetTipoDeMovimientoDeStock   : TTipoDeMovimientoDeStock;
    function GetPasoDeFabricacion         : TPasoDeFabricacion;
    function GetEstadoDePedidoItemOrigen  : TEstadoDePedidoDeVentaItem;
    function GetEstadoDeRemitoOrigen      : TEstadoDeRemito;
   public
    constructor Create; override;
    property TipoDeFormularioID        : TObjectID read FTipoDeFormularioID write FTipoDeFormularioID;
    property EsAjusteDeStock           : TBoolean read FesAjusteDeStock write FesAjusteDeStock;
    property EsPedido                  : TBoolean read FesPedido write FesPedido;
    property EsRemito                  : TBoolean read FesRemito write FesRemito;
    property EsHojaDeRuta              : TBoolean read FesHojaDeRuta write FesHojaDeRuta;
    property EstadoDePedidoItemOrigenID : TObjectID read FEstadoDePedidoItemOrigenID write SetEstadoDePedidoItemOrigenID;
    property EstadoDePedidoItemOrigen   : TEstadoDePedidoDeVentaItem read GetEstadoDePedidoItemOrigen;
    property EstadoDePedidoItemID      : TObjectID read FestadoDePedidoItemID write SetestadoDePedidoItemID;
    property EstadoDePedidoItem        : TEstadoDePedidoDeVentaItem read GetestadoDePedidoItem;
    property EstadoDeRemitoOrigenID     : TObjectID read FEstadoDeRemitoOrigenID write SetEstadoDeRemitoOrigenID;
    property EstadoDeRemitoOrigen       : TEstadoDeRemito read GetEstadoDeRemitoOrigen;
    property EstadoDeRemitoID          : TObjectID read FestadoDeRemitoID write SetestadoDeRemitoID;
    property EstadoDeRemito            : TEstadoDeRemito read GetestadoDeRemito;
    property PasoDeFabricacionID       : TObjectID read FPasoDeFabricacionID write FPasoDeFabricacionID;
    property PasoDeFabricacion         : TPasoDeFabricacion read GetPasoDeFabricacion;
    property TipoDeMovimientoDeStockID : TObjectID read FTipoDeMovimientoDeStockID write SetTipoDeMovimientoDeStockID;
    property TipoDeMovimientoDeStock   : TTipoDeMovimientoDeStock read GetTipoDeMovimientoDeStock;
    property Comentario                 : Tstring read FComentario write FComentario;
end;

TTipoDeFormularioAccionStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName    : string; override;
    class function ID_FieldName : string; override;
    const
      _TipoDeFormularioID        = 'TipoDeFormularioID';
      _esAjusteDeStock           = 'esAjusteDeStock';
      _esPedido                  = 'esPedido';
      _esRemito                  = 'esRemito';
      _esHojaDeRuta              = 'esHojaDeRuta';
      _EstadoDePedidoItemOrigenID = 'EstadoDePedidoItemOrigenID';
      _estadoDePedidoItemID      = 'estadoDePedidoItemID';
      _EstadoDeRemitoOrigenID     = 'EstadoDeRemitoOrigenID';
      _estadoDeRemitoID          = 'estadoDeRemitoID';
      _PasoDeFabricacionID       = 'PasoDeFabricacionID';
      _TipoDeMovimientoDeStockID = 'TipoDeMovimientoDeStockID';
      _Comentario                = 'Comentario';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioAccionStockList = class(TPDList)
  private
    function GetActual : TTipoDeFormularioAccionStock;
  public
    constructor CreateAll;
    constructor CreateByTipoDeFormulario( _TF: TTipoDeFormulario );
    constructor CreateByTipoDeFormularioYPasoDeFabricacionID( _TF: TTipoDeFormulario; _PFID: TObjectID );
    function FindEstadoDePedidoID(_EID: TObjectID): Boolean;
    function FindEstadoDeRemitoID(_EID: TObjectID): Boolean;
    function FindEstadoDeRemitoOrigenYDestinoID(_EOID: TObjectID ; _EDID: TObjectID): Boolean;

    function FindPasoDeFabricacionID(_FID: TObjectID): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeFormularioAccionStock read GetActual;
end;

TFormularioObservacion = class(TDescriptibleAbreviado)
private
  FTipoDeformularioID: TObjectID;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property TipoDeformularioID : TObjectID read FTipoDeformularioID write FTipoDeformularioID;
end;

TFormularioObservacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion        = 'FormularioObservacion';
      _TipoDeformularioID = 'TipoDeformularioID';
      _Codigo             = 'Codigo';
      _EsInactivo         = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFormularioObservacionList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TFormularioObservacion;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByFormulario(_F: TTipoDeFormulario);
  function CreateNewObject: TPDObject; override;
  property Actual: TFormularioObservacion read GetActual;
end;

TGrupoDeCuentasContables = class(TDescriptible)
public
  constructor Create; override;
end;

TGrupoDeCuentasContablesDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion = 'GrupoDeCuentasContables';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeCuentasContablesList = class(TDescriptibleList)
private
  function GetActual: TGrupoDeCuentasContables;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TGrupoDeCuentasContables read GetActual;
end;

TGrupoDeVendedor = class(TDescriptibleAbreviado)
  private
    FPorcentajeToleracionaDescuento : TReal;
    FCodigoSifab                    : TString;
    FCodigoInternoSifab             : TEntero;
    FIDTeamplace                    : TEntero;
    FVisualizacionGeneral           : TBoolean;
    FItems                          : TGrupoDeVendedorItemList;
    FComisiones                     : TGrupoDeVendedorComisionList;
    FComisionVigente                : TGrupoDeVendedorComision;
    FDescuentaChequeRechazado       : TBoolean;
    function GetItems: TGrupoDeVendedorItemList;
    function GetComisiones: TGrupoDeVendedorComisionList;
    procedure SetporcentajeToleracionaDescuento(const Value: TReal);
    function GetCodigoInternoSifab: TEntero;
    function GetIDTeamplace: TEntero;
    function GetComisionVigente: TGrupoDeVendedorComision;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure Delete; Override;
    function Save: Boolean; Override;
    Property PorcentajeToleracionADescuento : TReal read FporcentajeToleracionaDescuento write SetporcentajeToleracionaDescuento;
    property DescuentaChequeRechazado       : TBoolean read FDescuentaChequeRechazado write FDescuentaChequeRechazado;
    property VisualizacionGeneral           : TBoolean read fVisualizacionGeneral write FVisualizacionGeneral;
    property Items                          : TGrupoDeVendedorItemList read GetItems;
    property Comisiones                     : TGrupoDeVendedorComisionList read GetComisiones;
    Property ComisionVigente                : TGrupoDeVendedorComision read GetComisionVigente;
    property CodigoSifab                    : TString read FCodigoSifab write FCodigoSifab;
    property CodigoInternoSifab             : TEntero read GetCodigoInternoSifab ;
    Property IDTeamplace                    : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_GV : TGrupoDeVendedor) : Boolean;
end;

TGrupoDeVendedorDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _Codigo                                = 'Codigo';
      _Descripcion                           = 'GrupoDeVendedor';
      _PorcentajeToleracionaDescuento        = 'PorToleracionaDescuento';
      _CodigoSifab                           = 'CodigoSifab';
      _EsInactivo                            = 'EsInactivo';
      _VisualizacionGeneral                  = 'VisualizacionGeneral';
      _DescuentaChequeRechazado              = 'DescuentaChequeRechazado';
//Alias de la base de datos de Teamplace
      _TeamplaceTableName                    = 'BSPersona';
      _TeamplaceCodigo                       = 'Codigo';
      _TeamplaceID                           = 'PersonaID';
      _TeamplaceNombre                       = 'Nombre';
      _TeamplaceActivo                       = 'Activo';
      _TeamplaceDEscripcion                  = 'Descripcion';
      _TeamplaceEsVendedor                   = 'EsVendedor';
      _TeamplacePersonaNombre                = 'PersonaNombre';
      _TeamplacePersonaApellido              = 'PersonaApellido';
      _TeamplaceSexo                         = 'Sexo';
      _TeamplaceEstadoCivil                  = 'EstadoCivil';
      _TeamplaceEsEmpleado                   = 'EsEmpleado';
      _TeamplaceUSR_Comision                 = 'USR_Comision';
      _TeamplaceUSR_DescuentaChequeRechazado = 'USR_DescuentaChequeRechazado';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeVendedorList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TGrupoDeVendedor;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByVendedor(_V: TVendedor; _SoloActivos: Boolean = False); Overload;
    constructor CreateByVendedor(_VID: TObjectID; _SoloActivos: Boolean = False); Overload;

    function CreateNewObject: TPDObject; override;
    property Actual: TGrupoDeVendedor read GetActual;
    function Find(_Descripcion: TString): Boolean; overload;
end;

TGrupoDeVendedorComision = class(TPDObject)
private
  FporcentajeComisionCobranzas: TReal;
  FporcentajeComisionFacturacion: TReal;
  FfechadeVigencia: TFechaHora;
  FGrupoDeVendedorID: TObjectID;
  FGrupoDeVendedor: TPDObject;
  FDescripcionGrupoDeVendedor: String;
  function GetGrupoDeVendedor: TGrupoDeVendedor;
  procedure SetGrupoDeVendedorID(const Value: TObjectID);
public
  constructor Create; override;
  property GrupoDeVendedorID: TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
  property GrupoDeVendedor: TGrupoDeVendedor read GetGrupoDeVendedor;
  property fechadeVigencia : TFechaHora read FfechadeVigencia write FfechadeVigencia;
  property porcentajeComisionFacturacion : TReal read FporcentajeComisionFacturacion write FporcentajeComisionFacturacion;
  property porcentajeComisionCobranzas  : TReal read FporcentajeComisionCobranzas write FporcentajeComisionCobranzas;
  property DescripcionGrupoDeVendedor  : String read FDescripcionGrupoDeVendedor write FDescripcionGrupoDeVendedor; // se debe asignar en el frame
end;

TGrupoDeVendedorComisionDM = class(TSQLDBX_DMObject)
protected
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _GrupoDeVendedorID             = 'GrupoDeVendedorID';
    _FechadeVigencia               = 'FechaDeVigencia';
    _PorcentajeComisionFacturacion = 'PorcentajeComisionFacturacion';
    _PorcentajeComisionCobranzas   = 'PorcentajeComisionCobranzas';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeVendedorComisionList = class(TPDList)
private
  function GetActual: TGrupoDeVendedorComision;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByGrupoDeVendedor(_GV: TGrupoDeVendedor);
  constructor CreateByGrupoDeVendedorAndFechaVigencia(_GV: TGrupoDeVendedor; _Fecha : TDate );
  Function FindComisionVigente( _GV: TGrupoDeVendedor; _Fecha: TDate ): TBoolean;
  function CreateNewObject: TPDObject; override;
  property Actual: TGrupoDeVendedorComision read GetActual;
end;

TGrupoDeVendedorItem = class(TPDObject)
  private
    Fvendedor: TPDObject;
    FvendedorID: TObjectID;
    FGrupoDeVendedor: TPDObject;
    FGrupoDeVendedorID: TObjectID;
    FPorcentajesDeRepartoComisiones: TGrupoDeVendedorItemRepartoList;

    procedure SetGrupoDeVendedorID(Value: TObjectID);
    function GetGrupoDeVendedor: TGrupoDeVendedor;
    procedure SetVendedorID(Value: TObjectID);
    function GetVendedor: TVendedor;
    function GetPorcentajesDeRepartoComisiones: TGrupoDeVendedorItemRepartoList;
  public
    constructor Create; override;
    property GrupoDeVendedorID: TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property GrupoDeVendedor: TGrupoDeVendedor read GetGrupoDeVendedor;
    property vendedorID: TObjectID read FvendedorID write SetVendedorID;
    property vendedor: TVendedor read GetVendedor;
    property PorcentajesDeRepartoComisiones : TGrupoDeVendedorItemRepartoList read GetPorcentajesDeRepartoComisiones;
end;

TGrupoDeVendedorItemDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _GrupoDeVendedorID = 'grupoDevendedorID';
    _VendedorID        = 'vendedorID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeVendedorItemList = class(TPDList)
private
  function GetActual: TGrupoDeVendedorItem;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByGrupoDeVendedor(_grupo: TGrupoDeVendedor);
  constructor CreateByGrupoDeVendedorAndVendedor(_grupo: TGrupoDeVendedor; _V : TVendedor ); Overload;
  constructor CreateByGrupoDeVendedorAndVendedor(_grupo: TGrupoDeVendedor; _VID : TObjectID ); Overload;

  function CreateNewObject: TPDObject; override;
  property Actual: TGrupoDeVendedorItem read GetActual;
end;

TGrupoDeVendedorItemReparto = class(TPDObject)
private
  FporcentajeRepartoCobranzas: TReal;
  FporcentajeRepartoFacturacion: TReal;
  FfechadeVigencia: TFechaHora;
  FgrupoDeVendedorItemID: TObjectID;
public
  constructor Create; override;
  property grupoDeVendedorItemID: TObjectID read FgrupoDeVendedorItemID write FgrupoDeVendedorItemID;
  property fechadeVigencia : TFechaHora read FfechadeVigencia write FfechadeVigencia;
  property porcentajeRepartoFacturacion : TReal read FporcentajeRepartoFacturacion write FporcentajeRepartoFacturacion;
  property porcentajeRepartoCobranzas : TReal read FporcentajeRepartoCobranzas write FporcentajeRepartoCobranzas;
end;

TGrupoDeVendedorItemRepartoDM = class(TSQLDBX_DMObject)
public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _GrupoDeVendedorItemID        = 'GrupoDeVendedorItemID';
      _FechadeVigencia              = 'FechaDeVigencia';
      _PorcentajeRepartoFacturacion = 'PorcentajeRepartoFacturacion';
      _PorcentajeRepartoCobranzas   = 'PorcentajeRepartoCobranzas';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TGrupoDeVendedorItemRepartoList = class(TPDList)
private
  function GetActual: TGrupoDeVendedorItemReparto;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByGrupoDeVendedorItem(_GVI: TGrupoDeVendedorItem);
  constructor CreateVigenteByGrupoDeVendedorItem(_GVI: TGrupoDeVendedorItem; _Fecha: TDate );
  function CreateNewObject: TPDObject; override;
  property Actual: TGrupoDeVendedorItemReparto read GetActual;
end;

TInsumoCunio = class(TPDObject)
private
  FCunio: TPDObject;
  FCunioID: TObjectID;
  FCantidad: TReal;
  FMateriaPrima: TPDObject;
  FMateriaPrimaID: TObjectID;
  FUnidadDeMedidaID: TObjectID;
  FUnidadDeMedida: TPDObject;
  procedure SetMateriaPrimaID(Value: TObjectID);
  function GetMateriaPrima: TMateriaPrima;
  procedure SetCunioID(Value: TObjectID);
  function GetCunio: TCunio;
  procedure SetUnidadDeMedidaID(const Value: TObjectID);
  function GetUnidadDeMedida: TUnidadDeMedida;
public
  constructor Create; override;
  property CunioID: TObjectID read FCunioID write SetCunioID;
  property Cunio: TCunio read GetCunio;
  property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
  property MateriaPrima: TMateriaPrima read GetMateriaPrima;
  property Cantidad: TReal read FCantidad write FCantidad;
  property UnidadDeMedidaID: TObjectID read FUnidadDeMedidaID write SetUnidadDeMedidaID;
  property UnidadDeMedida: TUnidadDeMedida read GetUnidadDeMedida;
end;

TInsumoCunioDM = class(TSQLDBX_DMObject)
  public
    Class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _MateriaPrimaID = 'MateriaPrimaID';
      _Cantidad = 'Cantidad';
      _CunioID = 'CunioID';
      _UnidadDeMedidaID = 'UnidadDeMedidaID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TInsumoCunioList = class(TPDList)
private
  function GetActual: TInsumoCunio;
public
  constructor CreateAll;
  constructor CreateByCunio(_C: TCunio);
  function CreateNewObject: TPDObject; override;
  property Actual: TInsumoCunio read GetActual;
end;

TglobalID = class(TPDObject)
  strict private
    FMaxValue: TEntero;
  private
    FTable_Name: TString;
    Fprefijo: TEntero;
    FNextID: TObjectID;
    function GetNextID: TObjectID;
    procedure SetMaxValue(const Value: TEntero);
  public
    const
      _Incremento = 25; // le asigna a cada usuario 25 ids para que no se pisen.
    constructor Create; override;
    property Prefijo    : TEntero   read Fprefijo    write Fprefijo;
    property Table_Name : TString   read FTable_Name write FTable_Name;
    property NextID     : TObjectID read GetNextID   write FNextID;
    property MaxValue   : TEntero   read FMaxValue   write SetMaxValue;
end;

TglobalIDDM = class(TSQLDBXForID_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _Prefijo    = 'Prefijo';
      _MaxValue   = 'MaxValue';
      _Table_Name = 'Table_Name';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TGlobalIDList = class(TPDList)
private
  function GetActual: TglobalID;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByTableName(_TableName: string);
  function CreateNewObject: TPDObject; override;
  function Find(_TableName: string): Boolean; reintroduce; overload;
  property Actual: TglobalID read GetActual;
end;

{ ///////////////  PDObjects ///////////////// }

TBuscadorDeCunio = class(TPDObject)
private
  FFile4: TString;
  FFile3: TString;
  FFile2: TString;
  FFile1: TString;
  FDescripcion4: TString;
  FDescripcion3: TString;
  FDescripcion2: TString;
  FDescripcion1: TString;
  FObservacion4: TString;
  FObservacion3: TString;
  FObservacion2: TString;
  FObservacion1: TString;
  Fcodigo4: TString;
  Fcodigo3: TString;
  Fcodigo2: TString;
  Fcodigo1: TString;
  FSeleccionado4: Boolean;
  FSeleccionado3: Boolean;
  FSeleccionado2: Boolean;
  FSeleccionado1: Boolean;
  FHorasReales4: TReal;
  FHorasReales3: TReal;
  FHorasReales2: TReal;
  FHorasReales1: TReal;
public
  constructor Create; override;
  function Save(_NoPersistir: Boolean = False): Boolean; Reintroduce; Overload;

  property codigo1: TString read Fcodigo1 write Fcodigo1;
  property codigo2: TString read Fcodigo2 write Fcodigo2;
  property codigo3: TString read Fcodigo3 write Fcodigo3;
  property codigo4: TString read Fcodigo4 write Fcodigo4;
  property Descripcion1: TString read FDescripcion1 write FDescripcion1;
  property Descripcion2: TString read FDescripcion2 write FDescripcion2;
  property Descripcion3: TString read FDescripcion3 write FDescripcion3;
  property Descripcion4: TString read FDescripcion4 write FDescripcion4;
  property Observacion1: TString read FObservacion1 write FObservacion1;
  property Observacion2: TString read FObservacion2 write FObservacion2;
  property Observacion3: TString read FObservacion3 write FObservacion3;
  property Observacion4: TString read FObservacion4 write FObservacion4;
  property File1: TString read FFile1 write FFile1;
  property File2: TString read FFile2 write FFile2;
  property File3: TString read FFile3 write FFile3;
  property File4: TString read FFile4 write FFile4;
  property Seleccionado1: Boolean read FSeleccionado1 write FSeleccionado1;
  property Seleccionado2: Boolean read FSeleccionado2 write FSeleccionado2;
  property Seleccionado3: Boolean read FSeleccionado3 write FSeleccionado3;
  property Seleccionado4: Boolean read FSeleccionado4 write FSeleccionado4;
  property HorasReales1: TReal read FHorasReales1 write FHorasReales1;
  property HorasReales2: TReal read FHorasReales2 write FHorasReales2;
  property HorasReales3: TReal read FHorasReales3 write FHorasReales3;
  property HorasReales4: TReal read FHorasReales4 write FHorasReales4;
end;

TBuscadorDeCunioDM = class(TSQLDBX_DMObject)
  Strict protected
    class function ConexionBaseDeDatos: TConnection; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _codigo1 = 'codigo1';
      _codigo2 = 'codigo2';
      _codigo3 = 'codigo3';
      _codigo4 = 'codigo4';
      _Descripcion1 = 'Descripcion1';
      _Descripcion2 = 'Descripcion2';
      _Descripcion3 = 'Descripcion3';
      _Descripcion4 = 'Descripcion4';
      _Observacion1 = 'Observacion1';
      _Observacion2 = 'Observacion2';
      _Observacion3 = 'Observacion3';
      _Observacion4 = 'Observacion4';
      _File1 = 'File1';
      _File2 = 'File2';
      _File3 = 'File3';
      _File4 = 'File4';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TBuscadorDeCunioList = class(TPDList)
private
  function GetActual: TBuscadorDeCunio;
public
  constructor CreateEmpty;
  function CreateNewObject: TPDObject; override;
  property Actual: TBuscadorDeCunio read GetActual;
end;

TActividad = class(TDescriptibleAbreviado)
  private
    FCanalDeDistribucionID: TObjectID;
    FCanalDeDistribucion: TPDObject;
    procedure SetCanalDeDistribucionID(const Value: TObjectID);
    function GetCanalDeDistribucion: TCanalDeDistribucion;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure ValidateOnDelete; override;
    property CanalDeDistribucionID : TObjectID read FCanalDeDistribucionID write SetCanalDeDistribucionID;
    property CanalDeDistribucion   : TCanalDeDistribucion read GetCanalDeDistribucion;
end;

TActividadDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'Actividad';
      _EsInactivo  = 'EsInactivo';
      _CanalDeDistribucionID  = 'CanalDeDistribucionID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
End;

TActividadList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TActividad;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TActividad read GetActual;
end;

TAccesoDirecto = class(TDescriptible)
private
  FUsuario: TPDObject;
  FUsuarioID: TObjectID;
  FY: TEntero;
  FX: TEntero;
  fIcono: TEntero;
  fRutaEjecutable: String;
  FMenuDePerfilID: TObjectID;
  FMEnuDePerfil: TPDObject;
  procedure SetUsuarioID(Value: TObjectID);
  function GetUsuario: TUsuario;
  procedure SetRutaEjecutable(const Value: String);
  procedure SetFMenuID(const Value: TObjectID);
  function GetMEnu: TMenuDePerfil;
public
  constructor Create; override;
  destructor Destroy; override;
  function Save: Boolean; Override;

  property X: TEntero read FX write FX;
  property Y: TEntero read FY write FY;
  property Icono: TEntero read fIcono write fIcono;
  property UsuarioID: TObjectID read FUsuarioID write SetUsuarioID;
  property Usuario: TUsuario read GetUsuario;
  property RutaEjecutable : String Read fRutaEjecutable Write SetRutaEjecutable;
  property MenuDePerfilID: TObjectID Read FMenuDePerfilID Write SetFMenuID;
  property MenuDePerfil: TMenuDePerfil Read GetMEnu;

end;

TAccesoDirectoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
  Const
    _X              = 'X';
    _Y              = 'Y';
    _Icono          = 'Icono';
    _UsuarioID      = 'UsuarioID';
    _Descripcion    = 'AccesoDirecto';
    _RutaEjecutable = 'RutaEjecutable';
    _MenuID         = 'MenuID';
    _EsInactivo     = 'EsInactivo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TAccesoDirectoList = class(TDescriptibleList)
private
  function GetActual: TAccesoDirecto;
public
  constructor CreateAll;
  constructor CreateByUsuario(_U: TUsuario);
  constructor CreateByMenuDePerfil(_M: TMenuDePerfil);
  constructor CreateEmpty;
  procedure DeleteAll;
  procedure GrabarIcono(_A: TAccesoDirecto);
  function CreateNewObject: TPDObject; override;
  property Actual: TAccesoDirecto read GetActual;
end;

TStockItem = class(TPDObject)
  private
    FProductoID                  : TObjectID;
    FProducto                    : TPDObject;
    FEstadoDeStockID             : TObjectID;
    FEstadoDeStock               : TPDObject;
    FDepositoID                  : TObjectID;
    FDeposito                    : TPDObject;
    FCantidad                    : TReal;
    FPedidoDeVentaItemAsignadoID : TObjectID;
    FCCDepositoDescripcion       : TString;
    FCCFabricadoDescripcion      : TString;
    FCCEstadoDeStockDescripcion  : TString;
    FCCMateriaPrimaDescripcion   : TString;
    FCCFabricadoCodigo           : TString;
    FCCFabricadoID               : TObjectID;
    FCCMateriaPrimaCodigo        : TString;
    FCCMateriaPrimaID            : TObjectID;
    FCCPedidoDeVentaItemNumero   : TEntero;
    FCCPedidoDeVentaNumero       : TEntero;
    FUnidadesPorEmbalaje         : TEntero;
    FPedidoDeVentaItemAsignado   : TPDObject;
    function GetDeposito : TDeposito;
    function GetEstadoDeStock : TEstadoDeStock;
    function GetProducto : TProducto;
    function GetPedidoDeVentaItemAsignado: TPDObject;
    procedure SetDepositoID(const Value: TObjectID);
    procedure SetEstadoDeStockID(const Value: TObjectID);
    procedure SetProductoID(const Value: TObjectID);
    procedure SetPedidoDeVentaItemAsignadoID(const Value: TObjectID);
  public
    constructor Create; override;
    property DepositoID : TObjectID read FDepositoID write SetDepositoID;
    property Deposito   : TDeposito read GetDeposito;
    property Cantidad : TReal read FCantidad write FCantidad;
    property EstadoDeStockID : TObjectID read FEstadoDeStockID write SetEstadoDeStockID;
    property EstadoDeStock : TEstadoDeStock read GetEstadoDeStock;
    property ProductoID : TObjectID read FProductoID write SetProductoID;
    property Producto : TProducto read GetProducto;
    property PedidoDeVentaItemAsignadoID : TObjectID read FPedidoDeVentaItemAsignadoID write SetPedidoDeVentaItemAsignadoID;
    property PedidoDeVentaItemAsignado   : TPDObject read GetPedidoDeVentaItemAsignado;
    property UnidadesPorEmbalaje : TEntero read FUnidadesPorEmbalaje write FUnidadesPorEmbalaje;
    // del create compuesto
    property CCFabricadoID              : TObjectID read FCCFabricadoID;
    property CCFabricadoCodigo          : TString   read FCCFabricadoCodigo;
    property CCFabricadoDescripcion     : TString   read FCCFabricadoDescripcion;
    property CCMateriaPrimaID           : TObjectID read FCCMateriaPrimaID;
    property CCMateriaPrimaCodigo       : TString   read FCCMateriaPrimaCodigo;
    property CCMateriaPrimaDescripcion  : TString   read FCCMateriaPrimaDescripcion;
    property CCDepositoDescripcion      : TString   read FCCDepositoDescripcion;
    property CCEstadoDeStockDescripcion : TString   read FCCEstadoDeStockDescripcion;
    property CCPedidoDeVentaNumero      : TEntero   read FCCPedidoDeVentaNumero;
    property CCPedidoDeVentaItemNumero  : TEntero   read FCCPedidoDeVentaItemNumero;
end;

TStockItemDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _Cantidad                    = 'Cantidad';
      _DepositoID                  = 'DepositoID';
      _EstadoDeStockID             = 'EstadoDeStockID';
      _ProductoID                  = 'ProductoID';
      _PedidoDeVentaItemAsignadoID = 'PedidoDeVentaItemAsignadoID';
      _UnidadesPorEmbalaje         = 'UnidadesPorEmbalaje';
      // del create compuesto
      _CCFabricadoID               = 'CCFabricadoID';
      _CCFabricadoCodigo           = 'CCFabricadoCodigo';
      _CCFabricadoDescripcion      = 'CCFabricadoDescripcion';
      _CCMateriaPrimaID            = 'CCMateriaPrimaID';
      _CCMateriaPrimaCodigo        = 'CCMateriaPrimaCodigo';
      _CCMateriaPrimaDescripcion   = 'CCMateriaPrimaDescripcion';
      _CCEstadoDescripcion         = 'CCEstadoDescripcion';
      _CCDepositoDescripcion       = 'CCDepositoDescripcion';
      _CCPedidoDeVentaNumero       = 'CCPedidoDeVentaNumero';
      _CCPedidoDeVentaItemNumero   = 'CCPedidoDeVentaItemNumero';
      _CCHojaDeRutaNumero          = 'CCHojaDeRutaNumero';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TStockItemList = class(TPDList)
  private
    function GetActual : TStockItem;
  public
    constructor CreateEmpty;
    constructor CreateAll;
    Constructor CreateByCodigoEstadoAndDeposito    (_Cod: String ; _EstadoID : TObjectID; _DepositoID : TObjectID; _EsMateriaPrima, _EsFabricado : Boolean);
    Constructor CreateByCodigoLikeEstadoAndDeposito(_Cod : String; _EstadoID : TObjectID; _DepositoID : TObjectID; _EsMateriaPrima, _EsFabricado : Boolean);
    Constructor CreateByEstadoAndDeposito(_DepositoID: TObjectID; _EstadoID: TObjectID);
    Constructor CreateByDeposito(_D: TDeposito);
    Constructor CreateByProductoEstadoDepositoSinAsignar(_ProductoID : TobjectID; _EstadoID: TobjectID= NullId; _DepositoID: TobjectID= NullId );
    Constructor CreateByCodigoLikeEstadoDepositoSinAsignar(_Cod : String; _EstadoID: TobjectID; _DepositoID: TobjectID);
    Constructor CreateByProductoEstadoDepositoItemAsignadoID(_ProductoID : TobjectID; _EstadoID: TobjectID= NullId; _DepositoID: TobjectID= NullId; _PedidodeVentaItemAsignadoID : TObjectID= NullId);
    Constructor CreateByCodigoLikeEstadoDepositoItemAsignadoID(_Cod : String; _EstadoID: TobjectID; _DepositoID: TobjectID; _PedidodeVentaItemAsignadoID : TObjectID= NullId);

    Constructor CreateByCodigoLikeSemielaborado(_Cod : String);

    Constructor CreateByProductoLibre(_P : TProducto);
    Constructor CreateByProductoLibreAndDeposito(_P : TProducto ; _D : TDeposito);

    function CreateNewObject: TPDObject; override;
      //revisados y funcionando
    constructor CreateByProducto(_P: TProducto);
    constructor CreateAllOrderedByDepositoYProducto; overload;
    constructor CreateAllByAsignados;
    constructor CreateByProductosEstadoDepositoItemAsignadoID(_productos : TProductoList; _estado : TEstadoDeStock; _deposito : Tdeposito;  _PedidoDeVentaItemAsignadoID : TObjectID);
    constructor CreateByEstadoDepositoOrigenDestino (_depositoOrigen, _depositoDestino: Tdeposito; _estadoOrigen, _estadoDestino : TEstadoDeStock);
    constructor CreateAllOrderedByDepositoYProducto(_Depositos : TDepositoList; _Fabricados,_MateriasPrimas : Boolean; _CodigoArticuloDesde,_CodigoArticuloHasta: string; _PedidodeVentaItemAsignadoID : TObjectID );overload;
    constructor CreateByPVItem(_PedidoDeVentaItemAsignadoID: TObjectID);
    constructor CreateByPVItemAndEstado(_PedidoDeVentaItemAsignadoID: TObjectID ; _EstadoDeStockID : TObjectID);
    constructor CreateByProductosYPedidoDeVentaItemAsignadoID(_Productos: TProductoList; _PedidoDeVentaItemAsignadoID: TObjectID);
    constructor CreateByProductoAsignadoAItems (_ProductoID : TObjectID; _SoloAsignado : Boolean = False);
    constructor CreateByProductoPreparado  (_ProductoID : TObjectID);
    constructor CreateByProductoEnTransito (_ProductoID : TObjectID);
    constructor CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta,
    _DesarrolloDesde, _DesarrolloHasta, _Cliente, _Marca, _Estado : String; _Depositos : TStringList; _Medida, _Orden : Integer;
    _CuniosEstandar : Boolean = False ; _DesarrollosEstandar : Boolean = False ; _Producto : String = '' ;
    _BuscarMateriaPrima : Boolean = False; _CategoriaDeMateriaPrimaCodigo: String = '');
    property Actual : TStockItem read GetActual;
end;

TMovimientoDeStock = class(TPDObject)
  private
    FUsuarioID: TObjectID;
    FUsuario: TPDObject;
    FTipoDeformularioID: TObjectID;
    FTipoDeFormulario: TPDObject;
    FProductoID: TObjectID;
    FProducto: TPDObject;
    FFechaHora: TFechaHora;
    FEstadoDeOrigenID: TObjectID;
    FEstadoDeOrigen: TPDObject;
    FEstadoDeDestinoID: TObjectID;
    FEstadoDeDestino: TPDObject;
    FDocumentoNumero: TString;
    FItemNumero: TEntero;
    FDepositoOrigenID: TObjectID;
    FDepositoOrigen: TPDObject;
    FDepositoDestinoID: TObjectID;
    FDepositoDestino: TPDObject;
    FCantidad: TReal;
    FPedidoDeVentaItemAsignadoID: TObjectID;
    FCCEstadoDestinoDescripcion: TString;
    FCCEstadoOrigenDescripcion: TString;
    FCCFabricadoDescripcion: TString;
    FCCMateriaPrimaDescripcion: TString;
    FCCFabricadoCodigo: TString;
    FCCFabricadoID: TObjectID;
    FCCDepositoDestinoDescripcion: TString;
    FCCDepositoOrigenDescripcion: TString;
    FCCMateriaPrimaCodigo: TString;
    FCCMateriaPrimaID: TObjectID;
    function GetDepositoDestino: TDeposito;
    function GetDepositoOrigen: TDeposito;
    function GetEstadoDeDestino: TEstadoDeStock;
    function GetEstadoDeOrigen: TEstadoDeStock;
    function GetProducto: TProducto;
    function GetTipoDeFormulario: TTipoDeFormulario;
    function GetUsuario: TUsuario;
    procedure SetDepositoDestinoID(const Value: TObjectID);
    procedure SetDepositoOrigenID(const Value: TObjectID);
    procedure SetEstadoDeDestinoID(const Value: TObjectID);
    procedure SetEstadoDeOrigenID(const Value: TObjectID);
    procedure SetProductoID(const Value: TObjectID);
    procedure SetUsuarioID(const Value: TObjectID);
    procedure SetTipoDeFormularioID(const Value: TObjectID);
  public
    constructor Create; override;
    property Cantidad: TReal read FCantidad write FCantidad;
    property DepositoDestino: TDeposito read GetDepositoDestino;
    property DepositoDestinoID: TObjectID read FDepositoDestinoID write SetDepositoDestinoID;
    property DepositoOrigen: TDeposito read GetDepositoOrigen;
    property DepositoOrigenID: TObjectID read FDepositoOrigenID write SetDepositoOrigenID;
    property DocumentoNumero : TString read FDocumentoNumero write FDocumentoNumero;
    property ItemNumero: TEntero read FItemNumero write FItemNumero;
    property EstadoDeDestino: TEstadoDeStock read GetEstadoDeDestino;
    property EstadoDeDestinoID: TObjectID read FEstadoDeDestinoID write SetEstadoDeDestinoID;
    property EstadoDeOrigen: TEstadoDeStock read GetEstadoDeOrigen;
    property EstadoDeOrigenID: TObjectID read FEstadoDeOrigenID write SetEstadoDeOrigenID;
    property FechaHora: TFechaHora read FFechaHora write FFechaHora;
    property Producto: TProducto read GetProducto;
    property ProductoID: TObjectID read FProductoID write SetProductoID;
    property TipoDeFormulario: TTipoDeFormulario read GetTipoDeFormulario;
    property TipoDeformularioID: TObjectID read FTipoDeformularioID write SetTipoDeFormularioID;
    property Usuario: TUsuario read GetUsuario;
    property UsuarioID: TObjectID read FUsuarioID write SetUsuarioID;
    property PedidoDeVentaItemAsignadoID: TObjectID read FPedidoDeVentaItemAsignadoID write FPedidoDeVentaItemAsignadoID;
    // del create compuesto
    property CCFabricadoID                : TObjectID read FCCFabricadoID;
    property CCFabricadoCodigo            : TString   read FCCFabricadoCodigo;
    property CCFabricadoDescripcion       : TString   read FCCFabricadoDescripcion;
    property CCMateriaPrimaID             : TObjectID read FCCMateriaPrimaID;
    property CCMateriaPrimaCodigo         : TString   read FCCMateriaPrimaCodigo;
    property CCMateriaPrimaDescripcion    : TString   read FCCMateriaPrimaDescripcion;
    property CCDepositoOrigenDescripcion  : TString   read FCCDepositoOrigenDescripcion;
    property CCDepositoDestinoDescripcion : TString   read FCCDepositoDestinoDescripcion;
    property CCEstadoOrigenDescripcion    : TString   read FCCEstadoOrigenDescripcion;
    property CCEstadoDestinoDescripcion   : TString   read FCCEstadoDestinoDescripcion;
end;

TMovimientoDeStockDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _Cantidad                    = 'Cantidad';
      _DepositoDestinoID           = 'DepositoDestinoID';
      _DepositoOrigenID            = 'DepositoOrigenID';
      _DocumentoNumero             = 'DocumentoNumero';
      _ItemNumero                  = 'ItemNumero';
      _EstadoDestinoID             = 'EstadoDeDestinoID';
      _EstadoOrigenID              = 'EstadoDeOrigenID';
      _FechaHora                   = 'FechaHora';
      _ProductoID                  = 'ProductoID';
      _TipoDeformularioID          = 'TipoDeFormularioID';
      _UsuarioID                   = 'UsuarioID';
      _PedidoDeVentaItemAsignadoID = 'PedidoDeVentaItemAsignadoID';
      // del create compuesto
      _CCFabricadoID               = 'CCFabricadoID';
      _CCFabricadoCodigo           = 'CCFabricadoCodigo';
      _CCFabricadoDescripcion      = 'CCFabricadoDescripcion';
      _CCMateriaPrimaID            = 'CCMateriaPrimaID';
      _CCMateriaPrimaCodigo        = 'CCMateriaPrimaCodigo';
      _CCMateriaPrimaDescripcion   = 'CCMateriaPrimaDescripcion';
      _CCEstadoOrigenDescripcion   = 'CCEstadoOrigenDescripcion';
      _CCEstadoDestinoDescripcion  = 'CCEstadoDestinoDescripcion';
      _CCDepositoOrigenDescripcion = 'CCDepositoOrigenDescripcion';
      _CCDepositoDestinoDescripcion= 'CCDepositoDestinoDescripcion';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TMovimientoDeStockList = class(TPDList)
private
  function GetActual: TMovimientoDeStock;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateForReporteMovimientos;
  constructor CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde, _DesarrolloHasta, _Cliente,
   _Marca, _Deposito , _Estado : String; _Medida, _Orden : Integer; _CuniosEstandar : Boolean = False ; _DesarrollosEstandar : Boolean = False ; _Producto : String = '') ;
  constructor CreateByDepositoOrigenODestino(_D : TDeposito);
  function CreateNewObject: TPDObject; override;
  property Actual: TMovimientoDeStock read GetActual;
end;

TTelefonoDeEmpresa = class(TDescriptible)
private
  FempresaID: TObjectID;
  Fempresa: TPDObject;
  FTelefono: TString;
  procedure SetempresaID(Value: TObjectID);
  function Getempresa: TEmpresa;
public
  constructor Create; override;
  procedure Delete; override;

  property Telefono: TString read FTelefono write FTelefono;
  property EmpresaID: TObjectID read FempresaID write SetempresaID;
  property Empresa: TEmpresa read Getempresa;

  Class Function GuardarEnTeamPlace(_T : TTelefonoDeEmpresa) : Boolean;

end;

TTelefonoDeEmpresaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'TelefonoDeEmpresa';
      _Telefono    = 'Telefono';
      _EmpresaID   = 'EmpresaID';
      _EsInactivo  = 'EsInactivo';
//Teamplace
      _TeamplaceTableName   = 'BSTelefono';
      _TeamplaceEmpresaID   = 'OrganizacionID';
      _TeamplaceDescripcion = 'Tipo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTelefonoDeEmpresaList = class(TDescriptibleList)
private
  function GetActual: TTelefonoDeEmpresa;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByEmpresa(_CE: TAbstractEmpresa; _SoloActivos: Boolean);

  function CreateNewObject: TPDObject; override;
  property Actual: TTelefonoDeEmpresa read GetActual;
end;


TArticulo = class(TDescriptibleAbreviado)
  private
    FCostos: TOBject;
    Fcomponentes: TOBject;
    FMatrizArticulosAsociados: TOBject;
    FMetodosDeCorte: TOBject;
    FunidadesPorEnvase: TEntero;
    FunidadDeMedida: TPDObject;
    FunidadDeMedidaID: TObjectID;
    FrubroDeArticulo: TPDObject;
    FrubroDeArticuloID: TObjectID;
    ForigenComercial: TPDObject;
    ForigenComercialID: TObjectID;
    FnumeroDeOrden: TReal;
    FnumeroDeArticulo: TString;
    Fmedida: TEntero;
    FMaterial: TPDObject;
    FMaterialID: TObjectID;
    FFamiliaDeArticulo: TPDObject;
    FFamiliaDeArticuloID: TObjectID;
    FTiempoEstimadoEnDias: TEntero;
    FTipoDeComponente: TPDObject;
    FTipoDeComponenteID: TObjectID;
    Fpesoneto: TReal;
    FpesoBruto: TReal;
    FpesoBase: TReal;
    FunidadDeMedidaPesoID: TObjectID;
    FunidadDeMedidaPeso: TPDObject;
    FCategoriaDeTerminacionPosibleID: TObjectID;
    FCategoriaDeTerminacionPosible: TPDObject;
    FTerminacionDefaultID: TObjectID;
    FTerminacionDefault: TPDObject;
    FCunioDefaultID: TObjectID;
    FCunioDefault: TPDObject;
    FTraducciones: TOBject;
    FMatricesColocadoras: TPDList;
    FMatricesAsociadasList: TMatrizArticuloAsociadoList;
    FTransfiereAtributos: TBoolean;
    FComponentesDeMatrices: TMatrizComponenteList;
    FObservacionParaVentas: TString;
    FObservacionParaProduccion: TString;
    FComponentesDesplegados: TPDList;
    FarchivoDeImagen: TString;
    FarchivoSinImagen: TString;
    FarchivoDeImagenWeb: TString;
    FarchivoSinImagenWeb: TString;
    FfechaDeCreacion: TFechaHora;
    FCentroDeCosto: TPDObject;
    FDescripcionComponentesDeMatriz: TString;
    FDescripcionCompleta: TString;
    FMostrarComponentesDefaultEnCustomizacion: TBoolean;
    FHeredaCunioDelProductoFinal: TBoolean;
    FPrecios: TArticuloPrecioList;
    FNoCambiarCunioDefault: TBoolean;
    FNoCambiarTerminacionDefault: TBoolean;
    FK1: TReal;
    FMonedaK1: TPDObject;
    FMonedaK1ID: TObjectID;
    FKMateriaPrimaEnMonedaOficial: TReal;
    FMetodoDeCorteDefault: TPDObject;
    FPasosDeFabricacion: TArticuloPasodeFabricacionList;
    FPesoUnitarioConScrap: TReal;
    FSubComponentes: TStringList;
    FTmpCantidadAFabricar: TEntero;
    // del create compuesto
    FCCMateriaPrimaAnchoDeTira: TReal;
    FCCMaterialPesoEspecifico: TReal;
    FCCMateriaPrimaEspesor: TReal;
    FCCMateriaPrimaEsInyeccion: TBoolean;
    FCCMateriaPrimaCosto: TReal;
    FCCMateriaPrimaDiametro: TReal;
    FCCHerramentalCantidadDeBocas: TEntero;
    FCCHerramentalPasoDeMatriz: TReal;
    FCCMaterialUnidadDeMedidaEquivalencia: TReal;
    FCCMateriaPrimaUnidadDeMedidaEquivalencia: TReal;
    FCCMateriaPrimaMonedaCostoID: TObjectID;
    FCCMetodoDeCorteEsComprado: TBoolean;
    FImpuestosActivos: TBoolean;
    FImpuestos: TArticuloImpuestoList;
    FCunioDefaultSemiID       : TObjectID;
    FCunioDefaultSemi         : TPDObject;
    FTerminacionDefaultSemiID : TObjectID;
    FTerminacionDefaultSemi   : TPDObject;
    FEvaluarProductoCompleto  : TBoolean;
    FCunioDefaultList         : TArticuloCunioDefaultList;
    FCuniosDefault            : TArticuloCunioDefaultList;
    fAsumePrecioDelCunio      : TBoolean;
    FNoPermitirCustomizacion  : TBoolean;
    FEmbalajeDefaultID        : TObjectID;
    FEmbalajeDefault          : TPDObject;
    FIDTeamplace: TEntero;
    Function getDescripcionCompleta: TString;
    procedure SetfamiliaDeArticuloID(Value: TObjectID);
    function GetfamiliaDeArticulo: TFamiliaDeArticulo;
    procedure SetMaterialID(Value: TObjectID);
    function GetMaterial: TMaterial;
    procedure SetorigenComercialID(Value: TObjectID);
    function GetorigenComercial: TOrigenComercial;
    procedure SetrubroDeArticuloID(Value: TObjectID);
    function GetrubroDeArticulo: TRubroDeArticulo;
    procedure SetunidadDeMedidaID(Value: TObjectID);
    function GetunidadDeMedida: TUnidadDeMedida;
    function GetMetodosDeCorte: TArticuloMetodoDeCorteList;
    function Getcomponentes: TArticuloComponenteList;
    function GetCostos: TArticuloCostoList;
    procedure GrabarCodigo;
    procedure SetnumeroDeArticulo(const Value: TString);
    procedure Setmedida(const Value: TEntero);
    function GetTipoDeComponente: TTipoDeComponente;
    procedure SettipoDeComponente(const Value: TObjectID);
    function GetMatrizArticulosAsociados: TMatrizArticuloAsociadoList;
    function GetunidadDeMedidaPeso: TUnidadDeMedida;
    procedure SetunidadDeMedidaPesoID(const Value: TObjectID);
    function GetCategoriaDeTerminacionPosible  : TCategoriaDeTerminacionesPosibles;
    procedure SetCategoriaDeTerminacionPosibleID(const Value: TObjectID);
    function GetarchivoDeImagen: TString;
    function GetarchivoSinImagen: TString;
    function GetTerminacionDefault: TTerminacion;
    function GetCunioDefault: TCunio;
    procedure SetTerminacionDefaultID(const Value: TObjectID);
    function GetTraducciones: TArticuloTraduccionList;
    function GetMatricesAsociadas: TMatrizArticuloAsociadoList;
    function GetComponenteQueLlevaElCunio: TArticulo;
    function GetComponentesDeMatrices: TMatrizComponenteList;
    function GetComponentesDesplegados: TArticuloComponenteDesplegadoList;
    function GetMatricesColocadoras: TArticuloList;
    function GetCentroDeCosto: TCentroDeCosto;
    function GetDescripcionComponentesDeMatriz: TString;
    function GetPrecios: TArticuloPrecioList;
    procedure setMonedaK1ID(const Value: TObjectID);
    function GetMonedaK1: TMoneda;
    function GetarchivoDeImagenWeb: TString;
    function GetArchivoSinImagenWeb: TString;
    function GetMetodoDeCorteDefault: TArticuloMetodoDeCorte;
    function GetPasosDeFabricacion: TArticuloPasodeFabricacionList;
    function GetKMateriaPrimaEnMonedaOficial: TReal;
    function GetPesoUnitarioConScrap: TReal;
    function GetSubComponentes: TStringList;
    function GetImpuestos: TArticuloImpuestoList;
    function GetCuniosDefault: TArticuloCunioDefaultList;
    function GetCunioDefaultID: TObjectID;
    function GetAsumePrecioDelCunio: TBoolean;
    function GetEmbalajeDefault: TMateriaPrima;
    procedure SetEmbalajeDefaultID(const Value: TObjectID);
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    function GetCodigo: TString; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    procedure Delete; override;
    function Save: Boolean; override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _C : TCunio ): TReal;
    procedure LimpiarComponentesDesplegados;
    procedure LimpiarDescripcionComponentesMatrices;
    class Procedure Reporte(_A: TArticulo);
    class Procedure HojaDeProducto(_A: TArticulo; _ClntdtstMaster: TClientDataSet);
    property FechaDeCreacion: TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property DescripcionCompleta : TString read getDescripcionCompleta write FDescripcionCompleta;
    // property Descripcion : TString read GetDescripcionBase write FDescripcion;
    property ArchivoDeImagen      : TString read GetarchivoDeImagen;
    property ArchivoSinImagen     : TString read GetarchivoSinImagen;
    property ArchivoDeImagenWeb   : TString read GetarchivoDeImagenWeb;
    property ArchivoSinImagenWeb  : TString read GetArchivoSinImagenWeb;
    property FamiliaDeArticuloID: TObjectID read FfamiliaDeArticuloID write SetfamiliaDeArticuloID;
    property FamiliaDeArticulo: TFamiliaDeArticulo read GetfamiliaDeArticulo;
    property MaterialID: TObjectID read FMaterialID write SetMaterialID;
    property Material: TMaterial read GetMaterial;
    property CentroDeCosto: TCentroDeCosto Read GetCentroDeCosto;
    property medida: TEntero read Fmedida write Setmedida;
    property NumeroDeArticulo: TString read FnumeroDeArticulo write SetnumeroDeArticulo;
    property NumeroDeOrden: TReal read FnumeroDeOrden write FnumeroDeOrden;
    property OrigenComercialID: TObjectID read ForigenComercialID write SetorigenComercialID;
    property OrigenComercial: TOrigenComercial read GetorigenComercial;
    property RubroDeArticuloID: TObjectID read FrubroDeArticuloID write SetrubroDeArticuloID;
    property RubroDeArticulo: TRubroDeArticulo read GetrubroDeArticulo;
    property UnidadDeMedidaID: TObjectID read FunidadDeMedidaID write SetunidadDeMedidaID;
    property UnidadDeMedida: TUnidadDeMedida read GetunidadDeMedida;
    property UnidadesPorEnvase : TEntero read FunidadesPorEnvase write FunidadesPorEnvase;
    property EmbalajeDefaultID : TObjectID read FEmbalajeDefaultID write SetEmbalajeDefaultID;
    property EmbalajeDefault   : TMateriaPrima read GetEmbalajeDefault;
    property MetodosDeCorte: TArticuloMetodoDeCorteList Read GetMetodosDeCorte;
    property MetodoDeCorteDefault: TArticuloMetodoDeCorte Read GetMetodoDeCorteDefault;
    property Componentes: TArticuloComponenteList read Getcomponentes;
    property Costos: TArticuloCostoList read GetCostos;
    property Codigo: TString read GetCodigo;
    property TiempoEstimadoEnDias : TEntero read FtiempoEstimadoEnDias write FtiempoEstimadoEnDias;
    property TipoDeComponenteID : TObjectID read FTipoDeComponenteID write SettipoDeComponente;
    property TipoDeComponente: TTipoDeComponente read GetTipoDeComponente;
    property MatrizArticulosAsociados: TMatrizArticuloAsociadoList read GetMatrizArticulosAsociados;
    property MatricesColocadoras: TArticuloList read GetMatricesColocadoras;
    property PesoNeto: TReal read Fpesoneto write Fpesoneto;
    property PesoBruto: TReal read FpesoBruto write FpesoBruto;
    property PesoBase: TReal read FpesoBase write FpesoBase;
    property UnidadDeMedidaPesoID: TObjectID read FunidadDeMedidaPesoID write SetunidadDeMedidaPesoID;
    property UnidadDeMedidaPeso: TUnidadDeMedida read GetunidadDeMedidaPeso;
    property TransfiereAtributos : TBoolean read FTransfiereAtributos write FTransfiereAtributos;
    property HeredaCunioDelProductoFinal : TBoolean read FHeredaCunioDelProductoFinal write FHeredaCunioDelProductoFinal;
    property MostrarComponentesDefaultEnCustomizacion : TBoolean read FMostrarComponentesDefaultEnCustomizacion write FMostrarComponentesDefaultEnCustomizacion;
    property CategoriaDeTerminacionPosibleID : TObjectID read FCategoriaDeTerminacionPosibleID write SetCategoriaDeTerminacionPosibleID;
    property CategoriaDeTerminacionPosible : TCategoriaDeTerminacionesPosibles read GetCategoriaDeTerminacionPosible;
    property TerminacionDefaultID: TObjectID read FTerminacionDefaultID write SetTerminacionDefaultID;
    property TerminacionDefault: TTerminacion read GetTerminacionDefault;
    property NoCambiarTerminacionDefault: TBoolean read FNoCambiarTerminacionDefault write FNoCambiarTerminacionDefault;
    property NoPermitirCustomizacion: TBoolean read FNoPermitirCustomizacion write FNoPermitirCustomizacion;
    property CunioDefaultID: TObjectID read GetCunioDefaultID;
    property CunioDefault: TCunio read GetCunioDefault;
    property CuniosDefault: TArticuloCunioDefaultList read GetCuniosDefault;
    property NoCambiarCunioDefault: TBoolean read FNoCambiarCunioDefault write FNoCambiarCunioDefault;
    property ComponentesDesplegados: TArticuloComponenteDesplegadoList read GetComponentesDesplegados;
    property SubComponentes: TStringList read GetSubComponentes;
    property Traducciones: TArticuloTraduccionList read GetTraducciones;
    property MatricesPosibles: TMatrizArticuloAsociadoList Read GetMatricesAsociadas;
    property ComponenteQueLlevaElCunio : TArticulo Read GetComponenteQueLlevaElCunio;
    property ObservacionParaVentas: TString read FObservacionParaVentas write FObservacionParaVentas;
    property ObservacionParaProduccion : TString read FObservacionParaProduccion write FObservacionParaProduccion;
    property ComponentesDeMatrices : TMatrizComponenteList Read GetComponentesDeMatrices;
    Property PasosDeFabricacion : TArticuloPasodeFabricacionList Read GetPasosDeFabricacion;
    property DescripcionComponentesDeMatriz : TString read GetDescripcionComponentesDeMatriz write FDescripcionComponentesDeMatriz;
    property Precios : TArticuloPrecioList read GetPrecios;
    property K1: TReal read FK1 write FK1;
    property MonedaK1ID: TObjectID read FMonedaK1ID write SetMonedaK1ID ;
    property MonedaK1: TMoneda read GetMonedaK1;
    property KMateriaPrimaEnMonedaOficial : TReal Read GetKMateriaPrimaEnMonedaOficial;
    Property PesoUnitarioConScrap : TReal read GetPesoUnitarioConScrap;
    property ImpuestosActivos : TBoolean read FImpuestosActivos write FImpuestosActivos;
    property Impuestos : TArticuloImpuestoList read GetImpuestos;
    Property EvaluarProductoCompleto : TBoolean read FEvaluarProductoCompleto write FEvaluarProductoCompleto;
    // No persistente
    property AsumePrecioDelCunio : TBoolean read GetAsumePrecioDelCunio;
    // La cantidadAFabricar debe transmitirse a todos los componentes
    property TmpCantidadAFabricar : TEntero read FTmpCantidadAFabricar write FTmpCantidadAFabricar; // cantidad pedida * cantidad de componentes

    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_A : TArticulo) : Boolean;
end;

TArticuloDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion                              = 'Articulo';
      _Codigo                                   = 'Codigo';
      _FamiliaDeArticuloID                      = 'FamiliaDeArticuloID';
      _MaterialID                               = 'MaterialDeArticuloID';
      _medida                                   = 'Medida';
      _NumerodeArticulo                         = 'NumeroDeArticulo';
      _numeroDeOrden                            = 'NumeroDeOrden';
      _OrigenComercialID                        = 'OrigenComercialID';
      _RubroDeArticuloID                        = 'RubroDeArticuloID';
      _UnidadDeMedidaID                         = 'UnidadDeMedidaID';
      _UnidadesPorEnvase                        = 'UnidadesPorEnvase';
      _tiempoEstimadoEnDias                     = 'TiempoestimadoenDias';
      _TipoDeComponenteID                       = 'TipoDeComponenteID';
      _UnidadDeMedidaPesoID                     = 'UnidadDeMedidaPesoID';
      _PesoNeto                                 = 'PesoNeto';
      _PesoBruto                                = 'PesoBruto';
      _CatDeTermsPosiblesID                     = 'CatDeTermsPosiblesID';
      _TerminacionDefaultID                     = 'TerminacionDefaultID';
      _NoCambiarTerminacionDefault              = 'NoCambiarTerminacionDefault';
      _NoPermitirCustomizacion                  = 'NoPermitirCustomizacion';
      _NoCambiarCunioDefault                    = 'NoCambiarCunioDefault';
      _EsInactivo                               = 'EsInactivo';
      _TransfiereAtributos                      = 'TransfiereAtributos';
      _ObservacionParaVentas                    = 'ObservacionParaVentas';
      _ObservacionParaProduccion                = 'ObservacionParaProduccion';
      _fechaDeCreacion                          = 'FechaDeCreacion';
      _DescripcionComponentesDeMatriz           = 'DescripcionComponentes';
      _HeredaCunioDelProductoFinal              = 'HeredaCunioDelProductoFinal';
      _MostrarComponentesDefaultEnCustomizacion = 'MostrarComponentesDefaultEnCustomizacion';
      _K1                                       = 'K1';
      _MonedaK1ID                               = 'MonedaK1ID';
      _ImpuestosActivos                         = 'ImpuestosActivos';
      _EvaluarProductoCompleto                  = 'EvaluarProductoCompleto';
      _EmbalajeDefaultID                        = 'EmbalajeDefaultID';

      //Alias de la base de datos de Teamplace
      _TeamplaceTableName     = 'BSProducto';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'ProductoID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TArticulo;
public
  constructor CreateAll(_SoloActivos: Boolean = False; _SoloVendibles: Boolean = False); Reintroduce; overload;
  constructor CreateEmpty;
  constructor CreateAllBusqueda(_SoloActivos: Boolean = False);
  constructor CreateByCodigoLike(_cod: String; _SoloVendibles: Boolean = False; _SoloActivos: Boolean = False); Reintroduce; overload;
  constructor CreateByCategoriaDeTerminacion(_C: TCategoriaDeTerminacionesPosibles; _SoloActivos:Boolean= False);
  constructor CreateByTipoDeComponenteVendible(_SoloActivos: Boolean = False);
  constructor CreateByArticulosPadre(_SoloActivos:Boolean=False); // estos son los que no son componente de ningun otro
  constructor CreateByTipoDeComponenteConCunio(_SoloActivos:Boolean=False);
  constructor CreateByTipoDeComponenteConCunioCodigoLike(_cod: String; _SoloActivos:Boolean=False); overload;
  constructor CreateByInicialCodigo(_I: string; _SoloActivos:Boolean=False);
  constructor CreateByTipoDeComponente(_TC: TTipoDeComponente;_SoloActivos:Boolean=False);
  constructor CreateByComponente(_cod: String;_SoloActivos:Boolean=False);
  constructor CreateMatricesByArticulo(_A: TArticulo;_SoloActivos:Boolean=False);
  constructor CreateByMateriaPrima(_M: TMateriaPrima ; _SoloActivos:Boolean = False);

  //Para la app mobile
  constructor CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _SoloVendibles: Boolean = True; _SoloActivos: Boolean = True; _StartRow : Integer = 0 ; _Rows : Integer = 0 );
  constructor CreateAll(_SoloActivos: Boolean = False; _SoloVendibles: Boolean = False; _StartRow : Integer = 0 ; _Rows : Integer = 0); Reintroduce; overload;


  function CreateNewObject: TPDObject; override;
  property Actual: TArticulo read GetActual;
end;


TArticuloImpuesto = class(TPDObject)
  private
    FImpuestoConceptoID : TObjectID;
    FArticuloID : TObjectID;
    FImpuestoConcepto: TPDObject;
    procedure SetImpuestoConceptoID(Value : TObjectID);
    function GetImpuestoConcepto: TImpuestoConcepto;
  public
    constructor Create; override;
    property ArticuloID : TObjectID read FArticuloID write FArticuloID;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property ImpuestoConcepto   : TImpuestoConcepto  read GetImpuestoConcepto;
end;

TArticuloImpuestoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ArticuloID = 'ArticuloID';
    _ImpuestoConceptoID = 'ImpuestoConceptoID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloImpuestoList = class(TPDList)
private
  function Getactual : TArticuloImpuesto;
public
  constructor CreateAll;
  Constructor CreateByArticulo(_A : TArticulo);
  function CreateNewObject: TPDObject; override;
  function FindPredeterminadoProductos: Boolean;
  property actual : TArticuloImpuesto read Getactual;
end;

TArticuloPasoDeFabricacion = class(TPDObject)
  private
    FArticuloID : TObjectID;
    FPasoDeFabricacionID : TObjectID;
    FTiempo : TReal;
    FTiempoUnidadDeMedidaID : TObjectID;
    FTiempoUnidadDeMedida: TPDObject;
    FArticulo: TPDObject;
    FPasoDeFabricacion: TPDObject;
    FSumaEnCalculoDeCostos: TBoolean;
    procedure SetTiempoUnidadDeMedidaID(Value : TObjectID);
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    procedure SetArticuloID(Value : TObjectID);
    function GetTiempoUnidadDeMedida: TUnidadDeMedida;
    function GetArticulo: TArticulo;
    function GetPasoDeFabricacion: TPasoDeFabricacion;
    function GetTiempoEnSegundos: TReal;
  public
    constructor Create; override;
    property TiempoUnidadDeMedidaID : TObjectID read FTiempoUnidadDeMedidaID write SetTiempoUnidadDeMedidaID;
    property TiempoUnidadDeMedida   : TUnidadDeMedida read GetTiempoUnidadDeMedida;
    property Tiempo : TReal read FTiempo write FTiempo;
    property TiempoEnSegundos : TReal read GetTiempoEnSegundos;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion   : TPasoDeFabricacion read GetPasoDeFabricacion;
    property ArticuloID : TObjectID read FArticuloID write SetArticuloID;
    property Articulo   : TArticulo read GetArticulo;
    property SumaEnCalculoDeCostos : TBoolean read FSumaEnCalculoDeCostos write FSumaEnCalculoDeCostos;
end;

TArticuloPasoDeFabricacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _TiempoUnidadDeMedidaID = 'TiempoUnidadDeMedidaID';
      _Tiempo                 = 'Tiempo';
      _PasoDeFabricacionID    = 'PasoDeFabricacionID';
      _ArticuloID             = 'ArticuloID';
      _SumaEnCalculoDeCostos  = 'SumaEnCalculoDeCostos';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloPasoDeFabricacionList = class(TPDList)
  private
    function GetActual : TArticuloPasoDeFabricacion;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    Constructor CreateByArticulo(_A : TArticulo);
    function CreateNewObject: TPDObject; override;
    property Actual : TArticuloPasoDeFabricacion read GetActual;
end;

TArticuloCunioDefault = class(TPDObject)
  private
    FEsPredeterminado : TBoolean;
    FCunioID : TObjectID;
    FCunio : TPDObject;
    FArticuloID : TObjectID;
    function GetCunio : TCunio;
    procedure SetCunioID(Value : TObjectID);
  public
    constructor Create; override;
    property ArticuloID : TObjectID read FArticuloID write FArticuloID;
    property Cunio : TCunio read GetCunio;
    property CunioID : TObjectID read FCunioID write SetCunioID;
    property EsPredeterminado : TBoolean read FEsPredeterminado write FEsPredeterminado;
end;

TArticuloCunioDefaultDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ArticuloID = 'ArticuloID';
    _CunioID = 'CunioID';
    _EsPredeterminado = 'EsPredeterminado';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloCunioDefaultList = class(TPDList)
private
  function Getactual : TArticuloCunioDefault;
public
  constructor CreateAll;
  constructor CreateByArticulo(_A: TArticulo);
  constructor CreateByArticuloCunioPredeterminado(_A: TArticulo);
  function FindPredeterminado : Boolean;
  function FindCunioID( _CID: TObjectID ) : Boolean;
  function CreateNewObject: TPDObject; override;
  property actual : TArticuloCunioDefault read Getactual;
end;


TArticuloTraduccion = class(TTraduccion)
  private
    FArticulo  : TPDObject;
    FArticuloID: TObjectID;
    procedure SetArticuloID(Value: TObjectID);
    function GetArticulo: TArticulo;
  public
    constructor Create; override;
    property ArticuloID: TObjectID read FArticuloID write SetArticuloID;
    property Articulo  : TArticulo read GetArticulo;
end;

TArticuloTraduccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _ArticuloID         = 'ArticuloID';
      _Descripcion        = 'Articulo';
      _ResourceLanguageID = 'ResourceLanguageID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloTraduccionList = class(TTraduccionList)
  private
    function GetActual: TArticuloTraduccion;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    constructor CreateByArticulo(_A: TArticulo);
    function CreateNewObject: TPDObject; override;
    property Actual: TArticuloTraduccion read GetActual;
end;

TArticuloPrecio = class(TPDObject)
  private
      FMoneda : TPDObject;
      FMonedaID : TObjectID;
      FPrecio : TReal;
      FListaDePrecio : TPDObject;
      FListaDePrecioID : TObjectID;
      Farticulo : TPDObject;
      FarticuloID : TObjectID;
      fArticuloDescripcion: TString;
      fArticuloCodigo: TString;
      fListaDePrecioDescripcion: TString;
      fListaDePrecioCodigo: TString;
      fMonedaDescripcion: TString;
      fMonedaCodigo: TString;
      FExigePrecioEnCunio: TBoolean;
      procedure SetarticuloID(Value : TObjectID);
      function Getarticulo : TArticulo;
      procedure SetListaDePrecioID(Value : TObjectID);
      function GetListaDePrecio : TListaDePrecio;
      procedure SetMonedaID(Value : TObjectID);
      function GetMoneda : TMoneda;
      function GetPrecio: TReal;
      procedure SetPrecio(const Value: TReal);

  public
    constructor Create; override;
    function Save: Boolean; override;

    property ArticuloID               : TObjectID read FarticuloID write SetarticuloID;
    property Articulo                 : TArticulo read Getarticulo;
    property ListaDePrecioID          : TObjectID read FListaDePrecioID write SetListaDePrecioID; // es el padre
    property ListaDePrecio            : TListaDePrecio read GetListaDePrecio;
    property Precio                   : TReal read GetPrecio write SetPrecio;
    property MonedaID                 : TObjectID read FMonedaID write SetMonedaID;
    property Moneda                   : TMoneda read GetMoneda;
    Property ExigePrecioEnCunio       : TBoolean Read FExigePrecioEnCunio Write FExigePrecioEnCunio;

    // del createCompuesto
    property ArticuloCodigo           : TString read fArticuloCodigo;
    property ArticuloDescripcion      : TString read fArticuloDescripcion;
    property ListaDePrecioCodigo      : TString read fListaDePrecioCodigo;
    property ListaDePrecioDescripcion : TString read fListaDePrecioDescripcion;
    property MonedaCodigo             : TString read fMonedaCodigo;
    property MonedaDescripcion        : TString read fMonedaDescripcion;
end;

TArticuloPrecioDM = class(TSQLDBX_DMObject)
  protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _articuloID                 = 'ArticuloID';
      _ListaDePrecioID            = 'ListaDePrecioID';
      _Precio                     = 'Precio';
      _MonedaID                   = 'MonedaID';
      _ExigePrecioEnCunio         = 'ExigePrecioEnCunio';
    // Del CreateCompuesto
      _CCArticuloCodigo           = 'ArticuloCodigo';
      _CCArticuloDescripcion      = 'ArticuloDescripcion';
      _CCListaDePrecioDescripcion = 'ListaDescripcion';
      _CCListaDePrecioCodigo      = 'ListaCodigo';
      _CCMonedaCodigo             = 'MonedaCodigo';
      _CCMonedaDescripcion        = 'MonedaDescripcion';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloPrecioList = class(TPDList)
private
  function GetActual : TArticuloPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByArticulo( _A : TArticulo ) ;
  constructor CreateByListaDePrecioAndArticulo( _LP : TListaDePrecio; _A : TArticulo ) ;
  function CreateNewObject: TPDObject; override;
  function FindArticulo( _A: TArticulo ): Boolean;
  function FindCodigoArticulo( _CA: String ): Boolean;
  property Actual : TArticuloPrecio read GetActual;
end;

TMatrizArticuloAsociado = class(TPDObject)
private
  FArticuloAsociado: TPDObject;
  FArticuloAsociadoID: TObjectID;
  FArticuloPadreID: TObjectID;
  FArticuloPadre: TPDObject;
  procedure SetArticuloAsociadoID(Value: TObjectID);
  function GetArticuloAsociado: TArticulo;
  function GetArticuloPadre: TArticulo;
  procedure SetArticuloPadreID(const Value: TObjectID);
public
  constructor Create; override;
  property ArticuloPadreID: TObjectID read FArticuloPadreID write SetArticuloPadreID;
  property ArticuloPadre: TArticulo read GetArticuloPadre;
  property ArticuloAsociadoID: TObjectID read FArticuloAsociadoID write SetArticuloAsociadoID;
  property ArticuloAsociado: TArticulo read GetArticuloAsociado;
end;

TMatrizArticuloAsociadoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _ArticuloPadreID = 'ArticuloPadreID';
      _ArticuloAsociadoID = 'ArticuloAsociadoID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMatrizArticuloAsociadoList = class(TPDList)
private
  function GetActual: TMatrizArticuloAsociado;
public
  constructor CreateAll;
  constructor CreateByMatriz(_M: TArticulo);
  constructor CreateByArticulo(_A: TArticulo);
  function CreateNewObject: TPDObject; override;
  property Actual: TMatrizArticuloAsociado read GetActual;
  function FindArticuloID(_ID: TObjectID): Boolean;
end;

TMatrizComponente = class(TPDObject)
private
  FcomponenteDeMatriz: TPDObject;
  FcomponenteDeMatrizID: TObjectID;
  Farticulo: TPDObject;
  FarticuloID: TObjectID;
  Forden: TEntero;
  procedure SetArticuloID(Value: TObjectID);
  function Getarticulo: TArticulo;
  procedure SetcomponenteDeMatrizID(Value: TObjectID);
  function GetcomponenteDeMatriz: TComponenteDeMatriz;
public
  constructor Create; override;
  property ArticuloID: TObjectID read FarticuloID write SetArticuloID;
  property Articulo: TArticulo read Getarticulo;
  property ComponenteDeMatrizID: TObjectID read FcomponenteDeMatrizID write SetcomponenteDeMatrizID;
  property ComponenteDeMatriz: TComponenteDeMatriz read GetcomponenteDeMatriz;
  property Orden: TEntero read Forden write Forden;
end;

TMatrizComponenteDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _Orden                = 'Orden';
    _ArticuloID           = 'ArticuloID';
    _ComponenteDeMatrizID = 'ComponenteDeMatrizID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TMatrizComponenteList = class(TPDList)
private
  function GetActual: TMatrizComponente;
public
  constructor CreateAll;
  constructor CreateByArticuloMatriz(_A: TArticulo);
  function CreateNewObject: TPDObject; override;
  property Actual: TMatrizComponente read GetActual;
end;

TArticuloComponente = class(TPDObject)
private
  Forden: TEntero;
  FCantidad: TEntero;
  FComponente: TPDObject;
  FcomponenteID: TObjectID;
  FarticuloID: TObjectID;
  Farticulo: TPDObject;
  FarchivoDeImagen: TString;
  FarchivoSinImagen: TString;
  FcomponentesOpcionales: TarticuloComponenteOpcionalList;
  procedure SetcomponenteID(Value: TObjectID);
  function GetComponente: TArticulo;
  function GetarchivoDeImagen: TString;
  function GetComponenteID: TObjectID;
  function Getarticulo: TArticulo;
  function GetarchivoSinImagen: TString;
  function GetComponentesOpcionales: TarticuloComponenteOpcionalList;
public
  constructor Create; override;
  property ArticuloID: TObjectID read FarticuloID write FarticuloID;
  property Articulo: TArticulo read Getarticulo;
  property ComponenteID: TObjectID read GetComponenteID write SetcomponenteID;
  property Componente: TArticulo read GetComponente;
  property Cantidad: TEntero read FCantidad write FCantidad;
  property Orden: TEntero read Forden write Forden;
  property ArchivoDeImagen: TString read GetarchivoDeImagen;
  property ArchivoSinImagen: TString read GetarchivoSinImagen;
  property ComponentesOpcionales : TarticuloComponenteOpcionalList read GetComponentesOpcionales;
end;

TArticuloComponenteDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _ArticuloID   = 'ArticuloID'  ;
    _ComponenteID = 'ComponenteID';
    _Cantidad     = 'Cantidad'    ;
    _Orden        = 'Orden'       ;
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloComponenteList = class(TPDList)
private
  function GetActual: TArticuloComponente;
public
  constructor CreateAll;
  constructor CreateByArticulo(_A: TArticulo);
  constructor CreateByArticuloComponente(_A: TArticulo);
  constructor CreateByArticuloYComponente(_A: TArticulo; _C: TArticulo);
  constructor CreateEmpty;
  function CreateNewObject: TPDObject; override;
  property Actual: TArticuloComponente read GetActual;
  function FindArticuloID(_ArticuloID: TObjectID): Boolean;
end;

TarticuloComponenteOpcional = class(TPDObject)
private
  FComponente : TPDObject;
  FComponenteID : TObjectID;
  FArticuloComponenteID : TObjectID;
  procedure SetComponenteID(Value : TObjectID);
  function GetComponente : TArticulo;
public
  constructor Create; override;
  property ArticuloComponenteID : TObjectID read FArticuloComponenteID write FArticuloComponenteID;
  property ComponenteID : TObjectID read FComponenteID write SetComponenteID;
  property Componente : TArticulo read GetComponente;
end;

TarticuloComponenteOpcionalDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _ArticuloComponenteID = 'ArticuloComponenteID';
      _ComponenteID         = 'ComponenteID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TarticuloComponenteOpcionalList = class(TPDList)
  private
    function GetActual : TarticuloComponenteOpcional;
  public
    constructor CreateAll;
    constructor CreateByArticuloComponente( _AC : TArticuloComponente ) ;
    function FindCodigo(_ComponenteCodigo: String): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual : TarticuloComponenteOpcional read GetActual;
end;

TFabricadoComponenteDesplegado = class(TPDObject)
private
  FFabricadoPadreID: TObjectID;
  FFabricadoPadre: TFabricado;
  Forden: TEntero;
  FCantidad: TEntero;
  FFabricado: TFabricado;
  FFabricadoID: TObjectID;
  FcomponenteDesplegadoPadreID: TObjectID;
  FcomponenteDesplegadoNivel: TEntero;
  FArticuloOriginalID: TObjectID;
  FTerminacionOriginalID: TObjectID;
  FCunioOriginalID: TObjectID;
  FCrcOriginal: TEntero;
  FEsNoestandar: Tboolean;

  function GetFabricado: TFabricado;
  function GetFabricadoPadre: TFabricado;
public
  constructor Create; override;
  property FabricadoPadreID : TObjectID read FFabricadoPadreID write FFabricadoPadreID;
  property FabricadoPadre : TFabricado read GetFabricadoPadre Write FFabricadoPadre;
  property FabricadoID: TObjectID read FFabricadoID Write FFabricadoID;
  property Fabricado: TFabricado read GetFabricado write FFabricado;
  property ComponenteDesplegadoNivel : TEntero read FcomponenteDesplegadoNivel Write FcomponenteDesplegadoNivel;
  property Cantidad: TEntero read FCantidad write FCantidad;
  property orden: TEntero read Forden write Forden;
  property ComponenteDesplegadoPadreID : TObjectID read FcomponenteDesplegadoPadreID Write FcomponenteDesplegadoPadreID; // para usar en el arbol de componentes desplegados
  property ArticuloOriginalID : TObjectID read FArticuloOriginalID write FArticuloOriginalID;
  property TerminacionOriginalID: TObjectID read FTerminacionOriginalID write FTerminacionOriginalID;
  property CunioOriginalID : TObjectID read FCunioOriginalID write FCunioOriginalID;
  property CrcOriginal: TEntero read FCrcOriginal write FCrcOriginal;
  property esNoEstandar: Tboolean read FesNoEstandar write fesNoEstandar;
end;

TFabricadoComponenteDesplegadoList = class(TPDList)
private
  function GetActual: TFabricadoComponenteDesplegado;
  function FindFabricado(_F: TFabricado): Boolean;
public
  constructor CreateEmpty;
  function CreateNewObject: TPDObject; override;
  property Actual: TFabricadoComponenteDesplegado read GetActual;
end;

TArticuloComponenteDesplegado = class(TPDObject)
private
  Forden: TEntero;
  FCantidad: TEntero;
  FcomponenteDesplegado: TPDObject;
  FcomponenteDesplegadoID: TObjectID;
  FArticuloPadreID: TObjectID;
  FArticuloPadre: TPDObject;
  FcomponenteDesplegadoPadreID: TObjectID;
  FcomponenteDesplegadoNivel: TEntero;
  FarchivoDeImagen: TString;
  FarchivoSinImagen: TString;
  function GetcomponenteDesplegado: TArticulo;
  function GetarchivoDeImagen: TString;
  function GetArticuloPadre: TArticulo;
  function GetarchivoSinImagen: TString;
public
  constructor Create; override;
  property ComponenteDesplegadoPadreID : TObjectID read FcomponenteDesplegadoPadreID Write FcomponenteDesplegadoPadreID; // para usar en el arbol de componentes desplegados
  property ComponenteDesplegadoNivel : TEntero read FcomponenteDesplegadoNivel write FcomponenteDesplegadoNivel;
  property ArticuloPadreID : TObjectID read FArticuloPadreID write FArticuloPadreID;
  property componenteDesplegadoID : TObjectID read FcomponenteDesplegadoID write FcomponenteDesplegadoID;
  property ArticuloPadre: TArticulo read GetArticuloPadre;
  property ComponenteDesplegado: TArticulo read GetcomponenteDesplegado;
  property Cantidad: TEntero read FCantidad write FCantidad;
  property orden: TEntero read Forden write Forden;
  property archivoDeImagen: TString read GetarchivoDeImagen;
  property archivoSinImagen: TString read GetarchivoSinImagen;
end;

TArticuloComponenteDesplegadoDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloComponenteDesplegadoList = class(TPDList)
private
  function GetActual: TArticuloComponenteDesplegado;
public
  constructor CreateEmpty;
  function CreateNewObject: TPDObject; override;
  property Actual: TArticuloComponenteDesplegado read GetActual;
  function FindArticuloID(_ArticuloID: TObjectID): Boolean;
end;

TArticuloCosto = class(TPDObject)
private
  FTipoDeCosto: TPDObject;
  FTipoDeCostoID: TObjectID;
  FMoneda: TPDObject;
  FMonedaID: TObjectID;
  FCosto: TReal;
  Farticulo: TPDObject;
  FarticuloID: TObjectID;
  procedure SetArticuloID(Value: TObjectID);
  function Getarticulo: TArticulo;
  procedure SetMonedaID(Value: TObjectID);
  function GetMoneda: TMoneda;
  procedure SetTipoDeCostoID(Value: TObjectID);
  function GetTipoDeCosto: TTipoDeCosto;
public
  constructor Create; override;

  property articuloID: TObjectID read FarticuloID write SetArticuloID;
  property articulo: TArticulo read Getarticulo;
  property Costo: TReal read FCosto write FCosto;
  property MonedaID: TObjectID read FMonedaID write SetMonedaID;
  property Moneda: TMoneda read GetMoneda;
  property TipoDeCostoID : TObjectID read FTipoDeCostoID write SetTipoDeCostoID;
  property TipoDeCosto: TTipoDeCosto read GetTipoDeCosto;
end;

TArticuloCostoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _ArticuloID    = 'ArticuloID';
    _Costo         = 'Costo';
    _MonedaID      = 'MonedaID';
    _TipoDeCostoID = 'TipoDeCostoID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloCostoList = class(TPDList)
private
  function GetActual: TArticuloCosto;
public
  constructor CreateAll;
  constructor CreateByArticulo(_A: TArticulo);
  function CreateNewObject: TPDObject; override;
  property Actual: TArticuloCosto read GetActual;
end;

TArticuloInsumo = class(TPDObject)
private
  FMateriaPrima: TPDObject;
  FMateriaPrimaID: TObjectID;
  FCantidad: TReal;
  FarticuloID: TObjectID;
  Fscrap: TReal;
  procedure SetMateriaPrimaID(Value: TObjectID);
  function GetMateriaPrima: TMateriaPrima;
public
  constructor Create; override;
  property articuloID: TObjectID read FarticuloID write FarticuloID;
  property Cantidad: TReal read FCantidad write FCantidad;
  property scrap: TReal read Fscrap write Fscrap;
  property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
  property MateriaPrima: TMateriaPrima read GetMateriaPrima;
end;

TArticuloInsumoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _ArticuloID     = 'ArticuloID';
    _Cantidad       = 'Cantidad';
    _Scrap          = 'Acrap';
    _MateriaPrimaID = 'MateriaPrimaID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloInsumoList = class(TPDList)
private
  function GetActual: TArticuloInsumo;
public
  constructor CreateAll;
  constructor CreateByArticulo(_A: TArticulo);
  function CreateNewObject: TPDObject; override;
  property Actual: TArticuloInsumo read GetActual;
end;


TCanalDeDistribucion = class(TDescriptibleAbreviado)
  private
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TCanalDeDistribucionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Codigo = 'Codigo';
    _Descripcion = 'CanalDeDistribucion';
    _EsInactivo = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCanalDeDistribucionList = class(TDescriptibleAbreviadoList)
private
  function Getactual : TCanalDeDistribucion;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property actual : TCanalDeDistribucion read Getactual;
end;



TImpuesto = class(TDescriptibleAbreviado)
  private
    FEsRetencion            : TBoolean;
    FEsImpuesto             : TBoolean;
    FConceptos              : TImpuestoConceptoList;
    FCondiciones            : TImpuestoCondicionList;
    FEsAgenteDePercepcion   : TBoolean;
    FEsAgenteDeRetencion    : TBoolean;
    FNumeroCertificadoDeRetencion: TString;
    FCodigoInternoSifab: TEntero;
    function GetConceptos   : TImpuestoConceptoList;
    function GetCondiciones : TImpuestoCondicionList;
    function GetCodigoInternoSifab: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsImpuesto           : TBoolean read FEsImpuesto write FEsImpuesto;
    property EsRetencion          : TBoolean read FEsRetencion write FEsRetencion;
    property Conceptos            : TImpuestoConceptoList read GetConceptos;
    property Condiciones          : TImpuestoCondicionList read GetCondiciones;
    property EsAgenteDeRetencion  : TBoolean read FEsAgenteDeRetencion write FEsAgenteDeRetencion;
    property NumeroCertificadoDeRetencion  : TString read FNumeroCertificadoDeRetencion write FNumeroCertificadoDeRetencion;
    property EsAgenteDePercepcion : TBoolean read FEsAgenteDePercepcion write FEsAgenteDePercepcion;
    Property CodigoInternoSifab   : TEntero Read GetCodigoInternoSifab;

end;

TImpuestoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _Codigo               = 'Codigo';
    _Descripcion          = 'Impuesto';
    _EsImpuesto           = 'EsImpuesto';
    _EsInactivo           = 'EsInactivo';
    _EsRetencion          = 'EsRetencion';
    _EsAgenteDeRetencion  = 'EsAgenteDeRetencion';
    _NumeroCertificadoDeRetencion  = 'NumeroCertificadoDeRetencion';
    _EsAgenteDePercepcion = 'EsAgenteDePercepcion';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TImpuestoList = class(TDescriptibleAbreviadoList)
private
  function Getactual : TImpuesto;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property actual : TImpuesto read Getactual;
end;


TImpuestoCondicion = class(TPDObject)
  private
    FSeIncluyeEnPrecio : TBoolean;
    FImpuestoID : TObjectID;
    FCondicionDeIvaID : TObjectID;
    FCondicionDeIva : TPDObject;
    FImpuesto            : TPDObject;
    FControlEnFacturacion: TBoolean;
    function GetCondicionDeIva : TCondicionDeIva;
    procedure SetCondicionDeIvaID(Value : TObjectID);
    function GetImpuesto: TImpuesto;
  public
    constructor Create; override;
    property CondicionDeIva : TCondicionDeIva read GetCondicionDeIva;
    property CondicionDeIvaID : TObjectID read FCondicionDeIvaID write SetCondicionDeIvaID;
    property ImpuestoID : TObjectID read FImpuestoID write FImpuestoID;
    property Impuesto : TImpuesto read GetImpuesto;
    property SeIncluyeEnPrecio : TBoolean read FSeIncluyeEnPrecio write FSeIncluyeEnPrecio;
    property ControlEnFacturacion : TBoolean read FControlEnFacturacion write FControlEnFacturacion;
end;

TImpuestoCondicionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CondicionDeIvaID     = 'CondicionDeIvaID';
    _ImpuestoID           = 'ImpuestoID';
    _SeIncluyeEnPrecio    = 'SeIncluyeEnPrecio';
    _ControlEnFacturacion = 'ControlEnFacturacion';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TImpuestoCondicionList = class(TPDList)
private
  function Getactual : TImpuestoCondicion;
public
  constructor CreateAll;
  constructor CreateByImpuesto( _I: TImpuesto; _soloActivos: Boolean= false );
  function CreateNewObject: TPDObject; override;
  property actual : TImpuestoCondicion read Getactual;
end;

TImpuestoConcepto = class(TDescriptibleAbreviado)
  private
    FImpuestoID : TObjectID;
    FImpuesto : TPDObject;
    FEsPredeterminadoProductos : TBoolean;
    FEsDestinoVenta : TBoolean;
    FEsDestinoCompra : TBoolean;
    FAlicuota: TReal;
    FCuentaContableCompras: TPDObject;
    FCalcularAPartirDe: TReal;
    FBaseDeCalculo: TString;
    FTipoDeMovimiento: TString;
    FCuentaContableVentas: TPDObject;
    FPadronID: TObjectID;
    FPadron: TPDObject;
    FSeAplicaAItems: TBoolean;
    FCodigoAfip: TString;
    FCodigoInternoSifab: TEntero;
    FCuentaContableComprasID: TObjectID;
    FCuentaContableVentasID: TObjectID;
    FPadrones: TImpuestoConceptoPadronList;
    FCodigoTeamplace: TString;
    FIDTeamplace    : TEntero;
    function GetImpuesto : TImpuesto;
    procedure SetImpuestoID(Value : TObjectID);
    function GetCodigoInternoSifab: TEntero;
    procedure SetCuentaContableComprasID(const Value: TObjectID);
    function GetCuentaContableCompras: TCuentaContable;
    function getCuentaContableVentas: TCuentaContable;
    procedure SetCuentaContableVentasID(const Value: TObjectID);
    function GetPadrones: TImpuestoConceptoPadronList;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property CodigoAfip                : TString read FCodigoAfip write FCodigoAfip;
    property EsDestinoCompra           : TBoolean read FEsDestinoCompra write FEsDestinoCompra;
    property EsDestinoVenta            : TBoolean read FEsDestinoVenta write FEsDestinoVenta;
    property EsPredeterminadoProductos : TBoolean read FEsPredeterminadoProductos write FEsPredeterminadoProductos;
    property SeAplicaAItems            : TBoolean read FSeAplicaAItems write FSeAplicaAItems;
    property Impuesto                  : TImpuesto read GetImpuesto;
    property ImpuestoID                : TObjectID read FImpuestoID write SetImpuestoID;
    property TipoDeMovimiento          : TString read FTipoDeMovimiento write FTipoDeMovimiento;
    property BaseDeCalculo             : TString read FBaseDeCalculo write FBaseDeCalculo;
    property Alicuota                  : TReal read FAlicuota write FAlicuota;
    property CalcularAPartirDe         : TReal read FCalcularAPartirDe write FCalcularAPartirDe;
    property CuentaContableCompras     : TCuentaContable read GetCuentaContableCompras;
    property CuentaContableComprasID   : TObjectID read FCuentaContableComprasID write SetCuentaContableComprasID;
    property CuentaContableVentas      : TCuentaContable read getCuentaContableVentas;
    property CuentaContableVentasID    : TObjectID read FCuentaContableVentasID write SetCuentaContableVentasID;
    property CodigoInternoSifab        : TEntero Read GetCodigoInternoSifab;
    property CodigoTeamplace           : TString read FCodigoTeamplace Write FCodigoTeamplace;
    property IDTeamplace               : TEntero read GetIDTeamplace;
    property Padrones                  : TImpuestoConceptoPadronList Read GetPadrones;
end;

TImpuestoConceptoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _Codigo                     = 'Codigo';
      _Descripcion                = 'ImpuestoConcepto';
      _EsDestinoCompra            = 'EsDestinoCompra';
      _EsDestinoVenta             = 'EsDestinoVenta';
      _EsInactivo                 = 'EsInactivo';
      _EsPredeterminadoProductos  = 'EsPredeterminadoProductos';
      _ImpuestoID                 = 'ImpuestoID';
      _TipoDeMovimiento           = 'TipoDeMovimiento';           // S= suma, R= Resta, N = Neutro
      _BaseDeCalculo              = 'BaseDeCalculo';              // I= impuesto, N= neto sin impuestos ; T= total más impuestos
      _SeAplicaAItems             = 'SeAplicaAItems';             // si es false es porque se aplica a cabecera
      _PadronID                   = 'PadronID';                   // tabla de padrones
      _Alicuota                   = 'Alicuota';
      _CalcularAPartirDe          = 'CalcularAPartirDe';
      _CuentaContableComprasID    = 'CuentaContableComprasID';
      _CuentaContableVentasID     = 'CuentaContableVentasID' ;
      _CodigoAfip                 = 'CodigoAfip';
      _CodigoTeamplace            = 'CodigoTeamplace';
      //Alias de la base de datos de Teamplace
      _TeamplaceTableName         = 'BSTasaImpositiva';
      _TeamplaceCodigo            = 'Codigo';
      _TeamplaceID                = 'TasaImpositivaID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TImpuestoConceptoList = class(TDescriptibleAbreviadoList)
private
  function Getactual : TImpuestoConcepto;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  constructor CreateByImpuesto( _I: TImpuesto; _soloActivos: Boolean= false );
  constructor CreateByDefaultFabricados( _SoloActivos : Boolean = False );
  function CreateNewObject: TPDObject; override;
  property actual : TImpuestoConcepto read Getactual;
end;


TImpuestoConceptoPadron = class(TPDObject)
  private
    FPadronID : TObjectID;
    FPadron : TPDObject;
    FOrden : TEntero;
    FImpuestoConceptoID : TObjectID;
    FImpuestoConcepto : TPDObject;
    function GetImpuestoConcepto : TImpuestoConcepto;
    procedure SetImpuestoConceptoID(Value : TObjectID);
    function GetPadron : TPadron;
    procedure SetPadronID(Value : TObjectID);
  public
    constructor Create; override;
    property ImpuestoConcepto : TImpuestoConcepto read GetImpuestoConcepto;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property Orden : TEntero read FOrden write FOrden;
    property Padron : TPadron read GetPadron;
    property PadronID : TObjectID read FPadronID write SetPadronID;
end;

TImpuestoConceptoPadronDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ImpuestoConceptoID = 'ImpuestoConceptoID';
    _Orden = 'Orden';
    _PadronID = 'PadronID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TImpuestoConceptoPadronList = class(TPDList)
private
  function Getactual : TImpuestoConceptoPadron;
public
  constructor CreateAll;
  constructor CreateByImpuestoConcepto( _IC : TImpuestoConcepto );
  function CreateNewObject: TPDObject; override;
  property actual : TImpuestoConceptoPadron read Getactual;
end;

THerramental = class(TDescriptibleAbreviado)
  private
    FGolpesBPM             : TEntero;
    FCajon                 : TString;
    FCantidadDemovimientos : TEntero;
    FTiempoDeSetupEnHoras  : TReal;
    FCantidadDeBocas       : TEntero;
    FPasoDeMatriz          : TReal;
    FTipoDeRecurso         : TPDObject;
    FTipoDeRecursoID       : TObjectID;
    FUnidadDeMedidaPasoDeMatrizID: TObjectID;
    FUnidadDeMedidaPasoDeMatriz: TPDObject;
    function GetTipoDeRecurso: TTipoDeRecurso;
    procedure SetTipoDeRecursoID(const Value: TObjectID);
    procedure SetUnidadDeMedidaPasoDeMatrizID(const Value: TObjectID);
    function GetUnidadDeMedidaPasoDeMatriz: TUnidadDeMedida;
    function GetPasoDeMatrizDescripcion: TString;
  protected
    Function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property TipoDeRecursoID              : TObjectID       Read FTipoDeRecursoID       Write SetTipoDeRecursoID;
    property TipoDeRecurso                : TTipoDeRecurso  Read GetTipoDeRecurso;
    property Cajon                        : TString         Read FCajon                 Write FCajon;
    property CantidadDemovimientos        : TEntero         Read FCantidadDemovimientos Write FCantidadDemovimientos;
    property GolpesBrutosPorMinuto        : TEntero         Read FGolpesBPM             Write FGolpesBPM;
    property TiempoDeSetupEnHoras         : TReal           Read FTiempoDeSetupEnHoras  Write FTiempoDeSetupEnHoras;
    property CantidadDeBocas              : TEntero         Read FCantidadDeBocas       Write FCantidadDeBocas;
    property PasoDeMatriz                 : TReal           Read FPasoDeMatriz          Write FPasoDeMatriz;
    property UnidadDeMedidaPasoDeMatrizID : TObjectID       Read FUnidadDeMedidaPasoDeMatrizID Write SetUnidadDeMedidaPasoDeMatrizID;
    property UnidadDeMedidaPasoDeMatriz   : TUnidadDeMedida Read GetUnidadDeMedidaPasoDeMatriz;
    property PasoDeMatrizDescripcion      : TString         Read GetPasoDeMatrizDescripcion;
end;

THerramentalDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                       = 'Codigo';
      _Descripcion                  = 'Herramental';
      _CantidadDeMovimientos        = 'CantidadDeMovimientos';
      _TipoDeRecursoID              = 'TipoDeRecursoID';
      _EsInactivo                   = 'EsInactivo';
      _Cajon                        = 'Cajon';
      _GolpesBPM                    = 'GolpesBPM';
      _TiempoDeSetupEnHoras         = 'TiempoDeSetupEnHoras';
      _CantidadDeBocas              = 'CantidadDeBocas';
      _PasoDeMatriz                 = 'PasoDeMatriz';
      _UnidadDeMedidaPasoDeMatrizID = 'UnidadDeMedidaPasoDeMatrizID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

THerramentalList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: THerramental;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    Constructor CreateByTipoDeRecurso (_TR : TTipoDeRecurso ; _SoloActivos : Boolean = False );
    Constructor CreateByCodigoLikeAndTipoDeRecurso ( _C : String ; _TR : TTipoDeRecurso ; _SoloActivos : Boolean = False);
    Constructor CreateByRecurso (_R : TRecurso ; _SoloActivos : Boolean = False );
    Constructor CreateByCodigoLikeAndRecurso ( _C : String ; _R : TRecurso ; _SoloActivos : Boolean = False);
    constructor CreateEmpty;
    function CreateNewObject: TPDObject; override;
    property Actual: THerramental read GetActual;
end;

TTipoDeHerramental = class(TDescriptible)
  private
    FTipoDeRecursoID      : TObjectID;
    FTipoDeRecurso        : TPDObject;
    FGolpesBPM            : TEntero;
    FTiempoDeSetupEnHoras : TReal;
    procedure SetTipoDeRecursoID(Value : TObjectID);
    function GetTipoDeRecurso: TTipoDeRecurso;
  public
    constructor Create; override;
    Destructor Destroy; override;
    property TipoDeRecursoID           : TObjectID read FTipoDeRecursoID write SetTipoDeRecursoID;
    property TipoDeRecurso             : TTipoDeRecurso read GetTipoDeRecurso;
    property GolpesBPM                 : TEntero read FGolpesBPM write FGolpesBPM;
    property TiempoDeSetupEnHoras      : TReal read FTiempoDeSetupEnHoras write FTiempoDeSetupEnHoras;
end;

TTipoDeHerramentalDM = class(TSQLDBX_DMObject)
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  class function EsInactivo_FieldName : string; override;
  const
    _TipoDeRecursoID      = 'TipoDeRecursoID';
    _Descripcion          = 'TipoDeHerramental';
    _GolpesBPM            = 'GolpesBPM';
    _TiempoDeSetupEnHoras = 'TiempoDeSetupEnHoras';
    _EsInactivo           = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeHerramentalList = class(TDescriptibleList)
private
  function GetActual : TTipoDeHerramental;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByCategoriaDeMateriaPrima(_CT : TCategoriaDeMateriaPrima; _SoloActivos: Boolean);
  function CreateNewObject: TPDObject; override;
  property Actual : TTipoDeHerramental read GetActual;
end;

TCunioArticuloPosibleHerramental = class(TPDObject)
  private
    FTipoDeHerramental                        : TPDObject;
    FTipoDeHerramentalID                      : TObjectID;
    FCantidadDeBocas                          : TEntero;
    FCajon                                    : TString;
    FEsDefault                                : TBoolean;
    FEsRoturaManual                           : TBoolean;
    FEsInactivo                               : TBoolean;
    FObservacion                              : TString;
    FCantidad                                 : TEntero;
    FMateriaPrima                             : TPDObject;
    FMateriaPrimaID                           : TObjectID;
    FCunioArticuloPosibleID                   : TObjectID;
    FCunioArticuloPosible                     : TPDObject;
    FHerramental                              : TPDObject;
    FHerramentalID                            : TObjectID;
    FCantidadUnitariaConScrap                 : TReal;
    FCantidadUnitariaConScrapUnidadDeMedidaID : TObjectID;
    FCantidadUnitariaConScrapUnidadDeMedida   : TPDObject;

    procedure SetTipoDeHerramentalID(const Value: TObjectID);
    function GetTipoDeHerramental: TTipoDeHerramental;
    procedure SetMateriaPrimaID(const Value: TObjectID);
    function GetMateriaPrima: TMateriaPrima;
    function GetCunioArticuloPosible: TCunioArticuloPosible;

    procedure SetHerramentalID(const Value: TObjectID);
    function  GetHerramental: THerramental;
    function  GetCantidadUnitariaConScrap: TReal;
    function  GetCantidadUnitariaConScrapDescripcion: TString;
    function  GetCantidadUnitariaConScrapUnidadDeMedida: TUnidadDeMedida;
    procedure SetCantidadUnitariaConScrapUnidadDeMedidaID(const Value: TObjectID);
  Public
    Procedure ValidarDatos;
    function Save: Boolean; override;
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    property CunioArticuloPosibleID : TObjectID        read FCunioArticuloPosibleID write FCunioArticuloPosibleID;
    property CunioArticuloPosible : TCunioArticuloPosible read GetCunioArticuloPosible;
    property TipoDeHerramentalID  : TObjectID          read FTipoDeHerramentalID  write SetTipoDeHerramentalID;
    property TipoDeHerramental    : TTipoDeHerramental read GetTipoDeHerramental;
    property HerramentalID        : TObjectID          read FHerramentalID  write SetHerramentalID;
    property Herramental          : THerramental       read GetHerramental;
    Property Cantidad             : TEntero            read FCantidad             write FCantidad;
    property CantidadDeBocas      : TEntero            read FCantidadDeBocas      write FCantidadDeBocas;
    property Cajon                : TString            read FCajon                write FCajon;
    property EsDefault            : TBoolean           read FEsDefault            write FEsDefault;
    property EsInactivo           : TBoolean           read FEsInactivo           write FEsInactivo;
    property EsRoturaManual       : TBoolean           read FEsRoturaManual       write FEsRoturaManual;
    property Observacion          : TString            read FObservacion          write FObservacion;
    Property MateriaPrimaID       : TObjectID          read FMateriaPrimaID        write SetMateriaPrimaID;
    Property MateriaPrima         : TMateriaPrima      read GetMateriaPrima;
    Function CantidadDeMateriaPrimaNecesaria(_Cantidad : Integer) : TReal;
    Function TiempoDeProduccionEnHoras(_CantDeProducto : Integer) : TReal;

    Property CantidadUnitariaConScrap                 : TReal           read GetCantidadUnitariaConScrap               Write FCantidadUnitariaConScrap;
    Property CantidadUnitariaConScrapUnidadDeMedidaID : TObjectID       read FCantidadUnitariaConScrapUnidadDeMedidaID write SetCantidadUnitariaConScrapUnidadDeMedidaID;
    Property CantidadUnitariaConScrapUnidadDeMedida   : TUnidadDeMedida read GetCantidadUnitariaConScrapUnidadDeMedida;
    Property CantidadUnitariaConScrapDescripcion      : TString         read GetCantidadUnitariaConScrapDescripcion;


end;

TCunioArticuloPosibleHerramentalDM = class(TSQLDBX_DMObject)
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  class function EsInactivo_FieldName : string; override;
  const
    _CunioArticuloPosibleID               = 'CunioArticuloPosibleID';
    _HerramentalID                        = 'HerramentalID';
    _Cantidad                             = 'Cantidad';
    _Cajon                                = 'Cajon';
    _CantidadDeBocas                      = 'CantidadDeBocas';
    _EsDefault                            = 'EsDefault';
    _EsInactivo                           = 'EsInactivo';
    _EsRoturaManual                       = 'EsRoturaManual';
    _Observacion                          = 'Observacion';
    _TipoDeHerramentalID                  = 'TipoDeHerramentalID';
    _MateriaPrimaID                       = 'MateriaPrimaID';
    _PesoUnitarioConScrap                 = 'PesoUnitarioConScrap';
    _PesoUnitarioConScrapUnidadDeMedidaID = 'PesoUnitarioConScrapUnidadDeMedidaID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCunioArticuloPosibleHerramentalList = class(TPDList)
private
  function GetActual : TCunioArticuloPosibleHerramental;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByCunioArticuloPosible(_CAP : TCunioArticuloPosible; _SoloActivos: Boolean);
  Function CreateNewObject: TPDObject; override;
  property Actual : TCunioArticuloPosibleHerramental read GetActual;
  function FindDefault: Boolean; overload;
  function FindDefaultPopup: Boolean; overload;
end;

TArticuloMetodoDeCorte = class(TPDObject)
  private
    FMateriaPrimaID: TObjectID;
    FMateriaPrima: TPDObject;
    FPesoUnitarioConScrap: TReal;
    FPesoUnitarioConScrapUnidadDeMedidaID: TObjectID;
    FPesoUnitarioConScrapUnidadDeMedida: TPDObject;
    FHerramental: TPDObject;
    FHerramentalID: TObjectID;
    FEsDefault: TBoolean;
    FArticuloID: TObjectID;
    FArticulo: TPDObject;
    FEsInactivo : TBoolean;
    FEsComprado: TBoolean;
    // del create compuesto
    FCCMetodoDeCorteEsComprado: TBoolean;
    FCCHerramentalCantidadDeBocas: TEntero;
    FCCMateriaPrimaUnidadDeMedidaEquivalencia: TReal;
    FCCMateriaPrimaAnchoDeTira: TReal;
    FCCMaterialUnidadDeMedidaEquivalencia: TReal;
    FCCMaterialPesoEspecifico: TReal;
    FCCHerramentalPasoDeMatriz: TReal;
    FCCMateriaPrimaEspesor: TReal;
    FCCMateriaPrimaEsInyeccion: TBoolean;
    FCCMateriaPrimaCosto: TReal;
    FCCMateriaPrimaDiametro: TReal;
    FCCMateriaPrimaMonedaCostoID: TObjectID;
    function GetPesoUnitarioConScrapUnidadDeMedida: TUnidadDeMedida;
    function GetArticulo: TArticulo;
    function GetPesoUnitarioConScrap: TReal;
    function GetPesoUnitarioConScrapDescripcion: TString;
    function GetHerramental: THerramental;
    procedure SetHerramentalID(const Value: TObjectID);
    Procedure SetMateriaPrimaID(Value: TObjectID);
    Function GetMateriaPrima: TMateriaPrima;
    // del create compuesto
    function GetCCHerramentalCantidadDeBocas: TEntero;
    function GetCCHerramentalPasoDeMatriz: TReal;
    function GetCCMaterialPesoEspecifico: TReal;
    function GetCCMaterialUnidadDeMedidaEquivalencia: TReal;
    function GetCCMateriaPrimaAnchoDeTira: TReal;
    function GetCCMateriaPrimaCosto: TReal;
    function GetCCMateriaPrimaDiametro: TReal;
    function GetCCMateriaPrimaEsInyeccion: TBoolean;
    function GetCCMateriaPrimaEspesor: TReal;
    function GetCCMateriaPrimaMonedaCostoID: TObjectID;
    function GetCCMateriaPrimaUnidadDeMedidaEquivalencia: TReal;
  public
    constructor Create; override;
    function Save: Boolean; Override;
    property ArticuloID : TObjectID read FArticuloID write FArticuloID;
    property Articulo   : TArticulo read GetArticulo;
    property HerramentalID : TObjectID read FHerramentalID write SetHerramentalID;
    property Herramental   : THerramental read GetHerramental;
    property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
    property MateriaPrima: TMateriaPrima read GetMateriaPrima;
    property PesoUnitarioConScrap: TReal read GetPesoUnitarioConScrap write FPesoUnitarioConScrap;
    property PesoUnitarioConScrapUnidadDeMedidaID: TObjectID read FPesoUnitarioConScrapUnidadDeMedidaID write FPesoUnitarioConScrapUnidadDeMedidaID;
    property PesoUnitarioConScrapUnidadDeMedida: TUnidadDeMedida read GetPesoUnitarioConScrapUnidadDeMedida;
    Property PesoUnitarioConScrapDescripcion : TString Read GetPesoUnitarioConScrapDescripcion;
    Function CantidadDeMateriaPrimaNecesaria(_Cantidad : Integer) : TReal;
    Property EsDefault: TBoolean read FEsDefault write FEsDefault;
    Function TiempoDeProduccionEnHoras(_CantDeProducto : Integer): TReal;
    Property EsInactivo: TBoolean read FEsInactivo write FEsInactivo;
    Property EsComprado: TBoolean read FEsComprado write FEsComprado;

    // del CreateCompuesto
    Property CCMateriaPrimaAnchoDeTira                : TReal     read GetCCMateriaPrimaAnchoDeTira                write FCCMateriaPrimaAnchoDeTira;
    Property CCMateriaPrimaEspesor                    : TReal     read GetCCMateriaPrimaEspesor                    write FCCMateriaPrimaEspesor;
    Property CCMateriaPrimaDiametro                   : TReal     read GetCCMateriaPrimaDiametro                   write FCCMateriaPrimaDiametro;
    Property CCMateriaPrimaEsInyeccion                : TBoolean  read GetCCMateriaPrimaEsInyeccion                write FCCMateriaPrimaEsInyeccion;
    Property CCMateriaPrimaCosto                      : TReal     read GetCCMateriaPrimaCosto                      write FCCMateriaPrimaCosto;
    Property CCMateriaPrimaMonedaCostoID              : TObjectID read GetCCMateriaPrimaMonedaCostoID              write FCCMateriaPrimaMonedaCostoID;
    Property CCMaterialPesoEspecifico                 : TReal     read GetCCMaterialPesoEspecifico                 write FCCMaterialPesoEspecifico;
    Property CCHerramentalCantidadDeBocas             : TEntero   read GetCCHerramentalCantidadDeBocas             write FCCHerramentalCantidadDeBocas;
    Property CCHerramentalPasoDeMatriz                : TReal     read GetCCHerramentalPasoDeMatriz                write FCCHerramentalPasoDeMatriz;
    Property CCMaterialUnidadDeMedidaEquivalencia     : TReal     read GetCCMaterialUnidadDeMedidaEquivalencia     write FCCMaterialUnidadDeMedidaEquivalencia;
    Property CCMateriaPrimaUnidadDeMedidaEquivalencia : TReal     read GetCCMateriaPrimaUnidadDeMedidaEquivalencia write FCCMateriaPrimaUnidadDeMedidaEquivalencia;
end;

TArticuloMetodoDeCorteDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;

    const
      _HerramentalID                            = 'HerramentalID';
      _MateriaPrimaID                           = 'MateriaPrimaID';
      _ArticuloID                               = 'ArticuloID';
      _PesoUnitarioConScrap                     = 'PesoUnitarioConScrap';
      _PesoUnitarioConScrapUnidadDeMedidaID     = 'PesoUnitarioConScrapUnidadDeMedidaID';
      _EsDefault                                = 'EsDefault';
      _EsComprado                               = 'EsComprado';
      _EsInactivo                               = 'EsInactivo';
      // del create compuesto
      _CCMateriaPrimaAnchoDeTira                = 'MateriaPrimaAnchoDeTira';
      _CCMaterialPesoEspecifico                 = 'MaterialPesoEspecifico';
      _CCMateriaPrimaEspesor                    = 'MateriaPrimaEspesor';
      _CCMateriaPrimaEsInyeccion                = 'MateriaPrimaEsInyeccion';
      _CCMateriaPrimaCosto                      = 'MateriaPrimaCosto';
      _CCMateriaPrimaMonedaCostoID              = 'MateriaPrimaMonedaCostoID';
      _CCMateriaPrimaDiametro                   = 'MateriaPrimaDiametro';
      _CCHerramentalCantidadDeBocas             = 'HerramentalCantidadDeBocas';
      _CCHerramentalPasoDeMatriz                = 'HerramentalPasoDeMatriz';
      _CCMaterialUnidadDeMedidaEquivalencia     = 'MaterialUnidadDeMedidaEquivalencia';
      _CCMateriaPrimaUnidadDeMedidaEquivalencia = 'MateriaPrimaUnidadDeMedidaEquivalencia';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TArticuloMetodoDeCorteList = class(TPDList)
  private
    function GetActual: TArticuloMetodoDeCorte;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByArticulo(_A: TArticulo; _SoloActivos: Boolean);
    constructor CreateByArticuloAndCodigoLike(_A: TArticulo; _C : String ;_SoloActivos: Boolean);
    function CreateNewObject: TPDObject; override;
    Function FindDefault : Boolean; // si no hay default trae el primero
    Function FindDefaultPopup : Boolean; // este no trae el primero
    property Actual: TArticuloMetodoDeCorte read GetActual;
end;

TTipoDeEmail = class(TDescriptible)
  private
    FEsElResponsable: Boolean;
  public
    constructor Create; override;
    property EsElResponsable : Boolean read FEsElResponsable write FEsElResponsable;
end;

TTipoDeEmailDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    Class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion     = 'TipoDeEmail';
      _EsElResponsable = 'EsElResponsable';
      _EsInactivo      = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeEmailList = class(TDescriptibleList)
  private
    function GetActual: TTipoDeEmail;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeEmail read GetActual;
    function Find(_Descripcion: TString): Boolean; overload;
end;

TTipoDeRecurso = class(TDescriptible)
  private
    FCategoriaDeMateriaPrimaID : TObjectID;
    FCategoriaDeMateriaPrima   : TPDObject;
    procedure SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
    function GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
  public
    constructor Create; override;
    property CategoriaDeMateriaPrimaID : TObjectID read FCategoriaDeMateriaPrimaID write SetCategoriaDeMateriaPrimaID;
    property CategoriaDeMateriaPrima   : TCategoriaDeMateriaPrima read GetCategoriaDeMateriaPrima;
end;

TTipoDeRecursoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion               = 'TipoDeRecurso';
      _EsInactivo                = 'EsInactivo';
      _CategoriaDeMateriaPrimaID = 'CategoriaDeMateriaPrimaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeRecursoList = class(TDescriptibleList)
  private
    function GetActual: TTipoDeRecurso;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeRecurso read GetActual;
end;

TCategoriaDeTerminacionesTerminacionPosible = class(TPDObject)
  private
    FProcesosPosibles: TOBject;
    FInsumos: TOBject;
    FCostos: TOBject;
    FTerminacion: TPDObject;
    FTerminacionID: TObjectID;
    FCategoriaDeTerminacionesPosibles: TPDObject;
    FCategoriaDeTerminacionesPosiblesID: TObjectID;
    // variables de terminaciones
    FCCTerminacionCodigo: TString;
    FCCTerminacionDescripcion: TString;
    FCCTerminacionEsInactivo: TBoolean;
    FCCTerminacionNumeroDeOrden: TReal;
    FTArchivoDeImagen: TString;
    FTArchivoSinImagen: TString;
    procedure SetTerminacionID(Value: TObjectID);
    function GetTerminacion: TTerminacion;
    function GetCostos: TCategoriaDeTerminacionesTerminacionPosibleCostoList;
    function GetInsumos: TCategoriaDeTerminacionesTerminacionPosibleInsumoList;
    function GetProcesosPosibles: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList;
    function GetCategoriaDeTerminacionesPosibles : TCategoriaDeTerminacionesPosibles;
    function GetArchivoDeImagen: TString;
    function GetArchivoSinImagen: TString;
    procedure SetCategoriaDeTerminacionesPosiblesID(const Value: TObjectID);
    function GetFTerminacionCodigo: TString;
    function GetFTerminacionDescripcion: TString;
    function GetFTerminacionEsInactivo: TBoolean;
    function GetFTerminacionNumeroDeOrden: TReal;
  public
    constructor Create; override;
    procedure Delete; override;
    procedure AutomatizarCostos;
    procedure AutomatizarInsumos;
    procedure AutomatizarProcesosPosibles(_AutomatizarEspecificaciones: Boolean = False);
    property CategoriaDeTerminacionesPosiblesID : TObjectID read FCategoriaDeTerminacionesPosiblesID write SetCategoriaDeTerminacionesPosiblesID;
    property CategoriaDeTerminacionesPosibles : TCategoriaDeTerminacionesPosibles read GetCategoriaDeTerminacionesPosibles;
    property TerminacionID : TObjectID read FterminacionID write SetterminacionID;
    property Terminacion: TTerminacion read Getterminacion;
    property Costos: TCategoriaDeTerminacionesTerminacionPosibleCostoList read GetCostos;
    property ProcesosPosibles: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList read GetprocesosPosibles;
    property Insumos: TCategoriaDeTerminacionesTerminacionPosibleInsumoList read GetInsumos;
    // property de Terminaciones
    property Codigo           : TString read GetFTerminacionCodigo;
    property Descripcion      : TString read GetFTerminacionDescripcion;
    property EsInactivo       : TBoolean read GetFTerminacionEsInactivo;
    property NumeroDeOrden    : TReal read GetFTerminacionNumeroDeOrden;
    property ArchivoDeImagen  : TString read GetArchivoDeImagen;
    property ArchivoSinImagen : TString read GetArchivoSinImagen;
  end;

TCategoriaDeTerminacionesTerminacionPosibleDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _CatDeTermsPosiblesID = 'CatDeTermsPosiblesID';
      _TerminacionID        = 'TerminacionID';
      // campos de terminaciones
      _CCTerminacionCodigo         = 'CCTerminacionCodigo';
      _CCTerminacionDescripcion    = 'CCTerminacionDescripcion';
      _CCTerminacionNumeroDeOrden  = 'CCTerminacionNumeroDeOrden';
      _CCTerminacionEsInactivo     = 'CCTerminacionEsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleList = class(TPDList)
private
  function GetActual: TCategoriaDeTerminacionesTerminacionPosible;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateEmpty;
  constructor CreateByCategoriaDeTerminacionesPosibles(_CTP: TCategoriaDeTerminacionesPosibles);
  constructor CreateByCategoriaDeTerminacionesPosiblesLike(_CTP: TCategoriaDeTerminacionesPosibles;_CodigoTerminacionLike: String);
  constructor CreateByTerminacion(_T: TTerminacion);
  constructor CreateByCategoriaYTerminacion(_C: TCategoriaDeTerminacionesPosibles; _T: TTerminacion; _SoloActivos : Boolean = False);
  constructor CreateByCategoriaYTerminacionYProcesoLike(_C: TCategoriaDeTerminacionesPosibles; _T: TTerminacion; _P: String);

  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeTerminacionesTerminacionPosible read GetActual;
  function Find(_T: TTerminacion; _Next: Boolean = False): Boolean; overload;
  function Find(_cod: string; _Next: Boolean = False): Boolean; overload;

end;

TCategoriaDeTerminacionesTerminacionPosibleCosto = class(TPDObject)
private
  FTipoDeCostoDeLaTerminacion: TPDObject;
  FTipoDeCostoDeLaTerminacionID: TObjectID;
  FMoneda: TPDObject;
  FMonedaID: TObjectID;
  FCosto: TReal;
  FCategoriaDeTerminacionesTerminacionPosible: TPDObject;
  FCategoriaDeTerminacionesTerminacionPosibleID: TObjectID;
  FOnBeforeDelete: TNotifyEvent;
  FOnBeforeInsert: TNotifyEvent;

  procedure DoBeforeDelete(Sender: TOBject);
  procedure DoBeforeInsert(Sender: TOBject);

  procedure SetCategoriaDeTerminacionesTerminacionPosibleID(Value: TObjectID);
  function GetCategoriaDeTerminacionesTerminacionPosible: TCategoriaDeTerminacionesTerminacionPosible;

  procedure SetMonedaID(Value: TObjectID);
  procedure SetTipoDeCostoDeLaTerminacionID(Value: TObjectID);
  function GetMoneda: TMoneda;
  function GetTipoDeCostoDeLaTerminacion: TTerminacionTipoDeCosto;
public
  constructor Create; override;
  procedure Delete; override;
  function Save: Boolean; override;
  property CategoriaDeTerminacionesTerminacionPosibleID: TObjectID read FCategoriaDeTerminacionesTerminacionPosibleID write SetCategoriaDeTerminacionesTerminacionPosibleID;
  property CategoriaDeTerminacionesTerminacionPosible : TCategoriaDeTerminacionesTerminacionPosible read GetCategoriaDeTerminacionesTerminacionPosible;
  property Costo: TReal read FCosto write FCosto;
  property MonedaID: TObjectID read FMonedaID write SetMonedaID;
  property Moneda: TMoneda read GetMoneda;
  property TipoDeCostoDeLaTerminacionID : TObjectID read FTipoDeCostoDeLaTerminacionID write SetTipoDeCostoDeLaTerminacionID;
  property TipoDeCostoDeLaTerminacion: TTerminacionTipoDeCosto read GetTipoDeCostoDeLaTerminacion;
  property OnBeforeDelete : TNotifyEvent read FOnBeforeDelete write FOnBeforeDelete;
  property OnBeforeInsert : TNotifyEvent read FOnBeforeInsert write FOnBeforeInsert;
end;

TCategoriaDeTerminacionesTerminacionPosibleCostoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _CatDeTermsPosiblesTermsPosID = 'CatDeTermsPosiblesTermsPosID';
      _Costo                        = 'Costo';
      _MonedaID                     = 'MonedaID';
      _TerminacionTipoDeCostoID     = 'TerminacionTipoDeCostoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleCostoList = class(TPDList)
private
  function GetActual: TCategoriaDeTerminacionesTerminacionPosibleCosto;
public
  constructor CreateAll;
  constructor CreateByCategoriaDeTerminacionesTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible);
  constructor CreateByTerminacionTipoDeCosto(_TC: TTerminacionTipoDeCosto);
  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeTerminacionesTerminacionPosibleCosto read GetActual;
end;

TCategoriaDeTerminacionesTerminacionPosibleInsumo = class(TPDObject)
private
  FMateriaPrima: TPDObject;
  FMateriaPrimaID: TObjectID;
  FCategoriaDeTerminacionesPosiblesTerminacionPosibleID: TObjectID;
  FCantidadTeorica: TReal;
  FOnBeforeDelete: TNotifyEvent;
  FOnBeforeInsert: TNotifyEvent;
  procedure DoBeforeDelete(Sender: TOBject);
  procedure DoBeforeInsert(Sender: TOBject);
  procedure SetMateriaPrimaID(Value: TObjectID);
  function GetMateriaPrima: TMateriaPrima;
public
  constructor Create; override;
  procedure Delete; Override;
  Function Save: Boolean; Override;
  property CategoriaDeTerminacionesPosiblesTerminacionPosibleID : TObjectID read FCategoriaDeTerminacionesPosiblesTerminacionPosibleID write FCategoriaDeTerminacionesPosiblesTerminacionPosibleID;
  property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
  property MateriaPrima: TMateriaPrima read GetMateriaPrima;
  property CantidadTeorica : TReal read FCantidadTeorica write FCantidadTeorica;
  property OnBeforeDelete : TNotifyEvent read FOnBeforeDelete write FOnBeforeDelete;
  property OnBeforeInsert : TNotifyEvent read FOnBeforeInsert write FOnBeforeInsert;
end;

TCategoriaDeTerminacionesTerminacionPosibleInsumoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _CatDeTermsPosiblesTermPosID = 'CatDeTermsPosiblesTermsPosID';
      _MateriaPrimaID = 'MateriaPrimaID';
      _CantidadTeorica = 'CantidadTeorica';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleInsumoList = class(TPDList)
private
  function GetActual: TCategoriaDeTerminacionesTerminacionPosibleInsumo;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByCategoriaDeTerminacionesTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible);
  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeTerminacionesTerminacionPosibleInsumo read GetActual;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible = class(TPDObject)
private
  FEspecificaciones: TOBject;
  FProcesoPosible: TPDObject;
  FProcesoPosibleID: TObjectID;
  FTerminacionPosibleID: TObjectID;
  FTerminacionPosible: TPDObject;
  FObservaciones: TString;
  FDebeAutomatizarEspecificaciones: TBoolean;

  procedure SetProcesoPosibleID(Value: TObjectID);
  function GetProcesoPosible: TTerminacionProcesoPosible;
  function GetEspecificaciones: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList;
  function GetTerminacionPosible: TCategoriaDeTerminacionesTerminacionPosible;
public
  constructor Create; override;
  function Save: Boolean; override;
  procedure Delete; override;
  procedure automatizarEspecificaciones;
  property TerminacionPosibleID: TObjectID read FTerminacionPosibleID write FTerminacionPosibleID;
  property TerminacionPosible : TCategoriaDeTerminacionesTerminacionPosible read GetTerminacionPosible;
  property ProcesoPosibleID: TObjectID read FProcesoPosibleID write SetProcesoPosibleID;
  property ProcesoPosible: TTerminacionProcesoPosible read GetProcesoPosible;
  property Especificaciones: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList read GetEspecificaciones;
  property Observaciones: TString read FObservaciones write FObservaciones;
  property DebeAutomatizarEspecificaciones : TBoolean read FDebeAutomatizarEspecificaciones write FDebeAutomatizarEspecificaciones;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _CatDeTermsPosiblesTermPosID = 'CatDeTermsPosiblesTermPosID';
      _TermProcPosibleID = 'termProcPosibleID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList = class(TPDList)
  private
    function GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByProceso(_P: TProceso);
    constructor CreateByTerminacionProcesoPosible(_TPP: TTerminacionProcesoPosible);
    constructor CreateByTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible );
    constructor CreateByTerminacionPosibleYProcesoPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible; _P: TProceso);
    constructor CreateByPaletaDeColor(_PC: TPaletaDeColor);
    constructor CreateByTerminacionPosibleYProcesoLike(_TP: TCategoriaDeTerminacionesTerminacionPosible; _cod: TString);
    function CreateNewObject: TPDObject; override;
    property Actual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible read GetActual;
    function Find(_P: TProceso; _Next: Boolean = False): Boolean; overload;
    function FindCodigo(_cod: TString): Boolean; overload;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion = class(TPDObject)
  private
    FEspecificacion: TPDObject;
    FEspecificacionID: TObjectID;
    FCatTermTerminacionPosibleProcesoPosibleID: TObjectID;
    FCatTermTerminacionPosibleProcesoPosible: TPDObject;

  procedure SetEspecificacionID(Value: TObjectID);
    function GetEspecificacion: TProcesoEspecificacion;
    function GetCatTermTerminacionPosibleProcesoPosible: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible;
    public
    constructor Create; override;
    property CatTermTerminacionPosibleProcesoPosibleID : TObjectID read FCatTermTerminacionPosibleProcesoPosibleID write FCatTermTerminacionPosibleProcesoPosibleID;
    property CatTermTerminacionPosibleProcesoPosible: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible read GetCatTermTerminacionPosibleProcesoPosible;
    property EspecificacionID: TObjectID read FEspecificacionID write SetEspecificacionID;
    property Especificacion: TProcesoEspecificacion read GetEspecificacion;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _CatDeTermsPosTermPosProcPosID = 'CatDeTermsPosTermPosProcPosID';
      _EspecificacionID              = 'ProcesoEspecificacionID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList = class(TPDList)
  private
    function GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByProcesoPosible(_CTTPPP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible);
    constructor CreateByProcesoPosibleYEspecificacion(_CTTPPP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible; _SP: TProcesoEspecificacion);
    constructor CreateByProcesoEspecificacion(_SP: TProcesoEspecificacion);
    function CreateNewObject: TPDObject; override;
    procedure DeleteAll;
    property Actual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion read GetActual;
    function Find(_PE: TProcesoEspecificacion; _Next: Boolean = False): Boolean; overload;
    function FindCodigo(_cod: TString): Boolean; overload;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto = class(TPDObject)
private
  FEspecificacionTipoDeCosto: TPDObject;
  FEspecificacionTipoDeCostoID: TObjectID;
  FMoneda: TPDObject;
  FMonedaID: TObjectID;
  FCosto: TReal;
  FCatDeTermsPosiblesTermPosProcPosEspecifID: TObjectID;
  FOnBeforeDelete: TNotifyEvent;
  FOnBeforeInsert: TNotifyEvent;
  procedure DoBeforeInsert(Sender: TOBject);
  procedure DoBeforeDelete(Sender: TOBject);
  function GetMoneda: TMoneda;
  procedure SetMonedaID(Value: TObjectID);
public
  constructor Create; override;
  procedure Delete; override;
  function Save: Boolean; override;
  property CatDeTermsPosiblesTermPosProcPosEspecifID : TObjectID read FCatDeTermsPosiblesTermPosProcPosEspecifID write FCatDeTermsPosiblesTermPosProcPosEspecifID;
  property Costo: TReal read FCosto write FCosto;
  property MonedaID: TObjectID read FMonedaID write SetMonedaID;
  property Moneda: TMoneda read GetMoneda;
  property OnBeforeDelete : TNotifyEvent read FOnBeforeDelete write FOnBeforeDelete;
  property OnBeforeInsert : TNotifyEvent read FOnBeforeInsert write FOnBeforeInsert;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _CatDeTermsPosiblesTermPosProcPosEspecificacionID = 'CatDeTermsPosiblesTermPosProcPosEspecifID';
    _Costo                                            = 'Costo';
    _MonedaID                                         = 'MonedaID';
    _EspecificacionTipoDeCostoID                      = 'ProcesoEspecificacionTipoDeCostoID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList = class(TPDList)
private
  function GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto;
public
  constructor CreateAll;
  constructor CreateByCategoriaDeTerminacionesPosiblesTerminacionPosibleProcesoPosibleEspecificacion (_SP : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion);
  constructor CreateByCostoID(_CID: TObjectID);
  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto read GetActual;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo = class(TPDObject)
private
  FCantidadTeorica: TReal;
  FMateriaPrima: TPDObject;
  FMateriaPrimaID: TObjectID;
  FCatDeTermsPosiblesTermPosProcPosEspecifID: TObjectID;
  FOnBeforeDelete: TNotifyEvent;
  FOnBeforeInsert: TNotifyEvent;
  procedure SetMateriaPrimaID(Value: TObjectID);
  function GetMateriaPrima: TMateriaPrima;
  procedure DoBeforeInsert(Sender: TOBject);
  procedure DoBeforeDelete(Sender: TOBject);
public
  constructor Create; override;
  procedure Delete; Override;
  Function Save: Boolean; Override;
  property CatDeTermsPosiblesTermPosProcPosEspecifID: TObjectID read FCatDeTermsPosiblesTermPosProcPosEspecifID write FCatDeTermsPosiblesTermPosProcPosEspecifID;
  property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
  property MateriaPrima: TMateriaPrima read GetMateriaPrima;
  property CantidadTeorica : TReal read FCantidadTeorica write FCantidadTeorica;
  property OnBeforeDelete : TNotifyEvent read FOnBeforeDelete write FOnBeforeDelete;
  property OnBeforeInsert : TNotifyEvent read FOnBeforeInsert write FOnBeforeInsert;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _CatDeTermsPosiblesTermPosProcPosEspecifID = 'CatDeTermsPosiblesTermPosProcPosEspecifID';
    _MateriaPrimaID = 'MateriaPrimaID';
    _CantidadTeorica = 'CantidadTeorica';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList = class(TPDList)
private
  function GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByCategoriaDeTerminacionesPosiblesTerminacionPosibleProcesoPosibleEspecificacion (_SP : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion);
  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo read GetActual;
end;

TCategoriaDeCliente = class(TDescriptible)
  private
    FTipoDeformularioID: TObjectID;
    FTipoDeFormulario: TPDObject;
    FTipoDePedidoDeVenta: TPDObject;
    FTipoDePedidoDeVentaID: TObjectID;
    FCodigoSifab: TString;
    FColorDeHojaDeRutaID: TObjectID;
    FColorDeHojaDeRuta: TPDObject;
    FConceptoContableFacturacionID: TObjectID;
    FConceptoContableFacturacion: TPDObject;
    FEsExportacion: TBoolean;
    function GetTipoDeFormulario: TTipoDeFormulario;
    function GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
    procedure SetTipoDePedidoDeVentaID(const Value: TObjectID);
    procedure SetTipoDeFormularioID(const Value: TObjectID);
    function GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
    procedure SetColorDeHojaDeRutaID(const Value: TObjectID);
    procedure SetConceptoContableFacturacionID(const Value: TObjectID);
    function GetConceptoContableFacturacion: TCuentaContable;
  public
    constructor Create; override;
    property TipoDeFormulario              : TTipoDeFormulario read GetTipoDeFormulario;
    property TipoDeformularioID            : TObjectID read FTipoDeformularioID write SetTipoDeFormularioID;
    property TipoDePedidoDeVenta           : TTipoDePedidoDeVenta read GetTipoDePedidoDeVenta;
    property TipoDePedidoDeVentaID         : TObjectID read FTipoDePedidoDeVentaID write SetTipoDePedidoDeVentaID;
    property EsExportacion                 : TBoolean read FEsExportacion write FEsExportacion;
    property ConceptoContableFacturacionID : TObjectID read FConceptoContableFacturacionID write SetConceptoContableFacturacionID;
    property ConceptoContableFacturacion   : TCuentaContable read GetConceptoContableFacturacion;
    property CodigoSifab                   : TString read FCodigoSifab write FCodigoSifab;
    Property ColorDeHojaDeRutaID           : TObjectID read FColorDeHojaDeRutaID write SetColorDeHojaDeRutaID;
    Property ColorDeHojaDeRuta             : TColorDeHojaDeRuta read GetColorDeHojaDeRuta;
end;

TCategoriaDeClienteDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _EsInactivo            = 'EsInactivo';
      _TipoDePedidoDeVentaID = 'TipoDePedidoDeVentaID';
      _TipoDeformularioID    = 'TipoDeFormularioID';
      _Descripcion           = 'CategoriaDeCliente';
      _CodigoSifab           = 'CodigoSifab';
      _ConceptoContableFacturacionID = 'ConceptoContableFacturacionID';
      _ColorDeHojaDeRutaID   = 'ColorDeHojaDeRutaID';
      _EsExportacion         = 'EsExportacion';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeClienteList = class(TDescriptibleList)
private
  function GetActual: TCategoriaDeCliente;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TCategoriaDeCliente read GetActual;
  function Find(_Descripcion: TString): Boolean; overload;
end;

TCategoriaDeGanancias = class(TDescriptible)
private
  FImporteNoSujeto: TReal;
  FCategoriaDeGananciasItemsID: TObjectID;
  FCategoriaDeGananciasItems: TCategoriaDeGananciasItemList;
  procedure GetImporteNoSujeto(const Value: TReal);
  function GetCategoriaDeGananciasItem: TCategoriaDeGananciasItemList;
  procedure SetCategoriaDeGananciasItemsID(const Value: TObjectID);
public
  constructor Create; override;
  procedure Delete; Override;
  property ImporteNoSujeto : TReal read FImporteNoSujeto write GetImporteNoSujeto;
  property CategoriaDeGananciasItem: TCategoriaDeGananciasItemList read GetCategoriaDeGananciasItem;
  property CategoriaDeGananciasITemID : TObjectID Read FCategoriaDeGananciasItemsID Write SetCategoriaDeGananciasItemsID;
end;

TCategoriaDeGananciasDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion     = 'CategoriaDeGanancias';
      _ImporteNoSujeto = 'ImporteNoSujeto';
      _EsInactivo      = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeGananciasList = class(TDescriptibleList)
  private
    function GetActual: TCategoriaDeGanancias;
  public
    constructor CreateAll(_SoloActivos: Boolean  = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCategoriaDeGanancias read GetActual;
end;

TCategoriaDeGananciasItem = class(TPDObject)
  private
    FRetencionDeGananciasID: TObjectID;
    FRetencionDeGanancias: TPDObject;
    Fporcentaje: TReal;
    FImporteHasta: TReal;
    FImporteDesde: TReal;
    FAdicional: TReal;
    procedure SetRetencionDeGananciasID(Value: TObjectID);
    function GetRetencionDeGanancias: TCategoriaDeGanancias;
  public
    constructor Create; override;
    Function Save : Boolean ; Override;
    property Adicional: TReal read FAdicional write FAdicional;
    property ImporteDesde: TReal read FImporteDesde write FImporteDesde;
    property ImporteHasta: TReal read FImporteHasta write FImporteHasta;
    property porcentaje: TReal read Fporcentaje write Fporcentaje;
    property RetencionDeGananciasID : TObjectID read FRetencionDeGananciasID write SetRetencionDeGananciasID;
    property RetencionDeGanancias : TCategoriaDeGanancias read getRetencionDeGanancias;
end;

TCategoriaDeGananciasItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _Adicional = 'Adicional';
      _ImporteDesde = 'ImporteDesde';
      _ImporteHasta = 'ImporteHasta';
      _Porcentaje = 'porcentaje';
      _CategoriaDeGananciasID = 'CategoriaDeGananciasID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeGananciasItemList = class(TPDList)
  private
    function GetActual: TCategoriaDeGananciasItem;
  public
    constructor CreateAll;
    constructor CreateByCategoria(_C: TCategoriaDeGanancias);
    function CreateNewObject: TPDObject; override;
    property Actual: TCategoriaDeGananciasItem read GetActual;
end;

TCategoriaDeMateriaPrima = class(TDescriptibleAbreviado)
  private
    FFormulaID                        : TObjectID;
    FFormula  : TPDObject;
    FCuentaContableHojaDeRutaID       : TObjectID;
    FCuentaContableStockSemiID        : TObjectID;
    FCuentaContableDepositoMPID       : TObjectID;
    FCuentaContableDepositoMPSectorID : TObjectID;
    FCuentaContableDepositoMP         : TPDObject;
    FCuentaContableDepositoMPSector   : TPDObject;
    FCuentaContableHojaDeRuta         : TPDObject;
    FCuentaContableStockSemi          : TPDObject;
    FTieneAncho                       : Boolean;
    FTieneLongitud                    : Boolean;
    FTieneDiametro                    : Boolean;
    FEsInyectado                      : Boolean;
    FTieneEspesor                     : Boolean;
    FMaterialesPosibles: TCategoriaDeMateriaPrimaMaterialList;
    FTienePeso: Boolean;
    procedure SetFormulaID(const Value: TObjectID);
    procedure SetCuentaContableDepositoMPID(const Value: TObjectID);
    procedure SetCuentaContableDepositoMPSectorID(const Value: TObjectID);
    procedure SetCuentaContableHojaDeRutaID(const Value: TObjectID);
    procedure SetCuentaContableStockSemiID(const Value: TObjectID);
    function GetCuentaContableDepositoMP: TCuentaContable;
    function GetCuentaContableDepositoMPSector: TCuentaContable;
    function GetCuentaContableHojaDeRuta: TCuentaContable;
    function GetCuentaContableStockSemi: TCuentaContable;
    function GetFormula: TFormula;
    function GetMaterialesPosibles: TCategoriaDeMateriaPrimaMaterialList;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    Property  FormulaID                          : TObjectID Read FFormulaID Write SetFormulaID;
    Property Formula   : TFormula  Read GetFormula;
    Property  CuentaContableDepositoMPID         : TObjectID Read FCuentaContableDepositoMPID       Write SetCuentaContableDepositoMPID;
    Property  CuentaContableDepositoMP           : TCuentaContable Read GetCuentaContableDepositoMP;
    Property  CuentaContableDepositoMPSectorID   : TObjectID Read FCuentaContableDepositoMPSectorID Write SetCuentaContableDepositoMPSectorID;
    Property  CuentaContableDepositoMPSector     : TCuentaContable Read GetCuentaContableDepositoMPSector;
    Property  CuentaContableHojaDeRutaID         : TObjectID Read FCuentaContableHojaDeRutaID       Write SetCuentaContableHojaDeRutaID;
    Property  CuentaContableHojaDeRuta           : TCuentaContable Read GetCuentaContableHojaDeRuta;
    Property  CuentaContableStockSemiID          : TObjectID Read FCuentaContableStockSemiID        Write SetCuentaContableStockSemiID;
    Property  CuentaContableStockSemi            : TCuentaContable Read GetCuentaContableStockSemi;

    Property  TieneAncho    : Boolean read FTieneAncho write FTieneAncho;
    Property  TieneLongitud : Boolean read FTieneLongitud write FTieneLongitud;
    Property  TieneDiametro : Boolean read FTieneDiametro write FTieneDiametro;
    Property  TieneEspesor  : Boolean read FTieneEspesor write FTieneEspesor;
    Property  TienePeso     : Boolean read FTienePeso write FTienePeso;
    Property  EsInyectado   : Boolean read FEsInyectado write FEsInyectado;

    Property MaterialesPosibles : TCategoriaDeMateriaPrimaMaterialList read GetMaterialesPosibles;
end;

TCategoriaDeMateriaPrimaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion                       = 'CategoriaDeMateriaPrima';
      _Codigo                            = 'Codigo';
      _FormulaID                         = 'FormulaID';
      _EsInactivo                        = 'EsInactivo';
      _CuentaContableDepositoMPID        = 'CuentaContableDepositoMPID';
      _CuentaContableDepositoMPSectorID  = 'CuentaContableDepositoMPSectorID';
      _CuentaContableHojaDeRutaID        = 'CuentaContableHojaDeRutaID';
      _CuentaContableStockSemiID         = 'CuentaContableStockSemiID';
      _TieneAncho                        = 'TieneAncho';
      _TieneLongitud                     = 'TieneLongitud';
      _TieneDiametro                     = 'TieneDiametro';
      _TieneEspesor                      = 'TieneEspesor';
      _TienePeso                         = 'TienePeso';
      _EsInyectado                       = 'EsInyectado';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeMateriaPrimaList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCategoriaDeMateriaPrima;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCategoriaDeMateriaPrima read GetActual;
end;

TCategoriaDeMateriaPrimaMaterial = class(TPDObject)
  private
    FMaterialID : TObjectID;
    FMaterial : TPDObject;
    FCategoriaDeMateriaPrimaID : TObjectID;
    FCategoriaDeMateriaPrima : TPDObject;
    function GetCategoriaDeMateriaPrima : TCategoriaDeMateriaPrima;
    procedure SetCategoriaDeMateriaPrimaID(Value : TObjectID);
    function GetMaterial : TMaterial;
    procedure SetMaterialID(Value : TObjectID);
  public
    constructor Create; override;
    property CategoriaDeMateriaPrima   : TCategoriaDeMateriaPrima read GetCategoriaDeMateriaPrima;
    property CategoriaDeMateriaPrimaID : TObjectID read FCategoriaDeMateriaPrimaID write SetCategoriaDeMateriaPrimaID;
    property Material                  : TMaterial read GetMaterial;
    property MaterialID                : TObjectID read FMaterialID write SetMaterialID;
end;

TCategoriaDeMateriaPrimaMaterialDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CategoriaDeMateriaPrimaID = 'CategoriaDeMateriaPrimaID';
    _MaterialID                = 'MaterialDeArticuloID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeMateriaPrimaMaterialList = class(TPDList)
private
  function GetActual : TCategoriaDeMateriaPrimaMaterial;
public
  constructor CreateAll( _SoloActivos : Boolean = False );
  Constructor CreateByCategoriaDeMateriaPrima(_C : TCategoriaDeMateriaPrima; _SoloActivos : Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TCategoriaDeMateriaPrimaMaterial read GetActual;
end;

TCategoriaDeProveedor = class(TDescriptible)
  private
    FCuentaContableID: TObjectID;
    FCuentaContable: TPDObject;
    function GetCuentaContable: TCuentaContable;
    procedure SetCuentaContableID(const Value: TObjectID);
  public
    constructor Create; override;
    property CuentaContable: TCuentaContable read GetCuentaContable;
    property CuentaContableID: TObjectID read FCuentaContableID write SEtCuentaContableID;
end;

TCategoriaDeProveedorDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _EsInactivo       = 'EsInactivo';
      _CuentaContableID = 'CuentaContableID';
      _Descripcion      = 'CategoriaDeProveedor';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeProveedorList = class(TDescriptibleList)
  private
    function GetActual: TCategoriaDeProveedor;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCategoriaDeProveedor read GetActual;
end;

TCategoriaDeTerminacionesPosibles = class(TDescriptibleAbreviado)
  private
    FTerminacionesPosibles: TCategoriaDeTerminacionesTerminacionPosibleList;
    FPorcentajeAjustePrecioTerminacion: TReal;
    FPorcentajeAjustePrecioProceso: TReal;
    FPorcentajeAjustePrecioEspecificacion: TReal;
    function GetTerminacionesPosibles: TCategoriaDeTerminacionesTerminacionPosibleList;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure Delete; Override;
    property TerminacionesPosibles: TCategoriaDeTerminacionesTerminacionPosibleList read GetTerminacionesPosibles;
    property PorcentajeAjustePrecioTerminacion : TReal read FPorcentajeAjustePrecioTerminacion write FPorcentajeAjustePrecioTerminacion;
    property PorcentajeAjustePrecioProceso : TReal read FPorcentajeAjustePrecioProceso write FPorcentajeAjustePrecioProceso;
    property PorcentajeAjustePrecioEspecificacion : TReal read FPorcentajeAjustePrecioEspecificacion write FPorcentajeAjustePrecioEspecificacion;
end;

TCategoriaDeTerminacionesPosiblesDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                               = 'Codigo';
      _Descripcion                          = 'CatDeTermsPosibles';
      _PorcentajeAjustePrecioTerminacion    = 'PorcentajeAjustePrecioTerminacion';
      _PorcentajeAjustePrecioProceso        = 'PorcentajeAjustePrecioProceso';
      _PorcentajeAjustePrecioEspecificacion = 'PorcentajeAjustePrecioEspecificacion';
      _EsInactivo                           = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCategoriaDeTerminacionesPosiblesList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCategoriaDeTerminacionesPosibles;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    function CreateNewObject: TPDObject; override;
    function Find(_Descripcion: String): Boolean; overload;
    property Actual: TCategoriaDeTerminacionesPosibles read GetActual;
end;

TFamiliaDeArticulo = class(TDescriptibleAbreviado)
  private
    FEsMatriz: TBoolean;
    FDescuentoPorCantidadVendidaID: TObjectID;
    FDescuentoPorCantidadVendida: TPDObject;
    FColorDeHojaDeRutaID: TObjectID;
    FColorDeHojaDeRuta: TPDObject;
    FRecargoPorCustomizacion: TReal;
    fPorcentajeDescuentoAutorizado: TReal;
    procedure SetDescuentoPorCantidadVendidaID(const Value: TObjectID);
    function GetDescuentoPorCantidadVendida: TDescuentoPorCantidadVendida;
    function GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsMatriz: TBoolean read FEsMatriz write FEsMatriz;
    property DescuentoPorCantidadVendidaID : TObjectID read FDescuentoPorCantidadVendidaID write setDescuentoPorCantidadVendidaID;
    property DescuentoPorCantidadVendida: TDescuentoPorCantidadVendida read GetDescuentoPorCantidadVendida;
    property RecargoPorCustomizacion : TReal Read FRecargoPorCustomizacion write FRecargoPorCustomizacion;
    Property ColorDeHojaDeRutaID: TObjectID read FColorDeHojaDeRutaID write FColorDeHojaDeRutaID;
    Property ColorDeHojaDeRuta: TColorDeHojaDeRuta read GetColorDeHojaDeRuta;
    property PorcentajeDescuentoAutorizado: TReal read fPorcentajeDescuentoAutorizado write fPorcentajeDescuentoAutorizado;
end;

TFamiliaDeArticuloDM = class(TSQLDBX_DMObject)
  Public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                        = 'Codigo';
      _Descripcion                   = 'FamiliadeArticulo';
      _EsMatriz                      = 'EsMatriz';
      _DescuentoPorCantidadVendidaID = 'DescuentoPorCantidadVendidaID';
      _ColorDeHojaDeRutaID           = 'ColorDeHojaDeRutaID';
      _EsInactivo                    = 'EsInactivo';
      _RecargoPorCustomizacion       = 'RecargoPorCustomizacion';
      _PorcentajeDescuentoAutorizado = 'PorcentajeDescuentoAutorizado';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFamiliaDeArticuloList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TFamiliaDeArticulo;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TFamiliaDeArticulo read GetActual;
end;

TCobrador = class(TPDObject)
  private
    FDescripcion: TString;
    FTelefono: TString;
    Femail: TString;
    FLocalidad: TPDObject;
    FLocalidadID: TObjectID;
    FDireccion: TString;
    FCelular: TString;
    FApellido: TString;
    FNombre: TString;
    FEsInactivo: TBoolean;
    procedure SetLocalidadID(Value: TObjectID);
    function GetLocalidad: TLocalidad;
    function getDescripcion: TString;
    procedure Setemail(const Value: TString);
  public
    constructor Create; override;
    property Descripcion: TString read getDescripcion;
    property Nombre: TString read Fnombre write Fnombre;
    property Apellido: TString read Fapellido write Fapellido;
    property Celular: TString read FCelular write FCelular;
    property Direccion: TString read FDireccion write FDireccion;
    property LocalidadID: TObjectID read FLocalidadID write SetLocalidadID;
    property Localidad: TLocalidad read GetLocalidad;
    property Email: TString read Femail write Setemail;
    property Telefono: TString read FTelefono write FTelefono;
    property EsInactivo: TBoolean read FEsInactivo write FEsInactivo;
end;

TCobradorDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Nombre      = 'Nombre';
      _Apellido    = 'Apellido';
      _Celular     = 'Celular';
      _Direccion   = 'Direccion';
      _LocalidadID = 'LocalidadID';
      _Email       = 'Email';
      _Telefono    = 'Telefono';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCobradorList = class(TPDList)
  private
    function GetActual: TCobrador;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByDescripcionLike(_D: string; _SoloActivos: Boolean);
    function CreateNewObject: TPDObject; override;
    property Actual: TCobrador read GetActual;
end;

TCondicionDeIngresosBrutos = class(TDescriptibleAbreviado)
  private
    Fporcentaje      : TReal;
    FCodigoSifab     : String;
    FCodigoTeamplace : TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property Porcentaje     : TReal read Fporcentaje write Fporcentaje;
    property CodigoSifab    : String read FCodigoSifab write FCodigoSifab;
    property CodigoTeamplace: TEntero read FCodigoTeamplace write FCodigoTeamplace;
end;

TCondicionDeIngresosBrutosDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion     = 'CondicionDeIngresosBrutos';
      _Porcentaje      = 'Porcentaje';
      _Codigo          = 'Codigo';
      _CodigoSifab     = 'CodigoSifab';
      _CodigoTeamplace = 'CodigoTeamplace';
      _EsInactivo      = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCondicionDeIngresosBrutosList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCondicionDeIngresosBrutos;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCondicionDeIngresosBrutos read GetActual;
end;

TCondiciondeIVA = class(TDescriptibleAbreviado)
  private
    FPorcentajeIVA1              : TReal;
    FPorcentajeIVA2              : TReal;
    FLetraDeComprobante          : TString;
    FDiscriminaIVA               : TBoolean;
    FCalculaEnCascada            : TBoolean;
    FesCuitRequerido             : TBoolean;
    FCodigoTeamplace             : TString;
    FCodigoSifab                 : TString;
    FcodigoImpuestoSifab         : TString;
    FcodigoConceptoImpuestoSifab : TString;
    FIDTeamplace                 : TEntero;
    function GetLetraDeComprobante: TString;
    procedure SetLetraDeComprobante(const Value: TString);
    function GetIDTeamplace: TEntero;
  Protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property CalculaEnCascada : TBoolean read FCalculaEnCascada write FCalculaEnCascada;
    property DiscriminaIVA: TBoolean read FDiscriminaIVA write FDiscriminaIVA;
    property LetraDeComprobante: TString read GetLetraDeComprobante write SetLetraDeComprobante;
    property PorcentajeIVA1: TReal read FPorcentajeIVA1 write FPorcentajeIVA1;
    property PorcentajeIVA2: TReal read FPorcentajeIVA2 write FPorcentajeIVA2;
    property EsCuitRequerido : TBoolean read FesCuitRequerido write FesCuitRequerido;
    property CodigoSifab: TString Read FCodigoSifab write FCodigoSifab;
    property CodigoImpuestoSifab : TString Read FcodigoImpuestoSifab write FcodigoImpuestoSifab;
    property CodigoConceptoImpuestoSifab : TString Read FcodigoConceptoImpuestoSifab write FcodigoConceptoImpuestoSifab;
    Property CodigoTeamplace : TString read FCodigoTeamplace write FCodigoTeamplace;
    Property IDTeamplace : TEntero Read GetIDTeamplace;
  end;

TCondicionDeIVADM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion                 = 'CondicionDeIVA';
      _Codigo                      = 'Codigo';
      _CalculaEnCascada            = 'CalculaEnCascada';
      _DiscriminaIVA               = 'DiscriminaIVA';
      _LetraDeComprobante          = 'LetraDeComprobante';
      _PorcentajeIVA1              = 'PorcentajeIVA1';
      _PorcentajeIVA2              = 'PorcentajeIVA2';
      _EsCuitRequerido             = 'EsCuitRequerido';
      _CodigoSifab                 = 'CodigoSifab';
      _codigoImpuestoSifab         = 'codigoImpuestoSifab';
      _codigoConceptoImpuestoSifab = 'codigoConceptoImpuestoSifab';
      _EsInactivo                  = 'EsInactivo';
      _CodigoTeamplace             = 'CodigoTeamplace';
      //Teamplace
      _TeamplaceTableName          = 'BSCategoriaFiscal';
      _TeamplaceID                 = 'CategoriaFiscalID';
      _TeamplaceCodigo             = 'Codigo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCondicionDeIVAList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCondiciondeIVA;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCondiciondeIVA read GetActual;
end;

TCondicionDeVenta = class(TDescriptibleAbreviado)
  private
    FDetalles           : TCondicionDeVentaDetalleList;
    FesContraEntrega    : Boolean;
    FCodigoInternoSifab : TEntero;
    FIDTeamplace        : TEntero;
    FCondicionDePagoEnDias: TEntero;
    function GetDetalles: TCondicionDeVentaDetalleList;
    function GetCodigoInternoSifab: TEntero;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure Delete; Override;
    property Detalles: TCondicionDeVentaDetalleList Read GetDetalles;
    property EsContraEntrega : Boolean Read FesContraEntrega write FesContraEntrega;
    property CodigoInternoSifab : TEntero Read GetCodigoInternoSifab;
    Property IDTeamplace : TEntero read GetIDTeamplace;
end;

TCondicionDeVentaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion        = 'CondicionDeVenta';
      _Codigo             = 'Codigo';
      _EsContraEntrega    = 'EsCondicionContraEntrega';
      _EsInactivo         = 'EsInactiva';

    //Teamplace
    _TeamplaceTableName = 'BSCondicionPago';
    _TeamplaceID        = 'CondicionPagoID';
    _TeamplaceCodigo    = 'Codigo';


    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCondicionDeVentaList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCondicionDeVenta;
  public
    constructor CreateAll(_SoloActivos: Boolean= False );
    constructor CreateByCodigoLike(_C: string; _SoloActivos: Boolean = False);Reintroduce; overload;
    constructor CreateByDescripcion(_D: string;_SoloActivos: Boolean = False);Reintroduce; overload;
    constructor CreateByDescripcionLike(_D: string; _SoloActivos: Boolean);
    function CreateNewObject: TPDObject; override;
    property Actual: TCondicionDeVenta read GetActual;
end;

TCondicionDeVentaDetalle = class(TDescriptible)
  private
    FCondicionDeVentaID : TObjectID;
    FCondicionDeVenta : TPDObject;
    function GetCondicionDeVenta : TCondicionDeVenta;
    procedure SetCondicionDeVentaID(Value : TObjectID);
  public
    constructor Create; override;
    property CondicionDeVenta : TCondicionDeVenta read GetCondicionDeVenta;
    property CondicionDeVentaID : TObjectID read FCondicionDeVentaID write SetCondicionDeVentaID;
end;

TCondicionDeVentaDetalleDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _CondicionDeVentaID = 'CondicionDeVentaID';
    _Descripcion        = 'CondicionDeVentaDetalle';
    _EsInactivo         = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCondicionDeVentaDetalleList = class(TDescriptibleList)
private
  function Getactual : TCondicionDeVentaDetalle;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  constructor CreateByCondicionDeVenta( _CV : TCondicionDeVenta );

  function CreateNewObject: TPDObject; override;
  property actual : TCondicionDeVentaDetalle read Getactual;
end;

TCondicionDeCompra = class(TDescriptible)
  private
    FItems: TCondiciondecompraItemList;
  public
    constructor Create; override;
    function Grabar: Boolean;
    function Save: Boolean; override;
    procedure Delete; Override;
    function GetItems: TCondiciondecompraItemList;
    property Items: TCondiciondecompraItemList read GetItems;
end;

TCondicionDeCompraDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'CondicionDeCompra';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCondicionDeCompraList = class(TDescriptibleList)
  private
    function GetActual: TCondicionDeCompra;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCondicionDeCompra read GetActual;
  end;

  TCondicionDeCompraItem = class(TPDObject)
  private
    FCondicionDeCompraID: TObjectID;
    FDias: TEntero;
    FPocentajeDelTotal: TReal;
  public
    constructor Create; override;
    property PocentajeDelTotal : TReal read FPocentajeDelTotal write FPocentajeDelTotal;
    property Dias: TEntero read FDias write FDias;
    property CondicionDeCompraID : TObjectID read FCondicionDeCompraID write FCondicionDeCompraID;
  end;

TCondicionDeCompraItemDM = class(TSQLDBX_DMObject)
  public
    Class function TableName: string; override;
    Class function ID_FieldName: string; override;
    const
      _PocentajeDelTotal = 'PorcentajeDelTotal';
      _Dias = 'Dias';
      _CondicionDeCompraID = 'CondicionDeCompraID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
  end;

TCondiciondecompraItemList = class(TPDList)
  private
    function GetActual: TCondicionDeCompraItem;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByCondicionDeCompraID(_C: TCondicionDeCompra);
    function CreateNewObject: TPDObject; override;
    property Actual: TCondicionDeCompraItem read GetActual;
end;

TJurisdiccionIngresosBrutos = class(TDescriptible)
  public
    constructor Create; override;
    procedure Delete; Override;
end;

TJurisdiccionIngresosBrutosDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion = 'JurisdiccionIngresosBrutos';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TJurisdiccionIngresosBrutosList = class(TDescriptibleList)
  private
    function GetActual: TJurisdiccionIngresosBrutos;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TJurisdiccionIngresosBrutos read GetActual;
end;

TLicenciatario = class(TPDObject)
  private
    FEmpresaLicenciatariaID: TObjectID;
    FEmpresaLicenciataria: TPDObject;
    FempresaID: TObjectID;
    Fempresa: TPDObject;
    FCCLicenciatarioDescripcion: TString;
    FCCLicenciatarioCUIT: TString;
    FCCLicenciatarioCodigo: TString;
    FCCEmpresaDescripcion: TString;
    FCCEmpresaCUIT: TString;
    FCCEmpresaCodigo: TString;
    FCCEmpresaEsInactiva: TBoolean;
    FCCLicenciatarioEsInactivo: TBoolean;
    function Getempresa: TAbstractEmpresa;
    procedure SetempresaID(Value: TObjectID);
    function GetLicenciatario: TAbstractEmpresa;
    procedure SetLicenciatarioID(Value: TObjectID);
public
  constructor Create; override;
  property Empresa: TAbstractEmpresa read Getempresa;
  property EmpresaID: TObjectID read FEmpresaID write SetempresaID;
  property Licenciatario: TAbstractEmpresa read GetLicenciatario;
  property LicenciatarioID: TObjectID read FEmpresaLicenciatariaID write SetLicenciatarioID;

  // del create compuesto
  property CCLicenciatarioCodigo      : TString  read FCCLicenciatarioCodigo;
  property CCLicenciatarioDescripcion : TString  read FCCLicenciatarioDescripcion;
  property CCLicenciatarioEsInactivo  : TBoolean read FCCLicenciatarioEsInactivo;
  property CCLicenciatarioCUIT        : TString  read FCCLicenciatarioCUIT;

  property CCEmpresaCodigo            : TString  read FCCEmpresaCodigo;
  property CCEmpresaDescripcion       : TString  read FCCEmpresaDescripcion;
  property CCEmpresaEsInactiva        : TBoolean read FCCEmpresaEsInactiva;
  property CCEmpresaCUIT              : TString  read FCCEmpresaCUIT;
end;

TLicenciatarioDM = class(TSQLDBX_DMObject)
  Strict protected
    class function CreateCompuesto(_Parte: Integer=0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _EmpresaID                   = 'EmpresaID';
      _EmpresaLicenciatariaID      = 'EmpresaLicenciatariaID';
      // del create Compuesto
      _CCLicenciatarioCodigo       = 'LicenciatarioCodigo';
      _CCLicenciatarioDescripcion  = 'LicenciatarioDescripcion';
      _CCLicenciatarioEsInactivo   = 'LicenciatarioEsInactivo';
      _CCLicenciatarioCUIT         = 'LicenciatarioCUIT';
      _CCEmpresaCodigo             = 'EmpresaCodigo';
      _CCEmpresaDescripcion        = 'EmpresaDescripcion';
      _CCEmpresaEsInactiva         = 'EmpresaEsInactiva';
      _CCEmpresaCUIT               = 'EmpresaCUIT';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

  TLicenciatarioList = class(TPDList)
  private
    function GetActual: TLicenciatario;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByEmpresa(_E: TAbstractEmpresa ; _SoloActivos : Boolean = False);
    constructor CreateByEmpresaCodigo(_C: String ; _SoloActivos : Boolean = False);
    constructor CreateByLicenciado(_E: TAbstractEmpresa);
    function CreateNewObject: TPDObject; override;
    property Actual: TLicenciatario read GetActual;
  end;

TListadePrecio = class(TDescriptibleAbreviado)
  private
    FCotizacionConversionAOficial : TReal;
    FFechaCotizacionConversionAOficial : TFechaHora;
    FMoneda : TPDObject;
    FMonedaID : TObjectID;
    FPreciosArticulos: TArticuloPrecioList;
    FPreciosTerminaciones: TTerminacionPrecioList;
    FPreciosProcesos: TProcesoPrecioList;
    FPreciosServicios: TServicioPrecioList;
    FPreciosCunios: TCunioPrecioDeListaList;
    FPreciosAdicionalesCunios: TCunioPrecioList;
    FPreciosEspecificaciones: TKolorPrecioList;
    FPreciosDesarrollos: TDesarrolloPrecioList;
    FPreciosDeListaCunios: TCunioPrecioDeListaList;
    FPreciosComplejidadesDeDesarrollo: TComplejidadDeDesarrolloPrecioList;
    procedure SetmonedaID(Value : TObjectID);
    function GetMoneda : TMoneda;
    function GetPreciosArticulos: TArticuloPrecioList;
    function GetPreciosTerminaciones: TTerminacionPrecioList;
    function GetPreciosCunios: TCunioPrecioDeListaList;
    function GetPreciosAdicionalesCunios: TCunioPrecioList;
    function GetPreciosDesarrollos: TDesarrolloPrecioList;
    function GetPreciosEspecificaciones: TKolorPrecioList;
    function GetPreciosProcesos: TProcesoPrecioList;
    function GetPreciosServicios: TServicioPrecioList;
    function GetPreciosComplejidadesDeDesarrollo: TComplejidadDeDesarrolloPrecioList;

  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property MonedaID : TObjectID read FmonedaID write SetmonedaID;
    property Moneda : TMoneda read GetMoneda;
    property FechaCotizacionConversionAOficial : TFechaHora read FFechaCotizacionConversionAOficial write FFechaCotizacionConversionAOficial;
    property CotizacionConversionAOficial : TReal read FCotizacionConversionAOficial write FCotizacionConversionAOficial;
    property PreciosArticulos : TArticuloPrecioList read GetPreciosArticulos;
    property PreciosTerminaciones : TTerminacionPrecioList read GetPreciosTerminaciones;
    property PreciosCunios : TCunioPrecioDeListaList read GetPreciosCunios;
    property PreciosAdicionalesDeCunios : TCunioPrecioList read GetPreciosAdicionalesCunios;

    property PreciosDesarrollos : TDesarrolloPrecioList read GetPreciosDesarrollos;
    property PreciosComplejidadesDeDesarrollo : TComplejidadDeDesarrolloPrecioList read GetPreciosComplejidadesDeDesarrollo;
    property PreciosProcesos : TProcesoPrecioList read GetPreciosProcesos;
    property PreciosEspecificaciones : TKolorPrecioList read GetPreciosEspecificaciones;
    property PreciosServicios : TServicioPrecioList read GetPreciosServicios;
end;

TListadePrecioDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName : string; override;
    const
      _Codigo                            = 'Codigo';
      _Descripcion                       = 'ListaDePrecio';
      _MonedaID                          = 'MonedaID';
      _FechaCotizacionConversionAOficial = 'FechaCotizacionConversionAOficial';
      _CotizacionConversionAOficial      = 'CotizacionConversionAOficial';
      _EsInactivo                        = 'EsInactiva';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TListadePrecioList = class(TDescriptibleAbreviadoList)
private
  function GetActual : TListadePrecio;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TListadePrecio read GetActual;
end;

TMenuAplicacion = class(TDescriptible)
  private
    FPadreID: TObjectID;
    FnombreClaseFormulario: TString;
    Forden: TEntero;
    FSubmenues: TMenuAplicacionList;
    FmenuPadre: TPDObject;
//    FTipoDeVentanaId: TEntero;
    fCaptionIcono: TString;
    ftmp_HabilitarAUsuario: Boolean;
    FDebeActualizarMenuesDeUsurio: Boolean;
    Ftmp_PerfilAActualizar: TPerfil;
    function GetSubmenues: TMenuAplicacionList;
    function GetMenuPadre: TMenuAplicacion;
    procedure SetPadreID(const Value: TObjectID);
    procedure ValidarMenuPadreDiferenteASiMismo;
    procedure Settmp_HabilitarAUsuario(const Value: Boolean);
  public
    constructor Create; override;
    destructor Destroy; override;
    function Save: Boolean; override;
    property PadreID: TObjectID read FPadreID write SetPadreID;
    property nombreClaseFormulario: TString read FnombreClaseFormulario write FnombreClaseFormulario;
    property Orden: TEntero read Forden write Forden;
    property Submenues: TMenuAplicacionList read GetSubmenues;
    property MenuPadre: TMenuAplicacion read GetMenuPadre;
//    property TipoDeVentanaId : TEntero read FTipoDeVentanaId Write FTipoDeVentanaId;
    property CaptionIcono: TString read fCaptionIcono Write fCaptionIcono;
    property Tmp_HabilitarAUsuario: Boolean read ftmp_HabilitarAUsuario write Settmp_HabilitarAUsuario;
    property Tmp_PerfilAActualizar: TPerfil read Ftmp_PerfilAActualizar write Ftmp_PerfilAActualizar;
end;

TMenuAplicacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
  Const
    _PadreID               = 'PadreID';
    _Descripcion           = 'Descripcion';
    _EsInactivo            = 'EsInactivo';
    _NombreClaseFormulario = 'NombreClaseFormulario';
    _Orden                 = 'Orden';
//    _TipoDeVentanaID       = 'TipoDeVentanaID';
    _CaptionIcono          = 'CaptionIcono';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;


TMenuAplicacionList = class(TPDList)
private
  function GetMEnu: TMenuAplicacion;
public
  constructor CreateAll(_SoloForms: Boolean = False);
  constructor CreateMenuesPrincipales;
  constructor CreateByMenuPadre(m: TMenuAplicacion);
  constructor CreateByNombreClaseFormulario(_NC: String);
  constructor CreateByNombreClaseFormularioLike(_NC: String);
  constructor CreateByDescripcionLike(_D: String);
  function CreateNewObject: TPDObject; override;
  property Actual: TMenuAplicacion read GetMEnu;
end;

TMenuDePerfil = class(TPDObject)
  private
    FperfilID: TObjectID;
    Fperfil: TPDObject;
    FmenuID: TObjectID;
    Fmenu: TPDObject;
    FpermitirEliminacionBorrandoAccesosDirectos: Boolean;
    function Getperfil: TPerfil;
    procedure SetperfilID(Value: TObjectID);
    procedure SetmenuID(Value: TObjectID);
    function GetMEnu: TMenuAplicacion;
  public
    constructor Create; override;
    destructor Destroy; override;
  property permitirEliminacionBorrandoAccesosDirectos : Boolean read FpermitirEliminacionBorrandoAccesosDirectos write FpermitirEliminacionBorrandoAccesosDirectos;
    procedure Delete; Override;
    property perfilID: TObjectID read FperfilID write SetperfilID;
    property perfil: TPerfil read Getperfil;
    property menuID: TObjectID read FmenuID write SetmenuID;
    property menu: TMenuAplicacion read GetMEnu;
end;

TMenuDePerfilDM = class(TSQLDBX_DMObject)

  public
    const
      _PerfilID   = 'perfilID';
      _MenuID     = 'menuID';

      // del createcompuesto
      _CCMenuMenuID                = 'CCMenuMenuID';
      _CCMenuOrden                 = 'CCMenuOrden';
      _CCMenuDescripcion           = 'CCMenuDescripcion';
      _CCMenuEsInactivo            = 'CCMenuEsInactivo';
      _CCMenuNombreClaseFormulario = 'CCMenuNombreClaseFormulario';
      _CCMenuCaptionIcono          = 'CCMenuCaptionIcono';
      _CCPadreID                   = 'CCPadreID';
      _CCMenuPadreMenuID           = 'CCMenuPadreMenuID';
      _CCMenuesPadreDescripcion    = 'CCMenuesPadreDescripcion';
      _CCMenuesPadreOrden          = 'CCMenuesPadreOrden';

    class function CreateCompuesto(_Parte : Integer = 0): String; override;
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMenuDePerfilList = class(TPDList)
private
  function GetActual: TMenuDePerfil;
public
  constructor CreateAll;
  constructor CreateByMenu  (_M: TMenuAplicacion);
  constructor CreateByPerfil(_P: TPerfil);
  function CreateNewObject: TPDObject; override;
  property Actual: TMenuDePerfil read GetActual;
end;

TMoneda = class(TDescriptibleAbreviado)
  private
    FEsPredeterminada    : TBoolean;
    FCotizaciones        : TMonedaCotizacionList;
    FcoeficienteTemporal : TReal;
    FCodigoSifab         : TString;
    FCodigoMonedaOficial : TString;
    FListaDePrecioSifab  : Integer;
    FCodigoAfip          : TString;
    FCodigoInternoSifab  : TEntero;
    FCodigoTeamplace     : TString;
    FIDTeamplace         : TEntero;
    function GetCotizaciones: TMonedaCotizacionList;
    function GetEsPredeterminada: TBoolean;
    function GetCodigoMonedaOficial: TString;
    function GetCodigoInternoSifab: TEntero;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsPredeterminada    : TBoolean read GetEsPredeterminada;
    property Cotizaciones        : TMonedaCotizacionList read getCotizaciones;
    property CoeficienteTemporal : TReal   read FcoeficienteTemporal write FcoeficienteTemporal;
    property CodigoSifab         : TString read FCodigoSifab Write FCodigoSifab;
    property CodigoInternoSifab  : TEntero read GetCodigoInternoSifab;
    property CodigoAfip          : TString read FCodigoAfip Write FCodigoAfip;
    property CodigoTeamplace     : TString read FCodigoTeamplace Write FCodigoTeamplace;
    property IDTeamplace         : TEntero read GetIDTeamplace;
    property ListaDePrecioSifab  : Integer read FListaDePrecioSifab Write FListaDePrecioSifab;
    property CodigoMonedaOficial : TString read GetCodigoMonedaOficial;
end;

TMonedaDM = class(TSQLDBX_DMObject)
  public
    Class function TableName: string; override;
    Class function ID_FieldName: string; override;
    Class function EsInactivo_FieldName: string; override;
    Class function EmpresaDeSistemaID_FieldName: string; override;
    Const
      _Codigo             = 'Codigo';
      _Descripcion        = 'Moneda';
      _EsPredeterminada   = 'EsPredeterminada';
      _CodigoSifab        = 'CodigoSifab';
      _CodigoAfip         = 'CodigoAfip';
      _CodigoTeamplace    = 'CodigoTeamplace';
      _ListaDePrecioSifab = 'ListaDePrecioSifab';
      _EsInactivo         = 'EsInactivo';
      //Alias de la base de datos de Teamplace
      _TeamplaceTableName     = 'BSMoneda';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'MonedaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMonedaList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TMoneda;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByMonedaPredeterminada;
    constructor CreateWhereNotID(_ID: TObjectID);
    function CreateNewObject: TPDObject; override;
    function FindCodigoSifab(_CodigoSifab: String): Boolean;
    property Actual: TMoneda read GetActual;
end;

TMonedaCotizacion = class(TPDObject)
  private
    FMoneda: TPDObject;
    FmonedaAConvertir: TPDObject;
    FfechadeVigencia: TFechaHora;
    FvalorCompra: TReal;
    FvalorVenta: TReal;
    FmonedaAConvertirID: TObjectID;
    FMonedaID: TObjectID;

    procedure SetMonedaID(Value: TObjectID);
    procedure SetmonedaAConvertirID(Value: TObjectID);
    function GetmonedaAConvertir: TMoneda;
    function GetMoneda: TMoneda;
    function GetAnoVigencia: Integer;
    function GetMesVigencia: Integer;
  public
    constructor Create; override;
    property MonedaID: TObjectID read FMonedaID write SetMonedaID;
    property monedaAConvertirID: TObjectID read FmonedaAConvertirID write SetmonedaAConvertirID;
    property valorVenta: TReal read FvalorVenta write FvalorVenta;
    property valorCompra: TReal read FvalorCompra write FvalorCompra;
    property fechadeVigencia : TFechaHora read FfechadeVigencia write FfechadeVigencia;
    property monedaAConvertir: TMoneda read GetmonedaAConvertir;
    property Moneda: TMoneda read GetMoneda;
    property anoVigencia: Integer read GetAnoVigencia;
    property mesVigencia: Integer read GetMesVigencia;
end;

TMonedaCotizacionDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _MonedaID = 'monedaID';
      _monedaAConvertirID = 'monedaAConvertirID';
      _ValorVenta = 'valorVenta';
      _ValorCompra = 'valorCompra';
      _fechadeVigencia = 'fechaDeVigencia';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMonedaCotizacionList = class(TPDList)
  private
    function GetActual: TMonedaCotizacion;
  public
    constructor CreateAll;
    constructor CreateByMonedaPadre(_Moneda: TMoneda; _MonedaHija : TMoneda = Nil);
    constructor CreateByID(_ID: TObjectID);
    constructor CreateForCotizacion(_MonedaOrigen, _MonedaDestino: TMoneda; _FechaVigencia: TDateTime);
    Constructor createbyFechaDeVigencia(_Fecha: TDateTime);
    Constructor createbyFechaDeVigenciaAndMoneda(_Fecha: TDateTime; _Moneda: TMoneda);
    Constructor CreatebyUltimaCotizacion;
    constructor CreateByOrigenDestinoFecha(_MonedaOrigen, _MonedaDestino: TMoneda; _FechaVigencia: TDateTime);
    constructor CreateCotizaciones(_MonedaOrigen: TMoneda; _FechaVigencia: TDateTime);

    function CreateNewObject: TPDObject; override;
    property Actual: TMonedaCotizacion read GetActual;
end;


TNivelDeServicioDeCliente = class(TDescriptible)
  private
    FPonderacion : TReal;
    FColorIdentificador: TEntero;
  public
    constructor Create; override;
    property Ponderacion : TReal read FPonderacion write FPonderacion;
    property ColorIdentificador : TEntero read FColorIdentificador write FColorIdentificador;
end;

TNivelDeServicioDeClienteDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion = 'NivelDeServicioDeCliente';
    _EsInactivo = 'EsInactivo';
    _Ponderacion = 'Ponderacion';
    _ColorIdentificador = 'ColorIdentificador';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TNivelDeServicioDeClienteList = class(TDescriptibleList)
private
  function Getactual : TNivelDeServicioDeCliente;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property actual : TNivelDeServicioDeCliente read Getactual;
end;

TPais = class(TDescriptibleAbreviado)
  private
    FProvincias             : TProvinciaList;
    FCuitFisico             : TString;
    FCuitJuridico           : TString;
    FDDI                    : TString;
    FDescripcionEnIngles    : TString;
    FTipoDeClaveFiscalID    : TObjectID;
    FTipoDeClaveFiscal      : TPDObject;
    FCodigoDestinoFacturaElectronica: TString;
    FEsDireccionEnIngles    : Boolean;
    FArchivoDeImagen        : TString;
    FArchivoSinImagen       : TString;
    FResourceLanguagePaisID : TObjectID;
    FResourceLanguagePais   : TPDObject;
    FIDTeamplace            : TEntero;

    function Getprovincias: TProvinciaList;
    function GetTipoDeClaveFiscal: TTipoDeClaveFiscal;
    procedure SetCuitFisico(const Value: TString);
    procedure SetCuitJuridico(const Value: TString);
    procedure SetDescripcionEnIngles(const Value: TString);
    procedure SetTipoDeClaveFiscalId(const Value: TObjectID);
    function GetarchivoDeImagen: TString;
    function GetarchivoSinImagen: TString;
    function GetResourceLanguagePais: TResourceLanguage;
    procedure SetResourceLanguagePaisID(const Value: TObjectID);
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure Delete; Override;
    function Save: Boolean; Override;

    property CuitFisico                      : TString Read FCuitFisico Write SetCuitFisico;
    property CuitJuridico                    : TString Read FCuitJuridico Write SetCuitJuridico;
    property DDI                             : TString Read FDDI Write FDDI;
    property DescripcionEnIngles             : TString Read FDescripcionEnIngles Write SetDescripcionEnIngles;
    Property EsDireccionEnIngles             : Boolean Read FEsDireccionEnIngles Write FEsDireccionEnIngles;
    property TipoDeClaveFiscalID             : TObjectID Read FTipoDeClaveFiscalId Write SetTipoDeClaveFiscalId;
    property CodigoDestinoFacturaElectronica : TString Read FCodigoDestinoFacturaElectronica Write FCodigoDestinoFacturaElectronica;
    property ArchivoDeImagen                 : TString Read GetarchivoDeImagen;
    property ArchivoSinImagen                : TString Read GetarchivoSinImagen;
    property TipoDeClaveFiscal               : TTipoDeClaveFiscal Read GetTipoDeClaveFiscal;
    property Provincias                      : TProvinciaList read Getprovincias;
    property ResourceLanguagePaisID          : TObjectID Read FResourceLanguagePaisID Write SetResourceLanguagePaisID;
    property ResourceLanguagePais            : TResourceLanguage Read GetResourceLanguagePais;
    Property IDTeamplace                     : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_P : TPais) : Boolean;
  end;

TPaisDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion                     = 'pais';
      _CuitFisico                      = 'CuitFisico';
      _CuitJuridico                    = 'CuitJuridico';
      _DescripcionEnIngles             = 'DescripcionEnIngles';
      _Codigo                          = 'Codigo';
      _DDI                             = 'DDI';
      _TipoDeClaveFiscalID             = 'TipoDeClaveFiscalID';
      _resourceLanguagePaisID          = 'ResourceLanguageID';
      _codigoDestinoFacturaElectronica = 'codigoDestinoFacturaElectronica';
      _EsDireccionEnIngles             = 'EsDireccionEnIngles';
      _EsInactivo                      = 'EsInactivo';
      _TeamplaceTableName              = 'BSPais';
      _TeamplaceCodigo                 = 'Codigo';
      _TeamplaceID                     = 'PaisID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPaletaDeColor = class(TDescriptible)
  public
    constructor Create; override;
end;

TPaletaDeColorDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'PaletaDeColor';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPaletaDeColorList = class(TDescriptibleList)
  private
    function GetActual: TPaletaDeColor;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TPaletaDeColor read GetActual;
end;

TKolor = class(TDescriptibleAbreviado)
  private
    Fb: TEntero;
    Fg: TEntero;
    Fr: TEntero;
    FPaletaDeColorID: TObjectID;
    FPaletaDeColor: TPDObject;
    FtiempoEstimadoEnDias: TEntero;
    FTraducciones: TOBject;
    FPrecios: TKolorPrecioList;
    FRecargoPorEspecificacion: TReal;
    function GetPaletaDeColor: TPaletaDeColor;
    procedure SetPaletaDeColorID(const Value: TObjectID);
    function GetTraducciones: TKolorTraduccionList;
    function GetPrecios: TKolorPrecioList;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _Articulo: TArticulo; _Cunio: TCunio ): TReal;

    procedure Delete; override;

    property r: TEntero read Fr write Fr;
    property g: TEntero read Fg write Fg;
    property b: TEntero read Fb write Fb;
    property PaletaDeColorID: TObjectID read FPaletaDeColorID write SetPaletaDeColorID;
    property PaletaDeColor: TPaletaDeColor read GetPaletaDeColor;
    property Traducciones: TKolorTraduccionList read GetTraducciones;
    property TiempoEstimadoEnDias      : TEntero read FtiempoEstimadoEnDias write FtiempoEstimadoEnDias;
    property Precios : TKolorPrecioList read GetPrecios;
    Property RecargoPorEspecificacion : TReal Read FRecargoPorEspecificacion Write FRecargoPorEspecificacion;
end;

TKolorDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  const
    _Descripcion              = 'Color';
    _Codigo                   = 'Codigo';
    _RecargoPorEspecificacion = 'RecargoPorEspecificacion';
    _r                        = 'r';
    _g                        = 'g';
    _b                        = 'b';
    _PaletaDeColorID          = 'paletadecolorid';
    _PrecioBasico             = 'PrecioBasico';
    _monedaPrecioBasicoID     = 'monedaPrecioBasicoID';
    _tiempoEstimadoEnDias     = 'TiempoEstimadoEnDias';
    _EsInactivo               = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TKolorList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TKolor;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByPaletaDeColor(_PC: TPaletaDeColor; _SoloActivos: Boolean);
  constructor CreateByPaletaDeColorID(_PCID: TObjectID);
  function CreateNewObject: TPDObject; override;
  property Actual: TKolor read GetActual;
end;

TKolorTraduccion = class(TTraduccion)
  private
    FColor: TPDObject;
    FColorID: TObjectID;
    procedure SeTKolorID(Value: TObjectID);
    function GeTKolor: TKolor;
  public
    constructor Create; override;
    property ColorID: TObjectID read FColorID write SeTKolorID;
    property Color: TKolor read GeTKolor;
end;

TKolorTraduccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _ResourceLanguageID = 'ResourceLanguageID';
      _Descripcion        = 'Color';
      _ColorID            = 'ColorID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TKolorTraduccionList = class(TTraduccionList)
  private
    function GetActual: TKolorTraduccion;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByColor(_K: TKolor);
    constructor CreateByColorYLanguage(_K: TKolor; _L: TResourceLanguage);
    function CreateNewObject: TPDObject; override;
    property Actual: TKolorTraduccion read GetActual;
end;

TKolorPrecio = class(TPDObject)
  private
    FMoneda : TPDObject;
    FMonedaID : TObjectID;
    FPrecio : TReal;
    FListaDePrecio : TPDObject;
    FListaDePrecioID : TObjectID;
    FKolor : TPDObject;
    FKolorID : TObjectID;
    FKolorDescripcion: TString;
    fListaDePrecioDescripcion: TString;
    FKolorCodigo: TString;
    fListaDePrecioCodigo: TString;
    FMonedaDescripcion: TString;
    FMonedaCodigo: TString;
    FKolorPaleta: TString;
    FExigePrecioEnCunio: TBoolean;
    procedure SetKolorID(Value : TObjectID);
    function GetKolor : TKolor;
    procedure SetListaDePrecioID(Value : TObjectID);
    function GetListaDePrecio : TListaDePrecio;
    procedure SetMonedaID(Value : TObjectID);
    function GetMoneda : TMoneda;
    function GetPrecio: TReal;
    procedure SetPrecio(const Value: TReal);
   public
    constructor Create; override;
    property KolorID                  : TObjectID read FKolorID write SetKolorID;
    property Kolor                    : TKolor read GetKolor;
    property ListaDePrecioID          : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property ListaDePrecio            : TListaDePrecio read GetListaDePrecio;
    property Precio                   : TReal read GetPrecio write SetPrecio;
    property MonedaID                 : TObjectID read FMonedaID write SetMonedaID;
    property Moneda                   : TMoneda read GetMoneda;
    Property ExigePrecioEnCunio       : TBoolean read FExigePrecioEnCunio write FExigePrecioEnCunio;
    // del create compuesto
    property ListaDePrecioCodigo      : TString read fListaDePrecioCodigo;
    property ListaDePrecioDescripcion : TString read fListaDePrecioDescripcion;
    property KolorCodigo              : TString read FKolorCodigo;
    property KolorDescripcion         : TString read FKolorDescripcion;
    property KolorPaleta              : TString read FKolorPaleta;
    property MonedaCodigo             : TString read FMonedaCodigo;
    property MonedaDescripcion        : TString read FMonedaDescripcion;
 end;

TKolorPrecioDM = class(TSQLDBX_DMObject)
  strict protected
    class function CreateCompuesto(_Parte: Integer=0): String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _KolorID                    = 'ColorID';
      _ListaDePrecioID            = 'ListaDePrecioID';
      _Precio                     = 'Precio';
      _MonedaID                   = 'MonedaID';
      _ExigePrecioEnCunio         = 'ExigePrecioEnCunio';
      // del create compuesto
      _CCListaDePrecioDescripcion = 'ListaDescripcion';
      _CCListaDePrecioCodigo      = 'ListaCodigo';
      _CCKolorCodigo              = 'ColorCodigo';
      _CCKolorDescripcion         = 'ColorDescripcion';
      _CCKolorPaleta              = 'PaletaDeKolor';
      _CCMonedaCodigo             = 'MonedaCodigo';
      _CCMonedaDescripcion        = 'MonedaDescripcion';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TKolorPrecioList = class(TPDList)
private
  function GetActual : TKolorPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByKolor( _K : TKolor ) ;
  constructor CreateByListaDePrecioAndKolor( _LP : TListaDePrecio; _K : TKolor ) ;
  function CreateNewObject: TPDObject; override;
  function FindKolor( _K: TKolor ): Boolean;
  function FindCodigoKolor( _CK: String ): Boolean;
  property Actual : TKolorPrecio read GetActual;
end;

TParametro = class(TDescriptibleAbreviado)
  private
    FValorTexto     : TString;
    FValorFechaHora : TFechaHora;
    FValorNumero    : TReal;
    FValorBoolean   : TBoolean;
    FSectorID       : TObjectID;
    FSector         : TPDObject;
    function GetSector: TSector;
  public
    constructor Create; override;
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;

    property ValorTexto     : TString    read FValorTexto     write FValorTexto;
    property ValorFechaHora : TFechaHora read FValorFechaHora write FValorFechaHora;
    property ValorNumero    : TReal      read FValorNumero    write FValorNumero;
    Property ValorBoolean   : TBoolean   read FValorBoolean   write FValorBoolean;
    Property SectorID       : TObjectID  read FSectorID       write FSectorID;
    Property Sector         : TSector read GetSector;
end;

TParametroDM = Class(TSQLDBX_DMObject)
  Public
    Class Function TableName: string; override;
    Class Function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _Codigo         = 'Codigo';
      _Descripcion    = 'Parametro';
      _ValorTexto     = 'ValorTexto';
      _ValorFechaHora = 'ValorFechaHora';
      _ValorNumero    = 'ValorNumero';
      _ValorBoolean   = 'ValorBoolean';
      _EsInactivo     = 'EsInactivo';
      _SectorID       = 'SectorID';

    Procedure PopulateFields(PDObject: TPDObject); override;
    Procedure PopulateObject(PDObject: TPDObject); override;
end;

TParametroList = Class(TDescriptibleAbreviadoList)
  Private
    Function Getparametro: TParametro;
  Public
    Constructor CreateAll;
    Constructor CreateBySector(_Sector : TSector ; _SoloActivos: Boolean = False);
    Function CreateNewObject: TPDObject; override;
    Property Actual: TParametro read Getparametro;
end;

TFormula = class(TDescriptibleAbreviado)
  private
    FAlgoritmo : TString;
    FValor     : TReal;
  public
    constructor Create; override;
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    property Algoritmo : TString read FAlgoritmo write FAlgoritmo;
    property Valor     : TReal read FValor write FValor; // para los coeficientes
end;

TFormulaDM = Class(TSQLDBX_DMObject)
  Public
    Class Function TableName: string; override;
    Class Function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo         = 'Codigo';
      _Descripcion    = 'Formula';
      _Algoritmo      = 'Algoritmo';
      _Valor          = 'Valor';
      _EsInactivo     = 'EsInactivo';
    Procedure PopulateFields(PDObject: TPDObject); override;
    Procedure PopulateObject(PDObject: TPDObject); override;
end;

TFormulaList = Class(TDescriptibleAbreviadoList)
  Private
    Function GetFormula: TFormula;
  Public
    constructor CreateAll(_SoloActivos : Boolean = False);
    Function CreateNewObject: TPDObject; override;
    Property Actual: TFormula read GetFormula;
end;


TParametroLocal = class(TDescriptibleAbreviado) // es para control del funcionamiento del sistema en cada pc individualmente
  private
    function GetImpresoraPredetWindows: String;
//  protected                                                                              Tcat
//    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    property ImpresoraPredetWindows: String read GetImpresoraPredetWindows;
end;

TPerfil = class(TDescriptible)
  private
    FMenuesParaConfigurar: TOBject;
    Fmenues: TMenuDePerfilList;
    FEsAdministradorDeArchivos: TBoolean;
    function Getmenues: TMenuDePerfilList;
    function GetMenuesParaConfigurar: TMenuAplicacionList;
    procedure ActualizarInfoDeMenuesPermitidos;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Delete; override;
    property Menues: TMenuDePerfilList read Getmenues;
    Property MenuesParaConfigurar : TMenuAplicacionList read GetMenuesParaConfigurar;
    Property EsAdministradorDeArchivos : TBoolean read FEsAdministradorDeArchivos write FEsAdministradorDeArchivos;
end;

TPerfilDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    Const
      _Descripcion = 'PERFIL';
      _EsInactivo  = 'EsInactivo';
      _EsAdministradorDeArchivos = 'EsAdministradorDeArchivos';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPerfilList = class(TDescriptibleList)
  private
    function GetActual: TPerfil;
  public
    constructor CreateAll(_SoloActivos : Boolean = False);
    constructor CreateByPerfilLike(_Perfil: String; _SoloActivos : Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TPerfil read GetActual;
end;

TProceso = class(TDescriptibleAbreviado)
  private
    FEspecificaciones: TOBject;
    FTraducciones: TOBject;
    FPaletaDeColorID: TObjectID;
    FPaletaDeColor: TPDObject;
    FLlevaNumeroDeDesarrollo: TBoolean;
    FtiempoEstimadoEnDias: TEntero;
    FPrecios: TProcesoPrecioList;
    FCantidadDeEspecificacionesObligatorias: TEntero;
    FObservacionDeCarga: TString;
    FTipoDeDesarrolloID: TObjectID;
    FTipoDeDesarrollo: TPDObject;
    FOrigenComercial: TPDObject;
    FOrigenComercialID: TObjectID;

    function GetEspecificaciones: TProcesoEspecificacionList;
    function GetTraducciones: TProcesoTraduccionList;
    function GetPaletaDeColor: TPaletaDeColor;
    function GetTipoDeDesarrollo: TTipoDeDesarrollo;
    function GetPrecios: TProcesoPrecioList;
    procedure SetPaletaDeColorID(const Value: TObjectID);
    procedure SetTipoDeDesarrolloID(const Value: TObjectID);
    function GetOrigenComercial: TOrigenComercial;
    procedure SetOrigenComercialID(const Value: TObjectID);
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _F : TFabricado ): TReal;

    procedure Delete; override;
    property Especificaciones: TProcesoEspecificacionList read GetEspecificaciones;
    property Traducciones: TProcesoTraduccionList read GetTraducciones;
    property PaletaDeColorID: TObjectID read FPaletaDeColorID write SetPaletaDeColorID;
    property PaletaDeColor: TPaletaDeColor read GetPaletaDeColor;
    property LlevaNumeroDeDesarrollo : TBoolean read FLlevaNumeroDeDesarrollo write  FLlevaNumeroDeDesarrollo;
    property TiempoEstimadoEnDias : TEntero read FtiempoEstimadoEnDias write FtiempoEstimadoEnDias;
    property Precios : TProcesoPrecioList read GetPrecios;
    property CantidadDeEspecificacionesObligatorias : TEntero read FCantidadDeEspecificacionesObligatorias write FCantidadDeEspecificacionesObligatorias;
    property ObservacionDeCarga : TString read FObservacionDeCarga write FObservacionDeCarga;
    Property TipoDeDesarrolloID : TObjectID read FTipoDeDesarrolloID write SetTipoDeDesarrolloID;
    Property TipoDeDesarrollo   : TTipoDeDesarrollo read GetTipoDeDesarrollo;
    Property OrigenComercialID  : TObjectID read FOrigenComercialID write SetOrigenComercialID;
    Property OrigenComercial    : TOrigenComercial read GetOrigenComercial;
end;

TProcesoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion                            = 'Proceso';
      _Codigo                                 = 'Codigo';
      _PaletaDeColorID                        = 'PaletaDeColorID';
      _LlevaNumeroDeDesarrollo                = 'LlevaNumeroDeDesarrollo';
      _PrecioBasico                           = 'PrecioBasico';
      _monedaPrecioBasicoID                   = 'monedaPrecioBasicoID';
      _tiempoEstimadoEnDias                   = 'TiempoEstimadoEnDias';
      _CantidadDeEspecificacionesObligatorias = 'CantidadDeEspecificacionesObligatorias';
      _ObservacionDeCarga                     = 'ObservacionDeCarga';
      _EsInactivo                             = 'EsInactivo';
      _TipoDeDesarrolloID                     = 'TipoDeDesarrolloID';
      _OrigenComercialID                      = 'OrigenComercialID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProcesoList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TProceso;
public
  constructor CreateAll(_SoloActivos : Boolean = False);
  Constructor CreateByPaletaDeColor( _P : TPaletaDeColor ; _SoloActivos : Boolean = False );
  Function CreateNewObject: TPDObject; override;
  Property Actual: TProceso read GetActual;
end;

TProcesoTraduccion = class(TTraduccion)
  private
    Fproceso: TPDObject;
    FprocesoID: TObjectID;
    procedure SetprocesoID(Value: TObjectID);
    function Getproceso: TProceso;
  public
    constructor Create; override;
    property procesoID: TObjectID read FprocesoID write SetprocesoID;
    property proceso: TProceso read Getproceso;
end;

TProcesoTraduccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _ResourceLanguageID = 'resourceLanguageID';
      _Descripcion        = 'proceso';
      _ProcesoID          = 'procesoID';
      _EsInactivo         = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProcesoTraduccionList = class(TTraduccionList)
  private
    function GetActual: TProcesoTraduccion;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByProceso(_P: TProceso);
    function CreateNewObject: TPDObject; override;
    property Actual: TProcesoTraduccion read GetActual;
end;

TProcesoEspecificacion = class(TPDObject)
  private
    FInsumos: TOBject;
    FTiposdeCosto: TOBject;
    FProcesoID: TObjectID;
    FProceso: TPDObject;
    FTraducciones: TOBject;
    FColorID: TObjectID;
    FColor: TPDObject;
    FCodigo: TString;
    FDescripcion: TString;
    FTiempoEstimadoEnDias: TEntero;
    procedure SetColorID(const Value: TObjectID);
    function GetColor: TKolor;
    function GetDescripcion: TString;
    function GetCodigo: TString;
    function GetTiempoEstimadoEnDias: TEntero;
    function GetProceso: TProceso;
    procedure SetProcesoID(const Value: TObjectID);
  public
    constructor Create; override;
    function Save        : Boolean; override;
    Procedure Delete ; Override;
    property ProcesoID   : TObjectID read FprocesoID write SetProcesoID;
    property Proceso     : TProceso read GetProceso;
    property ColorID     : TObjectID Read FColorID write SetColorID;
    property Color       : TKolor Read GetColor;
    property Descripcion : TString read GetDescripcion;
    property Codigo      : TString read GetCodigo;
    property TiempoEstimadoEnDias: TEntero read GetTiempoEstimadoEnDias;
    Procedure GuardarEnSifab(_CodigoRotulo: Integer; _CodigoTipoCaracteristica: Integer; _CodigoEmpresa: Integer);
end;

TProcesoEspecificacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _ProcesoID = 'ProcesoID';
      _ColorID   = 'ColorID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProcesoEspecificacionList = class(TPDList)
  private
    function GetActual: TProcesoEspecificacion;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    constructor CreateByProceso(_P: TProceso);
    constructor CreateByProcesoYDescripcionLike(_P: TProceso; _D: TString);
    constructor CreateByProcesoYCodigoLike(_P: TProceso; _C: TString);
    function CreateNewObject: TPDObject; override;
    function Find(_Descripcion: TString): Boolean; overload;
    function FindEspecificacion(_K: TKolor): Boolean; overload;
    property Actual: TProcesoEspecificacion read GetActual;
end;

TProcesoPrecio = class(TPDObject)
  private
    FPrecio                   : TReal;
    FMoneda                   : TPDObject;
    FMonedaID                 : TObjectID;
    FListaDePrecioID          : TObjectID;
    FListaDePrecio            : TPDObject;
    FProcesoID                : TObjectID;
    FProceso                  : TPDObject;
    FProcesoDescripcion       : TString;
    FListaDePrecioDescripcion : TString;
    FProcesoCodigo            : TString;
    FListaDePrecioCodigo      : TString;
    FMonedaDescripcion        : TString;
    FMonedaCodigo             : TString;
    FFamiliaDeArticuloID      : TObjectID;
    FMaterial                 : TPDObject;
    FMaterialID               : TObjectID;
    FFamiliaDeArticulo        : TPDObject;
    FMaterialDescripcion      : TString;
    FFamiliaDescripcion       : TString;
    FMaterialCodigo           : TString;
    FFamiliaCodigo            : TString;
    FExigePrecioEnCunio       : TBoolean;

    procedure SetProcesoID(Value : TObjectID);
    procedure SetListaDePrecioID(Value : TObjectID);
    procedure SetMonedaID(Value : TObjectID);
    procedure SetPrecio(const Value: TReal);
    procedure SetFamiliaDeArticuloID(const Value: TObjectID);
    procedure SetMaterialID(const Value: TObjectID);

    function GetProceso : TProceso;
    function GetListaDePrecio : TListaDePrecio;
    function GetMoneda : TMoneda;
    function GetPrecio: TReal;
    function GetFamiliaDeArticulo: TFamiliaDeArticulo;
    function GetMaterial: TMaterial;

  public
    constructor Create; override;
    property ProcesoID            : TObjectID read FProcesoID write SetProcesoID;
    property Proceso              : TProceso read GetProceso;
    property ListaDePrecioID      : TObjectID read FListaDePrecioID write SetListaDePrecioID;
    property ListaDePrecio        : TListaDePrecio read GetListaDePrecio;
    property Precio               : TReal read GetPrecio write SetPrecio;
    property MonedaID             : TObjectID read FMonedaID write SetMonedaID;
    property Moneda               : TMoneda read GetMoneda;
    property MaterialID           : TObjectID read FMaterialID write SetMaterialID;
    property Material             : TMaterial read GetMaterial;
    property FamiliaDeArticuloID  : TObjectID read FFamiliaDeArticuloID write SetFamiliaDeArticuloID;
    property FamiliaDeArticulo    : TFamiliaDeArticulo read GetFamiliaDeArticulo;
    property ExigePrecioEnCunio   : TBoolean read FExigePrecioEnCunio write FExigePrecioEnCunio;

    // del create compuesto
    property ListaDePrecioCodigo      : TString read FListaDePrecioCodigo;
    property ListaDePrecioDescripcion : TString read FListaDePrecioDescripcion;
    property ProcesoCodigo            : TString read FProcesoCodigo;
    property ProcesoDescripcion       : TString read FProcesoDescripcion;
    property MonedaCodigo             : TString read FMonedaCodigo;
    property MonedaDescripcion        : TString read FMonedaDescripcion;
    property FamiliaCodigo            : TString read FFamiliaCodigo;
    property FamiliaDescripcion       : TString read FFamiliaDescripcion;
    property MaterialCodigo           : TString read FMaterialCodigo;
    property MaterialDescripcion      : TString read FMaterialDescripcion;
end;

TProcesoPrecioDM = class(TSQLDBX_DMObject)
  Strict protected
    class function CreateCompuesto(_Parte: Integer = 0):String; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _ProcesoID                  = 'ProcesoID';
      _ListaDePrecioID            = 'ListaDePrecioID';
      _Precio                     = 'Precio';
      _MonedaID                   = 'MonedaID';
      _MaterialID                 = 'MaterialDeArticuloID';
      _FamiliaDeArticuloID        = 'FamiliaDeArticuloID';
      _ExigePrecioEnCunio         = 'ExigePrecioEnCunio';

// del create compuesto
      _CCListaDePrecioDescripcion = 'DescripcionLista';
      _CCListaDePrecioCodigo      = 'CodigoLista';
      _CCProcesoCodigo            = 'ProcesoCodigo';
      _CCProcesoDescripcion       = 'ProcesoDescripcion';
      _CCMonedaCodigo             = 'MonedaCodigo';
      _CCMonedaDescripcion        = 'MonedaDescripcion';
      _CCFamiliaCodigo            = 'FamiliaCodigo';
      _CCFamiliaDescripcion       = 'FamiliaDescripcion';
      _CCMaterialCodigo           = 'MaterialCodigo';
      _CCMaterialDescripcion      = 'MaterialDescripcion';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProcesoPrecioList = class(TPDList)
private
  function GetActual : TProcesoPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByProceso( _P : TProceso ) ;
  constructor CreateByListaDePrecioAndProceso( _LP : TListaDePrecio; _P : TProceso ) ;
  function CreateNewObject: TPDObject; override;
  function FindProceso( _P: TProceso ): Boolean;
  function FindCodigoProceso( _CP: String ): Boolean;
  function FindCodigoProcesoAndFamilia( _CP: String ; _F : String): Boolean;
  function FindCodigoProcesoFamiliaAndMaterial( _CP: String ; _F : String ; _M : String ): Boolean;
  property Actual : TProcesoPrecio read GetActual;
end;

TProducto = class(TPDObject)
private
    FFabricadoID: TObjectID;
    FFabricado: TPDObject;
    FMateriaPrimaID: TObjectID;
    FMateriaPrima: TPDObject;
    FservicioID: TObjectID;
    Fservicio: TPDObject;
    FProductoDesplegado: TFabricadoComponenteList;
    Fcodigo: TString;
    FfechaDeCreacion: TFechaHora;
    FDevolverMatriz: TBoolean;
    FCodigoInternoSifab: Integer;
    FRuteoDefault: TPDList;
    FEsInactivo: TBoolean;
    FPrecioDeLista: TReal;
    FCodigoAccesorio: TString;
    FOperaciones: TProductoOperacionList;
    FStocksEnTransito: TStockItemList;
    FCantidadStockEnTransito: TReal;
    FCantidadStockTotal: TReal;
    FStocksAsignado: TStockItemList;
    FStocksPreparado: TStockItemList;
    FStocksLibre: TStockItemList;
    FCantidadStockLibre: TReal;
    FCantidadStockAsignada: TReal;
    FCantidadStockPreparada: TReal;
    FDepositosDeStockLibre: TDepositoList;
    FStocks: TStockItemList;
    function GetMateriaPrima: TMateriaPrima;
    procedure SetMateriaPrimaID(const Value: TObjectID);
    function GetServicio: TServicio;
    procedure SetServicioID(const Value: TObjectID);

    function getcodigo: TString;
    function getDescripcion: TString;
    function GetDescripcionEnIngles: TString;
    function GetunidadDeMedida: TUnidadDeMedida;
    function GetesStockeable: TBoolean;
    function GetFabricado: TFabricado;
    procedure SetFabricadoID(const Value: TObjectID);
    function GetDescripcionTipoDeProducto: String;
    function GetarchivoDeImagen: TString;
    function GetarchivoSinImagen: TString;
    function GetCodigoSifab: TString;
    function GetCodigoInternoSifab: Integer;
    function GetEsFabricado: TBoolean;
    function GetEsMateriaPrima: TBoolean;
    function GetEsServicio: TBoolean;
    function GetRuteoDefault: TProductoRuteoDefaultList;
    function GetCodigoAccesorio: TString;
    function GetCantidadStockAsignada: TReal;
    function GetCantidadStockEnTransito: TReal;
    function GetCantidadStockLibre: TReal;
    function GetCantidadStockPreparada: TReal;
    function GetCantidadStockTotal: TReal;
    function GetDepositosDeStockLibre: TDepositoList;
    function GetStocks: TStockItemList;
    function GetStocksAsignado: TStockItemList;
    function GetStocksEnTransito: TStockItemList;
    function GetStocksLibre: TStockItemList;
    function GetStocksPreparado: TStockItemList;
Public
    Constructor Create; override;
    Destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    // funciones de consulta
    function Save: Boolean; Override;
    Class function StockAsignado( _PVIID: TObjectID): Real;
    function StockDisponibleEnComponentes: Real;
    // function StockComprometido : Real;
    // function StockAdeudadoPorPedidosDeVenta : Real;
    // function StockComprometidoEnComponentes(_PVItem : String = ''): Real;
    // function StockComprometidoPorPVItem (_PVItem : String='') : Real;
    property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
    property Fabricado: TFabricado read GetFabricado;
    property MateriaPrimaID: TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
    property MateriaPrima: TMateriaPrima read GetMateriaPrima;
    property ServicioID: TObjectID read FservicioID write SetServicioID;
    property Servicio: TServicio read GetServicio;
    property Codigo: TString read getcodigo;
    property CodigoAccesorio: TString read GetCodigoAccesorio;
    property Descripcion: TString read getDescripcion;
    property DescripcionEnIngles: TString read GetDescripcionEnIngles;
    property UnidadDeMedida: TUnidadDeMedida read GetunidadDeMedida;
    property EsStockeable: TBoolean read GetesStockeable;
    property DescripcionTipoDeProducto: String Read GetDescripcionTipoDeProducto;
    property ArchivoDeImagen: TString Read GetarchivoDeImagen;
    property ArchivoSinImagen: TString Read GetarchivoSinImagen;
    property FechaDeCreacion : TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property DevolverMatriz : TBoolean read FDevolverMatriz write FDevolverMatriz;
    Property RuteoDefault : TProductoRuteoDefaultList Read GetRuteoDefault;
    property EsInactivo: TBoolean read FEsInactivo write FEsInactivo;

    // no persistente
    property EsFabricado : TBoolean Read GetEsFabricado ;
    property EsServicio : TBoolean Read GetEsServicio ;
    property EsMateriaPrima : TBoolean Read GetEsMateriaPrima ;
//    property CodigoSifab: TString read GetCodigoSifab;
//    property CodigoInternoSifab: Integer read GetCodigoInternoSifab;
    procedure BorrarInterfaceDatosViejos(_Lista: TPDList);
//    Procedure GuardarMaterialEnSifab(_Empresa: String); // en el nomenclador
//    Procedure GuardarParametrosEnSifab(_Empresa: String);
//    Procedure GuardarEspecificacionesEnSifab(_Empresa: String);
//    Procedure GuardarAtributosEnSifab(_Empresa: String);

    property CantidadStockTotal         : TReal read GetCantidadStockTotal;
    property CantidadStockAsignada      : TReal read GetCantidadStockAsignada;
    property CantidadStockPreparada     : TReal read GetCantidadStockPreparada;
    property CantidadStockEnTransito    : TReal read GetCantidadStockEnTransito;
    property CantidadStockLibre         : TReal read GetCantidadStockLibre;

    Property Stocks                     : TStockItemList Read GetStocks;
    Property StocksAsignado             : TStockItemList Read GetStocksAsignado;
    Property StocksLibre                : TStockItemList Read GetStocksLibre;
    Property DepositosDeStockLibre      : TDepositoList  Read GetDepositosDeStockLibre;
    Property StocksPreparado            : TStockItemList Read GetStocksPreparado;
    Property StocksEnTransito           : TStockItemList Read GetStocksEnTransito;
end;

TProductoDM = class(TSQLDBX_DMObject)
  Strict protected
    class function ConexionBaseDeDatos: TConnection; override;
    class function CreateCompuesto(_Parte : Integer = 0): String; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _MateriaPrimaID  = 'MateriaPrimaID';
      _ServicioID      = 'ServicioID';
      _FabricadoID     = 'FabricadoID';
      _FechaDeCreacion = 'FechaDeCreacion';
      _EsInactivo      = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProductoList = class(TPDList)
private
  function GetProducto: TProducto;
public
  constructor CreateByID( _ID: TObjectID);
  constructor CreateAllFabricados( _SoloActivos: Boolean = False);
  constructor CreateAll(_SoloActivos, _Fab, _Serv, _MP: Boolean);
  constructor CreateByCodigo(_Cod: TString);
  constructor CreateByFabricado(_F: TFabricado);
  constructor CreateByServicio(_S: TServicio);
  constructor CreateByMateriaPrima(_MP: TMateriaPrima);
  constructor CreateByProductosEnStock(_DepositoID: TObjectID; _EstadoID: TObjectID; _esMateriaPrima, _EsFabricado: Boolean);
  constructor CreateByCodigoLike(_cod: String; _Fab, _Serv, _MP: Boolean; _SoloActivos:Boolean ); virtual;
  constructor CreateByCodigoLikeSemielaborado(_cod: String; _SoloActivos:Boolean );
  constructor CreateAllByFabricadoPorCliente(_CID: TObjectID; _SoloActivos: Boolean);
  constructor CreateAllByCodigoLikeFabricadoPorCliente(_Codigo: String; _CID: TObjectID; _Vendible: Boolean; _SoloActivos: Boolean);
  constructor CreateEmpty;
  constructor CreateUniqueByCliente(_C: TCliente; _CodProd: String; _SoloActivos: Boolean; _FechaDesde: TDate; _AplicaFecha: Boolean = True);
  constructor CreateUniqueByClienteAndMarca(_C: TCliente; _M: TMarca; _CodProd: String; _SoloActivos: Boolean; _FechaDesde: TDate; _AplicaFecha: Boolean = True);
  property Actual: TProducto read GetProducto;
  Function CreateNewObject: TPDObject; override;
  function FindCodigo(_cod: string): Boolean; overload;
  Constructor CreateByFiltrosFabricado(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde, _DesarrolloHasta, _Cliente, _Marca, _Estado : String; _Depositos : TStringList; _Medida : Integer; _CuniosEstandar : Boolean = False ; _DesarrollosEstandar : Boolean = False ; _Producto : String = '');
  Constructor CreateByFiltrosMateriaPrima(_Depositos : TStringList ; _Estado, _Material : String; _Producto : String = ''; _CategoriaDeMateriaPrimaCodigo: String = '');

end;

TProductoRuteoDefault = class(TPDObject)
  private
    FProductoID          : TObjectID;
    FPasoDeFabricacionID : TObjectID;
    FSecuencia           : TEntero;
    FEsUltimoPaso        : TBoolean;
    FProducto            : TPDObject;
    FPasoDeFabricacion   : TPDObject;
    FRecursoID           : TObjectID;
    FRecurso             : TPDObject;
    FOperaciones         : TProductoOperacionList;
    FHerramentalID       : TObjectID;
    FHerramental         : TPDObject;
    FCantidadProcesada   : TEntero;
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    procedure SetProductoID(Value : TObjectID);
    function GetProducto: TProducto;
    function GetPasoDeFabricacion: TPasoDeFabricacion;
    function GetRecurso: TRecurso;
    procedure SetRecursoID(const Value: TObjectID);
    function GetOperaciones: TProductoOperacionList;
    function GetHerramental: THerramental;
    procedure SetHerramentalID(const Value: TObjectID);
  public
    constructor Create; override;
    property ProductoID          : TObjectID read FProductoID write SetProductoID;
    property Producto            : TProducto read GetProducto;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion   : TPasoDeFabricacion read GetPasoDeFabricacion;
    property RecursoID           : TObjectID read FRecursoID write SetRecursoID;
    property Recurso             : TRecurso read GetRecurso;
    property HerramentalID       : TObjectID read FHerramentalID write SetHerramentalID;
    property Herramental         : THerramental read GetHerramental;
    property EsUltimoPaso        : TBoolean read FEsUltimoPaso write FEsUltimoPaso;
    property Secuencia           : TEntero read FSecuencia write FSecuencia;
    Property Operaciones         : TProductoOperacionList Read GetOperaciones;
    property CantidadProcesada   : TEntero read FCantidadProcesada write FCantidadProcesada;
end;

TProductoRuteoDefaultDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _ProductoID          = 'ProductoID';
      _PasoDeFabricacionID = 'PasoDeFabricacionID';
      _RecursoID           = 'RecursoID';
      _HerramentalID       = 'HerramentalID';
      _CantidadProcesada   = 'CantidadProcesada';
      _EsUltimoPaso        = 'EsUltimoPaso';
      _Secuencia           = 'Secuencia';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TProductoRuteoDefaultList = class(TPDList)
  private
    function GetActual : TProductoRuteoDefault;
  public
    constructor CreateAll;
    Constructor CreateByProducto(_P : TProducto);
    function CreateNewObject: TPDObject; override;
    property Actual : TProductoRuteoDefault read GetActual;
    Function FindPasoDeFabricacion (_PF : TPasoDeFabricacion) : Boolean;
end;

TProductoOperacion = class(TPDObject)
  private
    FProductoRuteoDefaultID       : TObjectID;
    FProductoRuteoDefault         : TPDObject;
    FPasoDeFabricacionOperacionID : TObjectID;
    FPasoDeFabricacionOperacion   : TPDObject;
    FUnidadDeMedidaDuracionID     : TObjectID;
    FUnidadDeMedidaDuracion       : TPDObject;
    FDuracion                     : TReal;
    FObservacion: TString;
    function GetUnidadDeMedidaDuracion : TUnidadDeMedida;
    procedure SetUnidadDeMedidaDuracionID(Value : TObjectID);
    function GetPasoDeFabricacionOperacion: TPasoDeFabricacionOperacion;
    procedure SetPasoDeFabricacionOperacionID(const Value: TObjectID);
    function GetProductoRuteoDefault: TProductoRuteoDefault;
    procedure SetProductoRuteoDefaultID(const Value: TObjectID);

  public
    constructor Create; override;
    property ProductoRuteoDefault   : TProductoRuteoDefault read GetProductoRuteoDefault;
    property ProductoRuteoDefaultID : TObjectID read FProductoRuteoDefaultID write SetProductoRuteoDefaultID;
    property PasoDeFabricacionOperacion   : TPasoDeFabricacionOperacion read GetPasoDeFabricacionOperacion;
    property PasoDeFabricacionOperacionID : TObjectID read FPasoDeFabricacionOperacionID write SetPasoDeFabricacionOperacionID;
    property UnidadDeMedidaDuracion : TUnidadDeMedida read GetUnidadDeMedidaDuracion;
    property UnidadDeMedidaDuracionID : TObjectID read FUnidadDeMedidaDuracionID write SetUnidadDeMedidaDuracionID;
    property Duracion : TReal read FDuracion write FDuracion;
    Property Observacion : TString read FObservacion write FObservacion;
end;

TProductoOperacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ProductoRuteoDefaultID       = 'ProductoRuteoDefaultID';
    _PasoDeFabricacionOperacionID = 'PasoDeFabricacionOperacionID';
    _UnidadDeMedidaDuracionID     = 'UnidadDeMedidaDuracionID';
    _Duracion                     = 'Duracion';
    _Observacion                  = 'Observacion';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TProductoOperacionList = class(TPDList)
private
  function GetActual : TProductoOperacion;
public
  constructor CreateAll;
  Constructor CreateByProductoRuteoDefault( _P : TProductoRuteoDefault );
  function CreateNewObject: TPDObject; override;
  property Actual : TProductoOperacion read GetActual;
end;

TProductoStockeable = class(TPDObject)
  private
    FStockOptimo : TEntero;
    FStockMinimo : TEntero;
    FProductoID : TObjectID;
    FProducto : TPDObject;
    function GetProducto : TProducto;
    procedure SetProductoID(Value : TObjectID);
  public
    constructor Create; override;
    property Producto : TProducto read GetProducto;
    property ProductoID : TObjectID read FProductoID write SetProductoID;
    property StockMinimo : TEntero read FStockMinimo write FStockMinimo;
    property StockOptimo : TEntero read FStockOptimo write FStockOptimo;
end;

TProductoStockeableDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ProductoID = 'ProductoID';
    _StockMinimo = 'StockMinimo';
    _StockOptimo = 'StockOptimo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TProductoStockeableList = class(TPDList)
  private
    function GetActual : TProductoStockeable;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual : TProductoStockeable read GetActual;
end;

TPasoDeFabricacion = class(TDescriptibleAbreviado)
  private
    FFueraDeCircuito                : TBoolean;
    FRequiereArbolCompleto          : TBoolean;
    FBuscarEnPasosSiguientes        : TBoolean;
    FSectorID                       : TObjectID;
    FSector                         : TPDObject;
    FEsPasoDeCalidad                : TBoolean;
    FRecursosDisponibles            : TPasoDeFabricacionRecursoList;
    FMotivosDeAtraso                : TPasoDeFabricacionMotivoDeAtrasoList;
    FOperaciones                    : TPasoDeFabricacionOperacionList;
    FLeadTimeDefault                : TEntero;
    FLeadTimeDefaultNoConforme      : TEntero;
    FConsumeMP                      : TBoolean;
    FRealizaAjusteDeStock           : TBoolean;
    FRequiereStockAsignado          : TBoolean;
    FDepositoSemiElaborado          : TPDObject;
    FDepositoMateriaPrima           : TPDObject;
    FDepositoProductosTerminados    : TPDObject;
    FDepositoSemiElaboradoID        : TObjectID;
    FDepositoMateriaPrimaID         : TObjectID;
    FDepositoProductosTerminadosID  : TObjectID;
    procedure SetSectorID(const Value: TObjectID);
    function GetSector: TSector;
    function GetRecursosDisponibles: TPasoDeFabricacionRecursoList;
    function GetMotivosDeAtraso: TPasoDeFabricacionMotivoDeAtrasoList;
    function GetOperaciones: TPasoDeFabricacionOperacionList;
    function GetDepositoSemiElaborado: TDeposito;
    function GetDepositoSemiElaboradoID: TObjectID;
    function GetDepositoMateriaPrimaID: TObjectID;
    function GetDepositoMateriaPrima: TDeposito;
    function GetDepositoProductosTerminados: TDeposito;
    function GetDepositoProductosTerminadosID: TObjectID;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsPasoDeCalidad               : TBoolean read FEsPasoDeCalidad          write FEsPasoDeCalidad;
    property SectorID                      : TObjectID read FSectorID write SetSectorID;
    property Sector                        : TSector read GetSector;
    property LeadTimeDefault               : TEntero  read FLeadTimeDefault write FLeadTimeDefault;
    property LeadTimeDefaultNoConforme     : TEntero  read FLeadTimeDefaultNoConforme write FLeadTimeDefaultNoConforme;
    property FueraDeCircuito               : TBoolean read FFueraDeCircuito          write FFueraDeCircuito;
    property RequiereArbolCompleto         : TBoolean read FRequiereArbolCompleto    write FRequiereArbolCompleto;
    property BuscarEnPasosSiguientes       : TBoolean read FBuscarEnPasosSiguientes  write FBuscarEnPasosSiguientes;
    property ConsumeMP                     : TBoolean read FConsumeMP Write FConsumeMP;
    property RealizaAjusteDeStock          : TBoolean read FRealizaAjusteDeStock Write FRealizaAjusteDeStock;
    property RequiereStockAsignado         : TBoolean read FRequiereStockAsignado write FRequiereStockAsignado;

    property RecursosDisponibles           : TPasoDeFabricacionRecursoList read GetRecursosDisponibles;
    property MotivosDeAtraso               : TPasoDeFabricacionMotivoDeAtrasoList read GetMotivosDeAtraso;
    property Operaciones                   : TPasoDeFabricacionOperacionList read GetOperaciones;

    property DepositoSemiElaboradoID       : TObjectID read GetDepositoSemiElaboradoID;
    property DepositoSemiElaborado         : TDeposito read GetDepositoSemiElaborado;
    property DepositoMateriaPrimaID        : TObjectID read GetDepositoMateriaPrimaID;
    property DepositoMateriaPrima          : TDeposito read GetDepositoMateriaPrima;
    property DepositoProductosTerminadosID : TObjectID read GetDepositoProductosTerminadosID;
    property DepositoProductosTerminados   : TDeposito read GetDepositoProductosTerminados;
end;

TPasoDeFabricacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _Descripcion               = 'Descripcion';
      _Codigo                    = 'Codigo';
      _EsInactivo                = 'EsInactivo';
      _FueraDeCircuito           = 'FueraDeCircuito';
      _RequiereArbolCompleto     = 'RequiereArbolCompleto';
      _BuscarEnPasosSiguientes   = 'BuscarEnPasosSiguientes';
      _EsPasoDeCalidad           = 'EsPasoDeCalidad';
      _SectorID                  = 'SectorID';
      _LeadTimeDefault           = 'DiasDefaultDeFabricacion';
      _LeadTimeDefaultNoConforme = 'LeadTimeDefaultNC';
      _ConsumeMP                 = 'ConsumeMP';
      _RealizaAjusteDeStock      = 'RealizaAjusteDeStock';
      _RequiereStockAsignado     = 'RequiereStockAsignado';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TPasoDeFabricacionList = class(TDescriptibleAbreviadoList)
  private
    function GetActual : TPasoDeFabricacion;
  public
    constructor CreateAll( _SoloActivos: Boolean = False ; IncluyeFueraDeCircuito : Boolean = True);
    constructor CreateEmpty;
    constructor CreateByCodigos(_Codigos : String; _SoloActivos: Boolean = False);
    constructor CreateByIDs(_IDs : String);
    constructor CreateByCodigoAndRequiereArbolCompleto(_Cod : String; _SoloActivos: Boolean = False);
    constructor CreateByRequiereArbolCompleto(_SoloActivos: Boolean = False);
    constructor CreateByUsuario(_SoloActivos: Boolean = False);
    constructor CreateByUsuarioAndCodigoLike (_Cod : String; _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual : TPasoDeFabricacion read GetActual;
end;

TPasoDeFabricacionRecurso = class(TPDObject)
  private
    FPasoDeFabricacionID : TObjectID;
    FRecursoID           : TObjectID;
    FRecurso             : TPDObject;
    FPasoDeFabricacion   : TPDObject;
    procedure SetRecursoID(Value : TObjectID);
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    function GetRecurso: TRecurso;
    function GetPasoDeFabricacion: TPasoDeFabricacion;
  public
    constructor Create; override;
    property RecursoID : TObjectID read FRecursoID write SetRecursoID;
    property Recurso   : TRecurso read GetRecurso;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion : TPasoDeFabricacion read GetPasoDeFabricacion;
end;

TPasoDeFabricacionRecursoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _RecursoID           = 'RecursoID';
      _PasoDeFabricacionID = 'PasoDeFabricacionID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPasoDeFabricacionRecursoList = class(TPDList)
private
  function GetActual : TPasoDeFabricacionRecurso;
public
  constructor CreateAll;
  constructor CreateByPasoDeFabricacionID (_PID : TObjectID);
  constructor CreateByPasoDeFabricacion   (_P : TPasoDeFabricacion); overload;
  constructor CreateByPasoDeFabricacion   (_CodPaso : String); overload;
  constructor CreateByPasoDeFabricacionLike (_Cod : String);
  constructor CreateByPasoDeFabricacionAndCodigoLike( _CodPaso : String ; _CodRec : String );

  function CreateNewObject: TPDObject; override;
  property Actual : TPasoDeFabricacionRecurso read GetActual;
end;

TPasoDeFabricacionOperacion = class(TPDObject)
  private
    FOperacionID          : TObjectID;
    FOperacion            : TPDObject;
    FPasoDeFabricacionID  : TObjectID;
    FPasoDeFabricacion    : TPDObject;
    FUtilizaManoDeObra    : TBoolean;
    FSecuencia            : TEntero;
    procedure SetOperacionID(Value : TObjectID);
    function GetOperacion: TOperacion;
    procedure SetPasoDeFabricacionID(Value : TObjectID);
    function GetPasoDeFabricacion: TPasoDeFabricacion;
  public
    constructor Create; override;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
    property PasoDeFabricacion   : TPasoDeFabricacion read GetPasoDeFabricacion;
    property OperacionID         : TObjectID read FOperacionID write SetOperacionID;
    property Operacion           : TOperacion read GetOperacion;
    property UtilizaManoDeObra   : TBoolean read FUtilizaManoDeObra write FUtilizaManoDeObra;
    property Secuencia           : TEntero read FSecuencia write FSecuencia;
end;

TPasoDeFabricacionOperacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _PasoDeFabricacionID = 'PasoDeFabricacionID';
    _OperacionID         = 'OperacionID';
    _UtilizaManoDeObra   = 'UtilizaManoDeObra';
    _Secuencia           = 'Secuencia';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPasoDeFabricacionOperacionList = class(TPDList)
private
  function GetActual : TPasoDeFabricacionOperacion;
public
  constructor CreateAll;
  Constructor CreateByPasoDeFabricacion(_P: TPasoDeFabricacion);
  function CreateNewObject: TPDObject; override;
  property Actual : TPasoDeFabricacionOperacion read GetActual;
end;

TProductoDetalle = class(TDescriptibleAbreviado)
  private
    FDescripcionEnIngles: TString;
    FProductoID: TObjectID;
    FProducto: TPDObject;
    FunidadDeMedidaID: TObjectID;
    FunidadDeMedida: TPDObject;
    function GetUnidadDeMedidaID: TObjectID;
    function GetProducto: TProducto;
    function GetUnidadDeMedida: TUnidadDeMedida;
    procedure SetProductoID(const Value: TObjectID);
    procedure SetUnidadDeMedidaID(const Value: TObjectID);
    function GetTipoDeProducto: String; Virtual; Abstract;
  protected
    function GetEsStockeable: TBoolean; virtual;
    procedure AsignarIDAlProducto; virtual; abstract;
    property TipoDeProducto: String Read GetTipoDeProducto;
  public
    function Save: Boolean; override;
    property DescripcionEnIngles : TString read FDescripcionEnIngles write FDescripcionEnIngles;
    property ProductoID: TObjectID read FProductoID write SetProductoID;
    property Producto: TProducto read GetProducto;
    property EsStockeable: TBoolean read GetEsStockeable;
    property UnidadDeMedidaID: TObjectID read GetunidadDeMedidaID write SetunidadDeMedidaID;
    property UnidadDeMedida: TUnidadDeMedida read GetunidadDeMedida;
end;

TMateriaPrima = class(TProductoDetalle)
  private
    FCategoriaDeMateriaPrimaID: TObjectID;
    FCategoriaDeMateriaPrima: TPDObject;
    FStockMinimo: TReal;
    FStockMedio: TReal;
    FLoteCompra: TReal;
    FTiempoDeEntregaEnDias: TEntero;
    FEspesor: TReal;
    FAnchoDeTira: TReal;
    FMaterialID: TObjectID;
    FMaterial: TPDObject;
    FUnidadDeMedidaAnchoDeTiraID: TObjectID;
    fUnidadDeMedidaEspesorID: TObjectID;
    FUnidadDeMedidaAnchoDeTira: TPDObject;
    fUnidadDeMedidaEspesor: TPDObject;
    FDiametro: TReal;
    FUnidadDeMedidaDiametroID: TObjectID;
    FUnidadDeMedidaDiametro: TPDObject;
    FArchivoDeImagen: TString;
    FArchivoSinImagen: TString;
    FMonedaDeCostoID: TObjectID;
    FCosto: TReal;
    FMonedaDeCosto: TPDObject;
    FLongitud: TReal;
    FUnidadDeMedidaLongitudID   : TObjectID;
    FUnidadDeMedidaLongitud     : TPDObject;
    FCantidadStockLibreSifab    : TReal;
    FCantidadStockAsignadaSifab : TReal;
    FCantidadStockTotalSifab    : TReal;
    FCodigoInternoSifab         : Integer;
    FPeso: TReal;
    FUnidadDeMedidaPesoID: TObjectID;
    FUnidadDeMedidaPeso: TPDObject;
    FIDTeamplace: TEntero;

    function GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
    function GetMaterial: TMaterial;
    function GetUnidadDeMedidaAnchoDeTira: TUnidadDeMedida;
    function GetUnidadDeMedidaEspesor: TUnidadDeMedida;
    function GetUnidadDeMedidaDiametro: TUnidadDeMedida;
    procedure SetUnidadDeMedidaAnchoDeTiraID(const Value: TObjectID);
    procedure SetUnidadDeMedidaEspesorID(const Value: TObjectID);
    procedure SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
    procedure SetMaterialID(const Value: TObjectID);
    procedure SetUnidadDeMedidaDiametroID(const Value: TObjectID);
    function GetCodigoSifab: TString;
    function GetarchivoDeImagen: TString;
    function GetarchivoSinImagen: TString;
    function GetDiametroDescripcion: TString;
    function GetEspesorDescripcion: TString;
    function GetAnchoDeTiraDescripcion: TString;
    function GetMonedaDeCosto: TMoneda;
    procedure SetMonedaDeCostoID(const Value: TObjectID);
    function GetLongitudDescripcion: TString;
    function GetUnidadDeMedidaLongitud: TUnidadDeMedida;
    procedure SetUnidadDeMedidaLongitudID(const Value: TObjectID);
    function GetCodigoInternoSifab: Integer;
    function GetCantidadStockAsignadaSifab: TReal;
    function GetCantidadStockLibreSifab   : TReal;
    function GetCantidadStockTotalSifab   : TReal;
    function GetEsInyeccion: TBoolean;
    procedure SetUnidadDeMedidaPesoID(const Value: TObjectID);
    function GetPesoDescripcion: TString;
    function GetUnidadDeMedidaPeso: TUnidadDeMedida;
    function GetIDTeamplace: TEntero;
  protected
    function GetEsStockeable: TBoolean; override;
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    procedure AsignarIDAlProducto; override;
    function GetTipoDeProducto: String; Override;
  public
    constructor Create; override;
    procedure Delete; override;
    function Save: Boolean; override;

    property AnchoDeTira                 : TReal read FAnchoDeTira write FAnchoDeTira;
    property AnchoDeTiraDescripcion      : TString read GetAnchoDeTiraDescripcion;
    property UnidadDeMedidaAnchoDeTiraID : TObjectID read FUnidadDeMedidaAnchoDeTiraID write SetUnidadDeMedidaAnchoDeTiraID;
    property UnidadDeMedidaAnchoDeTira   : TUnidadDeMedida read GetUnidadDeMedidaAnchoDeTira;

    property Espesor                   : TReal read FEspesor write FEspesor;
    property EspesorDescripcion        : TString read GetEspesorDescripcion;
    property UnidadDeMedidaEspesorID   : TObjectID read fUnidadDeMedidaEspesorID write setUnidadDeMedidaEspesorID;
    property UnidadDeMedidaEspesor     : TUnidadDeMedida read GetUnidadDeMedidaEspesor;

    property Diametro                  : TReal read FDiametro write FDiametro;
    property DiametroDescripcion       : TString read GetDiametroDescripcion;
    property UnidadDeMedidaDiametroID  : TObjectID read FUnidadDeMedidaDiametroID write SetUnidadDeMedidaDiametroID;
    property UnidadDeMedidaDiametro    : TUnidadDeMedida read GetUnidadDeMedidaDiametro;

    property Longitud                  : TReal read FLongitud write FLongitud;
    property LongitudDescripcion       : TString read GetLongitudDescripcion;
    property UnidadDeMedidaLongitudID  : TObjectID read FUnidadDeMedidaLongitudID write SetUnidadDeMedidaLongitudID;
    property UnidadDeMedidaLongitud    : TUnidadDeMedida read GetUnidadDeMedidaLongitud;

    property Peso                      : TReal read FPeso write FPEso;
    property PesoDescripcion           : TString read GetPesoDescripcion;
    property UnidadDeMedidaPesoID      : TObjectID read FUnidadDeMedidaPesoID write SetUnidadDeMedidaPesoID;
    property UnidadDeMedidaPeso        : TUnidadDeMedida read GetUnidadDeMedidaPeso;

    property Costo                     : TReal read FCosto write FCosto;
    property MonedaDeCostoID           : TObjectID read FMonedaDeCostoID write SetMonedaDeCostoID;
    property MonedaDeCosto             : TMoneda read GetMonedaDeCosto;
    property CategoriaDeMateriaPrimaID : TObjectID read FCategoriaDeMateriaPrimaID write SetCategoriaDeMateriaPrimaID;
    property CategoriaDeMateriaPrima   : TCategoriaDeMateriaPrima read GetCategoriaDeMateriaPrima;
    property MaterialID                : TObjectID read FMaterialID write SetMaterialID;
    property Material                  : TMaterial read GetMaterial;
    property StockMinimo               : TReal read FStockMinimo write FStockMinimo;
    property StockMedio                : TReal read FStockMedio write FStockMedio;
    property LoteCompra                : TReal read FLoteCompra write FLoteCompra;
    property TiempoDeEntregaEnDias     : TEntero read FTiempoDeEntregaEnDias write FTiempoDeEntregaEnDias;
    property ArchivoDeImagen           : TString read GetArchivoDeImagen;
    property ArchivoSinImagen          : TString read GetArchivoSinImagen;
    property EsInyeccion               : TBoolean read GetEsInyeccion;
    //Stock sifab
    property CodigoSifab: TString read GetCodigoSifab;
    procedure AsignarCantidadesDeStockSifab;
    property CodigoInternoSifab         : Integer read GetCodigoInternoSifab;
    property CantidadStockTotalSifab    : TReal read GetCantidadStockTotalSifab;
    property CantidadStockAsignadaSifab : TReal read GetCantidadStockAsignadaSifab;
    property CantidadStockLibreSifab    : TReal read GetCantidadStockLibreSifab;

    property IDTeamplace    : TEntero read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_MP : TMateriaPrima; _MostrarMensaje : Boolean = True) : Boolean;
end;

TMateriaPrimaDM = class(TSQLDBX_DMObject)
  Strict protected
    class function ConexionBaseDeDatos: TConnection; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName : string; override;
    Const
      _Codigo                      = 'Codigo';
      _Descripcion                 = 'MateriaPrima';
      _UnidadDeMedidaID            = 'UnidadDeMedidaID';
      _ProductoID                  = 'ProductoID';
      _CategoriaDeMateriaPrimaID   = 'CategoriaDeMateriaPrimaID';
      _StockMinimo                 = 'StockMinimo';
      _StockMedio                  = 'StockMedio';
      _LoteCompra                  = 'LoteDeCompra';
      _TiempoDeEntregaEnDias       = 'TiempoDeEntregaEnDias';
      _AnchoDeTira                 = 'AnchoDeTira';
      _UnidadDeMedidaAnchoDeTiraID = 'UnidadDeMedidaAnchoDeTiraID';
      _Espesor                     = 'Espesor';
      _UnidadDeMedidaEspesorID     = 'UnidadDeMedidaEspesorID';
      _Diametro                    = 'Diametro';
      _UnidadDeMedidaDiametroID    = 'UnidadDeMedidaDiametroID';
      _Longitud                    = 'Longitud';
      _UnidadDeMedidaLongitudID    = 'UnidadDeMedidaLongitudID';
      _Peso                        = 'Peso';
      _UnidadDeMedidaPesoID        = 'UnidadDeMedidaPesoID';
      _MaterialID                  = 'MaterialDeArticuloID';
      _Costo                       = 'Costo';
      _MonedaDeCostoID             = 'MonedaDeCostoID';
      _CuentaContableActivoID      = 'CuentaContableActivoID';
      _CuentaContableGastoID       = 'CuentaContableGastoID';
      _EsInactivo                  = 'EsInactiva';
      //Alias de la base de datos de Teamplace
      _TeamplaceTableName          = 'BSProducto';
      _TeamplaceCodigo             = 'Codigo';
      _TeamplaceID                 = 'ProductoID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMateriaPrimaList = class(TDescriptibleAbreviadoList)
  Private
    function GetActual: TMateriaPrima;
  public
    constructor CreateEmpty;
    constructor CreateAll(_SoloActivos : Boolean = False);
    Constructor CreateByMaterial(_M : TMaterial; _SoloActivos : Boolean = False);
    Constructor CreateByMaterialAndCodigoLike(_M : TMaterial; _C : String; _SoloActivos : Boolean = False);
    constructor CreateByCategoriaDeMateriaPrima(_CID : TObjectID; _SoloActivos : Boolean = False);
    constructor CreateByCategoriaDeMateriaPrimaAndCodigoLike(_CID : TObjectID; _C : String; _SoloActivos : Boolean = False);
    Constructor CreateByMaterialesPosibles(_M : TMaterial; _SoloActivos : Boolean = False);
    Constructor CreateByMaterialesPosiblesandCodigoLike(_M : TMaterial; _C : String; _SoloActivos : Boolean = False);

    constructor CreateByTerminacion(_T: TTerminacion);
    function CreateNewObject: TPDObject; override;
    property Actual: TMateriaPrima read GetActual;
end;

TFabricado = class(TProductoDetalle)
  private
    FTiempoEstimadoEnDiasArticulo: TEntero;
    FTiempoEstimadoEnDiasTerminacion: TEntero;
    FTiempoEstimadoEnDiasCunio: TEntero;
    FTiempoEstimadoEnDiasCustomizacion: TEntero;
    FTiempoEstimadoEnDiasBasicoProducto: TEntero;
    FTiempoEstimadoTotalDelProducto: TEntero;
    FPrecioDeListaTotalDelProducto: TReal;
    FesFabricadoFinal: TBoolean;
    FesFabricadoBase: TBoolean;
    Fcodigo: TString;
//    Fdescripcion: TString;
    FterminacionID: TObjectID;
    Fterminacion: TPDObject;
    FCunioID: TObjectID;
    FCunio: TPDObject;
    FarticuloID: TObjectID;
    Farticulo: TPDObject;
    Fcrc: TEntero;
    FCodigoCRC: TString;
    FCodigoSifab: TString;
    Fcomponentes: TPDList;
    FProcesos: TPDList;
    FExpandOnSave: Boolean;
    FCategoriaDeTerminacion: TPDObject;
    FTerminacionDefaultID: TObjectID;
    FTerminacionDefault: TPDObject;
    FTmpTerminacionDelProducto: TTerminacion;
    FarchivoDeImagen: TString;
    FarchivoSinImagen: TString;
    FfechaDeCreacion: TFechaHora;
    FComponentesDesplegados: TPDList;
    FesdescripcionRelease: TBoolean;
    FdesarrolloID: TObjectID;
    FDesarrollo: TPDObject;
    FCentroDeCosto: TPDObject;
    FResourceLanguage: TPDObject;
    fPosicionArancelaria: TString;
    FCodigoInternoSifab: Integer;
    FDescripcionCustom: TString;
    FDescripcionCustomEnIngles: TString;
    farchivoDeImagenParaEtiqueta: TString;
    FSubComponentes: TStringList;
    FDesarrolloCodigo: TString;
    FTerminacionCodigo: TString;
    FCunioCodigo: TString;
    FArticuloCodigo: TString;
    FListaDePrecioDelPedidoID: TObjectID;
    FMonedaDelPedido: TPDObject;
    FMonedaDelPedidoId: TObjectId;
    FCunioDescripcion: TString;
    FCunioEsEstandar: TBoolean;
    FDescripcionTraducida: TString;
    FResourceLanguageID: TObjectID;
    FEsMatriz: TBoolean;
    FTmpCantidadAFabricar: TEntero;
    FTiempototalPasosDeFabricacionEnSegundos: TReal;
    fDescripcionParaExportacion: TString;
    FFabricadoDatoFisico: TFabricadoDatoFisico;
    FDatosFisicos: TFabricadoDatoFisicoList;
    FIDTeamplace: TEntero;
    FFotoID: TObjectID;
    function DescripcionDelFabricado(_MostrarDefault: Boolean;   _Idioma: TResourceLanguage = nil; _ProductoFinal: Boolean = True;      _articuloModificado: Boolean = True;      _terminacionModificada: Boolean = True;      _cunioModificado: Boolean = True): string;
    function DescripcionDeLosComponentes(_Idioma: TResourceLanguage = nil): string;
    function cambioOriginal(_FCD: TFabricadoComponenteDesplegado): Boolean;
    function Getarticulo: TArticulo;
    function Getterminacion: TTerminacion;
    function GetCunio: TCunio;
    function GetCodigoCrc: TString;
    procedure SetArticuloID(Value: TObjectID);
    procedure SetterminacionID(Value: TObjectID);
    procedure SetCunioID(Value: TObjectID);
    procedure SetCrc(const Value: TEntero);
    function GetunidadDeMedidaFabricado: TUnidadDeMedida;
    function GetunidadDeMedidaFabricadoID: TObjectID;
    function GetarchivoDeImagen: TString;
    function GetarchivoSinImagen: TString;
    function GetarchivoDeImagenParaEtiqueta: TString;
    function GetProcesos: TFabricadoProcesoList;
    function Getcomponentes: TFabricadoComponenteList;
    function CrearCodigoDeUnFabricadoDesdeUnArticulo(_AC: TArticuloComponente; _F: TFabricado): String;
    // function GetEsCunioNuevo: TBoolean;
    function getDescripcionTraducida: TString;
    procedure SetTerminacionDefaultID(const Value: TObjectID);
    function GetTerminacionDefaultID: TObjectID;
    function GetTerminacionDefault: TTerminacion;
    // Tiempos
    function GetTiempoEstimadoEnDiasBasicoProducto: TEntero;
    function GetTiempoEstimadoEnDiasArticulo: TEntero;
    function GetTiempoEstimadoEnDiasCunio: TEntero;
    function GetTiempoEstimadoEnDiasTerminacion: TEntero;
    function GetTiempoEstimadoEnDiasCustomizacion: TEntero;
    function GetTiempoEstimadoTotalDelProducto: TEntero;
    procedure SetTiempoEstimadoEnDiasArticulo(const Value: TEntero);
    procedure SetTiempoEstimadoEnDiasTerminacion(const Value: TEntero);
    procedure SetTiempoEstimadoEnDiasCunio(const Value: TEntero);
    procedure SetTiempoEstimadoEnDiasCustomizacion(const Value: TEntero);
    procedure SetTiempoEstimadoEnDiasBasicoProducto(const Value: TEntero);
    // Tiempos

    function GetCodigoSifab: TString;
    function GetComponentesDesplegados: TFabricadoComponenteDesplegadoList;
    function GetDesarrollo: TDesarrollo;
    procedure SetDesarrolloID(const Value: TObjectID);
    function GetCentroDeCosto: TCentroDeCosto;
    function GetPosicionArancelaria: TString;
    function GetCodigoInternoSifab: Integer;
    function GetDescripcionCustom: TString;
    function GetDescripcionCustomEnIngles: TString;
    function GetSubComponentes: TStringList;
    function GetMonedaDelPedido: TMoneda;
    procedure SetListaDePrecioDelPedidoID(const Value: TObjectID);
    procedure SetMonedaDelPedidoID(const Value: TObjectId);
    procedure SetResourceLanguageID(const Value: TObjectID);
    function GetResourceLanguage: TResourceLanguage;
    function GetEsMatriz: TBoolean;
    function GetTiempototalPasosDeFabricacionEnSegundos: TReal;
    function GetCantidadStockAsignada: TReal;
    function GetCantidadStockEnTransito: TReal;
    function GetCantidadStockLibre: TReal;
    function GetCantidadStockPreparada: TReal;
    function GetCantidadStockTotal: TReal;
    function GetDescripcionParaExportacion: TString;
    function GetDatosFisicos: TFabricadoDatoFisicoList;
    function GetIDTeamplace: TEntero;
    function GetFotoID: TObjectID;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    function GetTipoDeProducto: String; Override;
    function GetCodigo: TString; Override;
    function GetEsStockeable: TBoolean; override;
    procedure AsignarIDAlProducto; override;
    procedure CrearComponentes(_TerminacionDelPadre: TTerminacion);
  public
    constructor Create; override;
    destructor Destroy; override;
    Procedure FreeObjectsFromMemory;
    Function Save: Boolean; override;
    class function ArmarCodigoFabricado(_Art: TArticulo; _Ter: TTerminacion; _Cun: TCunio; _CodigoCrc: String): string;
    class Function ObtenerKMateriaPrimaEnMonedaOficial( _FabricadoID: TObjectID;  Var _ListadeErrores : TStringList; _PI : String = ''; _FechaCotizacion: TDateTime=0 ): TReal; Reintroduce; overload;
    class Function ObtenerKMateriaPrimaEnMonedaOficial( _Fabricado  : TFabricado; Var _ListadeErrores: TStringList ; _PI : String = ''; _FechaCotizacion: TDateTime=0 ) : TReal; Reintroduce; overload;
    class Function ObtenerKMateriaPrimaEnMonedaOficial( _Fabricado: TFabricado; _FechaCotizacion: TDateTime=0): TReal;  Reintroduce; overload;
    class Function ObtenerKMateriaPrimaEnMonedaSolicitada( _Fabricado: TFabricado; _Moneda: TMoneda; _FechaCotizacion: TDateTime=0 ): TReal;  Reintroduce; overload;
    class Function ObtenerKMateriaPrimaEnMonedaSolicitada( _Fabricado: TFabricado; _MonedaID: TObjectID; _FechaCotizacion: TDateTime=0): TReal;  Reintroduce; overload;
    Function PrecioTotalFabricado( _ListaDePrecioDelPedidoID: TObjectID; _MonedaDelPedido: TMoneda ): TReal;
    Function GetPrecioDeVentaAnterior(_C: TCliente; _M: TMoneda; _FechaPedido: TDate; _PedidoDeVentaID: TObjectID = NullID): TReal;
    Function GetFechaDeVentaAnterior(_C: TCliente; _F: TDate; _PedidoDeVentaID: TObjectID = NullID): TFechaHora;
    Function FabricadoBase(_F: TFabricado): TTmpFabricado;
    Function DevolverPadreID( _Subcomponente, _ProductoFinal : TFabricado ): TObjectID;
    procedure LimpiarCodigoSifab; // para generar codigo nuevo ante cualquier cambio
    procedure CodigoRelease;
    procedure DescripcionRelease;
    procedure ProductoRelease;
    property ArticuloID: TObjectID Read FarticuloID Write SetArticuloID;
    property TerminacionID : TObjectID read FterminacionID write SetterminacionID;
    property CunioID: TObjectID read FCunioID write SetCunioID;
    property Crc: TEntero Read Fcrc Write SetCrc;
    property CodigoCrc: TString Read GetCodigoCrc;
    property Articulo: TArticulo read Getarticulo;
    property Terminacion: TTerminacion read Getterminacion;
    property Cunio: TCunio read GetCunio;
    property UnidadDeMedida: TUnidadDeMedida read GetunidadDeMedidaFabricado;
    property Codigo: TString read getcodigo;
    property CodigoSifab: TString read GetCodigoSifab;
    property CentroDeCosto: TCentroDeCosto Read GetCentroDeCosto;
    property DescripcionTraducida: TString read GetDescripcionTraducida;
    property DescripcionCustom: TString read GetDescripcionCustom;
    property DescripcionCustomEnIngles : TString read GetDescripcionCustomEnIngles;
    Function DescripcionDeLosProcesos(_Idioma: TResourceLanguage = nil): string;
    property archivoDeImagen: TString read GetarchivoDeImagen;
    property archivoSinImagen: TString read GetarchivoSinImagen;
    property archivoDeImagenParaEtiqueta : TString read GetarchivoDeImagenParaEtiqueta;
    // Tiempos
    property TiempoEstimadoEnDiasArticulo : TEntero read GetTiempoEstimadoEnDiasArticulo write  SetTiempoEstimadoEnDiasArticulo;
    property TiempoEstimadoEnDiasTerminacion : TEntero read GetTiempoEstimadoEnDiasTerminacion write SetTiempoEstimadoEnDiasTerminacion;
    property TiempoEstimadoEnDiasCunio : TEntero read GetTiempoEstimadoEnDiasCunio write SetTiempoEstimadoEnDiasCunio;
    property TiempoEstimadoEnDiasBasicoProducto : TEntero read GetTiempoEstimadoEnDiasBasicoProducto write SetTiempoEstimadoEnDiasBasicoProducto;
    property TiempoEstimadoEnDiasCustomizacion : TEntero read GetTiempoEstimadoEnDiasCustomizacion write SetTiempoEstimadoEnDiasCustomizacion;
    property TiempoEstimadoTotalDelProducto : TEntero read GetTiempoEstimadoTotalDelProducto;
    Property TiempototalPasosDeFabricacionEnSegundos : TReal Read GetTiempototalPasosDeFabricacionEnSegundos;
    // Tiempos
    property ListaDePrecioDelPedidoID : TObjectID read FListaDePrecioDelPedidoID write SetListaDePrecioDelPedidoID;
    property MonedaDelPedidoID : TObjectId read FMonedaDelPedidoId write SetMonedaDelPedidoID;
    property MonedaDelPedido : TMoneda read GetMonedaDelPedido;
    property Componentes: TFabricadoComponenteList read Getcomponentes;
    property Procesos: TFabricadoProcesoList read GetProcesos;
    property ExpandOnSave: Boolean read FExpandOnSave write FExpandOnSave;
    property TerminacionDefaultID: TObjectID read GetTerminacionDefaultID write SetTerminacionDefaultID;
    property TerminacionDefault: TTerminacion read GetTerminacionDefault;
    property FechaDeCreacion : TFechaHora read FfechaDeCreacion write FfechaDeCreacion;
    property DesarrolloID: TObjectID read FdesarrolloID write SetDesarrolloID;
    property Desarrollo: TDesarrollo read GetDesarrollo;
    // esta terminacion debe transmitirse a todos los componentes
    property TmpTerminacionDelProducto : TTerminacion read FTmpTerminacionDelProducto write FTmpTerminacionDelProducto;
    // La cantidadAFabricar debe transmitirse a todos los componentes
    property TmpCantidadAFabricar : TEntero read FTmpCantidadAFabricar write FTmpCantidadAFabricar; // cantidad pedida * cantidad de componentes

    property ComponentesDesplegados     : TFabricadoComponenteDesplegadoList read GetComponentesDesplegados;
    property SubComponentes             : TStringList read GetSubComponentes;
    property esDescripcionRelease       : TBoolean read FesdescripcionRelease write FesdescripcionRelease;
    property esFabricadoFinal           : TBoolean read FesFabricadoFinal write FesFabricadoFinal;
    property esFabricadoBase            : TBoolean read FesFabricadoBase write FesFabricadoBase;
    property ResourceLanguage           : TResourceLanguage read GetResourceLanguage;
    property ResourceLanguageID         : TObjectID read FResourceLanguageID write SetResourceLanguageID;
    Property DescripcionParaExportacion : TString read GetDescripcionParaExportacion write fDescripcionParaExportacion;
    Property DescripcionParaExportacion2 : TString read fDescripcionParaExportacion ;   // es para actualizar el campo
    property DescripcionCustomEnIngles2 : TString read FDescripcionCustomEnIngles;   // es para actualizar el campo

    property PosicionArancelaria        : TString read GetPosicionArancelaria;
    property CodigoInternoSifab         : Integer read GetCodigoInternoSifab;
    //Stock
    property esMatriz: TBoolean read GetEsMatriz;
    // del create compuesto
    property ArticuloCodigo    : TString read FArticuloCodigo;
    property TerminacionCodigo : TString read FTerminacionCodigo;
    property CunioCodigo       : TString read FCunioCodigo;
    property CunioDescripcion  : TString read FCunioDescripcion;
    property CunioEsEstandar   : TBoolean read FCunioEsEstandar;
    property DesarrolloCodigo  : TString read FDesarrolloCodigo;

    property CantidadStockTotal         : TReal read GetCantidadStockTotal;
    property CantidadStockAsignada      : TReal read GetCantidadStockAsignada;
    property CantidadStockPreparada     : TReal read GetCantidadStockPreparada;
    property CantidadStockEnTransito    : TReal read GetCantidadStockEnTransito;
    property CantidadStockLibre         : TReal read GetCantidadStockLibre;
    Property DatosFisicos               : TFabricadoDatoFisicoList read GetDatosFisicos;
    Property IDTeamplace                : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_F : TFabricado) : Boolean;
    Property FotoID : TObjectID Read GetFotoID;
end;

TFabricadoDM = class(TSQLDBX_DMObject) // uso una conexion particular para los fabricados
  strict protected
    class function ConexionBaseDeDatos: TConnection; override;
  protected
    class function CreateCompuesto(_Parte : Integer = 0): String; override;
  private
    const
      _SP_Fabricados_DevolverFabricadoPadres = 'Fabricados_Compuesto_DevolverFabricadoPadres';
  public
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function TableName: string; override;
    const
      _ArticuloID          = 'ArticuloID';
      _CunioID             = 'CunioID';
      _TerminacionID       = 'TerminacionID';
      _ProductoID          = 'ProductoID';
      _Codigo              = 'Codigo';
      _Crc                 = 'Crc';
      _Descripcion         = 'Fabricado';
      _DescripcionParaExportacion = 'DescripcionParaExportacion';
      _DescripcionCustomEnIngles  = 'DescripcionCustomEnIngles';
      _FechaDeCreacion     = 'FechaDeCreacion';
      _CodigoSifab         = 'CodigoSifab';
      _DesarrolloID        = 'DesarrolloID'; // Permite nulos
      _EsInactivo          = 'Inhabilitado';
// del create compuesto
      _CCArticuloCodigo    = 'ArticuloCodigo';
      _CCTerminacionCodigo = 'TerminacionCodigo';
      _CCCunioCodigo       = 'CunioCodigo';
      _CCCunioDescripcion  = 'CunioDescripcion';
      _CCCunioEsEstandar   = 'EsCunioEstandar';
      _CCDesarrolloCodigo  = 'DesarrolloCodigo';
//Alias de la base de datos de Teamplace
      _TeamplaceTableName     = 'BSProducto';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'ProductoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TFabricado;
protected
public
  constructor CreateAllEspecialMigracion(_soloVendibles: Boolean = False; _SoloActivos: Boolean= False);
  constructor CreateAll( _SoloActivos: Boolean; _soloVendibles: Boolean = False);
  constructor CreateTop( _NTop: Integer; _SoloActivos: Boolean; _soloVendibles: Boolean = False; _Desc : Boolean = False);
  constructor CreateByArticuloTerminacionCunio(_A: TArticulo;_T: TTerminacion; _C: TCunio);
  constructor CreateByArticuloTerminacionCunioyCRC(_A: TArticulo;_T: TTerminacion; _C: TCunio; Crc: Integer);
  constructor CreateByCunio(_C: TCunio; _SoloActivos: Boolean = False);
  constructor CreateByTerminacion(_T: TTerminacion; _SoloActivos: Boolean = False);
  constructor CreateByTieneCRC( _SoloActivos: Boolean = False);
  constructor CreateByProductoID(_ID: TObjectID);
  constructor CreateByFabricadoID(_ID: TObjectID);
  constructor CreateByDesarrolloID(_ID: TObjectID);
  constructor CreateByCodigoProductoLikeCliente( _CodigoProductoLike: String; _CodigoCliente: String; _SoloVendibles: Boolean= False; _SoloActivos: Boolean=True);
  constructor CreateEmpty;
  constructor CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde, _DesarrolloHasta, _Cliente, _Marca, _Deposito, _Estado : String; _Medida, _Orden : Integer; _CuniosEstandar : Boolean = False ; _DesarrollosEstandar : Boolean = False ; _Producto : String = '') ;
//  constructor SP_Fabricados_By_CodigoProductoLike_Cliente( _CodigoProductoLike: String; _CodigoCliente: String; _SoloVendibles: Boolean= False);
  constructor SP_Fabricados_DevolverFabricadoPadres( _FabricadoID : TObjectID = NullId  ; _CodigoFabricado: String = '' );
  function CreateNewObject: TPDObject; override;
  function FindCodigoSifab(_CodigoSifab: String): Boolean;
  property Actual: TFabricado read GetActual;
end;

TFabricadoTraduccion = class(TTraduccion)
private
  FFabricadoID: TObjectID;
  FFabricado: TPDObject;
  procedure SetFabricadoID(Value: TObjectID);
  function GetFabricado: TFabricado;
public
  constructor Create; override;
  property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
  property Fabricado: TFabricado read GetFabricado;
end;

TFabricadoTraduccionDM = class(TSQLDBX_DMObject)
  Public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function ConexionBaseDeDatos: TConnection; override;
    const
      _ResourceLanguageID = 'ResourceLanguageID';
      _Descripcion        = 'Fabricado';
      _FabricadoID        = 'FabricadoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoTraduccionList = Class(TPDList)
  private
    function GetActual: TFabricadoTraduccion;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TFabricadoTraduccion read GetActual;
end;


TFabricadoDatoFisico = class(TPDObject)
  private
    FUnidadDeMedidaPesoID : TObjectID;
    FUnidadDeMedidaPeso : TPDObject;
    FUnidadDeMedidaCantidadID : TObjectID;
    FUnidadDeMedidaCantidad : TPDObject;
    FPesoNeto : TReal;
    FPesoBruto : TReal;
    FMateriaPrimaID : TObjectID;
    FMateriaPrima : TPDObject;
    FFabricadoID : TObjectID;
    FFabricado : TPDObject;
    FCantidad : TEntero;
    function GetFabricado : TFabricado;
    procedure SetFabricadoID(Value : TObjectID);
    function GetMateriaPrima : TMateriaPrima;
    procedure SetMateriaPrimaID(Value : TObjectID);
    function GetUnidadDeMedidaCantidad : TUnidadDeMedida;
    procedure SetUnidadDeMedidaCantidadID(Value : TObjectID);
    function GetUnidadDeMedidaPeso : TUnidadDeMedida;
    procedure SetUnidadDeMedidaPesoID(Value : TObjectID);
    function GetPesoBruto: TReal;
    function GetPesoNeto: TReal;
    procedure SetPesoBruto(const Value: TReal);
    procedure SetPesoNeto(const Value: TReal);
  public
    constructor Create; override;
    property Cantidad : TEntero read FCantidad write FCantidad;
    property Fabricado : TFabricado read GetFabricado;
    property FabricadoID : TObjectID read FFabricadoID write SetFabricadoID;
    property MateriaPrima : TMateriaPrima read GetMateriaPrima;
    property MateriaPrimaID : TObjectID read FMateriaPrimaID write SetMateriaPrimaID;
    property PesoBruto : TReal read GetPesoBruto write SetPesoBruto;
    property PesoNeto : TReal read GetPesoNeto write SetPesoNeto;
    property UnidadDeMedidaCantidad : TUnidadDeMedida read GetUnidadDeMedidaCantidad;
    property UnidadDeMedidaCantidadID : TObjectID read FUnidadDeMedidaCantidadID write SetUnidadDeMedidaCantidadID;
    property UnidadDeMedidaPeso : TUnidadDeMedida read GetUnidadDeMedidaPeso;
    property UnidadDeMedidaPesoID : TObjectID read FUnidadDeMedidaPesoID write SetUnidadDeMedidaPesoID;
end;

TFabricadoDatoFisicoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _Cantidad                 = 'Cantidad';
    _FabricadoID              = 'FabricadoID';
    _MateriaPrimaID           = 'MateriaPrimaID';
    _PesoBruto                = 'PesoBruto';
    _PesoNeto                 = 'PesoNeto';
    _UnidadDeMedidaCantidadID = 'UnidadDeMedidaCantidadID';
    _UnidadDeMedidaPesoID     = 'UnidadDeMedidaPesoID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoDatoFisicoList = class(TPDList)
private
  function GetActual : TFabricadoDatoFisico;
public
  constructor CreateAll;
  constructor CreateByFabricado(_F : TFabricado);
  constructor CreateByFabricadoAndMateriaPrima(_F : TFabricado; _MP : TMateriaPrima);
  function CreateNewObject: TPDObject; override;
  property Actual : TFabricadoDatoFisico read GetActual;
  function FindMateriaPrima( _MP: TMateriaPrima ): Boolean;
end;

TTmpFabricado = class(TDescriptibleAbreviado)
private
  FarticuloID: TObjectID;
  Farticulo: TPDObject;
  FterminacionID: TObjectID;
  Fterminacion: TPDObject;
  FCunioID: TObjectID;
  FCunio: TPDObject;
  Fcrc: TEntero;
  FCodigoCRC: TString;
  Fcomponentes: TPDList;
  FProcesos: TPDList;
  FComponentesDesplegados: TPDList;
  FIdPcUsuario: TString;
  FExpandOnSave: TBoolean;
  FTmpTerminacionDelProducto: TTerminacion;
  FTerminacionDefaultID: TObjectID;
  FTerminacionDefault: TPDObject;
  FarchivoDeImagen: TString;
  FarchivoSinImagen: TString;
  FesFabricadoFinal: TBoolean;
  FesFabricadoBase: TBoolean;
  FDescartar: TBoolean;
  FdesarrolloID: TObjectID;
  FDesarrollo: TPDObject;
  FTiempoEstimadoEnDiasCustomizacion: TEntero;

  function Getarticulo: TArticulo;
  function Getterminacion: TTerminacion;
  function GetCunio: TCunio;
  function GetCodigoCrc: TString;
  procedure SetArticuloID(const Value: TObjectID);
  procedure SetterminacionID(Value: TObjectID);
  procedure SetCunioID(Value: TObjectID);
  procedure SetCrc(const Value: TEntero);
  function GetarchivoDeImagen: TString;
  function GetProcesos: TTmpFabricadoProcesoList;
  function Getcomponentes: TTmpFabricadoComponenteList;
  function GetComponentesDesplegados: TTmpFabricadoComponenteDesplegadoList;
  function DescripcionDelFabricado(_MostrarDefault: Boolean; _ProductoFinal: Boolean = True; _articuloModificado: Boolean = True; _terminacionModificada: Boolean = True; _cunioModificado: Boolean = True): string;
  function DescripcionDeLosProcesos: string;
  function DescripcionDeLosComponentes: string;
  function GetTerminacionDefault: TTerminacion;
  function GetTerminacionDefaultID: TObjectID;
  procedure SetTerminacionDefaultID(const Value: TObjectID);
  function GetarchivoSinImagen: TString;
  function cambioOriginal(_TFCD: TTmpFabricadoComponenteDesplegado): Boolean;
  function GetDesarrollo: TDesarrollo;
  procedure SetDesarrolloID(const Value: TObjectID);
  function GetDesarrolloID: TObjectID;
  function GetTiempoEstimadoEnDiasCustomizacion: TEntero;
  // procedure asignarDefaults(_F: TTmpFabricado);
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  procedure CrearComponentes(_ExpandOnSave, _esFabricadoBase: TBoolean);
  function CRCBase: String;
  function CRCProcesos: String;
  function CrcComponentes(_TFCDL: TTmpFabricadoComponenteDesplegadoList): string;
  function CrcComponentesDelPadre(_TFCDL: TTmpFabricadoComponenteDesplegadoList): string;
  function GetCodigo: TString; override;
  function GetDescripcion: TString; override;
Public
  Constructor Create; override;
  destructor Destroy; override;
  Function Save: Boolean; override;
  Function FabricadoBase(_F: TTmpFabricado): TTmpFabricado;
  procedure LimpiarComponentesDesplegados;
  procedure AplicarComponentesDesplegados;
  procedure LimpiarComponentes;
  procedure LimpiarProcesos;
  procedure LimpiarDescripcion;
  procedure LimpiarCodigo;
  procedure Delete; override;
  procedure DeleteFabricadoCompleto;
  procedure DeleteFull; Reintroduce; Overload;
  procedure CalcularCRC;
  procedure CalcularCrcDesplegados(_TFCDL:TTmpFabricadoComponenteDesplegadoList);
  procedure CambiarTerminacionAPadres(_TFCDL : TTmpFabricadoComponenteDesplegadoList);
  procedure CambiarCunioAPadres(_TFCDL: TTmpFabricadoComponenteDesplegadoList);
  procedure recalcularCrcPadres(_TFCDL: TTmpFabricadoComponenteDesplegadoList);
  property esFabricadoBase: TBoolean read FesFabricadoBase write FesFabricadoBase;
  property articuloID: TObjectID read FarticuloID write SetArticuloID;
  property terminacionID  : TObjectID read FterminacionID write SetterminacionID;
  property CunioID: TObjectID read FCunioID write SetCunioID;
  property Crc: TEntero Read FCrc Write SetCrc;
  property desarrolloID: TObjectID read GetDesarrolloID write SetDesarrolloID;
  property articulo: TArticulo read Getarticulo;
  property terminacion: TTerminacion read Getterminacion;
  property Cunio: TCunio read GetCunio;
  property CodigoCrc: TString Read GetCodigoCrc;
  property desarrollo: TDesarrollo read GetDesarrollo;
  Property archivoDeImagen: TString read GetarchivoDeImagen;
  Property archivoSinImagen: TString read GetarchivoSinImagen;
  property componentes: TTmpFabricadoComponenteList read Getcomponentes;
  property Procesos: TTmpFabricadoProcesoList read GetProcesos;
  property ComponentesDesplegados: TTmpFabricadoComponenteDesplegadoList read GetComponentesDesplegados;
  property IdPcUsuario: TString read FIdPcUsuario write FIdPcUsuario;
  property codigo: TString read getcodigo;
  property ExpandOnSave: TBoolean read FExpandOnSave write FExpandOnSave;
  property TerminacionDefaultID: TObjectID read GetTerminacionDefaultID write SetTerminacionDefaultID;
  property TerminacionDefault: TTerminacion read GetTerminacionDefault;
  property TmpTerminacionDelProducto: TTerminacion read FTmpTerminacionDelProducto write FTmpTerminacionDelProducto;
  property esFabricadoFinal : TBoolean read FesFabricadoFinal write FesFabricadoFinal; // esto es cuando el producto es el terminado padre
  property Descartar: TBoolean read FDescartar write FDescartar;
  property TiempoEstimadoEnDiasCustomizacion : TEntero read GetTiempoEstimadoEnDiasCustomizacion;
  property Descripcion : TString read GetDescripcion;
end;

TTmpFabricadoDM = class(TSQLDBX_DMObject)  // uso una conexion particular para los fabricados
  strict protected
    class function ConexionBaseDeDatos: TConnection; override;
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _ArticuloID      = 'ArticuloID';
      _CunioID         = 'CunioID';
      _TerminacionID   = 'TerminacionID';
      _Crc             = 'Crc';
      _IDPcUsuario     = 'IDPcUsuario';
      _Codigo          = 'Codigo';
      _Descripcion     = 'Fabricado';
      _EsFabricadoBase = 'EsFabricadoBase';
      _DesarrolloID    = 'DesarrolloID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTmpFabricadoList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTmpFabricado;

public
  constructor CreateAll;
  Constructor CreateByArticuloTerminacionCunio(_A: TArticulo; _T: TTerminacion; _C: TCunio);
  constructor CreateByArticuloTerminacionCunioyCRC(_A: TArticulo; _T: TTerminacion; _C: TCunio; Crc: Integer);
  constructor CreateByFabricadoID(_FTmpID: TObjectID);

  constructor CreateEmpty;

  function CreateNewObject: TPDObject; override;
  procedure DeleteAll;

  property Actual: TTmpFabricado read GetActual;
end;

TFabricadoComponente = class(TPDObject)
private
  FCantidadDeElementos: TEntero;
  FOrdenDeArmado: TEntero;
  FFabricadoPadreID: TObjectID;
  FFabricadoPadre: TPDObject;
  FFabricado: TPDObject;
  FFabricadoID: TObjectID;
  FMostrarDescripcion: TBoolean;

  FArticuloOriginalID: TObjectID;
  FTerminacionOriginalID: TObjectID;
    FCunioOriginalID: TObjectID;
    FCrcOriginal: TEntero;
    FArticuloOriginal: TPDObject;
    FTerminacionOriginal: TPDObject;
    FCunioOriginal: TPDObject;
    FesNoEstandar: TBoolean;
    FFabricadoOriginalCodigo: TString;

    procedure SetFabricadoID(Value: TObjectID);
    function GetFabricado: TFabricado;
    function GetFabricadoPadre: TFabricado;
    function GetArticuloOriginal: TArticulo;
    function GetCunioOriginal: TCunio;
    function GetTerminacionOriginal: TTerminacion;
    procedure SetArticuloOriginalID(const Value: TObjectID);
    procedure SetCunioOriginalID(const Value: TObjectID);
    procedure SetTerminacionOriginalID(const Value: TObjectID);
    function GetFabricadoOriginalCodigo: TString;

public
  constructor Create; override;
  property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
  property Fabricado: TFabricado read GetFabricado;
  property FabricadoPadreID : TObjectID read FFabricadoPadreID write FFabricadoPadreID;
  property FabricadoPadre: TFabricado read GetFabricadoPadre;
  property OrdenDeArmado: TEntero read FOrdenDeArmado write FOrdenDeArmado;
  property CantidadDeElementos : TEntero read FCantidadDeElementos write FCantidadDeElementos;
  property MostrarDescripcion : TBoolean read FMostrarDescripcion write FMostrarDescripcion;

  property ArticuloOriginal: TArticulo read GetArticuloOriginal;
  property TerminacionOriginal: TTerminacion read GetTerminacionOriginal;
  property CunioOriginal: TCunio read GetCunioOriginal;
  Property FabricadoOriginalCodigo: TString read GetFabricadoOriginalCodigo;

  property ArticuloOriginalID: TObjectID read FArticuloOriginalID write SetArticuloOriginalID;
  property TerminacionOriginalID: TObjectID read FTerminacionOriginalID write SetTerminacionOriginalID;
  property CunioOriginalID: TObjectID read FCunioOriginalID write SetCunioOriginalID;
  property CrcOriginal: TEntero read FCrcOriginal write FCrcOriginal;
  property esNoEstandar: TBoolean read FesNoEstandar write FesNoEstandar;
end;

TFabricadoComponenteDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoID = 'FabricadoID';
    _FabricadoPadreID = 'FabricadoPadreID';
    _OrdenDeArmado = 'OrdenDeArmado';
    _CantidadDeElementos = 'CantidadDeElementos';
    _MostrarDescripcion = 'MostrarDescripcion';
    _ArticuloOriginalID = 'ArticuloOriginalID';
    _TerminacionOriginalID = 'TerminacionOriginalID';
    _CunioOriginalID = 'CunioOriginalID';
    _CrcOriginal = 'CrcOriginal';
    _EsNoEstandar = 'EsNoEstandar';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoComponenteList = class(TPDList)
private
  function GetActual: TFabricadoComponente;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByPadre(_Padre: TFabricado);
  constructor CreateByPadreYFabricado(_Padre, _Fabricado: TFabricado);
  constructor CreateByHijo(_Hijo: TFabricado);

  function CreateNewObject: TPDObject; override;
  property Actual: TFabricadoComponente read GetActual;
end;

TTmpFabricadoComponente = class(TPDObject)
private
  FCantidadDeElementos: TEntero;
  FOrdenDeArmado: TEntero;
  FFabricadoPadreID: TObjectID;
  FFabricado: TPDObject;
  FFabricadoID: TObjectID;
  FIdPcUsuario: TString;
  FcomponenteDesplegadoPadreID: TObjectID;

  FArticuloOriginalID: TObjectID;
  FTerminacionOriginalID: TObjectID;
  FCunioOriginalID: TObjectID;
  FCrcOriginal: TEntero;
  FArticuloOriginal: TPDObject;
  FTerminacionOriginal: TPDObject;
  FCunioOriginal: TPDObject;
  FFabricadoPadre: TTmpFabricado;
  FEsNoEstandar: TBoolean;

  function GetFabricado: TTmpFabricado;
  procedure SetFabricadoID(const Value: TObjectID);

  function GetArticuloOriginal: TArticulo;
  function GetCunioOriginal: TCunio;
  function GetTerminacionOriginal: TTerminacion;
  procedure SetArticuloOriginalID(const Value: TObjectID);
  procedure SetCunioOriginalID(const Value: TObjectID);
  procedure SetTerminacionOriginalID(const Value: TObjectID);
  function GetFabricadoPadre: TTmpFabricado;

public
  constructor Create; override;
  procedure DeleteFull(_F: TTmpFabricado = Nil); Reintroduce; Overload;
  property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
  property Fabricado: TTmpFabricado read GetFabricado;
  property FabricadoPadreID : TObjectID read FFabricadoPadreID write FFabricadoPadreID;
  property FabricadoPadre : TTmpFabricado read GetFabricadoPadre write FFabricadoPadre;
  property OrdenDeArmado: TEntero read FOrdenDeArmado write FOrdenDeArmado;
  property CantidadDeElementos : TEntero read FCantidadDeElementos write FCantidadDeElementos;
  property IdPcUsuario: TString read FIdPcUsuario write FIdPcUsuario;
  property ComponenteDesplegadoPadreID : TObjectID read FcomponenteDesplegadoPadreID write FcomponenteDesplegadoPadreID;

  property ArticuloOriginal: TArticulo read GetArticuloOriginal;
  property TerminacionOriginal: TTerminacion read GetTerminacionOriginal;
  property CunioOriginal: TCunio read GetCunioOriginal;

  property ArticuloOriginalID: TObjectID read FArticuloOriginalID write  SetArticuloOriginalID;
  property TerminacionOriginalID: TObjectID read FTerminacionOriginalID write  SetTerminacionOriginalID;
  property CunioOriginalID: TObjectID read FCunioOriginalID write SetCunioOriginalID;
  property CrcOriginal: TEntero read FCrcOriginal write FCrcOriginal;
  property EsNoEstandar: TBoolean read FEsNoEstandar write FEsNoEstandar;

end;

TTmpFabricadoComponenteDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoID = 'FabricadoID';
    _FabricadoPadreID = 'FabricadoPadreID';
    _OrdenDeArmado = 'OrdenDeArmado';
    _CantidadDeElementos = 'CantidadDeElementos';
    _IdPcUsuario = 'IDPcUsuario';
    _ArticuloOriginalID = 'ArticuloOriginalID';
    _TerminacionOriginalID = 'TerminacionOriginalID';
    _CunioOriginalID = 'CunioOriginalID';
    _CrcOriginal = 'CrcOriginal';
    _esNoEstandar = 'esNoEstandar';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTmpFabricadoComponenteList = class(TPDList)
private
  function GetActual: TTmpFabricadoComponente;

public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByPadre(_Padre: TTmpFabricado);
  function CreateNewObject: TPDObject; override;
  procedure DeleteAll;
  property Actual: TTmpFabricadoComponente read GetActual;
end;

// *********************
TTmpFabricadoComponenteDesplegado = class(TPDObject)
  private
    FCantidadDeElementos: TEntero;
    FinternalOrder: TEntero;
    FOrdenDeArmado: TEntero;
    FFabricadoPadreID: TObjectID;
    FFabricado: TTmpFabricado;
    FFabricadoID: TObjectID;
    FIdPcUsuario: TString;
    FcomponenteDesplegadoPadreID: TObjectID;
    FFabricadoComponenteID: TObjectID;
    FArticuloOriginalID: TObjectID;
    FTerminacionOriginalID: TObjectID;
    FCunioOriginalID: TObjectID;
    FCrcOriginal: TEntero;
    FFabricadoPadre: TTmpFabricado;
    FesNoEstandar: TBoolean;
    FFabricadoComponente: TPDObject;

    function GetFabricado: TTmpFabricado;
    procedure SetFabricadoID(const Value: TObjectID);
    function GetFabricadoPadre: TTmpFabricado;
    procedure SetFabricadoPadreID(const Value: TObjectID);
    function GetFabricadoComponente: TTmpFabricadoComponente;
    procedure SetFabricadoComponenteID(const Value: TObjectID);

  public
    constructor Create; override;
    function esOrdenPuro(_TFCDL: TTmpFabricadoComponenteDesplegadoList): Boolean;
    procedure CleanFabricado;
    property FabricadoComponente: TTmpFabricadoComponente read GetFabricadoComponente;
    property FabricadoComponenteID: TObjectID read FFabricadoComponenteID write SetFabricadoComponenteID;
    property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
    property Fabricado: TTmpFabricado read GetFabricado;// write FFabricado;
    property FabricadoPadreID: TObjectID read FFabricadoPadreID write SetFabricadoPadreID;
    property FabricadoPadre : TTmpFabricado read GetFabricadoPadre;// write FFabricadoPadre;
    property OrdenDeArmado: TEntero read FOrdenDeArmado write FOrdenDeArmado;
    property CantidadDeElementos : TEntero read FCantidadDeElementos write FCantidadDeElementos;
    property IdPcUsuario: TString read FIdPcUsuario write FIdPcUsuario;
    property ComponenteDesplegadoPadreID : TObjectID read FcomponenteDesplegadoPadreID write FcomponenteDesplegadoPadreID;
    property ArticuloOriginalID : TObjectID read FArticuloOriginalID write FArticuloOriginalID;
    property TerminacionOriginalID: TObjectID read FTerminacionOriginalID write FTerminacionOriginalID;
    property CunioOriginalID : TObjectID read FCunioOriginalID write FCunioOriginalID;
    property CrcOriginal: TEntero read FCrcOriginal write FCrcOriginal;
    property internalOrder: TEntero read FinternalOrder write FinternalOrder;
    property esNoEstandar: TBoolean read FesNoEstandar write FesNoEstandar;
end;

TTmpFabricadoComponenteDesplegadoList = class(TPDList)
  private
    function GetActual: TTmpFabricadoComponenteDesplegado;
  public
    constructor CreateEmpty;
    function FindComponente(_C: TTmpFabricadoComponente): Boolean;
    function CreateNewObject: TPDObject; override;
    procedure LimpiarHijos;
    property Actual: TTmpFabricadoComponenteDesplegado read GetActual;
end;

TFabricadoProceso = class(TPDObject)
private
  FEspecificaciones: TOBject;
  Fproceso: TPDObject;
  FprocesoID: TObjectID;
  FFabricadoID: TObjectID;
  FFabricado: TPDObject;
  Forden: TEntero;

  procedure SetprocesoID(Value: TObjectID);
  function Getproceso: TProceso;
  function GetEspecificaciones: TFabricadoProcesoEspecificacionList;
  function GetFabricado: TFabricado;

public
  constructor Create; override;
  procedure Delete; override;

  property FabricadoID: TObjectID read FFabricadoID write FFabricadoID;
  property Fabricado: TFabricado read GetFabricado;
  property procesoID: TObjectID read FprocesoID write SetprocesoID;
  property proceso: TProceso read Getproceso;
  property Especificaciones: TFabricadoProcesoEspecificacionList read GetEspecificaciones;
  property orden: TEntero read Forden write Forden;
end;

TFabricadoProcesoDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoID = 'FabricadoID';
    _procesoID = 'ProcesoID';
    _Orden = 'Orden';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoProcesoList = class(TPDList)
private
  function GetActual: TFabricadoProceso;
  procedure BorrarTodosLosProcesos;
public
  constructor CreateAll;
  constructor CreateByFabricado(_F: TFabricado);
  constructor CreateByProceso(_P: TProceso);
  function CreateNewObject: TPDObject; override;
  property Actual: TFabricadoProceso read GetActual;
end;

TTmpFabricadoProceso = class(TPDObject)
private
  FEspecificaciones: TOBject;
  Fproceso: TPDObject;
  FFabricado: TPDObject;
  FprocesoID: TObjectID;
  FFabricadoID: TObjectID;
  FIdPcUsuario: TString;
  Forden: TEntero;
  procedure SetFabricadoID(Value: TObjectID);
  procedure SetprocesoID(Value: TObjectID);
  function GetFabricado: TTmpFabricado;
  function Getproceso: TProceso;
  function GetEspecificaciones: TTmpFabricadoProcesoEspecificacionList;
public
  constructor Create; override;
  procedure Delete; Override;
  procedure DeleteFull(_F: TTmpFabricado = Nil); Reintroduce; Overload;

  property FabricadoID: TObjectID read FFabricadoID write SetFabricadoID;
  property procesoID: TObjectID read FprocesoID write SetprocesoID;
  property Fabricado: TTmpFabricado read GetFabricado;
  property proceso: TProceso read Getproceso;
  property Especificaciones: TTmpFabricadoProcesoEspecificacionList read GetEspecificaciones;
  property IdPcUsuario: TString read FIdPcUsuario write FIdPcUsuario;
  property orden: TEntero read Forden write Forden;
end;

TTmpFabricadoProcesoDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoID = 'FabricadoID';
    _procesoID = 'ProcesoID';
    _IdPcUsuario = 'IDPcUsuario';
    _Orden = 'Orden';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTmpFabricadoProcesoList = class(TPDList)
private
  function GetActual: TTmpFabricadoProceso;
public
  constructor CreateAll;
  constructor CreateByFabricado(_F: TTmpFabricado);
  procedure DeleteAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TTmpFabricadoProceso read GetActual;
end;

TFabricadoProcesoEspecificacion = class(TPDObject)
private
  FCodigoColor: TString;
  Fobservacion: TString;
  FEspecificacion: TPDObject;
  FEspecificacionID: TObjectID;
  FFabricadoProcesoID: TObjectID;
  FFabricadoProceso: TPDObject;
  FFabricado: TPDObject;
  Forden: TEntero;
  FdesarrolloID: TObjectID;
  FDesarrollo: TPDObject;

  procedure SetEspecificacionID(Value: TObjectID);
  function GetEspecificacion: TProcesoEspecificacion;
  function GetFabricadoProceso: TFabricadoProceso;
  procedure SetFabricadoProcesoID(const Value: TObjectID);
  function GetCodigoColor: TString;
  function GetDesarrollo: TDesarrollo;
  procedure SetDesarrolloID(const Value: TObjectID);
  function GetFabricado: TFabricado;

public
  constructor Create; override;
  property FabricadoProcesoID: TObjectID read FFabricadoProcesoID write SetFabricadoProcesoID;
  property FabricadoProceso: TFabricadoProceso read GetFabricadoProceso;
  property Fabricado: TFabricado read GetFabricado;
  property EspecificacionID: TObjectID read FEspecificacionID write SetEspecificacionID;
  property Especificacion: TProcesoEspecificacion read GetEspecificacion;
  property CodigoColor: TString read GetCodigoColor;
  property orden: TEntero read Forden write Forden;
  property desarrolloID: TObjectID read FdesarrolloID write SetDesarrolloID;
  property desarrollo: TDesarrollo read GetDesarrollo;
end;

TFabricadoProcesoEspecificacionDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoProcesoID = 'FabricadoProcesoID';
    _EspecificacionID   = 'EspecificacionID';
    _DesarrolloID       = 'DesarrolloID';
    _Orden              = 'Orden';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFabricadoProcesoEspecificacionList = class(TPDList)
private
  function GetActual: TFabricadoProcesoEspecificacion;
public
  constructor CreateAll;
  constructor CreateByProceso(_FP: TFabricadoProceso);
  constructor CreateByEspecificacion(_E: TProcesoEspecificacion);
  function CreateNewObject: TPDObject; override;
  property Actual: TFabricadoProcesoEspecificacion read GetActual;
end;

TTmpFabricadoProcesoEspecificacion = class(TPDObject)
private
  FEspecificacion: TPDObject;
  FCodigoColor: TString;
  FEspecificacionID: TObjectID;
  FFabricadoProcesoID: TObjectID;
  FFabricadoProceso: TPDObject;
  FIdPcUsuario: TString;
  Forden: TEntero;
  FdesarrolloID: TObjectID;
  FDesarrollo: TPDObject;
  procedure SetEspecificacionID(Value: TObjectID);
  function GetEspecificacion: TProcesoEspecificacion;
  function GetCodigoColor: TString;
  procedure SetDesarrolloID(const Value: TObjectID);
  function GetDesarrollo: TDesarrollo;
  function GetFabricadoProceso: TTmpFabricadoProceso;
  procedure SetFabricadoProcesoID(const Value: TObjectID);

public
  constructor Create; override;
  procedure DeleteFull(_TmpFP: TTmpFabricadoProceso = Nil); Reintroduce; Overload;
  property FabricadoProcesoID: TObjectID read FFabricadoProcesoID write SetFabricadoProcesoID;
  property FabricadoProceso: TTmpFabricadoProceso read GetFabricadoProceso;
  property EspecificacionID: TObjectID read FEspecificacionID write SetEspecificacionID;
  property CodigoColor: TString read GetCodigoColor;
  property Especificacion: TProcesoEspecificacion read GetEspecificacion;
  property IdPcUsuario: TString read FIdPcUsuario write FIdPcUsuario;
  property orden: TEntero read Forden Write Forden;
  property desarrolloID: TObjectID read FdesarrolloID write SetDesarrolloID;
  property desarrollo: TDesarrollo read GetDesarrollo;
end;

TTmpFabricadoProcesoEspecificacionDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _FabricadoProcesoID = 'FabricadoProcesoID';
    _EspecificacionID = 'EspecificacionID';
    _IDPcUsuario = 'IdPcUsuario';
    _Orden = 'Orden';
    _desarrolloID = 'DesarrolloID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTmpFabricadoProcesoEspecificacionList = class(TPDList)
private
  function GetActual: TTmpFabricadoProcesoEspecificacion;
public
  constructor CreateAll;
  constructor CreateByFabricadoProceso(_FP: TTmpFabricadoProceso);
  function CreateNewObject: TPDObject; override;
  procedure DeleteAll;
  property Actual: TTmpFabricadoProcesoEspecificacion read GetActual;
end;

TTipoDePrecioCunio = class(TDescriptible)
  private
    FTableName : TString;
  public
    constructor Create; override;
    property TableName : TString read FTableName write FTableName;
end;

TTipoDePrecioCunioDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion = 'TipoDePrecioCunio';
    _EsInactivo = 'EsInactivo';
    _TableName = 'TableName';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDePrecioCunioList = class(TDescriptibleList)
private
  function Getactual : TTipoDePrecioCunio;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property actual : TTipoDePrecioCunio read Getactual;
end;

TPadron = class(TDescriptible)
  private
    FPublicaciones     : TPadronPublicacionList;
    FTablaImportacion  : TString;
    FSeparadorDeCampos : TString;
    FPublicacionActual : TPDObject;
    FCampos            : TPadronCampoList;
    FSeparadorDeRegistros : TString;
    FEsPadronPercepciones : TBoolean;
    FEsPadronRetenciones  : TBoolean;
    FCaracterIdentificadorDeTipo: TString;
    fEsMensual: TBoolean;
    fEsTrimestral: TBoolean;
    fSemestral: TBoolean;
    fEsCuatrimestral: TBoolean;
    fEsBimestral: TBoolean;
    fRecordar: TBoolean;
    fDiasAnticipacion: TBoolean;
    fDireccionesAviso: TString;
    function GetPublicaciones: TPadronPublicacionList;
    function GetPublicacionActual: TPadronPublicacion;
    function GetCampos: TPadronCampoList;
  public
    constructor Create; override;
    Property Publicaciones        : TPadronPublicacionList Read GetPublicaciones;
    Property Campos               : TPadronCampoList Read GetCampos;
    Property TablaImportacion     : TString Read FTablaImportacion write FTablaImportacion;
    Property SeparadorDeCampos    : TString Read FSeparadorDeCampos write FSeparadorDeCampos;
    Property SeparadorDeRegistros : TString Read FSeparadorDeRegistros write FSeparadorDeRegistros;
    Property EsPadronPercepciones : TBoolean Read FEsPadronPercepciones write FEsPadronPercepciones;
    Property EsPadronRetenciones  : TBoolean Read FEsPadronRetenciones write FEsPadronRetenciones;
    Property PublicacionActual    : TPadronPublicacion Read GetPublicacionActual;
    Property CaracterIdentificadorDeTipo : TString Read FCaracterIdentificadorDeTipo write FCaracterIdentificadorDeTipo;
    Property EsMensual              : TBoolean Read fEsMensual write fEsMensual;
    Property EsBimestral            : TBoolean Read fEsBimestral write fEsBimestral;
    Property EsTrimestral           : TBoolean Read fEsTrimestral write fEsTrimestral;
    Property EsCuatrimestral        : TBoolean Read fEsCuatrimestral write fEsCuatrimestral;
    Property Recordar             : TBoolean Read fRecordar write fRecordar;
    Property DiasAnticipacion     : TBoolean Read fDiasAnticipacion write fDiasAnticipacion;
    Property DireccionesAviso     : TString  Read fDireccionesAviso write fDireccionesAviso;
end;

TPadronDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _Descripcion                 = 'Padron';
    _EsPadronRetenciones         = 'EsPadronRetenciones';
    _EsPadronPercepciones        = 'EsPadronPercepciones';
    _TablaImportacion            = 'TablaImportacion';
    _SeparadorDeCampos           = 'SeparadorDeCampos';
    _SeparadorDeRegistros        = 'SeparadorDeRegistros';
    _CaracterIdentificadorDeTipo = 'CaracterIdentificadorDeTipo';
    _EsInactivo                  = 'EsInactivo';
    _EsMensual                   = 'EsMensual';
    _EsBimestral                 = 'EsBimestral';
    _EsTrimestral                = 'EsTrimestral';
    _EsCuatrimestral             = 'EsCuatrimestral';
    _Recordar                    = 'Recordar';
    _DiasAnticipacion            = 'DiasAnticipacion';
    _DireccionesAviso            = 'DireccionesAviso';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPadronList = class(TDescriptibleList)
private
  function Getactual : TPadron;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property Actual : TPadron read Getactual;
end;

TPadronPublicacion = class(TPDObject)
  private
    FPadronID           : TObjectID;
    FPadron             : TPDObject;
    FItems              : TPadronItemList;
    FFechaDeVigenciaDesde : TFecha;
    FFechaDeVigenciaHasta : TFecha;    
    procedure SetPadronID(const Value: TObjectID);
    function GetPadron: TPadron;
    function GetItems: TPadronItemList;
  public
    constructor Create; override;
    procedure limpiarItems;

    procedure Delete; override;
    property PadronID : TObjectID read FPadronID write SetPadronID;
    property Padron   : TPadron read GetPadron;
    Property Items : TPadronItemList Read GetItems;
    property FechaDeVigenciaDesde : TFecha read FFechaDeVigenciaDesde write FFechaDeVigenciaDesde;
    property FechaDeVigenciaHasta : TFecha read FFechaDeVigenciaHasta write FFechaDeVigenciaHasta;
end;

TPadronPublicacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _FechaDeVigenciaHasta = 'FechaDeVigenciaHasta';
    _FechaDeVigenciaDesde = 'FechaDeVigenciaDesde';
    _PadronID             = 'PadronID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPadronPublicacionList = class(TPDList)
  private
    function GetActual : TPadronPublicacion;
  public
    constructor CreateAll;
    constructor CreateEmpty;
    Constructor CreateByPadron(_P : TPadron);
    Constructor CreateByPadronAndFechaDesdeFechaHasta (_FechaDesde : TString ; _FechaHasta : TString ; _P : TPadron);
    Constructor CreateByPadronAndFecha(_Fecha : TString; _P : TPadron); overload;
    Constructor CreateByPadronAndFecha(_Fecha : TString; _PID : TObjectID); overload;
    Constructor CreateByPublicacionActual(_P : TPadron);
    function CreateNewObject: TPDObject; override;
    property Actual : TPadronPublicacion read GetActual;
end;

TPadronItem = class(TPDObject)
  private
    FTipoDeContribuyente : TString;
    FGrupo               : TString;
    FFechaVigenciaHasta  : TFecha;
    FFechaVigenciaDesde  : TFecha;
    FFechaPublicacion    : TFecha;
    FCUIT                : TString;
    FCambioAlicuota      : TString;
    FAltaBajaSujeto      : TString;
    FPadronPublicacionID : TObjectID;
    FPadronPublicacion   : TPDObject;
    FAlicuotaRetencion   : TReal;
    FAlicuotaPercepcion  : TReal;
    procedure SetPadronPublicacionID(const Value: TObjectID);
    function GetPadronPublicacion: TPadronPublicacion;
    function GetGrupo: TString;
    procedure SetGrupo(const Value: TString);
  public
    constructor Create; override;
    procedure ValidateOnInsert; override;
    procedure DeleteFull(_P: TPadronPublicacion) ; Reintroduce ; Overload;
    property AlicuotaPercepcion  : TReal read FAlicuotaPercepcion write FAlicuotaPercepcion;
    property AlicuotaRetencion   : TReal read FAlicuotaRetencion write FAlicuotaRetencion;
    property AltaBajaSujeto      : TString read FAltaBajaSujeto write FAltaBajaSujeto;
    property CambioAlicuota      : TString read FCambioAlicuota write FCambioAlicuota;
    property CUIT                : TString read FCUIT write FCUIT;
    property FechaPublicacion    : TFecha read FFechaPublicacion write FFechaPublicacion;
    property FechaVigenciaDesde  : TFecha read FFechaVigenciaDesde write FFechaVigenciaDesde;
    property FechaVigenciaHasta  : TFecha read FFechaVigenciaHasta write FFechaVigenciaHasta;
    property Grupo               : TString read GetGrupo write SetGrupo;
    property PadronPublicacionID : TObjectID read FPadronPublicacionID write SetPadronPublicacionID;
    property PadronPublicacion   : TPadronPublicacion read GetPadronPublicacion;
    property TipoDeContribuyente : TString read FTipoDeContribuyente write FTipoDeContribuyente;
end;

TPadronItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _PadronPublicacionID = 'PadronPublicacionID';
    _AlicuotaRetencion   = 'AlicuotaRetencion';
    _AlicuotaPercepcion  = 'AlicuotaPercepcion';
    _AltaBajaSujeto      = 'AltaBajaSujeto';
    _CambioAlicuota      = 'CambioAlicuota';
    _CUIT                = 'NumeroDocumento';
    _FechaPublicacion    = 'FechaPublicacion';
    _FechaVigenciaDesde  = 'FechaVigenciaDesde';
    _FechaVigenciaHasta  = 'FechaVigenciaHasta';
    _Grupo               = 'Grupo';
    _TipoDeContribuyente = 'TipoDeContribuyente';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPadronItemList = class(TPDList)
private
  function GetActual : TPadronItem;
public
  constructor CreateAll;
  Constructor CreateByPadronPublicacion(_P : TPadronPublicacion);
  Constructor CreateByPadronFechaIncluidaAndEmpresa(_P : TPadron ; _Fecha : String ; _E : TEmpresa);
  function CreateNewObject: TPDObject; override;
  property Actual : TPadronItem read GetActual;
end;

TPadronCampo = class(TDescriptible)
  private
    FPadronID : TObjectID;
    FPadron   : TPDObject;
    FOrden    : TEntero;
    FSentencia  : String;
    FLargoCampo : Integer;
    function GetPadron : TPadron;
    procedure SetPadronID(Value : TObjectID);
  public
    constructor Create; override;
    property Orden    : TEntero read FOrden write FOrden;
    property Padron   : TPadron read GetPadron;
    property PadronID : TObjectID read FPadronID write SetPadronID;
    property Sentencia: String read FSentencia write FSentencia;
    property LargoCampo: Integer read FLargoCampo write FLargoCampo;
end;

TPadronCampoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion = 'PadronCampo';
    _LargoCampo  = 'LargoCampo';
    _Sentencia   = 'SentenciaCampo';
    _EsInactivo  = 'EsInactivo';
    _Orden       = 'Orden';
    _PadronID    = 'PadronID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPadronCampoList = class(TDescriptibleList)
private
  function GetActual : TPadronCampo;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  Constructor CreateByPadron(_P : TPadron);
  function CreateNewObject: TPDObject; override;
  property Actual : TPadronCampo read GetActual;
  function FindDescripcion( _C: String ): Integer;
end;


TProveedor = class(TAbstractEmpresa)
public
  constructor Create; override;
  // PROVEEDOR
  property CategoriaDeProveedor;
  property CategoriaDeProveedorID;
  property CondicionDeCompra;
  property CondicionDeCompraID;
  property CondiciondeCobranza;
  property CondiciondeCobranzaID;
  property NumeroDeIngresosBrutos;
  property ValoresALaOrdenDe;
  property ImpuestosActivos;
end;

TProvincia = class(TDescriptible)
  private
    FPaisID      : TObjectID;
    FPais        : TPDObject;
    Flocalidades : TLocalidadList;
    FIDTeamplace : TEntero;
    function Getlocalidades: TLocalidadList;
    function GetPais: TPais;
    procedure SetPaisID(const Value: TObjectID);
    function GetIDTeamplace: TEntero;
  public
    constructor Create; override;
    procedure Delete; Override;
    property Localidades: TLocalidadList read Getlocalidades;
    property Pais: TPais read GetPais;
    property PaisID: TObjectID read FPaisID write setPaisID;
    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_P : TProvincia) : Boolean;
end;

TProvinciaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    Const
      _Descripcion            = 'Provincia';
      _PaisID                 = 'PaisID';
      _TeamplaceTableName     = 'BSProvincia';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'ProvinciaID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TProvinciaList = class(TDescriptibleList)
  private
    function GetActual: TProvincia;
  public
    constructor CreateAll;
    constructor CreateByPais(_P: TPais);
    function FindDescripcion(_Des: String): Boolean;
    function CreateNewObject: TPDObject; override;
    property Actual: TProvincia read GetActual;
end;

TRankingCrediticio = class(TDescriptible)
  private
    FConfeccionaFactura: TBoolean;
    FConfeccionaRemito: TBoolean;
    FConfeccionaPedido: TBoolean;
    FesContraEntrega: TBoolean;
  public
    constructor Create; override;
    property ConfeccionaFactura : TBoolean Read FConfeccionaFactura Write FConfeccionaFactura;
    property ConfeccionaPedido : TBoolean Read FConfeccionaPedido Write FConfeccionaPedido;
    property ConfeccionaRemito : TBoolean Read FConfeccionaRemito Write FConfeccionaRemito;
    property esContraEntrega : TBoolean Read FesContraEntrega Write FesContraEntrega;
end;

TRankingCrediticioDM = class(TSQLDBX_DMObject)
  protected

  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion        = 'RankingCrediticio';
      _ConfeccionaFactura = 'ConfeccionaFactura';
      _ConfeccionaRemito  = 'ConfeccionaRemito';
      _ConfeccionaPedido  = 'ConfeccionaPedido';
      _EsContraEntrega    = 'esCondicionContraEntrega';
      _EsInactivo         = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TRankingCrediticioList = class(TDescriptibleList)
  private
    function GetActual: TRankingCrediticio;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TRankingCrediticio read GetActual;
end;

TRecurso = class(TDescriptibleAbreviado)
  private
    FTipoDeRecurso    : TPDObject;
    FTipoDeRecursoID  : TObjectID;
    FArchivoDeImagen  : TString;
    FArchivoSinImagen : TString;
    FSectorID         : TObjectID;
    FSector           : TPDObject;
    FHerramentales    : TRecursoHerramentalList;
    procedure SetTipoDeRecursoID(Value: TObjectID);
    function GetTipoDeRecurso: TTipoDeRecurso;
    function GetArchivoDeImagen: TString;
    function GetArchivoSinImagen: TString;
    function GetSector: TSector;
    procedure SetSectorID(const Value: TObjectID);
    function GetHerramentales: TRecursoHerramentalList;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property TipoDeRecursoID : TObjectID read FTipoDeRecursoID write SetTipoDeRecursoID;
    property TipoDeRecurso   : TTipoDeRecurso read GetTipoDeRecurso;
    property SectorID : TObjectID read FSectorID write SetSectorID;
    property Sector   : TSector read GetSector;
    property ArchivoDeImagen: TString Read GetArchivoDeImagen;
    property ArchivoSinImagen: TString Read GetArchivoSinImagen;
    Property Herramentales : TRecursoHerramentalList Read GetHerramentales;
end;

TRecursoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _TipoDeRecursoID = 'TipoDeRecursoID';
      _Codigo          = 'Codigo';
      _Descripcion     = 'Recurso';
      _EsInactivo      = 'EsInactivo';
      _SectorID        = 'SectorID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TRecursoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TRecurso;
  public
    constructor CreateAll( _SoloActivos: Boolean= False);
    constructor CreateByTipoDeRecurso(_TR: TTipoDeRecurso; _SoloActivos: Boolean);
    constructor CreateByPaso(_P: TPasoDeFabricacion; _SoloActivos: Boolean);
    constructor CreateByPasoAndCodigoLike(_C : String; _P: TPasoDeFabricacion; _SoloActivos: Boolean);
    function CreateNewObject: TPDObject; override;
    property Actual: TRecurso read GetActual;
end;

TOperacion = class(TDescriptible)
  private
    FUtilizaManoDeObra : TBoolean;
  public
    constructor Create; override;
end;

TOperacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion       = 'Operacion';
    _EsInactivo        = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TOperacionList = class(TDescriptibleList)
  private
    function GetActual : TOperacion;
  public
    constructor CreateAll( _SoloActivos: Boolean= false);
    function CreateNewObject: TPDObject; override;
    property Actual : TOperacion read GetActual;
end;

TMotivoDeAtraso = class(TDescriptible)
  private
    FRequiereComentario: Boolean;
  public
    constructor Create; override;
    Property RequiereComentario : Boolean read FRequiereComentario write FRequiereComentario;
end;

TMotivoDeAtrasoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
    const
      _EsInactivo         = 'EsInactivo';
      _Descripcion        = 'MotivoDeAtraso';
      _RequiereComentario = 'RequiereComentario';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMotivoDeAtrasoList = class(TDescriptibleList)
private
  function GetActual : TMotivoDeAtraso;
public
  Constructor CreateAll( _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TMotivoDeAtraso read GetActual;
end;

TResource = class(TDescriptible)
  private
    FResourceStrings: TResourceStringList;
    function GetResourceStrings: TResourceStringList;
  public
    constructor Create; override;
    procedure Delete; override;
    function GetResourceStringByLanguage(L: TResourceLanguage): string;
    property RSRCStrings: TResourceStringList read GetResourceStrings;
end;

TResourceDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'Resource';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TResourceList = class(TDescriptibleList)
  private
    function GetActual: TResource;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TResource read GetActual;
    Function FindDescripcion(_Desc: String): Boolean;
end;

TResourceLanguage = class(TDescriptibleAbreviado)
  private
    FResourceStrings: TResourceStringList;
    FIsDefault: TBoolean;
    FDescripcionTraduccion: String;
    FCodigoInternoSifab: TEntero;
    function GetResourceStrings: TResourceStringList;
    function GetCodigoInternoSifab: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property IsDefault : TBoolean read FisDefault write FisDefault;
    property DescripcionTraduccion : String read FDescripcionTraduccion write FDescripcionTraduccion;
    Property CodigoInternoSifab : TEntero Read GetCodigoInternoSifab;
end;

TResourceLanguageDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                = 'Codigo';
      _ResourceLanguage      = 'ResourceLanguage';
      _IsDefault             = 'IsDefault';
      _DescripcionTraduccion = 'DescripcionTraduccion';
      _EsInactivo            = 'EsInactivo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TResourceLanguageList = class(TDescriptibleAbreviadoList)
  private
    function getResourceLanguage: TResourceLanguage;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TResourceLanguage read getResourceLanguage;
end;

TResourceString = class(TPDObject)
  private
    FResource: TPDObject;
    FResourceLanguage: TPDObject;
    FResourceID: TObjectID;
    FResourceLanguageID: TObjectID;
    FText: TString;
    function GetResource: TResource;
    function getResourceLanguage: TResourceLanguage;
    procedure SetResourceID(const Value: TObjectID);
    procedure SetresourceLanguageID(const Value: TObjectID);
  public
    constructor Create; override;
    property Text: TString read Ftext write Ftext;
    property ResourceLanguage: TResourceLanguage read getResourceLanguage;
    property ResourceLanguageID: TObjectID read FresourceLanguageID write SetresourceLanguageID;
    property Resource: TResource read GetResource;
    property ResourceID: TObjectID read FResourceID write SetResourceID;
end;

TResourceStringDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _ResourceID         = 'ResourceID';
      _ResourceLanguageID = 'ResourceLanguageID';
      _ResourceString     = 'ResourceString';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TResourceStringList = class(TPDList)
  private
    function GetresourceString: TResourceString;
  public
    constructor CreateByLanguage(Lang: TResourceLanguage);
    constructor CreateByResource(Resource: TResource);
    constructor CreateByResourceAndLanguage(Resource: TResource; Lang: TResourceLanguage);
    function CreateNewObject: TPDObject; override;
    property Actual: TResourceString read GetresourceString;
end;

TSQLLogger = class(TPDObject)
private
  FtableName: TString;
  FtableID: TEntero;
//  FstatementType: TString;
//  Fstatement: TString;
  FFechaHora: TFechaHora;
  FUsuarioID: TObjectID;
  FUsuario: TPDObject;
  function GetUsuario: TUsuario;
  procedure SetUsuarioID(Value: TObjectID);
Public
  Constructor Create; override;
  Function Save: Boolean; override;
  property TableName: TString read FtableName write FtableName;
  property TableID: TEntero read FtableID write FtableID;
//  property statementType: TString read FstatementType write FstatementType;
//  Property statement: TString read Fstatement write Fstatement;
  property FechaHora: TFechaHora read FFechaHora write FFechaHora;
  property UsuarioID: TObjectID read FUsuarioID write SetUsuarioID;
  property Usuario: TUsuario read GetUsuario;
end;

TSQLLoggerDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _TableName     = 'TableName';
    _TableID       = 'TableID';
    _StatementType = 'StatementType';
    _Statement     = 'Statement';
    _FechaHora     = 'FechaHora';
    _UsuarioID     = 'UsuarioID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TSQLLoggerList = class(TPDList)
private
  function GetActual: TSQLLogger;
public
  constructor CreateAll;
  constructor CreateEmpty;
  Constructor CreateByFechaAndStatementType(_FechaDesde: String; _FechaHasta: String; _StatementType: String);
  function CreateNewObject: TPDObject; override;
  property Actual: TSQLLogger read GetActual;
end;

TTipoDeAsiento = class(TDescriptibleAbreviado)
  private
    FCodigoInternoSifab: TEntero;
    function GetCodigoInternoSifab: TEntero;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property CodigoInternoSifab : TEntero read GetCodigoInternoSifab;


end;

TTipoDeAsientoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo      = 'Codigo';
      _Descripcion = 'TipoDeAsiento';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeAsientoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeAsiento;
  public
    constructor CreateAll(_SoloActivos : Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeAsiento read GetActual;
end;

TTipoDeComponente = class(TDescriptibleAbreviado)
  private
    FFiguraEnCodigoDeFabricado: TBoolean;
    FEsVendible: TBoolean;
    FEsOpcional: TBoolean;
    FLlevaCunio: TBoolean;
    FAsumeElPrecioDelCunio: TBoolean;
    FDescripcionComercial: TString;
    FTraducciones: TPDObject;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  private

    procedure SetDescripcionComercial(const Value: TString);
    function GetTraducciones: TTipoDeComponenteTraduccionList;
  public
    constructor Create; override;
    procedure Delete; override;
//    procedure GuardarEnSifab(_CodigoRotulo, _CodigoEmpresa: Integer); overload;
//    function FaltaEnSifab(_Rotulo, _CodigoEmpresa: Integer): Boolean;

    property FiguraEnCodigoDeFabricado : TBoolean read FFiguraEnCodigoDeFabricado write FFiguraEnCodigoDeFabricado;
    property DescripcionComercial: TString read FdescripcionComercial write SetDescripcionComercial;
    property EsVendible: TBoolean read FesVendible write FesVendible;
    property EsOpcional: TBoolean read FesOpcional write FesOpcional;
    property LlevaCunio: TBoolean read FllevaCunio write FllevaCunio;
    property AsumeElPrecioDelCunio: TBoolean read FAsumeElPrecioDelCunio write FAsumeElPrecioDelCunio;
    property Traducciones: TTipoDeComponenteTraduccionList read GetTraducciones;
end;

TTipoDeComponenteDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo                     = 'Codigo';
      _Descripcion                = 'TipoDeComponente';
      _DescripcionComercial       = 'DescripcionComercial';
      _FiguraEnCodigoDeFabricado  = 'FiguraEnCodigoDeFabricado';
      _esVendible                 = 'EsVendible';
      _esOpcional                 = 'EsOpcional';
      _llevaCunio                 = 'LlevaCunio';
      _asumeElprecioDelCunio      = 'AsumeElprecioDelCunio';
      _EsInactivo                 = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeComponenteList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeComponente;
  public
    constructor CreateAll(_SoloActivos: Boolean = False );
    constructor CreateByVendibles(_SoloActivos: Boolean );
    constructor CreateByLlevaCunio(_SoloActivos: Boolean );
    constructor CreateByNoFiguraEnCodigo(_SoloActivos: Boolean );
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeComponente read GetActual;
end;


TTipoDeCustomizacion = class(TDescriptible)
  public
    constructor Create; override;
end;

TTipoDeCustomizacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion = 'TipoDeCustomizacion';
    _EsInactivo  = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeCustomizacionList = class(TDescriptibleList)
private
  function GetActual : TTipoDeCustomizacion;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TTipoDeCustomizacion read GetActual;
end;

TTipoDeCosto = class(TDescriptibleAbreviado)
  private
    FFormulaID : TObjectID;
    FFormula   : TPDObject;
    function GetFormula: TFormula;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property FormulaID : TObjectID Read FFormulaID Write FFormulaID;
    property Formula   : TFormula Read GetFormula;
end;

TTipoDeCostoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo      = 'Codigo';
      _Descripcion = 'Tipodecosto';
      _FormulaID   = 'FormulaID';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeCostoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeCosto;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeCosto read GetActual;
end;

TTipoDeDocumento = class(TDescriptibleAbreviado)
  private
    FCodigoAfip       : TString;
    FIDTeamplace      : TEntero;
    FValidarRepetidos : TBoolean;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    function Save: Boolean; override;
    Property CodigoAfip       : TString read FCodigoAfip write FCodigoAfip;
    Property IDTeamplace      : TEntero read GetIDTeamplace;
    Property ValidarRepetidos : TBoolean read FValidarRepetidos write FValidarRepetidos;
end;

TTipoDeDocumentoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'TipoDeDocumento';
      _Codigo      = 'Codigo';
      _EsInactivo  = 'EsInactivo';
      _CodigoAfip  = 'CodigoAfip';
      _ValidarRepetidos   = 'ValidarRepetidos';
      _TeamplaceTableName = 'BSIdentificacionTributaria';
      _TeamplaceID        = 'IdentificacionTributariaID';
      _TeamplaceCodigo    = 'Codigo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeDocumentoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeDocumento;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeDocumento read GetActual;
end;

TTipoDeFormulario = class(TDescriptibleAbreviado)
  private
    FActuaEnStockPorCambioDePasoDeFabricacion : Boolean;
    FActuaEnStockPorCambioDeEstado            : Boolean;
    FAccionesDeStock          : TTipoDeFormularioAccionStockList;
    Forden                    : TEntero;
    FFormularioID             : TObjectID;
    FFormulario               : TPDObject;
    FOperacionContableID      : TObjectID;
    FOperacionContable        : TPDObject;
    FObservacionesPosibles    : TObject;
    FConceptosPosibles        : TObject;
    FObservacionDefaultID     : TObjectID;
    FConceptoPosibleDefaultID : TObjectID;
    FObservacionDefault       : TPDObject;
    FConceptoPosibleDefault   : TPDObject;
    FPieImpresion             : TString;
    FEmailSubject             : TString;
    FEmailBody                : WideString;
    FEditarPorAdministrador   : TBoolean;
    FMailPorMacAddressValidado: TBoolean;
    FEmailBodyEsHtml          : TString;
    FArchivoXMLCamposEncabezado: TString;
    FArchivoXMLCamposItems     : TString;
    FArchivoReporte            : TString;
    FArchivoFD3TitulosES       : TString;
    FArchivoFD3TitulosEN       : TString;
    FArchivoFD3TitulosPO       : TString;
    FcodigoFiscal              : TString;
    FLetra                     : TString;
    FEmailFirmas               : TTipoDeFormularioEmailFirmaList;
    FEmailCuerpos              : TTipoDeFormularioEmailCuerpoList;
    FEmailEncabezados          : TTipoDeFormularioEmailEncabezadoList;
    FEmailItems                : TTipoDeFormularioEmailItemList;
    FActuaEnStockPorAjuste     : Boolean;
    FCentroDeFacturacionID     : TObjectID;
    FCentroDeFacturacion       : TPDObject;
    FImpresoraDefaultID        : TObjectID;
    FImpresoraDefault          : TPDObject;
    FCantidadDeImpresiones     : TEntero;
    FVerificaCai               : TBoolean;
    FCodigoInternoLetraSifab    : TEntero;
    FEsParaDepositoSemielaborado: Boolean;
    FEsParaDepositoProductosTerminados: Boolean;
    FEsParaDepositoMateriaPrima: Boolean;
    function GetFormulario: TFormulario;
    procedure SetFormularioID(const Value: TObjectID);
    function GetObservacionesPosibles: TFormularioObservacionList;
    function GetConceptosPosibles: TTipoDeFormularioConceptoPosibleList;
    function GetOperacionContable: TCuentaContable;
    procedure SetOperacionContableID(const Value: TObjectID);
    procedure SetConceptoPosibleDefaultID(const Value: TObjectID);
    procedure SetobservacionDefaultID(const Value: TObjectID);
    function GetFormularioObsercacion: TFormularioObservacion;
    function GetTTipoDeFormularioConceptoPosible : TTipoDeformularioConceptoPosible;
    function GetAccionesDeStock: TTipoDeFormularioAccionStockList;
    function GetEditarPorAdministrador: TBoolean;
    procedure getEmailBody(const Value: WideString);
    function GetEmailFirmas: TTipoDeFormularioEmailFirmaList;
    function GetEmailCuerpos: TTipoDeFormularioEmailCuerpoList;
    function GetEmailEncabezados: TTipoDeFormularioEmailEncabezadoList;
    function GetEmailItems: TTipoDeFormularioEmailItemList;
    function GetCentroDeFacturacion: TCentroDeFacturacion;
    procedure SetCentroDeFacturacionID(const Value: TObjectID);
    procedure SetLetra(const Value: TString);
    function GetImpresoraDefault: TImpresoraDocumento;
    procedure SetImpresoraDefaultID(const Value: TObjectID);
    function GetCodigoInternoLetraSifab: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property FormularioID: TObjectID read FFormularioID write SetFormularioID;
    property Formulario: TFormulario read GetFormulario;
    property ConceptosPosibles: TTipoDeFormularioConceptoPosibleList Read GetConceptosPosibles;
    property ObservacionesPosibles: TFormularioObservacionList read GetObservacionesPosibles;
    property CentroDeFacturacionID : TObjectID  read FCentroDeFacturacionID write SetCentroDeFacturacionID;
    property CentroDeFacturacion   : TCentroDeFacturacion  read GetCentroDeFacturacion;
    property OperacionContableID: TObjectID Read FOperacionContableID Write SetOperacionContableID;
    property OperacionContable: TCuentaContable Read GetOperacionContable;
    property ObservacionDefaultID: TObjectID Read FObservacionDefaultID Write SetobservacionDefaultID;
    property ConceptoPosibleDefaultID : TObjectID Read FConceptoPosibleDefaultID Write SetConceptoPosibleDefaultID;
    property ObservacionDefault: TFormularioObservacion read GetFormularioObsercacion;
    property ConceptoPosibleDefault: TTipoDeformularioConceptoPosible read GetTTipoDeFormularioConceptoPosible;
    property Letra  : TString Read FLetra write SetLetra;
    property CodigoInternoLetraSifab : TEntero Read GetCodigoInternoLetraSifab;

    property VerificaCai : TBoolean read FVerificaCai write FVerificaCai;
    property CantidadDeImpresiones: TEntero read FCantidadDeImpresiones write FCantidadDeImpresiones;
    property Orden: TEntero read Forden write Forden;
    property PieImpresion: TString Read FPieImpresion Write FPieImpresion;
    property EmailBody: WideString Read FEmailBody Write getEmailBody;
    property EmailBodyEsHtml: TString Read FEmailBodyEsHtml Write FEmailBodyEsHtml;
    property EmailSubject: TString Read FEmailSubject Write FEmailSubject;
    property EditarPorAdministrador: TBoolean Read GetEditarPorAdministrador Write FEditarPorAdministrador;
    property MailPorMacAddressValidado: TBoolean Read FMailPorMacAddressValidado Write FMailPorMacAddressValidado;
    property ArchivoReporte: TString Read FArchivoReporte Write FArchivoReporte;
    property ArchivoFD3TitulosES: TString Read FArchivoFD3TitulosES Write FArchivoFD3TitulosES;
    property ArchivoFD3TitulosEN: TString Read FArchivoFD3TitulosEN Write FArchivoFD3TitulosEN;
    property ArchivoFD3TitulosPO: TString Read FArchivoFD3TitulosPO Write FArchivoFD3TitulosPO;
    property ArchivoXMLCamposEncabezado: TString Read FArchivoXMLCamposEncabezado Write FArchivoXMLCamposEncabezado;
    property ArchivoXMLCamposItems: TString Read FArchivoXMLCamposItems Write FArchivoXMLCamposItems;
    property ActuaEnStockPorAjuste  : Boolean Read FActuaEnStockPorAjuste write fActuaEnStockPorAjuste;
    property ActuaEnStockPorCambioDeEstado : Boolean Read FActuaEnStockPorCambioDeEstado write fActuaEnStockPorCambioDeEstado; // para pedidos
    property ActuaEnStockPorCambioDePasoDeFabricacion : Boolean Read FActuaEnStockPorCambioDePasoDeFabricacion write fActuaEnStockPorCambioDePasoDeFabricacion; // para hojas de ruta
    property AccionesDeStock : TTipoDeFormularioAccionStockList Read GetAccionesDeStock;
    property EmailFirmas      : TTipoDeFormularioEmailFirmaList Read GetEmailFirmas;
    property EmailCuerpos     : TTipoDeFormularioEmailCuerpoList Read GetEmailCuerpos;
    property EmailItems       : TTipoDeFormularioEmailItemList Read GetEmailItems;
    property EmailEncabezados : TTipoDeFormularioEmailEncabezadoList Read GetEmailEncabezados;
    property CodigoFiscal: TString Read FcodigoFiscal Write FcodigoFiscal;
    Property ImpresoraDefaultID : TObjectID Read FImpresoraDefaultID Write SetImpresoraDefaultID;
    Property ImpresoraDefault   : TImpresoraDocumento Read GetImpresoraDefault;
    Property EsParaDepositoSemielaborado        : Boolean Read FEsParaDepositoSemielaborado write FEsParaDepositoSemielaborado;
    Property EsParaDepositoMateriaPrima         : Boolean Read FEsParaDepositoMateriaPrima write FEsParaDepositoMateriaPrima;
    Property EsParaDepositoProductosTerminados  : Boolean Read FEsParaDepositoProductosTerminados write FEsParaDepositoProductosTerminados;
end;

TTipoDeFormularioDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo                                   = 'Codigo';
      _Descripcion                              = 'TipoDeFormulario';
      _FormularioID                             = 'FormularioID';
      _Orden                                    = 'Orden';
      _OperacionContableID                      = 'OperacionContableID';
      _ObservacionDefaultID                     = 'ObservacionDefaultID';
      _ConceptoPosibleDefaultID                 = 'ConceptoPosibleDefaultID';
      _ActuaEnStockPorAjuste                    = 'ActuaEnStockPorAjuste';
      _ActuaEnStockPorCambioDeEstado            = 'ActuaEnStockPorCambioDeEstado';
      _ActuaEnStockPorCambioDePasoDeFabricacion = 'ActuaEnStockPorCambioDePasoDeFabricacion';
      _Letra                                    = 'Letra';
      _CantidadDeImpresiones                    = 'CantidadDeImpresiones';
      _PieImpresion                             = 'PieImpresion';
      _EmailSubject                             = 'EmailSubject';
      _EmailBody                                = 'EmailBody';
      _EmailBodyEsHtml                          = 'EmailBodyEsHtml';
      _EditarPorAdministrador                   = 'EditarPorAdministrador';
      _MailPorMacAddressValidado                = 'MailPorMacAddressValidado';
      _ArchivoReporte                           = 'ArchivoReporte';
      _ArchivoXMLCamposEncabezado               = 'ArchivoXMLCamposEncabezado';
      _ArchivoXMLCamposItems                    = 'ArchivoXMLCamposItems';
      _ArchivoFD3TitulosES                      = 'ArchivoFD3TitulosES';
      _ArchivoFD3TitulosPO                      = 'ArchivoFD3TitulosPO';
      _ArchivoFD3TitulosEN                      = 'ArchivoFD3TitulosEN';
      _CodigoFiscal                             = 'CodigoFiscal';
      _EsInactivo                               = 'EsInactivo';
      _CentroDeFacturacionID                    = 'CentroDeFacturacionID';
      _VerificaCai                              = 'VerificaCai';
      _ImpresoraDefaultID                       = 'ImpresoraDeDocumentoDefaultID';
      _EsParaDepositoSemielaborado              = 'EsParaDepositoSemielaborado';
      _EsParaDepositoMateriaPrima               = 'EsParaDepositoMateriaPrima';
      _EsParaDepositoProductosTerminados        = 'EsParaDepositoProductosTerminados';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDeFormulario;
public
  constructor CreateAll;
  constructor CreateByFormulario(_F: TFormulario); overload;
  constructor CreateByFormulario(_FID: TObjectID); overload;
  constructor CreateByFormularioFacturable;
  constructor CreateByCentroDeFacturacion(_CF: TCentroDeFacturacion); overload;
  constructor CreateByCentroDeFacturacion(_CFID: TObjectID); overload;
  constructor CreateDocumentosAfipByCentroDeFacturacion(_CF: TCentroDeFacturacion); overload;
  constructor CreateDocumentosAfipByCentroDeFacturacion(_CFID: TObjectID); overload;
  constructor CreateDocumentosAfipByCentroDeFacturacionCodigoLike(_CFID: TObjectID; _C : String); overload;
  constructor CreateDocumentosAfipByCentroDeFacturacionCodigoLike(_CF: TCentroDeFacturacion; _C : String); overload;
  constructor CreateByFormularioAndCondicionDeIva( _F: TFormulario; _CIVA : TCondicionDeIva );
  constructor CreateByFormularioAndDeposito(_F : TFormulario ; _EsDepositoMP, _EsDepositoSemi, _EsDepositoProd: Boolean);
  constructor CreateByFormularioAndDepositoAndCodigoLike(_F : TFormulario ; _C : String ; _EsDepositoMP, _EsDepositoSemi, _EsDepositoProd: Boolean);
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDeFormulario read GetActual;
end;

TTipoDeFormularioEmailFirma = class(TPDObject)
  private
    FRutaDeArchivo      : TString;
    FResourceLanguageID : TObjectID;
    FResourceLanguage   : TPDObject;
    FTipoDeFormulario   : TPDObject;
    FTipoDeFormularioID : TObjectID;
    procedure SetResourceLanguageID(Value : TObjectID);
    function GetResourceLanguage: TResourceLanguage;
    function GetTipoDeFormulario: TTipoDeFormulario;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
  public
    constructor Create; override;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario read GetTipoDeFormulario;
    property ResourceLanguageID : TObjectID read FResourceLanguageID write SetResourceLanguageID;
    property ResourceLanguage   : TResourceLanguage read GetResourceLanguage;
    property RutaDeArchivo      : TString read FRutaDeArchivo write FRutaDeArchivo;
end;

TTipoDeFormularioEmailFirmaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _ResourceLanguageID = 'ResourceLanguageID';
      _RutaDeArchivo      = 'RutaDeArchivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioEmailFirmaList = class(TPDList)
  private
    function GetActual : TTipoDeFormularioEmailFirma;
  public
    constructor CreateAll;
    constructor CreateByTipoDeFormulario( _T : TTipoDeFormulario );
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeFormularioEmailFirma read GetActual;
    Function FindCodigoIdioma( _C : String  ) : Boolean;
end;

TTipoDeFormularioEmailCuerpo = class(TPDObject)
  private
    FRutaDeArchivo      : TString;
    FResourceLanguageID : TObjectID;
    FResourceLanguage   : TPDObject;
    FTipoDeFormulario   : TPDObject;
    FTipoDeFormularioID : TObjectID;
    procedure SetResourceLanguageID(Value : TObjectID);
    function GetResourceLanguage: TResourceLanguage;
    function GetTipoDeFormulario: TTipoDeFormulario;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
  public
    constructor Create; override;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario read GetTipoDeFormulario;
    property ResourceLanguageID : TObjectID read FResourceLanguageID write SetResourceLanguageID;
    property ResourceLanguage   : TResourceLanguage read GetResourceLanguage;
    property RutaDeArchivo      : TString read FRutaDeArchivo write FRutaDeArchivo;
end;

TTipoDeFormularioEmailCuerpoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _ResourceLanguageID = 'ResourceLanguageID';
      _RutaDeArchivo      = 'RutaDeArchivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioEmailCuerpoList = class(TPDList)
  private
    function GetActual : TTipoDeFormularioEmailCuerpo;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    constructor CreateByTipoDeFormulario( _T : TTipoDeFormulario );
    property Actual : TTipoDeFormularioEmailCuerpo read GetActual;
    Function FindCodigoIdioma( _C : String  ) : Boolean;
end;

TTipoDeFormularioEmailEncabezado = class(TPDObject)
  private
    FRutaDeArchivo      : TString;
    FResourceLanguageID : TObjectID;
    FResourceLanguage   : TPDObject;
    FTipoDeFormulario   : TPDObject;
    FTipoDeFormularioID : TObjectID;
    procedure SetResourceLanguageID(Value : TObjectID);
    function GetResourceLanguage: TResourceLanguage;
    function GetTipoDeFormulario: TTipoDeFormulario;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
  public
    constructor Create; override;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario read GetTipoDeFormulario;
    property ResourceLanguageID : TObjectID read FResourceLanguageID write SetResourceLanguageID;
    property ResourceLanguage   : TResourceLanguage read GetResourceLanguage;
    property RutaDeArchivo : TString read FRutaDeArchivo write FRutaDeArchivo;
end;

TTipoDeFormularioEmailEncabezadoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _ResourceLanguageID = 'ResourceLanguageID';
      _RutaDeArchivo      = 'RutaDeArchivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioEmailEncabezadoList = class(TPDList)
  private
    function GetActual : TTipoDeFormularioEmailEncabezado;
  public
    constructor CreateAll;
    constructor CreateByTipoDeFormulario( _T : TTipoDeFormulario );
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeFormularioEmailEncabezado read GetActual;
    Function FindCodigoIdioma( _C : String  ) : Boolean;
end;

TTipoDeFormularioEmailItem = class(TPDObject)
  private
    FRutaDeArchivo      : TString;
    FResourceLanguageID : TObjectID;
    FResourceLanguage   : TPDObject;
    FTipoDeFormularioID : TObjectID;
    FTipoDeFormulario   : TPDObject;
    FEsParaKit          : TBoolean;
    procedure SetResourceLanguageID(Value : TObjectID);
    function GetResourceLanguage: TResourceLanguage;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
    function GetTipoDeFormulario: TTipoDeFormulario;
  public
    constructor Create; override;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario read GetTipoDeFormulario;
    property ResourceLanguageID : TObjectID read FResourceLanguageID write SetResourceLanguageID;
    property ResourceLanguage   : TResourceLanguage read GetResourceLanguage;
    property RutaDeArchivo      : TString read FRutaDeArchivo write FRutaDeArchivo;
    property EsParaKit          : TBoolean read FEsParaKit write FEsParaKit;
end;

TTipoDeFormularioEmailItemDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    const
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _ResourceLanguageID = 'ResourceLanguageID';
      _RutaDeArchivo      = 'RutaDeArchivo';
      _EsParaKit          = 'EsParaKit';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioEmailItemList = class(TPDList)
  private
    function GetActual : TTipoDeFormularioEmailItem;
  public
    constructor CreateAll;
    constructor CreateByTipoDeFormulario( _T : TTipoDeFormulario );
    function CreateNewObject: TPDObject; override;
    property Actual : TTipoDeFormularioEmailItem read GetActual;
    Function FindCodigoIdioma( _C : String  ) : Boolean;
    Function FindCodigoIdiomaAndEsParaKit( _C : String; _EsParaKit : Boolean  ) : Boolean;
end;

TImpresoraDocumento = class(TDescriptible)
  private
    FDireccionDeRed : TString;
    FSectorID       : TObjectID;
    FSector         : TPDObject;
    function GetSector: TSector;
    procedure SetSectorID(const Value: TObjectID);
  public
    constructor Create; override;
    property DireccionDeRed : TString read FDireccionDeRed write FDireccionDeRed;
    property SectorID       : TObjectID read FSectorID write SetSectorID;
    property Sector         : TSector read GetSector;
end;

TImpresoraDocumentoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion    = 'ImpresoraDocumento';
    _SectorID       = 'SectorID';
    _DireccionDeRed = 'DireccionDeRed';
    _EsInactivo     = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TImpresoraDocumentoList = class(TDescriptibleList)
  private
    function GetActual : TImpresoraDocumento;
  public
    constructor CreateAll( _SoloActivos: Boolean= false);
    function CreateNewObject: TPDObject; override;
    property Actual : TImpresoraDocumento read GetActual;
end;

TCentroDeFacturacion = class(TDescriptibleAbreviado)
  private
    FEsElectronico: TBoolean;
    FCais: TCentroDeFacturacionCAIList;
    FCodigoInternoSifab: TEntero;
    FEsDefault: TBoolean;
    function GetCais: TCentroDeFacturacionCAIList;
    function GetCodigoInternoSifab: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    Constructor Create; override;
    Property EsElectronico      : TBoolean read FEsElectronico write FEsElectronico;
    Property Cais               : TCentroDeFacturacionCAIList Read GetCais;
    Property CodigoInternoSifab : TEntero Read GetCodigoInternoSifab;
    Property EsDefault          : TBoolean read FEsDefault write FEsDefault;
end;

TCentroDeFacturacionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion   = 'CentroDeFacturacion';
      _Codigo        = 'Codigo';
      _EsElectronico = 'EsElectronico';
      _EsDefault     = 'EsDefault';
      _EsInactivo    = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCentroDeFacturacionList = class(TDescriptibleAbreviadoList)
  private
    function GetActual : TCentroDeFacturacion;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual : TCentroDeFacturacion read GetActual;
end;


TCentroDeFacturacionCAI = class(TPDObject)
  private
    FVencimientoDeCAI : TFecha;
    FTipoDeFormularioID : TObjectID;
    FTipoDeFormulario : TPDObject;
    FNumeroDeCAI : TString;
    FCentroDeFacturacionID : TObjectID;
    FCentroDeFacturacion : TPDObject;
    function GetCentroDeFacturacion : TCentroDeFacturacion;
    procedure SetCentroDeFacturacionID(Value : TObjectID);
    function GetTipoDeFormulario : TTipoDeFormulario;
    procedure SetTipoDeFormularioID(Value : TObjectID);
  public
    constructor Create; override;
    property CentroDeFacturacion : TCentroDeFacturacion read GetCentroDeFacturacion;
    property CentroDeFacturacionID : TObjectID read FCentroDeFacturacionID write SetCentroDeFacturacionID;
    property NumeroDeCAI : TString read FNumeroDeCAI write FNumeroDeCAI;
    property TipoDeFormulario : TTipoDeFormulario read GetTipoDeFormulario;
    property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    property VencimientoDeCAI : TFecha read FVencimientoDeCAI write FVencimientoDeCAI;
end;

TCentroDeFacturacionCAIDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CentroDeFacturacionID = 'CentroDeFacturacionID';
    _NumeroDeCAI           = 'NumeroDeCAI';
    _TipoDeFormularioID    = 'TipoDeFormularioID';
    _VencimientoDeCAI      = 'VencimientoDeCAI';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCentroDeFacturacionCAIList = class(TPDList)
private
  function Getactual : TCentroDeFacturacionCAI;
public
  constructor CreateAll;
  constructor CreateByCentroDeFacturacion( _CF: TCentroDeFacturacion ); overload;
  constructor CreateByCentroDeFacturacion( _CFID: TObjectID ); overload;
  constructor CreateByCentroDeFacturacionYTipodeFormulario( _CF: TCentroDeFacturacion; _TF: TTipoDeFormulario ); overload;
  constructor CreateByCentroDeFacturacionYTipodeFormulario( _CFID: TObjectID; _TFID: TObjectID ); overload;
  Constructor CreateByCAIVigente(_CFID: TObjectID; _TFID: TObjectID);


  function CreateNewObject: TPDObject; override;

  property actual : TCentroDeFacturacionCAI read Getactual;
end;

TTipoDeformularioConceptoPosible = class(TPDObject)
private
  FCuentaContable: TPDObject;
  FCuentaContableID: TObjectID;
  FTipoDeFormulario: TPDObject;
  FTipoDeformularioID: TObjectID;
  procedure SetTipoDeFormularioID(Value: TObjectID);
  function GetTipoDeFormulario: TTipoDeFormulario;
  procedure SEtCuentaContableID(Value: TObjectID);
  function GetCuentaContable: TCuentaContable;
  function getcodigo: String;
public
  constructor Create; override;
  property TipoDeformularioID: TObjectID read FTipoDeformularioID write SetTipoDeFormularioID;
  property TipoDeFormulario: TTipoDeFormulario read GetTipoDeFormulario;
  property CuentaContableID: TObjectID read FCuentaContableID write SetCuentaContableID;
  property CuentaContable: TCuentaContable read GetCuentaContable;
  property codigo: String read getcodigo;
end;

TTipoDeFormularioConceptoPosibleDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _TipoDeformularioID = 'TipoDeFormularioID';
    _CuentaContableID   = 'CuentaContableID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFormularioConceptoPosibleList = class(TPDList)
private
  function GetActual: TTipoDeformularioConceptoPosible;
public
  constructor CreateAll;
  constructor CreateByFormulario(_F: TTipoDeFormulario);
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDeformularioConceptoPosible read GetActual;
  function Find(_cod: string): Boolean; reintroduce; overload;
end;

//TTipoDeFormularioMovimientoPosible = class(TPDObject)
//private
//  FDepositoPropioEnOrigen: TBoolean;
//  FProveedoresEnOrigen: TBoolean;
//  FClientesEnOrigen: TBoolean;
//
//  FDepositoPropioEnDestino: TBoolean;
//  FInterdepositoEnDestino: TBoolean;
//  FProveedoresEnDestino: TBoolean;
//  FClientesEnDestino: TBoolean;
//
//  FEstadoDestino: TPDObject;
//  FEstadoDestinoID: TObjectID;
//  FEstadoOrigen: TPDObject;
//  FEstadoOrigenID: TObjectID;
//  FTipoDeformularioID: TObjectID;
//  Forden: TEntero;
//  FDepositoDefaultOrigenID: TObjectID;
//  FDepositoDefaultDestinoID: TObjectID;
//  FDepositoDefaultDestino: TPDObject;
//  FDepositoDefaultOrigen: TPDObject;
//  procedure SetEstadoOrigenID(Value: TObjectID);
//  function GetEstadoOrigen: TEstadoDeStock;
//  procedure SetEstadoDestinoID(Value: TObjectID);
//  function GetEstadoDestino: TEstadoDeStock;
//  function GetDepositoDefaultDestino: TDeposito;
//  function GetDepositoDefaultOrigen: TDeposito;
//  procedure SetDepositoDefaultDestinoID(Value: TObjectID);
//  procedure SetDepositoDefaultOrigenID(Value: TObjectID);
//public
//  constructor Create; override;
//
//  function Save: Boolean; override;
//
//  property TipoDeformularioID : TObjectID read FTipoDeformularioID write FTipoDeformularioID;
//  property EstadoOrigenID: TObjectID read FEstadoOrigenID write SetEstadoOrigenID;
//  property EstadoOrigen: TEstadoDeStock read GetEstadoOrigen;
//  property EstadoDestinoID: TObjectID read FEstadoDestinoID write SetEstadoDestinoID;
//  property EstadoDestino: TEstadoDeStock read GetEstadoDestino;
//
//  property ClientesEnOrigen : TBoolean read FClientesEnOrigen write FClientesEnOrigen;
//  property ProveedoresEnOrigen : TBoolean read FProveedoresEnOrigen write FProveedoresEnOrigen;
//  property DepositoPropioEnOrigen : TBoolean read FDepositoPropioEnOrigen write FDepositoPropioEnOrigen;
//
//  property ClientesEnDestino : TBoolean read FClientesEnDestino write FClientesEnDestino;
//  property ProveedoresEnDestino : TBoolean read FProveedoresEnDestino write FProveedoresEnDestino;
//  property InterdepositoEnDestino : TBoolean read FInterdepositoEnDestino write FInterdepositoEnDestino;
//  property DepositoPropioEnDestino : TBoolean read FDepositoPropioEnDestino write FDepositoPropioEnDestino;
//
//  property DepositoDefaultOrigenID : TObjectID read FDepositoDefaultOrigenID write SetDepositoDefaultOrigenID;
//  property DepositoDefaultDestinoID : TObjectID read FDepositoDefaultDestinoID write SetDepositoDefaultDestinoID;
//  property DepositoDefaultOrigen  : TDeposito read GetDepositoDefaultOrigen ;
//  property DepositoDefaultDestino : TDeposito read GetDepositoDefaultDestino;
//
//  property orden: TEntero read Forden write Forden;
//end;
//
//TtipoDeFormularioMovimientoPosibleDM = class(TSQLDBX_DMObject)
//public
//  class function TableName: string; override;
//  class function ID_FieldName: string; override;
//  const
//    _TipoDeformularioID = 'TipoDeFormularioID';
//    _EstadoOrigenID = 'EstadoOrigenID';
//    _EstadoDestinoID = 'EstadoDestinoID';
//    _ClientesEnOrigen = 'ClientesEnOrigen';
//    _ProveedoresEnOrigen = 'ProveedoresEnOrigen';
//    _InterdepositoEnOrigen = 'InterdepositoEnOrigen';
//    _depositoPropioEnOrigen = 'DepositoPropioEnOrigen';
//    _ClientesEnDestino = 'ClientesEnDestino';
//    _ProveedoresEnDestino = 'ProveedoresEnDestino';
//    _InterdepositoEnDestino = 'InterdepositoEnDestino';
//    _DepositoPropioEnDestino = 'DepositoPropioEnDestino';
//    _DepositoDefaultOrigenID  = 'DepositoDefaultOrigenID';
//    _DepositoDefaultDestinoID = 'DepositoDefaultDestinoID';
//    _Orden = 'Orden';
//  procedure PopulateFields(PDObject: TPDObject); override;
//  procedure PopulateObject(PDObject: TPDObject); override;
//end;
//
//TTipoDeFormularioMovimientoPosibleList = class(TPDList)
//private
//  function GetActual: TTipoDeFormularioMovimientoPosible;
//public
//  constructor CreateAll;
//  constructor CreateByTipoDeFormulario(_TF: TTipoDeFormulario);
//  function CreateNewObject: TPDObject; override;
//  property Actual: TTipoDeFormularioMovimientoPosible read GetActual;
//end;

TTipoDePedidoDeVenta = class(TDescriptibleAbreviado)
  private
    FEsAutonumerado: TBoolean;
    FPrioridad: TEntero;
    FEsExportacion: TBoolean;
    FCodigoSifab: TString;
    FMostrarTotalesEnMail: TBoolean;
    fTipoDeFormularioID: TObjectID;
    fTipoDeFormulario: TPDObject;
    FSeProduceParaStock: TBoolean;
    FResta: TBoolean;
    FEsParaNotaDeCredito: TBoolean;
    FEsParaNotaDeDebito: TBoolean;
    FPermiteEditarDescripcionDelItem: TBoolean;
    FCodigoInternoSifab: TEntero;
    fEnviarAvisoRecepcionCliente: TBoolean;
    fEnviarAvisoRecepcionVendedor: TBoolean;
    fEnviarConfirmacionCliente: TBoolean;
    fEnviarConfirmacionVendedor: TBoolean;
    fEnviarAvisoRecepcionUsuario: TBoolean;
    fEnviarConfirmacionUsuario: TBoolean;
    FEMailA: TString;
    FVerificaCreditoDisponible: TBoolean;
    FEsParaAnticipo: TBoolean;
    FEsParaKit: TBoolean;
    FValidaPreciosDeVenta: TBoolean;
    FUnidadesPorKitDefault: TEntero;
    FFiguraEnTiraDiaria: TBoolean;
    FMostrarAlerta: TBoolean;
    FMensajeDeAlerta: TString;
    procedure setTipoDeFormularioID(const Value: TObjectID);
    function GetTipoDeFormulario: TTipoDeFormulario;
    function GetEsParaNota: TBoolean;
    function GetCodigoInternoSifab: TEntero;
    procedure SetEMailA(const Value: TString);
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure ValidateOnInsert; override;
    procedure ValidateOnUpdate; override;
    procedure validacionDePrioridad;
    procedure validacionKits;
    property Prioridad                       : TEntero read FPrioridad write FPrioridad;
    property TipoDeFormularioID              : TObjectID read fTipoDeFormularioID write setTipoDeFormularioID;
    property TipoDeFormulario                : TTipoDeFormulario read GetTipoDeFormulario;
    property CodigoSifab                     : TString  read FCodigoSifab write FCodigoSifab;
    Property CodigoInternoSifab              : TEntero  read GetCodigoInternoSifab;
    property EsExportacion                   : TBoolean read FEsExportacion write FEsExportacion;
    property MostrarTotalesEnMail : TBoolean read FMostrarTotalesEnMail write FMostrarTotalesEnMail;
    property SeProduceParaStock : TBoolean read FSeProduceParaStock write FSeProduceParaStock;
    property EsParaNotaDeCredito : TBoolean read FEsParaNotaDeCredito write FEsParaNotaDeCredito;
    property EsParaNotaDeDebito : TBoolean read FEsParaNotaDeDebito write FEsParaNotaDeDebito;
    property EsParaNota : TBoolean read GetEsParaNota;
    property EsParaAnticipo : TBoolean read FEsParaAnticipo write FEsParaAnticipo;
    property VerificaCreditoDisponible : TBoolean read FVerificaCreditoDisponible write FVerificaCreditoDisponible;
    property Resta : TBoolean read FResta write FResta;
    property PermiteEditarDescripcionDelItem : TBoolean read FPermiteEditarDescripcionDelItem write FPermiteEditarDescripcionDelItem;
    property EsAutonumerado                  : TBoolean read FEsAutonumerado write FEsAutonumerado;
    Property EnviarAvisoRecepcionCliente  : TBoolean read fEnviarAvisoRecepcionCliente  write fEnviarAvisoRecepcionCliente;
    Property EnviarAvisoRecepcionUsuario  : TBoolean read fEnviarAvisoRecepcionUsuario  write fEnviarAvisoRecepcionUsuario;
    Property EnviarAvisoRecepcionVendedor : TBoolean read fEnviarAvisoRecepcionVendedor write fEnviarAvisoRecepcionVendedor;
    Property EnviarConfirmacionCliente    : TBoolean read fEnviarConfirmacionCliente    write fEnviarConfirmacionCliente;
    Property EnviarConfirmacionUsuario    : TBoolean read fEnviarConfirmacionUsuario    write fEnviarConfirmacionUsuario;
    Property EnviarConfirmacionVendedor   : TBoolean read fEnviarConfirmacionVendedor   write fEnviarConfirmacionVendedor;
    property EMailA                       : TString  read FEMailA write SetEMailA;
    Property EsParaKit                    : TBoolean read FEsParaKit write FEsParaKit;
    Property UnidadesPorKitDefault        : TEntero  read FUnidadesPorKitDefault write FUnidadesPorKitDefault;
    Property ValidaPreciosDeVenta         : TBoolean read FValidaPreciosDeVenta write FValidaPreciosDeVenta;
    Property FiguraEnTiraDiaria           : TBoolean read FFiguraEnTiraDiaria write FFiguraEnTiraDiaria;
    Property MostrarAlerta                : TBoolean read FMostrarAlerta write FMostrarAlerta;
    Property MensajeDeAlerta              : TString  read FMensajeDeAlerta write FMensajeDeAlerta;
end;

TTipoDePedidoDeVentaDM = class(TSQLDBX_DMObject)
  public
    Class Function TableName: string; override;
    Class Function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion          = 'TipoDePedidoDeVenta';
      _Codigo               = 'Codigo';
      _EsAutonumerado       = 'EsAutonumerado';
      _Prioridad            = 'Prioridad';
      _EsExportacion        = 'EsExportacion';
      _VerificaCreditoDisponible = 'VerificaCreditoDisponible';
      _CodigoSifab          = 'CodigoSifab';
      _MostrarTotalesEnMail = 'MostrarTotalesEnMail';
      _TipoDeFormularioID   = 'TipoDeFormularioID';
      _esInactivo           = 'EsInactivo';
      _seProduceParaStock   = 'SeProduceParaStock';
      _EsParaNotaDeCredito  = 'EsParaNotaDeCredito';
      _EsParaNotaDeDebito   = 'EsParaNotaDeDebito';
      _EsParaAnticipo       = 'EsParaAnticipo';
      _Resta                = 'Resta';
      _PermiteEditarDescripcionDelItem = 'PermiteEditarDescripcionDelItem';
      _EnviarAvisoRecepcionCliente = 'EnviarAvisoRecepcionCliente';
      _EnviarAvisoRecepcionUsuario = 'EnviarAvisoRecepcionUsuario';
      _EnviarAvisoRecepcionVendedor    = 'EnviarAvisoRecepcionVendedor';
      _EnviarConfirmacionCliente   = 'EnviarConfirmacionCliente';
      _EnviarConfirmacionUsuario   = 'EnviarConfirmacionUsuario';
      _EnviarConfirmacionVendedor  = 'EnviarConfirmacionVendedor';
      _EmailA                      = 'EmailA';
      _UnidadesPorKitDefault       = 'UnidadesPorKitDefault';
      _EsParaKit                   = 'EsParaKit';
      _ValidaPreciosDeVenta        = 'ValidaPreciosDeVenta';
      _FiguraEnTiraDiaria          = 'FiguraEnTiraDiaria';
      _MostrarAlerta               = 'MostrarAlerta';
      _MensajeDeAlerta             = 'MensajeDeAlerta';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDePedidoDeVentaList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDePedidoDeVenta;
public
  constructor CreateAll(  _SoloActivos: Boolean = False; _Order: String ='' );
  Constructor CreateByExportacion(_SoloActivos: Boolean = False; _ParaNota: Boolean= False);
  Constructor CreateByLocales(_SoloActivos: Boolean = False; _ParaNota: Boolean= False);
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDePedidoDeVenta read GetActual;
end;

TTipoDePresupuestoDeVenta = class(TDescriptibleAbreviado)
  private
    FEsAutonumerado: TBoolean;
    FPrioridad: TEntero;
    FTipoDeFormulario: TPDObject;
    FTipoDeFormularioID: TObjectID;
    Procedure SetTipoDeFormularioID(const Value: TObjectID);
    Function GetTipoDeFormulario: TTipoDeFormulario;
  protected
    Function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    Constructor Create; override;
    Property EsAutonumerado : TBoolean read FEsAutonumerado write FEsAutonumerado;
    Property Prioridad: TEntero read FPrioridad write FPrioridad;
    Property TipoDeFormularioID : TObjectID read FTipoDeFormularioID write SetTipoDeFormularioID;
    Property TipoDeFormulario : TTipoDeFormulario read GetTipoDeFormulario;
end;

TTipoDePresupuestoDeVentaDM = class(TSQLDBX_DMObject)
  public
   class function TableName: string; override;
   class function ID_FieldName: string; override;
   class function EsInactivo_FieldName: string; override;
   const
      _Descripcion        = 'TipoDePresupuestoDeVenta';
      _Codigo             = 'Codigo';
      _EsAutonumerado     = 'EsAutonumerado';
      _Prioridad          = 'Prioridad';
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _EsInactivo         = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDePresupuestoDeVentaList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDePresupuestoDeVenta;
public
  constructor CreateAll( _SoloActivos: Boolean = False) ;
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDePresupuestoDeVenta read GetActual;
end;

TTipoDePedidoDeProduccion = class(TDescriptibleAbreviado)
  private
    FEsAutonumerado: TBoolean;
    FPrioridad: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property EsAutonumerado : TBoolean read FEsAutonumerado write FEsAutonumerado;
    property Prioridad: TEntero read FPrioridad write FPrioridad;
end;

TTipoDePedidoDeProduccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion    = 'TipoDePedidoDeProduccion';
      _Codigo         = 'Codigo';
      _EsAutonumerado = 'EsAutonumerado';
      _Prioridad      = 'Prioridad';
      _EsInactivo     = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDePedidoDeProduccionList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDePedidoDeProduccion;
public
  constructor CreateAll( _SoloActivos: Boolean = False) ;
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDePedidoDeProduccion read GetActual;
end;

TTipoDeVendedor = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TTipoDeVendedorDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'TipoDeVendedor';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeVendedorList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeVendedor;
  public
    constructor CreateAll(_SoloActivos : Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeVendedor read GetActual;
end;

TTipoDeUsuario = class(TDescriptibleAbreviado)
  private
    FOperaciones: TTipoDeUsuarioOperacionPermitidaList;
    fnombreClaseFormulario: String;
    FOperacionesPorFormulario: TTipoDeUsuarioOperacionPermitidaList;
    function GetOperaciones: TTipoDeUsuarioOperacionPermitidaList;
    function GetOperacionesPorFormulario: TTipoDeUsuarioOperacionPermitidaList;
    procedure SetNombreClaseFormulario(const Value: String);
  public
    constructor Create; override;
    destructor destroy; override;
    procedure Delete; Override;
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    Property Operaciones: TTipoDeUsuarioOperacionPermitidaList Read GetOperaciones;
    Property OperacionesPorFormulario: TTipoDeUsuarioOperacionPermitidaList Read GetOperacionesPorFormulario;

    //Temporal para obtener permisos
    Property nombreClaseFormulario: String read fnombreClaseFormulario write SetNombreClaseFormulario;
end;

TTipoDeUsuarioDM = class(TSQLDBX_DMObject)
  public
    Class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    const
      _FOperacionPermitidaDeUsuarioID = 'OperacionPermitidaDeUsuarioID';
      _TipoDeUsuario                  = 'TipoDeUsuario';
      _Codigo                         = 'codigo';
      _EsInactivo                     = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeUsuarioList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TTipoDeUsuario;
  public
    constructor CreateAll( _Soloactivos : Boolean = False );
    constructor CreateByOperacion(_O: TOperacionPermitidaDeUsuario);
    function CreateNewObject: TPDObject; override;
    property Actual: TTipoDeUsuario read GetActual;
end;

TUnidadDeMedida = class(TDescriptibleAbreviado)
  private
    FunidadDeMedidaPlural   : String;
    FEquivalencia           : TReal;
    FUnidadDeEquivalenciaID : TObjectID;
    FUnidadDeEquivalencia   : TPDObject;
    FCodigoInternoSifab     : TEntero;
    FTipoDeUnidadDeMedida   : TPDObject;
    FTipoDeUnidadDeMedidaID : TObjectID;
    FCodigoAfip             : TString;
    FEsDefault              : TBoolean;
    FCodigoTeamplace        : TString;
    FIDTeamplace            : TEntero;
    function GetUnidadDeEquivalencia: TUnidadDeMedida;
    procedure SetUnidadDeEquivalenciaID(const Value: TObjectID);
    procedure SetUnidadDeMedidaPlural(const Value: String);
    function GetUnidadDeMedidaPlural: String;
    function GetCodigoInternoSifab: TEntero;
    procedure SetTipoDeUnidadDeMedidaID(const Value: TObjectID);
    function GetTipoDeUnidadDeMedida: TTipoDeUnidadDeMedida;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    function Save: Boolean; Override;
    property UnidadDeMedidaPlural   : String read GetUnidadDeMedidaPlural write SetUnidadDeMedidaPlural;
    property Equivalencia           : TReal read FEquivalencia write FEquivalencia;
    property UnidadDeEquivalenciaID : TObjectID read FUnidadDeEquivalenciaID write SetUnidadDeEquivalenciaID;
    property UnidadDeEquivalencia   : TUnidadDeMedida read GetUnidadDeEquivalencia;
    property TipoDeUnidadDeMedidaID : TObjectID read FTipoDeUnidadDeMedidaID write SetTipoDeUnidadDeMedidaID;
    property TipoDeUnidadDeMedida   : TTipoDeUnidadDeMedida read GetTipoDeUnidadDeMedida;
    property CodigoInternoSifab     : TEntero read GetCodigoInternoSifab;
    property CodigoAfip             : TString read FCodigoAfip Write FCodigoAfip;
    property CodigoTeamplace        : TString read FCodigoTeamplace Write FCodigoTeamplace;
    property IDTeamplace            : TEntero read GetIDTeamplace;
    property EsDefault              : TBoolean read FEsDefault Write FEsDefault;
end;

TUnidadDeMedidaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion            = 'UnidadDeMedida';
      _UnidadDeMedidaPlural   = 'UnidadDeMedidaPlural';
      _Codigo                 = 'Codigo';
      _Equivalencia           = 'Equivalencia';
      _UnidadDeEquivalenciaID = 'UnidadDeEquivalenciaID';
      _TipoDeUnidadDeMedidaID = 'TipoDeUnidadDeMedidaID';
      _EsInactivo             = 'EsInactivo';
      _CodigoAfip             = 'CodigoAfip';
      _CodigoTeamplace        = 'CodigoTeamplace';
      _EsDefault              = 'EsDefault';

      //Alias de la base de datos de Teamplace
      _TeamplaceTableName     = 'BSUnidad';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'UnidadID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TUnidadDeMedidaList = class(TDescriptibleAbreviadoList)
private
  function GetunidadDeMedida: TUnidadDeMedida;
public
  constructor CreateAll(_SoloActivos : Boolean = False);
  constructor CreateByTipo(_Tipo : TTipoDeUnidadDeMedida; _SoloActivos : Boolean = False);
  constructor CreateByTipoDefault(_Tipo : TTipoDeUnidadDeMedida; _SoloActivos : Boolean = False);
  constructor CreateByCodigoLikeAndTipo(_Cod: String; _Tipo: TTipoDeUnidadDeMedida; _SoloActivos : Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TUnidadDeMedida read GetunidadDeMedida;
end;

TTipoDeUnidadDeMedida = class(TDescriptible)
public
  constructor Create; override;
end;

TTipoDeUnidadDeMedidaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'TipoDeUnidadDeMedida';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeUnidadDeMedidaList = class(TDescriptibleList)
private
  function GetActual : TTipoDeUnidadDeMedida;
public
  constructor CreateAll(_SoloActivos:Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual : TTipoDeUnidadDeMedida read GetActual;
end;

TUsuario = class(TPDObject)
  private
    Flogin: TString;
    FpasswordEncriptado: TString;
    Fapellido: TString;
    Fnombre: TString;
    FmacAddress: TString;
    FvalidarMacAddress: TBoolean;
    FSector: TPDObject;
    Fperfil: TPDObject;
    FSectorID: TObjectID;
    FperfilID: TObjectID;
    FColorFondoFoco: TEntero;
    FColorLetraFoco: TEntero;
    FColorDeFondo: TEntero;
    Fpapeltapiz: TString;
    FAccesosDirectos: TPDList;
    FTipoDeUsuario: TPDObject;
    FTipoDeUSuarioID: TObjectID;
    FEsInactivo: TBoolean;
    FEsVendedor: TBoolean;
    FvendedorID: TObjectID;
    Fvendedor: TPDObject;
    FAbrirAutomaticamenteArchivoExportado: TBoolean;
    Femail: TString;
    FPasosDeFabricacion: TPDList;
    FSkin: String;
    FEstiloGrillas: String;
    FEsAdministradorDelSistema: TBoolean;
    function getNombreCompleto: TString;
    function GetSector: TSector;
    procedure setSectorID(const Value: TObjectID);
    function Getperfil: TPerfil;
    procedure SetperfilID(const Value: TObjectID);
    function GetAccesosDirectos: TAccesoDirectoList;
    function GetTipoDeUsuario: TTipoDeUsuario;
    procedure SetTipoDeUsuarioID(const Value: TObjectID);
    function GetVendedor: TVendedor;
    procedure SetVendedorID(const Value: TObjectID);
    procedure SetAbrirAutomaticamenteArchivoExportado(const Value: TBoolean);
    function GetSkin: String;
    procedure Setemail(const Value: TString);
    function GetPasosDeFabricacion: TPasoDeFabricacionList;
    function GetEsAdministradorDelSistema: TBoolean;
  public
    constructor Create; override;
    function CambiarClave(const _claveActual, _ClaveNueva, _Confirmacion: string): Boolean;
    procedure RecargarTipoDeUsuario;
    procedure RecargarAccesosdirectos;
    property login: TString read Flogin write Flogin;
    property passwordEncriptado: TString read FpasswordEncriptado write FpasswordEncriptado;
    property apellido: TString read Fapellido write Fapellido;
    property nombre: TString read Fnombre write Fnombre;
    property Email: TString read Femail write Setemail;
    property macAddress: TString read FmacAddress write FmacAddress;
    property validarMacAddress : TBoolean read FvalidarMacAddress write FvalidarMacAddress;
    property nombreCompleto: TString read getNombreCompleto;
    property SectorID: TObjectID read FSectorID write setSectorID;
    property Sector: TSector read GetSector;
    property perfilID: TObjectID read FperfilID write SetperfilID;
    property perfil: TPerfil read Getperfil;
    property Skin: String read GetSkin write FSkin;
    property EstiloGrillas: String read FEstiloGrillas write FEstiloGrillas;
    property ColorFondoFoco: TEntero read FColorFondoFoco Write FColorFondoFoco;
    property ColorLetraFoco: TEntero read FColorLetraFoco Write FColorLetraFoco;
    property ColorDeFondo  : TEntero read FColorDeFondo   Write FColorDeFondo;
    property PapelTapiz: TString Read Fpapeltapiz write Fpapeltapiz;
    property AccesosDirectos: TAccesoDirectoList read GetAccesosDirectos;

    property TipoDeUsuarioID: TObjectID Read FTipoDeUSuarioID Write SetTipoDeUsuarioID;
    property TipoDeUsuario: TTipoDeUsuario Read GetTipoDeUsuario;
    property EsInactivo: TBoolean Read FEsInactivo write FEsInactivo;

    property EsVendedor: TBoolean Read FEsVendedor write FEsVendedor;
    Property vendedorID: TObjectID Read FvendedorID Write SetVendedorID;
    property vendedor: TVendedor Read GetVendedor;
    property AbrirAutomaticamenteArchivoExportado : TBoolean Read FAbrirAutomaticamenteArchivoExportado write SetAbrirAutomaticamenteArchivoExportado;
    property PasosDeFabricacion: TPasoDeFabricacionList read GetPasosDeFabricacion;
    property EsAdministradorDelSistema : TBoolean Read GetEsAdministradorDelSistema;
end;

TUsuarioDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    Const
      _ValidarMacAddress  = 'ValidarMacAddress';
      _MacAddress         = 'MacAddress';
      _Login              = 'Login';
      _Nombre             = 'Nombre';
      _Apellido           = 'Apellido';
      _Email              = 'Email';
      _PasswordEncriptado = 'PasswordEncriptado';
      _SectorID           = 'SectorID';
      _PerfilID           = 'PerfilID';
      _PapelTapiz         = 'Papeltapiz';
      _EstiloGrillas      = 'EstiloGrillas';
      _TipoDeUsuarioID    = 'TipoDeUsuarioID';
      _EsInactivo         = 'EsInactivo';
      _ColorFondoFoco     = 'ColorFondoFoco';
      _ColorLetraFoco     = 'ColorLetraFoco';
      _ColorDeFondo       = 'ColorDeFondo';
      _Skin               = 'Skin';
      _EsVendedor         = 'EsVendedor';
      _VendedorID         = 'VendedorID';
      _AbrirAutomaticamenteArchivoExportado = 'AbrirAutomaticamenteArchivoExportado';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TUsuarioList = class(TPDList)
  private
    function GetUsuario: TUsuario;
  public
    constructor CreateAll(_SoloActivos : Boolean = False);
    constructor CreateByID(_ID: TObjectID);
    constructor CreateByLogin(_Log: string);
    constructor CreateByUserAndPass( _User, _Pass: String );
    function CreateNewObject: TPDObject; override;
    function FindByLogin(L: string): Boolean;
    property Actual: TUsuario read GetUsuario;
end;

TSector = class(TDescriptible)
  private
    FesLineaDeProduccion: TBoolean;
    FCuentasContables   : TSectorCuentaContableList;
    FDepositos          : TDepositoList;
    function GetCuentasContables: TSectorCuentaContableList;
    function GetDepositos: TDepositoList;
  public
    constructor Create; override;
    property Depositos: TDepositoList read GetDepositos;
    property EsLineaDeProduccion : TBoolean read FesLineaDeProduccion write FesLineaDeProduccion;
    property CuentasContables: TSectorCuentaContableList read GetCuentasContables;
end;

TSectorDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _Descripcion         = 'Sector';
    _EsLineaDeProduccion = 'EsLineaDeProduccion';
    _EsInactivo          = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TSectorList = class(TDescriptibleList)
private
  function GetSector: TSector;
public
  constructor CreateAll; virtual;
//  constructor CreateByDeposito(_Deposito: TDeposito);
//  constructor CreateByDepositoNoLinea(_Deposito: TDeposito);
  constructor CreateBySectorLike(_Sector: String);
  function CreateNewObject: TPDObject; override;
  property Actual: TSector read GetSector;
end;


TSectorCuentaContable = class(TPDObject)
  private
    FSectorID         : TObjectID;
    FSector           : TPDObject;
    FCuentaContableID : TObjectID;
    FCuentaContable   : TPDObject;
    FCentroDeCostoID  : TObjectID;
    FCentroDeCosto    : TPDObject;
    procedure SetCuentaContableID(Value : TObjectID);
    procedure SetSectorID(Value : TObjectID);
    procedure SetCentroDeCostoID(const Value: TObjectID);
    function GetCuentaContable : TCuentaContable;
    function GetSector : TSector;
    function GetCentroDeCosto: TCentroDeCosto;
  public
    constructor Create; override;
    property CuentaContableID : TObjectID read FCuentaContableID write SetCuentaContableID;
    property CuentaContable : TCuentaContable read GetCuentaContable;
    property CentroDeCostoID : TObjectID read FCentroDeCostoID write SetCentroDeCostoID;
    property CentroDeCosto   : TCentroDeCosto read GetCentroDeCosto;
    property SectorID : TObjectID read FSectorID write SetSectorID;
    property Sector : TSector read GetSector;

end;

TSectorCuentaContableDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _CuentaContableID = 'CuentaContableID';
    _CentroDeCostoID  = 'CentroDeCostoID';
    _SectorID         = 'SectorID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TSectorCuentaContableList = class(TPDList)
private
  function GetActual : TSectorCuentaContable;
public
  constructor CreateAll;
  constructor CreateBySector ( _S : TSector );
  function CreateNewObject: TPDObject; override;
  property Actual : TSectorCuentaContable read GetActual;
  function FindCentroDeCostoAndCuenta( _CentroID : TObjectID ; _CuentaID : TObjectID ): Boolean;
end;

TServicio = class(TProductoDetalle)
  private
    FTraducciones       : TPDList;
    FEsRuteable         : TBoolean;
    FPrecios            : TServicioPrecioList;
    FConceptoARemitir   : TString;
    FEsConceptoARemitir : TBoolean;
    FImpuestosActivos   : TBoolean;
    FImpuestos          : TServicioImpuestoList;
    FEstaEnSifab        : TBoolean;
    FCodigoInternoSifab : TEntero;
    FConceptoContableFacturacionID: TObjectID;
    FConceptoContableFacturacion: TPDObject;
    FEsParaVentas: TBoolean;
    FEsParaNota: TBoolean;
    FPermiteEditarDescripcion: TBoolean;
    FIDTeamplace: TEntero;
    FDescripcionParaExportacion: TString;
    function GetTraducciones: TServicioTraduccionList;
    function GetCodigoSifab: TString;
    function GetPrecios: TServicioPrecioList;
    function GetImpuestos: TServicioImpuestoList;
    function GetEstaEnSifab: TBoolean;
    function GetCodigoInternoSifab: TEntero;
    procedure SetConceptoContableFacturacionID(const Value: TObjectID);
    function GetConceptoContableFacturacion: TCuentaContable;
    function GetIDTeamplace: TEntero;
    function GetDescripcionParaExportacion: TString;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
    function GetEsStockeable: TBoolean; override;
    procedure AsignarIDAlProducto; override;
    function GetTipoDeProducto: String; Override;
  public
    constructor Create; override;
    Class Function GuardarEnSifab (_S : TServicio) : Boolean;
    function Save: Boolean; override;
    function PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda ): TReal;
    property Traducciones: TServicioTraduccionList read GetTraducciones;
    property EsRuteable: TBoolean read FEsRuteable Write FEsRuteable;
    property CodigoSifab: TString read GetCodigoSifab;
    property CodigoInternoSifab: TEntero read GetCodigoInternoSifab;
    property Precios : TServicioPrecioList read GetPrecios;
    property Impuestos : TServicioImpuestoList read GetImpuestos;
    property ConceptoARemitir : TString read FConceptoARemitir Write FConceptoARemitir;
    property EsConceptoARemitir : TBoolean read FEsConceptoARemitir write FEsConceptoARemitir;
    property ImpuestosActivos : TBoolean read FImpuestosActivos write FImpuestosActivos;
    Property EstaEnSifab : TBoolean Read GetEstaEnSifab;
    Property ConceptoContableFacturacionID : TObjectID Read FConceptoContableFacturacionID write SetConceptoContableFacturacionID;
    property ConceptoContableFacturacion   : TCuentaContable read GetConceptoContableFacturacion;
    property EsParaNota : TBoolean read FEsParaNota write FEsParaNota;
    property EsParaVentas : TBoolean read FEsParaVentas write FEsParaVentas;
    property PermiteEditarDescripcion : TBoolean read FPermiteEditarDescripcion write FPermiteEditarDescripcion;
    Property DescripcionParaExportacion : TString read GetDescripcionParaExportacion write FDescripcionParaExportacion;

    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_S : TServicio) : Boolean;
end;

TServicioDM = class(TSQLDBX_DMObject)
  Strict Protected
    class function ConexionBaseDeDatos: TConnection; override;
  public
    class function ID_FieldName: string; override;
    class function TableName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo             = 'Codigo';
      _Descripcion        = 'Servicio';
      _ProductoID         = 'ProductoID';
      _UnidadDeMedidaID   = 'UnidadDeMedidaID';
      _MonedaID           = 'MonedaID';
      _Precio             = 'Precio';
      _EsInactivo         = 'EsInactivo';
      _EsRuteable         = 'EsRuteable';
      _EsConceptoARemitir = 'EsConceptoARemitir';
      _ConceptoARemitir   = 'ConceptoARemitir';
      _ImpuestosActivos   = 'ImpuestosActivos';
      _ConceptoContableFacturacionID   = 'ConceptoContableFacturacionID';
      _EsParaNota                      = 'EsParaNota';
      _EsParaVentas                    = 'EsParaVentas';
      _PermiteEditarDescripcion        = 'PermiteEditarDescripcion';

      //Alias de la base de datos de Teamplace
      _TeamplaceTableName     = 'BSProducto';
      _TeamplaceCodigo        = 'Codigo';
      _TeamplaceID            = 'ProductoID';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TServicioList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TServicio;
public
  constructor CreateAll(_SoloActivos: Boolean = False );
  constructor CreateAllParaNota(_SoloActivos: Boolean = False );
  constructor CreateAllParaVentas(_SoloActivos: Boolean = False );
  function CreateNewObject: TPDObject; override;
  property Actual: TServicio read GetActual;
end;

TServicioPrecio = class(TPDObject)
 private
   FMoneda : TPDObject;
   FMonedaID : TObjectID;
   FPrecio : TReal;
   FListaDePrecio : TPDObject;
   FListaDePrecioID : TObjectID;
   Fservicio : TPDObject;
   FservicioID : TObjectID;
   fServicioDescripcion: TString;
   fServicioCodigo: TString;
   fListaDePrecioDescripcion: TString;
   fListaDePrecioCodigo: TString;
   fMonedaDescripcion: TString;
   fMonedaCodigo: TString;
   FPermiteEditarDescripcion: TBoolean;
   function GetServicio : TServicio;
   procedure SetListaDePrecioID(Value : TObjectID);
   function GetListaDePrecio : TListaDePrecio;
   procedure SetMonedaID(Value : TObjectID);
   function GetMoneda : TMoneda;
   procedure SetServicioID(Value: TObjectID);
   function GetPrecio: TReal;
   procedure SetPrecio(const Value: TReal);
 public
   constructor Create; override;
   function Save: Boolean; override;

   property ServicioID : TObjectID read FservicioID write SetservicioID;
   property Servicio : TServicio read GetServicio;
   property ListaDePrecioID : TObjectID read FListaDePrecioID write SetListaDePrecioID; // es el padre
   property ListaDePrecio : TListaDePrecio read GetListaDePrecio;
   property Precio : TReal read GetPrecio write SetPrecio;
   property MonedaID : TObjectID read FMonedaID write SetMonedaID;
   property Moneda : TMoneda read GetMoneda;
   // del createCompuesto
   property ServicioCodigo           : TString read fServicioCodigo;
   property servicioDescripcion      : TString read fServicioDescripcion;
   property ListaDePrecioCodigo      : TString read fListaDePrecioCodigo;
   property ListaDePrecioDescripcion : TString read fListaDePrecioDescripcion;
   property MonedaCodigo             : TString read fMonedaCodigo;
   property MonedaDescripcion        : TString read fMonedaDescripcion;
end;

TServicioPrecioDM = class(TSQLDBX_DMObject)
strict protected
  class function CreateCompuesto(_Parte: Integer=0): String; override;
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName : string; override;
  class function ID_FieldName : string; override;
  class function EmpresaDeSistemaID_FieldName: string; override;
  const
    _ServicioID      = 'ServicioID';
    _ListaDePrecioID = 'ListaDePrecioID';
    _Precio          = 'Precio';
    _MonedaID        = 'MonedaID';

  // Del CreateCompuesto
    _CCServicioCodigo           = 'CodigoServicio';
    _CCServicioDescripcion      = 'DescripcionServicio';
    _CCListaDePrecioDescripcion = 'DescripcionLista';
    _CCListaDePrecioCodigo      = 'CodigoLista';
    _CCMonedaCodigo             = 'MonedaCodigo';
    _CCMonedaDescripcion        = 'MonedaDescripcion';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TServicioPrecioList = class(TPDList)
private
  function GetActual : TServicioPrecio;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByListaDePrecio( _LP : TListaDePrecio ) ;
  constructor CreateByServicio( _S : TServicio ) ;
  constructor CreateByListaDePrecioAndServicio( _LP : TListaDePrecio; _S : TServicio ) ;
  function CreateNewObject: TPDObject; override;
  function FindServicio( _S: TServicio ): Boolean;
  function FindCodigoServicio( _CS: String ): Boolean;
  property Actual : TServicioPrecio read GetActual;
end;

TServicioTraduccion = class(TTraduccion)
private
  Fservicio: TPDObject;
  FservicioID: TObjectID;
  procedure SetServicioID(Value: TObjectID);
  function GetServicio: TServicio;
public
  constructor Create; override;
  property servicioID: TObjectID read FservicioID write SetServicioID;
  property servicio: TServicio read GetServicio;
end;

TServicioTraduccionDM = class(TSQLDBX_DMObject)
strict protected
  class function ConexionBaseDeDatos: TConnection; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _ServicioID = 'servicioID';
    _Descripcion = 'servicio';
    _resourceLanguageID = 'resourceLanguageID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TServicioTraduccionList = class(TTraduccionList)
private
  function GetActual: TServicioTraduccion;
public
  constructor CreateAll;
  constructor CreateEmpty;
  constructor CreateByServicio(_S: TServicio);
  function CreateNewObject: TPDObject; override;
  property Actual: TServicioTraduccion read GetActual;
end;

TServicioImpuesto = class(TPDObject)
  private
    FServicioID : TObjectID;
    FServicio : TPDObject;
    FImpuestoConceptoID : TObjectID;
    FImpuestoConcepto : TPDObject;
    function GetImpuestoConcepto : TImpuestoConcepto;
    procedure SetImpuestoConceptoID(Value : TObjectID);
    function GetServicio : TServicio;
    procedure SetServicioID(Value : TObjectID);
  public
    constructor Create; override;
    property ImpuestoConceptoID : TObjectID read FImpuestoConceptoID write SetImpuestoConceptoID;
    property ImpuestoConcepto : TImpuestoConcepto read GetImpuestoConcepto;
    property ServicioID : TObjectID read FServicioID write SetServicioID;
    property Servicio : TServicio read GetServicio;
end;

TServicioImpuestoDM = class(TSQLDBX_DMObject)
  Strict Protected
    class function ConexionBaseDeDatos: TConnection; override;
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _ImpuestoConceptoID = 'ImpuestoConceptoID';
    _ServicioID         = 'ServicioID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TServicioImpuestoList = class(TPDList)
private
  function GetActual : TServicioImpuesto;
public
  constructor CreateAll;
  constructor CreateByServicio( _S : TServicio ) ;
  function CreateNewObject: TPDObject; override;
  function FindPredeterminadoProductos: Boolean;
  property Actual : TServicioImpuesto read GetActual;
end;

TTipoDeFlexibilidad = class(TDescriptibleAbreviado)
  private
    FNoValidarFecha: TBoolean;
    FPlazoMinimoEntregaHabilitado: TBoolean;
    FPlazoMinimoEntrega: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property NoValidarFecha : TBoolean read FNoValidarFecha write FNoValidarFecha;
    property PlazoMinimoEntregaHabilitado : TBoolean read FPlazoMinimoEntregaHabilitado write FPlazoMinimoEntregaHabilitado;
    property PlazoMinimoEntrega : TEntero read FPlazoMinimoEntrega write FPlazoMinimoEntrega;
end;

TTipoDeFlexibilidadDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  const
    _Descripcion                  = 'TipoDeFlexibilidad';
    _Codigo                       = 'Codigo';
    _NoValidarFecha               = 'NoValidarFecha';
    _PlazoMinimoEntregaHabilitado = 'PlazoMinimoEntregaHabilitado';
    _PlazoMinimoEntrega           = 'PlazoMinimoEntrega';
    _EsInactivo                   = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeFlexibilidadList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDeFlexibilidad;
public
  constructor CreateAll(_SoloActivos : Boolean = False );
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDeFlexibilidad read GetActual;
end;

{ ///////////////  PDLists ///////////////// }

TEmpresa = class(TAbstractEmpresa)
public
  Class Procedure FichaDeCliente(_E: TEmpresa; _ClntdtstMaster: TClientDataSet);
  procedure Delete; override;
  Function Save: Boolean; override;
  // CLIENTE
  property ActividadID;
  property Actividad;
  property CategoriaDeCliente;
  property CategoriaDeClienteID;
  property CondicionDeVenta;
  property CondicionDeVentaID;
  property NivelDeServicioDeClienteID;
  property NivelDeServicioDeCliente;
  property ToleranciaDePagoEnDias;
  property LimiteDeCredito;
  property EvaluarCredito;
  property Alertar;
  property DescuentoEspecial;
  property Flete;
  property FleteID;
  property GrupoDeVendedor;
  property GrupoDeVendedorID;
  property GrupoDeVendedorInicial;
  property VigenciaHastaGrupoDeVendedorInicial;
  property ZonaDeCliente;
  property ZonaDeClienteID;
  property RankingCrediticio;
  property RankingCrediticioID;
  property DireccionDeEntrega;
  property DireccionDeEntregaID;
  property Marcas;
  property MonedaDefault;
  property MonedaDefaultID;
  property MonedaDeLimiteDeCredito;
  property MonedaDeLimiteDeCreditoID;
  property EntregaTotal;
  property ImpuestosActivos;
  property PorcentajeDeTolerancia;
  property CodigoSistemaAnterior;
  property ListaDePrecioID;
  property ListaDePrecio;
  property HorarioDeEntrega;
  property HorarioDeReparto;
  property CobradorID;
  property Cobrador;
  property EnActividad;
  property ProgramarCalidad;
  // PROVEEDOR
  property DireccionDeRetiro;
  property DireccionDeRetiroID;
  property CategoriaDeProveedor;
  property CategoriaDeProveedorID;
  property CondicionDeCompra;
  property CondicionDeCompraID;
  property CondiciondeCobranza;
  property CondiciondeCobranzaID;
  property NumeroDeIngresosBrutos;
  property ValoresALaOrdenDe;
  property HorarioDeRetiro;
  Function EsClienteAsociadoATribeca: Boolean;
  // Teamplace
  Class Function GuardarEnTeamPlace(_E : TEmpresa) : Boolean;
  Function LaCondicionDeVentaEstaEnTeamplace : Boolean;
  Class Function GuardarCondicionDeVentaEnTeamPlace(_E : TEmpresa) : Boolean;
end;

TEmpresaList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEmpresa;
public
  Function WhereForVendedor: String;
  constructor CreateAll( _SoloActivos: Boolean = False);
  constructor CreateByTipoEmpresa(_Cliente, _Proveedor, _EmpresaPropia: Boolean);
  constructor CreateByTipoEmpresaYCodigoLike(_Cliente, _Proveedor, _EmpresaPropia: Boolean; _cod: string);
  constructor CreateByCuitYIDDiferente(_Cuit: string; _ID: TObjectID; _soloActivos: Boolean = False);
  constructor CreateFletes;
  constructor CreateFletesByCodigoLike(_C: string);
  constructor CreateFletesByDescripcionLike(_D: string);
  constructor CreateBancos;
  constructor CreateByFiltros(_D, _H: String; _UsaFiltro, _esFlete, _esCliente, _esProveedor, _esBanco: Boolean);
  constructor CreateByFiltroPersonalizado(_condicion: string);
  constructor CreateByCodigoDeBancoYIDDiferente(_CodBanco: string; _ID: TObjectID);
  constructor CreateByGrupoDeVendedores(_g: TGrupoDeVendedor);
  constructor CreateByZonaDeCliente(_Z: TZonaDeCliente);
  constructor CreateByLocalidad(_L: TLocalidad);
  constructor CreateByJurisdiccionDeIngresosBrutos(_J: TJurisdiccionIngresosBrutos);
  Constructor CreateByCunio(_C : TCunio; _SoloActivos: Boolean = False);
  Constructor CreateByDesarrollo(_D : TDesarrollo; _SoloActivos: Boolean = False);

  function CreateNewObject: TPDObject; override;
  property Actual: TEmpresa read GetActual;
end;

TCliente = class(TEmpresa)
public
  constructor Create; override;
  Procedure InformarCredito;
  property CategoriaDeCliente;
  property CategoriaDeClienteID;
  property CategoriaDeGanancias;
  property CategoriaDeGananciasID;
  property CondicionDeVenta;
  property CondicionDeVentaID;
  property NivelDeServicioDeClienteID;
  property NivelDeServicioDeCliente;
  property ToleranciaDePagoEnDias;
  property LimiteDeCredito;
  property EvaluarCredito;
  property Alertar;
  property DescuentoEspecial;
  property Flete;
  property FleteID;
  property GrupoDeVendedor;
  property GrupoDeVendedorID;
  property GrupoDeVendedorInicial;
  property VigenciaHastaGrupoDeVendedorInicial;
  property HorarioDeReparto;
  property HorarioDeEntrega;
  property ZonaDeCliente;
  property ZonaDeClienteID;
  property RankingCrediticio;
  property RankingCrediticioID;
  property MonedaDefault;
  property MonedaDefaultID;
  property MonedaDeLimiteDeCredito;
  property MonedaDeLimiteDeCreditoID;
  property DireccionDeEntrega;
  property DireccionDeEntregaID;
  property EntregaTotal;
  property ImpuestosActivos;
  property PorcentajeDeTolerancia;
  property ListaDePrecioID;
  property ListaDePrecio;
  property CodigoSistemaAnterior;
  property CobradorID;
  property Cobrador;
  property Marcas;

end;

TClienteList = Class(TDescriptibleAbreviadoList)
Private
  Function Getcliente: TCliente;
  Function WhereForVendedor: String;
Public
  constructor CreateAll(_SoloActivos: Boolean = False; _FiltrarPorVendedor: Boolean = False; _Locales: Boolean = True; _Exportacion: Boolean = True); Reintroduce; Overload;
  Constructor CreateByMarca(_M: TMarca; _FiltrarPorVendedor: Boolean = False; _SoloActivos: Boolean = False );
  Constructor CreateByMarcaDefault(_M: TMarca);
  Constructor CreateByNivelDeServicio(_NS: TNivelDeServicioDeCliente; _SoloActivos: Boolean = False);

  Constructor CreateByPropertyLike(_Like, _PropertyName: String; _FiltrarPorVendedor: Boolean = False; _SoloActivos: Boolean = False);Reintroduce; Overload;
  Constructor CreateByCodigoLikeAndMarca(_C: String; _M: TMarca; _FiltrarPorVendedor: Boolean = False; _SoloActivos: Boolean = False);

  Constructor CreateByDepositoVirtualDeStock(_D: TDeposito);
  Function CreateNewObject: TPDObject; override;
  Property Actual: TCliente read Getcliente;
  Function FindCodigoSifab(_cod: Integer): Boolean;

  //Para la app mobile
  //Constructor CreateByCodigoLike(_Cod: String; _FiltrarPorVendedor: Boolean = False; _SoloActivos: Boolean = False; _Locales: Boolean = True; _Exportacion: Boolean = True); Reintroduce; Overload;
  Constructor CreateByCodigoLike(_Cod: String; _VendedorID: TObjectID = NullID; _SoloActivos: Boolean = False; _Locales: Boolean = True; _Exportacion: Boolean = True; _StartRow : Integer = 0 ; _Rows : Integer = 0); Reintroduce; Overload;
  Constructor CreateByDescripcionLike(_Des: String; _VendedorID: TObjectID = NullID; _SoloActivos: Boolean = False; _Locales: Boolean = True; _Exportacion: Boolean = True; _StartRow : Integer = 0 ; _Rows : Integer = 0); Reintroduce; Overload;
  Constructor CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _VendedorID: TObjectID = NullID; _SoloActivos: Boolean = False; _Locales: Boolean = True; _Exportacion: Boolean = True; _StartRow : Integer = 0 ; _Rows : Integer = 0); Reintroduce; Overload;
  constructor CreateAll(_SoloActivos: Boolean = False; _VendedorID: TObjectID = NullID; _Locales: Boolean = True; _Exportacion: Boolean = True; _StartRow : Integer = 0 ; _Rows : Integer = 0); Reintroduce; Overload;
end;

TEmpresaAsociada = class(TPDObject)
  private
    Fempresa: TPDObject;
    FempresaID: TObjectID;
    FEmpresaAsociada: TPDObject;
    FEmpresaAsociadaID: TObjectID;
    FCCCodigoEmpresaAsociada: TString;
    FCCEmpresaAsociadaConfeccionaPedido: TBoolean;
    FCCEmpresaAsociadaGrupoDeVendedorID: TObjectID;
    FCCEmpresaAsociadaGrupoDeVendedorInicialID: TObjectID;
    FCCDescripcionEmpresaAsociada: TString;
    FCCEmpresaAsociadaesInactiva: TBoolean;
    FCCCuitEmpresaAsociada: TString;
    FCCEmpresaAsociadaGrupoDeVendedor: Tstring;
    FCCEmpresaAsociadaGrupoDeVendedorCodigo:Tstring;
    FCCEmpresaAsociadaGrupoDeVendedorInicial: Tstring;
    FCCEmpresaAsociadaGrupoDeVendedorInicialCodigo : TString;
    function Getempresa: TEmpresa;
    procedure SetempresaID(Value: TObjectID);
    procedure SetEmpresaAsociadaID(const Value: TObjectID);
    function GetEmpresaAsociada: TEmpresa;
    function GetCCCodigoEmpresaAsociada: TString;
    function GetCCCuitEmpresaAsociada: TString;
    function GetCCDescripcionEmpresaAsociada: TString;
    function GetCCEmpresaAsociadaConfeccionaPedido: TBoolean;
    function GetCCEmpresaAsociadaesInactiva: TBoolean;
    function GetCCEmpresaAsociadaGrupoDeVendedor: Tstring;
    function GetCCEmpresaAsociadaGrupoDeVendedorID: TObjectID;
    function GetCCEmpresaAsociadaGrupoDeVendedorInicial: Tstring;
    function GetCCEmpresaAsociadaGrupoDeVendedorInicialID: TObjectID;
    function GetCCEmpresaAsociadaGrupoDeVendedorCodigo: Tstring;
    function GetCCEmpresaAsociadaGrupoDeVendedorInicialCodigo: Tstring;
  public
    constructor Create; override;
    property Empresa                                       : TEmpresa read Getempresa;
    property EmpresaID                                     : TObjectID read FempresaID write SetempresaID;
    property EmpresaAsociadaID                             : TObjectID read FEmpresaAsociadaID write SetEmpresaAsociadaID;
    property EmpresaAsociada                               : TEmpresa read GetEmpresaAsociada;
    property CCDescripcionEmpresaAsociada                  : TString    read GetCCDescripcionEmpresaAsociada;
    property CCCodigoEmpresaAsociada                       : TString    read GetCCCodigoEmpresaAsociada;
    property CCCuitEmpresaAsociada                         : TString    read GetCCCuitEmpresaAsociada;
    property CCEmpresaAsociadaesInactiva                   : TBoolean   read GetCCEmpresaAsociadaesInactiva;
    property CCEmpresaAsociadaConfeccionaPedido            : TBoolean   read GetCCEmpresaAsociadaConfeccionaPedido;
    property CCEmpresaAsociadaGrupoDeVendedorID            : TObjectID read GetCCEmpresaAsociadaGrupoDeVendedorID;
    property CCEmpresaAsociadaGrupoDeVendedor              : Tstring    read GetCCEmpresaAsociadaGrupoDeVendedor;
    property CCEmpresaAsociadaGrupoDeVendedorCodigo        : Tstring    read GetCCEmpresaAsociadaGrupoDeVendedorCodigo;
    property CCEmpresaAsociadaGrupoDeVendedorInicialID     : TObjectID read GetCCEmpresaAsociadaGrupoDeVendedorInicialID;
    property CCEmpresaAsociadaGrupoDeVendedorInicial       : Tstring    read GetCCEmpresaAsociadaGrupoDeVendedorInicial;
    property CCEmpresaAsociadaGrupoDeVendedorInicialCodigi : Tstring    read GetCCEmpresaAsociadaGrupoDeVendedorInicialCodigo;
end;

TEmpresaAsociadaDM = class(TSQLDBX_DMObject)
strict protected
  class function CreateCompuesto(_Parte: Integer=0): String; override;
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
  _AsociadaID                     = 'AsociadaID';
  _EmpresaID                      = 'EmpresaID';
  // del createcompuesto
  _CCDescripcionEmpresa           = 'Empresa';
  _CCCodigoEmpresa                = 'Codigo';
  _CCCuitEmpresa                  = 'Cuit';
  _CCEsInactiva                   = 'EsInactivo';
  _CCConfeccionaPedido            = 'ConfeccionaPedido';
  _CCGrupoDeVendedorID            = 'GrupoDeVendedorID';
  _CCGrupoDeVendedor              = 'GrupoDeVendedor';
  _CCGrupoDeVendedorCodigo        = 'GrupoDeVendedorCodigo';
  _CCGrupoDeVendedorInicialID     = 'GrupoDeVendedorInicialID';
  _CCGrupoDeVendedorInicial       = 'GrupoDeVendedorInicial';
  _CCGrupoDeVendedorInicialCodigo = 'GrupoDeVendedorInicialCodigo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEmpresaAsociadaList = class(TPDList)
private
  function GetActual: TEmpresaAsociada;
public
  constructor CreateAll( _SoloActivos: Boolean= False);
  constructor CreateByEmpresa(_Emp: TAbstractEmpresa; _SoloActivos : Boolean = False);
  constructor CreateByEmpresaAndCodigoLike(_Emp: TAbstractEmpresa; _Codigo: String; _SoloActivos : Boolean = False);
  constructor CreateByTribeca(_Emp: TAbstractEmpresa; _SoloActivos : Boolean = False);

  function CreateNewObject: TPDObject; override;
  function FindCodigo(_Codigo: String): Boolean;
  property Actual: TEmpresaAsociada read GetActual;
end;

{TEstadoDeAjusteDeStock}
TEstadoDeAjusteDeStock = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TEstadoDeAjusteDeStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'codigo';
      _Descripcion = 'EstadoAjusteDeStock';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeAjusteDeStockList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDeAjusteDeStock;
public
  constructor CreateAll( _soloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDeAjusteDeStock read GetActual;
end;

{TEstadoDeCierreDeStock}
TEstadoDeCierreDeStock = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TEstadoDeCierreDeStockDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'codigo';
      _Descripcion = 'EstadoCierreDeStock';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeCierreDeStockList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDeCierreDeStock;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDeCierreDeStock read GetActual;
end;



TEstadoDeBanco = class(TDescriptibleAbreviado)
private
  FtextoAdvertencia: TString;
  Frechazar: TBoolean;
  Fadvertir: TBoolean;
  function GetMensajeDeAdvertencia: TString;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property advertir: TBoolean read Fadvertir write Fadvertir;
  property rechazar: TBoolean read Frechazar write Frechazar;
  property textoAdvertencia : TString read FtextoAdvertencia write FtextoAdvertencia;
  property mensajeDeAdvertencia: TString read GetMensajeDeAdvertencia;
  function Save: Boolean; Override;
end;

TEstadoDeBancoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo           = 'codigo';
      _Descripcion      = 'estadoDeBanco';
      _Advertir         = 'advertir';
      _Rechazar         = 'rechazar';
      _TextoAdvertencia = 'textoAdvertencia';
      _EsInactivo       = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDeBancoList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TEstadoDeBanco;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TEstadoDeBanco read GetActual;
end;

TEstadoDePedidoDeCompra = class(TDescriptibleAbreviado)
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TEstadoDePedidoDeCompraDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'EstadoDePedidoDeCompra';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TEstadoDePedidoDeCompraList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TEstadoDePedidoDeCompra;
  public
    constructor CreateAll(_SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TEstadoDePedidoDeCompra read GetActual;
end;


TCriticidad = class(TDescriptibleAbreviado)
  private
  protected
    function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
end;

TCriticidadDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Codigo = 'Codigo';
    _Descripcion = 'Criticidad';
    _EsInactivo = 'EsInactivo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCriticidadList = class(TDescriptibleAbreviadoList)
private
  function Getactual : TCriticidad;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property actual : TCriticidad read Getactual;
end;

TLocalidad = class(TDescriptible)
  private
    Fprovincia: TPDObject;
    FprovinciaID: TObjectID;
    FPais: TPDObject;
    FPaisID: TObjectID;
    FCodigoPostal: String;
    FIDTeamplace: TEntero;
    procedure SetprovinciaID(Value: TObjectID);
    function Getprovincia: TProvincia;
    function GetDescripcionConProvinciaYPais: string;
    function GetPais: TPais;
    procedure setPaisID(const Value: TObjectID);
    function GetDescripcionConProvinciaYPaisEnIngles: string;
    function GetIDTeamplace: TEntero;
  public
    constructor Create; override;
    procedure Delete; override;
    property DescripcionConProvinciaYPais : string read GetDescripcionConProvinciaYPais;
    property DescripcionConProvinciaYPaisEnIngles : string read GetDescripcionConProvinciaYPaisEnIngles;
    property provinciaID: TObjectID read FprovinciaID write SetprovinciaID;
    property CodigoPostal: String read FCodigoPostal write FCodigoPostal;
    property Provincia: TProvincia read Getprovincia;
    property PaisID: TObjectID read FPaisID write setPaisID;
    property Pais: TPais read GetPais;
    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Class Function GuardarEnTeamPlace(_L : TLocalidad) : Boolean;
end;

TLocalidadDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
  Const
    _Descripcion            = 'Localidad';
    _ProvinciaID            = 'ProvinciaID';
    _CodigoPostal           = 'CodigoPostal';
    _EsInactivo             = 'EsInactivo';
    _TeamplaceTableName     = 'BSLocalidad';
    _TeamplaceCodigo        = 'Codigo';
    _TeamplaceID            = 'LocalidadID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TLocalidadList = class(TDescriptibleList)
private
  function GetActual: TLocalidad;
public
  constructor CreateAll;
  constructor CreateByProvincia(_P: TProvincia);
  constructor CreateByCodigoPostal(_CP: String);
  constructor CreateByCodigoPostalLike(_CP: String; findAll: Boolean = False);
  function CreateNewObject: TPDObject; override;
  function FindDescripcion(_Des: String): Boolean;
  function FindCodigoPostal(_CP: String): Boolean;
  property Actual: TLocalidad read GetActual;
end;

TMarca = class(TDescriptible)
  private
    Procedure ValidarDescripcionDuplicada(_D: String; _ID: TObjectID);
  public
    procedure ValidateOnInsert; override;
    procedure ValidateOnUpdate; override;
    constructor Create; override;
    procedure Delete; Override;
end;

TMarcaDM = class(TSQLDBX_DMObject)
  protected
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion = 'Marca';
      _EsInactivo  = 'EsInactiva';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMarcaList = class(TDescriptibleList)
private
  function GetActual: TMarca;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TMarca read GetActual;
end;

TMarcaAsociada = class(TPDObject)
  private
    Fempresa: TPDObject;
    FempresaID: TObjectID;
    FmarcaID: TObjectID;
    Fmarca: TPDObject;
    FEsMarcaPropia: TBoolean;
    FGrupoDeVendedorID: TObjectID;
    FGrupoDeVendedor: TPDObject;
    FEsInactivo: TBoolean;
    fdireccionDeEntregaID: TObjectID;
    FDireccionDeEntrega: TPDObject;
    FGrupoDeVendedorInicialID: TObjectID;
    FGrupoDeVendedorInicial: TPDObject;
    FVigenciaHastaGrupoDeVendedorInicial: TFecha;
    procedure SetclienteID(Value: TObjectID);
    function Getcliente: TEmpresa;
    function GetMarcaAsociada: TMarca;
    procedure SetmarcaID(const Value: TObjectID);
    function GetGrupoDeVendedor: TGrupoDeVendedor;
    procedure SetGrupoDeVendedorID(const Value: TObjectID);
    function GetGrupoDeVendedorInicial: TGrupoDeVendedor;
    procedure SetGrupoDeVendedorInicialID(const Value: TObjectID);
    function GetEsInactivo: TBoolean;
    function GetDireccionDeEntrega: TDeposito;
    procedure SetDireccionDeEntregaID(const Value: TObjectID);
  public
    constructor Create; override;
    procedure Delete; Override;
    function GrupoDeVendedorActivo( _Fecha: TFecha) : TGrupoDeVendedor;

    property EmpresaID: TObjectID read FempresaID write SetclienteID;
    property Empresa: TEmpresa read Getcliente;
    property MarcaID: TObjectID read FmarcaID write SetmarcaID;
    property Marca: TMarca read GetMarcaAsociada;

    property GrupoDeVendedorID: TObjectID read FGrupoDeVendedorID write SetGrupoDeVendedorID;
    property GrupoDeVendedor  : TGrupoDeVendedor read GetGrupoDeVendedor;
    property GrupoDeVendedorInicialID: TObjectID read FGrupoDeVendedorInicialID write SetGrupoDeVendedorInicialID;
    property GrupoDeVendedorInicial  : TGrupoDeVendedor read GetGrupoDeVendedorInicial;
    property VigenciaHastaGrupoDeVendedorInicial: TFecha read FVigenciaHastaGrupoDeVendedorInicial write FVigenciaHastaGrupoDeVendedorInicial;

    property EsMarcaPropia: TBoolean read FEsMarcaPropia write FEsMarcaPropia;
    property EsInactivo : TBoolean read GetEsInactivo;
    property DireccionDeEntregaID : TObjectID read FDireccionDeEntregaID write SetDireccionDeEntregaID;
    property DireccionDeEntrega   : TDeposito read GetDireccionDeEntrega;
end;

TMarcaAsociadaDM = class(TSQLDBX_DMObject)
protected

public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  Const
    _EmpresaID                            = 'EmpresaID';
    _MarcaID                              = 'MarcaID';
    _GrupoDeVendedorID                    = 'GrupoDeVendedorID';
    _GrupoDeVendedorInicialID             = 'GrupoDeVendedorInicialID';
    _VigenciaHastaGrupoDeVendedorInicial  = 'VigenciaHastaGrupoDeVendedorInicial';
    _EsMarcaPropia                        = 'EsMarcaPropia';
    _DireccionDeEntregaID                 = 'DireccionDeEntregaID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TMarcaAsociadaList = class(TPDList)
private
  function GetActual: TMarcaAsociada;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByEmpresa(_E: TAbstractEmpresa; _SoloActivos: Boolean);
  constructor CreateByMarca(_M: TMarca);
  constructor CreateByDescripcionLike(_D: String; _E: TAbstractEmpresa;  _SoloActivos: Boolean);
  constructor CreateEmpty;

  function CreateNewObject: TPDObject; override;
  property Actual: TMarcaAsociada read GetActual;
  function FindMarca(_M: TMarca): Boolean; overload;
  function FindMarca(_MID: TObjectID): Boolean; overload;
  function Find(_ID: TObjectID): Boolean; overload;

end;

TMaterial = class(TDescriptibleAbreviado)
  private
    FCentroDeCostoID: TObjectID;
    FCentroDeCosto: TPDObject;
    FCategoriaDeMateriaPrima: TPDObject;
    FCategoriaDeMateriaPrimaID: TObjectID;
    FPesoEspecifico: TReal;
    FPesoEspecificoUnidadDeMedida: TPDObject;
    FPesoEspecificoUnidadDeMedidaID: TObjectID;
    FTerminacionNaturalID: TObjectID;
    FTerminacionNatural: TPDObject;
    procedure SetCentroDeCostoID(const Value: TObjectID);
    procedure SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
    procedure SetPesoEspecificoUnidadDeMedidaID(const Value: TObjectID);
    procedure SetTerminacionNaturalID(const Value: TObjectID);
    function GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
    function GetCentroDeCosto: TCentroDeCosto;
    function GetPesoEspecificoUnidadDeMedida: TUnidadDeMedida;
    function GetPesoEspecificoDescripcion: TString;
    function GetTerminacionNatural: TTerminacion;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property CentroDeCostoID                 : TObjectID Read FCentroDeCostoID Write SetCentroDeCostoID;
    property CentroDeCosto                   : TCentroDeCosto Read GetCentroDeCosto;
    property CategoriaDeMateriaPrimaID       : TObjectID Read FCategoriaDeMateriaPrimaID Write SetCategoriaDeMateriaPrimaID;
    property CategoriaDeMateriaPrima         : TCategoriaDeMateriaPrima Read GetCategoriaDeMateriaPrima;
    property PesoEspecifico                  : TReal Read FPesoEspecifico Write FPesoEspecifico;
    property PesoEspecificoDescripcion       : TString Read GetPesoEspecificoDescripcion;
    property PesoEspecificoUnidadDeMedidaID  : TObjectID Read FPesoEspecificoUnidadDeMedidaID Write SetPesoEspecificoUnidadDeMedidaID;
    property PesoEspecificoUnidadDeMedida    : TUnidadDeMedida Read GetPesoEspecificoUnidadDeMedida;
    property TerminacionNaturalID            : TObjectID Read FTerminacionNaturalID Write SetTerminacionNaturalID;
    property TerminacionNatural              : TTerminacion Read GetTerminacionNatural;
end;

TMaterialDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Descripcion                    = 'MaterialDeArticulo';
      _Codigo                         = 'Codigo';
      _CentroDeCostoID                = 'CentroDeCostoID';
      _CategoriaDeMateriaPrimaID      = 'CategoriaDeMateriaPrimaID';
      _PesoEspecifico                 = 'PesoEspecifico';
      _PesoEspecificoUnidadDeMedidaID = 'UnidadDeMedidaPesoEspecificoID';
      _TerminacionNaturalID           = 'TerminacionNaturalID';
      _EsInactivo                     = 'EsInactivo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TMaterialList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TMaterial;
public
  constructor CreateAll( _SoloActivos: Boolean  = False);
  constructor CreateByCategoriaDeMateriaPrima ( _C : TCategoriaDeMateriaPrima; _SoloActivos: Boolean  = False );
  constructor CreateByCategoriaDeMateriaPrimaAndCodigoLike ( _C : TCategoriaDeMateriaPrima; _Cod : String ;_SoloActivos: Boolean  = False );
  function CreateNewObject: TPDObject; override;
  property Actual: TMaterial read GetActual;
end;

TPaisList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TPais;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TPais read GetActual;
end;


TProveedorList = class(TDescriptibleAbreviadoList)
private
  function GetProveedor: TProveedor;
public
  constructor CreateAll( _SoloActivos: Boolean= False);
  function CreateNewObject: TPDObject; override;
  property Actual: TProveedor read GetProveedor;
end;


TOperacionPermitidaDeUsuario = class(TDescriptibleAbreviado)
private
protected
  function GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TOperacionPermitidaDeUsuarioDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo      = 'Codigo';
      _Descripcion = 'OperacionPermitidaDeUsuario';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TOperacionPermitidaDeUsuarioList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TOperacionPermitidaDeUsuario;
  public
    constructor CreateAll;
    function CreateNewObject: TPDObject; override;
    property Actual: TOperacionPermitidaDeUsuario read GetActual;
end;

TTipoDeUsuarioOperacionPermitida = class(TPDObject)
  private
    FTipoDeUSuarioID: TObjectID;
    FTipoDeUsuario: TPDObject;
    FMenuAplicacionID: TObjectID;
    FMenuAplicacion: TPDObject;
    FOperacionPermitidaDeUsuarioID: TObjectID;
    FOperacionPermitidaDeUsuario: TPDObject;
    function GetOperacionPermitidaDeUsuario: TOperacionPermitidaDeUsuario;
    procedure SetOperacionPermitidaDeUsuarioID(Value: TObjectID);
    function GetTipoDeUsuario: TTipoDeUsuario;
    procedure SetTipoDeUsuarioID(Value: TObjectID);
    function GetMenuAplicacion: TMenuAplicacion;
    procedure SetMenuAplicacionID(const Value: TObjectID);
  public
    constructor Create; override;
    function Save: Boolean; Override;
    property OperacionPermitidaDeUsuario: TOperacionPermitidaDeUsuario read GetOperacionPermitidaDeUsuario;
    property OperacionPermitidaDeUsuarioID : TObjectID read FOperacionPermitidaDeUsuarioID write SetOperacionPermitidaDeUsuarioID;
    property TipoDeUsuario: TTipoDeUsuario read GetTipoDeUsuario;
    property TipoDeUsuarioID: TObjectID read FTipoDeUSuarioID write SetTipoDeUsuarioID;
    property MenuAplicacion: TMenuAplicacion read GetMenuAplicacion;
    property MenuAplicacionID: TObjectID read FMenuAplicacionID write SetMenuAplicacionID;
end;

TTipoDeUsuarioOperacionPermitidaDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    const
      _OperacionPermitidaDeUsuarioID = 'OperacionPermitidaDeUsuarioID';
      _TipoDeUsuarioID = 'TipoDeUsuarioID';
      _MenuID = 'menuID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeUsuarioOperacionPermitidaList = class(TPDList)
  private
    function GetActual: TTipoDeUsuarioOperacionPermitida;
  public
    constructor CreateAll;
    constructor CreateByTipodeUsuario(_T: TTipoDeUsuario);
    constructor CreateByTipodeUsuarioAndClassNameForm( _T: TTipoDeUsuario; _nombreClaseFormulario: String );
    function CreateNewObject: TPDObject; override;
    function Find(_cod: TString): Boolean;
    function TienePermiso(_P: TString; _M: TMenuAplicacion): Boolean;
    property Actual: TTipoDeUsuarioOperacionPermitida read GetActual;
end;

TOrigenComercial = class(TDescriptibleAbreviado)
  private
    FColor: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    property Color      : TEntero read FColor Write FColor;
end;

TOrigenComercialDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'OrigenComercial';
      _EsInactivo  = 'EsInactivo';
      _Color       = 'Color';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TOrigenComercialList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TOrigenComercial;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TOrigenComercial read GetActual;
end;

TRubroDeArticulo = class(TDescriptibleAbreviado)
private
  FCodigoSubrubroSifab: String;
  FCodigoPosicionArancelariaSifab: String;
  FCodigoGrupoProductoSifab: String;
  FTraducciones: TPDList;
  function GetTraducciones: TRubroDeArticuloTraduccionList;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property CodigoSubrubroSifab : String Read FCodigoSubrubroSifab write FCodigoSubrubroSifab;
  property CodigoGrupoProductoSifab : String Read FCodigoGrupoProductoSifab write FCodigoGrupoProductoSifab;
  property CodigoPosicionArancelariaSifab : String Read FCodigoPosicionArancelariaSifab write FCodigoPosicionArancelariaSifab;
  Property traducciones: TRubroDeArticuloTraduccionList Read GetTraducciones;
  Function descripcionComercial: String;
end;

TRubroDeArticuloDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo                         = 'Codigo';
      _Descripcion                    = 'RubroDearticulo';
      _CodigoSubrubroSifab            = 'CodigoSubrubroSifab';
      _CodigoPosicionArancelariaSifab = 'CodigoPosicionArancelariaSifab';
      _CodigoGrupoProductoSifab       = 'CodigoGrupoProductoSifab';
      _EsInactivo                     = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TRubroDeArticuloList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TRubroDeArticulo;
public
  constructor CreateAll(_SoloActivos : Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TRubroDeArticulo read GetActual;
end;

TRubroDeArticuloTraduccion = class(TTraduccion)
private
  FrubroDeArticuloID: TObjectID;
  FrubroDeArticulo: TPDObject;
  Forden: Integer;
  procedure SetrubroDeArticuloID(Value: TObjectID);
  function GetrubroDeArticulo: TRubroDeArticulo;
public
  constructor Create; override;
  property rubroDeArticuloID: TObjectID read FrubroDeArticuloID write SetrubroDeArticuloID;
  property rubroDeArticulo: TRubroDeArticulo read GetrubroDeArticulo;
  property orden: Integer read Forden Write Forden;
end;

TRubroDeArticuloTraduccionDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _RubroDeArticuloID  = 'RubroDeArticuloID';
    _resourceLanguageID = 'ResourceLanguageID';
    _Descripcion        = 'RubroDeArticuloTraduccion';
    _Orden              = 'Orden';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TRubroDeArticuloTraduccionList = class(TTraduccionList)
private
  function GetActual: TRubroDeArticuloTraduccion;
public
  constructor CreateAll;
  Constructor CreateByRubroDeArticulo(_R: TRubroDeArticulo);
  function CreateNewObject: TPDObject; override;
  property Actual: TRubroDeArticuloTraduccion read GetActual;
end;

TVendedor = class(TDescriptibleAbreviado)
  private
    FTipoDeVendedorID: TObjectID;
    FTipoDeVendedor: TPDObject;
    FTelefono: TString;
    FCelular: TString;
    FporcentajeExedenteDeNoPagoDeComision: TReal;
    FLocalidadID: TObjectID;
    FLocalidad: TPDObject;
    FFechaDeBaja: TFechaHora;
    FEmail: TString;
    FDireccion: TString;
    FNombre: TString;
    FApellido: TString;
    FVendedorID: TObjectID;
    function GetLocalidad: TLocalidad;
    function GetTipoDeVendedor: TTipoDeVendedor;
    function GetApellidoYNombres: TString;
    procedure SetLocalidadID(Value: TObjectID);
    procedure SetcNombre(const Value: TString);
    procedure SetApellido(const Value: TString);
    procedure SetDireccion(const Value: TString);
    procedure SetporcentajeExedenteDeNoPagoDeComision(const Value: TReal);
    procedure Validate;
    procedure SetEmail(const Value: TString);
  public
    constructor Create; override;
    function Save: Boolean; override;

    procedure ValidateOnInsert; Override;
    procedure ValidateOnUpdate; Override;
    property Apellido: TString read Fapellido write SetApellido;
    property Nombre: TString read Fnombre write SetcNombre;
    property Direccion: TString read FDireccion write SetDireccion;
    property Email: TString read Femail write Setemail;
    property FechaDeBaja: TFechaHora read FFechaDeBaja write FFechaDeBaja;
    property Localidad: TLocalidad read GetLocalidad;
    property LocalidadID: TObjectID read FLocalidadID write SetLocalidadID;
    property PorcentajeExedenteDeNoPagoDeComision : TReal read FporcentajeExedenteDeNoPagoDeComision write SetporcentajeExedenteDeNoPagoDeComision;
    property Telefono: TString read FTelefono write FTelefono;
    property Celular: TString read FCelular write FCelular;
    property TipoDeVendedor: TTipoDeVendedor read GetTipoDeVendedor;
    property TipoDeVendedorID : TObjectID read FTipoDeVendedorID write FTipoDeVendedorID;
    property ApellidoYNombres: TString read GetApellidoYNombres;
end;

TVendedorDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    class function EmpresaDeSistemaID_FieldName: string; override;
    Const
      _Apellido              = 'Apellido';
      _Nombre                = 'Nombre';
      _Codigo                = 'Codigo';
      _Direccion             = 'Direccion';
      _Email                 = 'Email';
      _PorExDeNoPagoComision = 'PorExDeNoPagoComision';
      _Celular               = 'Celular';
      _Telefono              = 'Telefono';
      _LocalidadID           = 'LocalidadID';
      _TipoDeVendedorID      = 'TipoDeVendedorID';
      _EsInactivo            = 'EsInactivo';
      _FechaDeBaja           = 'FechadeBaja';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TVendedorList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TVendedor;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  constructor CreateByLocalidad(_L: TLocalidad; _SoloActivos: Boolean = False );
  function Find(_cod: string): Boolean; reintroduce; overload;
  function CreateNewObject: TPDObject; override;
  property Actual: TVendedor read GetActual;
end;

TZonaDeCliente = class(TDescriptibleAbreviado)
private
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  procedure Delete; Override;
end;

TZonaDeClienteDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    Const
      _Codigo      = 'Codigo';
      _Descripcion = 'ZonaDeCliente';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TZonaDeClienteList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TZonaDeCliente;
public
  constructor CreateAll(_SoloActivos: Boolean = False);
  function CreateNewObject: TPDObject; override;
  property Actual: TZonaDeCliente read GetActual;
end;


TDMProvider = class
private
  FDMNames: TStringList;
  FDMs: array of TSQLDBX_DMObject;
public
  constructor Create;
  destructor Destroy; override;
  function GetGlobalDM(DMClass: TSQLDBX_DMClass): TSQLDBX_DMObject;
end;

{ TIncoterm }

TIncoterm = class(TDescriptibleAbreviado)
private
  FGrupo: String;
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  Property Grupo: String Read FGrupo Write FGrupo;
end;

TIncotermDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion = 'Incoterm';
      _Codigo = 'Codigo';
      _Grupo = 'Grupo';
      _EsInactivo  = 'EsInactivo';

    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TIncotermList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TIncoterm;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TIncoterm read GetActual;
end;

TCentroDeCosto = class(TDescriptibleAbreviado)
  private
    FSectorID        : TObjectID;
    FSector          : TPDObject;
    FIDTeamplace     : TEntero;
    FProrrateaCostos : TBoolean;
    procedure SetSectorID(const Value: TObjectID);
    function GetSector: TSector;
    function GetIDTeamplace: TEntero;
  protected
    function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    Property SectorID : TObjectID read FSectorID write SetSectorID;
    Property Sector : TSector read GetSector;
    Property IDTeamplace : TEntero Read GetIDTeamplace;
    Property ProrrateaCostos : TBoolean read FProrrateaCostos write FProrrateaCostos;
    Class Function GuardarEnTeamPlace(_C : TCentroDeCosto) : Boolean;
end;

TCentroDeCostoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion        = 'CentroDeCosto';
      _Codigo             = 'Codigo';
      _EsInactivo         = 'EsInactivo';
      _SectorID           = 'SectorID';
      _ProrrateaCostos    = 'ProrrateaCostos';
      //Teamplace
      _TeamplaceTableName = 'BSCentroCosto';
      _TeamplaceCodigo    = 'Codigo';
      _TeamplaceID        = 'CentroCostoID';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TCentroDeCostoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TCentroDeCosto;
  public
    constructor CreateAll( _SoloActivos: Boolean = False);
    constructor CreateByDescripcionLikeAndProrrateables( _D : String ; _SoloActivos: Boolean = False);
    constructor CreateByProrrateables( _SoloActivos: Boolean = False);
    function CreateNewObject: TPDObject; override;
    property Actual: TCentroDeCosto read GetActual;
end;

TTipoDeClaveFiscal = class(TDescriptibleAbreviado)
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
end;

TTipoDeClaveFiscalDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Codigo      = 'Codigo';
      _Descripcion = 'TipoDeClaveFiscal';
      _EsInactivo  = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeClaveFiscalList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TTipoDeClaveFiscal;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDeClaveFiscal read GetActual;
end;

TTipoDeComponenteTraduccion = class(TTraduccion)
private
  FTipoDeComponenteID: TObjectID;
  FTipoDeComponente: TPDObject;
  procedure SetTipoDeComponenteID(Value: TObjectID);
  function GetTipoDeComponente: TTipoDeComponente;
public
  constructor Create; override;
  property TipoDeComponenteID: TObjectID read FTipoDeComponenteID write SetTipoDeComponenteID;
  property TipoDeComponente: TTipoDeComponente read GetTipoDeComponente;
end;

TTipoDeComponenteTraduccionDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _resourceLanguageID = 'ResourceLanguageID';
    _Descripcion = 'TipoDeComponente';
    _TipoDeComponenteID = 'TipoDeComponenteID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TTipoDeComponenteTraduccionList = class(TTraduccionList)
private
  function GetActual: TTipoDeComponenteTraduccion;
public
  constructor CreateAll;
  Constructor CreateByTipoDeComponente(_T: TTipoDeComponente);
  function CreateNewObject: TPDObject; override;
  property Actual: TTipoDeComponenteTraduccion read GetActual;
end;

TCalibreDeControl = class(TDescriptibleAbreviado)
  private
    FMarca: TString;
    FModelo: TString;
    FNumeroDeSerie: TString;
    FAnioDeFabricacion: TString;
    FFechaDeAlta: TFechaHora;
    FInstruccionDeCalibracion: TString;
    FCentroDeCostoID: TObjectID;
    FCentroDeCosto: TPDObject;
    FRango: TString;
    FResolucion: TString;
    FClaseCalidad: TString;
    FLimiteDeErrorAdmitido: TString;
    FOtras: TString;
    FResponsablesTecnicos: TCalibreDeControlResponsableTecnicoList;
    FPeriodosDeCalibracion: TCalibreDeControlPeriodoDeCalibracionList;
    Procedure SetCentroDeCostoID(Value: TObjectID);
    Function GetCentroDeCosto: TCentroDeCosto;
    Function GetResponsablesTecnicos: TCalibreDeControlResponsableTecnicoList;
    function GetPeriodosDeCalibracion : TCalibreDeControlPeriodoDeCalibracionList;
  protected
    Function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
  public
    constructor Create; override;
    procedure Delete; override;
    property Otras: TString read FOtras write FOtras;
    property LimiteDeErrorAdmitido: TString read FLimiteDeErrorAdmitido write FLimiteDeErrorAdmitido;
    property ClaseCalidad: TString read FClaseCalidad write FClaseCalidad;
    property Resolucion: TString read FResolucion write FResolucion;
    property Rango: TString read FRango write FRango;
    property CentroDeCostoID: TObjectID read FCentroDeCostoID write SetCentroDeCostoID;
    property CentroDeCosto: TCentroDeCosto read GetCentroDeCosto;
    property InstruccionDeCalibracion : TString read FInstruccionDeCalibracion write FInstruccionDeCalibracion;
    property FechaDeAlta: TFechaHora read FfechaDeAlta write FfechaDeAlta;
    property AnioDeFabricacion : TString read FAnioDeFabricacion write FAnioDeFabricacion;
    property NumeroDeSerie: TString read FNumeroDeSerie write FNumeroDeSerie;
    property Modelo: TString read FModelo write FModelo;
    property Marca: TString read Fmarca write Fmarca;
    Property ResponsablesTecnicos: TCalibreDeControlResponsableTecnicoList Read GetResponsablesTecnicos;
    Property PeriodosDeCalibracion : TCalibreDeControlPeriodoDeCalibracionList Read GetPeriodosDeCalibracion;
end;

TCalibreDeControlDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  class function EsInactivo_FieldName: string; override;
  const
    _Otras = 'Otras';
    _LimiteDeErrorAdmitido = 'LimiteDeErrorAdmitido';
    _ClaseCalidad = 'ClaseCalidad';
    _Resolucion = 'Resolucion';
    _Rango = 'Rango';
    _CentroDeCostoID = 'CentroDeCostoID';
    _InstruccionDeCalibracion = 'InstruccionDeCalibracion';
    _FechaDeAlta = 'FechaDeAlta';
    _AnioDeFabricacion = 'AnioDeFabricacion';
    _NumeroDeSerie = 'NumeroDeSerie';
    _Modelo = 'Modelo';
    _Marca = 'Marca';
    _Descripcion = 'CalibreDeControl';
    _Codigo = 'Codigo';
    _EsInactivo = 'EsInactivo';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCalibreDeControlList = class(TDescriptibleAbreviadoList)
private
  function GetActual: TCalibreDeControl;
public
  constructor CreateAll( _SoloActivos: Boolean = False);
  Constructor CreateEmpty;
  function CreateNewObject: TPDObject; override;
  property Actual: TCalibreDeControl read GetActual;
end;

TCalibreDeControlResponsableTecnico = class(TPDObject)
private
  FfechadeVigencia: TFechaHora;
  FCalibreDeControlID: TObjectID;
  FCalibreDeControl: TPDObject;
  FResponsableTecnicoID: TObjectID;
  FResponsableTecnico: TPDObject;
  procedure SetCalibreDeControlID(Value: TObjectID);
  function GetCalibreDeControl: TCalibreDeControl;
  procedure SetResponsableTecnicoID(const Value: TObjectID);
  function GetResponsableTecnico: TResponsableTecnico;
public
  constructor Create; override;
  property CalibreDeControlID: TObjectID read FCalibreDeControlID write SetCalibreDeControlID;
  property CalibreDeControl: TCalibreDeControl read GetCalibreDeControl;
  property fechadeVigencia : TFechaHora read FfechadeVigencia write FfechadeVigencia;
  property ResponsableTecnicoID: TObjectID read FResponsableTecnicoID write SetResponsableTecnicoID;
  property ResponsableTecnico: TResponsableTecnico read GetResponsableTecnico;
end;

TCalibreDeControlResponsableTecnicoDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _CalibreDeControlID = 'CalibreDeControlID';
    _fechadeVigencia = 'FechaDeVigencia';
    _ResponsableTecnicoID = 'ResponsableTecnicoID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCalibreDeControlResponsableTecnicoList = class(TPDList)
private
  function GetActual: TCalibreDeControlResponsableTecnico;
public
  constructor CreateAll;
  constructor CreateByCalibreDeControl(_C: TCalibreDeControl);
  function CreateNewObject: TPDObject; override;
  property Actual: TCalibreDeControlResponsableTecnico read GetActual;
end;

TCalibreDeControlPeriodoDeCalibracion = class(TPDObject)
private
  FNovedades: TOBject;
  FMesesDeVigencia: TEntero;
  FFecha: TFechaHora;
  FCalibreDeControlID: TEntero;
  FTmpCalibreDeControl: TCalibreDeControl;
  function GetNovedades: TCalibreDeControlPeriodoDeCalibracionNovedadList;
public
  constructor Create; override;
  property CalibreDeControlID : TEntero read FCalibreDeControlID write FCalibreDeControlID;
  property Fecha: TFechaHora read FFecha write FFecha;
  property MesesDeVigencia : TEntero read FMesesDeVigencia write FMesesDeVigencia;
  property Novedades: TCalibreDeControlPeriodoDeCalibracionNovedadList read GetNovedades;
  property TmpCalibreDeControl : TCalibreDeControl read FTmpCalibreDeControl write FTmpCalibreDeControl;
end;

TCalibreDeControlPeriodoDeCalibracionDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _CalibreDeControlID = 'CalibreDeControlID';
    _Fecha              = 'Fecha';
    _MesesDeVigencia    = 'MesesDeVigencia';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCalibreDeControlPeriodoDeCalibracionList = class(TPDList)
private
  function GetActual: TCalibreDeControlPeriodoDeCalibracion;
public
  constructor CreateAll;
  constructor CreateByCalibreDeControl(_C: TCalibreDeControl);
  function CreateNewObject: TPDObject; override;
  property Actual: TCalibreDeControlPeriodoDeCalibracion read GetActual;
end;

TCalibreDeControlPeriodoDeCalibracionNovedad = class(TPDObject)
private
  FObservaciones: TString;
  FDaniosReparaciones: TString;
  FCertificadoNumero: TString;
  FResultado: TString;
  FFechaDeNovedad: TFechaHora;
  FCalibreDeControlPeriodoDeCalibracionID: TEntero;
  FResponsableTecnicoID: TEntero;
  FResponsableTecnico: TPDObject;
  procedure SetResponsableTecnicoID(const Value: TEntero);
  function GetResponsableTecnico: TResponsableTecnico;

public
  constructor Create; override;
  property CalibreDeControlPeriodoDeCalibracionID : TEntero read FCalibreDeControlPeriodoDeCalibracionID write FCalibreDeControlPeriodoDeCalibracionID;
  property FechaDeNovedad: TFechaHora read FFechaDeNovedad write FFechaDeNovedad;
  property ResponsableTecnicoID: TEntero read FResponsableTecnicoID write SetResponsableTecnicoID;
  property ResponsableTecnico: TResponsableTecnico read GetResponsableTecnico;
  property Resultado: TString read FResultado write FResultado;
  property CertificadoNumero : TString read FCertificadoNumero write FCertificadoNumero;
  property DaniosReparaciones : TString read FDaniosReparaciones write FDaniosReparaciones;
  property Observaciones: TString read FObservaciones write FObservaciones;
end;

TCalibreDeControlPeriodoDeCalibracionNovedadDM = class(TSQLDBX_DMObject)
public
  class function TableName: string; override;
  class function ID_FieldName: string; override;
  const
    _CalibreDeControlPeriodoDeCalibracionID = 'CalibreDeControlPeriodoDeCalibracionID';
    _FechaDeNovedad = 'FechaDeNovedad';
    _Resultado = 'Resultado';
    _CertificadoNumero = 'CertificadoNumero';
    _DaniosReparaciones = 'DaniosReparaciones';
    _Observaciones = 'Observaciones';
    _ResponsableTecnicoID = 'ResponsableTecnicoID';
  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TCalibreDeControlPeriodoDeCalibracionNovedadList = class(TPDList)
private
  function GetActual: TCalibreDeControlPeriodoDeCalibracionNovedad;
public
  constructor CreateAll;
  constructor CreateByPeriodoDeCalibracion(_CCPC: TCalibreDeControlPeriodoDeCalibracion);
  function CreateNewObject: TPDObject; override;
  property Actual : TCalibreDeControlPeriodoDeCalibracionNovedad read GetActual;
end;

TResponsableTecnico = class(TDescriptibleAbreviado)
private
  FCentroDeCostoID: TObjectID;
  FCentroDeCosto: TPDObject;
  function GetCentroDeCosto: TCentroDeCosto;
  procedure SetCentroDeCostoID(const Value: TObjectID);
protected
  function GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass; override;
public
  constructor Create; override;
  property CentroDeCostoID: TObjectID read FCentroDeCostoID write SetCentroDeCostoID;
  property CentroDeCosto: TCentroDeCosto read GetCentroDeCosto;
end;

TResponsableTecnicoDM = class(TSQLDBX_DMObject)
  public
    class function TableName: string; override;
    class function ID_FieldName: string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion     = 'ResponsableTecnico';
      _Codigo          = 'Codigo';
      _CentroDeCostoID = 'CentroDeCostoID';
      _EsInactivo      = 'EsInactivo';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TResponsableTecnicoList = class(TDescriptibleAbreviadoList)
  private
    function GetActual: TResponsableTecnico;
  public
    constructor CreateAll;
    constructor CreateByCentroDeCosto(_CC: TCentroDeCosto);
    function CreateNewObject: TPDObject; override;
    property Actual: TResponsableTecnico read GetActual;
end;

TColorDeHojaDeRuta = class(TDescriptible)
  private
    FTipoDeFormularioID: TObjectID;
    FTipoDeFormulario: TPDObject;
    FColorDeImpresion: Integer;
    procedure SetTipoDeFormularioID(const Value: TObjectID);
    function GetTipoDeFormulario: TTipoDeFormulario;
  public
    constructor Create; override;
    property TipoDeFormularioID : TObjectID Read FTipoDeFormularioID Write setTipoDeFormularioID;
    property TipoDeFormulario   : TTipoDeFormulario Read GetTipoDeFormulario;
    property ColorDeImpresion   : Integer Read FColorDeImpresion write FColorDeImpresion;
end;

TColorDeHojaDeRutaDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName: string; override;
    const
      _Descripcion        = 'ColorDeHojaDeRuta';
      _TipoDeFormularioID = 'TipoDeFormularioID';
      _EsInactivo         = 'EsInactivo';
      _ColorDeImpresion   = 'ColorDeImpresion';
    procedure PopulateFields(PDObject: TPDObject); override;
    procedure PopulateObject(PDObject: TPDObject); override;
end;

TColorDeHojaDeRutaList = class(TDescriptibleList)
private
  function GetActual : TColorDeHojaDeRuta;
public
  constructor CreateAll;
  function CreateNewObject: TPDObject; override;
  property Actual : TColorDeHojaDeRuta read GetActual;
end;

TEjercicioContable = class(TDescriptible)
  private
    FAnio      : TEntero;
    FFechaHasta: TFechaHora;
    FFechaDesde: TFechaHora;
    FPeriodosContables: TPeriodoContableList;
    function GetFechaDesde: TFechaHora;
    function GetFechaHasta: TFechaHora;
    function GetPeriodosContables: TPeriodoContableList;
  public
    constructor Create; override;
    property Anio       : TEntero read FAnio write FAnio;
    property FechaDesde : TFechaHora read GetFechaDesde write FFechaDesde;
    property FechaHasta : TFechaHora read GetFechaHasta write FFechaHasta;
    Property PeriodosContables : TPeriodoContableList Read GetPeriodosContables;
end;

TEjercicioContableDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Anio        = 'Anio';
    _Descripcion = 'EjercicioContable';
    _EsInactivo  = 'EsInactivo';
    _FechaDesde  = 'FechaDesde';
    _FechaHasta  = 'FechaHasta';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TEjercicioContableList = class(TDescriptibleList)
private
  function GetActual : TEjercicioContable;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property Actual : TEjercicioContable read GetActual;
end;

TPeriodoContable = class(TPDObject)
  private
    FPeriodo             : TString;
    FFechaHasta          : TFechaHora;
    FFechaDesde          : TFechaHora;
    FEjercicioContableID : TObjectID;
    FEjercicioContable   : TPDObject;
    FCodigoInternoSifab  : TEntero;
    procedure SetEjercicioContableID(Value : TObjectID);
    function GetEjercicioContable: TEjercicioContable;
    function GetCodigoInternoSifab: TEntero;
  public
    constructor Create; override;
    property EjercicioContableID : TObjectID read FEjercicioContableID write SetEjercicioContableID;
    property EjercicioContable   : TEjercicioContable read GetEjercicioContable;
    property FechaDesde          : TFechaHora read FFechaDesde write FFechaDesde;
    property FechaHasta          : TFechaHora read FFechaHasta write FFechaHasta;
    property Periodo             : TString read FPeriodo write FPeriodo;
    Property CodigoInternoSifab  : TEntero Read GetCodigoInternoSifab;
end;

TPeriodoContableDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _EjercicioContableID = 'EjercicioContableID';
    _FechaDesde          = 'FechaDesde';
    _FechaHasta          = 'FechaHasta';
    _Periodo             = 'Periodo';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPeriodoContableList = class(TPDList)
private
  function GetActual : TPeriodoContable;
public
  constructor CreateAll;
  Constructor CreateByEjericioContable (_EJ : TEjercicioContable);
  function CreateNewObject: TPDObject; override;
  property Actual : TPeriodoContable read GetActual;
end;


TPasoDeFabricacionMotivoDeAtraso = class(TPDObject)
  private
    FPasoDeFabricacionID : TObjectID;
    FPasoDeFabricacion : TPDObject;
    FMotivoDeAtrasoID : TObjectID;
    FMotivoDeAtraso : TPDObject;
    function GetMotivoDeAtraso : TMotivoDeAtraso;
    procedure SetMotivoDeAtrasoID(Value : TObjectID);
    function GetPasoDeFabricacion : TPasoDeFabricacion;
    procedure SetPasoDeFabricacionID(Value : TObjectID);
  public
    constructor Create; override;
    property MotivoDeAtraso : TMotivoDeAtraso read GetMotivoDeAtraso;
    property MotivoDeAtrasoID : TObjectID read FMotivoDeAtrasoID write SetMotivoDeAtrasoID;
    property PasoDeFabricacion : TPasoDeFabricacion read GetPasoDeFabricacion;
    property PasoDeFabricacionID : TObjectID read FPasoDeFabricacionID write SetPasoDeFabricacionID;
end;

TPasoDeFabricacionMotivoDeAtrasoDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _MotivoDeAtrasoID    = 'MotivoDeAtrasoID';
    _PasoDeFabricacionID = 'PasoDeFabricacionID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TPasoDeFabricacionMotivoDeAtrasoList = class(TPDList)
private
  function GetActual : TPasoDeFabricacionMotivoDeAtraso;
public
  constructor CreateAll;
  constructor CreateByPasoDeFabricacion( _PF : TPasoDeFabricacion );
  function CreateNewObject: TPDObject; override;
  property Actual : TPasoDeFabricacionMotivoDeAtraso read GetActual;
end;

TRecursoHerramental = class(TPDObject)
  private
    FRecursoID : TObjectID;
    FRecurso : TPDObject;
    FHerramentalID : TObjectID;
    FHerramental : TPDObject;
    function GetHerramental : THerramental;
    procedure SetHerramentalID(Value : TObjectID);
    function GetRecurso : TRecurso;
    procedure SetRecursoID(Value : TObjectID);
  public
    constructor Create; override;
    property Herramental : THerramental read GetHerramental;
    property HerramentalID : TObjectID read FHerramentalID write SetHerramentalID;
    property Recurso : TRecurso read GetRecurso;
    property RecursoID : TObjectID read FRecursoID write SetRecursoID;
end;

TRecursoHerramentalDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
  const
    _HerramentalID = 'HerramentalID';
    _RecursoID     = 'RecursoID';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TRecursoHerramentalList = class(TPDList)
private
  function GetActual : TRecursoHerramental;
public
  constructor CreateAll;
  Constructor CreateByRecurso(_R : TRecurso);
  function CreateNewObject: TPDObject; override;
  property Actual : TRecursoHerramental read GetActual;
end;

TFormatoDeDireccion = class(TDescriptible)
  private
    FFormato            : TString;
    FResourceLanguageID : TObjectID;
    FResourceLanguage   : TPDObject;
    FTituloCalle        : String;
    FTituloNumero       : String;
    FTituloDepartamento : String;
    FTituloPiso         : String;
    FTituloEdificio     : String;
    procedure SetResourceLanguageID(const Value: TObjectID);
    function GetResourceLanguage: TResourceLanguage;
  public
    constructor Create; override;
    property Formato : TString read FFormato write FFormato;
    property ResourceLanguageID : TObjectID Read FResourceLanguageID write SetResourceLanguageID;
    property ResourceLanguage : TResourceLanguage Read GetResourceLanguage;

    Property TituloCalle        : String Read FTituloCalle write FTituloCalle;
    Property TituloNumero       : String Read FTituloNumero write FTituloNumero;
    Property TituloPiso         : String Read FTituloPiso write FTituloPiso;
    Property TituloDepartamento : String Read FTituloDepartamento write FTituloDepartamento;
    Property TituloEdificio     : String Read FTituloEdificio write FTituloEdificio;

//    Property Calle        : String Read FTituloCalle write FTituloCalle;
//    Property Numero       : String Read FTituloNumero write FTituloNumero;
//    Property Piso         : String Read FTituloPiso write FTituloPiso;
//    Property Departamento : String Read FTituloDepartamento write FTituloDepartamento;
end;

TFormatoDeDireccionDM = class(TSQLDBX_DMObject)
  public
    class function TableName : string; override;
    class function ID_FieldName : string; override;
    class function EsInactivo_FieldName : string; override;
  const
    _Descripcion        = 'FormatoDeDireccion';
    _EsInactivo         = 'EsInactivo';
    _Formato            = 'Formato';
    _ResourceLanguageID = 'ResourceLanguageID';

    _TituloCalle        = 'TituloCalle';
    _TituloNumero       = 'TituloNumero';
    _TituloPiso         = 'TituloPiso';
    _TituloDepartamento = 'TituloDepartamento';
    _TituloEdificio     = 'TituloEdificio';

  procedure PopulateFields(PDObject: TPDObject); override;
  procedure PopulateObject(PDObject: TPDObject); override;
end;

TFormatoDeDireccionList = class(TDescriptibleList)
private
  function GetActual : TFormatoDeDireccion;
public
  constructor CreateAll( _soloActivos: Boolean= false);
  function CreateNewObject: TPDObject; override;
  property Actual : TFormatoDeDireccion read GetActual;
end;

implementation

uses
  Types, Variants, IPHLPAPI, IniFiles, fIniciarSesion, maskUtils, DateUtils, ComObj, uAplicacion, fDialogoCostoDeDesarrolloCunios, fMostrarImagen,
  uClases, _fDialogsService, UClasesFotos, UClasesInterfaces, frxClass, frxExportPDF, frxDesgn, frxDBSet,
  fBusquedaDeCunios, fCreditoDisponibleCliente, _fProgress, uDMFormulas, uClasesDocumentos;

{ TIDAllocator }

{ TglobalID }
constructor TglobalID.Create;
begin
  inherited;
  DMObject   := TglobalIDDM.Create;
  Fprefijo   := Null;
  FMaxValue  := 0;
  Table_Name := Null;
  FNextID    := 0;
end;

function TglobalID.GetNextID: TObjectID;
var
  L: TGlobalIDList;
begin
  Result := -1;

  if FNextID = FMaxValue then
  begin
    // Result := Self.InitialValue
    Assert(self.DMObject.Modified = False, 'La Transacccion está activa. No se puede generar el IDAllocator.' + #13#10 + self.classname + '.GetInitialValue');

    if MaxValue < _incremento then // si es la primera vez que se peticiona esta tabla
    begin
      FNextID := 1;
      FMaxValue := _incremento;
    end
    else
    begin
      Self.Load(Self.ID);
      FMaxValue := MaxValue + _incremento;
      FNextID := FNextID + 1;
    end;

    Save;
    try
      L := TGlobalIDList.CreateEmpty;
      L.ApplyUpdates;
      FreeAndNil(L);

      Result := strtoint(IntToStr(prefijo) + formatfloat('00000000', FNextID));

    except
      on e: exception do
      begin
        L := TGlobalIDList.CreateEmpty;
        L.CancelUpdates;
        FreeAndNil(L);
        raise exception.Create(e.message + #13#10 + 'TglobalID.GetInitialValue');
      end;
    end;
  end
  else
  begin
    FNextID := FNextID + 1;
    Result := strtoint(IntToStr(prefijo) + formatfloat('00000000', FNextID));
  end;

end;

procedure TglobalID.SetMaxValue(const Value: TEntero);
begin
  FMaxValue := Value;
  FNextID   := Value;
end;

{ TglobalIDDM }
class function TglobalIDDM.TableName: string;
begin
  Result := 'GlobalIDS';
end;

class function TglobalIDDM.ID_FieldName: string;
begin
  Result := 'globalIDID';
end;

procedure TglobalIDDM.PopulateFields(PDObject: TPDObject);
begin
  with TglobalID(PDObject) do
  begin
    IntegerField[_Prefijo]   := FPrefijo;
    IntegerField[_MaxValue]  := MaxValue;
    StringField[_Table_Name] := FTable_name;
  end;
end;

procedure TglobalIDDM.PopulateObject(PDObject: TPDObject);
begin
  with TglobalID(PDObject) do
  begin
    Fprefijo    := IntegerField[_Prefijo];
    MaxValue    := IntegerField[_MaxValue];
    FTable_Name := StringField[_Table_name];
  end;
end;

{ TglobalIDList }
function TGlobalIDList.GetActual: TglobalID;
begin
  Result := TglobalID(CurrentObject);
end;

constructor TGlobalIDList.CreateByTableName(_TableName: string);
begin
  inherited Create(TglobalID, TglobalIDDM.Create('select * from tablename where upper(' + TglobalIDDM._table_name + ')=' + uppercase(quotedstr(_TableName))));
end;

constructor TGlobalIDList.CreateEmpty;
begin
  inherited Create(TglobalID, TglobalIDDM.Create(aplicacion.ConstantAllocator.SelectEmpty));
end;

function TGlobalIDList.CreateNewObject: TPDObject;
begin
  Result := TglobalID.Create;
end;

function TGlobalIDList.Find(_TableName: string): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := uppercase(Actual.table_name) = uppercase(_TableName);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TGlobalIDList.CreateAll;
begin
  inherited Create(TglobalID, TglobalIDDM.CreateAll);
end;

{ TTextOperator }

{ TParametro }

constructor TParametro.Create;
begin
  inherited;
  DMObject        := Aplicacion.DMProvider.GetGlobalDM(TParametroDM);
  FValorTexto     := Null;
  FValorFechaHora := Null;
  FValorNumero    := Null;
  FValorBoolean   := False;
  Solomayusculas  := False;
  FSector         := nil;
end;

function TParametro.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TParametroList;
end;

function TParametro.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, SectorID);
  Result := TSector(FSector);
end;

{ TParametroDM }

Class function TParametroDM.TableName: string;
begin
  Result := 'PARAMETROS';
end;

class function TParametroDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TParametroDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TParametroDM.ID_FieldName: string;
begin
  Result := 'ParametroID';
end;

procedure TParametroDM.PopulateFields(PDObject: TPDObject);
begin
  with TParametro(PDObject) do
  begin
    StringField[_Codigo]           := codigo;
    StringField[_Descripcion]      := Descripcion;
    StringField[_valorTexto]       := FvalorTexto;
    DateTimeField[_valorFechaHora] := FvalorFechaHora;
    CurrencyField[_valorNumero]    := FvalorNumero;
    BooleanField[_ValorBoolean]    := FValorBoolean;
    BooleanField[_EsInactivo]      := EsInactivo;
    IDField[_SectorID]             := FSectorID;
  end;
end;

procedure TParametroDM.PopulateObject(PDObject: TPDObject);
begin
  with TParametro(PDObject) do
  begin
    codigo          := StringField[_Codigo];
    Descripcion     := StringField[_Descripcion];
    FValorTexto     := StringField[_valorTexto];
    FValorFechaHora := DateTimeField[_valorFechaHora];
    FValorNumero    := CurrencyField[_valorNumero];
    FValorBoolean   := BooleanField[_ValorBoolean];
    EsInactivo      := BooleanField[_EsInactivo];
    SectorID        := IDField[_SectorID];
  end;
end;

{ TParametroList }

function TParametroList.Getparametro: TParametro;
begin
  Result := TParametro(CurrentObject);
end;

constructor TParametroList.CreateAll;
begin
  inherited Create(TParametro, TParametroDM.CreateAll(False) );
end;

constructor TParametroList.CreateBySector(_Sector: TSector ; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TParametroDM.TableName + '.' + TParametroDM._SectorID + ' = ' + IntToStr(_Sector.ID) + ')';
  end;
begin
  inherited Create(TParametro, TParametroDM.CreateAll( False, WhereString, _SoloActivos ) );
end;

function TParametroList.CreateNewObject: TPDObject;
begin
  Result := TParametro.Create;
end;

{ TUsuarioList }

constructor TUsuarioList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(TUsuario, TUsuarioDM.CreateAll(False,'',_SoloActivos));
end;

constructor TUsuarioList.CreateByID(_ID: TObjectID);
begin
  inherited Create(TUsuario, TUsuarioDM.CreateByID( _ID ));
end;

constructor TUsuarioList.CreateByLogin(_Log: string);
  Function WhereString : String;
  begin
    Result := TUsuarioDM._Login + '=' + QuotedStr(_Log);
  end;
begin
  inherited Create(TUsuario, TUsuarioDM.CreateAll(False, WhereString));
end;

constructor TUsuarioList.CreateByUserAndPass(_User, _Pass: String);
  Function WhereString : String;
  begin
    Result := '(' + TUsuarioDM._Login + '=' + QuotedStr(_User) +')' ;
    Result := Result + ' and (' + TUsuarioDM._PasswordEncriptado + '=' + QuotedStr( aplicacion.TextService.Encriptar( _Pass))  +')';
    Result := Result + ' and (' + TUsuarioDM._EsInactivo + '=0 )';
  end;
begin
  inherited Create(TUsuario, TUsuarioDM.CreateAll(False, WhereString));
end;

function TUsuarioList.CreateNewObject: TPDObject;
begin
  Result := TUsuario.Create;
end;

function TUsuarioList.findByLogin(L: string): Boolean;
begin

  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := Actual.login = L;
    if not Result then
      next;
  end;

  if IsLast then
    First;

end;

function TUsuarioList.GetUsuario: TUsuario;
begin
  Result := TUsuario(CurrentObject);
end;

{ TUsuario }

function TUsuario.CambiarClave(const _claveActual, _ClaveNueva, _Confirmacion: string): Boolean;
begin
  Result := aplicacion.TextService.Encriptar(_claveActual) = self.passwordEncriptado;
  if Not Result then
    Aplicacion.RaiseExceptionCreate('Ha introducido una clave inválida');

  Result := _ClaveNueva <> '';
  if Not Result then
    Aplicacion.RaiseExceptionCreate('No se puede ingresar una clave vacía');

  Result := _ClaveNueva = _Confirmacion;
  if Not Result then
    Aplicacion.RaiseExceptionCreate('La confirmación de clave difiere de la clave nueva');

end;

constructor TUsuario.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TUsuarioDM);
  FSkin := 'Blue';
  Fnombre := null;
  Fapellido := null;
  Femail := null;
  FpasswordEncriptado := null;
  Flogin := null;
  FColorFondoFoco := 0;
  FColorLetraFoco := clWhite;
  FColorDeFondo   := $00C1E6FD;
  FAbrirAutomaticamenteArchivoExportado := True;
end;

function TUsuario.GetAccesosDirectos: TAccesoDirectoList;
begin
  If not Assigned(FAccesosDirectos) Then
    GetList(TPDList(FAccesosDirectos), TPDList(TAccesoDirectoList.CreateByUsuario(self)));
  Result := TAccesoDirectoList(FAccesosDirectos);
end;

function TUsuario.GetEsAdministradorDelSistema: TBoolean;
begin
  Result := (TipoDeUsuario.Codigo = Aplicacion.ParametrosDelSistema.TipoDeUsuarioAdministrador);
end;

function TUsuario.getNombreCompleto: TString;
begin
  Result := Nombre + ' ' + Apellido;
end;

function TUsuario.GetPasosDeFabricacion: TPasoDeFabricacionList;
begin
  If not Assigned(FPasosDeFabricacion) Then
    GetList(TPDList(FPasosDeFabricacion),TPDList(TUsuarioPasoDeFabricacionList.CreateByUsuario(Self)));
  Result := TPasoDeFabricacionList(FPasosDeFabricacion);
end;

function TUsuario.Getperfil: TPerfil;
begin
  if not assigned(Fperfil) then
    GetObject(TPerfil, Fperfil, FperfilID);
  Result := TPerfil(Fperfil);
end;

function TUsuario.GetSector: TSector;
begin
  if not assigned(FSector) then
    GetObject(TSector, FSector, FSectorID);
  Result := TSector(FSector);
end;

function TUsuario.GetSkin: String;
begin
  if (FSkin = '') then
    FSkin := 'Blue';
  Result := FSkin;
end;

function TUsuario.GetTipoDeUsuario: TTipoDeUsuario;
begin
  if not assigned(FTipoDeUsuario) then
    GetObject(TTipoDeUsuario, FTipoDeUsuario, FTipoDeUSuarioID);
  Result := TTipoDeUsuario(FTipoDeUsuario);
end;

function TUsuario.GetVendedor: TVendedor;
begin
  if not assigned(Fvendedor) then
    GetObject(TVendedor, Fvendedor, FvendedorID);
  Result := TVendedor(Fvendedor);
end;

procedure TUsuario.RecargarAccesosdirectos;
begin
  FreeAndNil(FAccesosDirectos);
end;

procedure TUsuario.RecargarTipoDeUsuario;
begin
  FreeAndNil(FTipoDeUsuario);
end;

procedure TUsuario.SetAbrirAutomaticamenteArchivoExportado(const Value: TBoolean);
begin
  FAbrirAutomaticamenteArchivoExportado := Value;
end;

procedure TUsuario.Setemail(const Value: TString);
begin
  IF (Value <> '') and Not aplicacion.TextService.ValidarEmail(Value) Then
    Aplicacion.RaiseExceptionCreate('Ingrese un email válido.');
  Femail := Value;
end;

procedure TUsuario.SetperfilID(const Value: TObjectID);
begin
  if (Value <> FperfilID) and assigned(Fperfil) then
    FreeAndNil(Fperfil);
  FperfilID := Value;
end;

procedure TUsuario.setSectorID(const Value: TObjectID);
begin
  if (Value <> FSectorID) and assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

procedure TUsuario.SetTipoDeUsuarioID(const Value: TObjectID);
begin
  if (Value <> FTipoDeUSuarioID) and (assigned(FTipoDeUsuario)) then
    FreeAndNil(FTipoDeUsuario);
  FTipoDeUSuarioID := Value;
end;

procedure TUsuario.SetVendedorID(const Value: TObjectID);
begin
  if (FvendedorID <> Value) then
    FreeAndNil(Fvendedor);
  FvendedorID := Value;
end;

{ TUsuarioDM }

class function TUsuarioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TUsuarioDM.ID_FieldName: string;
begin
  Result := 'UsuarioID';
end;

procedure TUsuarioDM.PopulateFields(PDObject: TPDObject);
begin
  with TUsuario(PDObject) do
  begin
    BooleanField[_validarMacAddress]                    := ValidarMacAddress;
    StringField[_macAddress]                            := MacAddress;
    StringField[_login]                                 := Login;
    StringField[_nombre]                                := Nombre;
    StringField[_apellido]                              := Apellido;
    StringField[_passwordEncriptado]                    := PasswordEncriptado;
    StringField[_email]                                 := Email;
    IDField[_sectorID]                                  := SectorID;
    IDField[_perfilID]                                  := PerfilID;
    StringField[_papelTapiz]                            := PapelTapiz;
    IDField[_TipoDeUsuarioID]                           := TipoDeUsuarioID;
    BooleanField[_esInactivo]                           := FEsInactivo;
    IntegerField[_ColorFondoFoco]                       := FColorFondoFoco;
    IntegerField[_ColorLetraFoco]                       := FColorLetraFoco;
    IntegerField[_ColorDeFondo]                         := FColorDeFondo;
    StringField[_skin]                                  := Skin;
    StringField[_estiloGrillas]                         := Estilogrillas;
    BooleanField[_EsVendedor]                           := EsVendedor;
    IntegerField[_VendedorID]                           := VendedorID;
    BooleanField[_AbrirAutomaticamenteArchivoExportado] := AbrirAutomaticamenteArchivoExportado;
  end;

end;

procedure TUsuarioDM.PopulateObject(PDObject: TPDObject);
begin
  with TUsuario(PDObject) do
  begin
    FvalidarMacAddress := BooleanField[_validarMacAddress];
    FmacAddress := StringField[_macAddress];
    Flogin := StringField[_login];
    Fnombre := StringField[_nombre];
    Fapellido := StringField[_apellido];
    Femail := StringField[_email];
    FpasswordEncriptado := StringField[_passwordEncriptado];
    FSectorID := IDField[_sectorID];
    FperfilID := IDField[_perfilID];
    Fpapeltapiz := StringField[_papelTapiz];
    FTipoDeUSuarioID := IDField[_TipoDeUsuarioID];
    FEsInactivo := BooleanField[_esInactivo];
    FColorFondoFoco := IntegerField[_ColorFondoFoco];
    FColorLetraFoco := IntegerField[_ColorLetraFoco];
    FColorDeFondo   := IntegerField[_ColorDeFondo];
    FSkin           := StringField[_skin];
    FEstilogrillas  := StringField[_estiloGrillas];
    EsVendedor := BooleanField[_EsVendedor];
    FvendedorID := IntegerField[_VendedorID];
    AbrirAutomaticamenteArchivoExportado := BooleanField[_AbrirAutomaticamenteArchivoExportado];
  end;
end;

Class function TUsuarioDM.TableName: string;
begin
  Result := 'USUARIOS';
end;

{ TMenuAplicacion }

constructor TMenuAplicacion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TMenuAplicacionDM);
  FEsInactivo            := False;
  FnombreClaseFormulario := null;
  Forden := null;
  solomayusculas := False; // esta es la propiedad que hereda del tdescriptible, asi pone todo en mayusculas o no
  ftmp_HabilitarAUsuario := False;
end;

destructor TMenuAplicacion.Destroy;
begin
  if assigned(FSubmenues) then
    FreeAndNil(FSubmenues);
  inherited;
end;

function TMenuAplicacion.GetMenuPadre: TMenuAplicacion;
begin
  if (FmenuPadre = nil) and (PadreID <> NullID) then
    GetObject(TMenuAplicacion, FmenuPadre, PadreID);
  Result := TMenuAplicacion(FmenuPadre);
end;

function TMenuAplicacion.GetSubmenues: TMenuAplicacionList;
begin
  if not assigned(FSubmenues) then
    FSubmenues := TMenuAplicacionList.CreateByMenuPadre(self);
  Result := FSubmenues;
end;

function TMenuAplicacion.Save: Boolean;
var
  MP: TMenuDePerfil;
begin
  ValidarMenuPadreDiferenteASiMismo;

  Result := inherited Save;
  if FDebeActualizarMenuesDeUsurio and (Ftmp_PerfilAActualizar <> nil) then
  begin
    if tmp_HabilitarAUsuario then
    begin
      MP := TMenuDePerfil.Create;
      MP.perfilID := tmp_PerfilAActualizar.ID;
      MP.FmenuID := self.ID;
      MP.Save;

      tmp_PerfilAActualizar.menues.Add(MP);
      MP.NilObject;
    end
    else if not tmp_HabilitarAUsuario then
    begin

      tmp_PerfilAActualizar.menues.First;
      repeat
        if tmp_PerfilAActualizar.menues.Actual.menuID = self.ID then
        begin
          // tmp_PerfilAActualizar.menues.Actual.permitirEliminacionBorrandoAccesosDirectos := true;
          tmp_PerfilAActualizar.menues.DeleteCurrent;
        end;

        tmp_PerfilAActualizar.menues.next;
      until tmp_PerfilAActualizar.menues.IsLast;

      tmp_PerfilAActualizar.menues.First;

    end

  end;

end;

procedure TMenuAplicacion.SetPadreID(const Value: TObjectID);
begin
  if (Value <> FPadreID) and assigned(FmenuPadre) then
    FreeAndNil(FmenuPadre);

  FPadreID := Value;
end;

procedure TMenuAplicacion.Settmp_HabilitarAUsuario(const Value: Boolean);
begin
  FDebeActualizarMenuesDeUsurio := (Value <> ftmp_HabilitarAUsuario);
  ftmp_HabilitarAUsuario := Value;
end;

procedure TMenuAplicacion.ValidarMenuPadreDiferenteASiMismo;
begin
  if isAssigned and (ID = PadreID) then
    Aplicacion.RaiseExceptionCreate(aplicacion.sesion.ResourceAllocator.Traducir('El menu Padre debe diferir del menu hijo'));
end;

{ TMenuAplicacionDM }

Class function TMenuAplicacionDM.TableName: string;
begin
  Result := 'Menues';
end;

class function TMenuAplicacionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMenuAplicacionDM.ID_FieldName: string;
begin
  Result := 'MenuID';
end;

procedure TMenuAplicacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TMenuAplicacion(PDObject) do
  begin
    IDField[_PadreID]                   := FPadreID;
    StringField[_Descripcion]           := Descripcion;
    BooleanField[_EsInactivo]           := EsInactivo;
    StringField[_NombreClaseFormulario] := NombreClaseFormulario;
    IntegerField[_Orden]                := Orden;
//    IntegerField[_TipoDeVentanaID]      := TipoDeVentanaID;
    StringField[_CaptionIcono]          := FCaptionIcono;
  end;
end;

procedure TMenuAplicacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TMenuAplicacion(PDObject) do
  begin
    PadreID               := IDField[_PadreID];
    Descripcion           := StringField[_Descripcion];
    EsInactivo            := BooleanField[_EsInactivo];
    NombreClaseFormulario := StringField[_NombreClaseFormulario];
    Orden                 := IntegerField[_Orden];
//    TipoDeVentanaId       := IntegerField[_TipoDeVentanaID];
    CaptionIcono          := StringField[_CaptionIcono];
  end;
end;

{ TMenuAplicacionList }

function TMenuAplicacionList.GetMEnu: TMenuAplicacion;
begin
  Result := TMenuAplicacion(CurrentObject);
end;

constructor TMenuAplicacionList.CreateMenuesPrincipales;
  Function WhereString : String;
  begin
    Result := TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._PadreID + ' is null ';
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;

begin
  inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateAll(False, WhereString, False, OrderByString ));
end;

constructor TMenuAplicacionList.CreateByDescripcionLike(_D: String);
  Function WhereString : String;
begin
  if (_D[1] <> '%') then
    _D := '%' + _D;
    Result := 'Lower(' + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._Descripcion + ') Like ' + Quotedstr(lowerCase(_D) + '%');
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;

begin
  inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateAll(False, WhereString, False, OrderByString));
end;

constructor TMenuAplicacionList.CreateByMenuPadre(m: TMenuAplicacion);
  Function WhereString : String;
  begin
    Result := '(' + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._PadreID  + ' = ' + IntToStr(M.ID) + ')';
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;
begin
  inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateALl(False, WhereString, False, OrderByString));
end;

constructor TMenuAplicacionList.CreateByNombreClaseFormulario(_NC: String);
  Function WhereString : String;
  begin
    Result := 'Lower(' + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._NombreClaseFormulario + ') = ' + QuotedStr(LowerCase(_NC));
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;
begin
  inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateAll(False, WhereString, false, OrderByString));
end;

constructor TMenuAplicacionList.CreateByNombreClaseFormularioLike(_NC: String);
  Function WhereString : String;
  begin
    if (_NC[1] <> '%') then
      _NC := '%' + _NC;
      Result := 'Lower(' + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._NombreClaseFormulario + ') Like ' + QuotedStr(LowerCase(_NC) + '%');
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;
begin
  inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateAll(False, WhereString, false, OrderByString));
end;

constructor TMenuAplicacionList.CreateAll(_SoloForms: Boolean);
  function WhereString: String;
  begin
    Result := IfThen( _SoloForms, '( ' + TMenuAplicacionDM._nombreClaseFormulario + ' > ' + quotedstr('')+')','');
  end;
  function OrderByString: String;
  begin
    Result := TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._PadreID+', '+ TMenuAplicacionDM.TableName +'.'+ TMenuAplicacionDM._Orden;
  end;

begin
    inherited Create(TMenuAplicacion, TMenuAplicacionDM.CreateAll( False, WhereString, False ,OrderByString ));
end;

function TMenuAplicacionList.CreateNewObject: TPDObject;
begin
  Result := TMenuAplicacion.Create;
end;

{ TResourceLanguage }
constructor TResourceLanguage.Create;
begin
  inherited;
  DMObject := Aplicacion.DMProvider.GetGlobalDM(TResourceLanguageDM);
  FCodigoInternoSifab := Null;
end;

function TResourceLanguage.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Genericas', 'DescripcionItemCorta = ' + QuotedStr( Codigo ) + ' and CodigoTabla = 13' , 'CodigoItem');
  Result := FCodigoInternoSifab;
end;

function TResourceLanguage.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TResourceLanguageList;
end;

function TResourceLanguage.GetResourceStrings: TResourceStringList;
begin
  if FResourceStrings = nil then
    FResourceStrings := TResourceStringList.CreateByLanguage(self);

  Result := FResourceStrings;
end;

{ TResourceLanguageDM }

Class function TResourceLanguageDM.TableName: string;
begin
  Result := 'RESOURCELANGUAGES';
end;

class function TResourceLanguageDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TResourceLanguageDM.ID_FieldName: string;
begin
  Result := 'ResourceLanguageID';
end;

procedure TResourceLanguageDM.PopulateFields(PDObject: TPDObject);
begin
  with TResourceLanguage(PDObject) do
  begin
    StringField[_Codigo]                := Codigo;
    StringField[_resourceLanguage]      := Descripcion;
    BooleanField[_isDefault]            := FisDefault;
    StringField[_DescripcionTraduccion] := FDescripcionTraduccion;
    BooleanField[_EsInactivo]           := EsInactivo;
  end;
end;

procedure TResourceLanguageDM.PopulateObject(PDObject: TPDObject);
begin
  with TResourceLanguage(PDObject) do
  begin
    Codigo                 := StringField[_Codigo];
    Descripcion            := StringField[_ResourceLanguage];
    FIsDefault             := BooleanField[_IsDefault];
    FDescripcionTraduccion := StringField[_DescripcionTraduccion];
    EsInactivo             := BooleanField[_EsInactivo];
  end;
end;

{ TResourceLanguageList }
function TResourceLanguageList.getResourceLanguage: TResourceLanguage;
begin
  Result := TResourceLanguage(CurrentObject);
end;

constructor TResourceLanguageList.CreateAll;
begin
  inherited Create(TResourceLanguage, TResourceLanguageDM.CreateAll(False));
end;

function TResourceLanguageList.CreateNewObject: TPDObject;
begin
  Result := TResourceLanguage.Create;
end;

{ TResourceString }
constructor TResourceString.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TResourceStringDM);
  Ftext := null;
end;

function TResourceString.GetResource: TResource;
begin
  if FResource = nil then
    GetObject(TResource, FResource, FResourceID);

  Result := TResource(FResource);
end;

function TResourceString.getResourceLanguage: TResourceLanguage;
begin
  if FResourceLanguage = nil then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);

  Result := TResourceLanguage(FResourceLanguage);
end;

procedure TResourceString.SetResourceID(const Value: TObjectID);
begin
  if (Value <> FResourceID) and assigned(FResource) then
    FreeAndNil(FResource);

  FResourceID := Value;
end;

procedure TResourceString.SetresourceLanguageID(const Value: TObjectID);
begin
  if (Value <> FresourceLanguageID) and assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);

  FresourceLanguageID := Value;
end;

{ TResourceStringDM }
Class function TResourceStringDM.TableName: string;
begin
  Result := 'RESOURCESTRINGS';
end;

class function TResourceStringDM.ID_FieldName: string;
begin
  Result := 'ResourceStringID';
end;

procedure TResourceStringDM.PopulateFields(PDObject: TPDObject);
begin
  with TResourceString(PDObject) do
  begin
    IDField[_ResourceID]         := ResourceID;
    IDField[_ResourceLanguageID] := ResourceLanguageID;
    StringField[_ResourceString] := Text;
  end;
end;

procedure TResourceStringDM.PopulateObject(PDObject: TPDObject);
begin
  with TResourceString(PDObject) do
  begin
    ResourceID         := IDField[_resourceID];
    ResourceLanguageID := IDField[_resourceLanguageID];
    Text               := StringField[_resourceString];
  end;
end;

{ TResourceStringList }
function TResourceStringList.GetresourceString: TResourceString;
begin
  Result := TResourceString(CurrentObject);
end;

constructor TResourceStringList.CreateByLanguage(Lang: TResourceLanguage);
  Function WhereString : String;
  begin
    Result := TResourceStringDM.TableName + '.' + TResourceStringDM._ResourceLanguageID + '=' + IntToStr(Lang.ID);
  end;
begin
  inherited Create(TResourceString, TResourceStringDM.CreateAll(False, WhereString));
end;

function TResourceStringList.CreateNewObject: TPDObject;
begin
  Result := TResourceString.Create;
end;

constructor TResourceStringList.CreateByResource(Resource: TResource);
  Function WhereString : String;
  begin
    Result := TResourceStringDM.Tablename + '.' + TResourceStringDM._ResourceID + '=' + IntToStr(Resource.ID);
  end;
begin
  inherited Create(TResourceString,TResourceStringDM.CreateAll(False, WhereString));
end;

Constructor TResourceStringList.CreateByResourceAndLanguage(Resource: TResource; Lang: TResourceLanguage);
  Function WhereString : String;
  begin
    Result := TResourceStringDM.Tablename + '.' + TResourceStringDM._ResourceID + '=' + IntToStr(Resource.ID) + ' and ' + TResourceStringDM.Tablename + '.' + TResourceStringDM._ResourceLanguageID + '=' + IntToStr(Lang.ID);
  end;
begin
  inherited Create(TResourceString, TResourceStringDM.CreateAll(False, WhereString));
end;

{ TDescriptible }

procedure TDescriptible.CrearTraductor(_ActiveLanguage: TResourceLanguage; _Traducciones: TTraduccionList);
begin
  FTraductor := TTraductor.Create(_ActiveLanguage, self, _Traducciones);
end;

constructor TDescriptible.Create;
begin
  inherited;
  Fdescripcion := null;
  solomayusculas := True;
end;

destructor TDescriptible.Destroy;
begin
  EliminarTraductor;
  inherited;
end;

procedure TDescriptible.EliminarTraductor;
begin
  if assigned(FTraductor) then
    FreeAndNil(FTraductor);
end;

function TDescriptible.getDescripcion: TString;
var
  trad: TString;
  comilla: TString;
begin
  Result := '';
  if (Fdescripcion = null) then
    exit;

  Fdescripcion := trim(Fdescripcion);
  If solomayusculas and (Fdescripcion > '') then
    Fdescripcion := AnsiUpperCase(Fdescripcion);
  // reemplazo comillas prohibidas
  comilla := #39; // '
  Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '"', '´´');
  Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, comilla,'´');
  Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '`', '´');
  Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '"', '´´');

  Result := Fdescripcion;

  if assigned(FTraductor) then
  begin
    trad := FTraductor.DescripcionTraducida;
    if (trad <> null) and (trad <> '') then
    begin
      Result := trad;

      If solomayusculas then
        Result := AnsiUpperCase(Result);
    end;
  end;

end;

function TDescriptible.GetTraductor: TTraductor;
begin
  Assert(assigned(FTraductor), 'El Traductor no esta inicializado');
  Result := FTraductor;
end;

procedure TDescriptible.setDescripcion(const Value: TString);

  procedure UppercaseLetrasEspeciales;
  begin
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'á', 'Á');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'é', 'É');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'í', 'Í');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ó', 'Ó');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ú', 'Ú');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ä', 'Ä');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ë', 'Ë');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ï', 'Ï');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ö', 'Ö');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ü', 'Ü');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, 'ñ', 'Ñ');
  end;
var
  comilla: TString;
begin
  if (Value = null) then
  begin
    Fdescripcion := Value;
    exit;
  end;

  if Fdescripcion <> trim(Value) then
  begin
    Fdescripcion := trim(Value);
    // reemplazo comillas prohibidas
    comilla := #39; // '
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '"', '´´');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, comilla, '´');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '`', '´');
    Fdescripcion := aplicacion.TextService.ReemplazarEn(Fdescripcion, '"', '´´');

    If solomayusculas then
    begin
      Fdescripcion := uppercase(Fdescripcion);
      UppercaseLetrasEspeciales;
    end;
  end
end;

{ TEmpresa }

procedure TAbstractEmpresa.AgregarAlPadron;
var
  PL  : TPadronList;
  PIL : TPadronItemList;
  PI  : TPadronItem;
  FechaPublicacion, FechaDesde, FechaHasta, CUITTmp : String;
  Procedure AgregarEnTablaImportacion (_PP : TPadronPublicacion ; _CUIT : String ; _Tabla : String );
  begin
    Aplicacion.Sesion.SqlQuery.Active     := False;
    Aplicacion.Sesion.SqlQuery.SQL.Clear;
    Aplicacion.Sesion.SqlQuery.SQL.Text := 'Select * from ' + _Tabla + ' Where NumeroDocumento = ' + QuotedStr( Aplicacion.TextService.ReemplazarEn(_Cuit, '-', '' ) );
    Aplicacion.Sesion.SqlQuery.Execute;

    if (Aplicacion.Sesion.SqlQuery.RecordCount > 0) then
      begin
        FechaPublicacion := Aplicacion.Sesion.SqlQuery.FieldByName('FechaPublicacion').Value;
        FechaDesde       := Aplicacion.Sesion.SqlQuery.FieldByName('FechaVigenciaDesde').Value;
        FechaHasta       := Aplicacion.Sesion.SqlQuery.FieldByName('FechaVigenciaHasta').Value;
        CUITTmp          := Aplicacion.Sesion.SqlQuery.FieldByName('NumeroDocumento').Value;
        TRY
          Aplicacion.Sesion.SqlQuery.Connection.StartTransaction;
          Aplicacion.Sesion.SqlQuery.SQLInsert.Text := 'Insert Into ' + TPadronItemDM.TableName + '(' +
                                                       TPadronItemDM._PadronPublicacionID + ', ' +
                                                       TPadronItemDM._FechaPublicacion    + ', ' +
                                                       TPadronItemDM._FechaVigenciaDesde  + ', ' +
                                                       TPadronItemDM._FechaVigenciaHasta  + ', ' +
                                                       TPadronItemDM._CUIT                + ', ' +
                                                       TPadronItemDM._TipoDeContribuyente + ', ' +
                                                       TPadronItemDM._AltaBajaSujeto      + ', ' +
                                                       TPadronItemDM._CambioAlicuota      + ', ' +
                                                       TPadronItemDM._AlicuotaPercepcion  + ', ' +
                                                       TPadronItemDM._AlicuotaRetencion   + ')';
          Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + ' Values (' +
                                                       IntToStr(_PP.ID) + ', ' +
                                                       QuotedStr( AnsiLeftStr(FechaPublicacion, 2) + '/' + AnsiMidStr( FechaPublicacion, 3, 2 ) + '/' +   AnsiRightStr(FechaPublicacion, 4) ) + ', ' +
                                                       QuotedStr( AnsiLeftStr(FechaDesde, 2) + '/' + AnsiMidStr( FechaDesde, 3, 2 ) + '/' +   AnsiRightStr(FechaDesde, 4) ) + ', ' +
                                                       QuotedStr( AnsiLeftStr(FechaHasta, 2) + '/' + AnsiMidStr( FechaHasta, 3, 2 ) + '/' +   AnsiRightStr(FechaHasta, 4) ) + ', ' +
                                                       QuotedStr(AnsiLeftStr(CUITTmp, 2) + '-' + AnsiMidStr(CUITTmp, 3, 8 ) + '-' +   AnsiRightStr(CUITTmp, 1) ) + ', ' +
                                                       QuotedStr(Aplicacion.Sesion.SqlQuery.FieldByName('TipoDeContribuyente').Value) + ', ' +
                                                       QuotedStr(Aplicacion.Sesion.SqlQuery.FieldByName('AltaBajaSujeto').Value) + ', ' +
                                                       QuotedStr(Aplicacion.Sesion.SqlQuery.FieldByName('CambioAlicuota').Value) + ', ';

          if assigned(  Aplicacion.Sesion.SqlQuery.FindField('Tipo') ) then
            begin
              if Aplicacion.Sesion.SqlQuery.FieldByName('Tipo').Value = 'P' then
                begin
                    Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + Aplicacion.TextService.ReemplazarEn( Aplicacion.Sesion.SqlQuery.FieldByName('Alicuota').Value, ',' , '.' ) + ', ';
                    Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + '0)'
                end
              else if Aplicacion.Sesion.SqlQuery.FieldByName('Tipo').Value = 'R' then
                begin
                  Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + '0, ';
                  Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + Aplicacion.TextService.ReemplazarEn( Aplicacion.Sesion.SqlQuery.FieldByName('Alicuota').Value, ',' , '.' ) + ' )'
                end
            end
          else
            begin
              Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + Aplicacion.TextService.ReemplazarEn( Aplicacion.Sesion.SqlQuery.FieldByName('AlicuotaPercepcion').Value, ',' , '.' ) + ', ';
              Aplicacion.Sesion.SqlQuery.SQLInsert.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text + Aplicacion.TextService.ReemplazarEn( Aplicacion.Sesion.SqlQuery.FieldByName('AlicuotaRetencion').Value, ',' , '.' ) + ' )';
            end;
          Aplicacion.Sesion.SqlQuery.Active     := False;
          Aplicacion.Sesion.SqlQuery.SQL.Clear;
          Aplicacion.Sesion.SqlQuery.SQL.Text := Aplicacion.Sesion.SqlQuery.SQLInsert.Text;
          Aplicacion.Sesion.SqlQuery.Execute;
          Aplicacion.Sesion.SqlQuery.Connection.Commit;
        EXCEPT
          Aplicacion.Sesion.SqlQuery.Connection.Rollback;
        END;
      end;
  end;
begin
  try
    PL := TPadronList.CreateAll(True);
    PL.First;
    while not PL.IsLast do
      begin
        PIL := TPadronItemList.CreateByPadronFechaIncluidaAndEmpresa( PL.Actual  ,DateToStr( Aplicacion.DateTimeService.FechaActual) , TEmpresa( Self ) );
        if (PIL.Count = 0) and (PL.Actual.TablaImportacion >'')  then // no se encontró en el padron
          AgregarEnTablaImportacion( PL.Actual.PublicacionActual, Self.CUIT, PL.Actual.TablaImportacion );
        PL.Next;
      end;
  finally
    if Assigned(PIL) then
      FreeAndNil( PIL );
    FreeAndNil( PL) ;
  end;
end;

procedure TAbstractEmpresa.AgregarDireccionLegal;
var
  D: TDeposito;
begin
  if (DepositosDeEmpresa.Count = 0) or not DepositosDeEmpresa.FindByDescripcion(Aplicacion.ParametrosDelSistema.DireccionLegal) then
    begin
      D                      := TDeposito.Create;
      D.CodigoSifab          := Aplicacion.TextService.RellenarAlaIzquierda( IntToStr(DepositosDeEmpresa.Count + 1), '0', 2 );
      D.Descripcion          := Aplicacion.ParametrosDelSistema.DireccionLegal;
      D.EmpresaID            := ID;
      D.Calle                := Calle;
      D.NumeroCalle          := NumeroCalle;
      D.Piso                 := Piso;
      D.Departamento         := Departamento;
      D.Edificio             := Edificio;
      D.LocalidadID          := LocalidadID;
      D.Observacion          := ObservacionDeUbicacion;
      D.FormatoDeDireccionID := FormatoDeDireccionID;
      D.Save;
      DepositosDeEmpresa.Add(D);
      if EsCliente then
        DireccionDeEntregaID := D.ID;
      D.NilObject;
    end
  else if DepositosDeEmpresa.FindByDescripcion(Aplicacion.ParametrosDelSistema.DireccionLegal) then
    begin
      DepositosDeEmpresa.Actual.Calle                := Calle;
      DepositosDeEmpresa.Actual.NumeroCalle          := NumeroCalle;
      DepositosDeEmpresa.Actual.Piso                 := Piso;
      DepositosDeEmpresa.Actual.Departamento         := Departamento;
      DepositosDeEmpresa.Actual.Edificio             := Edificio;
      DepositosDeEmpresa.Actual.LocalidadID          := LocalidadID;
      DepositosDeEmpresa.Actual.Observacion          := ObservacionDeUbicacion;
      DepositosDeEmpresa.Actual.FormatoDeDireccionID := FormatoDeDireccionID;
      DepositosDeEmpresa.Actual.EsInactivo           := EsInactivo;
      DepositosDeEmpresa.Actual.Save;
    end;
end;

function TAbstractEmpresa.AlicuotaImpuesto(_Imp: TImpuestoConcepto; _Fecha: TFecha; _EsVenta : Boolean): TReal;
var
  PIL : TPadronItemList;

begin
  Result := _Imp.Alicuota;
  _Imp.Padrones.First;

  while not _Imp.Padrones.IsLast do
    begin
      try
        PIL := TPadronItemList.CreateByPadronFechaIncluidaAndEmpresa(_Imp.Padrones.actual.Padron, DateToStr(_Fecha), TEmpresa(Self) );
        if (PIL.Count > 0) then
          begin
            PIL.first;
            if _EsVenta then
              Result := PIL.Actual.AlicuotaPercepcion
            else
              Result := PIL.Actual.AlicuotaRetencion;
            exit;
          end;
      finally
        FreeAndNil(PIL);
      end;
      _Imp.Padrones.Next;
    end;
end;

constructor TAbstractEmpresa.Create;
begin
  inherited;
  SaveSqlLog                  := True;
  DMObject                    := Aplicacion.DMProvider.GetGlobalDM(TAbstractEmpresaDM);
  FClassNameComentario        := 'TEmpresa';
  LargoCodigo                 := aplicacion.LargoCodigos.LargoEmpresa;
  FesProveedor                := False;
  FesCliente                  := False;
  FEsPersonaFisica            := False;
  FEsInactivo                 := False;
  FesFlete                    := False;
  FesBanco                    := False;
  FEsExportacion              := False;
  RellenarCodigo              := True;
  EsNuevo                     := True;
  FCalle                      := '';
  FPiso                       := '';
  FDepartamento               := '';
  FPorcentajeDeTolerancia     := 0;
  FEvaluarExcedente           := False;
  FNumeroCalle                := '';
  FCodigoIDImpositivoExterior := null;
  FCodigoInternoSifab         := 0;
  FesLicenciatario            := null;
  FMarcaAsociadaDefaultID     := NullID;
  FMarcaDefaultID             := NullID;
  FMarcaDefault               := Nil;
  FProgramarCalidad           := False;
  FIDTeamplace                := Null;
  FDiasPromedioDePago         := 0;
  FCondicionDePagoEnDias      := -777;
end;

procedure TAbstractEmpresa.Delete;
begin
  if (depositosDeEmpresa.Count = 1) then
  begin
    depositosDeEmpresa.First;
    depositosDeEmpresa.Actual.sePuedeBorrarDireccionLegal := True;
    depositosDeEmpresa.DeleteCurrent;
  end;
  inherited Delete;
end;

{ TEmpresaDM }
Class function TAbstractEmpresaDM.TableName: string;
begin
  Result := 'EMPRESAS';
end;

class function TAbstractEmpresaDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  var
    CamposTablaEmpresas           : String;
    CamposTablaTelefonos          : String;
    CamposTablaPaises             : String;
    CamposTablaProvincias         : String;
    CamposTablaLocalidades        : String;
    CamposTablaGruposDeVendedores : String;
    CamposTablaGruposDeVendedoresInicial : String;
    CamposTablaActividades        : String;
    CamposTablaCanalDeDistribucion: String;
    CamposTablaCategoriasDeCliente: String;
    CamposTablaCobradores         : String;
    CamposTablaCondicionesDeCompra: String;
    CamposTablaCondicionesDeVentaDetalle  : String;
    CamposTablaCondicionesDeVenta : String;
    CamposTablaRankings           : String;
    CamposTablaMarcas             : String;
    CamposTablaFletes             : String;
    CamposTablaListasDePrecio     : String;
    CamposTablaDepositos          : String;
    CamposTablaNivelDeServicio    : String;
    CamposTablaIIBB               : String;
  begin
    CamposTablaEmpresas            := TableName + '.*';
    CamposTablaTelefonos           := 'T.'  + TTelefonoDeEmpresaDM._Telefono     + ' as ' + _CCTelefonoDescripcion;
    CamposTablaPaises              := 'PS.' + TPaisDM._Descripcion               + ' as ' + _CCPaisDescripcion;
    CamposTablaProvincias          := 'P.'  + TProvinciaDM._Descripcion          + ' as ' + _CCProvinciaDescripcion;
    CamposTablaLocalidades         := 'L.'  + TLocalidadDM._Descripcion          + ' as ' + _CCLocalidadDescripcion;
    CamposTablaGruposDeVendedores  := 'GV.' + TGrupoDeVendedorDM._Descripcion    + ' as ' + _CCGrupoDeVendedorDescripcion;
    CamposTablaGruposDeVendedoresInicial  := 'GVI.' + TGrupoDeVendedorDM._Descripcion    + ' as ' + _CCGrupoDeVendedorInicialDescripcion;
    CamposTablaActividades         := 'AC.' + TActividadDM._Descripcion          + ' as ' + _CCActividadDescripcion;
    CamposTablaCanalDeDistribucion := 'CDD.' + TCanalDeDistribucionDM._Descripcion + ' as ' + _CCCanalDeDistribucion;
    CamposTablaCategoriasDeCliente := 'CC.' + TCategoriaDeClienteDM._Descripcion + ' as ' + _CCCategoriaDeClienteDescripcion;
    CamposTablaNivelDeServicio     :=                                'NS.' + TNivelDeServicioDeClienteDM._Descripcion        + ' as ' + _CCNivelDeServicioDeCliente;
    CamposTablaNivelDeServicio     := CamposTablaNivelDeServicio + ', NS.' + TNivelDeServicioDeClienteDM._Ponderacion        + ' as ' + _CCNivelDeServicioDeClientePonderacion;
    CamposTablaNivelDeServicio     := CamposTablaNivelDeServicio + ', NS.' + TNivelDeServicioDeClienteDM._ColorIdentificador + ' as ' + _CCNivelDeServicioDeClienteColorIdentificador;
    CamposTablaCobradores          := 'CO.' + TCobradorDM._apellido              + ' as ' + _CCCobradorDescripcion;
    CamposTablaCondicionesDeCompra := 'CCOMPRA.' + TCondicionDeCompraDM._Descripcion   + ' as ' + _CCCondicionDeCompraDescripcion;
    CamposTablaCondicionesDeVentaDetalle := 'CVD.' + TCondicionDeVentaDetalleDM._Descripcion   + ' as ' + _CCCondicionDeVentaDetalleDescripcion;
    CamposTablaCondicionesDeVenta  := 'CV.' + TCondicionDeVentaDM._Descripcion   + ' as ' + _CCCondicionDeVentaDescripcion;
    CamposTablaMarcas              := 'MA.' + TMarcaDM._Descripcion              + ' as ' + _CCMarcaDefaultDescripcion;
    CamposTablaFletes              := 'FL.' + TAbstractEmpresaDM._Descripcion    + ' as ' + _CCFleteDescripcion;
    CamposTablaListasDePrecio      := 'LP.' + TListadePrecioDM._Descripcion      + ' as ' + _CCListaDePrecioDescripcion;
    CamposTablaDepositos           := 'DP.' + TDepositoDM._Descripcion           + ' as ' + _CCDireccionDeEntregaDescripcion;
    CamposTablaRankings            := 'RA.' + TRankingCrediticioDM._Descripcion  + ' as ' + _CCRankingCrediticioDescripcion ;
    CamposTablaRankings            := CamposTablaRankings  + ',RA.' + TRankingCrediticioDM._ConfeccionaPedido  + ' as ' + _CCRankingCrediticioConfeccionaPedido;
    CamposTablaRankings            := CamposTablaRankings  + ',RA.' + TRankingCrediticioDM._ConfeccionaRemito  + ' as ' + _CCRankingCrediticioConfeccionaRemito;
    CamposTablaRankings            := CamposTablaRankings  + ',RA.' + TRankingCrediticioDM._ConfeccionaFactura + ' as ' + _CCRankingCrediticioConfeccionaFactura;
    CamposTablaRankings            := CamposTablaRankings  + ',RA.' + TRankingCrediticioDM._EsContraEntrega    + ' as ' + _CCRankingCrediticioEsContraEntrega;
    CamposTablaIIBB                := 'CI.' + TCondicionDeIngresosBrutosDM._Descripcion  + ' as ' + _CCCondicionDeIIBBDescripcion ;

    Result :=          CamposTablaEmpresas                  + ', ';
    Result := Result + CamposTablaLocalidades               + ', ';
    Result := Result + CamposTablaProvincias                + ', ';
    Result := Result + CamposTablaPaises                    + ', ';
    Result := Result + CamposTablaGruposDeVendedores        + ', ';
    Result := Result + CamposTablaGruposDeVendedoresInicial + ', ';
    Result := Result + CamposTablaTelefonos                 + ', ';
    Result := Result + CamposTablaActividades               + ', ';
    Result := Result + CamposTablaCanalDeDistribucion       + ', ';
    Result := Result + CamposTablaCategoriasDeCliente       + ', ';
    Result := Result + CamposTablaNivelDeServicio           + ', ';
    Result := Result + CamposTablaCobradores                + ', ';
    Result := Result + CamposTablaCondicionesDeCompra       + ', ';
    Result := Result + CamposTablaCondicionesDeVentaDetalle         + ', ';
    Result := Result + CamposTablaCondicionesDeVenta        + ', ';
    Result := Result + CamposTablaRankings                  + ', ';
    Result := Result + CamposTablaMarcas                    + ', ';
    Result := Result + CamposTablaFletes                    + ', ';
    Result := Result + CamposTablaListasDePrecio            + ', ';
    Result := Result + CamposTablaIIBB                      + ', ';
    Result := Result + CamposTablaDepositos;
  end;

  Function LeftJoinString : String;
  var
    IDNameTablaEmpresas,ID1NameTablaEmpresas,ID2NameTablaEmpresas,ID3NameTablaEmpresas : String;
    ID2INameTablaEmpresas : String;
    ID4NameTablaEmpresas, ID5NameTablaEmpresas, ID6NameTablaEmpresas, ID7NameTablaEmpresas, ID77NameTablaEmpresas, ID8NameTablaEmpresas, ID9NameTablaEmpresas, ID10NameTablaEmpresas : string;
    ID11NameTablaEmpresas, ID12NameTablaEmpresas, ID13NameTablaEmpresas, ID14NameTablaEmpresas, ID15NameTablaEmpresas : string;
    ID01NameTablaMarcasAsociadas : String;
    ID02NameTablaMarcasAsociadas : String;
    IDNameTablaLocalidades,ID1NameTablaLocalidades : String;
    IDNameTablaProvincias,ID1NameTablaProvincias   : String;
    IDNameTablaPaises                              : String;
    IDNameTablaGrupoDeVendedores                   : String;
    IDNameTablaGrupoDeVendedoresInicial            : String;
    IDNameTablaTelefonos                           : String;
    IDNameTablaActividades                         : String;
    IDNameTablaActividadesCanadDistribucion        : String;
    IDNameTablaCanalesDeDistribucion               : String;
    IDNameTablaCategoriasDeCliente                 : String;
    IDNameTablaCobradores                          : String;
    IDNameTablaCondicionesDeCompra                 : String;
    IDNameTablaCondicionesDeVentaDetalle           : String;
    IDNameTablaCondicionesDeVenta                  : String;
    IDNameTablaRankings                            : String;
    IDNameTablaMarcas                              : String;
    IDNameTablaFletes                              : String;
    IDNameTablaListasDePrecio                      : String;
    IDNameTablaDepositos                           : String;
    IDNameTablaNivelesDeServicio                   : String;
    IDNameTablaCondicionesDeIIBB                   : String;
  begin
    IDNameTablaEmpresas          := TableName + '.' + ID_FieldName;
    ID1NameTablaEmpresas         := TableName + '.' + _localidadID;
    ID2NameTablaEmpresas         := TableName + '.' + _GrupoDeVendedorID;
    ID2INameTablaEmpresas        := TableName + '.' + _GrupoDeVendedorInicialID;
    ID3NameTablaEmpresas         := TableName + '.' + _TelefonoEmpresaDefaultID;
    ID4NameTablaEmpresas         := TableName + '.' + _ActividadID;
    ID5NameTablaEmpresas         := TableName + '.' + _CategoriaDeClienteID;
    ID6NameTablaEmpresas         := TableName + '.' + _CobradorID;
    ID7NameTablaEmpresas         := TableName + '.' + _CondicionDeVentaDetalleID;
    ID77NameTablaEmpresas        := TableName + '.' + _CondicionDeCompraID;
    ID8NameTablaEmpresas         := TableName + '.' + _CondicionDeVentaID;
    ID9NameTablaEmpresas         := TableName + '.' + _RankingCrediticioID;
    ID10NameTablaEmpresas        := TableName + '.' + _MarcaAsociadaDefaultID;
    ID11NameTablaEmpresas        := TableName + '.' + _EmpresaFleteID;
    ID12NameTablaEmpresas        := TableName + '.' + _ListaDePrecioID;
    ID13NameTablaEmpresas        := TableName + '.' + _DepositoDeEntregaID;
    ID14NameTablaEmpresas        := TableName + '.' + _NivelDeServicioDeClienteID;
    ID15NameTablaEmpresas        := TableName + '.' + _CondicionDeIngresosBrutosID;

    ID01NameTablaMarcasAsociadas   := 'MASO.'  + TMarcaAsociadaDM.ID_FieldName;
    ID02NameTablaMarcasAsociadas   := 'MASO.'  + TMarcaAsociadaDM._MarcaID;
    IDNameTablaLocalidades         := 'L.'  + TLocalidadDM.ID_FieldName;
    ID1NameTablaLocalidades        := 'L.'  + TLocalidadDM._ProvinciaID;
    IDNameTablaProvincias          := 'P.'  + TProvinciaDM.ID_FieldName;
    ID1NameTablaProvincias         := 'P.'  + TProvinciaDM._PaisID;
    IDNameTablaPaises              := 'PS.' + TPaisDM.ID_FieldName;
    IDNameTablaGrupoDeVendedores   := 'GV.' + TGrupoDeVendedorDM.ID_FieldName;
    IDNameTablaGrupoDeVendedoresInicial   := 'GVI.' + TGrupoDeVendedorDM.ID_FieldName;
    IDNameTablaTelefonos           := 'T.'  + TTelefonoDeEmpresaDM.ID_FieldName;
    IDNameTablaActividades         := 'AC.' + TActividadDM.ID_FieldName;
    IDNameTablaActividadesCanadDistribucion := 'AC.' + TActividadDM._CanalDeDistribucionID;
    IDNameTablaCanalesDeDistribucion        := 'CDD.' + TCanalDeDistribucionDM.ID_FieldName;
    IDNameTablaCategoriasDeCliente := 'CC.' + TCategoriaDeClienteDM.ID_FieldName;
    IDNameTablaNivelesDeServicio   := 'NS.' + TNivelDeServicioDeClienteDM.ID_FieldName;
    IDNameTablaCobradores          := 'CO.' + TCobradorDM.ID_FieldName;
    IDNameTablaCondicionesDeCompra := 'CCOMPRA.' + TCondicionDeCompraDM.ID_FieldName;
    IDNameTablaCondicionesDeVentaDetalle := 'CVD.' + TCondicionDeVentaDetalleDM.ID_FieldName;
    IDNameTablaCondicionesDeVenta  := 'CV.' + TCondicionDeVentaDM.ID_FieldName;
    IDNameTablaRankings            := 'RA.' + TRankingCrediticioDM.ID_FieldName;
    IDNameTablaMarcas              := 'MA.' + TMarcaDM.ID_FieldName;
    IDNameTablaFletes              := 'FL.' + TAbstractEmpresaDM.ID_FieldName;
    IDNameTablaListasDePrecio      := 'LP.' + TListadePrecioDM.ID_FieldName;
    IDNameTablaDepositos           := 'DP.' + TDepositoDM.ID_FieldName;
    IDNameTablaCondicionesDeIIBB   := 'CI.' + TCondicionDeIngresosBrutosDM.ID_FieldName;
    Result :=          ' Left Join ' + TLocalidadDM.TableName          + ' L  on (' + ID1NameTablaEmpresas    + '=' + IDNameTablaLocalidades         + ') ';
    Result := Result + ' Left Join ' + TProvinciaDM.TableName          + ' P  on (' + ID1NameTablaLocalidades + '=' + IDNameTablaProvincias          + ') ';
    Result := Result + ' Left Join ' + TPaisDM.TableName               + ' PS on (' + ID1NameTablaProvincias  + '=' + IDNameTablaPaises              + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName    + ' GV on (' + ID2NameTablaEmpresas    + '=' + IDNameTablaGrupoDeVendedores   + ') ';
    Result := Result + ' Left Join ' + TGrupoDeVendedorDM.TableName    + ' GVI on (' + ID2INameTablaEmpresas    + '=' + IDNameTablaGrupoDeVendedoresInicial   + ') ';
    Result := Result + ' Left Join ' + TTelefonoDeEmpresaDM.TableName  + ' T  on (' + ID3NameTablaEmpresas    + '=' + IDNameTablaTelefonos           + ') ';
    Result := Result + ' Left Join ' + TActividadDM.TableName          + ' AC on (' + ID4NameTablaEmpresas    + '=' + IDNameTablaActividades         + ') ';
    Result := Result + ' Left Join ' + TCanalDeDistribucionDM.TableName+ ' CDD on (' + IDNameTablaCanalesDeDistribucion + '=' + IDNameTablaActividadesCanadDistribucion + ') ';
    Result := Result + ' Left Join ' + TCategoriaDeClienteDM.TableName + ' CC on (' + ID5NameTablaEmpresas    + '=' + IDNameTablaCategoriasDeCliente + ') ';
    Result := Result + ' Left Join ' + TNivelDeServicioDeClienteDM.TableName+' NS on (' + ID14NameTablaEmpresas + '=' + IDNameTablaNivelesDeServicio + ') ';
    Result := Result + ' Left Join ' + TCobradorDM.TableName           + ' CO on (' + ID6NameTablaEmpresas    + '=' + IDNameTablaCobradores          + ') ';
    Result := Result + ' Left Join ' + TCondicionDeCompraDM.TableName  + ' CCOMPRA on (' + ID77NameTablaEmpresas    + '=' + IDNameTablaCondicionesDeCompra   + ') ';
    Result := Result + ' Left Join ' + TCondicionDeVentaDM.TableName   + ' CV on (' + ID8NameTablaEmpresas    + '=' + IDNameTablaCondicionesDeVenta  + ') ';
    Result := Result + ' Left Join ' + TCondicionDeVentaDetalleDM.TableName  + ' CVD on (' + ID7NameTablaEmpresas    + '=' + IDNameTablaCondicionesDeVentaDetalle   + ') ';

    Result := Result + ' Left Join ' + TRankingCrediticioDM.TableName  + ' RA on (' + ID9NameTablaEmpresas    + '=' + IDNameTablaRankings            + ') ';
    Result := Result + ' Left Join ' + TMarcaAsociadaDM.TableName      + ' MASO on (' + ID10NameTablaEmpresas+ '=' + ID01NameTablaMarcasAsociadas    + ') ';
    Result := Result + ' Left Join ' + TMarcaDM.TableName              + ' MA on (' + ID02NameTablaMarcasAsociadas + '=' + IDNameTablaMarcas              + ') ';
    Result := Result + ' Left Join ' + TAbstractEmpresaDM.TableName    + ' FL on (' + ID11NameTablaEmpresas   + '=' + IDNameTablaFletes              + ') ';
    Result := Result + ' Left Join ' + TListadePrecioDM.TableName      + ' LP on (' + ID12NameTablaEmpresas   + '=' + IDNameTablaListasDePrecio      + ') ';
    Result := Result + ' Left Join ' + TDepositoDM.TableName           + ' DP on (' + ID13NameTablaEmpresas   + '=' + IDNameTablaDepositos           + ') ';
    Result := Result + ' Left Join ' + TCondicionDeIngresosBrutosDM.TableName + ' CI on (' + ID15NameTablaEmpresas   + '=' + IDNameTablaCondicionesDeIIBB + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;


class function TAbstractEmpresaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TAbstractEmpresaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TAbstractEmpresaDM.ID_FieldName: string;
begin
  Result := 'EmpresaID';
end;

procedure TAbstractEmpresaDM.PopulateFields(PDObject: TPDObject);
begin
  with TAbstractEmpresa(PDObject) do
  begin
    BooleanField[_esCliente]                  := esCliente;
    BooleanField[_esInactivo]                 := EsInactivo;
    BooleanField[_esPersonaFisica]            := EsPersonaFisica;
    BooleanField[_esProveedor]                := esProveedor;
    BooleanField[_esBanco]                    := esBanco;
    BooleanField[_esFlete]                    := esFlete;
    DateTimeField[_FechaInicioActividad]      := FechaInicioActividad;
    DateTimeField[_FechaDeIngreso]            := FechaDeIngreso;
    FloatField[_descuentoEspecial]            := DescuentoEspecial;
    FloatField[_LimiteDeCredito]              := LimiteDeCredito;
    BooleanField[_EvaluarCredito]             := EvaluarCredito;
    BooleanField[_Alertar]                    := Alertar;
    IDField[_ActividadID]                     := ActividadID;
    IDField[_CategoriaDeClienteID]            := CategoriaDeClienteID;
    IDField[_CategoriaDeGananciasID]          := CategoriaDeGananciasID;
    IDField[_CategoriaDeProveedorID]          := CategoriaDeProveedorID;
    IDField[_CondicionDeCobranzaID]           := CondiciondeCobranzaID;
    IDField[_CondicionDeCompraID]             := CondicionDeCompraID;
    IDField[_CondicionDeIVAID]                := CondicionDeIvaID;
    IDField[_CondicionDeIngresosBrutosID]     := CondicionDeIngresosBrutosID;
    IDField[_NivelDeServicioDeClienteID]      := NivelDeServicioDeClienteID;
    IntegerField[_ToleranciaDePagoEnDias]     := ToleranciaDePagoEnDias;
    IDField[_CondicionDeVentaID]              := CondiciondeVentaID;
    IDField[_CondicionDeVentaDetalleID]       := CondicionDeVentaDetalleID;
    IDField[_DepositoDeEntregaID]             := DireccionDeEntregaID;
    IDField[_DepositoDeRetiroID]              := DireccionDeRetiroID;
    IDField[_FaxDefaultID]                    := FaxDefaultID;
    IDField[_EmpresaFleteID]                  := FleteID;
    DateTimeField[_VigenciaHastaGrupoDeVendedorInicial] := VigenciaHastaGrupoDeVendedorInicial;
    IDField[_GrupoDeVendedorInicialID]        := GrupoDeVendedorInicialID;
    IDField[_GrupoDeVendedorID]               := GrupoDeVendedorID;
    IDField[_JurisdiccionDeIngresosBRutosID]  := JurisdiccionDeIngresosBrutosID;
    IDField[_localidadID]                     := LocalidadID;
    IDField[_RankingCrediticioID]             := RankingCrediticioID;
    IDField[_TelefonoEmpresaDefaultID]        := TelefonoEmpresaDefaultID;
    IDField[_ZonaDeClienteID]                 := ZonaDeClienteID;
    IDField[_CobradorID]                      := CobradorID;
    StringField[_Codigo]                      := codigo;
    StringField[_Cuit]                        := CUIT;
    StringField[_CodigoPostal]                := CodigoPostal;
    StringField[_Calle]                       := Calle;
    StringField[_NumeroCalle]                 := NumeroCalle;
    StringField[_Piso]                        := Piso;
    StringField[_Departamento]                := Departamento;
    StringField[_Edificio]                    := Edificio;
    StringField[_ObservacionDeUbicacion]      := ObservacionDeUbicacion;
    StringField[_Descripcion]                 := descripcion;
    StringField[_HorarioDeReparto]            := HorarioDeReparto;
    StringField[_HorarioDeEntrega]            := HorarioDeEntrega;
    StringField[_HorarioDeRetiro]             := HorarioDeRetiro;
    StringField[_NumeroDeIngresosBrutos]      := NumeroDeIngresosBrutos;
    StringField[_PaginaWEB]                   := paginaWeb;
    IDField[_ContactoResponsableID]           := ContactoResponsableID;
    StringField[_UbicacionFilcar]             := UbicacionFilcar;
    StringField[_ValoresALaOrdenDe]           := ValoresALaOrdenDe;
    IDField[_MonedaDefaultID]                 := MonedaDefaultID;
    IDField[_MonedaDeLimiteDeCreditoID]       := MonedaDeLimiteDeCreditoID;
    StringField[_CodigoDeBanco]               := codigoDeBanco;
    StringField[_EmailEmpresarial]            := EmailEmpresarial;
    IDField[_EstadoDeBancoID]                 := EstadoDeBancoID;
    BooleanField[_EntregaTotal]               := EntregaTotal;
    BooleanField[_ImpuestosActivos]           := ImpuestosActivos;
    FloatField[_PorcentajeDeTolerancia]       := PorcentajeDeTolerancia;
    BooleanField[_EvaluarExcedente]           := EvaluarExcedente;
    StringField[_CodigoSistemaAnterior]       := CodigoSistemaAnterior;
    StringField[_Observaciones]               := Observaciones;
    IDField[_ListaDePrecioID]                 := ListaDePrecioID;
    IDField[_MarcaAsociadaDefaultID]          := MarcaAsociadaDefaultID;
    StringField[_IDImpositivoExterior]        := IDImpositivoExterior;
    IDField[_DepositoVirtualDeStockID]        := DepositoVirtualDeStockID;
    BooleanField[_EnActividad]                := EnActividad;
    BooleanField[_ProgramarCalidad]           := ProgramarCalidad;
    IDField[_FormatoDeDireccionID]            := FormatoDeDireccionID;
    IDField[_CuentaContableID]                := CuentaContableID;
    IDField[_TipoDeIdentificacionTributariaID]:= TipoDeIdentificacionTributariaID;
  end;
end;

procedure TAbstractEmpresaDM.PopulateObject(PDObject: TPDObject);
begin
  with TAbstractEmpresa(PDObject) do
  begin
    FEsNuevo                        := False;
    FActividadID                    := IDField[_ActividadID];
    FCategoriaDeClienteID           := IDField[_CategoriaDeClienteID];
    FCategoriaDeGananciasID         := IDField[_CategoriaDeGananciasID];
    FCategoriaDeProveedorID         := IDField[_CategoriaDeProveedorID];
    Fcodigo                         := StringField[_Codigo];
    FCondiciondeCobranzaID          := IDField[_CondicionDeCobranzaID];
    FCondicionDeCompraID            := IDField[_CondicionDeCompraID];
    FCondicionDeIvaID               := IDField[_CondicionDeIVAID];
    FCondicionDeIngresosBrutosID    := IDField[_CondicionDeIngresosBrutosID];
    FToleranciaDePagoEnDias         := IntegerField[_ToleranciaDePagoEnDias];
    FCondiciondeVentaID             := IDField[_CondicionDeVentaID];
    FCondicionDeVentaDetalleID      := IDField[_CondicionDeVentaDetalleID];
    FNivelDeServicioDeClienteID     := IDField[_NivelDeServicioDeClienteID];
    FCUIT                           := StringField[_Cuit];
    Fdescripcion                    := StringField[_Descripcion];
    FLimiteDeCredito                := FloatField[_LimiteDeCredito];
    FEvaluarCredito                 := FloatField[_EvaluarCredito];
    FAlertar                        := FloatField[_Alertar];
    FDescuentoEspecial              := FloatField[_descuentoEspecial];
    FCodigoPostal                   := StringField[_CodigoPostal];
    FCalle                          := StringField[_Calle];
    FNumeroCalle                    := StringField[_NumeroCalle];
    FPiso                           := StringField[_Piso];
    FDepartamento                   := StringField[_Departamento];
    FEdificio                       := StringField[_Edificio];
    FObservacionDeUbicacion         := StringField[_ObservacionDeUbicacion];
    FDireccionDeEntregaID           := IDField[_DepositoDeEntregaID];
    FDireccionDeRetiroID            := IDField[_DepositoDeRetiroID];
    FesCliente                      := BooleanField[_esCliente];
    FEsInactivo                     := BooleanField[_esInactivo];
    FEsPersonaFisica                := BooleanField[_esPersonaFisica];
    FesProveedor                    := BooleanField[_esProveedor];
    FFaxDefaultID                   := IDField[_FaxDefaultID];
    FFechaInicioActividad           := DateTimeField[_FechaInicioActividad];
    FFechaDeIngreso                 := DateTimeField[_FechaDeIngreso];
    FFleteID                        := IDField[_EmpresaFleteID];
    FVigenciaHastaGrupoDeVendedorInicial := DateTimeField[_VigenciaHastaGrupoDeVendedorInicial];
    FGrupoDeVendedorInicialID       := IDField[_GrupoDeVendedorInicialID];
    FGrupoDeVendedorID              := IDField[_GrupoDeVendedorID];
    FHorarioDeReparto               := StringField[_HorarioDeReparto];
    FHorarioDeEntrega               := StringField[_HorarioDeEntrega];
    FHorarioDeRetiro                := StringField[_HorarioDeRetiro];
    FJurisdiccionDeIngresosBrutosID := IDField[_JurisdiccionDeIngresosBRutosID];
    FLocalidadID                    := IDField[_localidadID];
    FCobradorID                     := IDField[_CobradorID];
    FNumeroDeIngresosBrutos         := StringField[_NumeroDeIngresosBrutos];
    FpaginaWeb                      := StringField[_PaginaWEB];
    FContactoResponsableID          := IDField[_ContactoResponsableID];
    FRankingCrediticioID            := IDField[_RankingCrediticioID];
    FTelefonoEmpresaDefaultID       := IDField[_TelefonoEmpresaDefaultID];
    FUbicacionFilcar                := StringField[_UbicacionFilcar];
    FValoresALaOrdenDe              := StringField[_ValoresALaOrdenDe];
    FZonaDeClienteID                := IDField[_ZonaDeClienteID];
    FMonedaDefaultID                := IDField[_MonedaDefaultID];
    FMonedaDeLimiteDeCreditoID      := IDField[_MonedaDeLimiteDeCreditoID];
    FesBanco                        := BooleanField[_esBanco];
    FesFlete                        := BooleanField[_esFlete];
    FcodigoDeBanco                  := StringField[_CodigoDeBanco];
    FEmailEmpresarial               := StringField[_EmailEmpresarial];
    FEstadoDeBancoID                := IDField[_EstadoDeBancoID];
    FEntregaTotal                   := BooleanField[_EntregaTotal];
    FImpuestosActivos               := BooleanField[_ImpuestosActivos];
    FPorcentajeDeTolerancia         := FloatField[_PorcentajeDeTolerancia];
    FEvaluarExcedente               := BooleanField[_EvaluarExcedente];
    FCodigoSistemaAnterior          := StringField[_CodigoSistemaAnterior];
    FObservaciones                  := StringField[_Observaciones];
    FListaDePrecioID                := IDField[_ListaDePrecioID];
    FMarcaAsociadaDefaultID         := IDField[_MarcaAsociadaDefaultID];
    FIDImpositivoExterior           := StringField[_IDImpositivoExterior];
    FDepositoVirtualDeStockID       := IDField[_DepositoVirtualDeStockID];
    FEnActividad                    := BooleanField[_EnActividad];
    FProgramarCalidad               := BooleanField[_ProgramarCalidad];
    FFormatoDeDireccionID           := IDField[_FormatoDeDireccionID];
    CuentaContableID                := IDField[_CuentaContableID];
    TipoDeIdentificacionTributariaID:= IDField[_TipoDeIdentificacionTributariaID];
    // del create compuesto
    FCCTelefonoDescripcion           := StringField[_CCTelefonoDescripcion];
    FCCPaisDescripcion               := StringField[_CCPaisDescripcion];
    FCCProvinciaDescripcion          := StringField[_CCProvinciaDescripcion];
    FCCLocalidadDescripcion          := StringField[_CCLocalidadDescripcion];
    FCCGrupoDeVendedorDescripcion    := StringField[_CCGrupoDeVendedorDescripcion];
    FCCGrupoDeVendedorInicialDescripcion    := StringField[_CCGrupoDeVendedorInicialDescripcion];
    FCCActividadDescripcion          := StringField[_CCActividadDescripcion];
    FCCCanalDeDistribucion           := StringField[_CCCanalDeDistribucion];
    FCCCategoriaDeClienteDescripcion := StringField[_CCCategoriaDeClienteDescripcion];
    FCCCobradorDescripcion           := StringField[_CCCobradorDescripcion];
    FCCCondicionDeCompraDescripcion  := StringField[_CCCondicionDeCompraDescripcion];
    FCCCondicionDeVentaDetalleDescripcion  := StringField[_CCCondicionDeVentaDetalleDescripcion];
    FCCCondicionDeVentaDescripcion   := StringField[_CCCondicionDeVentaDescripcion];
    FCCCondicionDeIIBBDescripcion    := StringField[_CCCondicionDeIIBBDescripcion];
    FCCRankingCrediticioDescripcion  := StringField[_CCRankingCrediticioDescripcion];
    FCCMarcaDefaultDescripcion       := StringField[_CCMarcaDefaultDescripcion];
    FCCFleteDescripcion              := StringField[_CCFleteDescripcion];
    FCCListaDePrecioDescripcion      := StringField[_CCListaDePrecioDescripcion];
    FCCDireccionDeEntregaDescripcion := StringField[_CCDireccionDeEntregaDescripcion];
    FCCRankingCrediticioConfeccionaPedido   := BooleanField[_CCRankingCrediticioConfeccionaPedido];
    FCCRankingCrediticioConfeccionaRemito   := BooleanField[_CCRankingCrediticioConfeccionaRemito];
    FCCRankingCrediticioConfeccionaFactura  := BooleanField[_CCRankingCrediticioConfeccionaFactura];
    FCCRankingCrediticioEsContraEntrega     := BooleanField[_CCRankingCrediticioEsContraEntrega];
    FCCNivelDeServicioDeCliente             := StringField[_CCNivelDeServicioDeCliente];
    FCCNivelDeServicioDeClientePonderacion  := StringField[_CCNivelDeServicioDeClientePonderacion];
    FCCNivelDeServicioDeClienteColorIdentificador := StringField[_CCNivelDeServicioDeClienteColorIdentificador];
  end;
end;

function TEmpresaList.CreateNewObject: TPDObject;
begin
  Result := TEmpresa.Create;
end;

constructor TEmpresaList.CreateAll( _SoloActivos: Boolean );
  Function OrderByString : String;
  begin
    Result := TAbstractEmpresaDM._EsCliente + ' Desc, ' +  TAbstractEmpresaDM._EnActividad + ' Desc, ' +  TAbstractEmpresaDM._EsInactivo + ', ' + TAbstractEmpresaDM._Codigo;
  end;
begin
  if (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.VendedorID <> NullID) then
    inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereForVendedor, _SoloActivos, OrderByString ))
  else
    inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll(False, '', _SoloActivos, OrderByString ));
end;

{ TEmpresa }
procedure TEmpresa.Delete;
begin
  if aplicacion.empresa.ID = self.ID Then
    Aplicacion.RaiseExceptionCreate( 'No se puede eliminar esta empresa por ser la predeterminada por el sistema');

  if self.telefonosDeEmpresa.Count > 0 Then
    Aplicacion.RaiseExceptionCreate( 'Debe eliminarse primero la lista de teléfonos para poder eliminar la empresa');

  if self.contactosDeEmpresa.Count > 0 Then
    Aplicacion.RaiseExceptionCreate( 'Debe eliminarse primero la lista de contactos para poder eliminar la empresa');

  if self.empresasAsociadas.Count > 0 Then
    Aplicacion.RaiseExceptionCreate('Debe eliminarse primero la lista de empresas asociadas para poder eliminar la empresa');

  if self.Licenciatarios.Count > 0 Then
    Aplicacion.RaiseExceptionCreate('Debe eliminarse primero la lista de licenciatarios para poder eliminar la empresa');

  if self.depositosDeEmpresa.Count > 1 Then
    // por default Esta la direccion legal
    Aplicacion.RaiseExceptionCreate('Deben eliminarse primero los depósitos para poder eliminar la empresa');

  if self.Marcas.Count > 0 Then
    Aplicacion.RaiseExceptionCreate( 'Deben eliminarse primero las marcas para poder eliminar la empresa');

  inherited;
end;

function TEmpresa.EsClienteAsociadoATribeca: Boolean;
var
  CATL: TEmpresaAsociadaList;
begin
  try
    CATL := TEmpresaAsociadaList.CreateByTribeca(self);
    Result := CATL.Count > 0;
  finally
    FreeAndNil(CATL);
  end;
end;

class procedure TEmpresa.FichaDeCliente(_E: TEmpresa; _ClntdtstMaster: TClientDataSet);
var
  ClntDtStMarcas: TClientDataSet;
  ClntDtStTelefonos: TClientDataSet;
  ClntDtStContactos: TClientDataSet;
  ClntDtStDepositos: TClientDataSet;
  ClntDtStEmpresasAsociadas: TClientDataSet;
  ClntDtStLicenciatarios: TClientDataSet;
  frxDBDtstMaster: TfrxDBDataset;
  frxDBDtstMarcas: TfrxDBDataset;
  frxDBDtstTelefonos: TfrxDBDataset;
  frxDBDtstContactos: TfrxDBDataset;
  frxDBDtstDepositos: TfrxDBDataset;
  frxDBDtstEmpresasAsociadas: TfrxDBDataset;
  frxDBDtstLicenciatarios: TfrxDBDataset;
  FrxFichaDeCliente: TfrxReport;
  frxPDFExport: TFrxPDFExport;

  procedure CompletarMarcas;
  begin
    if _E.Marcas.Count > 0 then
    begin
      ClntDtStMarcas.EmptyDataSet;
      _E.Marcas.First;
      repeat
        ClntDtStMarcas.Append;
        ClntDtStMarcas.FieldByName('ID').Value        := _E.Marcas.Actual.ID;
        ClntDtStMarcas.FieldByName('Marcas').AsString := _E.Marcas.Actual.marca.Descripcion;
        ClntDtStMarcas.FieldByName('EmpresaID').Value := _E.Marcas.Actual.empresaID;
        ClntDtStMarcas.Post;
        _E.Marcas.next;
      until _E.Marcas.IsLast;
    end;
  end;

  procedure CompletarTelefonos;
  begin
    if _E.telefonosDeEmpresa.Count > 0 then
    begin
      ClntDtStTelefonos.EmptyDataSet;
      _E.telefonosDeEmpresa.First;
      repeat
        ClntDtStTelefonos.Append;
        ClntDtStTelefonos.FieldByName('ID').Value := _E.telefonosDeEmpresa.Actual.ID;
        ClntDtStTelefonos.FieldByName('Descripcion').AsString := _E.telefonosDeEmpresa.Actual.Descripcion;
        ClntDtStTelefonos.FieldByName('Telefonos').AsString   := _E.telefonosDeEmpresa.Actual.Telefono;
        ClntDtStTelefonos.FieldByName('EmpresaID').Value      := _E.telefonosDeEmpresa.Actual.empresaID;
        ClntDtStTelefonos.Post;
        _E.telefonosDeEmpresa.next;
      until _E.telefonosDeEmpresa.IsLast;
    end;
  end;

  procedure CompletarContactos;
  begin
    if _E.contactosDeEmpresa.Count > 0 then
    begin
      ClntDtStContactos.EmptyDataSet;
      _E.contactosDeEmpresa.First;
      repeat
        ClntDtStContactos.Append;
        ClntDtStContactos.FieldByName('ID').Value := _E.contactosDeEmpresa.Actual.ID;
        ClntDtStContactos.FieldByName('Descripcion').AsString := _E.contactosDeEmpresa.Actual.Descripcion;
        ClntDtStContactos.FieldByName('Email').AsString := _E.contactosDeEmpresa.Actual.Email;
        ClntDtStContactos.FieldByName('Telefono').AsString := _E.contactosDeEmpresa.Actual.Telefono;
        ClntDtStContactos.FieldByName('NumeroInterno').AsString := _E.contactosDeEmpresa.Actual.NumeroDeInterno;
        ClntDtStContactos.FieldByName('TipoMail').AsString := _E.contactosDeEmpresa.Actual.CargoDeEmpresa.Descripcion;
        ClntDtStContactos.FieldByName('EmpresaID').Value := _E.contactosDeEmpresa.Actual.empresaID;
        ClntDtStContactos.Post;
        _E.contactosDeEmpresa.next;
      until _E.contactosDeEmpresa.IsLast;
    end;
  end;

  procedure CompletarDepositos;
  begin
    if _E.depositosDeEmpresa.Count > 0 then
    begin
      ClntDtStDepositos.EmptyDataSet;
      _E.depositosDeEmpresa.First;
      repeat
        ClntDtStDepositos.Append;
        ClntDtStDepositos.FieldByName('ID').Value := _E.depositosDeEmpresa.Actual.ID;
        ClntDtStDepositos.FieldByName('Descripcion').AsString := _E.depositosDeEmpresa.Actual.Descripcion;
        ClntDtStDepositos.FieldByName('Direccion').AsString := _E.depositosDeEmpresa.Actual.Domicilio;
        ClntDtStDepositos.FieldByName('CP').AsString := _E.depositosDeEmpresa.Actual.Localidad.CodigoPostal;
        ClntDtStDepositos.FieldByName('Localidad').AsString := _E.depositosDeEmpresa.Actual.Localidad.DescripcionConProvinciaYPais;
        ClntDtStDepositos.FieldByName('EmpresaID').Value := _E.depositosDeEmpresa.Actual.empresaID;
        ClntDtStDepositos.Post;
        _E.depositosDeEmpresa.next;
      until _E.depositosDeEmpresa.IsLast;
    end;
  end;

  procedure CompletarLicenciatarios;
  begin
    if _E.Licenciatarios.Count > 0 then
    begin
      ClntDtStLicenciatarios.EmptyDataSet;
      _E.Licenciatarios.First;
      repeat
        ClntDtStLicenciatarios.Append;
        ClntDtStLicenciatarios.FieldByName('ID').Value             := _E.Licenciatarios.Actual.ID;
        ClntDtStLicenciatarios.FieldByName('EmpresaID').Value      := _E.Licenciatarios.Actual.EmpresaID;
        ClntDtStLicenciatarios.FieldByName('Codigo').AsString      := _E.Licenciatarios.Actual.CCLicenciatarioCodigo;
        ClntDtStLicenciatarios.FieldByName('RazonSocial').AsString := _E.Licenciatarios.Actual.CCLicenciatarioDescripcion;
        ClntDtStLicenciatarios.FieldByName('CUIT').AsString        := _E.Licenciatarios.Actual.CCLicenciatarioCUIT;
        ClntDtStLicenciatarios.Post;
        _E.Licenciatarios.next;
      until _E.Licenciatarios.IsLast;
    end;
  end;

  procedure CompletarEmpresasAsociadas;
  begin
    if _E.empresasAsociadas.Count > 0 then
    begin
      ClntDtStEmpresasAsociadas.EmptyDataSet;
      _E.empresasAsociadas.First;
      repeat
        ClntDtStEmpresasAsociadas.Append;
        ClntDtStEmpresasAsociadas.FieldByName('ID').Value             := _E.empresasAsociadas.Actual.ID;
        ClntDtStEmpresasAsociadas.FieldByName('Codigo').AsString      := _E.empresasAsociadas.Actual.CCCodigoEmpresaAsociada;
        ClntDtStEmpresasAsociadas.FieldByName('RazonSocial').AsString := _E.empresasAsociadas.Actual.CCDescripcionEmpresaAsociada;
        ClntDtStEmpresasAsociadas.FieldByName('CUIT').AsString        := _E.empresasAsociadas.Actual.CCCuitEmpresaAsociada;
        ClntDtStEmpresasAsociadas.FieldByName('EmpresaID').Value      := _E.empresasAsociadas.Actual.empresaID;
        ClntDtStEmpresasAsociadas.Post;
        _E.empresasAsociadas.next;
      until _E.empresasAsociadas.IsLast;
    end;
  end;

  procedure CrearComponentes;
  begin
    ClntDtStMarcas := TClientDataSet.Create(nil);
    ClntDtStMarcas.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteMarcas);
    ClntDtStMarcas.Open;
    frxDBDtstMarcas := TfrxDBDataset.Create(nil);
    frxDBDtstMarcas.Name := 'frxDBDtstMarcas';
    frxDBDtstMarcas.DataSet := ClntDtStMarcas;
    frxDBDtstMarcas.Open;

    ClntDtStTelefonos := TClientDataSet.Create(nil);
    ClntDtStTelefonos.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteTelefonos);
    ClntDtStTelefonos.Open;
    frxDBDtstTelefonos := TfrxDBDataset.Create(nil);
    frxDBDtstTelefonos.Name := 'frxDBDtstTelefonos';
    frxDBDtstTelefonos.DataSet := ClntDtStTelefonos;
    frxDBDtstTelefonos.Open;

    ClntDtStContactos := TClientDataSet.Create(nil);
    ClntDtStContactos.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteContactos);
    ClntDtStContactos.Open;
    frxDBDtstContactos := TfrxDBDataset.Create(nil);
    frxDBDtstContactos.Name := 'frxDBDtstContactos';
    frxDBDtstContactos.DataSet := ClntDtStContactos;
    frxDBDtstContactos.Open;

    ClntDtStDepositos := TClientDataSet.Create(nil);
    ClntDtStDepositos.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteDepositos);
    ClntDtStDepositos.Open;
    frxDBDtstDepositos := TfrxDBDataset.Create(nil);
    frxDBDtstDepositos.Name := 'frxDBDtstDepositos';
    frxDBDtstDepositos.DataSet := ClntDtStDepositos;
    frxDBDtstDepositos.Open;

    ClntDtStEmpresasAsociadas := TClientDataSet.Create(nil);
    ClntDtStEmpresasAsociadas.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteEmpresasAsoc);
    ClntDtStEmpresasAsociadas.Open;
    frxDBDtstEmpresasAsociadas := TfrxDBDataset.Create(nil);
    frxDBDtstEmpresasAsociadas.Name := 'frxDBDtstEmpresasAsociadas';
    frxDBDtstEmpresasAsociadas.DataSet := ClntDtStEmpresasAsociadas;
    frxDBDtstEmpresasAsociadas.Open;

    ClntDtStLicenciatarios := TClientDataSet.Create(nil);
    ClntDtStLicenciatarios.LoadFromFile(aplicacion.ParametrosDelSistema.RutaCamposFichaDeClienteLicenciatarios);
    ClntDtStLicenciatarios.Open;
    frxDBDtstLicenciatarios := TfrxDBDataset.Create(nil);
    frxDBDtstLicenciatarios.Name := 'frxDBDtstLicenciatarios';
    frxDBDtstLicenciatarios.DataSet := ClntDtStLicenciatarios;
    frxDBDtstLicenciatarios.Open;

    frxDBDtstMaster := TfrxDBDataset.Create(nil);
    frxDBDtstMaster.Name := 'frxDBDataset1';
    frxDBDtstMaster.DataSet := _ClntdtstMaster;
    frxDBDtstMaster.Open;

    FrxFichaDeCliente := TfrxReport.Create(nil);
    FrxFichaDeCliente.LoadFromFile(aplicacion.ParametrosDelSistema.RutaDeReporteDeFichaDeCliente, True);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstMarcas);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstMarcas);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstTelefonos);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstTelefonos);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstContactos);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstContactos);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstDepositos);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstDepositos);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstEmpresasAsociadas);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstEmpresasAsociadas);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstLicenciatarios);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstLicenciatarios);
    FrxFichaDeCliente.DataSets.Add(frxDBDtstMaster);
    FrxFichaDeCliente.Report.DataSets.Add(frxDBDtstMaster);

    frxPDFExport := TFrxPDFExport.Create(nil);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.ProtectionFlags := [ePrint];
    frxPDFExport.Title := 'Empresa';
    frxPDFExport.Author := aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := _E.codigo;
    frxPDFExport.Creator := aplicacion.nombre + ' ' + aplicacion.Version + ' (' + aplicacion.empresa.Descripcion + ')';
    frxPDFExport.FileName := 'Empresa ' + _E.codigo;

  end;
  procedure DestroyComponentes;
  begin
    FreeAndNil(ClntDtStMarcas);
    FreeAndNil(ClntDtStTelefonos);
    FreeAndNil(ClntDtStContactos);
    FreeAndNil(ClntDtStDepositos);
    FreeAndNil(ClntDtStEmpresasAsociadas);
    FreeAndNil(ClntDtStLicenciatarios);
    FreeAndNil(frxDBDtstMarcas);
    FreeAndNil(frxDBDtstTelefonos);
    FreeAndNil(frxDBDtstContactos);
    FreeAndNil(frxDBDtstDepositos);
    FreeAndNil(frxDBDtstEmpresasAsociadas);
    FreeAndNil(frxDBDtstLicenciatarios);
    FreeAndNil(frxDBDtstMaster);
    FreeAndNil(FrxFichaDeCliente);
    FreeAndNil(frxPDFExport);
  end;

begin
  try
    aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CompletarMarcas;
    CompletarTelefonos;
    CompletarContactos;
    CompletarDepositos;
    CompletarLicenciatarios;
    CompletarEmpresasAsociadas;
    FrxFichaDeCliente.LoadFromFile(aplicacion.ParametrosDelSistema.RutaDeReporteDeFichaDeCliente, True);
    FrxFichaDeCliente.ShowReport;
  finally
    DestroyComponentes;
    aplicacion.ColocarCursorNormal;
  end;
end;

{ TCliente }
constructor TCliente.Create;
begin
  inherited;
  FesCliente := True;
  FToleranciaDePagoEnDias := 0;
end;

class function TEmpresa.GuardarCondicionDeVentaEnTeamPlace(_E: TEmpresa): Boolean;
  Procedure EditarCondicionDeVenta;
  begin
    Aplicacion.Sesion.ConexionTeamPlace.Update_Record('BSOrganizacionCondicionPago',
                                                     ['CondicionPagoID', 'EsDefault'],
                                                     [IntToStr(_E.CondicionDeVenta.IDTeamplace), '1'],
                                                     'OrganizacionID = ' + IntToStr(_E.IDTeamplace));
  end;

  Procedure InsertarCondicionDeVenta;
  begin
    Aplicacion.Sesion.ConexionTeamPlace.Insert_Record('BSOrganizacionCondicionPago',
                                                     ['OrganizacionID','CondicionPagoID', 'EsDefault'],
                                                     [IntToStr(_E.IDTeamplace),IntToStr(_E.CondicionDeVenta.IDTeamplace), '1']);
  end;
begin
  if _E.LaCondicionDeVentaEstaEnTeamplace then //si esta en teamplace
    EditarCondicionDeVenta
  else
    InsertarCondicionDeVenta;
end;

class function TEmpresa.GuardarEnTeamPlace(_E: TEmpresa): Boolean;
  Procedure InsertarClienteEnTeamplace;
  begin
   Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TAbstractEmpresaDM._TeamplaceTableName,
    ['CategoriaFiscalID',
     'Nombre',
     'Codigo',
     'Activo',
     'Descripcion',
     'RazonSocial',
     'CUIT',
     'PaginaWeb',
     'CantEmpleados',
     'EsCliente',
     'EsProveedor',
     'ConceptoIDCliente',
     'CuentaIDCliente',
     'EsCorredor',
     'EsTransportista',
     'IdentificacionTributariaID',
     'ControlImpositivo1',
     'ControlImpositivo2',
     'EsChofer',
     'Email',
     'CreditoMaximo',
     'ControlImpositivo3',
     'ExportaDataNet',
     'VendedorID',
     'FechaAlta',
     'EsMultipay',
     'EsOrganizacionUTE',
     'UsuarioIDAlta',
     'EsSincronizarGmap',
     'PaisID',
     'ProvinciaID',
     'LocalidadID',
     'EsApocrifo',
     'USR_TAXID',
     'USR_NROTAX'],
    [IntToStr(_E.CondicionDeIva.IDTeamplace),
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.codigo ),
     '0',
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.CUIT),
     QuotedStr(_E.paginaWeb),
     '99',
     '1',
     '0',
     '16',
     IntToStr(_E.CuentaContable.IDTeamplace),
     '0',
     IntToStr(_E.esFlete),
     IntToStr(_E.TipoDeIdentificacionTributaria.IDTeamplace),
     IntToStr(_E.CondicionDeIngresosBrutos.CodigoTeamplace),
     QuotedStr( _E.NumeroDeIngresosBrutos ),
     '0',
     QuotedStr(_E.EmailEmpresarial),
     IntToStr(_E.LimiteDeCredito),
     '0',
     '0',
     IntToStr(_E.GrupoDeVendedor.IDTeamplace),
     QuotedStr( DateToStr( Aplicacion.DateTimeService.FechaActual) ),
     '0',
     '0',
     IntToStr(110),
     '0',
     IntToStr(_E.Localidad.Provincia.Pais.IDTeamplace),
     IntToStr(_E.Localidad.Provincia.IDTeamplace),
     IntToStr(_E.Localidad.IDTeamplace),
     '0',
     QuotedStr( _E.CodigoIDImpositivoExterior),
     QuotedStr( _E.IDImpositivoExterior)]);
  end;

  Procedure EditarClienteEnTeamplace;
  begin
     Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TAbstractEmpresaDM._TeamplaceTableName,
    ['CategoriaFiscalID',
     'Nombre',
     'Codigo',
     'Descripcion',
     'RazonSocial',
     'CUIT',
     'PaginaWeb',
     'CantEmpleados',
     'EsCliente',
     'EsProveedor',
     'ConceptoIDCliente',
     'CuentaIDCliente',
     'EsCorredor',
     'EsTransportista',
     'IdentificacionTributariaID',
     'ControlImpositivo1',
     'ControlImpositivo2',
     'EsChofer',
     'Email',
     'CreditoMaximo',
     'ControlImpositivo3',
     'ExportaDataNet',
     'VendedorID',
     'FechaAlta',
     'EsMultipay',
     'EsOrganizacionUTE',
     'UsuarioIDAlta',
     'EsSincronizarGmap',
     'PaisID',
     'ProvinciaID',
     'LocalidadID',
     'EsApocrifo',
     'USR_TAXID',
     'USR_NROTAX'],
    [IntToStr(_E.CondicionDeIva.IDTeamplace),
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.codigo ),
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.Descripcion),
     QuotedStr(_E.CUIT),
     QuotedStr(_E.paginaWeb),
     '99',
     '1',
     '0',
     '16',
     IntToStr(_E.CuentaContable.IDTeamplace),
     '0',
     IntToStr(_E.esFlete),
     IntToStr(_E.TipoDeIdentificacionTributaria.IDTeamplace),
     IntToStr(_E.CondicionDeIngresosBrutos.CodigoTeamplace),
     QuotedStr( _E.NumeroDeIngresosBrutos ),
     '0',
     QuotedStr(_E.EmailEmpresarial),
     IntToStr(_E.LimiteDeCredito),
     '0',
     '0',
     IntToStr(_E.GrupoDeVendedor.IDTeamplace),
     QuotedStr( DateToStr( Aplicacion.DateTimeService.FechaActual) ),
     '0',
     '0',
     IntToStr(110),
     '0',
     IntToStr(_E.Localidad.Provincia.Pais.IDTeamplace),
     IntToStr(_E.Localidad.Provincia.IDTeamplace),
     IntToStr(_E.Localidad.IDTeamplace),
     '0',
     QuotedStr( _E.CodigoIDImpositivoExterior),
     QuotedStr( _E.IDImpositivoExterior)],
     TAbstractEmpresaDM._TeamplaceID + '=' + IntToStr(_E.IDTeamplace));
  end;
begin
  if not Aplicacion.ParametrosDelSistema.UpdateTeamplace then
    Exit;

  if (_E.IDTeamplace <> NullID) then //si esta en teamplace
    EditarClienteEnTeamplace
  else
    InsertarClienteEnTeamplace;

  if _E.DepositosDeEmpresa.FindByDescripcion( Aplicacion.ParametrosDelSistema.DireccionLegal ) then
    TDeposito.GuardarEnTeamplace(_E.DepositosDeEmpresa.Actual);

  TEmpresa.GuardarCondicionDeVentaEnTeamPlace(_E);

  _E.TelefonosDeEmpresa.First;
  while not _E.TelefonosDeEmpresa.IsLast do
    begin
      TTelefonoDeEmpresa.GuardarEnTeamplace(_E.TelefonosDeEmpresa.Actual);
      _E.TelefonosDeEmpresa.Next;
    end;
end;

function TEmpresa.LaCondicionDeVentaEstaEnTeamplace: Boolean;
begin
  Result := (Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( 'BSOrganizacionCondicionPago', 'OrganizacionID = ' + IntToStr(IDTeamplace), 'OrganizacionID' ) <> NullID)
end;

function TEmpresa.Save: Boolean;
begin
  Result := Inherited Save;
end;

Procedure TCliente.InformarCredito;
var
  CL: TClienteList;
Begin
  try
    CL := TClienteList.CreateByCodigo(Codigo, False);
    TfrmCreditoDisponibleCliente.Edit(nil,CL);
  finally
    FreeAndNil(CL);
  end;
end;

{ TClienteList }

function TClienteList.Getcliente: TCliente;
begin
  Result := TCliente(CurrentObject);
end;

function TClienteList.CreateNewObject: TPDObject;
begin
  Result := TCliente.Create;
end;

function TClienteList.FindCodigoSifab(_cod: Integer): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.CodigoSifab = _cod);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

Function TClienteList.WhereForVendedor: String;
begin
  Result := '';
  exit; // por el momento no se filtra por vendedor
  Result := '(' +   TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esCliente;
  Result := Result + '=1) and ( ' +   TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ';
  Result := Result +  TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM.ID_FieldName + ' from ' + TGrupoDeVendedorItemDM.TableName;
  Result := Result + ' Where ' + TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.vendedorID) + '))';
end;

constructor TClienteList.CreateAll( _SoloActivos: Boolean; _FiltrarPorVendedor: Boolean; _Locales: Boolean; _Exportacion: Boolean );
  Function WhereString: String;
  begin
    Result := '( '+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esCliente + ' = 1)';
    if not (_locales and _Exportacion) then
      Begin
        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
        if _Locales then
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
        else
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
      End;
    if _FiltrarPorVendedor and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.vendedorID <> NullID) then
      begin
        Result := Result + ' and ( '+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID;
        Result := Result + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID;
        Result := Result + ' from ' + TGrupoDeVendedorItemDM.TableName + ' Where (' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.vendedorID) + ')))';
      end;
  end;

begin
  inherited Create(TCliente, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

//constructor TClienteList.CreateByCodigoLike(_Cod: String; _FiltrarPorVendedor, _SoloActivos, _Locales, _Exportacion: Boolean);
//  Function WhereString: String;
//  Begin
//    if Copy(_Cod, length(_Cod), 1) <> '%' then
//      _Cod := _Cod + '%';
//
////    if _FiltrarPorVendedor and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.vendedorID <> NullID) then
////      begin
////
////        Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsiLowerCase(_Cod)) + ') and ';
////        Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName;
////        Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.vendedorID) + ')';
////      end
////    else
//      Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsilowerCase(_Cod)) + ')';
//
//    if not (_locales and _Exportacion) then
//      Begin
//        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
//        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
//        if _Locales then
//          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
//        else
//          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
//      End;
//  End;
//begin
//  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos ));
//end;

constructor TClienteList.CreateAll(_SoloActivos: Boolean; _VendedorID: TObjectID; _Locales, _Exportacion: Boolean; _StartRow,
  _Rows: Integer);
  Function WhereString: String;
  Begin
    if (_VendedorID <> NullID) then
      begin
        Result := '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName;
        Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(_VendedorID) + ')';
      end;

    if not (_locales and _Exportacion) then
      Begin
        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
        if _Locales then
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
        else
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
      End;
  End;
  Function OrderBy : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName;
  end;
begin
  inherited Create(TCliente, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TClienteList.CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _VendedorID: TObjectID; _SoloActivos, _Locales,
  _Exportacion: Boolean; _StartRow, _Rows: Integer);
  Function WhereString: String;
  Begin
    if Copy(_Des, length(_Des), 1) <> '%' then
      _Des := _Des + '%';

    if Copy(_Cod, length(_Cod), 1) <> '%' then
      _Cod := _Cod + '%';

    if (_VendedorID <> NullID) then
      begin
        Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ') like ' + QuotedStr(AnsiLowerCase(_Des)) + ') and ';
        Result := Result + '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsiLowerCase(_Cod)) + ') and ';
        Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName;
        Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(_VendedorID) + ')';
      end
    else
      begin
        Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ') like ' + QuotedStr(AnsilowerCase(_Des)) + ') and';
        Result := Result + '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsiLowerCase(_Cod)) + ')';
      end;

    if not (_locales and _Exportacion) then
      Begin
        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
        if _Locales then
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
        else
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
      End;
  End;
  Function OrderBy: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName;
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TClienteList.CreateByCodigoLike(_Cod: String; _VendedorID: TObjectID; _SoloActivos, _Locales, _Exportacion: Boolean; _StartRow,
  _Rows: Integer);

  Function WhereString: String;
  Begin
    if Copy(_Cod, length(_Cod), 1) <> '%' then
      _Cod := _Cod + '%';

    if (_VendedorID <> NullID) then
      begin
        Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsiLowerCase(_Cod)) + ') and ';
        Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName;
        Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(_VendedorID) + ')';
      end
    else
      Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(AnsilowerCase(_Cod)) + ')';

    if not (_locales and _Exportacion) then
      Begin
        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
        if _Locales then
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
        else
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
      End;
  End;
  Function OrderBy: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName;
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TClienteList.CreateByCodigoLikeAndMarca(_C: String; _M: TMarca; _FiltrarPorVendedor, _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result:= '';
//    if _FiltrarPorVendedor and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.vendedorID <> NullID) then
//      Result:='(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' +
//        TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName
//        + ' Where '+ TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.vendedorID) + '))'
//        + ' and (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ' Like ' + QuotedStr(_C + '%') + ')'
//        + ' and (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( select ' +
//        TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._empresaID + ' from ' + TMarcaAsociadaDM.TableName
//        + ' where ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._marcaID + ' = ' + IntToStr(_M.ID) + '))'
//    else
      Result:= '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ' Like ' + QuotedStr(_C + '%')+ ') and (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( select '
        + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._empresaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._marcaID + ' = ' + IntToStr(_M.ID) + '))';
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TClienteList.CreateByDepositoVirtualDeStock(_D: TDeposito);
  function WhereString: String;
  begin
    Result := '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._DepositoVirtualDeStockID  + ' = ' + IntToStr(_D.ID) + ')';
  end;
begin
  inherited Create(TCliente, TAbstractEmpresaDM.CreateAll( False, WhereString));

end;

constructor TClienteList.CreateByDescripcionLike(_Des: String; _VendedorID: TObjectID; _SoloActivos, _Locales, _Exportacion: Boolean;
  _StartRow, _Rows: Integer);
  Function WhereString: String;
  Begin
    if Copy(_Des, length(_Des), 1) <> '%' then
      _Des := _Des + '%';

    if (_VendedorID <> NullID) then
      begin
        Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ') like ' + QuotedStr(AnsiLowerCase(_Des)) + ') and ';
        Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName;
        Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(_VendedorID) + ')';
      end
    else
      Result := '(lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ') like ' + QuotedStr(AnsilowerCase(_Des)) + ')';

    if not (_locales and _Exportacion) then
      Begin
        Result := result + ' and ('+ TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CategoriaDeClienteID + ' in (';
        Result := result + 'select ' + TCategoriaDeClienteDM.ID_FieldName + ' from ' + TCategoriaDeClienteDM.TableName + ' where ';
        if _Locales then
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=0))'
        else
          Result := result + TCategoriaDeClienteDM._EsExportacion +'=1))';
      End;
  End;
  Function OrderBy: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName;
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TClienteList.CreateByMarca(_M: TMarca; _FiltrarPorVendedor: Boolean;_SoloActivos: Boolean);
  function WhereString: String;
  begin
//    if _FiltrarPorVendedor and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.vendedorID <> NullID) then
//      Result :='(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select '
//        + TGrupoDeVendedorItemDM.TableName + '.' +TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ' + TGrupoDeVendedorItemDM.TableName
//        + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.vendedorID) + '))'
//        + ' and (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( select ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._empresaID + ' from ' +
//        TMarcaAsociadaDM.TableName + ' where ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._marcaID + ' = ' + IntToStr(_M.ID) + '))'
//    else
      Result :='(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( select '
        + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._empresaID + ' from ' + TMarcaAsociadaDM.TableName
        + ' where ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._marcaID + ' = ' + IntToStr(_M.ID) + '))';
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TClienteList.CreateByMarcaDefault(_M: TMarca);
  Function WhereString: String;
  begin
    Result:= '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._MarcaAsociadaDefaultID + ' in (select ' + TMarcaAsociadaDM.ID_FieldName +
             ' from ' + TMarcaAsociadaDM.TableName + ' where ' + TMarcaAsociadaDM._MarcaID + ' = ' + IntToStr( _M.ID)+'))';
  end;
begin
  inherited Create(TCliente, TAbstractEmpresaDM.CreateAll( False, WhereString, False ));
end;

constructor TClienteList.CreateByNivelDeServicio(_NS: TNivelDeServicioDeCliente; _SoloActivos: Boolean = False);
  Function WhereString: string;
  begin
    Result := '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._NivelDeServicioDeClienteID + ' = ' + IntTostr( _NS.ID )+')';
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TClienteList.CreateByPropertyLike(_Like, _PropertyName: String; _FiltrarPorVendedor, _SoloActivos: Boolean);
  Function WhereString: string;
  begin
    if Copy(_Like, length(_Like), 1) <> '%' then
      _Like := _Like + '%';
    Result := 'lower(' + TAbstractEmpresaDM.TableName + '.' + _PropertyName + ') like ' + QuotedStr((_Like));
//    if _FiltrarPorVendedor and (Aplicacion.Usuario.EsVendedor) and (Aplicacion.Usuario.vendedorID <> NullID) then
//      Result := Result + ' and ('+ WhereForVendedor +')';
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

{ TProveedor }
constructor TProveedor.Create;
begin
  inherited;
  FesProveedor := True;
end;

function TProveedorList.CreateNewObject: TPDObject;
begin
  Result := TProveedor.Create;
end;

constructor TProveedorList.CreateAll(_SoloActivos: Boolean);
  function WhereString: String;
  begin
    Result := '('+ TAbstractEmpresaDM._esProveedor + ' = 1 )';
  end;
begin
  inherited Create(TProveedor, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

{ TProveedorList }
function TProveedorList.GetProveedor: TProveedor;
begin
  Result := TProveedor(CurrentObject);
end;

{ TDeposito }
constructor TDeposito.Create;
begin
  inherited;
  SaveSqlLog    := True;
  DMObject      := TDepositoDM(aplicacion.DMProvider.GetGlobalDM(TDepositoDM));
  FCodigoPostal := null;
  FCalle        := '';
  FNumeroCalle  := '';
  FPiso         := '';
  FDepartamento := '';
  FsePuedeBorrarDireccionLegal := False;
  FIDTeamplace  := Null;
end;


procedure TDeposito.Delete;
  Function HayPedidosConLaDireccionDeEntrega: Boolean;
  var
    PVL: TPedidoDeVentaList;
  Begin
    try
      PVL := TPedidoDeVentaList.CreateByDireccionDeEntrega(self);
      Result := (PVL.Count > 0);
    finally
      FreeAndNil(PVL);
    end;
  End;

  Function HayClientesConElDepositoVirtual: Boolean;
  var
    CL: TClienteList;
  Begin
    Try
      CL := TClienteList.CreateByDepositoVirtualDeStock(Self);
      Result := (CL.Count > 0);
    Finally
      FreeAndNil(CL);
    end;
  End;

  Function HayStockItem : Boolean;
  var
    SIL : TStockItemList;
  begin
    Try
      SIL := TStockItemList.CreateByDeposito(Self);
      Result := (SIL.Count > 0);
    Finally
      FreeAndNil(SIL);
    end;
  end;

  Function HayMovimientosDeStock : Boolean;
  var
    MSL : TMovimientoDeStockList;
  begin
    Try
      MSL := TMovimientoDeStockList.CreateByDepositoOrigenODestino(Self);
      Result := (MSL.Count > 0);
    Finally
      FreeAndNil(MSL);
    end;
  end;

begin
  if (Self.Descripcion = Aplicacion.ParametrosDelSistema.DireccionLegal) and not sePuedeBorrarDireccionLegal then
    Aplicacion.RaiseExceptionCreate('La dirección legal de la empresa no puede ser eliminada.');

  if self.empresa.esCliente and (self.empresa.DireccionDeEntregaID = self.ID) then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque figura como dirección de entrega del cliente');

  if self.empresa.esProveedor and (self.empresa.DireccionDeRetiroID = self.ID) then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque figura como dirección de retiro del proveedor');

  if HayPedidosConLaDireccionDeEntrega then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque hay pedidos que lo usan');

  if HayClientesConElDepositoVirtual then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque es depósito virtual de uno o más clientes');

  if HayStockItem then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque hay Stock asignado en él');

  if HayMovimientosDeStock then
    Aplicacion.RaiseExceptionCreate('No se puede borrar este depósito porque hay Movimientos de Stock asignados en él');

  inherited;

end;

function TDeposito.GetCodigoDomicilioSifab: String;
begin
  Result := 'DO' + Empresa.codigo;
end;

function TDeposito.GetCodigoInternoSifab: TEntero;
begin
  if isAssigned and (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('ClienteEnvio', 'CodigoLugarEnvio = ' + QuotedStr( CodigoLugarDeEnvioSifab ) , 'CodigoInternoEnvio');
  Result := FCodigoInternoSifab;
end;

function TDeposito.GetCodigoLugarDeEnvioSifab: String;
var
  orden: Integer;
begin
  orden := strtoint(CodigoSifab);
  Result := 'DE' + empresa.codigo + '-' + IntToStr(orden);
end;

function TDeposito.GetCodigoPostal: TString;
begin
  if (FCodigoPostal = null) and (LocalidadID <> NullID) then
    FCodigoPostal := Localidad.CodigoPostal;

  if (LocalidadID = NullID) then
    Result := ''
  else
    Result := FCodigoPostal;
end;

function TDeposito.GetDescripcionConEmpresa: string;
begin
  Result := Self.Descripcion + ',' + Empresa.Descripcion;
end;

function TDeposito.GetDireccionCompleta: TString;
begin
  Result := Domicilio + #13#10;
  if (CodigoPostal > '') then
    Result := Result + '(' + Self.CodigoPostal + ') ';

  if EsDireccionEnIngles then
    Result := Result + Self.Localidad.DescripcionConProvinciaYPaisEnIngles
  else
    Result := Result + Self.Localidad.DescripcionConProvinciaYPais;
end;

function TDeposito.GetDomicilio: TString;
begin
  if (FormatoDeDireccionID <> NullID) then
    begin
      FDomicilio := FormatoDeDireccion.Formato;
      if (Calle > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Calle', Calle )
      else
        begin
          if (FormatoDeDireccion.TituloCalle > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloCalle + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloCalle, '' );
            end;
        end;

      if (NumeroCalle > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Numero', NumeroCalle )
      else
        begin
          if (FormatoDeDireccion.TituloNumero > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloNumero + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloNumero, '' );
            end;
        end;

      if (Piso > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Piso', Piso )
      else
        begin
          if (FormatoDeDireccion.TituloPiso > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloPiso + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloPiso, '' );
            end;
        end;

      if (Departamento > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Departamento', Departamento )
      else
        begin
          if (FormatoDeDireccion.TituloDepartamento > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloDepartamento + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloDepartamento, '' );
            end;
        end;

      if (Edificio > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Edificio', Edificio )
      else
        begin
          if (FormatoDeDireccion.TituloEdificio > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloEdificio + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloEdificio, '' );
            end;
        end;
    end;
  Result := AnsiUpperCase(FDomicilio);
end;

function TDeposito.Getempresa: TEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TEmpresa, Fempresa, FempresaID);
  Result := TEmpresa(Fempresa);
end;

function TDeposito.GetEsDireccionEnIngles: TBoolean;
begin
  Result := Localidad.pais.EsDireccionEnIngles;
end;

function TDeposito.GetFormatoDeDireccion: TFormatoDeDireccion;
begin
  if not assigned(FFormatoDeDireccion) then
    GetObject(TFormatoDeDireccion, FFormatoDeDireccion, FFormatoDeDireccionID);
  Result := TFormatoDeDireccion(FFormatoDeDireccion);
end;

function TDeposito.GetIDTeamplace: TEntero;
var
  Condition : String;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    begin
      Condition :=                  '(' + TDepositoDM._TeamplaceEmpresaID   + ' = ' + IntToStr(Empresa.IDTeamplace) + ')';
      Condition := Condition + ' and (' + TDepositoDM._TeamplaceDescripcion + ' = ' + QuotedStr(Descripcion)  + ')';

      FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field(TDepositoDM._TeamplaceTableName, Condition, TDepositoDM._TeamplaceID);
    end;
  Result := FIDTeamplace;
end;

function TDeposito.GetLocalidad: TLocalidad;
begin
  if not Assigned(FLocalidad) then
    GetObject(TLocalidad, FLocalidad, FLocalidadID);
  Result := TLocalidad(FLocalidad);
end;

function TDeposito.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, FSectorID);
  Result := TSector(FSector);
end;

class function TDeposito.GuardarEnTeamPlace(_D: TDeposito): Boolean;
begin
  if not Aplicacion.ParametrosDelSistema.UpdateTeamplace then
    Exit;

  if (_D.IDTeamplace <> Null) and (_D.IDTeamplace <> NullID) then
    Aplicacion.Sesion.ConexionTeamPlace.Update_Record( TDepositoDM._TeamplaceTableName,
                                                      [TDepositoDM._TeamplaceEmpresaID, TDepositoDM._TeamplaceLocalidadID, TDepositoDM._TeamplaceProvinciaID, TDepositoDM._TeamplacePaisID, TDepositoDM._TeamplaceTipo, TDepositoDM._TeamplaceCalle, TDepositoDM._TeamplaceNumero, TDepositoDM._TeamplacePiso, TDepositoDM._TeamplaceDpto, TDepositoDM._TeamplaceCodigoPostal, 'EsPrincipal', 'Descripcion'],
                                                      [IntToStr(_D.Empresa.IDTeamplace), IntToStr(_D.Localidad.IDTeamplace), IntToStr(_D.Localidad.Provincia.IDTeamplace), IntToStr(_D.Localidad.Provincia.Pais.IDTeamplace), '2', QuotedStr(_D.Calle), QuotedStr(_D.NumeroCalle), QuotedStr(_D.Piso), QuotedStr(_D.Departamento), QuotedStr(_D.CodigoPostal), ifthen(_D.Descripcion=Aplicacion.ParametrosDelSistema.DireccionLegal, '1', '0'), QuotedStr( _D.Descripcion)],
                                                      TDepositoDM._TeamplaceID + '=' + IntToStr( _D.IDTeamplace ) )
  else
    Aplicacion.Sesion.ConexionTeamPlace.Insert_Record( TDepositoDM._TeamplaceTableName,
                                                      [TDepositoDM._TeamplaceEmpresaID, TDepositoDM._TeamplaceLocalidadID, TDepositoDM._TeamplaceProvinciaID, TDepositoDM._TeamplacePaisID, TDepositoDM._TeamplaceTipo, TDepositoDM._TeamplaceCalle, TDepositoDM._TeamplaceNumero, TDepositoDM._TeamplacePiso, TDepositoDM._TeamplaceDpto, TDepositoDM._TeamplaceCodigoPostal, 'EsPrincipal', 'Descripcion'],
                                                      [IntToStr(_D.Empresa.IDTeamplace), IntToStr(_D.Localidad.IDTeamplace), IntToStr(_D.Localidad.Provincia.IDTeamplace), IntToStr(_D.Localidad.Provincia.Pais.IDTeamplace), '2', QuotedStr(_D.Calle), QuotedStr(_D.NumeroCalle), QuotedStr(_D.Piso), QuotedStr(_D.Departamento), QuotedStr(_D.CodigoPostal), ifthen(_D.Descripcion=Aplicacion.ParametrosDelSistema.DireccionLegal, '1', '0'), QuotedStr(_D.Descripcion)]);
end;

procedure TDeposito.SetCalle(const Value: TString);
begin
  FCalle := uppercase(Value);
end;

procedure TDeposito.SetDepartamento(const Value: TString);
begin
  FDepartamento := uppercase(Value);
end;

procedure TDeposito.SetDomicilio(const Value: TString);
begin
  FDomicilio := uppercase(Value);
end;

procedure TDeposito.SetEdificio(const Value: TString);
begin
  FEdificio := UpperCase(Value);
end;

procedure TDeposito.SetempresaID(const Value: TObjectID);
begin
  if (Value <> FempresaID) and assigned(Fempresa) then
    FreeAndNil(Fempresa);
  FempresaID := Value;
end;

procedure TDeposito.SetFormatoDeDireccionID(const Value: TObjectID);
begin
  if (FFormatoDeDireccionID <> Value) and Assigned(FFormatoDeDireccion) then
    FreeAndNil(FFormatoDeDireccion);
  FFormatoDeDireccionID := Value;
end;

procedure TDeposito.SetLocalidadID(const Value: TObjectID);
begin
  if (Value <> FLocalidadID) and assigned(FLocalidad) then
  begin
    FCodigoPostal := null;
    FreeAndNil(FLocalidad);
  end;
  FLocalidadID := Value;
end;

procedure TDeposito.SetPiso(const Value: TString);
begin
  FPiso := uppercase(Value);
end;

procedure TDeposito.SetSectorID(const Value: TObjectID);
begin
  if ( fSectorID <> Value) and assigned( FSector ) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

{ TDepositoDM }
class function TDepositoDM.TableName: string;
begin
  Result := 'Depositos';
end;

class function TDepositoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TDepositoDM.ID_FieldName: string;
begin
  Result := 'DepositoID';
end;

procedure TDepositoDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  with TDeposito(PDObject) do
    begin
      BooleanField[_EsInactivo]                    := FEsInactivo;
      StringField[_Descripcion]                    := Descripcion;
      IDField[_EmpresaID]                          := empresaID;
      IDField[_localidadID]                        := LocalidadID;
      StringField[_Calle]                          := Calle;
      StringField[_NumeroCalle]                    := NumeroCalle;
      StringField[_Piso]                           := Piso;
      StringField[_Departamento]                   := Departamento;
      StringField[_Edificio]                       := Edificio;
      StringField[_HorarioDeEntrega]               := HorarioDeEntrega;
      StringField[_HorarioDeRetiro]                := HorarioDeRetiro;
      StringField[_CodigoSifab]                    := CodigoSifab;
      BooleanField[_EsDepositoProductosTerminados] := esDepositoProductosTerminados;
      BooleanField[_EsDepositoMateriaPrima]        := esDepositoMateriaPrima;
      BooleanField[_EsDepositoSemielaborado]       := EsDepositoSemiElaborado;
      BooleanField[_EsDepositoVirtual]             := EsDepositoVirtual;
      IDField[_SectorID]                           := SectorID;
      IDField[_FormatoDeDireccionID]               := FormatoDeDireccionID;
      StringField[_Observacion]                    := Observacion;
    end;
end;

procedure TDepositoDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  with TDeposito(PDObject) do
    begin
      FEsInactivo                    := BooleanField[_EsInactivo];
      Descripcion                    := StringField[_Descripcion];
      EmpresaID                      := IDField[_EmpresaID];
      LocalidadID                    := IDField[_localidadID];
      Calle                          := StringField[_Calle];
      NumeroCalle                    := StringField[_NumeroCalle];
      Piso                           := StringField[_Piso];
      Departamento                   := StringField[_Departamento];
      Edificio                       := StringField[_Edificio];
      HorarioDeEntrega               := StringField[_HorarioDeEntrega];
      HorarioDeRetiro                := StringField[_HorarioDeRetiro];
      CodigoSifab                    := StringField[_CodigoSifab];
      FEsDepositoProductosTerminados := BooleanField[_EsDepositoProductosTerminados];
      FEsDepositoMateriaPrima        := BooleanField[_EsDepositoMateriaPrima];
      FEsDepositoSemielaborado       := BooleanField[_EsDepositoSemielaborado];
      FEsDepositoVirtual             := BooleanField[_EsDepositoVirtual];
      FSectorID                      := IDField[_SectorID];
      FFormatoDeDireccionID          := IDField[_FormatoDeDireccionID];
      FObservacion                   := StringField[_Observacion];
    end;
end;

{ TDepositoList }
function TDepositoList.GetActual: TDeposito;
begin
  Result := TDeposito(CurrentObject);
end;

function TDepositoList.CreateNewObject: TPDObject;
begin
  Result := TDeposito.Create;
end;

function TDepositoList.FindByCodigoSifab(_CodigoSifab: TString): Boolean;
var
  Num: Integer;
  cod: String;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Num := strtoint(Actual.CodigoSifab);
    cod := 'DE' + Actual.empresa.codigo + '-' + IntToStr(Num);
    Result := (cod = _CodigoSifab);
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

function TDepositoList.FindByDescripcion(_Descripcion: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.Descripcion = _Descripcion);
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

constructor TDepositoList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll(False, '', _SoloActivos));
end;

constructor TDepositoList.CreateByTipoEmpresa(_Cliente, _Proveedor, _InterDeposito, _DepositoPropio, _SoloActivos: Boolean);
begin
  CreateAll( _SoloActivos );
  first;
  if (Count > 0) then
    repeat
      if Actual.empresa.esCliente and _Cliente  then
        next
      else if Actual.empresa.esProveedor and _Proveedor then
        next
      else if (Actual.empresa.ID = Aplicacion.Empresa.ID) and _InterDeposito and (aplicacion.Usuario.Sector.Depositos.Find( Actual.ID ) ) then
        next
      else if ( aplicacion.Usuario.Sector.Depositos.find( Actual.ID ) ) and _DepositoPropio then
        next
      else
        DeleteFromList;
    until IsLast;
    First;
end;

constructor TDepositoList.CreateEmpty;
begin
  inherited Create(TDeposito, TDepositoDM.CreateEmpty  );
end;

{ TUnidadDeMedida }
constructor TUnidadDeMedida.Create;
begin
  inherited;
  DMObject            := Aplicacion.DMProvider.GetGlobalDM(TUnidadDeMedidaDM);
  FCodigoInternoSifab := null;
  FIDTeamplace        := null;
  SoloMayusculas      := False;
end;

function TUnidadDeMedida.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = null) then
    FCodigoInternoSifab := aplicacion.sesion.ConexionSifab.Get_Integer_Field('Genericas', 'DescripcionItem = ' + QuotedStr(Descripcion),'CodigoItem');
  Result := FCodigoInternoSifab;
end;

function TUnidadDeMedida.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TUnidadDeMedidaList;
end;

function TUnidadDeMedida.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TUnidadDeMedidaDM._TeamplaceTableName, TUnidadDeMedidaDM._TeamplaceCodigo + ' = ' + QuotedStr( CodigoTeamplace ), TUnidadDeMedidaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TUnidadDeMedida.GetTipoDeUnidadDeMedida: TTipoDeUnidadDeMedida;
begin
  if not Assigned(FTipoDeUnidadDeMedida) then
    GetObject(TTipoDeUnidadDeMedida, FTipoDeUnidadDeMedida, TipoDeUnidadDeMedidaID);
  Result := TTipoDeUnidadDeMedida(FTipoDeUnidadDeMedida);
end;

function TUnidadDeMedida.GetUnidadDeEquivalencia: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeEquivalencia) then
    GetObject(TUnidadDeMedida, FUnidadDeEquivalencia, unidadDeEquivalenciaID);
  Result := TUnidadDeMedida(FUnidadDeEquivalencia);
end;

function TUnidadDeMedida.GetUnidadDeMedidaPlural: String;
begin
  Result := FunidadDeMedidaPlural;
  if solomayusculas then
    Result := uppercase(Result);
end;

function TUnidadDeMedida.Save: Boolean;
begin
  If (TipoDeUnidadDeMedidaID = NullID) or (TipoDeUnidadDeMedidaID = Null) Then
    Raise exception.Create('No hay ningún tipo de unidad de medida asignado.');
  Result := inherited Save;
end;

procedure TUnidadDeMedida.SetTipoDeUnidadDeMedidaID(const Value: TObjectID);
begin
  if (Value <> FTipoDeUnidadDeMedidaID) and assigned(FTipoDeUnidadDeMedida) then
    FreeAndNil(FTipoDeUnidadDeMedida);
  FTipoDeUnidadDeMedidaID := Value;
end;

procedure TUnidadDeMedida.SetUnidadDeEquivalenciaID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeEquivalenciaID) and assigned(FUnidadDeEquivalencia) then
    FreeAndNil(FUnidadDeEquivalencia);
  FUnidadDeEquivalenciaID := Value;
end;

procedure TUnidadDeMedida.SetUnidadDeMedidaPlural(const Value: String);
begin
  FunidadDeMedidaPlural := Value;
  if solomayusculas then
    FunidadDeMedidaPlural := uppercase(FunidadDeMedidaPlural);
end;

{ TUnidadDeMedidaDM }
class function TUnidadDeMedidaDM.TableName: string;
begin
  Result := 'UnidadesDeMedida';
end;

class function TUnidadDeMedidaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TUnidadDeMedidaDM.ID_FieldName: string;
begin
  Result := 'UnidadDeMedidaID';
end;

procedure TUnidadDeMedidaDM.PopulateFields(PDObject: TPDObject);
begin
  with TUnidadDeMedida(PDObject) do
  begin
    StringField[_Descripcion]          := Descripcion;
    StringField[_Codigo]               := Codigo;
    StringField[_UnidadDeMedidaPlural] := FunidadDeMedidaPlural;
    FloatField[_Equivalencia]          := FEquivalencia;
    IDField[_UnidadDeEquivalenciaID]   := FUnidadDeEquivalenciaID;
    IDField[_TipoDeUnidadDeMedidaID]   := FTipoDeUnidadDeMedidaID;
    BooleanField[_EsInactivo]          := EsInactivo;
    StringField[_CodigoAfip]           := CodigoAfip;
    StringField[_CodigoTeamplace]      := CodigoTeamplace;
    BooleanField[_EsDefault]           := EsDefault;
  end;
end;

procedure TUnidadDeMedidaDM.PopulateObject(PDObject: TPDObject);
begin
  with TUnidadDeMedida(PDObject) do
  begin
    Descripcion             := StringField[_Descripcion];
    Codigo                  := StringField[_Codigo];
    EsInactivo              := BooleanField[_EsInactivo];
    FunidadDeMedidaPlural   := StringField[_UnidadDeMedidaPlural];
    FEquivalencia           := FloatField[_Equivalencia];
    FUnidadDeEquivalenciaID := IDField[_UnidadDeEquivalenciaID];
    FTipoDeUnidadDeMedidaID := IDField[_TipoDeUnidadDeMedidaID];
    FCodigoAfip             := StringField[_CodigoAfip];
    FCodigoTeamplace        := StringField[_CodigoTeamplace];
    FEsDefault              := BooleanField[_EsDefault];
  end;
end;

{ TUnidadDeMedidaList }
function TUnidadDeMedidaList.GetunidadDeMedida: TUnidadDeMedida;
begin
  Result := TUnidadDeMedida(CurrentObject);
end;

function TUnidadDeMedidaList.CreateNewObject: TPDObject;
begin
  Result := TUnidadDeMedida.Create;
end;

constructor TUnidadDeMedidaList.CreateAll(_SoloActivos:Boolean);
begin
  inherited Create(TUnidadDeMedida, TUnidadDeMedidaDM.CreateAll(False,'',_SoloActivos));
end;

 { TTipoDeUnidadDeMedida }
constructor TTipoDeUnidadDeMedida.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeUnidadDeMedidaDM);
end;
 { TTipoDeUnidadDeMedidaDM }
class function TTipoDeUnidadDeMedidaDM.TableName : string;
begin
  Result := 'TiposDeUnidadDeMedida';
end;

class function TTipoDeUnidadDeMedidaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeUnidadDeMedidaDM.ID_FieldName : string;
begin
  Result := 'TipoDeUnidadDeMedidaID';
end;

procedure TTipoDeUnidadDeMedidaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeUnidadDeMedida(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;


procedure TTipoDeUnidadDeMedidaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeUnidadDeMedida(PDObject) do
    begin
      FDescripcion := StringField[_Descripcion];
      EsInactivo  := BooleanField[_EsInactivo];
    end;
end;

 { TTipoDeUnidadDeMedidaList }
function TTipoDeUnidadDeMedidaList.GetActual : TTipoDeUnidadDeMedida;
begin
  Result := TTipoDeUnidadDeMedida(CurrentObject);
end;

function TTipoDeUnidadDeMedidaList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeUnidadDeMedida.Create;
end;

constructor TTipoDeUnidadDeMedidaList.CreateAll(_SoloActivos:Boolean);
begin
  inherited Create(TTipoDeUnidadDeMedida,TTipoDeUnidadDeMedidaDM.CreateAll(False, '', _SoloActivos));
end;

{ TSector }

{ TSectorDM }
class function TSectorDM.TableName: string;
begin
  Result := 'Sectores';
end;

class function TSectorDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TSectorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TSectorDM.ID_FieldName: string;
begin
  Result := 'SectorID';
end;

procedure TSectorDM.PopulateFields(PDObject: TPDObject);
begin
  with TSector(PDObject) do
  begin
    StringField[_Descripcion]          := Descripcion;
    BooleanField[_esLineaDeProduccion] := esLineaDeProduccion;
    BooleanField[_EsInactivo]          := FEsInactivo;
  end;
end;

procedure TSectorDM.PopulateObject(PDObject: TPDObject);
begin
  with TSector(PDObject) do
  begin
    Descripcion         := StringField[_Descripcion];
    esLineaDeProduccion := BooleanField[_esLineaDeProduccion];
    FEsInactivo         := BooleanField[_EsInactivo];
  end;
end;

{ TSectorList }
function TSectorList.GetSector: TSector;
begin
  Result := TSector(CurrentObject);
end;

function TSectorList.CreateNewObject: TPDObject;
begin
  Result := TSector.Create;
end;

constructor TSectorList.CreateAll;
begin
  inherited Create(TSector, TSectorDM.CreateAll(False));
end;

//constructor TSectorList.CreateByDeposito(_Deposito: TDeposito);
//  Function WhereString : String;
//  begin
//    Result := TSectorDM.TableName + '.' + TSectorDM._DepositoID + '=' + IntToStr(_Deposito.ID);
//  end;
//begin
//  inherited Create(TSector, TSectorDM.CreateAll( False, WhereString ));
//end;

constructor TUnidadDeMedidaList.CreateByCodigoLikeAndTipo(_cod: String; _Tipo : TTipoDeUnidadDeMedida; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := TUnidadDeMedidaDM.TableName + '.' + TUnidadDeMedidaDM._Codigo + ' like ' + QuotedStr(_Cod + '%') + ' And ' + TUnidadDeMedidaDM.TableName + '.' + TUnidadDeMedidaDM._TipoDeUnidadDeMedidaID + ' = ' + IntToStr(_Tipo.ID );
  end;
begin
  inherited Create(TUnidadDeMedida, TUnidadDeMedidaDM.CreateAll( False, WhereString, _SoloActivos ));
end;

//constructor TSectorList.CreateByDepositoNoLinea(_Deposito: TDeposito);
//  Function WhereString : String;
//  begin
//    Result := '(' + TSectorDM.TableName + '.' + TSectorDM._EsLineaDeProduccion + ' = 0) and (' + TSectorDM.TableName + '.' + TSectorDM._DepositoID + ' = ' + IntToStr(_Deposito.ID);
//  end;
//begin
//  inherited Create(TSector, TSectorDM.CreateAll(False, WhereString));
//end;

constructor TSectorList.CreateBySectorLike(_Sector: String);
  Function WhereString: String;
  begin
    Result := TSectorDM.TableName + '.' + TSectorDM._Descripcion + ' like ' + QuotedStr(_Sector + '%');
  end;
begin
  inherited Create(TSector, TSectorDM.CreateAll(False, WhereString));
end;

constructor TUnidadDeMedidaList.CreateByTipo(_Tipo : TTipoDeUnidadDeMedida; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := TUnidadDeMedidaDM.TableName + '.' + TUnidadDeMedidaDM._TipoDeUnidadDeMedidaID + ' = ' + IntToStr(_Tipo.ID);
  end;
begin
  inherited Create(TUnidadDeMedida, TUnidadDeMedidaDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TUnidadDeMedidaList.CreateByTipoDefault(_Tipo: TTipoDeUnidadDeMedida; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := '( ' + TUnidadDeMedidaDM.TableName + '.' + TUnidadDeMedidaDM._TipoDeUnidadDeMedidaID + ' = ' + IntToStr(_Tipo.ID) + ') and (' + TUnidadDeMedidaDM.TableName + '.' + TUnidadDeMedidaDM._EsDefault + '=1 )' ;
  end;
begin
  inherited Create(TUnidadDeMedida, TUnidadDeMedidaDM.CreateAll(False, WhereString, _SoloActivos));
end;

{ TSQLLogger }
constructor TSQLLogger.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TSQLLoggerDM);
  FtableName := null;
  FtableID := null;
  FFechaHora := null;
end;


procedure TSQLLogger.SetUsuarioID(Value: TObjectID);
begin
  if (Value <> FUsuarioID) and assigned(FUsuario) then
    FreeAndNil(FUsuario);

  FUsuarioID := Value;
end;

function TSQLLogger.GetUsuario: TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);

  Result := TUsuario(FUsuario);
end;

function TSQLLogger.Save: Boolean;
begin
  Result := False;
  try
    Aplicacion.Database.ConexionReal.ExecSQL(Self.statement, []);
    Result := True;
  finally
  end;

  if not Result then
    raise exception.Create('Error al ejecutar Sentencia')
  else
    Result := inherited Save
end;

{ TSQLLoggerDM }
class function TSQLLoggerDM.TableName: string;
begin
  Result := 'SQLLOG';
end;

class function TSQLLoggerDM.ID_FieldName: string;
begin
  Result := 'SQLLOGID';
end;

procedure TSQLLoggerDM.PopulateFields(PDObject: TPDObject);
begin
  with TSQLLogger(PDObject) do
  begin
    StringField[_TableName]     := TableName;
    IntegerField[_TableID]      := tableID;
    StringField[_StatementType] := statementType;
    StringField[_Statement]     := statement;
    DateTimeField[_FechaHora]   := FechaHora;
    IDField[_UsuarioID]         := UsuarioID;
  end;
end;

procedure TSQLLoggerDM.PopulateObject(PDObject: TPDObject);
begin
  with TSQLLogger(PDObject) do
    begin
      FtableName     := StringField[_TableName];
      FtableID       := IntegerField[_TableID];
      statementType  := StringField[_StatementType];
      statement      := StringField[_Statement];
      FFechaHora     := DateTimeField[_FechaHora];
      FUsuarioID     := IDField[_UsuarioID];
    end;
end;

{ TSQLLoggerList }
function TSQLLoggerList.GetActual: TSQLLogger;
begin
  Result := TSQLLogger(CurrentObject);
end;

function TSQLLoggerList.CreateNewObject: TPDObject;
begin
  Result := TSQLLogger.Create;
end;

constructor TSQLLoggerList.CreateAll;
begin
  inherited Create(TSQLLogger, TSQLLoggerDM.CreateAll(False));
end;

constructor TSQLLoggerList.CreateByFechaAndStatementType(_FechaDesde, _FechaHasta, _StatementType: String);
  Function WhereString : String;
  begin
    Result := TSQLLoggerDM.TableName + '.' + TSQLLoggerDM._StatementType + ' = ' + QuotedStr(_StatementType);
    Result := Result + ' and ' + TSQLLoggerDM.TableName + '.' + TSQLLoggerDM._FechaHora + ' between ' + Quotedstr(_FechaDesde + _PrimerHora) + ' and ' + Quotedstr(_FechaHasta + _UltimaHora);
  end;
begin
  inherited Create(TSQLLogger, TSQLLoggerDM.CreateAll(False, WhereString));
end;

constructor TSQLLoggerList.CreateEmpty;
begin
  inherited Create(TSQLLogger, TSQLLoggerDM.CreateEmpty);
end;

{ TProvincia }
constructor TProvincia.Create;
begin
  inherited;
  DMObject      := aplicacion.DMProvider.GetGlobalDM(TProvinciaDM);
  FIDTeamplace  := Null;
end;

procedure TProvincia.Delete;
begin
  If (localidades.Count > 0) then
    Begin
      If (aplicacion.Mensaje( 'Esta Provincia contiene Localidades asignadas. Se eliminaran ' + ' todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
        localidades.DeleteAll
      else
        Abort;
    End;
  Inherited;

end;

function TProvincia.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TProvinciaDM._TeamplaceTableName, TProvinciaDM._TeamplaceCodigo + ' = ' + QuotedStr( IntToStr( ID ) ), TProvinciaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TProvincia.Getlocalidades: TLocalidadList;
begin
  if not assigned(Flocalidades) then
    GetList(TPDList(Flocalidades),  TPDList(TLocalidadList.CreateByProvincia(self)));

  Result := TLocalidadList(Flocalidades);
end;

function TProvincia.GetPais: TPais;
begin
  if not assigned(FPais) then
    GetObject(TPais, FPais, FPaisID);

  Result := TPais(FPais);
end;

class function TProvincia.GuardarEnTeamPlace(_P: TProvincia): Boolean;
begin
  Result := False;

  if (_P.Pais.IDTeamplace = NullID) then
    Aplicacion.RaiseExceptionCreate('Primero debe migrar el país a Teamplace');

//  if (_P.IDTeamplace <> NullID) then
//    Aplicacion.RaiseExceptionCreate('La Provincia ya existe en Teamplace');
//
  if (_P.IDTeamplace <> NullID) then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TProvinciaDM._TeamplaceTableName,
                                                               ['PaisID', 'Nombre', 'Codigo', 'Activo'],
                                                               [IntToStr(_P.Pais.IDTeamplace), QuotedStr(_P.Descripcion), IntToStr(_P.ID), '1'],
                                                               TProvinciaDM._TeamplaceID + ' = ' + IntToStr(_P.IDTeamplace))
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TProvinciaDM._TeamplaceTableName,
                                                               ['PaisID', 'Nombre', 'Codigo', 'Activo'],
                                                               [IntToStr(_P.Pais.IDTeamplace), QuotedStr(_P.Descripcion), IntToStr(_P.ID), '1'])
end;

procedure TProvincia.setPaisID(const Value: TObjectID);
begin
  if (Value <> FPaisID) and assigned(FPais) then
    FreeAndNil(FPais);
  FPaisID := Value;
end;

{ TProvinciaDM }
class function TProvinciaDM.TableName: string;
begin
  Result := 'PROVINCIAS';
end;

class function TProvinciaDM.ID_FieldName: string;
begin
  Result := 'provinciaID';
end;

procedure TProvinciaDM.PopulateFields(PDObject: TPDObject);
begin
  with TProvincia(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    IDField[_PaisID] := paisID;
  end;
end;

procedure TProvinciaDM.PopulateObject(PDObject: TPDObject);
begin
  with TProvincia(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    paisID := IDField[_PaisID];
  end;
end;

{ TProvinciaList }
function TProvinciaList.GetActual: TProvincia;
begin
  Result := TProvincia(CurrentObject);
end;

function TProvinciaList.CreateNewObject: TPDObject;
begin
  Result := TProvincia.Create;
end;

function TProvinciaList.FindDescripcion(_Des: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(Actual.Descripcion) = uppercase(_Des));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TProvinciaList.CreateAll;
begin
  inherited Create(TProvincia, TProvinciaDM.CreateAll( False ));
end;

constructor TProvinciaList.CreateByPais(_P: TPais);
  Function WhereString : String;
  begin
    Result := TProvinciaDM.TableName + '.' + TProvinciaDM._PaisID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TProvincia, TProvinciaDM.CreateAll(False, WhereString));
end;

{ TPais }
constructor TPais.Create;
begin
  inherited;
  DMObject                := Aplicacion.DMProvider.GetGlobalDM(TPaisDM);
  FarchivoDeImagen        := Null;
  FResourceLanguagePaisID := NullID;
  FResourceLanguagePais   := nil;
  FIDTeamplace            := Null;
end;

procedure TPais.Delete;
begin
  If (provincias.Count > 0) then
  Begin
    If (aplicacion.Mensaje( 'Este País contiene provincias asignadas. Se eliminaran todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
      provincias.DeleteAll
    else
      Abort;
  End;
  Inherited;

end;

function TPais.GetarchivoDeImagen: TString;
var
  FL: TFotoList;
  begin
  if FarchivoDeImagen = null then
    try
      FL := TFotoList.CreatebyPaisCodigo(Codigo, 'pais');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen := ArchivoSinImagen;
    Finally
      FreeAndNil(FL);
  end;
  Result := FarchivoDeImagen;
end;

function TPais.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenTerminaciones;
  Result := FarchivoSinImagen;
end;

function TPais.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TPaisList;
end;

function TPais.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TPaisDM._TeamplaceTableName, TPaisDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TPaisDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TPais.Getprovincias: TProvinciaList;
begin
  if not assigned(Fprovincias) then
    GetList(TPDList(Fprovincias), TPDList(TProvinciaList.CreateByPais(self)));
  Result := TProvinciaList(Fprovincias);
end;

function TPais.GetResourceLanguagePais: TResourceLanguage;
begin
  if not Assigned(FResourceLanguagePais) then
    GetObject(TResourceLanguage, FResourceLanguagePais, FResourceLanguagePaisID);
  Result := TResourceLanguage(FResourceLanguagePais);
end;

function TPais.GetTipoDeClaveFiscal: TTipoDeClaveFiscal;
begin
  if not assigned(FTipoDeClaveFiscal) then
    GetObject(TTipoDeClaveFiscal, FTipoDeClaveFiscal, FTipoDeClaveFiscalId);
  Result := TTipoDeClaveFiscal(FTipoDeClaveFiscal);
end;

class function TPais.GuardarEnTeamPlace(_P: TPais): Boolean;
begin
  Result := False;

//  if (_P.IDTeamplace <> NullID) then
//    Aplicacion.RaiseExceptionCreate('El Pais ya existe en Teamplace');

  if (_P.IDTeamplace <> NullID) then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TPaisDM._TeamplaceTableName,
                                                               ['Nombre', 'Codigo', 'Activo'],
                                                               [_P.Descripcion, QuotedStr(_P.Codigo), '1'],
                                                               TPaisDM._TeamplaceID + '=' + IntToStr(_P.IDTeamplace))
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TPaisDM._TeamplaceTableName,
                                                               ['Nombre', 'Codigo', 'Activo'],
                                                               [_P.Descripcion, QuotedStr(_P.Codigo), '1'])
end;

function TPais.Save: Boolean;
begin
  // Valido los Cuits

  Result := (cuitFisico = '') or aplicacion.TextService.ValidarCUIL(cuitFisico);

  if not Result then
    Aplicacion.RaiseExceptionCreate('C.U.I.T. Persona Fisica ' + cuitFisico + ' inválida');

  Result := (cuitJuridico = '') Or aplicacion.TextService.ValidarCUIL(cuitJuridico);

  if not Result then
    Aplicacion.RaiseExceptionCreate('C.U.I.T. Persona Juridica ' + cuitJuridico + ' inválida');

  if Result then
    Result := inherited Save;
end;

procedure TPais.SetCuitFisico(const Value: TString);
begin
  fCuitFisico := Value;
  If (Value = '  -        -') Then
    fCuitFisico := '';
end;

procedure TPais.SetCuitJuridico(const Value: TString);
begin
  fCuitJuridico := Value;
  If (Value = '  -        -') Then
    fCuitJuridico := '';
end;

procedure TPais.SetDescripcionEnIngles(const Value: TString);
begin
  fDescripcionEnIngles := uppercase(Value);
end;

procedure TPais.SetResourceLanguagePaisID(const Value: TObjectID);
begin
  if assigned(FResourceLanguagePais) then
    FreeAndNil(FResourceLanguagePaisID);
  FResourceLanguagePaisID := Value;
end;

procedure TPais.SetTipoDeClaveFiscalId(const Value: TObjectID);
begin
  if assigned(FTipoDeClaveFiscal) and (FTipoDeClaveFiscalId <> Value) then
    FreeAndNil(FTipoDeClaveFiscal);
  FTipoDeClaveFiscalId := Value;
end;

{ TPaisDM }
class function TPaisDM.TableName: string;
begin
  Result := 'PAISES';
end;

class function TPaisDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TPaisDM.ID_FieldName: string;
begin
  Result := 'paisID';
end;

procedure TPaisDM.PopulateFields(PDObject: TPDObject);
begin
  with TPais(PDObject) do
    begin
      StringField[_Codigo]                          := Fcodigo;
      StringField[_Descripcion]                     := Fdescripcion;
      StringField[_CuitFisico]                      := fCuitFisico;
      StringField[_CuitJuridico]                    := fCuitJuridico;
      StringField[_DescripcionEnIngles]             := fDescripcionEnIngles;
      StringField[_DDI]                             := fDDI;
      IDField[_TipoDeClaveFiscalID]                 := FTipoDeClaveFiscalId;
      IDField[_resourceLanguagePaisID]              := FResourceLanguagePaisID;
      StringField[_codigoDestinoFacturaElectronica] := FcodigoDestinoFacturaElectronica;
      BooleanField[_EsDireccionEnIngles]            := FEsDireccionEnIngles;
      BooleanField[_EsInactivo]                     := EsInactivo;
    end;
end;

procedure TPaisDM.PopulateObject(PDObject: TPDObject);
begin
  with TPais(PDObject) do
    begin
      Fdescripcion                     := StringField[_Descripcion];
      fCuitFisico                      := StringField[_CuitFisico];
      fCuitJuridico                    := StringField[_CuitJuridico];
      fDescripcionEnIngles             := StringField[_DescripcionEnIngles];
      Fcodigo                          := StringField[_Codigo];
      fDDI                             := StringField[_DDI];
      FTipoDeClaveFiscalId             := IDField[_TipoDeClaveFiscalID];
      FResourceLanguagePaisID          := IDField[_resourceLanguagePaisID];
      FcodigoDestinoFacturaElectronica := StringField[_codigoDestinoFacturaElectronica];
      FEsDireccionEnIngles             := BooleanField[_EsDireccionEnIngles];
      EsInactivo                       := BooleanField[_EsInactivo];
    end;
end;

{ TPaisList }
function TPaisList.GetActual: TPais;
begin
  Result := TPais(CurrentObject);
end;

function TPaisList.CreateNewObject: TPDObject;
begin
  Result := TPais.Create;
end;

constructor TPaisList.CreateAll;
begin
  inherited Create(TPais, TPaisDM.CreateAll(False));
end;

{ TMenuDePerfil }
constructor TMenuDePerfil.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TMenuDePerfilDM);
end;

procedure TMenuDePerfil.SetperfilID(Value: TObjectID);
begin
  if (Value <> FperfilID) and assigned(Fperfil) then
    FreeAndNil(Fperfil);
  FperfilID := Value;
end;

function TMenuDePerfil.Getperfil: TPerfil;
begin
  if not assigned(Fperfil) then
    GetObject(TPerfil, Fperfil, perfilID);
  Result := TPerfil(Fperfil);
end;

procedure TMenuDePerfil.SetmenuID(Value: TObjectID);
begin
  if (Value <> FmenuID) and assigned(Fmenu) then
    FreeAndNil(Fmenu);
  FmenuID := Value;
end;

function TMenuDePerfil.GetMEnu: TMenuAplicacion;
begin
  if not assigned(Fmenu) then
    GetObject(TMenuAplicacion, Fmenu, menuID);
  Result := TMenuAplicacion(Fmenu);
end;

procedure TMenuDePerfil.Delete;
Var
  U: TAccesoDirectoList;
begin
  Try
    U := TAccesoDirectoList.CreateByMenuDePerfil(self); // si tiene iconos relacionados simplemente los borro
    If U.Count > 0 then
      U.DeleteAll;
  Finally
    FreeAndNil(U);
  End;
  inherited;
end;

destructor TMenuDePerfil.Destroy;
begin
  if assigned(Fmenu) then
    FreeAndNil(Fmenu);
  inherited;
end;

{ TMenuDePerfilDM }
class function TMenuDePerfilDM.TableName: string;
begin
  Result := 'MenuesDePerfil';
end;

class function TMenuDePerfilDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    camposDeMenuDePerfil, camposDeMenuesDeAplicacion, CamposDeMenuPadre: String;
  begin
    camposDeMenuDePerfil := TMenuDePerfilDM.TableName+'.'+TMenuDePerfilDM.ID_FieldName+', ';
    camposDeMenuDePerfil := camposDeMenuDePerfil + TMenuDePerfilDM.TableName+'.'+TMenuDePerfilDM._PerfilID +', ' ;
    camposDeMenuDePerfil := camposDeMenuDePerfil + TMenuDePerfilDM.TableName+'.'+TMenuDePerfilDM._MenuID;

    camposDeMenuesDeAplicacion := TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM.ID_FieldName + ' AS '+ TMenuDePerfilDM._CCMenuMenuID + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._Orden + ' AS '+ TMenuDePerfilDM._CCMenuOrden + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._Descripcion + ' AS '+ TMenuDePerfilDM._CCMenuDescripcion + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._EsInactivo + ' AS '+ TMenuDePerfilDM._CCMenuEsInactivo + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._NombreClaseFormulario + ' AS '+ TMenuDePerfilDM._CCMenuNombreClaseFormulario + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._CaptionIcono + ' AS '+ TMenuDePerfilDM._CCMenuCaptionIcono + ', ';
    camposDeMenuesDeAplicacion := camposDeMenuesDeAplicacion + TMenuAplicacionDM.TableName + '.' + TMenuAplicacionDM._PadreID + ' AS '+ TMenuDePerfilDM._CCPadreID ;

    CamposDeMenuPadre := 'MP.' + TMenuAplicacionDM.ID_FieldName + ' AS '+ TMenuDePerfilDM._CCMenuPadreMenuID + ', ';
    CamposDeMenuPadre := CamposDeMenuPadre + 'MP.' + TMenuAplicacionDM._Descripcion + ' AS '+ TMenuDePerfilDM._CCMenuesPadreDescripcion + ', ';
    CamposDeMenuPadre := CamposDeMenuPadre + 'MP.' + TMenuAplicacionDM._Orden + ' AS '+ TMenuDePerfilDM._CCMenuesPadreOrden;

    Result := camposDeMenuDePerfil + ', ' + camposDeMenuesDeAplicacion + ', ' + CamposDeMenuPadre;
  end;

  Function LeftJoinString : String;
  begin
    Result := 'LEFT JOIN ' + TMenuAplicacionDM.TableName + ' ON ' + TMenuDePerfilDM.TableName+'.'+ TMenuDePerfilDM._MenuID + ' = ' + TMenuAplicacionDM.TableName+'.'+ TMenuAplicacionDM.ID_FieldName ;
    Result := Result  + ' LEFT JOIN ' + TMenuAplicacionDM.TableName + ' AS MP ON ' + TMenuAplicacionDM.TableName+'.'+ TMenuAplicacionDM._PadreID + ' = MP.' + TMenuAplicacionDM.ID_FieldName ;
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TMenuDePerfilDM.ID_FieldName: string;
begin
  Result := 'MENUDEPERFILID';
end;

procedure TMenuDePerfilDM.PopulateFields(PDObject: TPDObject);
begin
  with TMenuDePerfil(PDObject) do
  begin
    IDField[_perfilID] := FperfilID;
    IDField[_MenuID]   := FmenuID;
  end;
end;

procedure TMenuDePerfilDM.PopulateObject(PDObject: TPDObject);
begin
  with TMenuDePerfil(PDObject) do
  begin
    FperfilID := IDField[_perfilID];
    FmenuID   := IDField[_MenuID];
  end;
end;

{ TMenuDePerfilList }
function TMenuDePerfilList.GetActual: TMenuDePerfil;
begin
  Result := TMenuDePerfil(CurrentObject);
end;

function TMenuDePerfilList.CreateNewObject: TPDObject;
begin
  Result := TMenuDePerfil.Create;
end;

constructor TMenuDePerfilList.CreateAll;
begin
  inherited Create(TMenuDePerfil, TMenuDePerfilDM.CreateAll(False));
end;

constructor TMenuDePerfilList.CreateByMenu(_M: TMenuAplicacion);
  Function WhereString : String;
  begin
    Result := TMenuDePerfilDM.TableName + '.' + TMenuDePerfilDM._MenuID + '=' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TMenuDePerfil, TMenuDePerfilDM.CreateAll(False, WhereString));
end;

constructor TMenuDePerfilList.CreateByPerfil(_P: TPerfil);
  Function WhereString : String;
  begin
    Result := '(' + TMenuDePerfilDM.TableName + '.' + TMenuDePerfilDM._PerfilID + '=' + IntToStr(_P.ID)+') and ' ;
    Result := Result + '(' + TMenuAplicacionDM.TableName+'.'+ TMenuAplicacionDM._EsInactivo + '=0)';
  end;
  Function OrderByString : String;
  begin
    Result := 'MP.'+TMenuAplicacionDM._Orden+', '+ TMenuAplicacionDM.TableName+'.'+ TMenuAplicacionDM._Orden;
  end;
begin
  inherited Create(TMenuDePerfil, TMenuDePerfilDM.CreateAll(False, WhereString, false, OrderByString ));
end;

{ TPerfil }
procedure TPerfil.ActualizarInfoDeMenuesPermitidos;
begin
  MenuesParaConfigurar.First;
  if MenuesParaConfigurar.Count > 0 then
    repeat

      menues.First;
      if menues.Count > 0 then
        repeat
          if menues.Actual.menuID = MenuesParaConfigurar.Actual.ID then
          begin
            MenuesParaConfigurar.Actual.tmp_HabilitarAUsuario := True;
            break;
          end;

          menues.next;
        until menues.IsLast;

        MenuesParaConfigurar.Actual.tmp_PerfilAActualizar := self;
      MenuesParaConfigurar.next;
    until MenuesParaConfigurar.IsLast;

    MenuesParaConfigurar.First;

end;

constructor TPerfil.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TPerfilDM);
  FEsAdministradorDeArchivos := False;
end;

procedure TPerfil.Delete;
begin
  If (menues.Count > 0) then
  Begin
    If (aplicacion.Mensaje( 'Este perfil contiene menues asiganados. Se eliminaran todas esas asociaciones. Prosigue ?', 'Atencion',  MB_YESNO) = ID_YES) then
      menues.DeleteAll
    else
      Abort;
  End;
  Inherited;
end;

destructor TPerfil.Destroy;
begin
  if assigned(FMenuesParaConfigurar) then
    FreeAndNil(FMenuesParaConfigurar);
  if assigned(Fmenues) then
    FreeAndNil(Fmenues);
  inherited;
end;

function TPerfil.Getmenues: TMenuDePerfilList;
begin
  if not assigned(Fmenues) then
    GetList(TPDList(Fmenues), TPDList(TMenuDePerfilList.CreateByPerfil(self)));
  Result := TMenuDePerfilList(Fmenues);
end;

function TPerfil.GetMenuesParaConfigurar: TMenuAplicacionList;
begin
  if not assigned(FMenuesParaConfigurar) then
  begin
    GetList(TPDList(FMenuesParaConfigurar), TPDList(TMenuAplicacionList.CreateAll));
    ActualizarInfoDeMenuesPermitidos;
  end;
  Result := TMenuAplicacionList(FMenuesParaConfigurar);
end;

{ TPerfilDM }
class function TPerfilDM.TableName: string;
begin
  Result := 'PERFILES';
end;

class function TPerfilDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TPerfilDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TPerfilDM.ID_FieldName: string;
begin
  Result := 'PERFILID';
end;

procedure TPerfilDM.PopulateFields(PDObject: TPDObject);
begin
  with TPerfil(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
    BooleanField[_EsAdministradorDeArchivos] := FEsAdministradorDeArchivos;
  end;
end;

procedure TPerfilDM.PopulateObject(PDObject: TPDObject);
begin
  with TPerfil(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
    FEsAdministradorDeArchivos := BooleanField[_EsAdministradorDeArchivos];
  end;
end;

{ TPerfilList }
function TPerfilList.GetActual: TPerfil;
begin
  Result := TPerfil(CurrentObject);
end;

constructor TPerfilList.CreateByPerfilLike(_Perfil: String; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := TPerfilDM.TableName + '.' + TPerfilDM._Descripcion + ' like ' + QuotedStr(_Perfil + '%');
  end;
begin
  inherited Create(TPerfil, TPerfilDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TPerfilList.CreateNewObject: TPDObject;
begin
  Result := TPerfil.Create;
end;

constructor TPerfilList.CreateAll (_SoloActivos : Boolean);
begin
  inherited Create(TPerfil, TPerfilDM.CreateAll(False, '', _SoloActivos));
end;

{ TTipoDeDocumento }
constructor TTipoDeDocumento.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeDocumentoDM);
end;

function TTipoDeDocumento.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeDocumentoList;
end;

function TTipoDeDocumento.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TTipoDeDocumentoDM._TeamplaceTableName, TTipoDeDocumentoDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TTipoDeDocumentoDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TTipoDeDocumento.Save: Boolean;
begin
  Result := inherited Save;
end;

{ TTipoDeDocumentoDM }
class function TTipoDeDocumentoDM.TableName: string;
begin
  Result := 'TIPOSDEDOCUMENTO';
end;


class function TTipoDeDocumentoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeDocumentoDM.ID_FieldName: string;
begin
  Result := 'TipoDeDocumentoID';
end;

procedure TTipoDeDocumentoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeDocumento(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    StringField[_Codigo]      := Codigo;
    BooleanField[_EsInactivo] := EsInactivo;
    StringField[_CodigoAfip]  := CodigoAfip;
    BooleanField[_ValidarRepetidos] := ValidarRepetidos;
  end;
end;

procedure TTipoDeDocumentoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeDocumento(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    Codigo      := StringField[_Codigo];
    EsInactivo  := BooleanField[_EsInactivo];
    CodigoAfip  := StringField[_CodigoAfip];
    ValidarRepetidos := BooleanField[_ValidarRepetidos];
  end;
end;

{ TTipoDeDocumentoList }
function TTipoDeDocumentoList.GetActual: TTipoDeDocumento;
begin
  Result := TTipoDeDocumento(CurrentObject);
end;

function TTipoDeDocumentoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeDocumento.Create;
end;

constructor TTipoDeDocumentoList.CreateAll;
begin
  inherited Create(TTipoDeDocumento, TTipoDeDocumentoDM.CreateAll(False));
end;

{ TCondicionDeVenta }
constructor TCondicionDeVenta.Create;
begin
  inherited;
  DMObject     := Aplicacion.DMProvider.GetGlobalDM(TCondicionDeVentaDM);
  FIDTeamplace := Null;
  FCondicionDePagoEnDias := -777;
end;

{ TFormaDePagoDM }
class function TCondicionDeVentaDM.TableName: string;
begin
  Result := 'CondicionesDeVenta';
end;

class function TCondicionDeVentaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCondicionDeVentaDM.ID_FieldName: string;
begin
  Result := 'CondicionDeVentaID';
end;

procedure TCondicionDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TCondicionDeVenta(PDObject) do
  begin
    StringField[_Descripcion]      := Descripcion;
    StringField[_Codigo]           := Codigo;
    BooleanField[_EsContraEntrega] := EsContraEntrega;
    BooleanField[_EsInactivo]      := EsInactivo;
  end;
end;

procedure TCondicionDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TCondicionDeVenta(PDObject) do
  begin
    FDescripcion     := StringField[_Descripcion];
    FCodigo          := StringField[_Codigo];
    FEsContraEntrega := BooleanField[_EsContraEntrega];
    FEsInactivo      := BooleanField[_EsInactivo];
  end;
end;

procedure TCondicionDeVenta.Delete;
begin
  if Detalles.Count > 0 then
    Detalles.DeleteAll;
  inherited;
end;

function TCondicionDeVenta.GetCodigoInternoSifab: TEntero;
begin
  if isAssigned and (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('CondicionPago', 'CodigoCondicionPago = ' + QuotedStr( Codigo ) , 'codigoInternoCondicionPago');
  Result := FCodigoInternoSifab;
end;

function TCondicionDeVenta.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TCondicionDeVentaList;
end;

function TCondicionDeVenta.GetDetalles: TCondicionDeVentaDetalleList;
begin
  If not assigned(FDetalles) Then
    GetList(TPDList(FDetalles), TPDList(TCondicionDeVentaDetalleList.CreateByCondicionDeVenta(self)));
  Result := FDetalles;
end;

function TCondicionDeVenta.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TCondicionDeVentaDM._TeamplaceTableName, TCondicionDeVentaDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TCondicionDeVentaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

{ TCondicionDeVentaList }
function TCondicionDeVentaList.GetActual: TCondicionDeVenta;
begin
  Result := TCondicionDeVenta(CurrentObject);
end;

constructor TCondicionDeVentaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCondicionDeVenta, TCondicionDeVentaDM.CreateAll(False, '', _SoloActivos));
end;

constructor TCondicionDeVentaList.CreateByCodigoLike(_C: string; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TCondicionDeVentaDM.TableName + '.' + TCondicionDeVentaDM._Codigo + ' Like ' + QuotedStr(_C + '%');
  end;
begin
  inherited Create(TCondicionDeVenta, TCondicionDeVentaDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCondicionDeVentaList.CreateByDescripcion(_D: string; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TCondicionDeVentaDM.TableName + '.' + TCondicionDeVentaDM._Descripcion + '=' + QuotedStr(_D) ;
  end;
begin
  inherited Create(TCondicionDeVenta, TCondicionDeVentaDM.CreateAll(False, WhereString, _SoloActivos));
end;


constructor TCondicionDeVentaList.CreateByDescripcionLike(_D: string; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TCondicionDeVentaDM.TableName + '.' + TCondicionDeVentaDM._Descripcion + ' Like ' + QuotedStr(_D + '%') ;
  end;
begin
  inherited Create(TCondicionDeVenta, TCondicionDeVentaDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TCondicionDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TCondicionDeVenta.Create;
end;

{ TDescriptibleAbreviado }

constructor TDescriptibleAbreviado.Create;
begin
  inherited;
  Fcodigo            := null;
  FRellenarCodigo    := False;
  fLargoCodigo       := 0;
  FValidarDuplicados := True;
end;

// -----------------------------------------------------------------------
{ TActividadDM }
class function TActividadDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TActividadDM.ID_FieldName: string;
begin
  Result := 'actividadID';
end;

procedure TActividadDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  with TActividad(PDObject) do
    begin
      StringField[_Codigo] := codigo;
      StringField[_Descripcion]       := Descripcion;
      BooleanField[_EsInactivo]       := EsInactivo;
      IDField[_CanalDeDistribucionID] := FCanalDeDistribucionID;
    end;
end;

procedure TActividadDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  with TActividad(PDObject) do
    begin
      FCodigo                := StringField[_Codigo];
      FDescripcion           := StringField[_Descripcion];
      FEsInactivo            := BooleanField[_EsInactivo];
      FCanalDeDistribucionID := IDField[_CanalDeDistribucionID];
    end;
end;

class function TActividadDM.TableName: string;
begin
  Result := 'Actividades';
end;

function TDescriptibleAbreviado.getcodigo: TString;
begin
  If Fcodigo = null then
    begin
      Fcodigo := '';
      exit;
    end;
  Result := trim(Fcodigo);
  If solomayusculas Then
    Result := uppercase(Fcodigo);
end;

function TDescriptibleAbreviado.GetCodigoRelleno(_Valor: String) : String;
begin
  Result := aplicacion.TextService.RellenarCodigo(_Valor, LargoCodigo);
end;

function TDescriptibleAbreviado.GetLargoCodigo: TEntero;
begin
  if (fLargoCodigo=Null ) or (fLargoCodigo=0 ) then
    fLargoCodigo := aplicacion.LargoCodigos.LargoCodigoEstandar;
  Result := fLargoCodigo;
end;

procedure TDescriptibleAbreviado.GuardarEnSifab(_CodigoRotulo, _CodigoTipoCaracteristica, _CodigoEmpresa: Integer; _Descripcion: string);
  procedure AsignarDatos;
  begin
    try
      try
        aplicacion.sesion.ConexionSifab.Caracteristica.Active := True;
        aplicacion.sesion.ConexionSifab.StartTransaction;
        aplicacion.sesion.ConexionSifab.Caracteristica.Append;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoInternoRotuloClasificador').Value := _CodigoRotulo;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoCaracteristica').AsString         := codigo;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('descripcionCaracteristica').AsString    := _Descripcion;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoTipoCaracteristica').Value        := _CodigoTipoCaracteristica;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoInternoEmpresa').Value            := _CodigoEmpresa;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoEstado').Value                    := 1;
        aplicacion.sesion.ConexionSifab.Caracteristica.Post;
        aplicacion.sesion.ConexionSifab.Commit;
      Except
        aplicacion.sesion.ConexionSifab.Rollback;
      end;
    finally
      aplicacion.sesion.ConexionSifab.Caracteristica.Active := False;
    end;
  end;

  function FaltaElDato(_Codigo: String; _Rotulo, _TipodeCaracteristica: Integer) : Boolean;
  begin
    if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    try
      aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'select codigoCaracteristica from Caracteristica where (codigoCaracteristica = ' + quotedstr(_Codigo)
        + ') and (codigoInternoRotuloClasificador = ' + IntToStr(_Rotulo) + ') and (codigoTipoCaracteristica=' + IntToStr(_TipodeCaracteristica) + ')';
      aplicacion.sesion.ConexionSifab.SqlQuery.Open;
      Result := (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount = 0);
    finally
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    end;
  end;
begin
  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
    Exit;
  if FaltaElDato(codigo, _CodigoRotulo, _CodigoTipoCaracteristica) then
    AsignarDatos;
end;

function TDescriptibleAbreviado.Save: Boolean;
begin
  If RellenarCodigo Then
  Begin
    If length(Fcodigo) > LargoCodigo Then
      Aplicacion.RaiseExceptionCreate('El codigo no puede superar los ' + IntToStr(LargoCodigo) + ' caracteres');
    Fcodigo := GetCodigoRelleno( FCodigo) ;
  End;
  Result := Inherited Save;
end;

procedure TDescriptibleAbreviado.SetCodigo(const Value: TString);
begin
  FCodigo := Trim(Value);
  If SoloMayusculas Then
    FCodigo := UpperCase(FCodigo);
end;

// -----------------------------------------------------------------------
procedure TDescriptibleAbreviado.Validate(LC: TDescriptibleAbreviadoListClass);
var
  L: TDescriptibleAbreviadoList;
begin
  if ValidarDuplicados then
    try
      L := LC.CreateByCodigoYIdDiferente(codigo, ID, False);
      if (L.Count > 0) then
        Aplicacion.RaiseExceptionCreate('Ha ingresado un Código Duplicado ("' + codigo + '")' );
    Finally
      FreeAndNil(L);
    End;
end;

procedure TDescriptibleAbreviado.ValidateOnInsert;
begin
  Validate(GetDescriptibleAbreviadoListClass);
end;

procedure TDescriptibleAbreviado.ValidateOnUpdate;
begin
  Validate(GetDescriptibleAbreviadoListClass);
end;

{ TActividadList }

constructor TActividadList.CreateAll;
begin
  // trae todo lo que hay
  inherited Create(TActividad, TActividadDM.CreateAll(False) );
end;

function TActividadList.CreateNewObject: TPDObject;
begin
  // crea un objeto vacio de Tactividad
  Result := TActividad.Create;
end;

function TActividadList.GetActual: TActividad;
begin
  Result := TActividad(CurrentObject);
end;

{ TActividad }
constructor TActividad.Create;
begin
  inherited;
  self.DMObject := aplicacion.DMProvider.GetGlobalDM(TActividadDM);
  LargoCodigo   := aplicacion.LargoCodigos.LargoActividad;
  RellenarCodigo:= True;
  FCanalDeDistribucionID := NullID;
  FCanalDeDistribucion   := Nil;
end;

function TActividad.GetCanalDeDistribucion: TCanalDeDistribucion;
begin
  if not assigned(FCanalDeDistribucion) then
    GetObject(TCanalDeDistribucion, FCanalDeDistribucion, CanalDeDistribucionID);
  Result := TCanalDeDistribucion(FCanalDeDistribucion);
end;

function TActividad.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TActividadList;
end;

procedure TActividad.SetCanalDeDistribucionID(const Value: TObjectID);
begin
  If assigned(FCanalDeDistribucion) and (FCanalDeDistribucionID <> Value) then
    FreeAndNil( FCanalDeDistribucion );
  FCanalDeDistribucionID := Value;
end;

procedure TActividad.ValidateOnDelete;
var
  EL :TEmpresaList;
begin
  inherited;
  EL := TEmpresaList.CreateByCondition( TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._ActividadID +' = '+ IntToStr(ID));
  try
    if (EL.Count>0) then
      Aplicacion.RaiseExceptionCreate('No se puede borrar la actividad porque está asignada en una o varias empresas.');

  finally
    FreeAndNil(EL);
  end;
end;

{ TMoneda }
constructor TMoneda.Create;
begin
  inherited;
  DMObject             := Aplicacion.DMProvider.GetGlobalDM(TMonedaDM);
  Fcodigo              := Null;
  Fdescripcion         := Null;
  FcoeficienteTemporal := 0;
  FEsPredeterminada    := False;
  FCodigoSifab         := '';
  FCodigoInternoSifab  := Null;
  FCodigoMonedaOficial := Null;
  FListaDePrecioSifab  := 0;
  FIDTeamplace         := Null
end;

function TMoneda.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Genericas', 'DescripcionItem =' + QuotedStr( CodigoSifab ) , 'CodigoItem');
  Result := FCodigoInternoSifab;
end;

function TMoneda.GetCodigoMonedaOficial: TString;
begin
  if (FCodigoMonedaOficial = null) then
    if not aplicacion.parametros.FindCodigo(Aplicacion.ConstantAllocator.PRM_CodigoMonedaOficial) then
      raise exception.Create('No se encontro el parametro ' +  aplicacion.ConstantAllocator.PRM_CodigoMonedaOficial)
    else
      FCodigoMonedaOficial := aplicacion.parametros.Actual.valorTexto;
  Result := FCodigoMonedaOficial;
end;

function TMoneda.getCotizaciones: TMonedaCotizacionList;
begin
  If not assigned(FCotizaciones) Then
    GetList(TPDList(FCotizaciones),  TPDList(TMonedaCotizacionList.CreateByMonedaPadre(self)));
  Result := FCotizaciones;
end;

function TMoneda.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TMonedaList;
end;

function TMoneda.GetEsPredeterminada: TBoolean;
begin
  FEsPredeterminada := (codigo = CodigoMonedaOficial);
  Result := FEsPredeterminada;
end;

function TMoneda.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TMonedaDM._TeamplaceTableName, TMonedaDM._TeamplaceCodigo + ' = ' + QuotedStr( CodigoTeamplace ), TMonedaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

{ TMonedaDM }
class function TMonedaDM.TableName: string;
begin
  Result := 'Monedas';
end;

class function TMonedaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID'
end;

class function TMonedaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMonedaDM.ID_FieldName: string;
begin
  Result := 'MonedaID';
end;

procedure TMonedaDM.PopulateFields(PDObject: TPDObject);
begin
  with TMoneda(PDObject) do
    begin
      StringField[_Codigo]              := Codigo;
      StringField[_Descripcion]         := Descripcion;
      BooleanField[_esPredeterminada]   := EsPredeterminada;
      StringField[_CodigoSifab]         := CodigoSifab;
      StringField[_CodigoAfip]          := CodigoAfip;
      StringField[_CodigoTeamplace]     := CodigoTeamplace;
      IntegerField[_ListaDePrecioSifab] := ListaDePrecioSifab;
      BooleanField[_EsInactivo]         := EsInactivo;
    end;
end;

procedure TMonedaDM.PopulateObject(PDObject: TPDObject);
begin
  with TMoneda(PDObject) do
    begin
      FCodigo             := StringField[_Codigo];
      FDescripcion        := StringField[_Descripcion];
      FEsPredeterminada   := BooleanField[_EsPredeterminada];
      FCodigoSifab        := StringField[_CodigoSifab];
      FCodigoAfip         := StringField[_CodigoAfip];
      FCodigoTeamplace    := StringField[_CodigoTeamplace];
      FListaDePrecioSifab := IntegerField[_ListaDePrecioSifab];
      EsInactivo          := BooleanField[_EsInactivo];
    end;
end;

{ TMonedaList }
function TMonedaList.GetActual: TMoneda;
begin
  Result := TMoneda(CurrentObject);
end;

function TMonedaList.CreateNewObject: TPDObject;
begin
  Result := TMoneda.Create;
end;

constructor TMonedaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TMoneda, TMonedaDM.CreateAll(False,'' , _SoloActivos ));
end;

constructor TMonedaList.CreateByMonedaPredeterminada;
Function WhereString : String;
  begin
    Result := '(' + TMonedaDM._esPredeterminada + ' = 1)';
  end;
begin
  Inherited Create(TMoneda,TMonedaDM.CreateAll( False, WhereString ));
end;

constructor TMonedaList.CreateWhereNotID(_ID: TObjectID);
Function WhereString : String;
  begin
    Result := '(IDFieldName <> ' + IntToStr(_ID) + ')';
  end;
begin
  Inherited Create(TMoneda, TMonedaDM.CreateAll(False, WhereString));
end;

function TMonedaList.FindCodigoSifab(_CodigoSifab: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (AnsiLowerCase(Actual.CodigoSifab) = AnsiLowerCase(_CodigoSifab));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

{ TTipoDeAsiento }
constructor TTipoDeAsiento.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeAsientoDM);
  FCodigoInternoSifab := Null;
end;

function TTipoDeAsiento.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = null) then
    FCodigoInternoSifab := aplicacion.sesion.ConexionSifab.Get_Integer_Field('Genericas', 'DescripcionItem = ' + QuotedStr(Descripcion),'codigoItem');
  Result := FCodigoInternoSifab;
end;

function TTipoDeAsiento.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeAsientoList;
end;

{ TTipoDeAsientoDM }
class function TTipoDeAsientoDM.TableName: string;
begin
  Result := 'tiposdeasiento';
end;

class function TTipoDeAsientoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeAsientoDM.ID_FieldName: string;
begin
  Result := 'TipoDeAsientoID';
end;

procedure TTipoDeAsientoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeAsiento(PDObject) do
  begin
    StringField[_Codigo]      := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TTipoDeAsientoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeAsiento(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TTipoDeAsientoList }
function TTipoDeAsientoList.GetActual: TTipoDeAsiento;
begin
  Result := TTipoDeAsiento(CurrentObject);
end;

function TTipoDeAsientoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeAsiento.Create;
end;

constructor TTipoDeAsientoList.CreateAll;
begin
  inherited Create(TTipoDeAsiento, TTipoDeAsientoDM.CreateAll(False, '', _SoloActivos));
end;

{ TEstadoDeRemito }
constructor TEstadoDeRemito.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDeRemitoDM);
end;

function TEstadoDeRemito.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeRemitoList;
end;

{ TEstadoDeRemitoDM }
class function TEstadoDeRemitoDM.TableName: string;
begin
  Result := 'EstadosDeRemito';
end;

class function TEstadoDeRemitoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeRemitoDM.ID_FieldName: string;
begin
  Result := 'EstadoDeRemitoID';
end;

procedure TEstadoDeRemitoDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeRemito(PDObject) do
  begin
    StringField[_Codigo]                := Codigo;
    StringField[_Descripcion]           := Descripcion;
    BooleanField[_EsInactivo]           := EsInactivo;
    BooleanField[_SumaACantidadEnviada] := SumaACantidadEnviada;
    BooleanField[_EsEstadoFacturado]    := EsEstadoFacturado;
  end;
end;

procedure TEstadoDeRemitoDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeRemito(PDObject) do
  begin
    Codigo               := StringField[_Codigo];
    Descripcion          := StringField[_Descripcion];
    EsInactivo           := BooleanField[_EsInactivo];
    SumaACantidadEnviada := BooleanField[_SumaACantidadEnviada];
    EsEstadoFacturado    := BooleanField[_EsEstadoFacturado];
  end;
end;

{ TEstadoDeRemitoList }
function TEstadoDeRemitoList.GetActual: TEstadoDeRemito;
begin
  Result := TEstadoDeRemito(CurrentObject);
end;

function TEstadoDeRemitoList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeRemito.Create;
end;

constructor TEstadoDeRemitoList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TEstadoDeRemito, TEstadoDeRemitoDM.CreateAll(False,'',_SoloActivos));
end;

{ TEstadoDeFactura }
constructor TEstadoDeFactura.Create;
begin
  inherited;
  DMObject := Aplicacion.DMProvider.GetGlobalDM(TEstadoDeFacturaDM);
end;

function TEstadoDeFactura.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeFacturaList;
end;

{ TEstadoDeFacturaDM }
class function TEstadoDeFacturaDM.TableName: string;
begin
  Result := 'EstadosDeFactura';
end;


class function TEstadoDeFacturaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeFacturaDM.ID_FieldName: string;
begin
  Result := 'EstadoDeFacturaID';
end;

procedure TEstadoDeFacturaDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeFactura(PDObject) do
  begin
    StringField[_Codigo]             := Codigo;
    StringField[_Descripcion]        := Descripcion;
    BooleanField[_EsInactivo]        := EsInactivo;
    BooleanField[_EsEstadoCancelado] := EsEstadoCancelado;
  end;
end;

procedure TEstadoDeFacturaDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeFactura(PDObject) do
  begin
    Codigo            := StringField[_Codigo];
    Descripcion       := StringField[_Descripcion];
    EsInactivo        := BooleanField[_EsInactivo];
    EsEstadoCancelado := BooleanField[_EsEstadoCancelado];
  end;
end;

{ TEstadoDeFacturaList }
function TEstadoDeFacturaList.GetActual: TEstadoDeFactura;
begin
  Result := TEstadoDeFactura(CurrentObject);
end;

function TEstadoDeFacturaList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeFactura.Create;
end;

constructor TEstadoDeFacturaList.CreateAll;
begin
  inherited Create(TEstadoDeFactura, TEstadoDeFacturaDM.CreateAll(False));
end;

{ TestadosdePedidoDeCompra }
constructor TEstadoDePedidoDeCompra.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDePedidoDeCompraDM);
end;

{ TestadosdePedidoDeCompraDM }
class function TEstadoDePedidoDeCompraDM.TableName: string;
begin
  Result := 'estadosdepedidodecompra';
end;

class function TEstadoDePedidoDeCompraDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePedidoDeCompraDM.ID_FieldName: string;
begin
  Result := 'EstadoDePedidoDeCompraID';
end;

procedure TEstadoDePedidoDeCompraDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeCompra(PDObject) do
  begin
    StringField[_Codigo] := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDePedidoDeCompraDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeCompra(PDObject) do
  begin
    codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TestadosdePedidoDeCompraList }
function TEstadoDePedidoDeCompraList.GetActual: TEstadoDePedidoDeCompra;
begin
  Result := TEstadoDePedidoDeCompra(CurrentObject);
end;

function TEstadoDePedidoDeCompraList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePedidoDeCompra.Create;
end;

constructor TEstadoDePedidoDeCompraList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDePedidoDeCompra, TEstadoDePedidoDeCompraDM.CreateAll(False, '', _SoloActivos));
end;

{ TEstadoDePedidoDeVenta }
constructor TEstadoDePedidoDeVenta.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDePedidoDeVentaDM);
//  FCopiarPedidoAViejo := False;
//  FCopiarPedidoASifab := False;
end;

Function TEstadoDePedidoDeVenta.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePedidoDeVentaList;
end;

{ TEstadoDePedidoDeVentaDM }
class function TEstadoDePedidoDeVentaDM.TableName: string;
begin
  Result := 'estadosdepedidodeventa';
end;


class function TEstadoDePedidoDeVentaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePedidoDeVentaDM.ID_FieldName: string;
begin
  Result := 'EstadoDePedidoDeVentaID';
end;


procedure TEstadoDePedidoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeVenta(PDObject) do
  begin
    StringField[_Codigo]                     := Codigo;
    StringField[_Descripcion]                := Descripcion;
//    BooleanField[_copiarPedidoASifab]        := CopiarPedidoASifab;
//    BooleanField[_copiarPedidoAViejo]        := CopiarPedidoAViejo;
    BooleanField[_CargarHojasDeRuta]         := CargarHojasDeRuta;
    BooleanField[_EsEstadoDePedidoPendiente] := EsEstadoDePedidoPendiente;
    BooleanField[_EsInactivo]                := EsInactivo;
    BooleanField[_FiguraEnTiraDiaria]        := FiguraEnTiraDiaria;
  end;
end;

procedure TEstadoDePedidoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeVenta(PDObject) do
  begin
    Codigo                     := StringField[_Codigo];
    Descripcion                := StringField[_Descripcion];
//    FCopiarPedidoASifab        := BooleanField[_copiarPedidoASifab];
//    FCopiarPedidoAViejo        := BooleanField[_copiarPedidoAViejo];
    FCargarHojasDeRuta         := BooleanField[_CargarHojasDeRuta];
    FEsEstadoDePedidoPendiente := BooleanField[_EsEstadoDePedidoPendiente];
    FEsInactivo                := BooleanField[_EsInactivo];
    FFiguraEnTiraDiaria        := BooleanField[_FiguraEnTiraDiaria];
  end;
end;

{ TEstadoDePedidoDeVentaList }
function TEstadoDePedidoDeVentaList.GetActual: TEstadoDePedidoDeVenta;
begin
  Result := TEstadoDePedidoDeVenta(CurrentObject);
end;

function TEstadoDePedidoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePedidoDeVenta.Create;
end;

constructor TEstadoDePedidoDeVentaList.CreateAll;
begin
  inherited Create(TEstadoDePedidoDeVenta, TEstadoDePedidoDeVentaDM.CreateAll(False, '', False, TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM._Descripcion));
end;

constructor TEstadoDePedidoDeVentaList.CreateByCodigosDeEstado(_SL: TStringList);
  Function WhereString : String;
  var
    I: Integer;
begin
    Result := 'Upper(codigo) in ( ';
  for i := 0 to _SL.Count - 1 do
  Begin
    if not(i = _SL.Count - 1) then
          Result := Result + QuotedStr(_SL.Strings[I]) + ', '
    else
          Result := Result + QuotedStr(_SL.Strings[I]);
  End;
      Result := Result + ' )';
  end;
begin
  inherited Create(TEstadoDePedidoDeVenta, TEstadoDePedidoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TEstadoDePedidoDeVentaList.CreateByEstadosDePedidoPendiente;
  Function WhereString : String;
  begin
    Result := TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM._EsEstadoDePedidoPendiente + '=1';
  end;
begin
  inherited Create(TEstadoDePedidoDeVenta, TEstadoDePedidoDeVentaDM.CreateAll(False, WhereString, False, TEstadoDePedidoDeVentaDM.TableName + '.' + TEstadoDePedidoDeVentaDM._Descripcion));
end;

constructor TEstadoDePedidoDeVentaList.CreateEmpty;
begin
  inherited Create(TEstadoDePedidoDeVenta,TEstadoDePedidoDeVentaDM.CreateEmpty);
end;

{ TestadoDePresupuesto }
constructor TEstadoDePresupuestoDeVenta.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDePresupuestoDeVentaDM);
end;

function TEstadoDePresupuestoDeVenta.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePresupuestoDeVentaList;
end;

{ TEstadoDePresupuestoDeVentaDM }
class function TEstadoDePresupuestoDeVentaDM.TableName: string;
begin
  Result := 'estadosdePresupuestodeventa';
end;

class function TEstadoDePresupuestoDeVentaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePresupuestoDeVentaDM.ID_FieldName: string;
begin
  Result := 'EstadoDePresupuestoDeVentaID';
end;

procedure TEstadoDePresupuestoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePresupuestoDeVenta(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDePresupuestoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePresupuestoDeVenta(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDePresupuestoDeVentaList }
function TEstadoDePresupuestoDeVentaList.GetActual: TEstadoDePresupuestoDeVenta;
begin
  Result := TEstadoDePresupuestoDeVenta(CurrentObject);
end;

function TEstadoDePresupuestoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePresupuestoDeVenta.Create;
end;

constructor TEstadoDePresupuestoDeVentaList.CreateAll(_SoloActivos:Boolean);
begin
  inherited Create(TEstadoDePresupuestoDeVenta, TEstadoDePresupuestoDeVentaDM.CreateAll(False,'',_SoloActivos));
end;

constructor TEstadoDePresupuestoDeVentaList.CreateByCodigosDeEstado(_SL: TStringList);
  Function WhereString : String;
  var
    I: Integer;
begin
    Result := 'Upper(codigo) in ( ';
  for i := 0 to _SL.Count - 1 do
  Begin
    if not(i = _SL.Count - 1) then
          Result := Result + QuotedStr(_SL.Strings[I]) + ', '
    else
          Result := Result + QuotedStr(_SL.Strings[I]);
  End;
    Result := Result + ' )';
  end;
begin
  inherited Create(TEstadoDePresupuestoDeVenta, TEstadoDePresupuestoDeVentaDM.CreateAll(False, WhereString));
end;

constructor TEstadoDePresupuestoDeVentaList.CreateEmpty;
begin
  inherited Create(TEstadoDePresupuestoDeVenta, TEstadoDePresupuestoDeVentaDM.CreateEmpty);
end;

{ TestadoDePedidoDeProduccion }
constructor TEstadoDePedidoDeProduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDePedidoDeProduccionDM);
end;

function TEstadoDePedidoDeProduccion.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePedidoDeProduccionList;
end;

{ TEstadoDePedidoDeProduccionDM }
class function TEstadoDePedidoDeProduccionDM.TableName: string;
begin
  Result := 'estadosdePedidoDeProduccion';
end;


class function TEstadoDePedidoDeProduccionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePedidoDeProduccionDM.ID_FieldName: string;
begin
  Result := 'EstadoDePedidoDeProduccionID';
end;

procedure TEstadoDePedidoDeProduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeProduccion(PDObject) do
  begin
    StringField[_Codigo]      := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDePedidoDeProduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeProduccion(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDePedidoDeProduccionList }
function TEstadoDePedidoDeProduccionList.GetActual: TEstadoDePedidoDeProduccion;
begin
  Result := TEstadoDePedidoDeProduccion(CurrentObject);
end;

function TEstadoDePedidoDeProduccionList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePedidoDeProduccion.Create;
end;

constructor TEstadoDePedidoDeProduccionList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(TEstadoDePedidoDeProduccion, TEstadoDePedidoDeProduccionDM.CreateAll(False,'',_SoloActivos));
end;

constructor TEstadoDePedidoDeProduccionList.CreateByCodigosDeEstado(_SL: TStringList);
  Function WhereString : String;
  var
    I: Integer;
begin
    Result := 'Upper(codigo) in ( ';
  for i := 0 to _SL.Count - 1 do
  Begin
    if not(i = _SL.Count - 1) then
        Result := Result + QuotedStr(_SL.Strings[I]) + ', '
    else
        Result := Result + QuotedStr(_SL.Strings[I]);
  End;
    Result := Result + ' )';
  end;
begin
  inherited Create(TEstadoDePedidoDeProduccion, TEstadoDePedidoDeProduccionDM.CreateAll(False, WhereString));
end;

constructor TEstadoDePedidoDeProduccionList.CreateEmpty;
begin
  inherited Create(TEstadoDePedidoDeProduccion, TEstadoDePedidoDeProduccionDM.CreateEmpty);
end;

{ TEstadoDeStock }
function TEstadoDeStock.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeStockList;
end;

constructor TEstadoDeStock.Create;
begin
  inherited;
  DMObject                := aplicacion.DMProvider.GetGlobalDM(TEstadoDeStockDM);
  Forden                  := null;
  FesAsignacionPedidoItem := False;
end;

{ TEstadoDeStockDM }
class function TEstadoDeStockDM.TableName: string;
begin
  Result := 'EstadosDeStock';
end;

class function TEstadoDeStockDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeStockDM.ID_FieldName: string;
begin
  Result := 'EstadoDeStockID';
end;

procedure TEstadoDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeStock(PDObject) do
    begin
      StringField[_Codigo]                  := Codigo;
      StringField[_Descripcion]             := Descripcion;
      IntegerField[_Orden]                  := Orden;
      BooleanField[_EsAsignacionPedidoItem] := EsAsignacionPedidoItem;
      BooleanField[_EsInactivo]             := EsInactivo;
    end;
end;

procedure TEstadoDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeStock(PDObject) do
    begin
      Codigo                  := StringField[_Codigo];
      Descripcion             := StringField[_Descripcion];
      FOrden                  := IntegerField[_Orden];
      FEsAsignacionPedidoItem := BooleanField[_EsAsignacionPedidoItem];
      EsInactivo              := BooleanField[_EsInactivo];
    end;
end;

{ TEstadoDeStockList }
function TEstadoDeStockList.GetActual: TEstadoDeStock;
begin
  Result := TEstadoDeStock(CurrentObject);
end;

function TEstadoDeStockList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeStock.Create;
end;

constructor TEstadoDeStockList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDeStock, TEstadoDeStockDM.CreateAll(False,'',_SoloActivos));
end;

{ TTipoDeVendedor }
constructor TTipoDeVendedor.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeVendedorDM);
end;

function TTipoDeVendedor.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeVendedorList;
end;

{ TTipoDeVendedorDM }
class function TTipoDeVendedorDM.TableName: string;
begin
  Result := 'tiposdevendedor';
end;

class function TTipoDeVendedorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeVendedorDM.ID_FieldName: string;
begin
  Result := 'TipoDeVendedorID';
end;

procedure TTipoDeVendedorDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeVendedor(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TTipoDeVendedorDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeVendedor(PDObject) do
  begin
    codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TTipoDeVendedorList }
function TTipoDeVendedorList.GetActual: TTipoDeVendedor;
begin
  Result := TTipoDeVendedor(CurrentObject);
end;

function TTipoDeVendedorList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeVendedor.Create;
end;

constructor TTipoDeVendedorList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(TTipoDeVendedor, TTipoDeVendedorDM.CreateAll(False,'',_SoloActivos));
end;

{ TMonedaCotizacion }
constructor TMonedaCotizacion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TMonedaCotizacionDM);
  FvalorVenta := null;
  FvalorCompra := null;
  FfechadeVigencia := null;
end;

procedure TMonedaCotizacion.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;


procedure TMonedaCotizacion.SetmonedaAConvertirID(Value: TObjectID);
begin
  if (Value <> FmonedaAConvertirID) and assigned(FmonedaAConvertir) then
    FreeAndNil(FmonedaAConvertir);
  FmonedaAConvertirID := Value;
end;

function TMonedaCotizacion.GetmonedaAConvertir: TMoneda;
begin
  if not assigned(FmonedaAConvertir) then
    GetObject(TMoneda, FmonedaAConvertir, monedaAConvertirID);
  Result := TMoneda(FmonedaAConvertir);
end;

function TMonedaCotizacion.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);
  Result := TMoneda(FMoneda);
end;

function TMonedaCotizacion.GetAnoVigencia: Integer;
begin
  Result := YearOf(fechadeVigencia);
end;

function TMonedaCotizacion.GetMesVigencia: Integer;
begin
  Result := MonthOf(fechadeVigencia);
end;

{ TMonedaCotizacionDM }
class function TMonedaCotizacionDM.TableName: string;
begin
  Result := 'monedacotizaciones';
end;

class function TMonedaCotizacionDM.ID_FieldName: string;
begin
  Result := 'MonedaCotizacionID';
end;

procedure TMonedaCotizacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TMonedaCotizacion(PDObject) do
  begin
    IDField[_MonedaID] := FMonedaID;
    IDField[_monedaAConvertirID] := FmonedaAConvertirID;
    FloatField[_ValorVenta] := FvalorVenta;
    FloatField[_ValorCompra] := FvalorCompra;
    DateField[_fechadeVigencia] := FfechadeVigencia;
  end;
end;

procedure TMonedaCotizacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TMonedaCotizacion(PDObject) do
  begin
    FMonedaID := IDField[_MonedaID];
    FmonedaAConvertirID := IDField[_monedaAConvertirID];
    FvalorVenta := FloatField[_ValorVenta];
    FvalorCompra := FloatField[_ValorCompra];
    FfechadeVigencia := DateField[_fechadeVigencia];
  end;
end;

{ TMonedaCotizacionList }
function TMonedaCotizacionList.GetActual: TMonedaCotizacion;
begin
  Result := TMonedaCotizacion(CurrentObject);
end;

function TMonedaCotizacionList.CreateNewObject: TPDObject;
begin
  Result := TMonedaCotizacion.Create;
end;

constructor TMonedaCotizacionList.CreateAll;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False));
end;

constructor TMonedaCotizacionList.createbyFechaDeVigencia(_Fecha: TDateTime);
  Function WhereString : String;
  begin
    Result := '(' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + '=' + QuotedStr(DateToStr(_Fecha)) + ')';
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

constructor TMonedaCotizacionList.createbyFechaDeVigenciaAndMoneda(_Fecha: TDateTime; _Moneda: TMoneda);
  Function WhereString : String;
  begin
    Result := '(' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia    + '=' + QuotedStr(DateToStr(_Fecha)) + ') AND' + '(' +
                    TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID + '=' + IntToStr(_Moneda.ID) + ')';
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

constructor TMonedaCotizacionList.CreateByID(_ID: TObjectID);
  function WhereString : String;
  begin
    Result := '(' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM.ID_FieldName + '=' + IntToStr(_ID) + ')';
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

constructor TMonedaCotizacionList.CreateByMonedaPadre(_Moneda: TMoneda; _MonedaHija : TMoneda);
  function WhereString : String;
  begin
    Result := '(' + TMonedaCotizacionDM._MonedaID + ' = ' + IntToStr(_Moneda.ID) + ')';
    if assigned( _MonedaHija) then
      Result := Result + ' and ('+ TMonedaCotizacionDM._monedaAConvertirID + ' = ' + IntToStr(_MonedaHija.ID) + ')';
  end;
  Function OrderBy : String;
begin
    Result := TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + ' DESC, ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID;
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString , False, OrderBy));
end;

constructor TMonedaCotizacionList.CreateForCotizacion(_MonedaOrigen, _MonedaDestino: TMoneda; _FechaVigencia: TDateTime);
  Function WhereString : String;
  begin
    Result := TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaID + ' = ' + IntToStr(_MonedaOrigen.ID);
    Result := Result + ' and ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID + ' = ' + IntToStr(_MonedaDestino.ID);
    Result := Result + ' and ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia    + ' = ' + '( Select MAX (' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia;
    Result := Result + ') From TableName where ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaID + ' = ' + IntToStr(_MonedaOrigen.ID) + ' and ' + TMonedaCotizacionDM.TableName + '.' +  TMonedaCotizacionDM._MonedaAConvertirID + ' = ';
    Result := Result + IntToStr(_MonedaDestino.ID) + ' and ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + ' <= ' + QuotedStr(FormatDateTime('yyyymmdd hh:nn:ss:zzz', _FechaVigencia)) + ')';
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

constructor TMonedaCotizacionList.CreateByOrigenDestinoFecha(_MonedaOrigen, _MonedaDestino: TMoneda; _FechaVigencia: TDateTime);
  Function WhereString : String;
  begin
    Result := TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaID + ' = ' + IntToStr(_MonedaOrigen.ID) + ' and  ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID + ' = ' + IntToStr(_MonedaDestino.ID);
    Result := Result + ' and ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + ' = ' + QuotedStr(FormatDateTime('yyyymmdd hh:nn:ss:zzz', _FechaVigencia));
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

constructor TMonedaCotizacionList.CreatebyUltimaCotizacion;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateTop(3, '', TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + ' Desc '));
end;

constructor TMonedaCotizacionList.CreateCotizaciones(_MonedaOrigen: TMoneda; _FechaVigencia: TDateTime);
  Function WhereString : String;
  begin
    Result :=          TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID + ' = ' + IntToStr(_MonedaOrigen.ID) + ' and ';
    Result := Result + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia    + ' = ' + '( Select MAX (' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._FechadeVigencia + ') From TableName where ';
    Result := Result + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._MonedaAConvertirID + ' = ' + IntToStr(_MonedaOrigen.ID) + ' and ' + TMonedaCotizacionDM.TableName + '.' + TMonedaCotizacionDM._fechadeVigencia + ' <= ' + quotedstr(FormatDateTime('yyyymmdd hh:nn:ss:zzz', _FechaVigencia)) + ')';
  end;
begin
  inherited Create(TMonedaCotizacion, TMonedaCotizacionDM.CreateAll(False, WhereString));
end;

{ TDescriptibleAbreviadoList }

constructor TDescriptibleAbreviadoList.CreateByCodigo(_cod: String; _SoloActivos: Boolean);
var
  P: TPDObject;
  Function WhereString: String;
  begin
    Result := '( lower(TableName.codigo)=' + QuotedStr(AnsiLowerCase(_Cod)) + ')';
  end;
begin
  try
    P := self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleAbreviadoList.CreateByCodigoLike(_cod: String; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    if Copy(_cod, length(_cod), 1) <> '%' then
      _cod := _cod + '%';
    Result := '(lower(Tablename.codigo) like ' + quotedstr(AnsiLowerCase(_cod))+')';
  end;
var
  P: TPDObject;
begin
  try
    P := self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  Finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleAbreviadoList.CreateByCodigoYIdDiferente(_cod: string; _ID: TObjectID; _SoloActivos: Boolean);
var
  P: TPDObject;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, GetWhereByCodigoYIDDiferente(_Cod, _ID), _SoloActivos));
  finally
    FreeAndNil(P);
  end;
end;


function TDescriptibleAbreviadoList.FindCodigo(_Codigo: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := (AnsiLowerCase(TDescriptibleAbreviado(CurrentObject).codigo) = AnsiLowerCase(_Codigo));
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TDescriptibleAbreviadoList.GetWhereByCodigoYIDDiferente(_cod: string; _ID: TObjectID): string;
begin
  Result := '( lower(TableName.Codigo)=' + QuotedStr(AnsiLowerCase(_Cod)) + ' and TableName.IDFieldName <> ' + IntToStr(_ID)+')';
end;

function TEstadoDePedidoDeCompra.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePedidoDeCompraList;
end;

{ TRubro }
constructor TRubroDeArticulo.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TRubroDeArticuloDM);
  RellenarCodigo := True;
  LargoCodigo    := aplicacion.LargoCodigos.LargoRubrosDeArticulo;
end;

function TRubroDeArticulo.DescripcionComercial: String;
begin
  if (traducciones.Count > 0) then
  begin
    traducciones.First;
    while not traducciones.IsLast do
    begin
      Result := Result + traducciones.Actual.Descripcion;
      traducciones.next;
      if not traducciones.IsLast then
        Result := Result + '/';
    end;
  end;
end;

function TRubroDeArticulo.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TRubroDeArticuloList;
end;


function TRubroDeArticulo.GetTraducciones: TRubroDeArticuloTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TRubroDeArticuloTraduccionList.CreateByRubroDeArticulo(self)));
  Result := TRubroDeArticuloTraduccionList(FTraducciones);
end;

{ TRubroDM }
class function TRubroDeArticuloDM.TableName: string;
begin
  Result := 'rubrosdearticulo';
end;

class function TRubroDeArticuloDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TRubroDeArticuloDM.ID_FieldName: string;
begin
  Result := 'RubrodearticuloID';
end;

procedure TRubroDeArticuloDM.PopulateFields(PDObject: TPDObject);
begin
  with TRubroDeArticulo(PDObject) do
  begin
    StringField[_Codigo]                         := codigo;
    StringField[_Descripcion]                    := Descripcion;
    StringField[_CodigoSubrubroSifab]            := FCodigoSubrubroSifab;
    StringField[_CodigoPosicionArancelariaSifab] := FCodigoPosicionArancelariaSifab;
    StringField[_CodigoGrupoProductoSifab]       := FCodigoGrupoProductoSifab;
    BooleanField[_EsInactivo]                    := EsInactivo;
  end;
end;

procedure TRubroDeArticuloDM.PopulateObject(PDObject: TPDObject);
begin
  with TRubroDeArticulo(PDObject) do
  begin
    Descripcion                     := StringField[_Descripcion];
    codigo                          := StringField[_Codigo];
    FCodigoSubrubroSifab            := StringField[_CodigoSubrubroSifab];
    FCodigoPosicionArancelariaSifab := StringField[_CodigoPosicionArancelariaSifab];
    FCodigoGrupoProductoSifab       := StringField[_CodigoGrupoProductoSifab];
    EsInactivo                      := BooleanField[_EsInactivo];
  end;
end;

{ TRubroList }
function TRubroDeArticuloList.GetActual: TRubroDeArticulo;
begin
  Result := TRubroDeArticulo(CurrentObject);
end;

function TRubroDeArticuloList.CreateNewObject: TPDObject;
begin
  Result := TRubroDeArticulo.Create;
end;

constructor TRubroDeArticuloList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TRubroDeArticulo, TRubroDeArticuloDM.CreateAll(False, '', _SoloActivos));
end;

function TDescriptibleAbreviadoList.GetWhereByInicialCodigo(_I: string) : string;
begin
  Result := 'Lower(TableName.Codigo) like ' + QuotedStr(AnsiLowerCase(_I) + '%');
end;

{ TOrigenComercial }
constructor TOrigenComercial.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TOrigenComercialDM);
end;

function TOrigenComercial.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TOrigenComercialList;
end;

{ TOrigenComercialDM }
class function TOrigenComercialDM.TableName: string;
begin
  Result := 'origencomercial';
end;

class function TOrigenComercialDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TOrigenComercialDM.ID_FieldName: string;
begin
  Result := 'OrigenComercialID';
end;

procedure TOrigenComercialDM.PopulateFields(PDObject: TPDObject);
begin
  with TOrigenComercial(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
    IntegerField[_Color]      := FColor;
  end;
end;

procedure TOrigenComercialDM.PopulateObject(PDObject: TPDObject);
begin
  with TOrigenComercial(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    codigo      := StringField[_Codigo];
    EsInactivo  := BooleanField[_EsInactivo];
    FColor      := IntegerField[_Color];
  end;
end;

{ TOrigenComercialList }
function TOrigenComercialList.GetActual: TOrigenComercial;
begin
  Result := TOrigenComercial(CurrentObject);
end;

function TOrigenComercialList.CreateNewObject: TPDObject;
begin
  Result := TOrigenComercial.Create;
end;

constructor TOrigenComercialList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TOrigenComercial, TOrigenComercialDM.CreateAll(False, '', _SoloActivos));
end;

{ TFamiliaDeArticulo }
constructor TFamiliaDeArticulo.Create;
begin
  inherited;
  DMObject            := aplicacion.DMProvider.GetGlobalDM(TFamiliaDeArticuloDM);
  LargoCodigo         := aplicacion.LargoCodigos.LargoFamiliaDeArticulo;
  RellenarCodigo      := True;
  ColorDeHojaDeRutaID := NullID;
  FEsInactivo         := False;
end;

function TFamiliaDeArticulo.GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
begin
  if not assigned(FColorDeHojaDeRuta) then
    GetObject(TColorDeHojaDeRuta, FColorDeHojaDeRuta, FColorDeHojaDeRutaID);
  Result := TColorDeHojaDeRuta(FColorDeHojaDeRuta);
end;

Function TFamiliaDeArticulo.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TFamiliaDeArticuloList;
end;

Function TFamiliaDeArticulo.GetDescuentoPorCantidadVendida : TDescuentoPorCantidadVendida;
begin
  if not assigned(FDescuentoPorCantidadVendida) then
    GetObject(TDescuentoPorCantidadVendida, FDescuentoPorCantidadVendida, FDescuentoPorCantidadVendidaID);
  Result := TDescuentoPorCantidadVendida(FDescuentoPorCantidadVendida);
end;

Procedure TFamiliaDeArticulo.setDescuentoPorCantidadVendidaID(const Value: TObjectID);
begin
  if (Value <> FDescuentoPorCantidadVendidaID) and assigned(FDescuentoPorCantidadVendida) then
    FreeAndNil(FDescuentoPorCantidadVendida);
  FDescuentoPorCantidadVendidaID := Value;
end;

{ TFamiliaDeArticuloDM }
class function TFamiliaDeArticuloDM.TableName: string;
begin
  Result := 'familiasdeArticulo';
end;

class function TFamiliaDeArticuloDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TFamiliaDeArticuloDM.ID_FieldName: string;
begin
  Result := 'FamiliaDeArticuloID';
end;

procedure TFamiliaDeArticuloDM.PopulateFields(PDObject: TPDObject);
begin
  with TFamiliaDeArticulo(PDObject) do
  begin
    StringField[_Codigo]                       := Codigo;
    StringField[_Descripcion]                  := Descripcion;
    BooleanField[_EsMatriz]                    := EsMatriz;
    IDField[_DescuentoPorCantidadVendidaID]    := DescuentoPorCantidadVendidaID;
    IDField[_ColorDeHojaDeRutaID]              := ColorDeHojaDeRutaID;
    BooleanField[_EsInactivo]                  := EsInactivo;
    FloatField[_RecargoPorCustomizacion]       := RecargoPorCustomizacion;
    FloatField[_PorcentajeDescuentoAutorizado] := PorcentajeDescuentoAutorizado;
  end;
end;

procedure TFamiliaDeArticuloDM.PopulateObject(PDObject: TPDObject);
begin
  with TFamiliaDeArticulo(PDObject) do
  begin
    FCodigo                        := StringField[_Codigo];
    FDescripcion                   := StringField[_Descripcion];
    FEsMatriz                      := BooleanField[_EsMatriz];
    FDescuentoPorCantidadVendidaID := IDField[_DescuentoPorCantidadVendidaID];
    FColorDeHojaDeRutaID           := IDField[_ColorDeHojaDeRutaID];
    FEsInactivo                    := BooleanField[_EsInactivo];
    FRecargoPorCustomizacion       := FloatField[_RecargoPorCustomizacion];
    FPorcentajeDescuentoAutorizado := FloatField[_PorcentajeDescuentoAutorizado];
  end;
end;

{ TFamiliaDeArticuloList }
function TFamiliaDeArticuloList.GetActual: TFamiliaDeArticulo;
begin
  Result := TFamiliaDeArticulo(CurrentObject);
end;

function TFamiliaDeArticuloList.CreateNewObject: TPDObject;
begin
  Result := TFamiliaDeArticulo.Create;
end;

constructor TFamiliaDeArticuloList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TFamiliaDeArticulo, TFamiliaDeArticuloDM.CreateAll(False, '', _SoloActivos));
end;

{ TMaterial }
constructor TMaterial.Create;
begin
  inherited;
  DMObject       := Aplicacion.DMProvider.GetGlobalDM(TMaterialDM);
  RellenarCodigo := True;
  LargoCodigo    := Aplicacion.LargoCodigos.LargoMaterialesDeArticulo;
end;

function TMaterial.GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
begin
  if not Assigned(FCategoriaDeMateriaPrima) then
    GetObject(TCategoriaDeMateriaPrima, FCategoriaDeMateriaPrima, CategoriaDeMateriaPrimaID);
  Result := TCategoriaDeMateriaPrima(FCategoriaDeMateriaPrima);
end;

function TMaterial.GetCentroDeCosto: TCentroDeCosto;
begin
  if not Assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto, FCentroDeCosto, CentroDeCostoID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

function TMaterial.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TMaterialList;
end;

function TMaterial.GetPesoEspecificoDescripcion: TString;
begin
  if (PesoEspecificoUnidadDeMedidaID <> NullID) then
    Result := FloatToStrF(PesoEspecifico,ffNumber, 10, 3) + ' ' + PesoEspecificoUnidadDeMedida.Codigo;
end;

function TMaterial.GetPesoEspecificoUnidadDeMedida: TUnidadDeMedida;
begin
  if not assigned(FPesoEspecificoUnidadDeMedida) then
    GetObject(TUnidadDeMedida, FPesoEspecificoUnidadDeMedida, PesoEspecificoUnidadDeMedidaID);
  Result := TUnidadDeMedida(FPesoEspecificoUnidadDeMedida);
end;

function TMaterial.GetTerminacionNatural: TTerminacion;
begin
  if not Assigned(FTerminacionNatural) then
    GetObject(TTerminacion, FTerminacionNatural, TerminacionNaturalID);
  Result := TTerminacion(FTerminacionNatural);
end;

procedure TMaterial.SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeMateriaPrimaID) and assigned(FCategoriaDeMateriaPrima) then
    FreeAndNil(FCategoriaDeMateriaPrima);
  FCategoriaDeMateriaPrimaID := Value;
end;

procedure TMaterial.SetCentroDeCostoID(const Value: TObjectID);
begin
  if (Value <> FCentroDeCostoID) and assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  FCentroDeCostoID := Value;
end;

procedure TMaterial.SetPesoEspecificoUnidadDeMedidaID(const Value: TObjectID);
begin
  if (Value <> FPesoEspecificoUnidadDeMedidaID) and Assigned(FPesoEspecificoUnidadDeMedida) then
    FreeAndNil(FPesoEspecificoUnidadDeMedida);
  FPesoEspecificoUnidadDeMedidaID := Value;
end;

procedure TMaterial.SetTerminacionNaturalID(const Value: TObjectID);
begin
  if (Value <> FTerminacionNaturalID) and Assigned(FTerminacionNatural) then
    FreeAndNil(FTerminacionNatural);
  FTerminacionNaturalID := Value;
end;

{ TMaterialDM }
class function TMaterialDM.TableName: string;
begin
  Result := 'MaterialesDeArticulo';
end;

class function TMaterialDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMaterialDM.ID_FieldName: string;
begin
  Result := 'MaterialDeArticuloID';
end;

procedure TMaterialDM.PopulateFields(PDObject: TPDObject);
begin
  with TMaterial(PDObject) do
  begin
    StringField[_Descripcion]                := Descripcion;
    StringField[_Codigo]                     := Codigo;
    IDField[_CentroDeCostoID]                := FCentroDeCostoID;
    IDField[_CategoriaDeMateriaPrimaID]      := FCategoriaDeMateriaPrimaID;
    FloatField[_PesoEspecifico]              := FPesoEspecifico;
    IDField[_PesoEspecificoUnidadDeMedidaID] := FPesoEspecificoUnidadDeMedidaID;
    BooleanField[_EsInactivo]                := EsInactivo;
    IDField[_TerminacionNaturalID]           := FTerminacionNaturalID;
  End;
End;

procedure TMaterialDM.PopulateObject(PDObject: TPDObject);
begin
  with TMaterial(PDObject) do
  begin
    Descripcion                     := StringField[_Descripcion];
    Codigo                          := StringField[_Codigo];
    FCentroDeCostoID                := IDField[_CentroDeCostoID];
    FCategoriaDeMateriaPrimaID      := IDField[_CategoriaDeMateriaPrimaID];
    FPesoEspecifico                 := FloatField[_PesoEspecifico];
    FPesoEspecificoUnidadDeMedidaID := IDField[_PesoEspecificoUnidadDeMedidaID];
    EsInactivo                      := BooleanField[_EsInactivo];
    FTerminacionNaturalID           := IDField[_TerminacionNaturalID];
  end;
end;

{ TMaterialList }
function TMaterialList.GetActual: TMaterial;
begin
  Result := TMaterial(CurrentObject);
end;

constructor TMaterialList.CreateByCategoriaDeMateriaPrima(_C: TCategoriaDeMateriaPrima; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TMaterialDM.ID_FieldName + ' in ( Select ' + TCategoriaDeMateriaPrimaMaterialDM._MaterialID +
    ' from ' + TCategoriaDeMateriaPrimaMaterialDM.TableName + ' where ' + TCategoriaDeMateriaPrimaMaterialDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr( _C.ID ) + ') )';
  end;
begin
  inherited Create(TMaterial, TMaterialDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TMaterialList.CreateByCategoriaDeMateriaPrimaAndCodigoLike(_C: TCategoriaDeMateriaPrima; _Cod: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TMaterialDM.ID_FieldName + ' in ( Select ' + TCategoriaDeMateriaPrimaMaterialDM._MaterialID +
    ' from ' + TCategoriaDeMateriaPrimaMaterialDM.TableName + ' where ' + TCategoriaDeMateriaPrimaMaterialDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr( _C.ID ) + ') )';
    Result := Result + ' and (' + TMaterialDM._Codigo + ' like ' + QuotedStr('%' + _Cod + '%' ) + ')';
  end;
begin
  inherited Create(TMaterial, TMaterialDM.CreateAll( False, WhereString, _SoloActivos));
end;

function TMaterialList.CreateNewObject: TPDObject;
begin
  Result := TMaterial.Create;
end;

constructor TMaterialList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TMaterial, TMaterialDM.CreateAll( False, '', _SoloActivos));
end;

{ TVendedor }
constructor TVendedor.Create;
begin
  inherited;
  SaveSqlLog        := True;
  DMObject          := aplicacion.DMProvider.GetGlobalDM(TVendedorDM);
  FvendedorID       := 0;
  Fapellido         := null;
  Fcodigo           := null;
  FDireccion        := null;
  Femail            := null;
  FFechaDeBaja      := null;
  FporcentajeExedenteDeNoPagoDeComision := null;
  FTelefono         := null;
  FCelular          := null;
  FTipoDeVendedorID := 0;
end;

function TVendedor.GetLocalidad: TLocalidad;
begin
  if not assigned(FLocalidad) then
    GetObject(TLocalidad, FLocalidad, LocalidadID);
  Result := TLocalidad(FLocalidad);
end;

procedure TVendedor.SetLocalidadID(Value: TObjectID);
begin
  if (Value <> FLocalidadID) and assigned(FLocalidad) then
    FreeAndNil(FLocalidad);
  FLocalidadID := Value;
end;

function TVendedor.GetTipoDeVendedor: TTipoDeVendedor;
begin
  if not assigned(FTipoDeVendedor) then
    GetObject(TTipoDeVendedor, FTipoDeVendedor, TipoDeVendedorID);
  Result := TTipoDeVendedor(FTipoDeVendedor);
end;

function TVendedor.Save: Boolean;
begin
  if not FEsInactivo then
    FFechaDeBaja := null;
  Result := Inherited Save;
end;

function TVendedor.GetApellidoYNombres: TString;
begin
  Result := apellido;
  if (Result > '') and (nombre > '') then
    Result := Result + ', ' + nombre;

  if (Result = '') and (nombre > '') then
    Result := nombre;
end;

procedure TVendedor.SetApellido(const Value: TString);
begin
  Fapellido := UpperCase(Value);
end;

procedure TVendedor.SetDireccion(const Value: TString);
begin
  FDireccion := UpperCase(Value);
end;

procedure TVendedor.SetEmail(const Value: TString);
var
  i, X: Integer;
  dire: String;

begin
  IF (Value <> '') and ((FEmail = null) or (FEmail <> Value)) then
  begin
    X := aplicacion.TextService.ContarSeparadosXComas(Value, ';');
    for i := 1 to X do
    begin
      dire := aplicacion.TextService.ObtenerSeparadosXComas(Value, ';', i);
      if Not aplicacion.TextService.ValidarEmail(dire) Then
        Aplicacion.RaiseExceptionCreate('Ingrese un email válido: ' + dire);
    end;
  end;
  Femail := Value;
end;

procedure TVendedor.SetporcentajeExedenteDeNoPagoDeComision(const Value: TReal);
begin
  If Value <> null then
    If (Value > 100) or (Value < 0) Then
      Aplicacion.RaiseExceptionCreate('-  El porcentaje debe estar entre 0 y 100');

  FporcentajeExedenteDeNoPagoDeComision := Value;
end;

procedure TVendedor.SetcNombre(const Value: TString);
begin
  Fnombre := uppercase(Value);
end;

procedure TVendedor.ValidateOnInsert;
begin
  Validate;
end;

procedure TVendedor.ValidateOnUpdate;
begin
  Validate;
end;

procedure TVendedor.Validate;
// var
// L : TVendedorList;
// C : String;
begin
  // L:= TVendedorList.CreateByCodigoYIdDiferente(Fcodigo, id);
  // if (L.Count>0) then
  // begin
  // Aplicacion.Mensaje('Ha ingresado un Código Duplicado','Atención !',MB_ok);
  // Aplicacion.RaiseExceptionCreate ('Código duplicado');
  // end;
  //
  // freeandnil (L);
  if FEsInactivo and FFechaDeBaja = null then
    Aplicacion.RaiseExceptionCreate('La fecha de baja está vacía');
end;

{ TVendedorDM }
class function TVendedorDM.TableName: string;
begin
  Result := 'Vendedores';
end;

class function TVendedorDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TVendedorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TVendedorDM.ID_FieldName: string;
begin
  Result := 'VendedorID';
end;

procedure TVendedorDM.PopulateFields(PDObject: TPDObject);
begin
  with TVendedor(PDObject) do
  begin
    StringField[_Apellido]             := Apellido;
    StringField[_Nombre]               := Nombre;
    StringField[_Codigo]               := Codigo;
    StringField[_Direccion]            := Direccion;
    StringField[_Email]                := Email;
    DateTimeField[_FechaDeBaja]        := FechaDeBaja;
    FloatField[_PorExDeNoPagoComision] := PorcentajeExedenteDeNoPagoDeComision;
    StringField[_Celular]              := Celular;
    StringField[_Telefono]             := Telefono;
    StringField[_LocalidadID]          := FLocalidadID;
    StringField[_TipoDeVendedorID]     := TipoDeVendedorID;
    BooleanField[_EsInactivo]          := EsInactivo;
  end;
end;

procedure TVendedorDM.PopulateObject(PDObject: TPDObject);
begin
  with TVendedor(PDObject) do
  begin
    FApellido         := StringField[_Apellido];
    FNombre           := StringField[_Nombre];
    FCodigo           := StringField[_Codigo];
    FDireccion        := StringField[_Direccion];
    FEmail            := StringField[_Email];
    FechaDeBaja       := DateTimeField[_FechaDeBaja];
    FLocalidadID      := IDField[_LocalidadID];
    FCelular          := StringField[_Celular];
    FTelefono         := StringField[_Telefono];
    FTipoDeVendedorID := IDField[_TipoDeVendedorID];
    EsInactivo        := BooleanField[_EsInactivo];
    FporcentajeExedenteDeNoPagoDeComision := FloatField[_PorExDeNoPagoComision];
  end;
end;

{ TVendedorList }
function TVendedorList.GetActual: TVendedor;
begin
  Result := TVendedor(CurrentObject);
end;

function TVendedorList.CreateNewObject: TPDObject;
begin
  Result := TVendedor.Create;
end;

function TVendedorList.Find(_cod: string): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := uppercase(Actual.codigo) = uppercase(_cod);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TVendedorList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TVendedor, TVendedorDM.CreateAll(False, '', _SoloActivos ));
end;

constructor TVendedorList.CreateByLocalidad(_L: TLocalidad; _SoloActivos: Boolean);
  Function WhereString: String;
  Begin
    result := TVendedorDM._localidadID + '=' +IntToStr(_L.ID);
  End;
begin
  inherited Create(TVendedor, TVendedorDM.CreateAll(False, WhereString, _SoloActivos ));
end;

{ TGrupoDeVendedorItem }
constructor TGrupoDeVendedorItem.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TGrupoDeVendedorItemDM);
end;

procedure TGrupoDeVendedorItem.SetGrupoDeVendedorID(Value: TObjectID);
begin
  if (Value <> FGrupoDeVendedorID) and assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

function TGrupoDeVendedorItem.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, GrupoDeVendedorID);
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TGrupoDeVendedorItem.GetPorcentajesDeRepartoComisiones : TGrupoDeVendedorItemRepartoList;
begin
  If not assigned(FPorcentajesDeRepartoComisiones) Then
    GetList(TPDList(FPorcentajesDeRepartoComisiones), TPDList(TGrupoDeVendedorItemRepartoList.CreateByGrupoDeVendedorItem(self) ));
  Result := FPorcentajesDeRepartoComisiones;
end;

procedure TGrupoDeVendedorItem.SetVendedorID(Value: TObjectID);
begin
  if (Value <> FvendedorID) and assigned(Fvendedor) then
    FreeAndNil(Fvendedor);

  FvendedorID := Value;

end;

function TGrupoDeVendedorItem.GetVendedor: TVendedor;
begin
  if not assigned(Fvendedor) then
    GetObject(TVendedor, Fvendedor, vendedorID);

  Result := TVendedor(Fvendedor);
end;

{ TGrupoDeVendedorItemDM }
class function TGrupoDeVendedorItemDM.TableName: string;
begin
  Result := 'GrupoDeVendedorItems';
end;

class function TGrupoDeVendedorItemDM.ID_FieldName: string;
begin
  Result := 'GrupoDeVendedorItemID';
end;

procedure TGrupoDeVendedorItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeVendedorItem(PDObject) do
  begin
    IDField[_GrupoDeVendedorID] := FGrupoDeVendedorID;
    IDField[_VendedorID] := FvendedorID;
  end;
end;

procedure TGrupoDeVendedorItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeVendedorItem(PDObject) do
  begin
    FGrupoDeVendedorID := IDField[_GrupoDeVendedorID];
    FvendedorID := IDField[_VendedorID];
  end;
end;

{ TGrupoDeVendedorItemList }
function TGrupoDeVendedorItemList.GetActual: TGrupoDeVendedorItem;
begin
  Result := TGrupoDeVendedorItem(CurrentObject);
end;

function TGrupoDeVendedorItemList.CreateNewObject: TPDObject;
begin
  Result := TGrupoDeVendedorItem.Create;
end;

constructor TGrupoDeVendedorItemList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TGrupoDeVendedorItem, TGrupoDeVendedorItemDM.CreateAll(False, '', _SoloActivos));
end;

constructor TGrupoDeVendedorItemList.CreateByGrupoDeVendedor(_grupo: TGrupoDeVendedor);
  function WhereString: String;
  begin
    Result := '('+ TGrupoDeVendedorItemDM.TableName+'.'+ TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' = ' + IntToStr(_grupo.ID)+')';
  end;
begin
  inherited Create(TGrupoDeVendedorItem, TGrupoDeVendedorItemDM.CreateAll(False, WhereString, False ));
end;

constructor TGrupoDeVendedorItemList.CreateByGrupoDeVendedorAndVendedor(_grupo: TGrupoDeVendedor; _VID: TObjectID);
var
  VL : TVendedorList;
begin
  Try
    VL := TVendedorList.CreateByID( _VID );
    if (VL.Count=0) then
      Aplicacion.RaiseExceptionCreate('Error al cargar el vendedorID ' + IntToStr( _VID ) );
    VL.First;
    CreateByGrupoDeVendedorAndVendedor( _grupo, VL.Actual);
  Finally
    FreeAndNil(VL);
  End;
end;

constructor TGrupoDeVendedorItemList.CreateByGrupoDeVendedorAndVendedor(_grupo: TGrupoDeVendedor; _V: TVendedor);
  function WhereString: String;
  begin
    Result := '('+ TGrupoDeVendedorItemDM.TableName+'.'+ TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' = ' + IntToStr(_grupo.ID)+')';
    Result := Result + ' and (' + TGrupoDeVendedorItemDM.TableName+'.'+ TGrupoDeVendedorItemDM._VendedorID + ' = ' + IntToStr(_V.ID)+')';
  end;
begin
  inherited Create(TGrupoDeVendedorItem, TGrupoDeVendedorItemDM.CreateAll(False, WhereString, False ));
end;

{ TGrupoDeVendedor }
constructor TGrupoDeVendedor.Create;
begin
  inherited;
  SaveSqlLog            := True;
  DMObject              := Aplicacion.DMProvider.GetGlobalDM(TGrupoDeVendedorDM);
  fVisualizacionGeneral := False;
  FCodigoSifab          := '';
  FCodigoInternoSifab   := Null;
  FIDTeamplace          := Null;
  FComisionVigente      := Nil;
end;

procedure TGrupoDeVendedor.Delete;
Var
  EL : TEmpresaList;
  PL : TPedidoDeVentaList;
begin
  // Valido que no tenga grupo de vendedores en ninguna otra tabla
  Try
    EL := TEmpresaList.CreateByGrupoDeVendedores(Self);
    PL := TPedidoDeVentaList.CreateByGrupoDeVendedores(Self);
    If EL.Count > 0 then
      Aplicacion.RaiseExceptionCreate( 'No se puede eliminar este grupo de vendedores porque esta asignado en una o mas Empresas.');
    If PL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar este grupo de vendedores porque esta asignado en uno o mas Pedidos de Venta.');
  Finally
    FreeAndNil(EL);
    FreeAndNil(PL);
  End;
  If (Items.Count > 0) then
    Begin
      If (Aplicacion.Mensaje( 'El Grupo de vendedores contiene Vendedores asignados. Se eliminaran todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
        Items.DeleteAll
      else
        Abort;
    End;
  Inherited;
end;


function TGrupoDeVendedor.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = NULL) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field( 'USUARIO', 'usuario = ' + QuotedStr( CodigoSifab), 'codigoInternoUsuario');
  Result := FCodigoInternoSifab;
end;

function TGrupoDeVendedor.GetComisiones: TGrupoDeVendedorComisionList;
begin
  If not assigned(FComisiones) Then
    GetList(TPDList(FComisiones), TPDList(TGrupoDeVendedorComisionList.CreateByGrupoDeVendedor(self)));
  Result := FComisiones;
end;

function TGrupoDeVendedor.GetComisionVigente: TGrupoDeVendedorComision;
var
  GVCL : TGrupoDeVendedorComisionList;
begin
  if not Assigned(FComisionVigente) then
    try
      GVCL := TGrupoDeVendedorComisionList.CreateByGrupoDeVendedor(Self);
      GVCL.First;                                           // esta ordenado por fecha descendente.
      if (GVCL.Count > 0) then
        begin
          FComisionVigente := TGrupoDeVendedorComision.Create;
          FComisionVigente.Load(GVCL.Actual.ID);
        end;
    finally
      FreeAndNil(GVCL);
    end;
  Result := FComisionVigente;
end;

function TGrupoDeVendedor.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TGrupoDeVendedorList;
end;

function TGrupoDeVendedor.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TGrupoDeVendedorDM._TeamplaceTableName, TGrupoDeVendedorDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TGrupoDeVendedorDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TGrupoDeVendedor.GetItems: TGrupoDeVendedorItemList;
begin
  If not assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TGrupoDeVendedorItemList.CreateByGrupoDeVendedor(self)));
  Result := FItems;
end;

class function TGrupoDeVendedor.GuardarEnTeamPlace(_GV: TGrupoDeVendedor): Boolean;
begin
  Result := False;

  if (_GV.IDTeamplace <> NullID) then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TGrupoDeVendedorDM._TeamplaceTableName,
    [TGrupoDeVendedorDM._TeamplaceCodigo,
     TGrupoDeVendedorDM._TeamplaceNombre,
     TGrupoDeVendedorDM._TeamplaceActivo,
     TGrupoDeVendedorDM._TeamplaceEsVendedor,
     TGrupoDeVendedorDM._TeamplacePersonaNombre,
     TGrupoDeVendedorDM._TeamplaceSexo,
     TGrupoDeVendedorDM._TeamplaceEstadoCivil,
     TGrupoDeVendedorDM._TeamplaceEsEmpleado,
     TGrupoDeVendedorDM._TeamplaceUSR_Comision,
     TGrupoDeVendedorDM._TeamplaceUSR_DescuentaChequeRechazado],
    [QuotedStr(_GV.Codigo),
     QuotedStr(_GV.Codigo + ' - ' + _GV.Descripcion) ,
     IfThen(_GV.EsInactivo,'0','1'),
     '1',
     QuotedStr(_GV.Codigo + ' - ' + _GV.Descripcion),
     '0',
     '0',
     '0'
     , Aplicacion.TextService.ReemplazarEn( FloatToStrF(_GV.ComisionVigente.porcentajeComisionCobranzas,ffNumber, 10, 3),',','.') ,
     IfThen(_GV.DescuentaChequeRechazado,'1','0')],
     TGrupoDeVendedorDM._TeamplaceID + '=' + IntToStr(_GV.IDTeamplace))
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TGrupoDeVendedorDM._TeamplaceTableName,
    [TGrupoDeVendedorDM._TeamplaceCodigo,
     TGrupoDeVendedorDM._TeamplaceNombre,
     TGrupoDeVendedorDM._TeamplaceActivo,
     TGrupoDeVendedorDM._TeamplaceEsVendedor,
     TGrupoDeVendedorDM._TeamplacePersonaNombre,
     TGrupoDeVendedorDM._TeamplaceSexo,
     TGrupoDeVendedorDM._TeamplaceEstadoCivil,
     TGrupoDeVendedorDM._TeamplaceEsEmpleado,
     TGrupoDeVendedorDM._TeamplaceUSR_Comision,
     TGrupoDeVendedorDM._TeamplaceUSR_DescuentaChequeRechazado],
    [QuotedStr(_GV.Codigo),
     QuotedStr(_GV.Codigo + ' - ' + _GV.Descripcion) ,
     IfThen(_GV.EsInactivo,'0','1'),
     '1',
     QuotedStr(_GV.Codigo + ' - ' + _GV.Descripcion),
     '0',
     '0',
     '0'
     , Aplicacion.TextService.ReemplazarEn( FloatToStrF(_GV.ComisionVigente.porcentajeComisionCobranzas,ffNumber, 10, 3),',','.') ,
     IfThen(_GV.DescuentaChequeRechazado,'1','0')])
end;

Function TGrupoDeVendedor.Save: Boolean;
begin
  // If items.Count=0 then
  // Aplicacion.RaiseExceptionCreate('Debe indicar al menos un integrante en este grupo');

  Result := inherited Save;
end;


procedure TGrupoDeVendedor.SetporcentajeToleracionaDescuento(const Value: TReal);
begin
  // If Value=0 Then Aplicacion.RaiseExceptionCreate ('El porcentaje de tolerancia no puede ser 0');
  FporcentajeToleracionaDescuento := Value;
end;

{ TGrupoDeVendedorDM }
class function TGrupoDeVendedorDM.TableName: string;
begin
  Result := 'GruposDeVendedores';
end;

class function TGrupoDeVendedorDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TGrupoDeVendedorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TGrupoDeVendedorDM.ID_FieldName: string;
begin
  Result := 'GrupoDeVendedorID';
end;

procedure TGrupoDeVendedorDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeVendedor(PDObject) do
    begin
      StringField[_Codigo]                        := Codigo;
      StringField[_Descripcion]                   := Descripcion;
      FloatField[_PorcentajeToleracionaDescuento] := FPorcentajeToleracionaDescuento;
      BooleanField[_VisualizacionGeneral]         := fVisualizacionGeneral;
      StringField[_CodigoSifab]                   := CodigoSifab;
      BooleanField[_EsInactivo]                   := EsInactivo;
      BooleanField[_DescuentaChequeRechazado]     := DescuentaChequeRechazado;
    end;
end;

procedure TGrupoDeVendedorDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeVendedor(PDObject) do
    begin
      Codigo                          := StringField[_Codigo];
      Descripcion                     := StringField[_Descripcion];
      FporcentajeToleracionaDescuento := FloatField[_porcentajeToleracionaDescuento];
      FVisualizacionGeneral           := BooleanField[_VisualizacionGeneral];
      FCodigoSifab                    := StringField[_CodigoSifab];
      FEsInactivo                     := BooleanField[_esInactivo];
      FDescuentaChequeRechazado       := BooleanField[_DescuentaChequeRechazado];
    end;
end;

{ TGrupoDeVendedorList }
function TGrupoDeVendedorList.GetActual: TGrupoDeVendedor;
begin
  Result := TGrupoDeVendedor(CurrentObject);
end;

constructor TGrupoDeVendedorList.CreateByVendedor(_V: TVendedor; _SoloActivos: Boolean);
  function WhereString: String;
  begin
    Result := TGrupoDeVendedorDM.ID_FieldName + ' in ( select ';
    Result := Result + TGrupoDeVendedorItemDM._GrupoDeVendedorID + ' from ';
    Result := Result + TGrupoDeVendedorItemDM.TableName + ' where ';
    Result := Result + TGrupoDeVendedorItemDM._VendedorID + ' = ';
    Result := Result + IntToStr(_V.ID) + ')';
  end;
begin
  inherited Create(TGrupoDeVendedor, TGrupoDeVendedorDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TGrupoDeVendedorList.CreateByVendedor(_VID: TObjectID; _SoloActivos: Boolean);
var
  VL : TVendedorList;
begin
  Try
    VL := TVendedorList.CreateByID( _VID );
    if (VL.Count=0) then
      Aplicacion.RaiseExceptionCreate('Error al buscar el vendedorID '+ IntToStr(_VID) );
    VL.First;
    CreateByVendedor( VL.Actual, _SoloActivos);
  Finally
    FreeAndNil( VL );
  End;
end;

function TGrupoDeVendedorList.CreateNewObject: TPDObject;
begin
  Result := TGrupoDeVendedor.Create;
end;

function TGrupoDeVendedorList.Find(_Descripcion: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.Descripcion) = lowerCase(_Descripcion));
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

constructor TGrupoDeVendedorList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TGrupoDeVendedor, TGrupoDeVendedorDM.CreateAll( False, '', _SoloActivos ) );
end;

{ TCondicionDeIVA }
constructor TCondiciondeIVA.Create;
begin
  inherited;
  DMObject                     := Aplicacion.DMProvider.GetGlobalDM(TCondicionDeIVADM);
  LargoCodigo                  := Aplicacion.LargoCodigos.LargoCondicionesDeIVA;
  RellenarCodigo               := True;
  FCalculaEnCascada            := Null;
  FDiscriminaIVA               := Null;
  FLetraDeComprobante          := Null;
  FPorcentajeIVA1              := Null;
  FPorcentajeIVA2              := Null;
  RellenarCodigo               := True;
  FCodigoSifab                 := Null;
  FcodigoImpuestoSifab         := Null;
  FcodigoConceptoImpuestoSifab := Null;
  FIDTeamplace                 := Null;
end;

function TCondiciondeIVA.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TCondicionDeIVAList;
end;

function TCondiciondeIVA.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TCondiciondeIVADM._TeamplaceTableName, TCondiciondeIVADM._TeamplaceCodigo + ' = ' + QuotedStr( CodigoTeamplace ), TCondiciondeIVADM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TCondiciondeIVA.GetLetraDeComprobante: TString;
begin
  Result := FLetraDeComprobante;
  If solomayusculas Then
    Result := uppercase(FLetraDeComprobante);
end;

procedure TCondiciondeIVA.SetLetraDeComprobante(const Value: TString);
begin
  FLetraDeComprobante := Value;
  If solomayusculas then
    FLetraDeComprobante := uppercase(Value);
end;

{ TCondicionDeIVADM }
class function TCondicionDeIVADM.TableName: string;
begin
  Result := 'CONDICIONESDEIVA';
end;

class function TCondicionDeIVADM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCondicionDeIVADM.ID_FieldName: string;
begin
  Result := 'CondicionDeIVAID';
end;

procedure TCondicionDeIVADM.PopulateFields(PDObject: TPDObject);
begin
  with TCondiciondeIVA(PDObject) do
  begin
    StringField[_Descripcion]                 := Descripcion;
    StringField[_Codigo]                      := Codigo;
    BooleanField[_CalculaEnCascada]           := FCalculaEnCascada;
    BooleanField[_DiscriminaIVA]              := FDiscriminaIVA;
    StringField[_LetraDeComprobante]          := FLetraDeComprobante;
    FloatField[_PorcentajeIVA1]               := FPorcentajeIVA1;
    FloatField[_PorcentajeIVA2]               := FPorcentajeIVA2;
    BooleanField[_EsCuitRequerido]            := FesCuitRequerido;
    StringField[_CodigoSifab]                 := FCodigoSifab;
    StringField[_codigoImpuestoSifab]         := CodigoImpuestoSifab;
    StringField[_codigoConceptoImpuestoSifab] := CodigoConceptoImpuestoSifab;
    BooleanField[_EsInactivo]                 := FEsInactivo;
    StringField[_CodigoTeamplace]             := FCodigoTeamplace;
  end;
end;

procedure TCondicionDeIVADM.PopulateObject(PDObject: TPDObject);
begin
  with TCondiciondeIVA(PDObject) do
  begin
    Descripcion                 := StringField[_Descripcion];
    Codigo                      := StringField[_Codigo];
    FCalculaEnCascada           := BooleanField[_CalculaEnCascada];
    FDiscriminaIVA              := BooleanField[_DiscriminaIVA];
    FLetraDeComprobante         := StringField[_LetraDeComprobante];
    FPorcentajeIVA1             := FloatField[_PorcentajeIVA1];
    FPorcentajeIVA2             := FloatField[_PorcentajeIVA2];
    FEsCuitRequerido            := BooleanField[_EsCuitRequerido];
    CodigoSifab                 := StringField[_CodigoSifab];
    CodigoImpuestoSifab         := StringField[_CodigoImpuestoSifab];
    CodigoConceptoImpuestoSifab := StringField[_codigoConceptoImpuestoSifab];
    FEsInactivo                 := BooleanField[_EsInactivo];
    CodigoTeamplace             := StringField[_CodigoTeamplace];
  end;
end;

{ TCondicionDeIVAList }
function TCondicionDeIVAList.GetActual: TCondiciondeIVA;
begin
  Result := TCondiciondeIVA(CurrentObject);
end;

function TCondicionDeIVAList.CreateNewObject: TPDObject;
begin
  Result := TCondiciondeIVA.Create;
end;

constructor TCondicionDeIVAList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCondiciondeIVA, TCondicionDeIVADM.CreateAll(False, '', _SoloActivos));
end;

{ TGrupoDeCuentasContables }
constructor TGrupoDeCuentasContables.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TGrupoDeCuentasContablesDM);
end;

{ TGrupoDeCuentasContablesDM }
class function TGrupoDeCuentasContablesDM.TableName: string;
begin
  Result := 'GruposDeCuentasContables';
end;

class function TGrupoDeCuentasContablesDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TGrupoDeCuentasContablesDM.ID_FieldName: string;
begin
  Result := 'GrupoDeCuentasContablesID';
end;

procedure TGrupoDeCuentasContablesDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeCuentasContables(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TGrupoDeCuentasContablesDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeCuentasContables(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TGrupoDeCuentasContablesList }
function TGrupoDeCuentasContablesList.GetActual: TGrupoDeCuentasContables;
begin
  Result := TGrupoDeCuentasContables(CurrentObject);
end;

function TGrupoDeCuentasContablesList.CreateNewObject: TPDObject;
begin
  Result := TGrupoDeCuentasContables.Create;
end;

constructor TGrupoDeCuentasContablesList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TGrupoDeCuentasContables,TGrupoDeCuentasContablesDM.CreateAll(false, '', _SoloActivos));
end;

{ TCuentaContable }
constructor TCuentaContable.Create;
begin
  inherited;
  DMObject            := Aplicacion.DMProvider.GetGlobalDM(TCuentaContableDM);
  Solomayusculas      := False;
  FLargoCodigo        := Aplicacion.LargoCodigos.LargoCuentaContable;
  Fcodigo             := Null;
  Fdescripcion        := Null;
  FesImputable        := Null;
  FnivelDeCuenta      := Null;
  FsaldoInicial       := Null;
  RellenarCodigo      := True;
  FCodigoInternoSifab := Null;
  FIDTeamplace        := Null;
end;

procedure TCuentaContable.SetcuentaMadreID(Value: TObjectID);
begin
  if (Value <> FcuentaMadreID) and assigned(FcuentaMadre) then
    FreeAndNil(FcuentaMadre);
  FcuentaMadreID := Value;
end;

function TCuentaContable.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = null) then
    FCodigoInternoSifab := aplicacion.sesion.ConexionSifab.Get_Integer_Field('CuentaContableNew', 'codigoCuentaContable = ' + QuotedStr(Codigo),'codigoInternoCuentaContable');
  Result := FCodigoInternoSifab;
end;

function TCuentaContable.GetcuentaMadre: TCuentaContable;
begin
  if not assigned(FcuentaMadre) then
    GetObject(TCuentaContable, FcuentaMadre, cuentaMadreID);
  Result := TCuentaContable(FcuentaMadre);
end;

procedure TCuentaContable.SetgrupoDeCuentasContablesID(Value: TObjectID);
begin
  if (Value <> FgrupoDeCuentasContablesID) and assigned(FgrupoDeCuentasContables) then
    FreeAndNil(FgrupoDeCuentasContables);
  FgrupoDeCuentasContablesID := Value;
end;

procedure TCuentaContable.SetMonedaID(const Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

function TCuentaContable.GetgrupoDeCuentasContables: TGrupoDeCuentasContables;
begin
  if not assigned(FgrupoDeCuentasContables) then
    GetObject(TGrupoDeCuentasContables, FgrupoDeCuentasContables, GrupoDeCuentasContablesID);
  Result := TGrupoDeCuentasContables(FgrupoDeCuentasContables);
end;

function TCuentaContable.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TCuentaContableDM._TeamplaceTableName, TCuentaContableDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TCuentaContableDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TCuentaContable.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);
  Result := TMoneda(FMoneda);
end;


function TCuentaContable.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TCuentaContableList;
end;

{ TCuentaContableDM }
class function TCuentaContableDM.TableName: string;
begin
  Result := 'cuentascontables';
end;

class function TCuentaContableDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCuentaContableDM.ID_FieldName: string;
begin
  Result := 'CuentaContableID';
end;

procedure TCuentaContableDM.PopulateFields(PDObject: TPDObject);
begin
  with TCuentaContable(PDObject) do
  begin
    StringField[_Codigo]                := Codigo;
    StringField[_Descripcion]           := Descripcion;
    IDField[_MonedaID]                  := FMonedaID;
    IDField[_CuentaMadreID]             := FCuentaMadreID;
    BooleanField[_esImputable]          := FEsImputable;
    IDField[_GrupoDeCuentasContablesID] := FGrupoDeCuentasContablesID;
    FloatField[_SaldoInicial]           := FSaldoInicial;
    BooleanField[_Grabado]              := FGrabado;
    BooleanField[_EsInactivo]           := EsInactivo;
  end;
end;

procedure TCuentaContableDM.PopulateObject(PDObject: TPDObject);
begin
  with TCuentaContable(PDObject) do
  begin
    Codigo                     := StringField[_Codigo];
    FDescripcion               := StringField[_Descripcion];
    FMonedaID                  := IDField[_MonedaID];
    FCuentaMadreID             := IDField[_CuentaMadreID];
    FEsImputable               := BooleanField[_esImputable];
    FGrupoDeCuentasContablesID := IDField[_GrupoDeCuentasContablesID];
    FSaldoInicial              := FloatField[_SaldoInicial];
    FGrabado                   := BooleanField[_Grabado];
    EsInactivo                 := BooleanField[_EsInactivo];
  end;
end;

{ TCuentaContableList }
function TCuentaContableList.GetActual: TCuentaContable;
begin
  Result := TCuentaContable(CurrentObject);
end;

function TCuentaContableList.CreateNewObject: TPDObject;
begin
  Result := TCuentaContable.Create;
end;

constructor TCuentaContableList.CreateNotImputables( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result :=   '( '+ TCuentaContableDM.TableName+'.'+ TCuentaContableDM._esImputable + ' = 0)';
  end;
begin
  inherited Create(TCuentaContable, TCuentaContableDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TCuentaContableList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TCuentaContable, TCuentaContableDM.CreateAll( False, '', _SoloActivos));
end;

constructor TCuentaContableList.CreateBySortGrupoDeCuentas(_SoloActivos: Boolean);
  Function OrderBy: String;
  begin
    Result := TCuentaContableDM.TableName +'.'+ TCuentaContableDM._GrupoDeCuentasContablesID ;
  end;
begin
  inherited Create(TCuentaContable, TCuentaContableDM.CreateAll( False, '', _SoloActivos, OrderBy));
end;

constructor TCuentaContableList.CreateImputables( _SoloActivos: Boolean ; _SoloDeEgreso: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TCuentaContableDM._esImputable + ' = 1)';
    if _SoloDeEgreso then
      Result := Result + ' and (' + TCuentaContableDM._Codigo + ' Like ' + QuotedStr( Aplicacion.ParametrosDelSistema.PrefijoCuentasContablesDeEgresos +'%')+')';
  end;
begin
  inherited Create(TCuentaContable, TCuentaContableDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCuentaContableList.CreateImputablesByCodigoLike(_Like: String; _SoloActivos: Boolean; _SoloDeEgreso: Boolean);
  Function WhereString : String;
  begin
    Result := '('+ TCuentaContableDM._esImputable + ' = 1) and (' ;

    Result := Result + TCuentaContableDM._Codigo + ' Like ' + QuotedStr(_like +'%')+')';

    if _SoloDeEgreso then
      Result := Result + ' and (' + TCuentaContableDM._Codigo + ' Like ' + QuotedStr( Aplicacion.ParametrosDelSistema.PrefijoCuentasContablesDeEgresos +'%')+')';
  end;
begin
  inherited Create(TCuentaContable, TCuentaContableDM.CreateAll(False, WhereString, _SoloActivos));
end;

{ TTelefonoDeEmpresa }
constructor TTelefonoDeEmpresa.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTelefonoDeEmpresaDM);
  FTelefono := null;
end;

procedure TTelefonoDeEmpresa.SetempresaID(Value: TObjectID);
begin
  if (Value <> FEmpresaID) and Assigned(FEmpresa) then
    FreeAndNil(FEmpresa);
  FempresaID := Value;
end;

function TTelefonoDeEmpresa.Getempresa: TEmpresa;
begin
  if not Assigned(FEmpresa) then
    GetObject(TEmpresa, FEmpresa, EmpresaID);
  Result := TEmpresa(FEmpresa);
end;

class function TTelefonoDeEmpresa.GuardarEnTeamPlace(_T: TTelefonoDeEmpresa): Boolean;
begin
  if not Aplicacion.ParametrosDelSistema.UpdateTeamplace then
    Exit;
end;

procedure TTelefonoDeEmpresa.Delete;
begin
  If (Self.Empresa.TelefonoEmpresaDefaultID = Self.ID) then
    Aplicacion.RaiseExceptionCreate( 'No se puede eliminar este teléfono porque es el teléfono por defecto de la empresa');
  If (Self.Empresa.FaxDefaultID = Self.ID) then
    Aplicacion.RaiseExceptionCreate( 'No se puede eliminar este teléfono porque es el fax por defecto de la empresa');
  inherited;
end;

{ TTelefonoDeEmpresaDM }
class function TTelefonoDeEmpresaDM.TableName: string;
begin
  Result := 'TelefonosDeEmpresa';
end;

class function TTelefonoDeEmpresaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTelefonoDeEmpresaDM.ID_FieldName: string;
begin
  Result := 'TelefonoDeEmpresaID';
end;

procedure TTelefonoDeEmpresaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTelefonoDeEmpresa(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    StringField[_Telefono]    := FTelefono;
    IDField[_empresaID]       := FempresaID;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TTelefonoDeEmpresaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTelefonoDeEmpresa(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    FTelefono   := StringField[_Telefono];
    FempresaID  := IDField[_empresaID];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TTelefonoDeEmpresaList }
function TTelefonoDeEmpresaList.GetActual: TTelefonoDeEmpresa;
begin
  Result := TTelefonoDeEmpresa(CurrentObject);
end;

function TTelefonoDeEmpresaList.CreateNewObject: TPDObject;
begin
  Result := TTelefonoDeEmpresa.Create;
end;

constructor TTelefonoDeEmpresaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TTelefonoDeEmpresa, TTelefonoDeEmpresaDM.CreateAll( False, '', _SoloActivos) );
end;

constructor TTelefonoDeEmpresaList.CreateByEmpresa(_CE: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTelefonoDeEmpresaDM._empresaID + ' = ' + IntToStr(_CE.ID)+')';
  end;
begin
  inherited Create(TTelefonoDeEmpresa, TTelefonoDeEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

{ TContactoDeEmpresa }
constructor TContactoDeEmpresa.Create;
begin
  inherited;
  SaveSqlLog       := True;
  DMObject         := aplicacion.DMProvider.GetGlobalDM(TContactoDeEmpresaDM);
  Femail           := null;
  FnumeroDeInterno := null;
  FCelular         := null;
  Fobservacion     := null;
end;

procedure TContactoDeEmpresa.SetempresaID(Value: TObjectID);
begin
  if (Value <> FempresaID) and assigned(Fempresa) then
    FreeAndNil(Fempresa);
  FempresaID := Value;
end;

function TContactoDeEmpresa.GetCargoDeEmpresa: TCargoDeEmpresa;
begin
  if not assigned(FCargoDeEmpresa) then
    GetObject(TCargoDeEmpresa, FCargoDeEmpresa, CargoDeEmpresaID);
  Result := TCargoDeEmpresa(FCargoDeEmpresa);
end;

function TContactoDeEmpresa.GetCodigoContactoSifab: String;
begin
  Result := empresa.codigo + '.' + CodigoSifab;
end;

function TContactoDeEmpresa.GetCodigoDomicilioSifab: String;
begin
  Result := 'DO' + empresa.codigo;
end;

function TContactoDeEmpresa.Getempresa: TEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TEmpresa, Fempresa, empresaID);

  Result := TEmpresa(Fempresa);
end;

function TContactoDeEmpresa.Save: Boolean;
begin
  Result := Inherited Save;
end;

procedure TContactoDeEmpresa.SetCargoDeEmpresaID(const Value: TObjectID);
begin
  if (Value <> FCargoDeEmpresaID) and assigned(FCargoDeEmpresa) then
    FreeAndNil(FCargoDeEmpresa);
  FCargoDeEmpresaID := Value;
end;

procedure TContactoDeEmpresa.Setemail(const Value: TString);
begin
  IF (Value <> '') and Not aplicacion.TextService.ValidarEmail(Value) Then
    Aplicacion.RaiseExceptionCreate('Ingrese un email válido.');
  Femail := Value;
end;

{ TContactoDeEmpresaDM }
class function TContactoDeEmpresaDM.TableName: string;
begin
  Result := 'ContactosDeEmpresa';
end;

class function TContactoDeEmpresaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TContactoDeEmpresaDM.ID_FieldName: string;
begin
  Result := 'ContactoDeEmpresaID';
end;

procedure TContactoDeEmpresaDM.PopulateFields(PDObject: TPDObject);
begin
  with TContactoDeEmpresa(PDObject) do
  begin
    StringField[_Descripcion]     := Descripcion;
    StringField[_Email]           := FEmail;
    StringField[_NumeroDeInterno] := FNumeroDeInterno;
    StringField[_Telefono]        := FTelefono;
    StringField[_Celular]         := FCelular;
    IDField[_EmpresaID]           := FEmpresaID;
    IDField[_CargoDeEmpresaID]    := FCargoDeEmpresaID;
    BooleanField[_EnviarEmail]    := FEnviarEmail;
    StringField[_CodigoSifab]     := FCodigoSifab;
    StringField[_Observacion]     := FObservacion;
    BooleanField[_EsInactivo]     := FEsInactivo;
  end;
end;

procedure TContactoDeEmpresaDM.PopulateObject(PDObject: TPDObject);
begin
  with TContactoDeEmpresa(PDObject) do
  begin
    FDescripcion      := StringField[_Descripcion];
    FEmail            := StringField[_Email];
    FNumeroDeInterno  := StringField[_NumeroDeInterno];
    FEmpresaID        := IDField[_EmpresaID];
    FCargoDeEmpresaID := IDField[_CargoDeEmpresaID];
    FTelefono         := StringField[_Telefono];
    FCelular          := StringField[_Celular];
    FEnviarEmail      := BooleanField[_EnviarEmail];
    FCodigoSifab      := StringField[_CodigoSifab];
    FObservacion      := StringField[_Observacion];
    FEsInactivo       := BooleanField[_EsInactivo];
  end;
end;

{ TContactoDeEmpresaList }
function TContactoDeEmpresaList.GetActual: TContactoDeEmpresa;
begin
  Result := TContactoDeEmpresa(CurrentObject);
end;

function TContactoDeEmpresaList.CreateNewObject: TPDObject;
begin
  Result := TContactoDeEmpresa.Create;
end;

function TContactoDeEmpresaList.FindDescripcion(_Desc: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(self.Actual.Descripcion) = uppercase(_Desc));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TContactoDeEmpresaList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TContactoDeEmpresa, TContactoDeEmpresaDM.CreateAll(False,'', _SoloActivos));
end;

constructor TContactoDeEmpresaList.CreateByEmpresa(_E: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' +  TContactoDeEmpresaDM._empresaID + ' = ' + IntToStr(_E.ID)+')';
  end;
begin
  inherited Create(TContactoDeEmpresa, TContactoDeEmpresaDM.CreateAll(False, WhereString , _SoloActivos));
end;

{ TCondicionDeCompraDM }
class function TCondicionDeCompraDM.TableName: string;
begin
  Result := 'condicionesdecompra';
end;

class function TCondicionDeCompraDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCondicionDeCompraDM.ID_FieldName: string;
begin
  Result := 'CondicionDeCompraID';
end;

procedure TCondicionDeCompraDM.PopulateFields(PDObject: TPDObject);
begin
  with TCondicionDeCompra(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TCondicionDeCompraDM.PopulateObject(PDObject: TPDObject);
begin
  with TCondicionDeCompra(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ CondicionDeCompra }
function TCondicionDeCompraList.GetActual: TCondicionDeCompra;
begin
  Result := TCondicionDeCompra(CurrentObject);
end;

function TCondicionDeCompraList.CreateNewObject: TPDObject;
begin
  Result := TCondicionDeCompra.Create;
end;

constructor TCondicionDeCompraList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCondicionDeCompra, TCondicionDeCompraDM.CreateAll(False, '', _soloactivos));
end;

constructor TCondicionDeCompra.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCondicionDeCompraDM);
end;

{ TJurisdiccionIngresosBrutos }
constructor TJurisdiccionIngresosBrutos.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TJurisdiccionIngresosBrutosDM);
end;

procedure TJurisdiccionIngresosBrutos.Delete;
var
  EL: TEmpresaList;
begin
  Try
    EL := TEmpresaList.CreateByJurisdiccionDeIngresosBrutos(self);
    If EL.Count > 0 then
      Aplicacion.RaiseExceptionCreate( 'No se puede eliminar la Jurisdiccion de Ingresos Brutos porque esta asociada a una Empresa.');
  Finally
    FreeAndNil(EL);
  End;
  inherited;

end;

{ TJurisdiccionIngresosBrutosDM }
class function TJurisdiccionIngresosBrutosDM.TableName: string;
begin
  Result := 'jurisdiccionesingresosbrutos';
end;

class function TJurisdiccionIngresosBrutosDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TJurisdiccionIngresosBrutosDM.ID_FieldName: string;
begin
  Result := 'JurisdiccionIngresosBrutosID';
end;

procedure TJurisdiccionIngresosBrutosDM.PopulateFields(PDObject: TPDObject);
begin
  with TJurisdiccionIngresosBrutos(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TJurisdiccionIngresosBrutosDM.PopulateObject(PDObject: TPDObject);
begin
  with TJurisdiccionIngresosBrutos(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TJurisdiccionIngresosBrutosList }
function TJurisdiccionIngresosBrutosList.GetActual: TJurisdiccionIngresosBrutos;
begin
  Result := TJurisdiccionIngresosBrutos(CurrentObject);
end;

function TJurisdiccionIngresosBrutosList.CreateNewObject: TPDObject;
begin
  Result := TJurisdiccionIngresosBrutos.Create;
end;

constructor TJurisdiccionIngresosBrutosList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TJurisdiccionIngresosBrutos,TJurisdiccionIngresosBrutosDM.CreateAll(False, '', _SoloActivos));
end;

{ TZonaDeCliente }
constructor TZonaDeCliente.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TZonaDeClienteDM);
end;

procedure TZonaDeCliente.Delete;
Var
  EL: TEmpresaList;
begin
  Try
    EL := TEmpresaList.CreateByZonaDeCliente(self);
    If EL.Count > 0 then
      Aplicacion.RaiseExceptionCreate( 'No se puede eliminar esta Zona de Clientes porque se encuentra asiganada a una o mas Empresas.');
  Finally
    FreeAndNil(EL);
  End;
  inherited;
end;

function TZonaDeCliente.GetDescriptibleAbreviadoListClass
  : TDescriptibleAbreviadoListClass;
begin
  Result := TZonaDeClienteList;
end;

{ TZonaDeClienteDM }
class function TZonaDeClienteDM.TableName: string;
begin
  Result := 'zonasdecliente';
end;

class function TZonaDeClienteDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TZonaDeClienteDM.ID_FieldName: string;
begin
  Result := 'ZonaDeClienteID';
end;

procedure TZonaDeClienteDM.PopulateFields(PDObject: TPDObject);
begin
  with TZonaDeCliente(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    StringField[_Codigo] := codigo;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TZonaDeClienteDM.PopulateObject(PDObject: TPDObject);
begin
  with TZonaDeCliente(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    codigo := StringField[_Codigo];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TZonaDeClienteList }
function TZonaDeClienteList.GetActual: TZonaDeCliente;
begin
  Result := TZonaDeCliente(CurrentObject);
end;

function TZonaDeClienteList.CreateNewObject: TPDObject;
begin
  Result := TZonaDeCliente.Create;
end;

constructor TZonaDeClienteList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TZonaDeCliente, TZonaDeClienteDM.CreateAll( False, '', _SoloActivos));
end;

{ TMarca }
constructor TMarcaAsociada.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TMarcaAsociadaDM);
  FGrupoDeVendedorID := NullID;
  FEsMarcaPropia     := False;
end;

procedure TMarcaAsociada.SetclienteID(Value: TObjectID);
begin
  if (Value <> FempresaID) and assigned(Fempresa) then
    FreeAndNil(Fempresa);
  FempresaID := Value;

end;

procedure TMarcaAsociada.SetDireccionDeEntregaID(const Value: TObjectID);
begin
  if assigned( FDireccionDeEntrega ) and ( FDireccionDeEntregaID <> Value) then
    FreeAndNil( FDireccionDeEntrega);
  FDireccionDeEntregaID := Value;
end;

procedure TMarcaAsociada.SetGrupoDeVendedorID(const Value: TObjectID);
begin
  if (FGrupoDeVendedorID<>Value) and assigned(FGrupoDeVendedor) then
    FreeAndNil( FGrupoDeVendedor );
  FGrupoDeVendedorID := Value;
end;

procedure TMarcaAsociada.SetGrupoDeVendedorInicialID(const Value: TObjectID);
begin
  if (FGrupoDeVendedorInicialID<>Value) and assigned(FGrupoDeVendedorInicial) then
    FreeAndNil( FGrupoDeVendedorInicial );
  FGrupoDeVendedorInicialID := Value;
end;

procedure TMarcaAsociada.Delete;
begin
  if (Empresa.MarcaAsociadaDefaultID = Self.ID) then
    Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca asociada porque esta siendo usada Como default de la empresa.');
  inherited;
end;

function TMarcaAsociada.Getcliente: TEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TEmpresa, Fempresa, FempresaID);
  Result := TEmpresa(Fempresa);
end;

function TMarcaAsociada.GetDireccionDeEntrega: TDeposito;
begin
  if not assigned(FDireccionDeEntrega) then
    GetObject(TDeposito, FDireccionDeEntrega, direccionDeEntregaID);
  Result := TDeposito(FDireccionDeEntrega);
end;

function TMarcaAsociada.GetEsInactivo: TBoolean;
begin
  if (MarcaID <> NullID ) then
    FEsInactivo := Marca.EsInactivo;
  Result := FEsInactivo;
end;

function TMarcaAsociada.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, FGrupoDeVendedorID);
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TMarcaAsociada.GetGrupoDeVendedorInicial: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedorInicial) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedorInicial, FGrupoDeVendedorInicialID);
  Result := TGrupoDeVendedor(FGrupoDeVendedorInicial);
end;

{ TMarcaDM }
class function TMarcaAsociadaDM.TableName: string;
begin
  Result := 'marcasAsociadas';
end;

class function TMarcaAsociadaDM.ID_FieldName: string;
begin
  Result := 'MarcaAsociadaID';
end;

procedure TMarcaAsociadaDM.PopulateFields(PDObject: TPDObject);
begin
  with TMarcaAsociada(PDObject) do
    begin
      IDField[_empresaID]                                 := FempresaID;
      IDField[_marcaID]                                   := FmarcaID;
      IDField[_grupoDeVendedorID]                         := FGrupoDeVendedorID;
      IDField[_grupoDeVendedorInicialID]                  := FGrupoDeVendedorInicialID;
      DateTimeField[_VigenciaHastaGrupoDeVendedorInicial] := FVigenciaHastaGrupoDeVendedorInicial;
      BooleanField[_esMarcaPropia]                        := FesMarcaPropia;
      IDField[_direccionDeEntregaId]                      := fdireccionDeEntregaID;
    end;
end;

procedure TMarcaAsociadaDM.PopulateObject(PDObject: TPDObject);
begin
  with TMarcaAsociada(PDObject) do
    begin
      FempresaID                           := IDField[_empresaID];
      FmarcaID                             := IDField[_marcaID];
      FGrupoDeVendedorID                   := IDField[_grupoDeVendedorID];
      FGrupoDeVendedorInicialID            := IDField[_grupoDeVendedorInicialID];
      FVigenciaHastaGrupoDeVendedorInicial := DateTimeField[_VigenciaHastaGrupoDeVendedorInicial];
      FesMarcaPropia                       := BooleanField[_esMarcaPropia];
      fdireccionDeEntregaID                := IDField[_direccionDeEntregaId];
    end;
end;

{ TMarcaList }
function TMarcaAsociadaList.GetActual: TMarcaAsociada;
begin
  Result := TMarcaAsociada(CurrentObject);
end;

function TMarcaAsociadaList.CreateNewObject: TPDObject;
begin
  Result := TMarcaAsociada.Create;
end;

function TMarcaAsociadaList.Find(_ID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.ID = _ID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TMarcaAsociadaList.FindMarca(_M: TMarca): Boolean;
begin
  Result := FindMarca( _M.ID);
end;

function TMarcaAsociadaList.FindMarca(_MID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.marcaID = _MID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TMarcaAsociadaList.CreateAll(_SoloActivos: Boolean );
  Function WhereString: String;
  begin
    Result := '';
    if _soloActivos then
      Result := '( ' + TMarcaAsociadaDM._marcaID + ' in ( select ' +  TMarcaDM.ID_FieldName + ' from ' + TMarcaDM.TableName + ' where ' + TMarcaDM._EsInactivo +'=0))';
  end;
begin
  inherited Create(TMarcaAsociada, TMarcaAsociadaDM.CreateAll( False, WhereString, False ));
end;

constructor TMarcaAsociadaList.CreateByDescripcionLike(_D: String; _E: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    if _SoloActivos then
      Result := '(' + TMarcaAsociadaDM._empresaID + '=' + IntToStr(_E.ID) + ') and (' + TMarcaAsociadaDM._marcaID + ' in ( select ' + TMarcaDM.ID_FieldName + ' from ' +
                  TMarcaDM.TableName + ' where lower(' + TMarcaDM._Descripcion + ') Like (' + quotedstr(lowerCase(_D) + '%')+') and ( ' + TMarcaDM._esInactivo +'= 0 )))'
  else
      Result := '(' + TMarcaAsociadaDM._empresaID + '=' + IntToStr(_E.ID) + ') and (' + TMarcaAsociadaDM._marcaID + ' in ( select ' + TMarcaDM.ID_FieldName + ' from ' +
                  TMarcaDM.TableName + ' where lower(' + TMarcaDM._Descripcion + ') Like (' + quotedstr(lowerCase(_D) + '%')+') ))';
  end;
begin
  inherited Create(TMarcaAsociada, TMarcaAsociadaDM.CreateAll(False, WhereString));
end;

constructor TMarcaAsociadaList.CreateByEmpresa(_E: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(_E.ID) + ')' ;
    if  _SoloActivos then
      Result := Result + ' and ( ' + TMarcaAsociadaDM._marcaID + ' in ( select ' +  TMarcaDM.ID_FieldName + ' from ' + TMarcaDM.TableName + ' where ' + TMarcaDM._esInactivo +'=0))';
  end;
begin
  inherited Create(TMarcaAsociada,  TMarcaAsociadaDM.CreateAll(False, WhereString));
end;

constructor TMarcaAsociadaList.CreateByMarca(_M: TMarca);
  Function WhereString : String;
  begin
    Result := TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._MarcaID + ' = ' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TMarcaAsociada, TMarcaAsociadaDM.CreateAll(False, WhereString));
end;

constructor TMarcaAsociadaList.CreateEmpty;
begin
  inherited Create(TMarcaAsociada, TMarcaAsociadaDM.CreateEmpty);
end;


// EMPRESAS
function TAbstractEmpresa.GetDeudaActual: Real;
begin
  FDeudaActual := SaldoCuentaCorriente + SaldoItemsPendientesConIva + SaldoItemsProgramados;
  Result := FDeudaActual;
end;

function TAbstractEmpresa.GetActividad: TActividad;
begin
  if not assigned(FActividad) then
    GetObject(TActividad, FActividad, ActividadID);

  Result := TActividad(FActividad);
end;

function TAbstractEmpresa.GetCategoriaDeCliente: TCategoriaDeCliente;
begin
  if not assigned(FCategoriaDeCliente) then
    GetObject(TCategoriaDeCliente, FCategoriaDeCliente, CategoriaDeClienteID);

  Result := TCategoriaDeCliente(FCategoriaDeCliente);
end;

function TAbstractEmpresa.GetCategoriaDeProveedor: TCategoriaDeProveedor;
begin
  if not assigned(FCategoriaDeProveedor) then
    GetObject(TCategoriaDeProveedor, FCategoriaDeProveedor, CategoriaDeProveedorID);

  Result := TCategoriaDeProveedor(FCategoriaDeProveedor);
end;

function TAbstractEmpresa.GetCCActividadDescripcion: TString;
begin
  if (FCCActividadDescripcion = Unassigned) then
    FCCActividadDescripcion := Actividad.Descripcion;
  Result := FCCActividadDescripcion;
end;

function TAbstractEmpresa.GetCCCanalDeDistribucion: TString;
begin
  if (FCCCanalDeDistribucion = Unassigned) and (FActividadID <> NullID) then
    FCCCanalDeDistribucion := Actividad.CanalDeDistribucion.Descripcion;
  Result := FCCCanalDeDistribucion;
end;

function TAbstractEmpresa.GetCCCondicionDeVentaDetalleDescripcion: TString;
begin
  if (FCCCondicionDeVentaDetalleDescripcion = Null ) and ( CondicionDeVentaDetalleID <> NullID) then
    FCCCondicionDeVentaDetalleDescripcion := CondicionDeVentaDetalle.Descripcion;
  result := FCCCondicionDeVentaDetalleDescripcion;
end;

function TAbstractEmpresa.getCCGrupoDeVendedorDescripcion: TString;
begin
  if (FCCGrupoDeVendedorDescripcion = Null) then
    FCCGrupoDeVendedorDescripcion := GrupoDeVendedor.Descripcion;
  Result := FCCGrupoDeVendedorDescripcion;
end;

function TAbstractEmpresa.getCCGrupoDeVendedorInicialDescripcion: TString;
begin
  if (FCCGrupoDeVendedorInicialDescripcion = Unassigned) then
    FCCGrupoDeVendedorInicialDescripcion := GrupoDeVendedorInicial.Descripcion;
  Result := FCCGrupoDeVendedorInicialDescripcion;
end;

function TAbstractEmpresa.GetCCMarcaDefaultDescripcion: TString;
begin
  If (FCCMarcaDefaultDescripcion='') and (MarcaAsociadaDefaultID <> NullID) and Marcas.Find( MarcaAsociadaDefaultID ) then
    FCCMarcaDefaultDescripcion := Marcas.actual.Marca.Descripcion;
  Result := FCCMarcaDefaultDescripcion;
end;

function TAbstractEmpresa.GetCategoriaDeGanancias: TCategoriaDeGanancias;
begin
  if not assigned(FCategoriaDeGanancias) then
    GetObject(TCategoriaDeGanancias, FCategoriaDeGanancias, CategoriaDeGananciasID);
  Result := TCategoriaDeGanancias(FCategoriaDeGanancias);
end;

function TAbstractEmpresa.GetCCNivelDeServicioDeCliente: TString;
begin
  if (FCCNivelDeServicioDeCliente = Unassigned) then
    Begin
      FCCNivelDeServicioDeCliente                     := NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion          := NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador   := NivelDeServicioDeCliente.ColorIdentificador;
    End;
  Result := FCCNivelDeServicioDeCliente;
end;

function TAbstractEmpresa.GetCCNivelDeServicioDeClienteColorIdentificador: TEntero;
begin
  if (FCCNivelDeServicioDeCliente = Unassigned) then
    Begin
      FCCNivelDeServicioDeCliente                     := NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion          := NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador   := NivelDeServicioDeCliente.ColorIdentificador;
    End;
  Result := FCCNivelDeServicioDeClienteColorIdentificador;
end;

function TAbstractEmpresa.GetCCNivelDeServicioDeClientePonderacion: TReal;
begin
  if (FCCNivelDeServicioDeCliente = Unassigned) then
    Begin
      FCCNivelDeServicioDeCliente                     := NivelDeServicioDeCliente.Descripcion;
      FCCNivelDeServicioDeClientePonderacion          := NivelDeServicioDeCliente.Ponderacion;
      FCCNivelDeServicioDeClienteColorIdentificador   := NivelDeServicioDeCliente.ColorIdentificador;
    End;
  Result := FCCNivelDeServicioDeClientePonderacion;
end;

function TAbstractEmpresa.GetCobrador: TCobrador;
begin
  if not assigned(FCobrador) then
    GetObject(TCobrador, FCobrador, FCobradorID);

  Result := TCobrador(FCobrador);
end;

function TAbstractEmpresa.GetCodigoDomicilioSifab: String;
begin
  Result := 'DO' + codigo;
end;

function TAbstractEmpresa.GetCodigoIDImpositivoExterior: TString;
begin
  if (FCodigoIDImpositivoExterior = Null) and (Localidad.pais.TipoDeClaveFiscalID <> NullID) then
    FCodigoIDImpositivoExterior := Localidad.pais.TipoDeClaveFiscal.codigo;
  Result := FCodigoIDImpositivoExterior;
end;

function TAbstractEmpresa.GetCodigoInternoDomicilioSifab: TEntero;
begin
  if isAssigned and (FCodigoInternoDomicilioSifab = 0) then
    FCodigoInternoDomicilioSifab := TEntero(Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Cliente', 'CodigoCliente = ' + IntToStr(CodigoSifab) , 'CodigoInternoDomicilio'));
  Result := FCodigoInternoDomicilioSifab;
end;

function TAbstractEmpresa.GetCodigoInternoDomicilioTransportistaSifab: TEntero;
begin
  if isAssigned and (FCodigoInternoDomicilioTransportistaSifab = 0) then
    FCodigoInternoDomicilioTransportistaSifab := TEntero(Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Transportista', 'CodigoTransportista = ' + QuotedStr(Codigo) , 'CodigoInternoDomicilio'));
  Result := FCodigoInternoDomicilioTransportistaSifab;
end;

function TAbstractEmpresa.GetCodigoInternoSifab: Integer;
begin
  if isAssigned and (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Cliente', 'CodigoCliente = ' + IntToStr(CodigoSifab) , 'CodigoInternoCliente');
  Result := FCodigoInternoSifab;
end;

function TAbstractEmpresa.GetCodigoInternoTransportistaSifab: TEntero;
begin
  if not esFlete then
    Aplicacion.RaiseExceptionCreate( 'No debe usarse CodigoSifabTransportista para Clientes. ')
  else
    begin
      if isAssigned and (FCodigoInternoTransportistaSifab= 0) then
        FCodigoInternoTransportistaSifab := TEntero(Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Transportista', 'CodigoTransportista = ' + QuotedStr(Codigo) , 'CodigoInternoTransportista'));
      Result := FCodigoInternoTransportistaSifab;
    end;
end;

function TAbstractEmpresa.GetCodigoSifab: Integer;
begin
  if esProveedor or esFlete then
    Aplicacion.RaiseExceptionCreate( 'No debe usarse CodigoSifab para proveedores o fletes. ')
  else
    Result := StrToInt(Aplicacion.TextService.ReemplazarEn(codigo, '-', ''));
end;

function TAbstractEmpresa.GetComentarios: TComentarioList;
begin
  If assigned(FComentarios) Then
    FreeAndNil(FComentarios);
  GetList(TPDList(FComentarios), TPDList(TComentarioList.CreateByPadre(self)));
  Result := FComentarios;
end;

function TAbstractEmpresa.GetCondiciondeCobranza: TCondicionDeCompra;
begin
  if not assigned(FCondiciondeCobranza) then
    GetObject(TCondicionDeCompra, FCondiciondeCobranza, CondiciondeCobranzaID);
  Result := TCondicionDeCompra(FCondiciondeCobranza);
end;

function TAbstractEmpresa.GetCondicionDeCompra: TCondicionDeCompra;
begin
  if not assigned(FCondicionDeCompra) then
    GetObject(TCondicionDeCompra, FCondicionDeCompra, CondicionDeCompraID);
  Result := TCondicionDeCompra(FCondicionDeCompra);
end;

function TAbstractEmpresa.GetCondicionDeIngresosBrutos : TCondicionDeIngresosBrutos;
begin
  if not Assigned(FCondicionDeIngresosBrutos) then
    GetObject(TCondicionDeIngresosBrutos, FCondicionDeIngresosBrutos, CondicionDeIngresosBrutosID);
  Result := TCondicionDeIngresosBrutos(FCondicionDeIngresosBrutos);
end;

function TAbstractEmpresa.GetCondicionDeIva: TCondiciondeIVA;
begin
  if not Assigned(FCondicionDeIva) then
    GetObject(TCondiciondeIVA, FCondicionDeIva, CondicionDeIVAID);
  Result := TCondiciondeIVA(FCondicionDeIva);
end;

function TAbstractEmpresa.GetCondicionDeVentaDescripcion: TString;
begin
  if (FCCCondicionDeVentaDescripcion = Null) and ( CondicionDeVentaID <> NullID) then
    FCCCondicionDeVentaDescripcion := CondicionDeVenta.Descripcion;
  result := FCCCondicionDeVentaDescripcion;
end;

function TAbstractEmpresa.GetCondicionDeVentaDetalle: TCondicionDeVentaDetalle;
begin
  if not Assigned(FCondicionDeVentaDetalle) then
    GetObject(TCondicionDeVentaDetalle, FCondicionDeVentaDetalle, FCondicionDeVentaDetalleID);
  Result := TCondicionDeVentaDetalle(FCondicionDeVentaDetalle);
end;

function TAbstractEmpresa.GetCondicionDeVenta: TCondicionDeVenta;
begin
  if not Assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta, FCondicionDeVenta, CondicionDeVentaID);
  Result := TCondicionDeVenta(FCondicionDeVenta);
end;

function TAbstractEmpresa.GetFaxDefault: TTelefonoDeEmpresa;
Var
  T: TTelefonoDeEmpresa;
begin
  if not assigned(FFaxDefault) then
  Begin
    T := TTelefonoDeEmpresa.Create;
    If Not(T.Load(FaxDefaultID)) then
    Begin
      If telefonosDeEmpresa.Count > 0 Then
        If telefonosDeEmpresa.Find(FaxDefaultID) Then
        Begin
          T := TTelefonoDeEmpresa.Create;
          T.Descripcion := telefonosDeEmpresa.Actual.Descripcion;
          T.Telefono := telefonosDeEmpresa.Actual.Telefono;
          T.empresaID := telefonosDeEmpresa.Actual.empresaID;
          FFaxDefault := T;
        End;
    End
    Else
      FFaxDefault := T;
  End;
  Result := TTelefonoDeEmpresa(FFaxDefault);
end;


function TAbstractEmpresa.GetFlete: TEmpresa;
begin
  if not assigned(FFlete) then
    GetObject(TEmpresa, FFlete, FleteID);
  Result := TEmpresa(FFlete);
end;

function TAbstractEmpresa.GetFormatoDeDireccion: TFormatoDeDireccion;
begin
  if not Assigned(FFormatoDeDireccion) then
    GetObject(TFormatoDeDireccion, FFormatoDeDireccion, FormatoDeDireccionID);
  Result := TFormatoDeDireccion(FFormatoDeDireccion);
end;

function TAbstractEmpresa.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, GrupoDeVendedorID);
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;

function TAbstractEmpresa.GetGrupoDeVendedorInicial: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedorInicial) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedorInicial, GrupoDeVendedorInicialID);
  Result := TGrupoDeVendedor(FGrupoDeVendedorInicial);
end;

function TAbstractEmpresa.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TAbstractEmpresaDM._TeamplaceTableName, TAbstractEmpresaDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TAbstractEmpresaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TAbstractEmpresa.GetImpuestos: TEmpresaImpuestoList;
begin
  if not assigned(FImpuestos) then
    GetList(TPDList(FImpuestos), TPDList(TEmpresaImpuestoList.CreateByEmpresa(self)));
  Result := TEmpresaImpuestoList(FImpuestos);
end;

function TAbstractEmpresa.GetInhabilitadoSifab: Boolean;
begin
  Result := False;
  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
    Exit;

  if aplicacion.sesion.ConexionSifab.Clientes.Active then
    aplicacion.sesion.ConexionSifab.Clientes.Close;
  try
    aplicacion.sesion.ConexionSifab.Clientes.SQL.text := 'Select habilitado from Cliente where ( codigoCliente = ' + IntToStr(CodigoSifab) + ' ) ';
    aplicacion.sesion.ConexionSifab.Clientes.Open;
    aplicacion.sesion.ConexionSifab.Clientes.First;
    if (aplicacion.sesion.ConexionSifab.Clientes.RecordCount > 0) then
      Result := not aplicacion.sesion.ConexionSifab.Clientes.FieldByName('habilitado').Value
    else
      Result := False;
  finally
    aplicacion.sesion.ConexionSifab.Clientes.Close;
  end;
end;

function TAbstractEmpresa.GetInhibidoFinancieramente: Boolean;
begin
  Result := False;
  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
    Exit;

  if aplicacion.sesion.ConexionSifab.Clientes.Active then
    aplicacion.sesion.ConexionSifab.Clientes.Close;
  try
    aplicacion.sesion.ConexionSifab.Clientes.SQL.text := 'Select inhibicionFinanciera from Cliente where ( codigoCliente = ' + IntToStr(CodigoSifab) + ' ) ';
    aplicacion.sesion.ConexionSifab.Clientes.Open;
    aplicacion.sesion.ConexionSifab.Clientes.First;
    if (aplicacion.sesion.ConexionSifab.Clientes.RecordCount > 0) then
      Result := aplicacion.sesion.ConexionSifab.Clientes.FieldByName('inhibicionFinanciera').Value
    else
      Result := False;
  finally
    aplicacion.sesion.ConexionSifab.Clientes.Close;
  end;
end;

function TAbstractEmpresa.GetJurisdiccionDeIngresosBrutos
  : TJurisdiccionIngresosBrutos;
begin
  if not assigned(FJurisdiccionDeIngresosBrutos) then
    GetObject(TJurisdiccionIngresosBrutos, FJurisdiccionDeIngresosBrutos,
      JurisdiccionDeIngresosBrutosID);

  Result := TJurisdiccionIngresosBrutos(FJurisdiccionDeIngresosBrutos);
end;


function TAbstractEmpresa.GetListaDePrecio: TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio, FListaDePrecio, ListaDePrecioID);
  Result := TListaDePrecio(FListaDePrecio);
end;

function TAbstractEmpresa.GetLocalidad: TLocalidad;
begin
  if not assigned(FLocalidad) then
    GetObject(TLocalidad, FLocalidad, LocalidadID);

  Result := TLocalidad(FLocalidad);
end;

function TAbstractEmpresa.GetMarcaAsociadaDefault: TMarcaAsociada;
begin
  if (FMarcaAsociadaDefaultID <> NullID) and (Marcas.Find( FMarcaAsociadaDefaultID )) Then
    Result := Marcas.actual
  else
    Result := Nil;
end;

function TAbstractEmpresa.GetMarcaDefault: TMarca;
begin
  if not assigned(FMarcaDefault) then
    GetObject(TMarca, FMarcaDefault, MarcaDefaultID);
  Result := TMarca(FMarcaDefault);
end;

function TAbstractEmpresa.GetMarcaDefaultID: TObjectID;
begin
  If ( FMarcaDefaultID = NullID ) and (FMarcaAsociadaDefaultID <> NullID) and Marcas.Find( FMarcaAsociadaDefaultID ) then
    MarcaDefaultID := Marcas.actual.MarcaID;
  Result := FMarcaDefaultID;
end;

function TAbstractEmpresa.GetRankingCrediticio: TRankingCrediticio;
begin
  if not assigned(FRankingCrediticio) then
    GetObject(TRankingCrediticio, FRankingCrediticio, RankingCrediticioID);

  Result := TRankingCrediticio(FRankingCrediticio);
end;

Procedure TAbstractEmpresa.RPT_CC_Saldos_Detallado_Cliente( _TipoDeOperacion: String; _Prioridad : Integer ) ; // _TipoDeOperacion -> C = Cabecera  D = Detalle
  procedure CargarParametros( _conexion: TConexionSifab );
  begin
    with _conexion do
      begin
        StoredProc.StoredProcName := 'RPT_CC_Saldos_Detallado_Cliente';
        StoredProc.Active := True;
        StoredProc.ParamByName('CodigoInternoEmpresa').Value    := 2;    // Corresponde a Apholos
        StoredProc.ParamByName('CodigosInternosClientes').Value := NULL;
        StoredProc.ParamByName('CodigoClienteDesde').Value      := CodigoSifab;
        StoredProc.ParamByName('CodigoClienteHasta').Value      := CodigoSifab;
        StoredProc.ParamByName('FechaDesde').Value              := NULL;
        StoredProc.ParamByName('FechaHasta').Value              := Aplicacion.DateTimeService.FechaActual;
        StoredProc.ParamByName('monedaBase').Value              := 0;
        StoredProc.ParamByName('codigoMoneda').Value            := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field( 'Genericas', 'descripcionItem= '+ QuotedStr( MonedaDeLimiteDeCredito.CodigoSifab ), 'codigoItem');
        StoredProc.ParamByName('codigoInternoVendedor').Value   := Null;
        StoredProc.ParamByName('codigoInternoTipoCliente').Value:= Null;
        StoredProc.ParamByName('soloSaldo').Value               := 1;
        StoredProc.ParamByName('OrdenamientoVendedor').Value    := Null;
        StoredProc.ExecProc;
        StoredProc.Filter := 'tipoOperacion = ' + QuotedStr(_TipoDeOperacion );
        StoredProc.Filtered := True;
        StoredProc.First;
      end;
  end;
begin
  if (_Prioridad = 0) then
    CargarParametros( aplicacion.sesion.ConexionSifab )
  else
    CargarParametros( aplicacion.sesion.ConexionSifab2 );
end;

function TAbstractEmpresa.GetSaldoCuentaCorriente: Real;
begin
  Result := 0;
  try
    // SP= [dbo].[APHOSOFT_Saldo_de_Cliente_por_Cuenta]
    // Params
    //		@OrganizacionID = 85061,
    //		@EmpresaID = 16,
    //		@CuentaID  = 27

    Aplicacion.ColocarCursorEspera;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.StoredProcName := Aplicacion.ParametrosDelSistema.StoredProc_Teamplace_Saldo_de_CuentaCorriente;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Prepare;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'OrganizacionID' ).Value := IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'EmpresaID' ).Value      := Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace;
    if EsExportacion then
      Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'CuentaID' ).Value       := Aplicacion.ParametrosDelSistema.CuentaCorrienteDeudoresExterior.IDTeamplace
    else
      Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'CuentaID' ).Value       := Aplicacion.ParametrosDelSistema.CuentaCorrienteDeudoresLocales.IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ExecProc;

    if (Aplicacion.Sesion.ConexionTeamPlace.StoredProc.RecordCount > 0 ) then
      if ( MonedaDefault.Codigo = Aplicacion.MonedaDefault.Codigo ) then
        Result := Aplicacion.MathService.Redondear( Aplicacion.Sesion.ConexionTeamPlace.StoredProc.FieldByName('SaldoPesos').Value, 2)
      else
        Result := Aplicacion.MathService.Redondear( Aplicacion.Sesion.ConexionTeamPlace.StoredProc.FieldByName('SaldoDolares').Value, 2);

  finally
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Active := False;
    Aplicacion.ColocarCursorNormal;
  end;
end;

function TAbstractEmpresa.GetSaldoItemsPendientesConIva: Real;
begin
  Result := SaldoItemsPendientesSinIva;
  if (Result > 0) and ImpuestosActivos and impuestos.FindPredeterminadoProductos then
    Result := Result + (Result * impuestos.actual.ImpuestoConcepto.Alicuota / 100);
end;

function TAbstractEmpresa.GetSaldoItemsPendientesSinIva: Real;
var
  SP : TStoreProcedure;
begin
  try
    Result := 0;
    SP := TStoreProcedure.Create( Aplicacion.Database );
    SP.StoredProcName := 'Vtas_Neto_Sin_Iva_Items_Pendientes';
    SP.Prepare;
    SP.ParamByName('ClienteID').Value := ID;
    SP.ExecProc;
    if (SP.Fields[0].Value <> NULL) then
      Result := Aplicacion.MathService.Redondear( SP.Fields[0].Value, 2);
  finally
    SP.Close;
    FreeAndNil(SP);
  end;
end;

function TAbstractEmpresa.GetSaldoItemsProgramados: Real;
begin
  Result := 0;
  try
    // SP= [dbo].[APHOSOFT_Saldo_de_Cliente_por_Cuenta]
    // Params
    //		@OrganizacionID = 85061,
    //		@EmpresaID = 16,
    //		@CuentaID  = 27

    Aplicacion.ColocarCursorEspera;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.StoredProcName := Aplicacion.ParametrosDelSistema.StoredProc_Teamplace_Saldo_de_CuentaCorriente;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Prepare;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'OrganizacionID' ).Value := IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'EmpresaID' ).Value      := Aplicacion.Sesion.EmpresaDeSistemaProf.IDTeamplace;
    if EsExportacion then
      Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'CuentaID' ).Value       := Aplicacion.ParametrosDelSistema.CuentaCorrienteDeudoresExterior.IDTeamplace
    else
      Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'CuentaID' ).Value       := Aplicacion.ParametrosDelSistema.CuentaCorrienteDeudoresLocales.IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ExecProc;

    if (Aplicacion.Sesion.ConexionTeamPlace.StoredProc.RecordCount > 0 ) then
      if ( MonedaDefault.Codigo = Aplicacion.MonedaDefault.Codigo ) then
        Result := Aplicacion.MathService.Redondear( Aplicacion.Sesion.ConexionTeamPlace.StoredProc.FieldByName('SaldoPesos').Value, 2)
      else
        Result := Aplicacion.MathService.Redondear( Aplicacion.Sesion.ConexionTeamPlace.StoredProc.FieldByName('SaldoDolares').Value, 2);

  finally
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Active := False;
    Aplicacion.ColocarCursorNormal;
  end;
end;

function TAbstractEmpresa.GetTelefonoEmpresaDefault: TTelefonoDeEmpresa;
Var
  T: TTelefonoDeEmpresa;
begin
  if not assigned(FTelefonoEmpresaDefault) then
  Begin
    T := TTelefonoDeEmpresa.Create;
    If Not(T.Load(FTelefonoEmpresaDefaultID)) then
    Begin
      If telefonosDeEmpresa.Count > 0 Then
        If telefonosDeEmpresa.Find(FTelefonoEmpresaDefaultID) Then
        Begin
          T := TTelefonoDeEmpresa.Create;
          T.Descripcion := telefonosDeEmpresa.Actual.Descripcion;
          T.Telefono := telefonosDeEmpresa.Actual.Telefono;
          T.empresaID := telefonosDeEmpresa.Actual.empresaID;
          FTelefonoEmpresaDefault := T;
        End;
    End
    Else
      FTelefonoEmpresaDefault := T;
  End;
  Result := TTelefonoDeEmpresa(FTelefonoEmpresaDefault);
end;

function TAbstractEmpresa.GetTipoDeIdentificacionTributaria: TTipoDeDocumento;
begin
  if not Assigned(FTipoDeIdentificacionTributaria) then
    GetObject(TTipoDeDocumento, FTipoDeIdentificacionTributaria, TipoDeIdentificacionTributariaID);
  Result := TTipoDeDocumento(FTipoDeIdentificacionTributaria);
end;

function TAbstractEmpresa.GetZonaDeCliente: TZonaDeCliente;
begin
  if not assigned(FZonaDeCliente) then
    GetObject(TZonaDeCliente, FZonaDeCliente, ZonaDeClienteID);
  Result := TZonaDeCliente(FZonaDeCliente);
end;

function TAbstractEmpresa.GrupoDeVendedorActivo(_Fecha: TFecha): TGrupoDeVendedor;
begin
  if (GrupoDeVendedorInicialID <> NullID) and (VigenciaHastaGrupoDeVendedorInicial <> Null) and (_Fecha <= VigenciaHastaGrupoDeVendedorInicial)  then
    Result := GrupoDeVendedorInicial
  else
    Result := GrupoDeVendedor;
end;

{ TEmpresaList }
function TEmpresaList.GetActual: TEmpresa;
begin
  Result := TEmpresa(CurrentObject);
end;

constructor TEmpresaList.CreateByCuitYIDDiferente(_Cuit: string; _ID: TObjectID; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Cuit + '=' + QuotedStr(_Cuit);
    Result := Result + ' and ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' <> ' + IntToStr(_ID);
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TEmpresaList.CreateByCunio(_C: TCunio; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( ';
    Result := Result + 'Select ' + TMarcaAsociadaDM._EmpresaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ' + TMarcaAsociadaDM._MarcaID + ' in ( ';
    Result := Result + 'Select ' + TCunioDM._MarcaID  + ' from ' + TCunioDM.TableName + ' where ' + TCunioDM.ID_FieldName + ' = ' + IntToStr(_C.ID) + ' ))';
  end;
  Function OrderByString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo;
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderByString));
end;

constructor TEmpresaList.CreateByDesarrollo(_D: TDesarrollo; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' in ( ';
    Result := Result + 'Select ' + TMarcaAsociadaDM._EmpresaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ' + TMarcaAsociadaDM._MarcaID + ' in ( ';
    Result := Result + 'Select ' + TDesarrolloDM._MarcaID  + ' from ' + TDesarrolloDM.TableName + ' where ' + TDesarrolloDM.ID_FieldName + ' = ' + IntToStr(_D.ID) + ' ))';
  end;
  Function OrderByString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo;
  end;
begin
  inherited Create(TEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString, _SoloActivos, OrderByString));
end;

constructor TEmpresaList.CreateByFiltroPersonalizado(_condicion: string);
begin
  if _condicion = '' then
    inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateEmpty) // fuerzo un a lista vacia
  else
    inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll( False, _condicion));
end;

constructor TEmpresaList.CreateByFiltros(_D, _H: String; _UsaFiltro, _esFlete, _esCliente, _esProveedor, _esBanco: Boolean);
Var
  TextSql: String;
  TextSql1: String;
begin
  TextSql := '(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ' BETWEEN ' + QuotedStr(_D + _PrimerHora) + ' And ' + QuotedStr(_H + _UltimaHora) + ') ';
  TextSql1 := '';

  If _UsaFiltro then
  begin
    if _esCliente then
      TextSql1 := TextSql1 + 'OR (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esCliente   + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_esCliente))))   + ') ';
    If _esProveedor Then
      TextSql1 := TextSql1 + 'OR (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esProveedor + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_esProveedor)))) + ') ';
    If _esBanco Then
      TextSql1 := TextSql1 + 'OR (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esBanco     + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_esBanco))))     + ') ';
    If _esFlete then
      TextSql1 := TextSql1 + 'OR (' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esFlete     + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_esFlete))))     + ') ';
    If TextSql1[1] = 'O' then
      TextSql1 := Copy(TextSql1, 3, length(TextSql1) - 2);
    TextSql1 := 'and (' + TextSql1;
    TextSql1 := TextSql1 + ' )';
  end;
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, TextSql + TextSql1));
end;

constructor TEmpresaList.CreateByGrupoDeVendedores(_G: TGrupoDeVendedor);
  Function WhereString: String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + '=' + IntToStr(_G.ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString ));
end;

constructor TEmpresaList.CreateByJurisdiccionDeIngresosBrutos(_J: TJurisdiccionIngresosBrutos);
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._JurisdiccionDeIngresosBRutosID + '=' + IntToStr(_J.ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString));
end;

constructor TEmpresaList.CreateByLocalidad(_L: TLocalidad);
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._localidadID + '=' + IntToStr(_L.ID);
  end;
begin
  inherited Create(TAbstractEmpresa,TAbstractEmpresaDM.CreateAll(False, WhereString));
end;

constructor TEmpresaList.CreateFletes;
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esFlete + '=1';
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString, True));
end;

constructor TEmpresaList.CreateFletesByCodigoLike(_C: string);
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esFlete + ' = 1'
              + ' and lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ') like ' + QuotedStr(lowerCase(_C) + '%');
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString, True));
end;

constructor TEmpresaList.CreateFletesByDescripcionLike(_D: string);
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esFlete + ' = 1'
              + ' and lower(' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ') like ' + QuotedStr(lowerCase(_D) + '%');
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString, True));
end;

Function TEmpresaList.WhereForVendedor: String;
begin
  Result := ' ('+TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM.ID_FieldName + ' from ' + TGrupoDeVendedorDM.TableName;
  Result := Result + ' Where ' + TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._VisualizacionGeneral + '=1'+ ')) or';
  Result := Result + ' ('+TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' in (Select ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorDM.ID_FieldName + ' from ' + TGrupoDeVendedorItemDM.TableName;
  Result := Result + ' Where ' + TGrupoDeVendedorItemDM.TableName + '.' + TGrupoDeVendedorItemDM._VendedorID + '=' + IntToStr(Aplicacion.Usuario.VendedorID) + '))';
end;

constructor TEmpresaList.CreateBancos;
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esBanco + ' = 1';
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString, True));
end;

constructor TEmpresaList.CreateByCodigoDeBancoYIDDiferente(_CodBanco: string; _ID: TObjectID);
  Function GetSelect(_CodBanco: String; _ID: TObjectID): String;
  Begin
    Result := 'upper(' +   TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._CodigoDeBanco + ')=';
    Result := Result + QuotedStr(UpperCase(_CodBanco));
    Result := Result + ' and ' +   TAbstractEmpresaDM.TableName + '.' +   TAbstractEmpresaDM.ID_FieldName + '<>' + IntToStr(_ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, GetSelect(_CodBanco, _ID)));
end;

constructor TEmpresaList.CreateByTipoEmpresaYCodigoLike(_Cliente, _Proveedor, _EmpresaPropia: Boolean; _cod: string);
  Function WhereString : String;
  begin
    Result :=     TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo      + '=' + QuotedStr(_cod)
    + ' and '   + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esCliente   + '=' + IntToStr(Abs(StrToInt(BoolToStr(_Cliente))))
    + ' or '    + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esProveedor + '=' + IntToStr(Abs(StrToInt(BoolToStr(_Proveedor))))
    + ' or '    + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName+  '=' + IntToStr(Aplicacion.Empresa.ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString));
end;

constructor TEmpresaList.CreateByZonaDeCliente(_Z: TZonaDeCliente);
  Function WhereString : String;
  begin
    Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._ZonaDeClienteID + '=' + IntToStr(_Z.ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll(False, WhereString));
end;

Constructor TEmpresaList.CreateByTipoEmpresa(_Cliente, _Proveedor, _EmpresaPropia: Boolean);
  Function WhereString : String;
  begin
    if not _Cliente and not _Proveedor and _EmpresaPropia then
      Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' = ' + IntToStr(Aplicacion.Empresa.ID)
    else
      Result := TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esCliente + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_Cliente))))
                + ' or ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esProveedor + ' = ' + IntToStr(Abs(StrToInt(BoolToStr(_Proveedor))))
                + ' or ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' = ' + IntToStr(Aplicacion.Empresa.ID);
  end;
begin
  inherited Create(TAbstractEmpresa, TAbstractEmpresaDM.CreateAll( False, WhereString ))
end;

{ TCategoriaDeCliente }
constructor TCategoriaDeCliente.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeClienteDM);
  FTipoDeformularioID            := NullID;
  FTipoDeFormulario              := Nil;
  FTipoDePedidoDeVenta           := Nil;
  FTipoDePedidoDeVentaID         := NullID;
  FCodigoSifab                   := Null;
  FColorDeHojaDeRutaID           := NullID;
  FColorDeHojaDeRuta             := Nil;
  FConceptoContableFacturacionID := NullID;
  FConceptoContableFacturacion   := Nil;
end;

function TCategoriaDeCliente.GetColorDeHojaDeRuta: TColorDeHojaDeRuta;
begin
  if not assigned(FColorDeHojaDeRuta) then
    GetObject(TColorDeHojaDeRuta, FColorDeHojaDeRuta, ColorDeHojaDeRutaID);

  Result := TColorDeHojaDeRuta(FColorDeHojaDeRuta);
end;

function TCategoriaDeCliente.GetConceptoContableFacturacion: TCuentaContable;
begin
  if not assigned(FConceptoContableFacturacion) then
    GetObject(TCuentaContable, FConceptoContableFacturacion, ConceptoContableFacturacionID);
  Result := TCuentaContable(FConceptoContableFacturacion);
end;

function TCategoriaDeCliente.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, TipoDeformularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

function TCategoriaDeCliente.GetTipoDePedidoDeVenta: TTipoDePedidoDeVenta;
begin
  if not assigned(FTipoDePedidoDeVenta) then
    GetObject(TTipoDePedidoDeVenta, FTipoDePedidoDeVenta, TipoDePedidoDeVentaID);

  Result := TTipoDePedidoDeVenta(FTipoDePedidoDeVenta);
end;



procedure TCategoriaDeCliente.SetColorDeHojaDeRutaID(const Value: TObjectID);
begin
  if (Value <> FColorDeHojaDeRutaID) and assigned(FColorDeHojaDeRuta) then
    FreeAndNil(FColorDeHojaDeRuta);

  FColorDeHojaDeRutaID := Value;
end;

procedure TCategoriaDeCliente.SetConceptoContableFacturacionID(const Value: TObjectID);
begin
  if assigned( FConceptoContableFacturacion ) and ( FConceptoContableFacturacionID <> Value )  then
    FreeAndNil(FConceptoContableFacturacion);
  FConceptoContableFacturacionID := Value;
end;

procedure TCategoriaDeCliente.SetTipoDeFormularioID(const Value: TObjectID);
begin

  if (Value <> FTipoDeformularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);

  FTipoDeformularioID := Value;
end;

procedure TCategoriaDeCliente.SetTipoDePedidoDeVentaID(const Value: TObjectID);
begin
  if (Value <> FTipoDePedidoDeVentaID) and assigned(FTipoDePedidoDeVenta) then
    FreeAndNil(FTipoDePedidoDeVenta);

  FTipoDePedidoDeVentaID := Value;
end;

{ TCategoriaDeClienteDM }
class function TCategoriaDeClienteDM.TableName: string;
begin
  Result := 'CategoriasDeCliente';
end;

class function TCategoriaDeClienteDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCategoriaDeClienteDM.ID_FieldName: string;
begin
  Result := 'CategoriaDeClienteID';
end;

procedure TCategoriaDeClienteDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeCliente(PDObject) do
  begin
    BooleanField[_EsInactivo]            := EsInactivo;
    IDField[_TipoDeformularioID]         := TipoDeformularioID;
    StringField[_Descripcion]            := Descripcion;
    IDField[_TipoDePedidoDeVentaID]      := TipoDePedidoDeVentaID;
    StringField[_CodigoSifab]            := CodigoSifab;
    IDField[_ConceptoContableFacturacionID]:= ConceptoContableFacturacionID;
    IDField[_ColorDeHojaDeRutaID]        := ColorDeHojaDeRutaID;
    BooleanField[_EsExportacion]         := EsExportacion;
  end;
end;

procedure TCategoriaDeClienteDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeCliente(PDObject) do
  begin
    FEsInactivo            := BooleanField[_EsInactivo];
    FTipoDeformularioID    := IDField[_TipoDeformularioID];
    Descripcion            := StringField[_Descripcion];
    FTipoDePedidoDeVentaID := IDField[_TipoDePedidoDeVentaID];
    FCodigoSifab           := StringField[_CodigoSifab];
    FConceptoContableFacturacionID := IDField[_ConceptoContableFacturacionID];
    FColorDeHojaDeRutaID   := IDField[_ColorDeHojaDeRutaID];
    FEsExportacion         := BooleanField[_EsExportacion];
  end;
end;

{ TCategoriaDeClienteList }
function TCategoriaDeClienteList.GetActual: TCategoriaDeCliente;
begin
  Result := TCategoriaDeCliente(CurrentObject);
end;

function TCategoriaDeClienteList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeCliente.Create;
end;

function TCategoriaDeClienteList.Find(_Descripcion: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.Descripcion) = lowerCase(_Descripcion));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCategoriaDeClienteList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCategoriaDeCliente, TCategoriaDeClienteDM.CreateAll(False, '', _SoloActivos));
end;

{ TCategoriaDeProveedor }
constructor TCategoriaDeProveedor.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeProveedorDM);
end;

function TCategoriaDeProveedor.GetCuentaContable: TCuentaContable;
begin
  if not Assigned(FCuentaContable) then
    GetObject(TCuentaContable, FCuentaContable, CuentaContableID);
  Result := TCuentaContable(FCuentaContable);
end;

procedure TCategoriaDeProveedor.SetCuentaContableID(const Value: TObjectID);
begin
  if (Value <> FCuentaContableID) and assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);
  FCuentaContableID := Value;
end;

{ TCategoriaDeProveedorDM }
class function TCategoriaDeProveedorDM.TableName: string;
begin
  Result := 'CategoriasDeProveedor';
end;

class function TCategoriaDeProveedorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCategoriaDeProveedorDM.ID_FieldName: string;
begin
  Result := 'CategoriaDeProveedorID';
end;

procedure TCategoriaDeProveedorDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeProveedor(PDObject) do
  begin
    BooleanField[_EsInactivo]       := FEsInactivo;
    IntegerField[_CuentaContableID] := FCuentaContableID;
    StringField[_Descripcion]       := Descripcion;
  end;
end;

procedure TCategoriaDeProveedorDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeProveedor(PDObject) do
  begin
    EsInactivo       := BooleanField[_EsInactivo];
    CuentaContableID := IntegerField[_CuentaContableID];
    Descripcion      := StringField[_Descripcion];
  end;
end;

{ TCategoriaDeProveedorList }
function TCategoriaDeProveedorList.GetActual: TCategoriaDeProveedor;
begin
  Result := TCategoriaDeProveedor(CurrentObject);
end;

function TCategoriaDeProveedorList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeProveedor.Create;
end;

constructor TCategoriaDeProveedorList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCategoriaDeProveedor, TCategoriaDeProveedorDM.CreateAll(False, '',_SoloActivos));
end;

{ TCategoriaDeGanancias }
constructor TCategoriaDeGanancias.Create;
begin
  inherited;
  DMObject         := Aplicacion.DMProvider.GetGlobalDM(TCategoriaDeGananciasDM);
  FImporteNoSujeto := Null;
end;

procedure TCategoriaDeGanancias.Delete;
begin
  If (CategoriaDeGananciasItem.Count > 0) then
  Begin
    If (aplicacion.Mensaje('Esta categoria de ganancias contiene Items asignados. Se eliminaran todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
      CategoriaDeGananciasItem.DeleteAll
    else
      Abort;
  End;
  Inherited;
end;

function TCategoriaDeGanancias.GetCategoriaDeGananciasItem : TCategoriaDeGananciasItemList;
begin
  If not assigned(FCategoriaDeGananciasItems) Then
    GetList(TPDList(FCategoriaDeGananciasItems), TPDList(TCategoriaDeGananciasItemList.CreateByCategoria(self)));
  Result := TCategoriaDeGananciasItemList(FCategoriaDeGananciasItems);
end;

procedure TCategoriaDeGanancias.GetImporteNoSujeto(const Value: TReal);
begin

  FImporteNoSujeto := Value;
end;

procedure TCategoriaDeGanancias.SetCategoriaDeGananciasItemsID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeGananciasItemsID) and assigned
    (FCategoriaDeGananciasItems) then
    FreeAndNil(FCategoriaDeGananciasItems);

  FCategoriaDeGananciasItemsID := Value;
end;

{ TCategoriaDeGananciasDM }
class function TCategoriaDeGananciasDM.TableName: string;
begin
  Result := 'categoriasdeganancias';
end;

class function TCategoriaDeGananciasDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCategoriaDeGananciasDM.ID_FieldName: string;
begin
  Result := 'CategoriaDeGananciasID';
end;

procedure TCategoriaDeGananciasDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeGanancias(PDObject) do
  begin
    StringField[_Descripcion]    := Descripcion;
    FloatField[_ImporteNoSujeto] := FImporteNoSujeto;
    BooleanField[_EsInactivo]    := EsInactivo;
  end;
end;

procedure TCategoriaDeGananciasDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeGanancias(PDObject) do
  begin
    Descripcion      := StringField[_Descripcion];
    FImporteNoSujeto := FloatField[_ImporteNoSujeto];
    EsInactivo       := BooleanField[_EsInactivo];
  end;
end;

{ TCategoriaDeGananciasList }
function TCategoriaDeGananciasList.GetActual: TCategoriaDeGanancias;
begin
  Result := TCategoriaDeGanancias(CurrentObject);
end;

function TCategoriaDeGananciasList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeGanancias.Create;
end;

constructor TCategoriaDeGananciasList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCategoriaDeGanancias, TCategoriaDeGananciasDM.CreateAll(false, '',_SoloActivos));
end;


{ TRankingCrediticio }
constructor TRankingCrediticio.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TRankingCrediticioDM);
  FConfeccionaFactura := null;
  FConfeccionaPedido := null;
  FConfeccionaRemito := null;
  FesContraEntrega := null;
end;


{ TRankingCrediticioDM }
class function TRankingCrediticioDM.TableName: string;
begin
  Result := 'rankingscrediticios';
end;

class function TRankingCrediticioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TRankingCrediticioDM.ID_FieldName: string;
begin
  Result := 'RankingCrediticioID';
end;

procedure TRankingCrediticioDM.PopulateFields(PDObject: TPDObject);
begin
  with TRankingCrediticio(PDObject) do
  begin
    StringField[_Descripcion]        := Descripcion;
    BooleanField[_ConfeccionaFactura]:= ConfeccionaFactura;
    BooleanField[_ConfeccionaRemito] := ConfeccionaRemito;
    BooleanField[_ConfeccionaPedido] := ConfeccionaPedido;
    BooleanField[_EsContraEntrega]   := esContraEntrega;
    BooleanField[_EsInactivo]        := EsInactivo;
  end;
end;

procedure TRankingCrediticioDM.PopulateObject(PDObject: TPDObject);
begin
  with TRankingCrediticio(PDObject) do
  begin
    Descripcion        := StringField[_Descripcion];
    ConfeccionaFactura := BooleanField[_ConfeccionaFactura];
    ConfeccionaPedido  := BooleanField[_ConfeccionaPedido];
    ConfeccionaRemito  := BooleanField[_ConfeccionaRemito];
    esContraEntrega    := BooleanField[_EsContraEntrega];
    EsInactivo         := BooleanField[_EsInactivo];
  end;
end;

{ TRankingCrediticioList }
function TRankingCrediticioList.GetActual: TRankingCrediticio;
begin
  Result := TRankingCrediticio(CurrentObject);
end;

function TRankingCrediticioList.CreateNewObject: TPDObject;
begin
  Result := TRankingCrediticio.Create;
end;

constructor TRankingCrediticioList.CreateAll( _soloActivos: Boolean );
begin
  inherited Create(TRankingCrediticio, TRankingCrediticioDM.CreateAll( false, '', _soloActivos ));
end;

{ TTipoDeComponente }

procedure TTipoDeComponente.Delete;
var
  AL: TArticuloList;
  texto: TString;
  N: TEntero;
  TCTDL: TTerminacionComponenteTerminacionDefaultList;
  T: TTerminacion;
begin
  AL := TArticuloList.CreateByTipoDeComponente(self);
  N := 0;

  if AL.Count > 0 then
  begin
    AL.First;
    texto := 'El tipo de componente está siendo usado en ' + IntToStr(AL.Count)
      + ' articulo/s.' + #13#10;
    while not AL.IsLast and (N < 10) do
    begin
      texto := texto + #13#10 + AL.Actual.codigo;
      N := N + 1;
      AL.next;
    end;
    Aplicacion.RaiseExceptionCreate(texto);
  end;

  TCTDL := TTerminacionComponenteTerminacionDefaultList.CreateByTipoDeComponente
    (self);
  N := 0;
  if TCTDL.Count > 0 then
  begin
    T := TTerminacion.Create;
    TCTDL.First;
    texto := 'El tipo de componente está siendo usado en ' + IntToStr
      (TCTDL.Count) + ' terminaciones default de componentes.' + #13#10;
    while not TCTDL.IsLast and (N < 10) do
    begin
      T.Load(TCTDL.Actual.terminacionID);
      texto := texto + #13#10 + T.codigo;
      N := N + 1;
      TCTDL.next;
    end;
    texto := texto + #13#10 + #13#10 + '¿Está seguro de querer eliminarlo?';

    If (aplicacion.Mensaje(texto, 'Atencion', MB_YESNO) = ID_YES) then
      TCTDL.DeleteAll
    else
      Abort;

    T.NilObject;
  end;

  inherited;
end;

function TTipoDeComponente.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeComponenteList;
end;

function TTipoDeComponente.GetTraducciones: TTipoDeComponenteTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TTipoDeComponenteTraduccionList.CreateByTipoDeComponente(self)));
  Result := TTipoDeComponenteTraduccionList(FTraducciones);
end;

//procedure TTipoDeComponente.GuardarEnSifab(_CodigoRotulo, _CodigoEmpresa: Integer);
//  procedure AsignarDatos;
//    function ultimoNumero: Integer;
//    begin
//      Result := 0;
//      try
//        aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text :='SELECT TOP 1 codigoInternoItem FROM TablaEmpresaItem ORDER BY codigoInternoItem DESC';
//        aplicacion.sesion.ConexionSifab.SqlQuery.Open;
//        aplicacion.sesion.ConexionSifab.SqlQuery.First;
//        if (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
//          Result := aplicacion.sesion.ConexionSifab.SqlQuery.FieldByName('codigoInternoItem').Value;
//      finally
//        aplicacion.sesion.ConexionSifab.SqlQuery.Close;
//      end;
//    end;
//
//  begin
//    try
//      try
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.Active := True;
//        aplicacion.sesion.ConexionSifab.StartTransaction;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.Append;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('codigoInternoItem').Value := ultimoNumero + 1;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('codigoItem').AsString := codigo;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('codigoTablaEmpresa').Value := _CodigoRotulo;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('codigoInternoEmpresa').Value := _CodigoEmpresa;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('descripcion').AsString := Descripcion;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('atributo').Value := '';
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.FieldByName('habilitado').Value := 1;
//        aplicacion.sesion.ConexionSifab.TablaEmpresaItem.Post;
//        aplicacion.sesion.ConexionSifab.Commit;
//      Except
//        aplicacion.sesion.ConexionSifab.Rollback;
//      end;
//    finally
//      aplicacion.sesion.ConexionSifab.TablaEmpresaItem.Active := False;
//    end;
//  end;
//
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//
//  if FaltaEnSifab(_CodigoRotulo, _CodigoEmpresa) then
//    AsignarDatos;
//end;
//
//function TTipoDeComponente.FaltaEnSifab(_Rotulo, _CodigoEmpresa: Integer): Boolean;
//begin
//  if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
//    aplicacion.sesion.ConexionSifab.SqlQuery.Close;
//  try
//    Result := True;
//    aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'SELECT * FROM TablaEmpresaItem where codigoTablaEmpresa = ' + IntToStr(_Rotulo) + ' and codigoItem= ' + quotedstr(self.codigo)+ ' and CodigoInternoEmpresa = ' + IntToStr(_CodigoEmpresa);
//    aplicacion.sesion.ConexionSifab.SqlQuery.Open;
//    Result := (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount = 0);
//  finally
//    aplicacion.sesion.ConexionSifab.SqlQuery.Close;
//  end;
//end;

procedure TTipoDeComponente.SetDescripcionComercial(const Value: TString);
begin
  FdescripcionComercial := uppercase(Value);
end;

constructor TTipoDeComponente.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeComponenteDM);
  FFiguraEnCodigoDeFabricado := True;
  FAsumeElPrecioDelCunio     := True;
end;

{ TTipoDeComponenteDM }
class function TTipoDeComponenteDM.TableName: string;
begin
  Result := 'TiposDeComponente';
end;

class function TTipoDeComponenteDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeComponenteDM.ID_FieldName: string;
begin
  Result := 'TipoDeComponenteID';
end;

procedure TTipoDeComponenteDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeComponente(PDObject) do
  begin
    StringField[_Codigo]                     := Codigo;
    StringField[_Descripcion]                := Descripcion;
    StringField[_DescripcionComercial]       := DescripcionComercial;
    BooleanField[_FiguraEnCodigoDeFabricado] := FiguraEnCodigoDeFabricado;
    BooleanField[_EsVendible]                := EsVendible;
    BooleanField[_EsOpcional]                := EsOpcional;
    BooleanField[_LlevaCunio]                := LlevaCunio;
    BooleanField[_AsumeElprecioDelCunio]     := AsumeElprecioDelCunio;
    BooleanField[_EsInactivo]                := EsInactivo;
  end;
end;

procedure TTipoDeComponenteDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeComponente(PDObject) do
  begin
    FCodigo                    := StringField[_Codigo];
    FDescripcion               := StringField[_Descripcion];
    FDescripcionComercial      := StringField[_DescripcionComercial];
    FFiguraEnCodigoDeFabricado := BooleanField[_FiguraEnCodigoDeFabricado];
    FEsVendible                := BooleanField[_EsVendible];
    FEsOpcional                := BooleanField[_EsOpcional];
    FLlevaCunio                := BooleanField[_LlevaCunio];
    FEsInactivo                := BooleanField[_EsInactivo];
    FAsumeElprecioDelCunio     := BooleanField[_AsumeElprecioDelCunio];
  end;
end;

{ TTipoDeComponenteList }
function TTipoDeComponenteList.GetActual: TTipoDeComponente;
begin
  Result := TTipoDeComponente(CurrentObject);
end;

function TTipoDeComponenteList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeComponente.Create;
end;

constructor TTipoDeComponenteList.CreateAll( _soloActivos: Boolean );
begin
  inherited Create(TTipoDeComponente, TTipoDeComponenteDM.CreateAll( false, '', _soloActivos ));
end;

constructor TTipoDeComponenteList.CreateByLlevaCunio( _soloActivos: Boolean );
  Function WhereString: String;
  begin
    Result := '(' + TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._llevaCunio + ' = 1)';
  end;
begin
  inherited Create(TTipoDeComponente, TTipoDeComponenteDM.CreateAll( false, WhereString, _soloActivos, TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._Codigo ));
end;

constructor TTipoDeComponenteList.CreateByNoFiguraEnCodigo(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._FiguraEnCodigoDeFabricado + ' = 0)';
  end;
begin
  inherited Create(TTipoDeComponente, TTipoDeComponenteDM.CreateAll( false, WhereString, _soloActivos, TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._Codigo ));
end;

constructor TTipoDeComponenteList.CreateByVendibles( _soloActivos: Boolean );
  Function WhereString: String;
  begin
    Result := '(' + TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._esVendible + ' = 1)';
  end;
begin
  inherited Create(TTipoDeComponente, TTipoDeComponenteDM.CreateAll( false, WhereString, _soloActivos ));
end;

{ TTipoDeCosto }
constructor TTipoDeCosto.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeCostoDM);
  FFormulaID := NullID;
  FFormula   := Nil;
end;

function TTipoDeCosto.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeCostoList;
end;

function TTipoDeCosto.GetFormula: TFormula;
begin
  if not assigned(FFormula) then
    GetObject(TFormula, FFormula, FormulaID);
  Result := TFormula(FFormula);
end;

{ TTipoDeCostoDM }
class function TTipoDeCostoDM.TableName: string;
begin
  Result := 'TiposDeCosto';
end;

class function TTipoDeCostoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeCostoDM.ID_FieldName: string;
begin
  Result := 'TipoDeCostoID';
end;

procedure TTipoDeCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeCosto(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
    IDField[_FormulaID]       := FFormulaID;
  end;
end;

procedure TTipoDeCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeCosto(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
    FFormulaID  := IDField[_FormulaID];
  end;
end;

{ TTipoDeCostoList }
function TTipoDeCostoList.GetActual: TTipoDeCosto;
begin
  Result := TTipoDeCosto(CurrentObject);
end;

function TTipoDeCostoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeCosto.Create;
end;

constructor TTipoDeCostoList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TTipoDeCosto, TTipoDeCostoDM.CreateAll( false, '',_SoloActivos));
end;

{ TCategoriaDeMateriaPrima }
function TCategoriaDeMateriaPrima.GetCuentaContableDepositoMP: TCuentaContable;
begin
  if not Assigned(FCuentaContableDepositoMP) then
    GetObject(TCuentaContable, FCuentaContableDepositoMP, FCuentaContableDepositoMPID);
  Result := TCuentaContable(FCuentaContableDepositoMP);
end;

function TCategoriaDeMateriaPrima.GetCuentaContableDepositoMPSector: TCuentaContable;
begin
  if not Assigned(FCuentaContableDepositoMPSector) then
    GetObject(TCuentaContable, FCuentaContableDepositoMPSector, FCuentaContableDepositoMPSectorID);
  Result := TCuentaContable(FCuentaContableDepositoMPSector);
end;

function TCategoriaDeMateriaPrima.GetCuentaContableHojaDeRuta: TCuentaContable;
begin
  if not Assigned(FCuentaContableHojaDeRuta) then
    GetObject(TCuentaContable, FCuentaContableHojaDeRuta, FCuentaContableHojaDeRutaID);
  Result := TCuentaContable(FCuentaContableHojaDeRuta);
end;

function TCategoriaDeMateriaPrima.GetCuentaContableStockSemi: TCuentaContable;
begin
  if not Assigned(FCuentaContableStockSemi) then
    GetObject(TCuentaContable, FCuentaContableStockSemi, FCuentaContableStockSemiID);
  Result := TCuentaContable(FCuentaContableStockSemi);
end;

function TCategoriaDeMateriaPrima.GetDescriptibleAbreviadoListClass;
begin
  Result := TCategoriaDeMateriaPrimaList;
end;

function TCategoriaDeMateriaPrima.GetFormula: TFormula;
begin
  if not Assigned(FFormula) then
    GetObject(TFormula, FFormula, FFormulaID);
  Result := TFormula(FFormula);
end;

function TCategoriaDeMateriaPrima.GetMaterialesPosibles: TCategoriaDeMateriaPrimaMaterialList;
begin
  if not assigned(FMaterialesPosibles) then
    GetList(TPDList(FMaterialesPosibles), TPDList(TCategoriaDeMateriaPrimaMaterialList.CreateByCategoriaDeMateriaPrima(self)));
  Result := FMaterialesPosibles;
end;

procedure TCategoriaDeMateriaPrima.SetCuentaContableDepositoMPID(const Value: TObjectID);
begin
  if (Value <> FCuentaContableDepositoMPID) and Assigned(FCuentaContableDepositoMP) then
    FreeAndNil(FCuentaContableDepositoMP);
  FCuentaContableDepositoMPID := Value;
end;

procedure TCategoriaDeMateriaPrima.SetCuentaContableDepositoMPSectorID(const Value: TObjectID);
begin
  if (Value <> FCuentaContableDepositoMPSectorID) and Assigned(FCuentaContableDepositoMPSector) then
    FreeAndNil(FCuentaContableDepositoMPSector);
  FCuentaContableDepositoMPSectorID := Value;
end;

procedure TCategoriaDeMateriaPrima.SetCuentaContableHojaDeRutaID(const Value: TObjectID);
begin
  if (Value <> FCuentaContableHojaDeRutaID) and Assigned(FCuentaContableHojaDeRuta) then
    FreeAndNil(FCuentaContableHojaDeRuta);
  FCuentaContableHojaDeRutaID := Value;
end;

procedure TCategoriaDeMateriaPrima.SetCuentaContableStockSemiID(const Value: TObjectID);
begin
  if (Value <> FCuentaContableStockSemiID) and Assigned(FCuentaContableStockSemi) then
    FreeAndNil(FCuentaContableStockSemi);
  FCuentaContableStockSemiID := Value;
end;

procedure TCategoriaDeMateriaPrima.SetFormulaID(const Value: TObjectID);
begin
  if (Value <> FFormulaID) and Assigned(FFormula) then
    FreeAndNil(FFormula);
  FFormulaID := Value;
end;

constructor TCategoriaDeMateriaPrima.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeMateriaPrimaDM);
end;

{ TCategoriaDeMateriaPrimaDM }
class function TCategoriaDeMateriaPrimaDM.TableName: string;
begin
  Result := 'CategoriasDeMateriaPrima';
end;

class function TCategoriaDeMateriaPrimaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCategoriaDeMateriaPrimaDM.ID_FieldName: string;
begin
  Result := 'CategoriaDeMateriaPrimaID';
end;

procedure TCategoriaDeMateriaPrimaDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeMateriaPrima(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    StringField[_Codigo]      := Codigo;
    IDField[_FormulaID]       := FFormulaID;
    BooleanField[_EsInactivo] := EsInactivo;
    IDField[_CuentaContableDepositoMPID]        := FCuentaContableDepositoMPID;
    IDField[_CuentaContableDepositoMPSectorID]  := FCuentaContableDepositoMPSectorID;
    IDField[_CuentaContableHojaDeRutaID]        := FCuentaContableHojaDeRutaID;
    IDField[_CuentaContableStockSemiID]         := FCuentaContableStockSemiID;
    BooleanField[_TieneAncho]                   := FTieneAncho;
    BooleanField[_TieneLongitud]                := FTieneLongitud;
    BooleanField[_TieneDiametro]                := FTieneDiametro;
    BooleanField[_TieneEspesor]                 := FTieneEspesor;
    BooleanField[_TienePeso]                    := FTienePeso;
    BooleanField[_EsInyectado]                  := FEsInyectado;
  end;
end;

procedure TCategoriaDeMateriaPrimaDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeMateriaPrima(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    Fcodigo      := StringField[_Codigo];
    FFormulaID   := IDField[_FormulaID];
    EsInactivo   := BooleanField[_EsInactivo];
    FCuentaContableDepositoMPID       := IDField[_CuentaContableDepositoMPID];
    FCuentaContableDepositoMPSectorID := IDField[_CuentaContableDepositoMPSectorID];
    FCuentaContableHojaDeRutaID       := IDField[_CuentaContableHojaDeRutaID];
    FCuentaContableStockSemiID        := IDField[_CuentaContableStockSemiID];
    FTieneAncho                       := BooleanField[_TieneAncho];
    FTieneLongitud                    := BooleanField[_TieneLongitud];
    FTieneDiametro                    := BooleanField[_TieneDiametro];
    FTieneEspesor                     := BooleanField[_TieneEspesor];
    FTienePeso                        := BooleanField[_TienePeso];
    FEsInyectado                      := BooleanField[_EsInyectado];
  end;
end;

{ TCategoriaDeMateriaPrimaList }
function TCategoriaDeMateriaPrimaList.GetActual: TCategoriaDeMateriaPrima;
begin
  Result := TCategoriaDeMateriaPrima(CurrentObject);
end;

function TCategoriaDeMateriaPrimaList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeMateriaPrima.Create;
end;

constructor TCategoriaDeMateriaPrimaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCategoriaDeMateriaPrima, TCategoriaDeMateriaPrimaDM.CreateAll(False, '',_SoloActivos));
end;

 { TCategoriaDeMateriaPrimaMaterial }
constructor TCategoriaDeMateriaPrimaMaterial.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCategoriaDeMateriaPrimaMaterialDM);
  SaveSQLLog := True;
end;

function TCategoriaDeMateriaPrimaMaterial.GetCategoriaDeMateriaPrima : TCategoriaDeMateriaPrima;
begin
  if not assigned(FCategoriaDeMateriaPrima) then
    GetObject(TCategoriaDeMateriaPrima,FCategoriaDeMateriaPrima,CategoriaDeMateriaPrimaID);
  result := TCategoriaDeMateriaPrima(FCategoriaDeMateriaPrima);
end;

procedure TCategoriaDeMateriaPrimaMaterial.SetCategoriaDeMateriaPrimaID(Value : TObjectID);
begin
  if (Value<>FCategoriaDeMateriaPrimaID) and Assigned(FCategoriaDeMateriaPrima) then
    FreeAndNil(FCategoriaDeMateriaPrima);
  FCategoriaDeMateriaPrimaID := Value;
end;

function TCategoriaDeMateriaPrimaMaterial.GetMaterial : TMaterial;
begin
  if not assigned(FMaterial) then
    GetObject(TMaterial,FMaterial,MaterialID);
  result := TMaterial(FMaterial);
end;

procedure TCategoriaDeMateriaPrimaMaterial.SetMaterialID(Value : TObjectID);
begin
  if (Value<>FMaterialID) and Assigned(FMaterial) then
    FreeAndNil(FMaterial);
  FMaterialID := Value;
end;
 { TCategoriaDeMateriaPrimaMaterialDM }
class function TCategoriaDeMateriaPrimaMaterialDM.TableName : string;
begin
  result := 'CategoriaDeMateriaPrimaMateriales';
end;


class function TCategoriaDeMateriaPrimaMaterialDM.ID_FieldName : string;
begin
  result := 'CategoriaDeMateriaPrimaMaterialID';
end;


procedure TCategoriaDeMateriaPrimaMaterialDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeMateriaPrimaMaterial(PDObject) do
    begin
      IDField[_CategoriaDeMateriaPrimaID] := CategoriaDeMateriaPrimaID;
      IDField[_MaterialID]                := MaterialID;
    end;
end;


procedure TCategoriaDeMateriaPrimaMaterialDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeMateriaPrimaMaterial(PDObject) do
    begin
      FCategoriaDeMateriaPrimaID := IDField[_CategoriaDeMateriaPrimaID];
      FMaterialID                := IDField[_MaterialID];
    end;
end;

 { TCategoriaDeMateriaPrimaMaterialList }
function TCategoriaDeMateriaPrimaMaterialList.GetActual : TCategoriaDeMateriaPrimaMaterial;
begin
  result := TCategoriaDeMateriaPrimaMaterial(CurrentObject);
end;

constructor TCategoriaDeMateriaPrimaMaterialList.CreateByCategoriaDeMateriaPrima(_C: TCategoriaDeMateriaPrima; _SoloActivos : Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TCategoriaDeMateriaPrimaMaterialDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr( _C.ID )  +')';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCategoriaDeMateriaPrimaMaterial,TCategoriaDeMateriaPrimaMaterialDM.CreateAll(False, WhereString, _SoloActivos, OrderByString ));
end;

function TCategoriaDeMateriaPrimaMaterialList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeMateriaPrimaMaterial.Create;
end;

constructor TCategoriaDeMateriaPrimaMaterialList.CreateAll (_SoloActivos : Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCategoriaDeMateriaPrimaMaterial,TCategoriaDeMateriaPrimaMaterialDM.CreateAll(False, WhereString, _SoloActivos, OrderByString ));
end;

{ TTerminacionProcesoPosibleTipoDeCosto }
procedure TTerminacionProcesoPosibleTipodeCosto.AutomatizarCostoEnProcesosDeTerminacionesEnCategorias;
var
  CTPPL: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList;
  C    : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto;
begin
  try
    CTPPL := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionProcesoPosible(self.terminacionProcesoPosible);
    if (CTPPL.Count > 0) then
    begin
      CTPPL.First;
      repeat
        C := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.Create;
        C.OnBeforeInsert := nil;
        C.MonedaID := aplicacion.MonedaCostosDefault.ID;
        C.Costo := 0;
        C.CatDeTermsPosiblesTermPosProcPosEspecifID := CTPPL.Actual.ID;
        C.FEspecificacionTipoDeCostoID := self.ID;
        C.Save;
        FreeAndNil(C);
        CTPPL.next;
      until CTPPL.IsLast;
      CTPPL.First;
    end;
  finally
    FreeAndNil(CTPPL);
  end;
end;

constructor TTerminacionProcesoPosibleTipodeCosto.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTerminacionProcesoPosibleTipoDeCostoDM);
end;

procedure TTerminacionProcesoPosibleTipodeCosto.Delete;
Var
  ATPPPCL:
    TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList;
begin
  Try
    ATPPPCL :=
      TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList
      .CreateByCostoID(self.ID);

    If ATPPPCL.Count > 0 then
    begin
      if aplicacion.Mensaje(
        'El tipo de costo esta asignado a procesos de Terminaciones en "Categorias de Terminaciones". Se eliminaran ' + ' todas esas asociaciones. Prosigue ?', 'ATENCION', MB_YESNO) = ID_No then
      begin
        FreeAndNil(ATPPPCL);
        Abort;
        exit;
      end;
    end;

    ATPPPCL.First;
    repeat
      ATPPPCL.Actual.OnBeforeDelete := nil;
      ATPPPCL.next;
    until ATPPPCL.IsLast;
    ATPPPCL.DeleteAll;

  Finally
    if assigned(ATPPPCL) then
      FreeAndNil(ATPPPCL);
  end;

  inherited;
end;

function TTerminacionProcesoPosibleTipodeCosto.GetterminacionProcesoPosible
  : TTerminacionProcesoPosible;
begin
  if not assigned(FterminacionProcesoPosible) then
    GetObject(TTerminacionProcesoPosible, FterminacionProcesoPosible,
      terminacionProcesoPosibleID);

  Result := TTerminacionProcesoPosible(FterminacionProcesoPosible);

end;

function TTerminacionProcesoPosibleTipodeCosto.GetTipoDeCosto: TTipoDeCosto;
begin
  if not assigned(FTipoDeCosto) then
    GetObject(TTipoDeCosto, FTipoDeCosto, TipoDeCostoID);

  Result := TTipoDeCosto(FTipoDeCosto);
end;

function TTerminacionProcesoPosibleTipodeCosto.Save: Boolean;
var
  DeboAutomatizarEnProcesosDeTerminacionesEnCategorias: Boolean;
begin
  DeboAutomatizarEnProcesosDeTerminacionesEnCategorias := not isAssigned;

  Result := inherited Save;

  if DeboAutomatizarEnProcesosDeTerminacionesEnCategorias then
    AutomatizarCostoEnProcesosDeTerminacionesEnCategorias;

end;

procedure TTerminacionProcesoPosibleTipodeCosto.SetterminacionProcesoPosibleID
  (const Value: TObjectID);
begin
  if (Value <> FterminacionProcesoPosibleID) and assigned
    (FterminacionProcesoPosible) then
    FreeAndNil(FterminacionProcesoPosible);

  FterminacionProcesoPosibleID := Value;
end;

procedure TTerminacionProcesoPosibleTipodeCosto.SetTipoDeCostoID
  (Value: TObjectID);
begin
  if (Value <> FTipoDeCostoID) and assigned(FTipoDeCosto) then
    FreeAndNil(FTipoDeCosto);

  FTipoDeCostoID := Value;

end;

{ TTerminacionProcesoPosibleTipoDeCostoDM }
class function TTerminacionProcesoPosibleTipoDeCostoDM.TableName: string;
begin
  Result := 'termProcPosibTiposDeCosto';
end;

class function TTerminacionProcesoPosibleTipoDeCostoDM.ID_FieldName: string;
begin
  Result := 'termProcPosibTipoDeCostoID';
end;

procedure TTerminacionProcesoPosibleTipoDeCostoDM.PopulateFields
  (PDObject: TPDObject);
begin
  with TTerminacionProcesoPosibleTipodeCosto(PDObject) do
  begin
    IDField[_TipoDeCostoID] := FTipoDeCostoID;
    IDField[_TermProcPosibleID] := FterminacionProcesoPosibleID;
  end;
end;

procedure TTerminacionProcesoPosibleTipoDeCostoDM.PopulateObject
  (PDObject: TPDObject);
begin
  with TTerminacionProcesoPosibleTipodeCosto(PDObject) do
  begin
    FTipoDeCostoID := IDField[_TipoDeCostoID];
    FterminacionProcesoPosibleID := IDField[_TermProcPosibleID];
  end;
end;

{ TTerminacionProcesoPosibleTipoDeCostoList }
function TTerminacionProcesoPosibleTipodeCostoList.GetActual
  : TTerminacionProcesoPosibleTipodeCosto;
begin
  Result := TTerminacionProcesoPosibleTipodeCosto(CurrentObject);
end;

function TTerminacionProcesoPosibleTipodeCostoList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionProcesoPosibleTipodeCosto.Create;
end;

constructor TTerminacionProcesoPosibleTipodeCostoList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TTerminacionProcesoPosibleTipodeCosto, TTerminacionProcesoPosibleTipoDeCostoDM.CreateAll( False, '',_SoloActivos));
end;

constructor TTerminacionProcesoPosibleTipodeCostoList.CreateByTerminacionProcesoPosible(_TPP: TTerminacionProcesoPosible; _SoloActivos: Boolean);
  Function WhereString: String;
  Begin
    Result := '( ' + TTerminacionProcesoPosibleTipoDeCostoDM.TableName + '.' + TTerminacionProcesoPosibleTipoDeCostoDM._TermProcPosibleID + ' = ' +  IntToStr(_TPP.ID)+')';
  End;
begin
  inherited Create(TTerminacionProcesoPosibleTipodeCosto, TTerminacionProcesoPosibleTipoDeCostoDM.CreateAll( False, WhereString,_SoloActivos));
end;

{ TTerminacionProcesoPosible }
constructor TTerminacionProcesoPosible.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TTerminacionProcesoPosibleDM);
  FUsaColor  := null;
end;

procedure TTerminacionProcesoPosible.SetprocesoID(Value: TObjectID);
begin
  if (Value <> FprocesoID) and assigned(Fproceso) then
  begin
    FreeAndNil(Fproceso);
    FUsaColor := null;
  end;
  FprocesoID := Value;
end;

function TTerminacionProcesoPosible.Getproceso: TProceso;
begin
  if not assigned(Fproceso) then
    GetObject(TProceso, Fproceso, procesoID);
  Result := TProceso(Fproceso);
end;

function TTerminacionProcesoPosible.GettiposdeCosto: TTerminacionProcesoPosibleTipodeCostoList;
begin
  If Not assigned(FtiposdeCosto) Then
    GetList(TPDList(FtiposdeCosto), TPDList(  TTerminacionProcesoPosibleTipodeCostoList.CreateByTerminacionProcesoPosible(self, False)));
  Result := TTerminacionProcesoPosibleTipodeCostoList(FtiposdeCosto);
end;

function TTerminacionProcesoPosible.getUsaColor: TBoolean;
begin
  If (FUsaColor = null) Then
    FUsaColor := proceso.PaletaDeColorID <> NullID;

  Result := FUsaColor;
end;

procedure TTerminacionProcesoPosible.Delete;
Var
  ATPPPL: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList;
begin
  Try
    ATPPPL :=
      TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList
      .CreateByTerminacionProcesoPosible(self);
    if ATPPPL.Count > 0 Then
    begin
      if aplicacion.Mensaje(
        'El proceso está asignado en una o mas terminaciones posibles en "Categorias de Terminaciones".'
          + 'Se eliminarán esas asociaciones. Prosigue ?', 'ATENCION',
        MB_YESNO) = ID_No then
      begin
        FreeAndNil(ATPPPL);
        Abort;
        exit;
      end;

      ATPPPL.DeleteAll;

    end;
  Finally
    FreeAndNil(ATPPPL);
  End;

  if self.tiposdeCosto.Count > 0 Then
    Aplicacion.RaiseExceptionCreate( 'Debe eliminar los costos asignados a este proceso antes de eliminarlo');

  inherited;
end;

{ TTerminacionProcesoPosibleDM }
class function TTerminacionProcesoPosibleDM.TableName: string;
begin
  Result := 'termProcPosibles';
end;

class function TTerminacionProcesoPosibleDM.ID_FieldName: string;
begin
  Result := 'TermProcPosibleID';
end;

procedure TTerminacionProcesoPosibleDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionProcesoPosible(PDObject) do
  begin
    IDField[_procesoID] := FprocesoID;
    IDField[_terminacionID] := FterminacionID;
  end;
end;

procedure TTerminacionProcesoPosibleDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionProcesoPosible(PDObject) do
  begin

    FprocesoID := IDField[_procesoID];
    FterminacionID := IDField[_terminacionID];
  end;
end;

{ TTerminacionProcesoPosibleList }
function TTerminacionProcesoPosibleList.GetActual: TTerminacionProcesoPosible;
begin
  Result := TTerminacionProcesoPosible(CurrentObject);
end;

function TTerminacionProcesoPosibleList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionProcesoPosible.Create;
end;

function TTerminacionProcesoPosibleList.Find(_P: TProceso): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.procesoID = _P.ID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TTerminacionProcesoPosibleList.FindCodigo(_cod: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.proceso.codigo) = lowerCase(_cod));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TTerminacionProcesoPosibleList.CreateAll;
begin
  inherited Create(TTerminacionProcesoPosible, TTerminacionProcesoPosibleDM.CreateAll(False));
end;

constructor TTerminacionProcesoPosibleList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString: String;
  Begin
    Result := '('+TTerminacionProcesoPosibleDM.TableName+'.'+ TTerminacionProcesoPosibleDM._terminacionID + ' = ' + IntToStr(_T.ID)+')';
  End;
begin
  inherited Create(TTerminacionProcesoPosible, TTerminacionProcesoPosibleDM.CreateAll( False, WhereString));
end;

constructor TTerminacionProcesoPosibleList.CreateByTerminacionYProceso(_T: TTerminacion; _P: TProceso);
  Function WhereString : String;
  begin
    Result := TTerminacionProcesoPosibleDM._TerminacionID + ' = ' + IntToStr(_T.ID) + ' and ' + TTerminacionProcesoPosibleDM._ProcesoID + ' = ' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TTerminacionProcesoPosible, TTerminacionProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TTerminacionProcesoPosibleList.CreateByTerminacionYProcesoLike(_T: TTerminacion; _cod: TString);
  Function WhereString : String;
  begin
    if Copy(_Cod, length(_Cod), 1) <> '%' then
      _Cod := _Cod + '%';
    Result := TTerminacionProcesoPosibleDM._terminacionID + ' = ' + IntToStr(_T.ID) + ' and ' + TTerminacionProcesoPosibleDM._procesoID;
    Result := Result + ' in ( select ' + TProcesoDM.ID_FieldName + ' from ' + TProcesoDM.TableName + ' where ' + TProcesoDM._Codigo + ' like ' + QuotedStr(_cod) + ')';
  end;
begin
  inherited Create(TTerminacionProcesoPosible, TTerminacionProcesoPosibleDM.CreateAll(False, WhereString));
end;

{ TterminacionTipoDeCosto }
procedure TTerminacionTipoDeCosto.AutomatizarTipoDeCostoEnTerminacionEnCategorias;
var
  TCT : TCategoriaDeTerminacionesTerminacionPosibleList;
  C   : TCategoriaDeTerminacionesTerminacionPosibleCosto;
begin
  try
    Aplicacion.ColocarCursorEspera;
    TCT := TCategoriaDeTerminacionesTerminacionPosibleList.CreateByTerminacion(self.terminacion);
    if TCT.Count > 0 then
      repeat
        C := TCategoriaDeTerminacionesTerminacionPosibleCosto.Create;
        C.OnBeforeInsert := nil;
        C.MonedaID := aplicacion.MonedaCostosDefault.ID;
        C.Costo := 0;
        C.TipoDeCostoDeLaTerminacionID := self.ID;
        C.CategoriaDeTerminacionesTerminacionPosibleID := TCT.Actual.ID;
        C.Save;
        FreeAndNil(C);
        TCT.next;
      until TCT.IsLast;

      TCT.First;
  finally
    FreeAndNil(TCT);
    aplicacion.ColocarCursorNormal;
  end;
end;

constructor TTerminacionTipoDeCosto.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TTerminacionTipoDeCostoDM);
end;

function TTerminacionTipoDeCosto.Save: Boolean;
var
  DeboAutomatizarEnCategorias: Boolean;
begin
  DeboAutomatizarEnCategorias := not isAssigned;
  Result := inherited Save;
  if DeboAutomatizarEnCategorias then
    AutomatizarTipoDeCostoEnTerminacionEnCategorias;
end;

procedure TTerminacionTipoDeCosto.SetterminacionID(const Value: TObjectID);
begin
  if (Value <> FterminacionID) and assigned(Fterminacion) then
    FreeAndNil(Fterminacion);

  FterminacionID := Value;
end;

procedure TTerminacionTipoDeCosto.SetTipoDeCostoID(Value: TObjectID);
begin
  if (Value <> FTipoDeCostoID) and assigned(FTipoDeCosto) then
    FreeAndNil(FTipoDeCosto);

  FTipoDeCostoID := Value;

end;

function TTerminacionTipoDeCosto.GetTipoDeCosto: TTipoDeCosto;
begin
  if not assigned(FTipoDeCosto) then
    GetObject(TTipoDeCosto, FTipoDeCosto, TipoDeCostoID);

  Result := TTipoDeCosto(FTipoDeCosto);
end;

function TTerminacionTipoDeCosto.Getterminacion: TTerminacion;
begin
  if not assigned(Fterminacion) then
    GetObject(TTerminacion, Fterminacion, FterminacionID);

  Result := TTerminacion(Fterminacion);
end;

procedure TTerminacionTipoDeCosto.Delete;
Var
  ATPCL: TCategoriaDeTerminacionesTerminacionPosibleCostoList;
begin
  Try
    ATPCL :=
      TCategoriaDeTerminacionesTerminacionPosibleCostoList
      .CreateByTerminacionTipoDeCosto(self);
    if ATPCL.Count > 0 then
    begin

      if (aplicacion.Mensaje(
          'El tipo de Costo esta asignado en al menos una terminacion de una Categoria de Terminaciones. Se eliminaran todas esas asignaciones ' + ' de este tipo de Costo. Prosigue ?', 'ATENCION', MB_YESNO) = ID_No) then
      begin
        FreeAndNil(ATPCL);
        Abort;
        exit;
      end;

      ATPCL.First;
      repeat
        ATPCL.Actual.OnBeforeDelete := nil;
        ATPCL.next;
      until ATPCL.IsLast;

      ATPCL.First;
      ATPCL.DeleteAll;
    end;
  Finally
    if assigned(ATPCL) then
      FreeAndNil(ATPCL);
  end;
  inherited;
end;

{ TterminacionTipoDeCostoDM }
class function TTerminacionTipoDeCostoDM.TableName: string;
begin
  Result := 'terminaciontiposdecosto';
end;

class function TTerminacionTipoDeCostoDM.ID_FieldName: string;
begin
  Result := 'terminacionTipoDeCostoID';
end;

procedure TTerminacionTipoDeCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionTipoDeCosto(PDObject) do
  begin
    IDField[_TipoDeCostoID] := FTipoDeCostoID;
    IDField[_terminacionID] := FterminacionID;
  end;
end;

procedure TTerminacionTipoDeCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionTipoDeCosto(PDObject) do
  begin
    FTipoDeCostoID := IDField[_TipoDeCostoID];
    FterminacionID := IDField[_terminacionID];
  end;
end;

{ TterminacionTipoDeCostoList }
function TTerminacionTipoDeCostoList.GetActual: TTerminacionTipoDeCosto;
begin
  Result := TTerminacionTipoDeCosto(CurrentObject);
end;

function TTerminacionTipoDeCostoList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionTipoDeCosto.Create;
end;

constructor TTerminacionTipoDeCostoList.CreateAll;
begin
  inherited Create(TTerminacionTipoDeCosto, TTerminacionTipoDeCostoDM.CreateAll(False));
end;

constructor TTerminacionTipoDeCostoList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionTipoDeCostoDM._terminacionID + ' = ' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTerminacionTipoDeCosto, TTerminacionTipoDeCostoDM.CreateAll(False, WhereString));
end;

{ TTerminacion }
procedure TTerminacion.ClearComponentesTerminacionesDefault;
begin
  FComponentesTerminacionesDefault := Nil;
end;

constructor TTerminacion.Create;
begin
  inherited;
  SaveSqlLog          := True;
  DMObject            := aplicacion.DMProvider.GetGlobalDM(TTerminacionDM);
  FnumeroDeOrden      := 0;
  FIdentificaMatriz   := False;
  FesInactivo         := False;
  FarchivoDeImagen    := null;
  FarchivoSinImagen   := null;
  FarchivoDeImagenWeb := null;
  FarchivoSinImagenWeb:= null;
  FfechaDeCreacion    := null;
  FRequiereProceso    := False;
  FCCGrupoDeTerminacionEspecialDescripcion := Null;
end;

function TTerminacion.GettiposdeCosto: TTerminacionTipoDeCostoList;
begin
  if not assigned(FtiposdeCosto) then
    GetList(TPDList(FtiposdeCosto), TPDList(TTerminacionTipoDeCostoList.CreateByTerminacion(self)));
  Result := TTerminacionTipoDeCostoList(FtiposdeCosto);
end;

function TTerminacion.GetTraducciones: TTerminacionTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones),TPDList(TTerminacionTraduccionList.CreateByTerminacion(self)));

  Result := TTerminacionTraduccionList(FTraducciones);
end;

function TTerminacion.PrecioDeLista(var _ExigePrecio : Boolean;
                                    _ListaDePrecioID: TObjectID;
                                    _Moneda: TMoneda;
                                    _Articulo: TArticulo;
                                    _Cunio : TCunio;
                                    _TipoDePrecioID: TObjectID ): TReal;
var
  pCunioID, pFamiliaID, pMaterialID : TObjectID;
begin
  Result := 0;

  if Assigned( _Cunio ) then
    pCunioID   := _Cunio.ID
  else
    pCunioID   := NullID;

  if Assigned( _Articulo) then
    begin
      pFamiliaID                 := _Articulo.FamiliaDeArticuloID;
      pMaterialID                := _Articulo.MaterialID;
    end
  else
    begin
      pFamiliaID                 := NullID;
      pMaterialID                := NullID;
    end;
  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TTerminacionDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          pCunioID,
                                                          _TipoDePrecioID,
                                                          pFamiliaID,
                                                          pMaterialID,
                                                          False );

  if ( GrupoDeTerminacionEspecialID <> NullID ) and GrupoDeTerminacionEspecial.RecargosPorMaterial.FindMaterial( _Articulo.Material  ) then
    Result := Result * ( 1 + (GrupoDeTerminacionEspecial.RecargosPorMaterial.actual.PorcentajeDeRecargo / 100 ) );
  Result := Result * ( 1 + (_Articulo.CategoriaDeTerminacionPosible.PorcentajeAjustePrecioTerminacion / 100 ) );
end;

function TTerminacion.Save: Boolean;
begin
  if FfechaDeCreacion = null then
    FfechaDeCreacion := aplicacion.DateTimeService.FechaHoraActual;
  Result := inherited Save;
end;

procedure TTerminacion.SetGrupoDeTerminacionEspecialID(const Value: TObjectID);
begin
  if (Value <> FGrupoDeTerminacionEspecialID) and assigned(FGrupoDeTerminacionEspecial) then
    FreeAndNil(FGrupoDeTerminacionEspecial);

  FGrupoDeTerminacionEspecialID := Value;
end;

function TTerminacion.GetprocesosPosibles: TTerminacionProcesoPosibleList;
begin
  if not assigned(FprocesosPosibles) then
    GetList(TPDList(FProcesosPosibles),TPDList(TTerminacionProcesoPosibleList.CreateByTerminacion(Self)));
  Result := TTerminacionProcesoPosibleList(FprocesosPosibles);
end;

function TTerminacion.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TTerminacionList;
end;

function TTerminacion.GetGrupoDeTerminacionEspecial: TGrupoDeTerminacionEspecial;
begin
  if not Assigned(FGrupoDeTerminacionEspecial) then
    GetObject(TGrupoDeTerminacionEspecial,FGrupoDeTerminacionEspecial,GrupoDeTerminacionEspecialID);
  Result := TGrupoDeTerminacionEspecial(FGrupoDeTerminacionEspecial);
end;

function TTerminacion.GetInsumos: TTerminacionInsumoList;
begin
  if not assigned(FInsumos) then
    GetList(TPDList(FInsumos), TPDList(TTerminacionInsumoList.CreateByTerminacion(self)));
  Result := TTerminacionInsumoList(FInsumos);
end;

function TTerminacion.GetPrecios: TTerminacionPrecioList;
begin
  if not assigned(FPrecios) then
    GetList(TPDList(FPrecios),TPDList(TTerminacionPrecioList.CreateByTerminacion(self)));
  Result := TTerminacionPrecioList(FPrecios);
end;

procedure TTerminacion.Delete;
Var
  ATPL: TCategoriaDeTerminacionesTerminacionPosibleList;
  CTDL: TTerminacionComponenteTerminacionDefaultList;
begin
  Try
    ATPL := TCategoriaDeTerminacionesTerminacionPosibleList.CreateByTerminacion
      (self);
    If ATPL.Count > 0 then
      Aplicacion.RaiseExceptionCreate( 'No se puede eliminar esta terminación porque está asignada como "terminación posible" a ' + IntToStr(ATPL.Count) + ' artículos');
  finally
    FreeAndNil(ATPL);
  end;

  if self.Insumos.Count > 0 then
    Aplicacion.RaiseExceptionCreate( 'Debe eliminar los insumos asignados a esta terminación antes de eliminarla');

  if self.tiposdeCosto.Count > 0 then
    Aplicacion.RaiseExceptionCreate( 'Debe eliminar los costos asignados a esta terminación antes de eliminarla');

  if self.procesosPosibles.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los procesos asignados a esta terminación antes de eliminarla');

  if self.ComponentesTerminacionesDefault.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar las terminaciones default de los componentes antes de eliminar esta terminación');

  if self.traducciones.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar las traducciones antes de eliminar esta terminación');

  Try
    CTDL := TTerminacionComponenteTerminacionDefaultList.CreateByTerminacionDefault(self);
    If CTDL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar esta terminación porque está asignada como "terminación default" de uno o más componentes');
  finally
    FreeAndNil(CTDL);
  end;

  inherited;
end;

Destructor TTerminacion.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TTerminacion.FreeObjectsFromMemory;
begin
  if Assigned(FtiposdeCosto) then
    FreeAndNil(FtiposdeCosto);
  if Assigned(FprocesosPosibles) then
    FreeAndNil(FprocesosPosibles);
  if Assigned(FInsumos) then
    FreeAndNil(FInsumos);
  if Assigned(FTraducciones) then
    FreeAndNil(FTraducciones);
  if Assigned(FComponentesTerminacionesDefault) then
    FreeAndNil(FComponentesTerminacionesDefault);
  if Assigned(FPrecios) then
    FreeAndNil(FPrecios);
end;

function TTerminacion.GetarchivoDeImagen: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagen = null then
    try
      FL := TFotoList.CreatebyTerminacionCodigo(codigo, 'terminacion');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;

  Result := FarchivoDeImagen;

end;

function TTerminacion.GetarchivoDeImagenWeb: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagenWeb = null then
    try
      FL := TFotoList.CreatebyTerminacionCodigo(codigo, 'terminacion');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagenWeb := FL.Actual.RutaDeArchivoWeb;
      end
      else
        FarchivoDeImagenWeb := ArchivoSinImagenWeb;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagenWeb;
end;

function TTerminacion.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenTerminaciones;
  Result := FarchivoSinImagen;
end;

function TTerminacion.GetarchivoSinImagenWeb: TString;
begin
  if (FarchivoSinImagenWeb = Null) then
    begin
      FarchivoSinImagenWeb := LowerCase(Aplicacion.ArchivoSinImagenDesarrollos);
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FArchivoSinImagenWeb,LowerCase('\\srv_aph\usuarios\imagenes'),'http://w3.apholos.com');
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FarchivoSinImagenWeb,'\','/');
    end;
  Result := LowerCase(FarchivoSinImagenWeb);
end;

function TTerminacion.GetCCGrupoDeTerminacionEspecialDescripcion: TString;
begin
  if (FCCGrupoDeTerminacionEspecialDescripcion = Null) and (FGrupoDeTerminacionEspecialID <> NullID) then
    FCCGrupoDeTerminacionEspecialDescripcion := GrupoDeTerminacionEspecial.Descripcion;
  Result := FCCGrupoDeTerminacionEspecialDescripcion;
end;

function TTerminacion.GetComponentesTerminacionesDefault : TTerminacionComponenteTerminacionDefaultList;
begin
  if not assigned(FComponentesTerminacionesDefault) then
    GetList(TPDList(FComponentesTerminacionesDefault), TPDList(TTerminacionComponenteTerminacionDefaultList.CreateByTerminacion(self)));
  Result := TTerminacionComponenteTerminacionDefaultList(FComponentesTerminacionesDefault);
end;

function TTerminacion.GetCuentasContabilidadDeCostos: TTerminacionCuentaContabilidadDeCostosList;
begin
  if not assigned(FCuentasContabilidadDeCostos) then
    GetList(TPDList(FCuentasContabilidadDeCostos), TPDList(TTerminacionCuentaContabilidadDeCostosList.CreateByTerminacion(self)));
  Result := TTerminacionCuentaContabilidadDeCostosList(FCuentasContabilidadDeCostos);
end;

{ TTerminacionDM }

class function TTerminacionDM.TableName: string;
begin
  Result := 'Terminaciones';
end;

class function TTerminacionDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CC : TCampoCompuesto;
  begin
    Try
      CC := TCampoCompuesto.create( TableName, '*');
      Result := CC.NombreCompleto;
      CC := TCampoCompuesto.create( TGrupoDeTerminacionEspecialDM.TableName, TGrupoDeTerminacionEspecialDM._Descripcion, _CCGTDescripcion );
      Result := Result + ', ' + CC.NombreCompleto;
    Finally
      FreeAndNil(CC);
    End;
  end;
  Function LeftJoinString : String;
  begin
    Result := ' LEFT JOIN ' + TGrupoDeTerminacionEspecialDM.TableName + ' ON (' + TableName + '.' + _GrupoDeTerminacionEspecialID + '=' + TGrupoDeTerminacionEspecialDM.TableName + '.' + TGrupoDeTerminacionEspecialDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TTerminacionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTerminacionDM.ID_FieldName: string;
begin
  Result := 'TerminacionID';
end;

procedure TTerminacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacion(PDObject) do
  begin
    StringField[_Codigo]                               := FCodigo;
    StringField[_Descripcion]                          := FDescripcion;
    FloatField[_NumeroDeOrden]                         := FNumeroDeOrden;
    BooleanField[_EsInactivo]                          := FEsInactivo;
    BooleanField[_IdentificaMatriz]                    := FIdentificaMatriz;
    IntegerField[_TiempoEstimadoEnDias]                := FTiempoEstimadoEnDias;
    DateTimeField[_FechaDeCreacion]                    := FFechaDeCreacion;
    BooleanField[_RequiereProceso]                     := FRequiereProceso;
    IDField[_GrupoDeTerminacionEspecialID]             := FGrupoDeTerminacionEspecialID;
    BooleanField[_AjustarPrecioPorTerminacionEspecial] := FAjustarPrecioPorTerminacionEspecial;
    StringField[_Observaciones]                        := FObservaciones;
    BooleanField[_EsNatural]                           := FEsNatural;
  end;
end;

procedure TTerminacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacion(PDObject) do
  begin
    Fcodigo                              := StringField[_Codigo];
    FDescripcion                         := StringField[_Descripcion];
    FNumeroDeOrden                       := FloatField[_NumeroDeOrden];
    FEsInactivo                          := BooleanField[_EsInactivo];
    FIdentificaMatriz                    := BooleanField[_IdentificaMatriz];
    FTiempoEstimadoEnDias                := IntegerField[_TiempoEstimadoEnDias];
    FfechaDeCreacion                     := DateTimeField[_FechaDeCreacion];
    FRequiereProceso                     := BooleanField[_RequiereProceso];
    FGrupoDeTerminacionEspecialID        := IDField[_GrupoDeTerminacionEspecialID];
    FAjustarPrecioPorTerminacionEspecial := BooleanField[_AjustarPrecioPorTerminacionEspecial];
    FObservaciones                       := StringField[_Observaciones];
    FEsNatural                           := BooleanField[_EsNatural];
    // del createcompuesto
    FCCGrupoDeTerminacionEspecialDescripcion := StringField[_CCGTDescripcion];
  end;
end;

{ TTerminacionList }
function TTerminacionList.GetActual: TTerminacion;
begin
  Result := TTerminacion(CurrentObject);
end;

function TTerminacionList.CreateNewObject: TPDObject;
begin
  Result := TTerminacion.Create;
end;

constructor TTerminacionList.CreateAll(_SoloActivos: Boolean; _IncluyeIdentificaMatriz: Boolean);
  Function WhereString: String;
  begin
    Result := ifThen( not _IncluyeIdentificaMatriz, '(' + TTerminacionDM._IdentificaMatriz + ' = 0)', '');
  end;
begin
  inherited Create(TTerminacion, TTerminacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TTerminacionList.CreateAll(_SoloActivos, _IncluyeIdentificaMatriz: Boolean; _StartRow, _Rows: Integer);
  Function WhereString: String;
  begin
    Result := ifThen( not _IncluyeIdentificaMatriz, '(' + TTerminacionDM._IdentificaMatriz + ' = 0)', '');
  end;

  Function OrderBy: String;
  begin
    result := 'tablename.'+TTerminacionDM._Codigo;
  end;

begin
  inherited Create(TTerminacion, TTerminacionDM.CreateAll(False, WhereString, _SoloActivos ,OrderBy ,_StartRow, _Rows));
end;

constructor TTerminacionList.CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _SoloActivos, _IncluyeIdentificaMatriz: Boolean; _StartRow, _Rows: Integer);
  Function WhereString: String;
  begin
    result := '';
    if (_cod >'') then
      result := result + '(lower(tablename.'+ TTerminacionDM._Codigo +') like ' + quotedstr( '%'+ lowerCase(_cod)+ '%' )+')';
    if (_des >'') then
      begin
        if (result >'') then
          result := result + ' and ';
        result := result + '(lower(tablename.'+ TTerminacionDM._Descripcion +') like ' + quotedstr( '%'+lowerCase(_des)+ '%' )+')';
      end;
  end;

  Function OrderBy: String;
  begin
    result := 'tablename.'+TTerminacionDM._Codigo;
  end;

begin
  inherited Create(TTerminacion, TTerminacionDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TTerminacionList.CreateByInicialCodigo(_I: string);
begin
  inherited Create(TTerminacion, TTerminacionDM.Create(GetWhereByInicialCodigo(_I)))
end;

constructor TTerminacionList.CreateByNaturales(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTerminacionDM.TableName + '.' + TTerminacionDM._EsNatural + ' = 1)';
  end;
begin
  inherited Create(TTerminacion, TTerminacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TTerminacionList.CreateByNaturalesAndCodigoLike(_C: String; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TTerminacionDM.TableName + '.' + TTerminacionDM._EsNatural + ' = 1) and ';
    Result :=  Result + '(' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ' like ' + QuotedStr('%'+ _C +'%') + ')';
  end;
begin
  inherited Create(TTerminacion, TTerminacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TTerminacionList.CreateEmpty;
begin
  inherited Create(TTerminacion, TTerminacionDM.CreateEmpty);
end;

{ TProceso }
constructor TProceso.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TProcesoDM);
end;

procedure TProceso.Delete;
var
  CantidadUsada : Integer;
  Function CantidadFabricadoProcesosUsados : Integer;
  var
    FPL: TFabricadoProcesoList;
  begin
    try
      FPL := TFabricadoProcesoList.CreateByProceso(self);
      Result := FPL.Count;
    finally
      FreeAndNil(FPL);
    end;
  end;

begin
  CantidadUsada := CantidadFabricadoProcesosUsados;
  if CantidadUsada > 0 then
    if CantidadUsada > 1 then
      Aplicacion.RaiseExceptionCreate('El proceso está aplicado en ' + IntToStr(CantidadUsada) + ' productos, por lo cual no se puede borrar.')
    else
      Aplicacion.RaiseExceptionCreate('El proceso está aplicado en ' + IntToStr(CantidadUsada) + ' producto, por lo cual no se puede borrar.');

  If (Traducciones.Count > 0) or (Especificaciones.Count > 0) then
    If (aplicacion.Mensaje('Este Proceso contiene Traducciones y Especificaciones asignadas. Se eliminaran todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
      begin
        Especificaciones.DeleteAll;
        Traducciones.DeleteAll;
      end
      else
        Abort;
  inherited;
end;

function TProceso.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TProcesoList;
end;

function TProceso.GetEspecificaciones: TProcesoEspecificacionList;
begin
  if not assigned(FEspecificaciones) then
    GetList(TPDList(FEspecificaciones), TPDList(TProcesoEspecificacionList.CreateByProceso(self)));
  Result := TProcesoEspecificacionList(FEspecificaciones);
end;

function TProceso.GetOrigenComercial: TOrigenComercial;
begin
  if not assigned(FOrigenComercial) then
    GetObject(TOrigenComercial, FOrigenComercial, FOrigenComercialID);
  Result := TOrigenComercial(FOrigenComercial);
end;

function TProceso.GetPaletaDeColor: TPaletaDeColor;
begin
  if not assigned(FPaletaDeColor) then
    GetObject(TPaletaDeColor, FPaletaDeColor, FPaletaDeColorID);
  Result := TPaletaDeColor(FPaletaDeColor);
end;

function TProceso.GetPrecios: TProcesoPrecioList;
begin
  if not assigned(FPrecios) then
    GetList(TPDList(FPrecios),TPDList(TProcesoPrecioList.CreateByProceso(self)));
  Result := TProcesoPrecioList(FPrecios);
end;

function TProceso.GetTipoDeDesarrollo: TTipoDeDesarrollo;
begin
  if not Assigned(FTipoDeDesarrollo) then
    GetObject(TTipoDeDesarrollo, FTipoDeDesarrollo, FTipoDeDesarrolloID);
  Result := TTipoDeDesarrollo(FTipoDeDesarrollo);
end;

function TProceso.GetTraducciones: TProcesoTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TProcesoTraduccionList.CreateByProceso(self)));
  Result := TProcesoTraduccionList(FTraducciones);
end;


function TProceso.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _F : TFabricado ): TReal;
var
  pCunioID, pTipoDePrecioID, pFamiliaID, pMaterialID: TObjectID;
begin
  pCunioID        := NullID;
  pTipoDePrecioID := NullID;
  pFamiliaID      := NullID;
  pMaterialID     := NullID;
  pTipoDePrecioID := Aplicacion.DataService.TipoDePrecioDeCunioProcesoID;

  if Assigned( _F ) then
    begin
      pCunioID        := _F.CunioID;
      pFamiliaID      := _F.Articulo.FamiliaDeArticuloID;
      pMaterialID     := _F.Articulo.MaterialID;
    end;

    Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                            TProcesoDM.TableName,
                                                            _Moneda,
                                                            _ListaDePrecioID,
                                                            ID,
                                                            pCunioID,
                                                            pTipoDePrecioID,
                                                            pFamiliaID,
                                                            pMaterialID,
                                                            False );
  if Assigned( _F ) then
    Result := Result * ( 1 + ( _F.Articulo.CategoriaDeTerminacionPosible.FPorcentajeAjustePrecioProceso /100 ));
end;

procedure TProceso.SetOrigenComercialID(const Value: TObjectID);
begin
  if (Value <> FOrigenComercialID) and assigned(FOrigenComercial) then
    FreeAndNil(FOrigenComercial);
  FOrigenComercialID := Value;
end;

procedure TProceso.SetPaletaDeColorID(const Value: TObjectID);
begin
  if (Value <> FPaletaDeColorID) and assigned(FPaletaDeColor) then
    FreeAndNil(FPaletaDeColor);
  FPaletaDeColorID := Value;
end;

procedure TProceso.SetTipoDeDesarrolloID(const Value: TObjectID);
begin
  if (Value <> FTipoDeDesarrolloID) and Assigned(FTipoDeDesarrollo) then
    FreeAndNil(FTipoDeDesarrollo);
  FTipoDeDesarrolloID := Value;
end;

{ TProcesoDM }
class function TProcesoDM.TableName: string;
begin
  Result := 'procesos';
end;

class function TProcesoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TProcesoDM.ID_FieldName: string;
begin
  Result := 'ProcesoID';
end;

procedure TProcesoDM.PopulateFields(PDObject: TPDObject);
begin
  with TProceso(PDObject) do
  begin
    StringField[_Descripcion] := Fdescripcion;
    StringField[_Codigo] := Fcodigo;
    IDField[_PaletaDeColorID] := FPaletaDeColorID;
    BooleanField[_LlevaNumeroDeDesarrollo] := FLlevaNumeroDeDesarrollo;
    IntegerField[_tiempoEstimadoEnDias] := FtiempoEstimadoEnDias;
    IntegerField[_CantidadDeEspecificacionesObligatorias] := FCantidadDeEspecificacionesObligatorias;
    StringField[_ObservacionDeCarga] := FObservacionDeCarga;
    BooleanField[_EsInactivo] := EsInactivo;
    IDField[_TipoDeDesarrolloID]           := FTipoDeDesarrolloID;
    IDField[_OrigenComercialID]                           := FOrigenComercialID;
  end;
end;

procedure TProcesoDM.PopulateObject(PDObject: TPDObject);
begin
  with TProceso(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    Fcodigo := StringField[_Codigo];
    FPaletaDeColorID := IDField[_PaletaDeColorID];
    FLlevaNumeroDeDesarrollo := BooleanField[_LlevaNumeroDeDesarrollo];
    FtiempoEstimadoEnDias := IntegerField[_tiempoEstimadoEnDias];
    FCantidadDeEspecificacionesObligatorias := IntegerField[_CantidadDeEspecificacionesObligatorias];
    FObservacionDeCarga := StringField[_ObservacionDeCarga];
    EsInactivo  := BooleanField[_EsInactivo];
    FTipoDeDesarrolloID       := IDField[_TipoDeDesarrolloID];
    FOrigenComercialID                      := IDField[_OrigenComercialID];
  end;
end;

{ TProcesoList }
function TProcesoList.GetActual: TProceso;
begin
  Result := TProceso(CurrentObject);
end;

constructor TProcesoList.CreateByPaletaDeColor(_P: TPaletaDeColor; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TProcesoDM._PaletaDeColorID + ' = ' + IntToStr(_P.ID) + ')';
  end;
begin
  inherited Create(TProceso, TProcesoDM.CreateAll( False, WhereString, _SoloActivos ));
end;

function TProcesoList.CreateNewObject: TPDObject;
begin
  Result := TProceso.Create;
end;

constructor TProcesoList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(TProceso, TProcesoDM.CreateAll( False, '', _SoloActivos ));
end;

{ TArticuloComponente }

constructor TArticuloComponente.Create;
begin
  inherited;
  SaveSqlLog        := True;
  DMObject          := aplicacion.DMProvider.GetGlobalDM(TArticuloComponenteDM);
  FCantidad         := null;
  Forden            := null;
  FarchivoDeImagen  := null;
  FarchivoSinImagen := null;
end;

procedure TArticuloComponente.SetcomponenteID(Value: TObjectID);
begin
  if (FarticuloID <> NullID) and (Value = FarticuloID) then
    Aplicacion.RaiseExceptionCreate('Un componente del artículo ' + articulo.codigo +  ' no es correcto.'); // el componente no puede ser el articulo padre

  if (Value <> FcomponenteID) and assigned(FComponente) then
    FreeAndNil(FComponente);

  FcomponenteID := Value;
end;

function TArticuloComponente.GetComponente: TArticulo;
begin
  if not assigned(FComponente) then
    GetObject(TArticulo, FComponente, componenteID);

  Result := TArticulo(FComponente);
end;

function TArticuloComponente.GetComponenteID: TObjectID;
begin
  if (FarticuloID <> NullID) and (FcomponenteID = FarticuloID) then
    Aplicacion.RaiseExceptionCreate('Un componente del artículo ' + articulo.codigo + ' no es correcto.');

  Result := FcomponenteID;
end;

function TArticuloComponente.GetComponentesOpcionales: TarticuloComponenteOpcionalList;
begin
  if not assigned(FcomponentesOpcionales) then
    GetList(TPDList(FcomponentesOpcionales), TPDList(TarticuloComponenteOpcionalList.CreateByArticuloComponente(self)) );
  Result := TarticuloComponenteOpcionalList(FcomponentesOpcionales);
end;

function TArticuloComponente.GetarchivoDeImagen: TString;
  Function NombreDeArchivo: TString;
  Begin
    Result := componente.familiaDeArticulo.codigo + '-' + componente.numeroDeArticulo + '/' + aplicacion.TextService.RellenarCodigo(IntToStr(componente.medida), 2);
    if componente.TipoDeComponente.FiguraEnCodigoDeFabricado then
      Result := Result + '-' + componente.TipoDeComponente.codigo;
  end;

var
  FL: TFotoList;
begin
  if (FarchivoDeImagen = null) then
    try
      FL := TFotoList.CreateByArticuloCodigo(NombreDeArchivo, 'articulo');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TArticuloComponente.GetarchivoSinImagen: TString;
begin
  if (FarchivoSinImagen = null) then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenArticulos;

  Result := FarchivoSinImagen;
end;

function TArticuloComponente.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);

  Result := TArticulo(Farticulo);
end;

{ TArticuloComponenteDM }
class function TArticuloComponenteDM.TableName: string;
begin
  Result := 'articulocomponentes';
end;

class function TArticuloComponenteDM.ID_FieldName: string;
begin
  Result := 'ArticuloComponenteID';
end;

procedure TArticuloComponenteDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloComponente(PDObject) do
    begin
      IDField[_articuloID]    := FarticuloID;
      IDField[_ComponenteID]  := FcomponenteID;
      IntegerField[_Cantidad] := FCantidad;
      IntegerField[_Orden]    := Forden;
    end;
end;

procedure TArticuloComponenteDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloComponente(PDObject) do
    begin
      FarticuloID   := IDField[_articuloID];
      FcomponenteID := IDField[_ComponenteID];
      FCantidad     := IntegerField[_Cantidad];
      Forden        := IntegerField[_Orden];
    end;
end;

{ TArticuloComponenteList }
function TArticuloComponenteList.GetActual: TArticuloComponente;
begin
  Result := TArticuloComponente(CurrentObject);
end;

function TArticuloComponenteList.CreateNewObject: TPDObject;
begin
  Result := TArticuloComponente.Create;
end;

function TArticuloComponenteList.FindArticuloID(_ArticuloID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.componente.ID = _ArticuloID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TArticuloComponenteList.CreateAll;
begin
  inherited Create(TArticuloComponente, TArticuloComponenteDM.CreateAll(False));
end;

constructor TArticuloComponenteList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloComponenteDM._ArticuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloComponente, TArticuloComponenteDM.CreateAll(False, WhereString, False, TArticuloComponenteDM._Orden ));
end;

constructor TArticuloComponenteList.CreateByArticuloComponente(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloComponenteDM._ComponenteID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloComponente, TArticuloComponenteDM.CreateAll(False, WhereString));
end;

constructor TArticuloComponenteList.CreateByArticuloYComponente(_A, _C: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloComponenteDM._articuloID + '=' + IntToStr(_A.ID) + ' and ' + TArticuloComponenteDM._ComponenteID + '=' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TArticuloComponente, TArticuloComponenteDM.CreateAll(False, WhereString));
end;

constructor TArticuloComponenteList.CreateEmpty;
begin
  inherited Create(TArticuloComponente, TArticuloComponenteDM.CreateEmpty);
end;

{ TArticuloInsumo }
constructor TArticuloInsumo.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TArticuloInsumoDM);
  FCantidad  := null;
end;

procedure TArticuloInsumo.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

function TArticuloInsumo.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

{ TArticuloInsumoDM }
class function TArticuloInsumoDM.TableName: string;
begin
  Result := 'articuloinsumos';
end;

class function TArticuloInsumoDM.ID_FieldName: string;
begin
  Result := 'ArticuloInsumoID';
end;

procedure TArticuloInsumoDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloInsumo(PDObject) do
  begin
    IDField[_articuloID] := FarticuloID;
    FloatField[_Cantidad] := FCantidad;
    FloatField[_Scrap] := Fscrap;
    IDField[_MateriaPrimaID] := FMateriaPrimaID;
  end;
end;

procedure TArticuloInsumoDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloInsumo(PDObject) do
  begin
    FarticuloID := IDField[_articuloID];
    FCantidad := FloatField[_Cantidad];
    Fscrap := FloatField[_Scrap];
    FMateriaPrimaID := IDField[_MateriaPrimaID];
  end;
end;

{ TArticuloInsumoList }
function TArticuloInsumoList.GetActual: TArticuloInsumo;
begin
  Result := TArticuloInsumo(CurrentObject);
end;

function TArticuloInsumoList.CreateNewObject: TPDObject;
begin
  Result := TArticuloInsumo.Create;
end;

constructor TArticuloInsumoList.CreateAll;
begin
  inherited Create(TArticuloInsumo, TArticuloInsumoDM.CreateAll(False));
end;

// ------------------------------------------------------------------------------
function TAbstractEmpresa.getcontactosDeEmpresa: TContactoDeEmpresaList;
begin
  if not assigned(FcontactosDeEmpresa) then
    GetList(TPDList(FcontactosDeEmpresa), TPDList(TContactoDeEmpresaList.CreateByEmpresa(Self, False)));
  Result := FcontactosDeEmpresa;
end;

function TAbstractEmpresa.GetCuentaContable: TCuentaContable;
begin
  if not Assigned(FCuentaContable) then
    GetObject(TCuentaContable, FCuentaContable, CuentaContableID);
  Result := TCuentaContable(FCuentaContable);
end;

function TAbstractEmpresa.getTelefonosDeEmpresa: TTelefonoDeEmpresaList;
begin
  if not assigned(FTelefonosDeEmpresa) then
    GetList(TPDList(FTelefonosDeEmpresa), TPDList(TTelefonoDeEmpresaList.CreateByEmpresa(Self, False)));
  Result := TTelefonoDeEmpresaList(FTelefonosDeEmpresa);

end;

procedure TAbstractEmpresa.SetNivelDeServicioDeClienteID(const Value: TObjectID);
begin
  if assigned( FNivelDeServicioDeCliente ) and (FNivelDeServicioDeClienteID <> Value ) then
    FreeAndNil( FNivelDeServicioDeCliente );
  FNivelDeServicioDeClienteID := Value;
end;

procedure TAbstractEmpresa.SetObservacionDeUbicacion(const Value: TString);
begin
  FObservacionDeUbicacion := uppercase(Value);
end;

procedure TAbstractEmpresa.SetObservaciones(const Value: TString);
begin
  if FObservacionesTmp > '' then
  begin
    FObservaciones := Copy(FObservacionesTmp + ' ' + Value, 1, 250);
    FObservacionesTmp := '';
  end
  else
    FObservaciones := Value;
end;

constructor TArticuloInsumoList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloInsumoDM._articuloID + '=' + IntToStr(_A.ID) ;
  end;
begin
  inherited Create(TArticuloInsumo, TArticuloInsumoDM.CreateAll(False, WhereString));
end;

{ TArticuloCosto }
constructor TArticuloCosto.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TArticuloCostoDM);
  FCosto     := null;
end;

procedure TArticuloCosto.SetArticuloID(Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) then
    FreeAndNil(Farticulo);
  FarticuloID := Value;
end;

function TArticuloCosto.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);
  Result := TArticulo(Farticulo);
end;

procedure TArticuloCosto.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

function TArticuloCosto.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);

  Result := TMoneda(FMoneda);
end;

procedure TArticuloCosto.SetTipoDeCostoID(Value: TObjectID);
begin
  if (Value <> FTipoDeCostoID) and assigned(FTipoDeCosto) then
    FreeAndNil(FTipoDeCosto);

  FTipoDeCostoID := Value;

end;

function TArticuloCosto.GetTipoDeCosto: TTipoDeCosto;
begin
  if not assigned(FTipoDeCosto) then
    GetObject(TTipoDeCosto, FTipoDeCosto, TipoDeCostoID);

  Result := TTipoDeCosto(FTipoDeCosto);
end;

{ TArticuloCostoDM }
class function TArticuloCostoDM.TableName: string;
begin
  Result := 'articuloCostos';
end;

class function TArticuloCostoDM.ID_FieldName: string;
begin
  Result := 'ArticuloCostoID';
end;

procedure TArticuloCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloCosto(PDObject) do
  begin
    IDField[_articuloID] := FarticuloID;
    FloatField[_Costo] := FCosto;
    IDField[_MonedaID] := FMonedaID;
    IDField[_TipoDeCostoID] := FTipoDeCostoID;
  end;
end;

procedure TArticuloCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloCosto(PDObject) do
  begin
    FarticuloID := IDField[_articuloID];
    FCosto := FloatField[_Costo];
    FMonedaID := IDField[_MonedaID];
    FTipoDeCostoID := IDField[_TipoDeCostoID];
  end;
end;

{ TArticuloCostoList }
function TArticuloCostoList.GetActual: TArticuloCosto;
begin
  Result := TArticuloCosto(CurrentObject);
end;

function TArticuloCostoList.CreateNewObject: TPDObject;
begin
  Result := TArticuloCosto.Create;
end;

constructor TArticuloCostoList.CreateAll;
begin
  inherited Create(TArticuloCosto, TArticuloCostoDM.CreateAll(False));
end;

constructor TArticuloCostoList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloCostoDM._articuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloCosto,  TArticuloCostoDM.CreateAll(False, WhereString));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleCosto }
constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.Create;
begin
  inherited;
  SaveSqlLog     := True;
  DMObject       := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM);
  FCosto         := null;
  OnBeforeDelete := DoBeforeDelete;
  // OnBeforeInsert := DoBeforeInsert;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.Save: Boolean;
begin
  if not isAssigned and assigned(FOnBeforeInsert) then
    DoBeforeInsert(self);
  Result := inherited Save;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);
  Result := TMoneda(FMoneda);
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.Delete;
begin
  if assigned(FOnBeforeDelete) then
    DoBeforeDelete(self);
  inherited;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.DoBeforeDelete(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden eliminar los tipos de costo asignados');
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.DoBeforeInsert(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden agregar nuevos tipos de costo');
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleCostoDM }
class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.TableName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecifCostos';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.ID_FieldName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecifCostosID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto(PDObject) do
  begin
    IDField[_CatDeTermsPosiblesTermPosProcPosEspecificacionID] := FCatDeTermsPosiblesTermPosProcPosEspecifID;
    FloatField[_Costo] := FCosto;
    IDField[_MonedaID] := FMonedaID;
    IDField[_EspecificacionTipoDeCostoID] := FEspecificacionTipoDeCostoID;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto(PDObject) do
  begin
    FCatDeTermsPosiblesTermPosProcPosEspecifID := IDField[_CatDeTermsPosiblesTermPosProcPosEspecificacionID];
    FCosto := FloatField[_Costo];
    FMonedaID := IDField[_MonedaID];
    FEspecificacionTipoDeCostoID := IDField[_EspecificacionTipoDeCostoID];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleCostoList }
function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList.GetActual:TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto(CurrentObject);
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList.CreateNewObject: TPDObject;
begin
  Result :=TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto.Create;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.CreateAll(False));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList.CreateByCategoriaDeTerminacionesPosiblesTerminacionPosibleProcesoPosibleEspecificacion(_SP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM._CatDeTermsPosiblesTermPosProcPosEspecificacionID + '=' + IntToStr(_SP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoList.CreateByCostoID(_CID: TObjectID);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM._EspecificacionTipoDeCostoID + '=' + IntToStr(_CID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCosto, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionCostoDM.CreateAll(False, WhereString));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleCosto }
constructor TCategoriaDeTerminacionesTerminacionPosibleCosto.Create;
begin
  inherited;
  SaveSqlLog      := True;
  DMObject        := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleCostoDM);
  FCosto          := null;
  FOnBeforeDelete := DoBeforeDelete;
  // FOnBeforeInsert := DoBeforeInsert;
end;

function TCategoriaDeTerminacionesTerminacionPosibleCosto.Save: Boolean;
begin
  if not isAssigned and assigned(FOnBeforeInsert) then
    FOnBeforeInsert(self);

  Result := inherited Save;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.
  SetCategoriaDeTerminacionesTerminacionPosibleID(Value: TObjectID);
begin
  if (Value <> FCategoriaDeTerminacionesTerminacionPosibleID) and assigned
    (FCategoriaDeTerminacionesTerminacionPosible) then
    FreeAndNil(FCategoriaDeTerminacionesTerminacionPosible);

  FCategoriaDeTerminacionesTerminacionPosibleID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosibleCosto.
  GetCategoriaDeTerminacionesTerminacionPosible:
  TCategoriaDeTerminacionesTerminacionPosible;
begin
  if not assigned(FCategoriaDeTerminacionesTerminacionPosible) then
    GetObject(TCategoriaDeTerminacionesTerminacionPosible,
      FCategoriaDeTerminacionesTerminacionPosible,
      FCategoriaDeTerminacionesTerminacionPosibleID);

  Result := TCategoriaDeTerminacionesTerminacionPosible
    (FCategoriaDeTerminacionesTerminacionPosible);
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.SetMonedaID
  (Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

function TCategoriaDeTerminacionesTerminacionPosibleCosto.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);

  Result := TMoneda(FMoneda);
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.
  SetTipoDeCostoDeLaTerminacionID(Value: TObjectID);
begin
  if (Value <> FTipoDeCostoDeLaTerminacionID) and assigned
    (FTipoDeCostoDeLaTerminacion) then
    FreeAndNil(FTipoDeCostoDeLaTerminacion);

  FTipoDeCostoDeLaTerminacionID := Value;

end;

function TCategoriaDeTerminacionesTerminacionPosibleCosto.
  GetTipoDeCostoDeLaTerminacion: TTerminacionTipoDeCosto;
begin
  if not assigned(FTipoDeCostoDeLaTerminacion) then
    GetObject(TTerminacionTipoDeCosto, FTipoDeCostoDeLaTerminacion,
      TipoDeCostoDeLaTerminacionID);

  Result := TTerminacionTipoDeCosto(FTipoDeCostoDeLaTerminacion);
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.Delete;
begin
  if assigned(FOnBeforeDelete) then
    FOnBeforeDelete(self);

  inherited;

end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.DoBeforeDelete
  (Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden eliminar los Tipos de Costo asignados');
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCosto.DoBeforeInsert(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden agregar nuevos Tipos de Costo');
end;

{ TCategoriaDeTerminacionesTerminacionPosibleCostoDM }
class function TCategoriaDeTerminacionesTerminacionPosibleCostoDM.TableName : string;
begin
  Result := 'CatDeTermsPosiblesTermPosCostos';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleCostoDM.ID_FieldName : string;
begin
  Result := 'CatDeTermsPosiblesTermPosCostoID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleCosto(PDObject) do
  begin
    IDField[_catDeTermsPosiblesTermsPosID] := FCategoriaDeTerminacionesTerminacionPosibleID;
    FloatField[_Costo] := FCosto;
    IDField[_MonedaID] := FMonedaID;
    IDField[_TerminacionTipoDeCostoID] := FTipoDeCostoDeLaTerminacionID;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleCosto(PDObject) do
  begin
    FCategoriaDeTerminacionesTerminacionPosibleID := IDField[_catDeTermsPosiblesTermsPosID];
    FCosto := FloatField[_Costo];
    FMonedaID := IDField[_MonedaID];
    FTipoDeCostoDeLaTerminacionID := IDField[_TerminacionTipoDeCostoID];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleCostoList }
function TCategoriaDeTerminacionesTerminacionPosibleCostoList.GetActual : TCategoriaDeTerminacionesTerminacionPosibleCosto;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleCosto(CurrentObject);
end;

function TCategoriaDeTerminacionesTerminacionPosibleCostoList.CreateNewObject : TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleCosto.Create;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleCostoList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleCosto, TCategoriaDeTerminacionesTerminacionPosibleCostoDM.CreateAll(False));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleCostoList.CreateByCategoriaDeTerminacionesTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleCostoDM._catDeTermsPosiblesTermsPosID + '=' + IntToStr(_TP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleCosto, TCategoriaDeTerminacionesTerminacionPosibleCostoDM.CreateAll( False, WhereString ));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleCostoList.CreateByTerminacionTipoDeCosto(_TC: TTerminacionTipoDeCosto);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleCostoDM._TerminacionTipoDeCostoID + ' = ' + IntToStr(_TC.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleCosto,TCategoriaDeTerminacionesTerminacionPosibleCostoDM.CreateAll(False, WhereString));
end;

{ TArticuloTerminacionPosible }
procedure TCategoriaDeTerminacionesTerminacionPosible.AutomatizarCostos;
Var
  C: TCategoriaDeTerminacionesTerminacionPosibleCosto;
begin
  If Terminacion.TiposdeCosto.Count = 0 Then
    exit;

  Terminacion.TiposdeCosto.First;
  Repeat
    C := TCategoriaDeTerminacionesTerminacionPosibleCosto.Create;
    C.CategoriaDeTerminacionesTerminacionPosibleID := self.ID;
    C.OnBeforeInsert := NIL;
    C.Costo := 0;
    C.MonedaID := aplicacion.MonedaCostosDefault.ID;
    C.TipoDeCostoDeLaTerminacionID := terminacion.tiposdeCosto.Actual.ID;
    C.Save;
    C.OnBeforeInsert := C.OnBeforeInsert;
    Costos.Add(C);
    C.NilObject;
    Terminacion.TiposdeCosto.Next;
  Until Terminacion.TiposdeCosto.IsLast;
  Terminacion.TiposdeCosto.First;
end;

procedure TCategoriaDeTerminacionesTerminacionPosible.AutomatizarInsumos;
Var
  INS: TCategoriaDeTerminacionesTerminacionPosibleInsumo;
begin
  If Terminacion.Insumos.Count = 0 Then
    exit;
  Terminacion.Insumos.First;
  Repeat
    INS := TCategoriaDeTerminacionesTerminacionPosibleInsumo.Create;
    INS.CategoriaDeTerminacionesPosiblesTerminacionPosibleID := Self.ID;
    INS.MateriaPrimaID := Terminacion.Insumos.Actual.MateriaPrimaID;
    INS.Save;
    Insumos.Add(INS);
    INS.NilObject;
    Terminacion.Insumos.next;
  Until Terminacion.Insumos.IsLast;
  Terminacion.Insumos.First;
end;

procedure TCategoriaDeTerminacionesTerminacionPosible.AutomatizarProcesosPosibles(_automatizarEspecificaciones: Boolean);
Var
  P: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible;
  dlg: T_FrmDialogsService;
  Num: Integer;
begin
  If terminacion.procesosPosibles.Count = 0 Then
    exit;

  aplicacion.DialogsService.CrearDialogo(dlg, 'Cargando Procesos... ',
    TAviComunes.RuedaDentada);
  Num := 1;
  terminacion.procesosPosibles.First;
  Repeat
    dlg.MensajeSuperior := 'Cargando Procesos... ' + IntToStr(Num) + '/' + IntToStr(terminacion.procesosPosibles.Count);

    P := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.Create;
    P.TerminacionPosibleID := self.ID;
    P.ProcesoPosibleID := terminacion.procesosPosibles.Actual.ID;
    P.DebeAutomatizarEspecificaciones := _automatizarEspecificaciones;
    P.Save;
    procesosPosibles.Add(P);
    P.NilObject;
    terminacion.procesosPosibles.next;
    Num := Num + 1;
  Until terminacion.procesosPosibles.IsLast;
  terminacion.procesosPosibles.First;
  aplicacion.DialogsService.CerrarDialogo(dlg);
end;

constructor TCategoriaDeTerminacionesTerminacionPosible.Create;
begin
  inherited;
  SaveSqlLog         := True;
  DMObject           := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleDM);
  FTarchivoDeImagen  := null;
  FTarchivoSinImagen := null;
  FCCTerminacionCodigo           := null;
  FCCTerminacionDescripcion      := null;
  FCCTerminacionEsInactivo       := null;
  FCCTerminacionNumeroDeOrden    := null;
end;

procedure TCategoriaDeTerminacionesTerminacionPosible.SetCategoriaDeTerminacionesPosiblesID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeTerminacionesPosiblesID) and assigned(FCategoriaDeTerminacionesPosibles) then
    FreeAndNil(FCategoriaDeTerminacionesPosibles);
  FCategoriaDeTerminacionesPosiblesID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetarchivoDeImagen: TString;
begin
  if FTarchivoDeImagen = null then
    FTarchivoDeImagen := terminacion.archivoDeImagen;
  Result := FTarchivoDeImagen;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetarchivoSinImagen : TString;
begin
  if (FTarchivoSinImagen = null) then
    FTarchivoSinImagen := terminacion.archivoSinImagen;
  Result := FTarchivoSinImagen;
end;

procedure TCategoriaDeTerminacionesTerminacionPosible.SetterminacionID(Value: TObjectID);
begin
  if (Value <> FterminacionID) and (Value <> NullID) and
    (FterminacionID <> NullID) and (procesosPosibles.Count > 0) then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los procesos asignados para esta terminacion del proceso, antes de eliminarla o modificarla');

  if (Value <> FterminacionID) and (Value <> NullID) and
    (FterminacionID <> NullID) and (Costos.Count > 0) then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los costos asignados para esta terminacion del proceso, antes de eliminarla o modificarla');

  if (Value <> FterminacionID) and assigned(Fterminacion) then
  begin
    FreeAndNil(Fterminacion);
    FCCTerminacionCodigo := null;
    FCCTerminacionDescripcion := null;
    FCCTerminacionEsInactivo := null;
    FCCTerminacionNumeroDeOrden := null;
  end;
  FterminacionID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetTerminacion : TTerminacion;
begin
  if not assigned(Fterminacion) then
    GetObject(TTerminacion, Fterminacion, terminacionID);
  Result := TTerminacion(Fterminacion);
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetCostos : TCategoriaDeTerminacionesTerminacionPosibleCostoList;
begin
  if not assigned(FCostos) then
    GetList(TPDList(FCostos), TPDList( TCategoriaDeTerminacionesTerminacionPosibleCostoList.CreateByCategoriaDeTerminacionesTerminacionPosible(self)));
  Result := TCategoriaDeTerminacionesTerminacionPosibleCostoList(FCostos);
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetFTerminacionCodigo: TString;
begin
  if (FCCTerminacionCodigo = null) then
    FCCTerminacionCodigo := Terminacion.codigo;
  Result := FCCTerminacionCodigo;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetFTerminacionDescripcion: TString;
begin
  if (FCCTerminacionDescripcion = null) then
    FCCTerminacionDescripcion := Terminacion.Descripcion;
  Result := FCCTerminacionDescripcion;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetFTerminacionEsInactivo: TBoolean;
begin
  if FCCTerminacionEsInactivo = Null then
    FCCTerminacionEsInactivo := Terminacion.EsInactivo;
  Result := FCCTerminacionEsInactivo;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetFTerminacionNumeroDeOrden: TReal;
begin
  if FCCTerminacionNumeroDeOrden = null then
    FCCTerminacionNumeroDeOrden := Terminacion.NumeroDeOrden;
  Result := FCCTerminacionNumeroDeOrden;
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetInsumos : TCategoriaDeTerminacionesTerminacionPosibleInsumoList;
begin
  if not assigned(FInsumos) then
    GetList(TPDList(FInsumos), TPDList( TCategoriaDeTerminacionesTerminacionPosibleInsumoList.CreateByCategoriaDeTerminacionesTerminacionPosible(self)));

  Result := TCategoriaDeTerminacionesTerminacionPosibleInsumoList(FInsumos);
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetprocesosPosibles: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList;
begin
  if not assigned(FprocesosPosibles) then
    GetList(TPDList(FprocesosPosibles), TPDList( TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionPosible(self)));

  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList(FprocesosPosibles);
end;

procedure TCategoriaDeTerminacionesTerminacionPosible.Delete;
begin
  if ((self.Costos.Count > 0) or (self.procesosPosibles.Count > 0)) and (aplicacion.Mensaje('Se eliminarán los costos, procesos e insumos asociados. Prosigue?', 'ATENCION', MB_YESNO) <> ID_YES) then
  begin
    Abort;
    exit;
  end
  else
  begin
    if (self.Costos.Count > 0) then
    begin
      Costos.First;
      repeat
        Costos.Actual.OnBeforeDelete := nil;
        Costos.next;
      until Costos.IsLast;
    end;

    Costos.First;

    Costos.DeleteAll;

    procesosPosibles.DeleteAll;

    if (self.Insumos.Count > 0) then
    begin
      Insumos.First;
      repeat
        Insumos.Actual.OnBeforeDelete := nil;
        Insumos.next;
      until Insumos.IsLast;
    end;
    Insumos.DeleteAll;
  end;

  inherited;
end;

{ TArticuloTerminacionPosibleDM }
class function TCategoriaDeTerminacionesTerminacionPosibleDM.TableName: string;
begin
  Result := 'catDeTermsPosiblesTermPos';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, '+
              TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo        + ' as ' + _CCTerminacionCodigo        + ', ' +
              TTerminacionDM.TableName + '.' + TTerminacionDM._Descripcion   + ' as ' + _CCTerminacionDescripcion   + ', ' +
              TTerminacionDM.TableName + '.' + TTerminacionDM._NumeroDeOrden + ' as ' + _CCTerminacionNumeroDeOrden + ', ' +
              TTerminacionDM.TableName + '.' + TTerminacionDM._EsInactivo    + ' as ' + _CCTerminacionEsInactivo;
  end;
  Function LeftJoinString : String;
  begin
    Result := 'Left JOIN ' + TTerminacionDM.TableName + ' ON (';
    Result := Result + TableName + '.' + _TerminacionID + '=' + TTerminacionDM.TableName + '.' + TTerminacionDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TCategoriaDeTerminacionesTerminacionPosibleDM.ID_FieldName: string;
begin
  Result := 'CatDeTermsPosiblesTermsPosID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosible(PDObject) do
  begin
    IDField[_CatDeTermsPosiblesID] := FCategoriaDeTerminacionesPosiblesID;
    IDField[_TerminacionID]        := FTerminacionID;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosible(PDObject) do
  begin
    FCategoriaDeTerminacionesPosiblesID := IDField[_CatDeTermsPosiblesID];
    FTerminacionID                      := IDField[_TerminacionID];
    // terminaciones
    FCCTerminacionCodigo            := StringField[_CCTerminacionCodigo];
    FCCTerminacionDescripcion       := StringField[_CCTerminacionDescripcion];
    FCCTerminacionNumeroDeOrden     := FloatField[_CCTerminacionNumeroDeOrden];
    FCCTerminacionEsInactivo        := BooleanField[_CCTerminacionEsInactivo];
  end;
end;

{ TArticuloTerminacionPosibleList }
function TCategoriaDeTerminacionesTerminacionPosibleList.GetActual : TCategoriaDeTerminacionesTerminacionPosible;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosible(CurrentObject);
end;

function TCategoriaDeTerminacionesTerminacionPosibleList.CreateNewObject
  : TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosible.Create;
end;

function TCategoriaDeTerminacionesTerminacionPosibleList.Find(_cod: string;
  _Next: Boolean): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  if Not _Next then
    First;
  while (not Result) and (not IsLast) do
  begin
    Result := uppercase(Actual.codigo) = uppercase(_cod);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TCategoriaDeTerminacionesTerminacionPosibleList.Find(_T: TTerminacion;
  _Next: Boolean): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  if Not _Next then
    First;
  while (not Result) and (not IsLast) do
  begin
    Result := Actual.terminacionID = _T.ID;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( False ));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString: String;
  begin
    Result := '('+TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._terminacionID + '=' + IntToStr(_T.ID) +')' ;
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateEmpty;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateEmpty);
end;

{ TArticulo }

function TArticulo.getDescripcionCompleta: TString;
begin
  FDescripcionCompleta := Fdescripcion;
  if familiaDeArticulo.EsMatriz then
    FDescripcionCompleta := FDescripcionCompleta + ' ' + DescripcionComponentesDeMatriz;
  Result := FDescripcionCompleta;
end;

function TArticulo.GetDescripcionComponentesDeMatriz: TString;
  function DescripciondeComponentes: String;
  begin
    Result := '';
    if (ComponentesDeMatrices.Count > 0) then
    begin
      ComponentesDeMatrices.First;
      Result := '[';
      repeat
        Result := Result +
          ComponentesDeMatrices.Actual.componenteDeMatriz.codigo;
        ComponentesDeMatrices.next;
        if not ComponentesDeMatrices.IsLast then
          Result := Result + ', ';
      until ComponentesDeMatrices.IsLast;
      Result := Result + ']';
      ComponentesDeMatrices.First;
    end;
  end;

begin
  if (FDescripcionComponentesDeMatriz = null) then
    FDescripcionComponentesDeMatriz := DescripciondeComponentes;
  Result := FDescripcionComponentesDeMatriz;
end;

function TArticulo.GetDescriptibleAbreviadoListClass;
begin
  Result := TArticuloList;
end;

function TArticulo.GetEmbalajeDefault: TMateriaPrima;
begin
  if not Assigned(FEmbalajeDefault) then
    GetObject(TMateriaPrima, FEmbalajeDefault, FEmbalajeDefaultID);
  Result := TMateriaPrima(FEmbalajeDefault);
end;

constructor TArticulo.Create;
begin
  inherited;
  SaveSqlLog                                := True;
  DMObject                                  := Aplicacion.DMProvider.GetGlobalDM(TArticuloDM);
  Fcodigo                                   := '';
  Fmedida                                   := 0;
  FnumeroDeArticulo                         := '';
  FnumeroDeOrden                            := 0;
  FunidadesPorEnvase                        := 0;
  FtiempoEstimadoEnDias                     := 0;
  FTransfiereAtributos                      := True;
  FMostrarComponentesDefaultEnCustomizacion := False;
  FDescripcionCompleta                      := '';
  FEsInactivo                               := False;
  FarchivoDeImagen                          := null;
  FarchivoDeImagenWeb                       := null;
  FarchivoSinImagen                         := null;
  FarchivoSinImagenWeb                      := null;
  FfechaDeCreacion                          := null;
  FDescripcionComponentesDeMatriz           := null;
  FMatricesColocadoras                      := Nil;
  FCentroDeCosto                            := Nil;
  FHeredaCunioDelProductoFinal              := False;
  fAsumePrecioDelCunio                      := null;
  FK1                                       := 0;
  FKMateriaPrimaEnMonedaOficial             := Null;
  FCCHerramentalCantidadDeBocas             := -777;
  FCCHerramentalPasoDeMatriz                := -777;
  FCCMateriaPrimaMonedaCostoID              := -777;
  FCCMaterialPesoEspecifico                 := -777;
  FCCMaterialUnidadDeMedidaEquivalencia     := -777;
  FCCMateriaPrimaAnchoDeTira                := -777;
  FCCMateriaPrimaCosto                      := -777;
  FCCMateriaPrimaDiametro                   := -777;
  FCCMateriaPrimaEsInyeccion                := Null;
  FCCMateriaPrimaEspesor                    := -777;
  FCCMateriaPrimaUnidadDeMedidaEquivalencia := -777;
  FCCMetodoDeCorteEsComprado                := Null;
  FNoPermitirCustomizacion                  := False;
  FIDTeamplace                              := Null
end;

procedure TArticulo.SetfamiliaDeArticuloID(Value: TObjectID);
begin
  if (Value <> FfamiliaDeArticuloID) and assigned(FfamiliaDeArticulo) then
    FreeAndNil(FfamiliaDeArticulo);

  FfamiliaDeArticuloID := Value;
  GrabarCodigo;
end;

function TArticulo.GetfamiliaDeArticulo: TFamiliaDeArticulo;
begin
  if not Assigned(FfamiliaDeArticulo) then
    GetObject(TFamiliaDeArticulo, FfamiliaDeArticulo, familiaDeArticuloID);
  Result := TFamiliaDeArticulo(FfamiliaDeArticulo);
end;

function TArticulo.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TArticuloDM._TeamplaceTableName, TArticuloDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TArticuloDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TArticulo.GetImpuestos: TArticuloImpuestoList;
begin
  if not assigned(FImpuestos) then
    GetList(TPDList(FImpuestos), TPDList(TArticuloImpuestoList.CreateByArticulo(self)));
  Result := TArticuloImpuestoList(FImpuestos);
end;

function TArticulo.GetKMateriaPrimaEnMonedaOficial: TReal;
var
  I       : Integer;
  SubComp : TArticulo;
begin
  if FKMateriaPrimaEnMonedaOficial = Null then
    begin
      FKMateriaPrimaEnMonedaOficial := 0;
      if (Componentes.Count = 0) then
        begin
          if ( MetodosDeCorte.Count > 0 ) and MetodosDeCorte.FindDefault and (MetodosDeCorte.Actual.CCMateriaPrimaCosto > 0) then // me voy al default para calcular
            begin
              if MetodosDeCorte.Actual.EsComprado then
                FKMateriaPrimaEnMonedaOficial := Aplicacion.CurrencyService.ConvertirAMonedaOficial( K1, MonedaK1ID )
              else
                FKMateriaPrimaEnMonedaOficial := (MetodosDeCorte.Actual.PesoUnitarioConScrap * MetodosDeCorte.Actual.CCMateriaPrimaUnidadDeMedidaEquivalencia * Aplicacion.CurrencyService.ConvertirAMonedaOficial( MetodosDeCorte.Actual.CCMateriaPrimaCosto, MetodosDeCorte.Actual.CCMateriaPrimaMonedaCostoID ));
            end;
        end
      else
        for I := 0 to SubComponentes.Count - 1 do
          begin
            SubComp := TArticulo( SubComponentes.Objects[I] ); // se trabaja como Tstringlist
            if (SubComp.MetodosDeCorte.Count > 0) and SubComp.MetodosDeCorte.FindDefault then
              if SubComp.MetodosDeCorte.Actual.EsComprado then
                FKMateriaPrimaEnMonedaOficial := FKMateriaPrimaEnMonedaOficial + (Aplicacion.CurrencyService.ConvertirAMonedaOficial( SubComp.K1, SubComp.MonedaK1ID ) * SubComp.TmpCantidadAFabricar)
              else
                FKMateriaPrimaEnMonedaOficial := FKMateriaPrimaEnMonedaOficial + (SubComp.MetodosDeCorte.Actual.PesoUnitarioConScrap * SubComp.MetodosDeCorte.Actual.CCMateriaPrimaUnidadDeMedidaEquivalencia *
                                 SubComp.TmpCantidadAFabricar * Aplicacion.CurrencyService.ConvertirAMonedaOficial( SubComp.MetodosDeCorte.Actual.CCMateriaPrimaCosto, SubComp.MetodosDeCorte.Actual.CCMateriaPrimaMonedaCostoID ) );
              SubComp.NilObject;
          end;
    end;
  Result := FKMateriaPrimaEnMonedaOficial;
end;

procedure TArticulo.SetMaterialID(Value: TObjectID);
begin
  if (Value <> FMaterialID) and assigned(FMaterial) then
    FreeAndNil(FMaterial);
  if (Value <> FMaterialID) and assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);

  FMaterialID := Value;
  GrabarCodigo;
end;

function TArticulo.Getmaterial: TMaterial;
begin
  if not Assigned(FMaterial) then
    GetObject(TMaterial, FMaterial, MaterialID);
  Result := TMaterial(Fmaterial);
end;

procedure TArticulo.SetorigenComercialID(Value: TObjectID);
begin
  if (Value <> ForigenComercialID) and assigned(ForigenComercial) then
    FreeAndNil(ForigenComercial);
  ForigenComercialID := Value;
end;

function TArticulo.GetorigenComercial: TOrigenComercial;
begin
  if not assigned(ForigenComercial) then
    GetObject(TOrigenComercial, ForigenComercial, OrigenComercialID);
  Result := TOrigenComercial(ForigenComercial);
end;

function TArticulo.GetPasosDeFabricacion: TArticuloPasodeFabricacionList;
begin
  if not Assigned(FPasosDeFabricacion) then
    GetList(TPDList(FPasosDeFabricacion), TPDList(TArticuloPasoDeFabricacionList.CreateByArticulo(Self)));
  Result := TArticuloPasoDeFabricacionList(FPasosDeFabricacion);
end;

function TArticulo.GetPesoUnitarioConScrap: TReal;
begin
  Result := MetodoDeCorteDefault.PesoUnitarioConScrap;
end;

function TArticulo.GetPrecios: TArticuloPrecioList;
begin
  if not assigned(FPrecios) then
    GetList(TPDList(FPrecios), TPDList(TArticuloPrecioList.CreateByArticulo(self)));
  Result := TArticuloPrecioList(FPrecios);
end;

procedure TArticulo.SetrubroDeArticuloID(Value: TObjectID);
begin
  if (Value <> FrubroDeArticuloID) and assigned(FrubroDeArticulo) then
    FreeAndNil(FrubroDeArticulo);
  FrubroDeArticuloID := Value;
end;

procedure TArticulo.SetTerminacionDefaultID(const Value: TObjectID);
begin
  if (Value <> FTerminacionDefaultID) and assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  FTerminacionDefaultID := Value;
end;

function TArticulo.GetrubroDeArticulo: TRubroDeArticulo;
begin
  if not assigned(FrubroDeArticulo) then
    GetObject(TRubroDeArticulo, FrubroDeArticulo, rubroDeArticuloID);
  Result := TRubroDeArticulo(FrubroDeArticulo);
end;

function TArticulo.GetSubComponentes: TStringList;
  procedure agregarSubcomponente( _A : TArticulo; _cantidadDeComponentes: TEntero );
  var
    S : TArticulo;
  begin
    if ( _A.componentes.Count = 0 ) then
      try
        S := TArticulo.Create;
        S.Load( _A.ID );
        S.TmpCantidadAFabricar := _cantidadDeComponentes;
        FSubComponentes.AddObject( IntToStr( FSubComponentes.Count + 1 ), S);
      finally
        S.NilObject;
      end
    else
      _A.componentes.First;
      while not _A.componentes.IsLast do
        begin
          agregarSubcomponente( _A.componentes.Actual.Componente, _cantidadDeComponentes * _A.componentes.Actual.Cantidad );
          _A.componentes.Next;
        end;
  end;
begin
  if not assigned( FSubComponentes) then
    begin
      FSubComponentes := TStringList.Create;
      agregarSubcomponente( Self, 1  );
    end;
  Result := FSubComponentes;
end;

procedure TArticulo.SetunidadDeMedidaID(Value: TObjectID);
begin
  if (Value <> FunidadDeMedidaID) and assigned(FunidadDeMedida) then
    FreeAndNil(FunidadDeMedida);

  FunidadDeMedidaID := Value;

end;

function TArticulo.GetunidadDeMedida: TUnidadDeMedida;
begin
  if not assigned(FunidadDeMedida) then
    GetObject(TUnidadDeMedida, FunidadDeMedida, unidadDeMedidaID);

  Result := TUnidadDeMedida(FunidadDeMedida);
end;

function TArticulo.GetComponenteQueLlevaElCunio: TArticulo;
  function ComponenteConCunio(_A: TArticulo): TArticulo;

  begin
    Result := Nil;

    if (_A.componentes.Count = 0) then
    begin
      IF _A.TipoDeComponente.llevaCunio then
        Result := _A;
      exit;
    end;

    _A.componentes.First;
    repeat
      Result := ComponenteConCunio(_A.componentes.Actual.componente);

      _A.componentes.next;
    until _A.componentes.IsLast or (Result <> Nil);
  end;

begin
  Result := ComponenteConCunio(self);
  if (Result = Nil) then
    Result := self;

end;

function TArticulo.Getcomponentes: TArticuloComponenteList;
begin
  if not assigned(Fcomponentes) then
    GetList(TPDList(Fcomponentes), TPDList(TArticuloComponenteList.CreateByArticulo(self)));
  Result := TArticuloComponenteList(Fcomponentes);
end;

function TArticulo.GetComponentesDeMatrices: TMatrizComponenteList;
begin
  if not assigned(FComponentesDeMatrices) then
    GetList(TPDList(FComponentesDeMatrices), TPDList(TMatrizComponenteList.CreateByArticuloMatriz(self)));

  Result := TMatrizComponenteList(FComponentesDeMatrices);

end;

function TArticulo.GetComponentesDesplegados: TArticuloComponenteDesplegadoList;

  Procedure Cargar_componentes(_ACL: TArticuloComponenteList; _PadreID: TObjectID; _Nivel: TEntero);
  var
    AC2: TArticuloComponenteDesplegado;

  Begin
    if (_ACL.Count = 0) then
      exit;

    _ACL.First;
    Repeat
      AC2 := TArticuloComponenteDesplegado.Create;
      AC2.ComponenteDesplegadoPadreID := _PadreID;
      AC2.ArticuloPadreID := _ACL.Actual.articuloID;
      AC2.componenteDesplegadoID := _ACL.Actual.componenteID;
      AC2.orden := _ACL.Actual.orden;
      AC2.Cantidad := _ACL.Actual.Cantidad;
      AC2.ComponenteDesplegadoNivel := _Nivel + 1;
      AC2.Save;
      FComponentesDesplegados.Add(AC2);
      Cargar_componentes(_ACL.Actual.componente.componentes, AC2.ID, AC2.ComponenteDesplegadoNivel);
      AC2.NilObject;
      _ACL.next;
    Until _ACL.IsLast;
  End;

var
  AC: TArticuloComponenteDesplegado;
begin
  if not assigned(FComponentesDesplegados) then
  begin
    FComponentesDesplegados := TArticuloComponenteDesplegadoList.CreateEmpty;
    if componentes.Count > 0 then
    Begin
      componentes.First;
      repeat
        AC := TArticuloComponenteDesplegado.Create;
        AC.componenteDesplegadoID := componentes.Actual.componenteID;
        AC.ArticuloPadreID := componentes.Actual.articuloID;
        AC.orden := componentes.Actual.orden;
        AC.Cantidad := componentes.Actual.Cantidad;
        AC.ComponenteDesplegadoPadreID := ID;
        AC.ComponenteDesplegadoNivel := 1;
        AC.Save;
        FComponentesDesplegados.Add(AC);
        Cargar_componentes(componentes.Actual.componente.componentes, AC.ID, 1);
        AC.NilObject;
        componentes.next;
      until componentes.IsLast;
    End;
  End;
  Result := TArticuloComponenteDesplegadoList(FComponentesDesplegados);

end;

function TArticulo.GetCostos: TArticuloCostoList;
begin
  if not assigned(FCostos) then
    GetList(TPDList(FCostos), TPDList(TArticuloCostoList.CreateByArticulo(self)) );

  Result := TArticuloCostoList(FCostos);
end;

function TArticulo.GetCunioDefault: TCunio;
begin
  if not assigned(FCunioDefault) then
    GetObject(TCunio, FCunioDefault, FCunioDefaultID);
  Result := TCunio(FCunioDefault);
end;

function TArticulo.GetCunioDefaultID: TObjectID;
var
  ACDL : TArticuloCunioDefaultList;
begin
  if ( FCunioDefaultID = nullID ) then
    try
      ACDL := TArticuloCunioDefaultList.CreateByArticuloCunioPredeterminado( self);
      ACDL.First;
      if (ACDL.count>0) then
        FCunioDefaultID:= ACDL.actual.CunioID;
    finally
      FreeAndNil(ACDL);
    end;
  Result := FCunioDefaultID;
end;

function TArticulo.GetCuniosDefault: TArticuloCunioDefaultList;
begin
  if not assigned(FCuniosDefault) then
    GetList(TPDList(FCuniosDefault), TPDList(TArticuloCunioDefaultList.CreateByArticulo(self)));
  Result := TArticuloCunioDefaultList(FCuniosDefault);
end;

procedure TArticulo.GrabarCodigo;
begin
  SetCodigo('');
  If familiaDeArticuloID <> NullID Then
    setcodigo(familiaDeArticulo.codigo);
  setcodigo( inherited getcodigo + '-' + numeroDeArticulo + '/' + StringOfChar('0', 2 - length(IntToStr(medida))) + IntToStr(medida));
  If (TipoDeComponenteID <> NullID) and (TipoDeComponente.FiguraEnCodigoDeFabricado) Then
    setcodigo( inherited getcodigo + '-' + TipoDeComponente.codigo);
  If MaterialID <> NullID Then
    setcodigo( inherited getcodigo + '-' + Material.Codigo);
end;

class function TArticulo.GuardarEnTeamPlace(_A: TArticulo): Boolean;
  Function DevolverUnidadDeMedida : String;
  begin
    if _A.UnidadDeMedidaID <> NullID then
      Result := IntToStr(_A.UnidadDeMedida.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MeasureService.UnidadDeMedidaCantidadDefault.IDTeamplace);
  end;
  Function DevolverImpuestoConcepto : String;
  begin
    if _A.Impuestos.Count > 0 then
      Result := IntToStr(_A.Impuestos.Actual.ImpuestoConcepto.IDTeamplace)
    else
      Result := '1';
  end;
  Function DevolverMoneda : String;
  begin
    if _A.Precios.Count > 0 then
      Result := IntToStr(_A.Precios.Actual.Moneda.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MonedaDefault.IDTeamplace);
  end;
begin                              //aaa
  Result := False;
  if not _A.TipoDeComponente.EsVendible then
    Aplicacion.RaiseExceptionCreate('Solo se pueden migrar a Teamplace Articulos Vendibles');

  if _A.EsInactivo then
    Aplicacion.RaiseExceptionCreate('Solo se pueden migrar a Teamplace Articulos Activos');

  //if (Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TArticuloDM._TeamplaceTableName, TArticuloDM._TeamplaceCodigo + ' = ' + QuotedStr(_A.Codigo) , TArticuloDM._TeamplaceID) <> 0) then
  //  Aplicacion.RaiseExceptionCreate('El Articulo ya se encuentra en la Base de datos de Teamplace');

  if (_A.IDTeamplace <> 0) then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TArticuloDM._TeamplaceTableName,
    ['Nombre'      ,
     'UnidadIDStock1',
     'Codigo' ,
     'Activo',
     'Descripcion' ,
     'EsStockeable',
     'CuentaIDCompra',
     'CuentaIDVenta',
     'ConceptoIDVenta',
     'ConceptoIDCompra',
     'UnidadIDVenta',
     'UnidadIDCompra',
     'RelacionUnidadCompraStock',
     'RelacionUnidadVentaStock',
     'TasaImpositivaIDVenta',
     'TasaImpositivaIDCompra',
     'ProductoTipoID',
     'MonedaID',
     'UnidadValorizacion',
     'NoControlaStock',
     'EsElaborado',
     'ControlImpositivo3'],
    [QuotedStr(_A.Descripcion),
     DevolverUnidadDeMedida,
     QuotedStr(_A.codigo ),
     '1',
     QuotedStr( _A.Descripcion),
     '0',
     '415',
     '310',
     '2',
     '2',
     DevolverUnidadDeMedida,
     DevolverUnidadDeMedida,
     '1',
     '1',
     DevolverImpuestoConcepto,
     DevolverImpuestoConcepto,
     '4',
     DevolverMoneda,
     '0',
     '0',
     '1',
     '0'],
     TArticuloDM._TeamplaceID + '=' + IntToStr(_A.IDTeamplace))
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TArticuloDM._TeamplaceTableName,
    ['Nombre'      ,
     'UnidadIDStock1',
     'Codigo' ,
     'Activo',
     'Descripcion' ,
     'EsStockeable',
     'CuentaIDCompra',
     'CuentaIDVenta',
     'ConceptoIDVenta',
     'ConceptoIDCompra',
     'UnidadIDVenta',
     'UnidadIDCompra',
     'RelacionUnidadCompraStock',
     'RelacionUnidadVentaStock',
     'TasaImpositivaIDVenta',
     'TasaImpositivaIDCompra',
     'ProductoTipoID',
     'MonedaID',
     'UnidadValorizacion',
     'NoControlaStock',
     'EsElaborado',
     'ControlImpositivo3'],
    [QuotedStr(_A.Descripcion),
     DevolverUnidadDeMedida,
     QuotedStr(_A.codigo ),
     '1',
     QuotedStr( _A.Descripcion),
     '0',
     '415',
     '310',
     '2',
     '2',
     DevolverUnidadDeMedida,
     DevolverUnidadDeMedida,
     '1',
     '1',
     DevolverImpuestoConcepto,
     DevolverImpuestoConcepto,
     '4',
     DevolverMoneda,
     '0',
     '0',
     '1',
     '0'])
end;

class procedure TArticulo.HojaDeProducto(_A: TArticulo;_ClntdtstMaster: TClientDataSet);
var
  ClntDtStHojaDeProducto: TClientDataSet;
  ClntDtStCunioElegido: TClientDataSet;
  FrxDBDtStHojaDeProducto: TfrxDBDataset;
  FrxDBDtStCunioElegido: TfrxDBDataset;
  frxDBDtstMaster: TfrxDBDataset;
  FrxHojaDeProducto: TfrxReport;
  frxPDFExport: TFrxPDFExport;

  Procedure CrearComponentes;
  begin
    ClntDtStHojaDeProducto := TClientDataSet.Create(nil);
    ClntDtStHojaDeProducto.LoadFromFile
      (ExtractFilePath(aplicacion.ParametrosDelSistema.
          RutaDeReporteDeHojaDeProducto) + 'Campos\ClntdtStHojaDeProducto.xml');
    ClntDtStHojaDeProducto.Open;

    ClntDtStCunioElegido := TClientDataSet.Create(nil);
    ClntDtStCunioElegido.LoadFromFile
      (ExtractFilePath(aplicacion.ParametrosDelSistema.
          RutaDeReporteDeHojaDeProducto) + 'Campos\ClntdtStCunioElegido.xml');
    ClntDtStCunioElegido.Open;

    FrxDBDtStHojaDeProducto := TfrxDBDataset.Create(nil);
    FrxDBDtStHojaDeProducto.Name := 'frxDBDtstHojaDeProducto';
    FrxDBDtStHojaDeProducto.DataSet := ClntDtStHojaDeProducto;
    FrxDBDtStHojaDeProducto.Open;

    FrxDBDtStCunioElegido := TfrxDBDataset.Create(nil);
    FrxDBDtStCunioElegido.Name := 'frxDBDtstCunioElegido';
    FrxDBDtStCunioElegido.DataSet := ClntDtStCunioElegido;
    FrxDBDtStCunioElegido.Open;

    frxDBDtstMaster := TfrxDBDataset.Create(nil);
    frxDBDtstMaster.Name := 'frxDtstMaster';
    frxDBDtstMaster.DataSet := _ClntdtstMaster;
    frxDBDtstMaster.Open;

    FrxHojaDeProducto := TfrxReport.Create(nil);
    FrxHojaDeProducto.LoadFromFile(aplicacion.ParametrosDelSistema.
        RutaDeReporteDeHojaDeProducto, True);

    FrxHojaDeProducto.DataSets.Add(FrxDBDtStHojaDeProducto);
    FrxHojaDeProducto.Report.DataSets.Add(FrxDBDtStHojaDeProducto);
    FrxHojaDeProducto.DataSets.Add(FrxDBDtStCunioElegido);
    FrxHojaDeProducto.Report.DataSets.Add(FrxDBDtStCunioElegido);
    FrxHojaDeProducto.DataSets.Add(frxDBDtstMaster);
    FrxHojaDeProducto.Report.DataSets.Add(frxDBDtstMaster);

    frxPDFExport := TFrxPDFExport.Create(nil);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.ProtectionFlags := [ePrint];
    frxPDFExport.Title := 'Articulo';
    frxPDFExport.Author := aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := _A.codigo;
    frxPDFExport.Creator := aplicacion.nombre + ' ' + aplicacion.Version +
      ' (' + aplicacion.empresa.Descripcion + ')';
    frxPDFExport.FileName := 'Articulo ' + _A.codigo;
  end;

  procedure DestroyComponentes;
  begin
    FreeAndNil(FrxHojaDeProducto);
    FreeAndNil(ClntDtStHojaDeProducto);
    FreeAndNil(ClntDtStCunioElegido);
    FreeAndNil(FrxDBDtStHojaDeProducto);
    FreeAndNil(FrxDBDtStCunioElegido);
    FreeAndNil(frxDBDtstMaster);
    FreeAndNil(frxPDFExport);
  end;

  procedure CargarDatos;
  var
    CL: TCunioList;
    P: TPicture;
  begin
    try
      aplicacion.ColocarCursorNormal;
      CL := TCunioList.CreateByArticuloAsociado(_A);
      P := TPicture.Create;
      CL.First;
      if (CL.Count = 1) or (TfrmBusquedaDeCunios.Edit(CL, nil,
          'Cuños Permitidos') = mrOk) then
      begin
        if CL.Count > 0 then
        begin
          ClntDtStCunioElegido.Append;
          ClntDtStCunioElegido.FieldByName('ID').Value := CL.Actual.ID;
          ClntDtStCunioElegido.FieldByName('CunioCodigo').AsString := CL.Actual.codigo;
          ClntDtStCunioElegido.FieldByName('CunioDescripcion').AsString := CL.Actual.Descripcion;
          ClntDtStCunioElegido.FieldByName('CunioObservacion').AsString := CL.Actual.observacion;
          ClntDtStCunioElegido.FieldByName('ArticuloID').Value := _A.ID;
          ClntDtStCunioElegido.FieldByName('ArticuloCodigo').Value := _A.codigo;
          ClntDtStCunioElegido.FieldByName('ArticuloDescripcion').Value := _A.Descripcion;
          ClntDtStCunioElegido.FieldByName('ArticuloObservacionesParaFabrica').Value := _A.ObservacionParaProduccion;
          ClntDtStCunioElegido.FieldByName('ArticuloObservacionesParaVentas').Value := _A.ObservacionParaVentas;
          P.LoadFromFile(CL.Actual.archivoDeImagen2D);
          ClntDtStCunioElegido.FieldByName('Imagen').Assign(P.Graphic);
          P.LoadFromFile(CL.Actual.archivoDeImagen);
          ClntDtStCunioElegido.FieldByName('Imagen3d').Assign(P.Graphic);
          P.LoadFromFile(_A.archivoDeImagen);
          ClntDtStCunioElegido.FieldByName('ArticuloImagen').Assign(P.Graphic);
          ClntDtStCunioElegido.Post;
        end;
      end;
    Finally
      if assigned(CL) then
        FreeAndNil(CL);
    end;
    aplicacion.ColocarCursorEspera;

    if _A.ComponentesDesplegados.Count = 0 then
    begin
      ClntDtStHojaDeProducto.Append;
      ClntDtStHojaDeProducto.FieldByName('ID').AsInteger := _A.ID;
      ClntDtStHojaDeProducto.FieldByName('PadreID').AsInteger := NullID;
      ClntDtStHojaDeProducto.FieldByName('ArticuloID').AsInteger := _A.ID;
      ClntDtStHojaDeProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger := NullID;
      ClntDtStHojaDeProducto.FieldByName('Nivel').AsInteger := 1;

      if (ClntDtStHojaDeProducto.FieldByName('ArticuloID').AsInteger <> NullID)
        then
      begin
        ClntDtStHojaDeProducto.FieldByName('ArticuloCodigo').AsString := _A.codigo;
        ClntDtStHojaDeProducto.FieldByName('ArticuloDescripcion').AsString := _A.Descripcion;
      end;
      P.LoadFromFile(_A.archivoDeImagen);
      ClntDtStHojaDeProducto.FieldByName('Imagen').Assign(P.Graphic);
      ClntDtStHojaDeProducto.Post;
    end
    else
    begin
      _A.ComponentesDesplegados.First;
      while not _A.ComponentesDesplegados.IsLast do
      begin
        ClntDtStHojaDeProducto.Append;
        ClntDtStHojaDeProducto.FieldByName('ID').AsInteger :=_A.ComponentesDesplegados.Actual.ID;
        ClntDtStHojaDeProducto.FieldByName('PadreID').AsInteger :=_A.ComponentesDesplegados.Actual.ArticuloPadreID;
        ClntDtStHojaDeProducto.FieldByName('ArticuloID').AsInteger :=_A.ComponentesDesplegados.Actual.componenteDesplegadoID;
        ClntDtStHojaDeProducto.FieldByName('ComponenteDesplegadoPadreID').AsInteger := _A.ComponentesDesplegados.Actual.ComponenteDesplegadoPadreID;
        ClntDtStHojaDeProducto.FieldByName('Nivel').AsInteger :=_A.ComponentesDesplegados.Actual.ComponenteDesplegadoNivel;
        if (ClntDtStHojaDeProducto.FieldByName('PadreID').AsInteger <> NullID)then
        begin
          ClntDtStHojaDeProducto.FieldByName('PadreCodigo').AsString :=_A.ComponentesDesplegados.Actual.ArticuloPadre.codigo;
          ClntDtStHojaDeProducto.FieldByName('PadreDescripcion').AsString := _A.ComponentesDesplegados.Actual.ArticuloPadre.Descripcion;
        end;

        if (ClntDtStHojaDeProducto.FieldByName('ArticuloID').AsInteger <> NullID) then
        begin
          ClntDtStHojaDeProducto.FieldByName('ArticuloCodigo').AsString :=_A.ComponentesDesplegados.Actual.ComponenteDesplegado.codigo;
          ClntDtStHojaDeProducto.FieldByName('ArticuloDescripcion').AsString :=_A.ComponentesDesplegados.Actual.ComponenteDesplegado.Descripcion;
        end;
        P.LoadFromFile(_A.ComponentesDesplegados.Actual.ComponenteDesplegado.archivoDeImagen);
        ClntDtStHojaDeProducto.FieldByName('Imagen').Assign(P.Graphic);
        P.LoadFromFile(_A.ComponentesDesplegados.Actual.ArticuloPadre.archivoDeImagen);
        ClntDtStHojaDeProducto.FieldByName('ImagenPadre').Assign(P.Graphic);
        ClntDtStHojaDeProducto.Post;
        _A.ComponentesDesplegados.next;
      end;
    end;
  end;
begin
  try
    aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;
    FrxHojaDeProducto.LoadFromFile(aplicacion.ParametrosDelSistema.RutaDeReporteDeHojaDeProducto, True);
    // frxHojaDeProducto.DesignReport;
    FrxHojaDeProducto.ShowReport;
  finally
    DestroyComponentes;
    aplicacion.ColocarCursorNormal;
  end;
end;

procedure TArticulo.SetnumeroDeArticulo(const Value: TString);
begin
  FnumeroDeArticulo := Value;
  GrabarCodigo;
end;

procedure TArticulo.Setmedida(const Value: TEntero);
begin
  Fmedida := Value;
  GrabarCodigo;
end;

procedure TArticulo.setMonedaK1ID(const Value: TObjectID);
begin
  if Assigned( FMonedaK1 ) and (Value<>FMonedaK1ID) then
    FreeAndNil( FMonedaK1);
  FMonedaK1ID := Value;
end;

function TArticulo.GetTerminacionDefault: TTerminacion;
begin
  if not assigned(FTerminacionDefault) then
    GetObject(TTerminacion, FTerminacionDefault, TerminacionDefaultID);
  Result := TTerminacion(FTerminacionDefault);
end;

function TArticulo.GetTipoDeComponente: TTipoDeComponente;
begin
  if not assigned(FTipoDeComponente) then
    GetObject(TTipoDeComponente, FTipoDeComponente, TipoDeComponenteID);
  Result := TTipoDeComponente(FTipoDeComponente);
end;

procedure TArticulo.SettipoDeComponente(const Value: TObjectID);
begin
  if (Value <> FTipoDeComponenteID) and assigned(FTipoDeComponente) then
    FreeAndNil(FTipoDeComponente);

  FTipoDeComponenteID := Value;
  GrabarCodigo;
end;

function TArticulo.getcodigo: TString;
begin
  inherited getcodigo;
  Result := trim(Fcodigo);
end;

function TArticulo.GetTraducciones: TArticuloTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TArticuloTraduccionList.CreateByArticulo(self)));

  Result := TArticuloTraduccionList(FTraducciones);
end;

function TArticulo.Save: Boolean;
var
  AI : TArticuloImpuesto;
  ICL : TImpuestoConceptoList;
begin
  FDescripcionComponentesDeMatriz := null; // es para que la vuelva a generar

  if FfechaDeCreacion = null then
    FfechaDeCreacion := aplicacion.DateTimeService.FechaHoraActual;

  if (FamiliaDeArticuloID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar una familia de articulo.');

  if (MaterialID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar un material.');

  if (RubroDeArticuloID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar un rubro de articulo.');

  if (TipoDeComponenteID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar un tipo de componente.');

  if (OrigenComercialID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar origen comercial.');

  if (UnidadDeMedidaID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar una unidad de medida de cantidades.');

  if (UnidadDeMedidaPesoID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar una unidad de medida de peso.');

  if (CategoriaDeTerminacionPosibleID = NullID) then
    Aplicacion.RaiseExceptionCreate('Articulo: ' + codigo + ' .Debe asignar una categoría de terminaciones.');

  Result := inherited Save;

  if ( Impuestos.Count = 0 ) and ImpuestosActivos then
    try
      ICL := TImpuestoConceptoList.CreateByDefaultFabricados(True);
      if ( ICL.Count > 0 ) then
        begin
          ICL.First;
          AI                    := TArticuloImpuesto.Create;
          AI.ArticuloID         := Self.ID;
          AI.ImpuestoConceptoID := ICL.actual.ID;
          AI.Save;
          Impuestos.Add(AI);
        end;
    finally
      FreeAndNil(ICL);
      AI.NilObject;
    end;
end;

procedure TArticulo.LimpiarComponentesDesplegados;
begin
  if assigned(FComponentesDesplegados) then
    FreeAndNil(FComponentesDesplegados);

end;

procedure TArticulo.LimpiarDescripcionComponentesMatrices;
begin
  FDescripcionComponentesDeMatriz := null;
end;

function TArticulo.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID ; _Moneda: TMoneda; _C : TCunio ): TReal;
var
  pTipoDePrecioID: TObjectID;
  pCID           : TObjectID;
begin
  Result := 0;
  pTipoDePrecioID := NullID;
  pTipoDePrecioID := Aplicacion.DataService.TipoDePrecioDeCunioArticuloID;
  pCID            := NullId;
  if Assigned( _C ) then
    pCID            := _C.ID;
  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TArticuloDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          pCID,
                                                          pTipoDePrecioID,
                                                          FamiliaDeArticuloID,
                                                          MaterialID,
                                                          false);
end;

class Procedure TArticulo.Reporte(_A: TArticulo);
var
  ClntDtStReporte: TClientDataSet;
  FrxDBDtStReporte: TfrxDBDataset;
  FrxReporte: TfrxReport;
  frxPDFExport: TFrxPDFExport;

  Procedure CrearComponentes;
  begin
    ClntDtStReporte := TClientDataSet.Create(nil);
    ClntDtStReporte.LoadFromFile(ExtractFilePath(aplicacion.ParametrosDelSistema.RutaDeReporteDeFichaDeArticulos)+ 'Campos\ClntdtStReporteArticulos.xml');
    ClntDtStReporte.Open;
    FrxDBDtStReporte := TfrxDBDataset.Create(nil);
    FrxDBDtStReporte.Name := 'frxDBDtstArticulos';
    FrxDBDtStReporte.DataSet := ClntDtStReporte;
    FrxDBDtStReporte.Open;
    FrxReporte := TfrxReport.Create(nil);
    FrxReporte.LoadFromFile(aplicacion.ParametrosDelSistema.RutaDeReporteDeFichaDeArticulos, True);
    FrxReporte.DataSets.Add(FrxDBDtStReporte);
    FrxReporte.Report.DataSets.Add(FrxDBDtStReporte);
    frxPDFExport := TFrxPDFExport.Create(nil);
    frxPDFExport.Compressed := True;
    frxPDFExport.EmbeddedFonts := True;
    frxPDFExport.ProtectionFlags := [ePrint];
    frxPDFExport.Title := 'Articulo';
    frxPDFExport.Author := aplicacion.Usuario.nombreCompleto;
    frxPDFExport.Subject := _A.codigo;
    frxPDFExport.Creator := aplicacion.nombre + ' ' + aplicacion.Version + ' (' + aplicacion.empresa.Descripcion + ')';
    frxPDFExport.FileName := 'Articulo ' + _A.codigo;
  end;

  procedure DestroyComponentes;
  begin
    FreeAndNil(FrxReporte);
    FreeAndNil(ClntDtStReporte);
    FreeAndNil(FrxDBDtStReporte);
    FreeAndNil(frxPDFExport);
  end;

  procedure CargarDatos;
  var
    P: TPicture;
  begin
    try
      ClntDtStReporte.Append;
      ClntDtStReporte.FieldByName('ID').Value := _A.ID;
      ClntDtStReporte.FieldByName('Codigo').AsString := _A.codigo;
      ClntDtStReporte.FieldByName('Descripcion').AsString := _A.Descripcion;
      ClntDtStReporte.FieldByName('esInactivo').Value := _A.EsInactivo;
      ClntDtStReporte.FieldByName('TipoDeComponenteID').Value := _A.TipoDeComponenteID;

      if (ClntDtStReporte.FieldByName('TipoDeComponenteID').Value <> NullID) then
      begin
        ClntDtStReporte.FieldByName('TipoDeComponente').AsString := '(' + _A.TipoDeComponente.codigo + ') ' + _A.TipoDeComponente.Descripcion;
        ClntDtStReporte.FieldByName('descripcionComercial').AsString := _A.TipoDeComponente.descripcionComercial;
        ClntDtStReporte.FieldByName('esVendible').Value := _A.TipoDeComponente.esVendible;
        ClntDtStReporte.FieldByName('esOpcional').Value := _A.TipoDeComponente.esOpcional;
        ClntDtStReporte.FieldByName('LlevaCunio').Value := _A.TipoDeComponente.llevaCunio;
      end;

      // estos deben figurar para registros nuevos
      ClntDtStReporte.FieldByName('FamiliaDeArticuloID').Value := _A.familiaDeArticuloID;
      ClntDtStReporte.FieldByName('MaterialDeArticuloID').Value := _A.MaterialID;
      ClntDtStReporte.FieldByName('Medida').Value := _A.medida;
      ClntDtStReporte.FieldByName('NumeroDeArticulo').AsString := _A.numeroDeArticulo;
      ClntDtStReporte.FieldByName('NumeroDeOrden').Value := _A.numeroDeOrden;
      ClntDtStReporte.FieldByName('OrigenComercialID').Value := _A.origenComercialID;
      ClntDtStReporte.FieldByName('RubroDeArticuloID').Value := _A.rubroDeArticuloID;
      ClntDtStReporte.FieldByName('TiempoEstimadoEnDias').Value := _A.tiempoEstimadoEnDias;
      ClntDtStReporte.FieldByName('UnidadDeMedidaID').Value := _A.unidadDeMedidaID;
      ClntDtStReporte.FieldByName('UnidadesPorEnvase').Value := _A.unidadesPorEnvase;
      ClntDtStReporte.FieldByName('PesoNeto').Value := _A.pesoNeto;
      ClntDtStReporte.FieldByName('PesoBruto').Value := _A.pesoBruto;
      ClntDtStReporte.FieldByName('UnidadDeMedidaPesoID').Value := _A.unidadDeMedidaPesoID;
      ClntDtStReporte.FieldByName('CatDeTermsPosiblesID').Value := _A.CategoriaDeTerminacionPosibleID;
      ClntDtStReporte.FieldByName('TerminacionDefaultID').Value := _A.TerminacionDefaultID;
      ClntDtStReporte.FieldByName('CunioDefaultID').Value := _A.cunioDefaultID;
      ClntDtStReporte.FieldByName('transfiereAtributos').Value := _A.TransfiereAtributos;
      if (ClntDtStReporte.FieldByName('CatDeTermsPosiblesID').Value <> NullID)
        then
        ClntDtStReporte.FieldByName('CategoriaDeTerminacion').AsString := _A.CategoriaDeTerminacionPosible.Descripcion;

      if (ClntDtStReporte.FieldByName('TerminacionDefaultID').Value <> NullID) then
      begin
        ClntDtStReporte.FieldByName('TerminacionDefaultCodigo').AsString := _A.TerminacionDefault.codigo;
        ClntDtStReporte.FieldByName('TerminacionDefaultDescripcion').AsString := _A.TerminacionDefault.Descripcion;
      end;

      if (ClntDtStReporte.FieldByName('CunioDefaultID').Value <> NullID) then
      begin
        ClntDtStReporte.FieldByName('cunioDefaultCodigo').AsString := _A.cunioDefault.codigo;
        ClntDtStReporte.FieldByName('CunioDefaultDescripcion').AsString := _A.cunioDefault.Descripcion;
      end;

      if (ClntDtStReporte.FieldByName('FamiliaDeArticuloCodigo').AsString <> null) then
        begin
          ClntDtStReporte.FieldByName('FamiliaDeArticuloCodigo').AsString := _A.familiaDeArticulo.codigo;
          ClntDtStReporte.FieldByName('FamiliaDeArticuloDescripcion').AsString := _A.familiaDeArticulo.Descripcion;
        end;

      if (ClntDtStReporte.FieldByName('MaterialDeArticuloCodigo').AsString <> null) then
      begin
        ClntDtStReporte.FieldByName('MaterialDeArticuloCodigo').AsString := _A.Material.codigo;
        ClntDtStReporte.FieldByName('MaterialDeArticuloDescripcion').AsString := _A.Material.Descripcion;
      end;

      if (ClntDtStReporte.FieldByName('OrigenComercialDescripcion').AsString <> null) then
        ClntDtStReporte.FieldByName('OrigenComercialDescripcion').AsString := _A.origenComercial.Descripcion;

      if (ClntDtStReporte.FieldByName('RubroDeArticuloCodigo').AsString <> null) then
      begin
        ClntDtStReporte.FieldByName('RubroDeArticuloCodigo').AsString := _A.rubroDeArticulo.codigo;
        ClntDtStReporte.FieldByName('RubroDeArticuloDescripcion').AsString := _A.rubroDeArticulo.Descripcion;
      end;

      if (ClntDtStReporte.FieldByName('UnidadDeMedidaDescripcion').AsString <> null) then
      begin
        ClntDtStReporte.FieldByName('UnidadDeMedidaDescripcion').AsString := _A.unidadDeMedida.Descripcion;
        ClntDtStReporte.FieldByName('UnidadDeMedidaCodigo').AsString := _A.unidadDeMedida.codigo;
      end;

      if (ClntDtStReporte.FieldByName('UnidadDeMedidaDePesoCodigo').AsString <> null) then
      begin
        ClntDtStReporte.FieldByName('UnidadDeMedidaDePesoCodigo').AsString := _A.unidadDeMedidaPeso.codigo;
        ClntDtStReporte.FieldByName('UnidadDeMedidaDePesoDescripcion').AsString := _A.unidadDeMedidaPeso.Descripcion;
      end;
      P := TPicture.Create;
      P.LoadFromFile(_A.archivoDeImagen);
      ClntDtStReporte.FieldByName('Imagen').Assign(P.Graphic);
      ClntDtStReporte.Post;
    finally
      FreeAndNil(P);
    end;
  end;

begin
  try
    aplicacion.ColocarCursorEspera;
    CrearComponentes;
    CargarDatos;
    FrxReporte.LoadFromFile(aplicacion.ParametrosDelSistema.RutaDeReporteDeFichaDeArticulos, True);
    FrxReporte.ShowReport;
  finally
    DestroyComponentes;
    aplicacion.ColocarCursorNormal
  end;
end;


function TArticulo.GetMatricesAsociadas: TMatrizArticuloAsociadoList;
begin
  if not assigned(FMatricesAsociadasList) then
    GetList(TPDList(FMatricesAsociadasList), TPDList(TMatrizArticuloAsociadoList.CreateByArticulo(self)));
  Result := TMatrizArticuloAsociadoList(FMatricesAsociadasList);

end;

function TArticulo.GetMatricesColocadoras: TArticuloList;
begin
  if not assigned(FMatricesColocadoras) then
  begin
    if self.familiaDeArticulo.EsMatriz then
      GetList(TPDList(FMatricesColocadoras), TPDList(TArticuloList.CreateEmpty))
    else
      GetList(TPDList(FMatricesColocadoras), TPDList(TArticuloList.CreateMatricesByArticulo(self)));
  end;
  Result := TArticuloList(FMatricesColocadoras);
end;

function TArticulo.GetMatrizArticulosAsociados: TMatrizArticuloAsociadoList;
begin
  if not Assigned(FMatrizArticulosAsociados) then
    GetList(TPDList(FMatrizArticulosAsociados), TPDList(TMatrizArticuloAsociadoList.CreateByMatriz(Self)));
  Result := TMatrizArticuloAsociadoList(FMatrizArticulosAsociados);
end;

function TArticulo.GetMetodoDeCorteDefault: TArticuloMetodoDeCorte;
begin
  if not Assigned(FMetodoDeCorteDefault) then
    if not MetodosDeCorte.FindDefault then
      MetodosDeCorte.First;
    GetObject(TArticuloMetodoDeCorte, FMetodoDeCorteDefault, MetodosDeCorte.Actual.ID);
  Result := TArticuloMetodoDeCorte(FMetodoDeCorteDefault);
end;

function TArticulo.GetMetodosDeCorte: TArticuloMetodoDeCorteList;
begin
  if not Assigned(FMetodosDeCorte) then
    GetList(TPDList(FMetodosDeCorte), TPDList(TArticuloMetodoDeCorteList.CreateByArticulo(Self, false)));
  Result := TArticuloMetodoDeCorteList(FMetodosDeCorte);
end;

function TArticulo.GetMonedaK1: TMoneda;
begin
  if not assigned(FMonedaK1) then
    GetObject(TMoneda, FMonedaK1, MonedaK1ID);
  Result := TMoneda(FMonedaK1);
end;

procedure TArticulo.Delete;
Var
  CC: TCunioArticuloPosibleList;
  ACL: TArticuloComponenteList;
begin
  if self.componentes.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los componentes asignados a este articulo antes de eliminarlo');

  if self.MetodosDeCorte.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los métodos de corte asignados a este articulo antes de eliminarlo');

  if self.Costos.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los costos asignados a este articulo antes de eliminarlo');

  if self.MatrizArticulosAsociados.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los artículos asociados a la matriz antes de eliminarla');

  Try
    ACL := TArticuloComponenteList.CreateByArticuloComponente(self);
    if ACL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar un articulo que esta siendo utilizado como componente de otro');

    CC := TCunioArticuloPosibleList.CreateByArticulo(self);
    If CC.Count > 0 then
      CC.DeleteAll;
  Finally
    FreeAndNil(ACL);
  End;

  inherited;
end;


destructor TArticulo.Destroy;
begin
  if assigned(FComponentesDesplegados) then
  begin
    FComponentesDesplegados.ApplyUpdates;
    FreeAndNil(FComponentesDesplegados);
  end;
  FreeObjectsFromMemory;
  inherited;
end;

procedure TArticulo.FreeObjectsFromMemory;
begin
  if assigned(FSubComponentes) then
    FreeAndNil(FSubComponentes);
  if Assigned(FFamiliaDeArticulo) then
    FreeAndNil(FFamiliaDeArticulo);
  if Assigned(FFamiliaDeArticulo) then
    FreeAndNil(FFamiliaDeArticulo);
  if Assigned(ForigenComercial) then
    FreeAndNil(ForigenComercial);
  if Assigned(FrubroDeArticulo) then
    FreeAndNil(FrubroDeArticulo);
  if Assigned(FunidadDeMedida) then
    FreeAndNil(FunidadDeMedida);
  if Assigned(FMetodosDeCorte) then
    FreeAndNil(FMetodosDeCorte);
  if Assigned(Fcomponentes) then
    FreeAndNil(Fcomponentes);
  if Assigned(FCostos) then
    FreeAndNil(FCostos);
  if Assigned(FTipoDeComponente) then
    FreeAndNil(FTipoDeComponente);
  if Assigned(FMatrizArticulosAsociados) then
    FreeAndNil(FMatrizArticulosAsociados);
  if Assigned(FunidadDeMedidaPeso) then
    FreeAndNil(FunidadDeMedidaPeso);
  if Assigned(FCategoriaDeTerminacionPosible) then
    FreeAndNil(FCategoriaDeTerminacionPosible);
  if Assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  if Assigned(FCunioDefault) then
    FreeAndNil(FCunioDefault);
  if Assigned(FTraducciones) then
    FreeAndNil(FTraducciones);
  if Assigned(FMatricesAsociadasList) then
    FreeAndNil(FMatricesAsociadasList);
  if Assigned(FComponentesDeMatrices) then
    FreeAndNil(FComponentesDeMatrices);
  if Assigned(FComponentesDesplegados) then
    FreeAndNil(FComponentesDesplegados);
  if Assigned(FMatricesColocadoras) then
    FreeAndNil(FMatricesColocadoras);
  if Assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  if Assigned(FPrecios) then
    FreeAndNil(FPrecios);
end;

function TArticulo.GetunidadDeMedidaPeso: TUnidadDeMedida;
begin
  if not assigned(FunidadDeMedidaPeso) then
    GetObject(TUnidadDeMedida, FunidadDeMedidaPeso, unidadDeMedidaPesoID);
  Result := TUnidadDeMedida(FunidadDeMedidaPeso);
end;

procedure TArticulo.SetunidadDeMedidaPesoID(const Value: TObjectID);
begin
  if (Value <> FunidadDeMedidaPesoID) and assigned(FunidadDeMedidaPeso) then
    FreeAndNil(FunidadDeMedidaPeso);
  FunidadDeMedidaPesoID := Value;
end;

Function TArticulo.GetCategoriaDeTerminacionPosible : TCategoriaDeTerminacionesPosibles;
begin
  if not assigned(FCategoriaDeTerminacionPosible) then
    GetObject(TCategoriaDeTerminacionesPosibles, FCategoriaDeTerminacionPosible, FCategoriaDeTerminacionPosibleID);
  Result := TCategoriaDeTerminacionesPosibles(FCategoriaDeTerminacionPosible);
end;

function TArticulo.GetCentroDeCosto: TCentroDeCosto;
begin
  if not assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto, FCentroDeCosto, Material.CentroDeCostoID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

procedure TArticulo.SetCategoriaDeTerminacionPosibleID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeTerminacionPosibleID) and assigned(FCategoriaDeTerminacionPosible) then
    FreeAndNil(FCategoriaDeTerminacionPosible);
  FCategoriaDeTerminacionPosibleID := Value;
end;

procedure TArticulo.SetEmbalajeDefaultID(const Value: TObjectID);
begin
  if (Value <> FEmbalajeDefaultID) and Assigned(FEmbalajeDefault) then
    FreeAndNil(FEmbalajeDefault);
  FEmbalajeDefaultID := Value;
end;

function TArticulo.GetarchivoDeImagen: TString;
  function NombreDeArchivo: String;
  begin
      Result := FamiliaDeArticulo.Codigo;
      Result := Result + '-' + NumeroDeArticulo;
      Result := Result + '/' + Aplicacion.TextService.RellenarCodigo(IntToStr(Medida),2);
      if TipoDeComponente.FiguraEnCodigoDeFabricado then
        Result := Result + '-' + TipoDeComponente.Codigo;
  end;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagen = null) then
    try
      FL := TFotoList.CreateByArticuloCodigo(Codigo, 'articulo');
      if (FL.Count=0) then
        FL := TFotoList.CreateByArticuloCodigo(NombreDeArchivo, 'articulo');

      if FL.Count > 0 then
        begin
          FL.First;
          FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
        end
      else
        FarchivoDeImagen := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TArticulo.GetarchivoDeImagenWeb: TString;
  function NombreDeArchivo: String;
  begin
    Result := familiaDeArticulo.codigo;
    Result := Result + '-' + numeroDeArticulo;
    Result := Result + '/' + aplicacion.TextService.RellenarCodigo(IntToStr(medida), 2);
    if TipoDeComponente.FiguraEnCodigoDeFabricado then
      Result := Result + '-' + TipoDeComponente.codigo;
  end;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagenWeb = null) then
    try
      FL := TFotoList.CreateByArticuloCodigo( codigo, 'articulo');
      if (FL.Count=0) then
        FL := TFotoList.CreateByArticuloCodigo(NombreDeArchivo, 'articulo');

      if FL.Count > 0 then
        begin
          FL.First;
          FarchivoDeImagenWeb := FL.Actual.RutaDeArchivoWeb;
        end
      else
        FarchivoDeImagenWeb := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagenWeb;
end;

function TArticulo.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenArticulos;
  Result := FarchivoSinImagen;
end;

function TArticulo.GetArchivoSinImagenWeb: TString;
begin
  if (FarchivoSinImagenWeb = Null) then
    begin
      FarchivoSinImagenWeb := LowerCase(Aplicacion.ArchivoSinImagenArticulos);
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FArchivoSinImagenWeb,LowerCase('\\srv_aph\usuarios\imagenes'),'http://w3.apholos.com');
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FarchivoSinImagenWeb,'\','/');
    end;
  Result := LowerCase(FarchivoSinImagenWeb);
end;

function TArticulo.GetAsumePrecioDelCunio: TBoolean;
begin
  if (fAsumePrecioDelCunio = Null) and (FTipoDeComponenteID <> NullID) then
    fAsumePrecioDelCunio := TipoDeComponente.AsumeElPrecioDelCunio;
  Result := fAsumePrecioDelCunio;
end;

{ TArticuloDM }
class function TArticuloDM.TableName: string;
begin
  Result := 'Articulos';
end;

class function TArticuloDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TArticuloDM.ID_FieldName: string;
begin
  Result := 'ArticuloID';
end;

procedure TArticuloDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticulo(PDObject) do
    begin
      StringField[_Descripcion]                               := Descripcion;
      StringField[_Codigo]                                    := Fcodigo;
      IDField[_FamiliaDeArticuloID]                           := FfamiliaDeArticuloID;
      IDField[_MaterialID]                                    := FMaterialID;
      IntegerField[_medida]                                   := Fmedida;
      StringField[_NumerodeArticulo]                          := FnumeroDeArticulo;
      FloatField[_numeroDeOrden]                              := FnumeroDeOrden;
      IDField[_OrigenComercialID]                             := ForigenComercialID;
      IDField[_RubroDeArticuloID]                             := FrubroDeArticuloID;
      IDField[_UnidadDeMedidaID]                              := FunidadDeMedidaID;
      IntegerField[_UnidadesPorEnvase]                        := FunidadesPorEnvase;
      IntegerField[_tiempoEstimadoEnDias]                     := FtiempoEstimadoEnDias;
      IDField[_TipoDeComponenteID]                            := FTipoDeComponenteID;
      IDField[_UnidadDeMedidaPesoID]                          := FunidadDeMedidaPesoID;
      FloatField[_PesoNeto]                                   := Fpesoneto;
      FloatField[_PesoBruto]                                  := FpesoBruto;
      IDField[_CatDeTermsPosiblesID]                          := FCategoriaDeTerminacionPosibleID;
      IDField[_TerminacionDefaultID]                          := FTerminacionDefaultID;
//      IDField[_CunioDefaultID]                                := FCunioDefaultID;
      BooleanField[_esInactivo]                               := FEsInactivo;
      BooleanField[_transfiereAtributos]                      := FTransfiereAtributos;
      BooleanField[_MostrarComponentesDefaultEnCustomizacion] := FMostrarComponentesDefaultEnCustomizacion;
      StringField[_ObservacionParaVentas]                     := FObservacionParaVentas;
      StringField[_ObservacionParaProduccion]                 := FObservacionParaProduccion;
      DateTimeField[_fechaDeCreacion]                         := FfechaDeCreacion;
      StringField[_DescripcionComponentesDeMatriz]            := FDescripcionComponentesDeMatriz;
      BooleanField[_HeredaCunioDelProductoFinal]              := FHeredaCunioDelProductoFinal;
      BooleanField[_NoCambiarCunioDefault]                    := FNoCambiarCunioDefault;
      BooleanField[_NoCambiarTerminacionDefault]              := FNoCambiarTerminacionDefault;
      BooleanField[_NoPermitirCustomizacion]                  := FNoPermitirCustomizacion;
      FloatField[_K1]                                         := FK1;
      IDField[_MonedaK1ID]                                    := FMonedaK1ID;
      BooleanField[_ImpuestosActivos]                         := FImpuestosActivos;
      BooleanField[_EvaluarProductoCompleto]                  := FEvaluarProductoCompleto;
      IDField[_EmbalajeDefaultID]                             := FEmbalajeDefaultID;
    end;
end;

procedure TArticuloDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticulo(PDObject) do
    begin
      Fdescripcion                              := StringField[_Descripcion];
      Fcodigo                                   := StringField[_Codigo];
      FfamiliaDeArticuloID                      := IDField[_FamiliaDeArticuloID];
      FmaterialID                               := IDField[_MaterialID];
      Fmedida                                   := IntegerField[_medida];
      FnumeroDeArticulo                         := StringField[_NumerodeArticulo];
      FnumeroDeOrden                            := FloatField[_numeroDeOrden];
      ForigenComercialID                        := IDField[_OrigenComercialID];
      FrubroDeArticuloID                        := IDField[_RubroDeArticuloID];
      FunidadDeMedidaID                         := IDField[_UnidadDeMedidaID];
      FunidadesPorEnvase                        := IntegerField[_UnidadesPorEnvase];
      FtiempoEstimadoEnDias                     := IntegerField[_tiempoEstimadoEnDias];
      FTipoDeComponenteID                       := IDField[_TipoDeComponenteID];
      Fpesoneto                                 := FloatField[_PesoNeto];
      FpesoBruto                                := FloatField[_PesoBruto];
      FunidadDeMedidaPesoID                     := IDField[_UnidadDeMedidaPesoID];
      FCategoriaDeTerminacionPosibleID          := IDField[_CatDeTermsPosiblesID];
      FTerminacionDefaultID                     := IDField[_TerminacionDefaultID];
//      FCunioDefaultID                           := IDField[_CunioDefaultID];
      FEsInactivo                               := BooleanField[_esInactivo];
      FTransfiereAtributos                      := BooleanField[_transfiereAtributos];
      FMostrarComponentesDefaultEnCustomizacion := BooleanField[_MostrarComponentesDefaultEnCustomizacion];
      FObservacionParaVentas                    := StringField[_ObservacionParaVentas];
      FObservacionParaProduccion                := StringField[_ObservacionParaProduccion];
      FfechaDeCreacion                          := DateTimeField[_fechaDeCreacion];
      FDescripcionComponentesDeMatriz           := StringField[_DescripcionComponentesDeMatriz];
      FHeredaCunioDelProductoFinal              := BooleanField[_HeredaCunioDelProductoFinal];
      FNoCambiarCunioDefault                    := BooleanField[_NoCambiarCunioDefault];
      FNoCambiarTerminacionDefault              := BooleanField[_NoCambiarTerminacionDefault];
      FNoPermitirCustomizacion                  := BooleanField[_NoPermitirCustomizacion];
      FK1                                       := FloatField[_K1];
      FMonedaK1ID                               := IDField[_MonedaK1ID];
      FImpuestosActivos                         := BooleanField[_ImpuestosActivos];
      FEvaluarProductoCompleto                  := BooleanField[_EvaluarProductoCompleto];
      FEmbalajeDefaultID                        := IDField[_EmbalajeDefaultID];
    end;
end;

{ TArticuloList }
function TArticuloList.GetActual: TArticulo;
begin
  Result := TArticulo(CurrentObject);
end;

function TArticuloList.CreateNewObject: TPDObject;
begin
  Result := TArticulo.Create;
end;

constructor TArticuloList.CreateAll(_SoloActivos: Boolean; _SoloVendibles: Boolean );
  Function WhereString: String;
  begin
    result := '';
    if _soloVendibles then
      result :='(tablename.'+ TArticuloDM._TipoDeComponenteID + ' in ( Select '+ TTipoDeComponenteDM.ID_FieldName +' from  '+ TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + ' = 1))';
  end;
  Function OrderBy : String;
  begin
    Result := 'tablename.'+TArticuloDM._FamiliaDeArticuloID  + ', ' +  'tablename.'+TArticuloDM._MaterialID            + ', ' +
              'tablename.'+TArticuloDM._TipoDeComponenteID   + ', ' +  'tablename.'+TArticuloDM._OrigenComercialID     + ', ' +
              'tablename.'+TArticuloDM._RubroDeArticuloID    + ', ' +  'tablename.'+TArticuloDM._UnidadDeMedidaID      + ', ' +
              'tablename.'+TArticuloDM._UnidadDeMedidaPesoID + ', ' +  'tablename.'+TArticuloDM._CatDeTermsPosiblesID;
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos, OrderBy));
end;

constructor TArticuloList.CreateAll(_SoloActivos, _SoloVendibles: Boolean; _StartRow, _Rows: Integer);
  Function WhereString: String;
  begin
    result := '';
    if _soloVendibles then
      result :='(tablename.'+ TArticuloDM._TipoDeComponenteID + ' in ( Select '+ TTipoDeComponenteDM.ID_FieldName +' from  '+ TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + ' = 1))';
  end;
  Function OrderBy : String;
  begin
    Result := 'tablename.'+TArticuloDM._FamiliaDeArticuloID  + ', ' +  'tablename.'+TArticuloDM._MaterialID            + ', ' +
              'tablename.'+TArticuloDM._TipoDeComponenteID   + ', ' +  'tablename.'+TArticuloDM._OrigenComercialID     + ', ' +
              'tablename.'+TArticuloDM._RubroDeArticuloID    + ', ' +  'tablename.'+TArticuloDM._UnidadDeMedidaID      + ', ' +
              'tablename.'+TArticuloDM._UnidadDeMedidaPesoID + ', ' +  'tablename.'+TArticuloDM._CatDeTermsPosiblesID;
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TArticuloList.CreateAllBusqueda(_SoloActivos: Boolean);
  function OrderBy: string;
  begin
    Result := 'tablename.'+TArticuloDM._FamiliaDeArticuloID + ', ' + 'tablename.'+TArticuloDM._MaterialID + ', ' + 'tablename.'+TArticuloDM._TipoDeComponenteID;
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, '', _SoloActivos, OrderBy));
end;

constructor TArticuloList.CreateByTipoDeComponenteVendible(_SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := 'tablename.'+TArticuloDM._TipoDeComponenteID + ' in ( Select '+ TTipoDeComponenteDM.ID_FieldName +' from ' + TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + ' = 1) ';
  end;
  Function OrderBy : String;
  begin
    Result := 'tablename.'+TArticuloDM._FamiliaDeArticuloID + ', ' + 'tablename.'+TArticuloDM._MaterialID + ', ' + 'tablename.' + TArticuloDM._TipoDeComponenteID;
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TArticuloList.CreateEmpty;
begin
  inherited Create(TArticulo, TArticuloDM.CreateEmpty);
end;

constructor TArticuloList.CreateMatricesByArticulo(_A: TArticulo;_SoloActivos:Boolean);
  function WhereString: String;
  Begin
    Result := '('+ TArticuloDM.Tablename+'.'+ TArticuloDM.ID_FieldName +  ' in ( select ';
    Result := Result + TMatrizArticuloAsociadoDM._ArticuloPadreID + ' from ' + TMatrizArticuloAsociadoDM.TableName;
    Result := Result + ' where (' + TMatrizArticuloAsociadoDM._ArticuloAsociadoID + ' = ' + IntToStr(_A.ID) + ')))';
  End;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TArticuloList.CreateByArticulosPadre(_SoloActivos:Boolean);
  function WhereString : string;
  begin
    Result := '(' + 'tablename.'+TArticuloDM.ID_FieldName + ' in ( select ' + TArticuloComponenteDM._articuloID + ' from ' + TArticuloComponenteDM.TableName + ') and ';
    Result := Result + 'tablename.'+TArticuloDM.ID_FieldName + ' not in ( select ' + TArticuloComponenteDM._ComponenteID + ' from ' + TArticuloComponenteDM.TableName + '))';
    Result := Result + ' or (' + 'tablename.'+TArticuloDM.ID_FieldName + ' not in ( select ' + TArticuloComponenteDM._articuloID + ' from ' +  TArticuloComponenteDM.TableName + ') and ';
    Result := Result + 'tablename.'+TArticuloDM.ID_FieldName + ' not in ( select ' + TArticuloComponenteDM._ComponenteID + ' from ' + TArticuloComponenteDM.TableName + '))';
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos, TArticuloDM._Codigo ));
end;

constructor TArticuloList.CreateByCategoriaDeTerminacion(_C: TCategoriaDeTerminacionesPosibles;_SoloActivos:Boolean);
  Function WhereString : String;
  begin
    Result := TArticuloDM.TableName +'.'+ TArticuloDM._CatDeTermsPosiblesID + '=' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TArticuloList.CreateByCodigoAndDescripcionLike(_Cod, _Des: String; _SoloVendibles, _SoloActivos: Boolean; _StartRow, _Rows: Integer);
  Function WhereString: String;
  begin

    result := '';
    if _soloVendibles then
      result := TArticuloDM._TipoDeComponenteID + ' in ( Select '+ TTipoDeComponenteDM.ID_FieldName +' from  '+ TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + ' = 1) and ';
    if (_cod >'') then
      result := result + '(lower(tablename.'+ TArticuloDM._Codigo +') like ' + quotedstr( '%'+lowerCase(_cod)+ '%' )+')';
    if (_des >'') then
      begin
        if (result >'') then
          result := result + ' and ';
        result := result + '(lower(tablename.'+ TArticuloDM._Descripcion +') like ' + quotedstr( '%'+lowerCase(_des)+ '%' )+')';
      end;
  end;

  Function OrderBy: String;
  begin
    result := 'tablename.'+TArticuloDM._Codigo;
  end;

begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows));
end;

constructor TArticuloList.CreateByCodigoLike(_cod: String; _soloVendibles, _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    result := '';
    if _soloVendibles then
      result := TArticuloDM._TipoDeComponenteID + ' in ( Select '+ TTipoDeComponenteDM.ID_FieldName +' from  '+ TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + ' = 1) and ';
    result := result + '(lower(tablename.'+ TArticuloDM._Codigo +') like ' + quotedstr(lowerCase(_cod)+ '%' )+')';
  end;

  Function OrderBy: String;
  begin
    result := 'tablename.'+TArticuloDM._FamiliaDeArticuloID + ', ' + 'tablename.'+TArticuloDM._MaterialID + ', ' + 'tablename.' + TArticuloDM._TipoDeComponenteID;
  end;

begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos, OrderBy));
end;

constructor TArticuloList.CreateByComponente(_cod: String; _SoloActivos:Boolean);
  function WhereString: String;
  begin
    Result := '('+ TArticuloDM.TableName +'.'+ TArticuloDM.ID_FieldName + ' IN (SELECT '+ TArticuloComponenteDM._ArticuloID +' FROM ' +TArticuloComponenteDM.TableName;
    Result := Result + ' WHERE (' + TArticuloComponenteDM._componenteID + ' = (SELECT '+ TArticuloDM.ID_FieldName+ ' FROM '+ TArticuloDM.TableName ;
    Result := Result + ' WHERE (lower(tablename.'+TArticuloDM._codigo+') = ' + quotedstr(lowerCase(_cod)) + ')))))';
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TArticuloList.CreateByInicialCodigo(_I: string; _SoloActivos:Boolean);
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( false, GetWhereByInicialCodigo(_I), _SoloActivos));
end;

constructor TArticuloList.CreateByMateriaPrima(_M: TMateriaPrima; _SoloActivos: Boolean);
  function WhereString: String;
  begin
    Result := '(' + TArticuloDM.TableName +'.'+ TArticuloDM.ID_FieldName +  ' in (Select ' + TArticuloMetodoDeCorteDM._ArticuloID +
      ' from ' + TArticuloMetodoDeCorteDM.TableName + ' where ' + TArticuloMetodoDeCorteDM._MateriaPrimaID + ' = ' + IntToStr(_M.ID) + '))';
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TArticuloList.CreateByTipoDeComponente(_TC: TTipoDeComponente;_SoloActivos:Boolean);
  function WhereString: String;
  begin
    Result := '('+ TArticuloDM.TableName +'.'+ TArticuloDM._TipoDeComponenteID +  ' = ' + IntToStr(_TC.ID)+')';
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TArticuloList.CreateByTipoDeComponenteConCunio(_SoloActivos:Boolean);
  function WhereString: string;
  begin
    Result := '('+TArticuloDM.Tablename+'.'+TArticuloDM._TipoDeComponenteID + ' in ( select ' + TTipoDeComponenteDM.Id_FieldName + ' from ' + TTipoDeComponenteDM.TableName + ' where ';
    Result := Result + '(' + TTipoDeComponenteDM.TableName +'.'+TTipoDeComponenteDM._llevaCunio + ' = 1)))';
  end;

  function OrderByString: string;
  begin
    Result := TArticuloDM.TableName+'.'+TArticuloDM._FamiliaDeArticuloID + ', ' + TArticuloDM.TableName+'.'+TArticuloDM._MaterialID + ', ' + TArticuloDM.TableName+'.'+TArticuloDM._TipoDeComponenteID;
  end;

begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos, OrderByString ));
end;

constructor TArticuloList.CreateByTipoDeComponenteConCunioCodigoLike(_cod: String; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    if Copy(_cod, length(_cod), 1) <> '%' then
      _cod := _cod + '%';
    Result := '('+TArticuloDM.TableName+'.'+ TArticuloDM._TipoDeComponenteID + ' In (Select ';
    Result := Result + TTipoDeComponenteDM.ID_fieldName+' from ' + TTipoDeComponenteDM.TableName + ' where tablename.';
    Result := Result + TTipoDeComponenteDM._Codigo + ' = ' + quotedStr(_Cod)+'))';
  end;
  function OrderByString: string;
  begin
    Result := TArticuloDM.TableName+'.'+TArticuloDM._FamiliaDeArticuloID + ', ' + TArticuloDM.TableName+'.'+TArticuloDM._MaterialID + ', ' + TArticuloDM.TableName+'.'+TArticuloDM._TipoDeComponenteID;
  end;
begin
  inherited Create(TArticulo, TArticuloDM.CreateAll(False, WhereString, _SoloActivos, OrderByString ));
end;

{ TEmpresaAsociada }
constructor TEmpresaAsociada.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEmpresaAsociadaDM);
  FEmpresaAsociadaID := 0;
  FEmpresaID := 0;
end;


procedure TEmpresaAsociada.SetEmpresaAsociadaID(const Value: TObjectID);
begin
  if (Value <> 0) and (Value = FEmpresaAsociadaID) Then
    Aplicacion.RaiseExceptionCreate('Una empresa no puede asociarce a si misma.');
  if (Value <> FEmpresaAsociadaID) and assigned(FEmpresaAsociada) then
    FreeAndNil(FEmpresaAsociada);
  FEmpresaAsociadaID := Value;
end;

function TEmpresaAsociada.GetCCCodigoEmpresaAsociada: TString;
begin
  if (FCCCodigoEmpresaAsociada = Unassigned) then
    FCCCodigoEmpresaAsociada := EmpresaAsociada.codigo;
  Result := FCCCodigoEmpresaAsociada;
end;

function TEmpresaAsociada.GetCCCuitEmpresaAsociada: TString;
begin
  if (FCCCuitEmpresaAsociada = Unassigned) then
    FCCCuitEmpresaAsociada := EmpresaAsociada.CUIT;
  Result := FCCCuitEmpresaAsociada;
end;

function TEmpresaAsociada.GetCCDescripcionEmpresaAsociada: TString;
begin
  if (FCCDescripcionEmpresaAsociada = Unassigned ) then
    FCCDescripcionEmpresaAsociada := EmpresaAsociada.Descripcion;
  Result := FCCDescripcionEmpresaAsociada;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaConfeccionaPedido: TBoolean;
begin
  if (FCCEmpresaAsociadaConfeccionaPedido = Unassigned) then
    FCCEmpresaAsociadaConfeccionaPedido := EmpresaAsociada.RankingCrediticio.ConfeccionaPedido;
  Result := FCCEmpresaAsociadaConfeccionaPedido;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaesInactiva: TBoolean;
begin
//  if (FCCEmpresaAsociadaesInactiva = Unassigned) then si no está asignado siempre va a ser False
//    FCCEmpresaAsociadaesInactiva := EmpresaAsociada.EsInactivo;
  Result := FCCEmpresaAsociadaesInactiva;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedor: Tstring;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedor = Unassigned) then
    FCCEmpresaAsociadaGrupoDeVendedor := EmpresaAsociada.GrupoDeVendedor.Descripcion;
  Result := FCCEmpresaAsociadaGrupoDeVendedor;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedorCodigo: Tstring;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedorCodigo = Unassigned) and (EmpresaAsociada.GrupoDeVendedorID <> NullID) then
    FCCEmpresaAsociadaGrupoDeVendedorCodigo := EmpresaAsociada.GrupoDeVendedor.Codigo;
  Result := FCCEmpresaAsociadaGrupoDeVendedorCodigo;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedorID: TObjectID;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedorID = Unassigned) then
    FCCEmpresaAsociadaGrupoDeVendedorID := EmpresaAsociada.GrupoDeVendedorID;
  Result := FCCEmpresaAsociadaGrupoDeVendedorID;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedorInicial: Tstring;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedorInicial = Unassigned) and (EmpresaAsociada.GrupoDeVendedorInicialID <> NullID) then
    FCCEmpresaAsociadaGrupoDeVendedorInicial := EmpresaAsociada.GrupoDeVendedorInicial.Descripcion;
  Result := FCCEmpresaAsociadaGrupoDeVendedorInicial;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedorInicialCodigo: Tstring;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedorInicialCodigo = Unassigned) and (EmpresaAsociada.GrupoDeVendedorInicialID <> NullID) then
    FCCEmpresaAsociadaGrupoDeVendedorInicialCodigo := EmpresaAsociada.GrupoDeVendedorInicial.Codigo;
  Result := FCCEmpresaAsociadaGrupoDeVendedorInicialCodigo;
end;

function TEmpresaAsociada.GetCCEmpresaAsociadaGrupoDeVendedorInicialID: TObjectID;
begin
  if (FCCEmpresaAsociadaGrupoDeVendedorInicialID = Unassigned) then
    FCCEmpresaAsociadaGrupoDeVendedorInicialID := EmpresaAsociada.GrupoDeVendedorInicialID;
  Result := FCCEmpresaAsociadaGrupoDeVendedorInicialID;
end;

function TEmpresaAsociada.Getempresa: TEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TEmpresa, Fempresa, empresaID);
  Result := TEmpresa(Fempresa);
end;

procedure TEmpresaAsociada.SetempresaID(Value: TObjectID);
begin
  if (Value <> FempresaID) and assigned(Fempresa) then
    FreeAndNil(FempresaID);
  FempresaID := Value;
end;

function TEmpresaAsociada.GetEmpresaAsociada: TEmpresa;
begin
  if not assigned(FempresaAsociada) then
    GetObject(TEmpresa, FEmpresaAsociada, FEmpresaAsociadaID);

  Result := TEmpresa(FEmpresaAsociada);

end;

{ TEmpresaAsociadaDM }
class function TEmpresaAsociadaDM.TableName: string;
begin
  Result := 'empresasasociadas';
end;

class function TEmpresaAsociadaDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CamposTablaEmpresasAsociadas   : String;
    CamposTablaEmpresas            : String;
    CamposTablaRankings            : String;
    CamposTablaGrupoVendedores     : String;
    CamposTablaGrupoVendedoresInicial: String;
  begin
    CamposTablaEmpresasAsociadas := TableName + '.*';
    CamposTablaEmpresas  :=                       TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCCodigoEmpresa + ', ';
    CamposTablaEmpresas  := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCDescripcionEmpresa + ', ';
    CamposTablaEmpresas  := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Cuit        + ' as ' + _CCCuitEmpresa + ', ';
    CamposTablaEmpresas  := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._esInactivo  + ' as ' + _CCesInactiva + ', ';
    CamposTablaEmpresas  := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorID + ' as ' + _CCGrupoDeVendedorID + ', ' ;
    CamposTablaEmpresas  := CamposTablaEmpresas + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._GrupoDeVendedorInicialID + ' as ' + _CCGrupoDeVendedorInicialID ;
    CamposTablaRankings  := TRankingCrediticioDM.TableName + '.' + TRankingCrediticioDM._ConfeccionaPedido + ' as ' +_CCConfeccionaPedido;
    CamposTablaGrupoVendedores        := TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Descripcion + ' as ' +_CCGrupoDeVendedor + ', ' + TGrupoDeVendedorDM.TableName + '.' + TGrupoDeVendedorDM._Codigo + ' as ' +_CCGrupoDeVendedorCodigo;
    CamposTablaGrupoVendedoresInicial := 'GVI.' + TGrupoDeVendedorDM._Descripcion + ' as ' +_CCGrupoDeVendedorInicial + ', ' + 'GVI.' + TGrupoDeVendedorDM._Codigo + ' as ' +_CCGrupoDeVendedorInicialCodigo  ;
    Result := CamposTablaEmpresasAsociadas + ', ';
    Result := Result + CamposTablaEmpresas + ', ';
    Result := Result + CamposTablaRankings + ', ';
    Result := Result + CamposTablaGrupoVendedores + ', ';
    Result := Result + CamposTablaGrupoVendedoresInicial;
  end;

  Function LeftJoinString : String;
  var
    IDNameTablaEmpresas            : String;
    ID1NameTablaEmpresas           : String;
    ID2NameTablaEmpresas           : String;
    ID3NameTablaEmpresas           : String;
    IDNameTablaRankings            : string;
    IDNameTablaGrupoVendedores     : string;
    IDNameTablaGrupoVendedoresInicial : string;
    IDNameTablaEmpresasAsociadas   : string;
  begin
    IDNameTablaEmpresasAsociadas := TEmpresaAsociadaDM.TableName   + '.' + TEmpresaAsociadaDM._AsociadaID;
    IDNameTablaEmpresas          := TAbstractEmpresaDM.TableName   + '.' + TAbstractEmpresaDM.ID_FieldName;
    ID1NameTablaEmpresas         := TAbstractEmpresaDM.TableName   + '.' + TAbstractEmpresaDM._RankingCrediticioID;
    ID2NameTablaEmpresas         := TAbstractEmpresaDM.TableName   + '.' + TAbstractEmpresaDM._GrupoDeVendedorID;
    ID3NameTablaEmpresas         := TAbstractEmpresaDM.TableName   + '.' + TAbstractEmpresaDM._GrupoDeVendedorInicialID;
    IDNameTablaRankings          := TRankingCrediticioDM.TableName + '.' + TRankingCrediticioDM.ID_FieldName;
    IDNameTablaGrupoVendedores   := TGrupoDeVendedorDM.TableName   + '.' + TGrupoDeVendedorDM.ID_FieldName;
    IDNameTablaGrupoVendedoresInicial   := 'GVI.' + TGrupoDeVendedorDM.ID_FieldName;
    Result := Result + ' LEFT JOIN ' + TAbstractEmpresaDM.TableName   + ' ON (' + IDNameTablaEmpresasAsociadas + '=' + IDNameTablaEmpresas + ')';
    Result := Result + ' LEFT JOIN ' + TRankingCrediticioDM.TableName + ' ON (' + ID1NameTablaEmpresas         + '=' + IDNameTablaRankings + ')';
    Result := Result + ' LEFT JOIN ' + TGrupoDeVendedorDM.TableName   + ' ON (' + ID2NameTablaEmpresas         + '=' + IDNameTablaGrupoVendedores + ')';
    Result := Result + ' LEFT JOIN ' + TGrupoDeVendedorDM.TableName   + ' GVI ON (' + ID3NameTablaEmpresas      + '=' + IDNameTablaGrupoVendedoresInicial + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;


class function TEmpresaAsociadaDM.ID_FieldName: string;
begin
  Result := 'empresaAsociadaID';
end;

procedure TEmpresaAsociadaDM.PopulateFields(PDObject: TPDObject);
begin
  with TEmpresaAsociada(PDObject) do
  begin
    IDField[_AsociadaID] := EmpresaAsociadaID;
    IDField[_EmpresaID]  := EmpresaID;
  end;
end;

procedure TEmpresaAsociadaDM.PopulateObject(PDObject: TPDObject);
begin
  with TEmpresaAsociada(PDObject) do
  begin
    FEmpresaAsociadaID                             := IDField[_AsociadaID];
    FEmpresaID                                     := IDField[_EmpresaID];
    FCCDescripcionEmpresaAsociada                  := StringField[_CCDescripcionEmpresa];
    FCCCodigoEmpresaAsociada                       := StringField[_CCCodigoEmpresa];
    FCCCuitEmpresaAsociada                         := StringField[_CCCuitEmpresa];
    FCCEmpresaAsociadaesInactiva                   := BooleanField[_CCEsInactiva];
    FCCEmpresaAsociadaConfeccionaPedido            := BooleanField[_CCConfeccionaPedido];
    FCCEmpresaAsociadaGrupoDeVendedorID            := IDField[_CCGrupoDeVendedorID];
    FCCEmpresaAsociadaGrupoDeVendedor              := StringField[_CCGrupoDeVendedor];
    FCCEmpresaAsociadaGrupoDeVendedorCodigo        := StringField[_CCGrupoDeVendedorCodigo];
    FCCEmpresaAsociadaGrupoDeVendedorInicialID     := IDField[_CCGrupoDeVendedorInicialID];
    FCCEmpresaAsociadaGrupoDeVendedorInicial       := StringField[_CCGrupoDeVendedorInicial];
    FCCEmpresaAsociadaGrupoDeVendedorInicialCodigo := StringField[_CCGrupoDeVendedorInicialCodigo];
  end;
end;


{ TEmpresaAsociadaList }
function TEmpresaAsociadaList.GetActual: TEmpresaAsociada;
begin
  Result := TEmpresaAsociada(CurrentObject);
end;

function TEmpresaAsociadaList.CreateNewObject: TPDObject;
begin
  Result := TEmpresaAsociada.Create;
end;

function TEmpresaAsociadaList.FindCodigo(_Codigo: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(Actual.CCCodigoEmpresaAsociada) = uppercase(_Codigo));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TEmpresaAsociadaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEmpresaAsociada, TEmpresaAsociadaDM.CreateAll( false, '', _SoloActivos ));
end;

constructor TEmpresaAsociadaList.CreateByEmpresa(_Emp: TAbstractEmpresa; _SoloActivos : Boolean);
  function WhereString: string;
  begin
    Result := '(' + TEmpresaAsociadaDM.TableName + '.' + TEmpresaAsociadaDM._EmpresaID + '=' + IntToStr(_Emp.ID) + ')' ;
    if _SoloActivos then
      Result := Result + ' and (' + TAbstractEmpresaDM.TableName + '.' + TEmpresaAsociadaDM._CCEsInactiva + '=0 )';
  end;
begin
  inherited Create(TEmpresaAsociada,TEmpresaAsociadaDM.CreateAll( False, WhereString));
end;

constructor TEmpresaAsociadaList.CreateByEmpresaAndCodigoLike(_Emp: TAbstractEmpresa; _Codigo: String; _SoloActivos : Boolean  );
  function WhereString: string;
  begin
    Result := '(' + TEmpresaAsociadaDM.TableName + '.' +TEmpresaAsociadaDM._EmpresaID + '=' + IntToStr(_Emp.ID)+ ') and ';
    Result := Result + '(' + TEmpresaAsociadaDM._AsociadaID + ' in (';
    Result := Result + 'select ' + TAbstractEmpresaDM.ID_FieldName + ' from ';
    Result := Result + TAbstractEmpresaDM.TableName + ' where ' + TEmpresaAsociadaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + ' like ' + quotedstr(_Codigo + '%') + '))';
  end;
begin
  inherited Create(TEmpresaAsociada,TEmpresaAsociadaDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TEmpresaAsociadaList.CreateByTribeca(_Emp: TAbstractEmpresa; _SoloActivos : Boolean);
  function WhereString: String;
  begin
    Result := '('+ TEmpresaAsociadaDM._AsociadaID + '=' + IntToStr(_Emp.ID)+ ') and ' + TEmpresaAsociadaDM.TableName + '.' +TEmpresaAsociadaDM._empresaID + ' in (';
    Result := Result + 'Select ' + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName + ' where ';
    Result := Result + TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM._Codigo + '=' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoDeEmpresaTribeca) + ')';
  end;
begin
  inherited Create(TEmpresaAsociada, TEmpresaAsociadaDM.CreateAll( False, WhereString, _soloActivos));
end;

function TAbstractEmpresa.GetEmpresasAsociadas: TEmpresaAsociadaList;
begin
  If not assigned(FEmpresasAsociadas) Then
    GetList(TPDList(FEmpresasAsociadas), TPDList(TEmpresaAsociadaList.CreateByEmpresa(self)));
  Result := TEmpresaAsociadaList(FEmpresasAsociadas);
end;

procedure TAbstractEmpresa.SetCategoriaDeGananciasID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeGananciasID) and assigned(FCategoriaDeGanancias) then
    FreeAndNil(FCategoriaDeGanancias);

  FCategoriaDeGananciasID := Value;
end;

procedure TAbstractEmpresa.SetCobradorID(const Value: TObjectID);
begin
  if (Value <> FCobradorID) and assigned(FCobrador) then
    FreeAndNil(FCobrador);

  FCobradorID := Value;
end;

procedure TAbstractEmpresa.SetCondiciondeCobranzaID(const Value: TObjectID);
begin
  if (Value <> FCondiciondeCobranzaID) and assigned(FCondiciondeCobranza) then
    FreeAndNil(FCondiciondeCobranza);

  FCondiciondeCobranzaID := Value;
end;

procedure TAbstractEmpresa.SetCondiciondeVentaID(const Value: TObjectID);
begin
  if (Value <> FCondiciondeVentaID) and assigned(FCondicionDeVenta) then
    begin
      FreeAndNil(FCondicionDeVenta);
      FCCCondicionDeVentaDescripcion := Null;
    end;
  FCondiciondeVentaID := Value;
end;

procedure TAbstractEmpresa.SetCuentaContableID(const Value: TObjectID);
begin
if (Value <> FCuentaContableID) and Assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);
  FCuentaContableID := Value;
end;

procedure TAbstractEmpresa.SetGrupoDeVendedorID(const Value: TObjectID);
begin
  if (Value <> FGrupoDeVendedorID) and assigned(FGrupoDeVendedor) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

procedure TAbstractEmpresa.SetGrupoDeVendedorInicialID(const Value: TObjectID);
begin
  if (Value <> FGrupoDeVendedorInicialID) and assigned(FGrupoDeVendedorInicial) then
    FreeAndNil(FGrupoDeVendedorInicial);
  FGrupoDeVendedorInicialID := Value;
end;

procedure TAbstractEmpresa.SetRankingCrediticioID(const Value: TObjectID);
begin
  if (Value <> FRankingCrediticioID) and assigned(FRankingCrediticio) then
    FreeAndNil(FRankingCrediticio);
  FRankingCrediticioID := Value;
end;

procedure TAbstractEmpresa.SetZonaDeClienteID(const Value: TObjectID);
begin
  if (Value <> FZonaDeClienteID) and assigned(FZonaDeCliente) then
    FreeAndNil(FZonaDeCliente);

  FZonaDeClienteID := Value;
end;

procedure TAbstractEmpresa.SetFleteID(const Value: TObjectID);
begin
  if (Value <> FFleteID) and assigned(FFlete) then
    FreeAndNil(FFlete);
  FFleteID := Value;
end;

procedure TAbstractEmpresa.SetFormatoDeDireccionID(const Value: TObjectID);
begin
  if (Value <> FFormatoDeDireccionID) and assigned(FFormatoDeDireccion) then
    FreeAndNil(FFormatoDeDireccion);
  FFormatoDeDireccionID := Value;
end;

procedure TAbstractEmpresa.SetCategoriaDeProveedorID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeProveedorID) and assigned(FCategoriaDeProveedor) then
    FreeAndNil(FCategoriaDeProveedor);
  FCategoriaDeProveedorID := Value;
end;

procedure TAbstractEmpresa.SetCondicionDeCompraID(const Value: TObjectID);
begin
  if (Value <> FCondicionDeCompraID) and assigned(FCondicionDeCompra) then
    FreeAndNil(FCondicionDeCompra);

  FCondicionDeCompraID := Value;
end;

function TAbstractEmpresa.Save: Boolean;
begin
  ValidarCliente;
  ValidarProveedor;
  ValidarBanco;
  if not IsAssigned then
    fFechaDeIngreso := Aplicacion.DateTimeService.FechaHoraActual;
  Result := inherited Save;
  AgregarDireccionLegal;
  AgregarAlPadron;
end;

procedure TAbstractEmpresa.ValidarCliente;
var
  texto: string;
begin
  if not self.esCliente then
    exit;

  texto := '';
  If FCodigoSistemaAnterior = '' then
    texto := 'Código de cliente sistema anterior';
  If FCategoriaDeClienteID = NullID then
    texto := 'Categoria de Cliente';
  If FCondiciondeVentaID = NullID then
    texto := 'Condicion de Venta';
  If FActividadID = NullID then
    texto := 'Actividad de Cliente';
  If FRankingCrediticioID = NullID then
    texto := 'Ranking Crediticio';
  If FGrupoDeVendedorID = NullID then
    texto := 'Grupo de Vendedores';
  If FZonaDeClienteID = NullID then
    texto := 'Zona';
  If FFleteID = NullID then
    texto := 'Flete';
  if FMonedaDefaultID = NullID then
    texto := 'Moneda Default';
  if FMonedaDeLimiteDeCreditoID = NullID then
    texto := 'Moneda de límite de crédito';

  if FListaDePrecioID = NullID then
    texto := 'Lista de precio';
  if FZonaDeClienteID = NullID then
    texto := 'Zona';
  if FNivelDeServicioDeClienteID = NullID then
    texto := 'Nivel de Servicio de Cliente';

  if texto <> '' then
    Aplicacion.RaiseExceptionCreate('El campo requerido del cliente "' + texto +
        '" no puede estar vacío');

end;

procedure TAbstractEmpresa.ValidarProveedor;
var
  texto: string;
begin
  if not self.esProveedor then
    exit;

  texto := '';
  If FCategoriaDeProveedorID = NullID then
    texto := 'Categoria de Proveedor';
  If FCondicionDeCompraID = NullID then
    texto := 'Condicion de Compra';
  If FCondiciondeCobranzaID = NullID then
    texto := 'Condicion de Cobranza';
  if FJurisdiccionDeIngresosBrutosID = NullID then
    texto := 'Jurisdicción de Ingresos brutos';
  if FCategoriaDeGananciasID = NullID then
    texto := 'Categoría de Ganancias';

  if texto <> '' then
    Aplicacion.RaiseExceptionCreate('El campo requerido del proveedor "' + texto +
        '" no puede estar vacío');

end;

{ TDMProvider }
function TDMProvider.GetGlobalDM(DMClass: TSQLDBX_DMClass): TSQLDBX_DMObject;
var
  i: Integer;
begin
  i := FDMNames.IndexOf(DMClass.classname);

  if i > -1 then
  begin
    Result := TSQLDBX_DMObject(FDMs[i]);
    exit;
  end;
  setlength(FDMs, length(FDMs) + 1);
  FDMs[length(FDMs) - 1] := DMClass.CreateAll(True);
  FDMNames.Add(DMClass.classname);
  Result := FDMs[length(FDMs) - 1];
end;

constructor TDMProvider.Create;
begin
  inherited Create;
  FDMNames := TStringList.Create;

end;

destructor TDMProvider.Destroy;
var
  i: Integer;
begin
  for i := 0 to length(FDMs) - 1 do
    FreeAndNil(FDMs[i]);

  if assigned(FDMNames) then
    FreeAndNil(FDMNames);

  inherited;
end;

procedure TAbstractEmpresa.SetDepartamento(const Value: TString);
begin
  FDepartamento := UpperCase(Value);
end;

procedure TAbstractEmpresa.SetDepositoVirtualDeStockID(const Value: TObjectID);
begin
  if (FDepositoVirtualDeStockID <> Value) and assigned(FDepositoVirtualDeStock) then
    FreeAndNil( FDepositoVirtualDeStock );
  FDepositoVirtualDeStockID := Value;
end;

procedure TAbstractEmpresa.SetFCuit(const Value: TString);
begin
  If (Value <> '') Then

    IF assigned(CondicionDeIva) and CondicionDeIva.esCuitRequerido and
      (Not aplicacion.TextService.ValidarCUIL(Value)) Then
    begin
      if (aplicacion.MensajeEspecial('Error C.U.I.T.', 'C.U.I.T. inválida',
          mtWarning, [mbIgnore, mbCancel], clInfoBk, clInfoText, 6) = mrCancel)
        then
        Aplicacion.RaiseExceptionCreate('Proceso cancelado por C.U.I.T. inválida')
      else
        FObservacionesTmp :=
          '*** C.U.I.T. INCORRECTA. CORRIJALA Y LUEGO BORRE ESTE COMENTARIO ***';
    end;

  FCUIT := Value;
end;

function TAbstractEmpresa.GetDepositosPosibles: TDepositoList;
begin
  If not assigned(FDepositosPosibles) Then
    GetList(TPDList(FDepositosPosibles), TPDList(TDepositoList.CreateByEmpresaDepositosPosibles(self, True )));
  Result := FDepositosPosibles;
end;

function TAbstractEmpresa.GetDepositoVirtualDeStock: TDeposito;
begin
  if not assigned(FDepositoVirtualDeStock) then
    GetObject(TDeposito, FDepositoVirtualDeStock, DepositoVirtualDeStockID);
  Result := TDeposito(FDepositoVirtualDeStock);
end;

function TAbstractEmpresa.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TEmpresaList;
end;

{ TCategoriaDeGananciasItem }
constructor TCategoriaDeGananciasItem.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeGananciasItemDM);
  FAdicional := null;
  FImporteDesde := null;
  FImporteHasta := null;
  Fporcentaje := null;
end;

function TCategoriaDeGananciasItem.getRetencionDeGanancias : TCategoriaDeGanancias;
begin
  if not assigned(FRetencionDeGanancias) then
    GetObject(TCategoriaDeGanancias, FRetencionDeGanancias, FRetencionDeGananciasID);
  Result := TCategoriaDeGanancias(FRetencionDeGanancias);
end;

function TCategoriaDeGananciasItem.Save: Boolean;
begin
  Result := inherited Save;
end;

procedure TCategoriaDeGananciasItem.SetRetencionDeGananciasID(Value: TObjectID);
begin
  if (Value <> FRetencionDeGananciasID) and assigned(FRetencionDeGanancias) then
    FreeAndNil(FRetencionDeGanancias);
  FRetencionDeGananciasID := Value;
end;

{ TCategoriaDeGananciasItemDM }
class function TCategoriaDeGananciasItemDM.TableName: string;
begin

  Result := 'categoriadegananciasitems';
end;

class function TCategoriaDeGananciasItemDM.ID_FieldName: string;
begin

  Result := 'CategoriaDeGananciasItemsID';
end;

procedure TCategoriaDeGananciasItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeGananciasItem(PDObject) do
  begin
    FloatField[_Adicional] := FAdicional;
    FloatField[_ImporteDesde] := FImporteDesde;
    FloatField[_ImporteHasta] := FImporteHasta;
    FloatField[_Porcentaje] := Fporcentaje;
    IDField[_CategoriaDeGananciasID] := FRetencionDeGananciasID;
  end;
end;

procedure TCategoriaDeGananciasItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeGananciasItem(PDObject) do
  begin
    FAdicional := FloatField[_Adicional];
    FImporteDesde := FloatField[_ImporteDesde];
    FImporteHasta := FloatField[_ImporteHasta];
    Fporcentaje := FloatField[_Porcentaje];
    FRetencionDeGananciasID := IDField[_CategoriaDeGananciasID];
  end;
end;

{ TCategoriaDeGananciasItemList }
function TCategoriaDeGananciasItemList.GetActual: TCategoriaDeGananciasItem;
begin
  Result := TCategoriaDeGananciasItem(CurrentObject);
end;

constructor TCategoriaDeGananciasItemList.CreateByCategoria(_C: TCategoriaDeGanancias);
  Function WhereString : String;
  begin
    Result := TCategoriaDeGananciasItemDM._CategoriaDeGananciasID + '=' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TCategoriaDeGananciasItem, TCategoriaDeGananciasItemDM.CreateAll(False, WhereString));
end;

function TCategoriaDeGananciasItemList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeGananciasItem.Create;
end;

constructor TCategoriaDeGananciasItemList.CreateAll;
begin
  inherited Create(TCategoriaDeGananciasItem, TCategoriaDeGananciasItemDM.CreateAll(False));
end;

procedure TAbstractEmpresa.ValidateOnInsert;
begin
  inherited;
  ValidarCUITDuplicado(CUIT, ID);
  ValidarCodigoDeBancoDuplicado(codigoDeBanco, ID);
end;

procedure TAbstractEmpresa.ValidateOnUpdate;
begin
  inherited;
  ValidarCUITDuplicado(CUIT, ID);
  ValidarCodigoDeBancoDuplicado(codigoDeBanco, ID);
end;

procedure TAbstractEmpresa.ValidarCUITDuplicado(_Cuit: String; _ID: TObjectID);
Var
  LE: TEmpresaList;
begin
  if not TipoDeIdentificacionTributaria.ValidarRepetidos then
    exit;

  if (_Cuit = self.Localidad.provincia.pais.cuitFisico) or
    (_Cuit = self.Localidad.provincia.pais.cuitJuridico) or (EsInactivo) then
    exit;
  try
    Try
      LE := TEmpresaList.CreateByCuitYIDDiferente(_Cuit, _ID, True);
      If LE.Count > 0 Then
      begin
        if (aplicacion.MensajeEspecial('Error C.U.I.T.', 'C.U.I.T. ya existe',
            mtWarning, [mbIgnore, mbCancel], clInfoBk, clInfoText,
            6) = mrCancel) then
          Aplicacion.RaiseExceptionCreate('Proceso cancelado por C.U.I.T. duplicada.')
      end;
    Finally
      FreeAndNil(LE);
    End;
  except
    //
  end;
end;




{ TProducto }

procedure TProducto.borrarInterfaceDatosViejos(_Lista: TPDList);
begin
  If (_Lista.Count > 0) then
  begin
    while (_Lista.Count > 0) do
    begin
      _Lista.First;
      _Lista.DeleteCurrent;
    end;
    _Lista.ApplyUpdates;
  end;
end;

constructor TProducto.Create;
begin
  inherited;
  DMObject := TProductoDM(aplicacion.DMProvider.GetGlobalDM(TProductoDM));
  FProductoDesplegado := Nil;
  Fcodigo             := null;
  FfechaDeCreacion    := null;
  FDevolverMatriz     := False;
  FCodigoInternoSifab := -999;
  FPreciodeLista      := Null;
  FStocks             := nil;
end;

destructor TProducto.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TProducto.FreeObjectsFromMemory;
begin
  if Assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  if Assigned(FServicio) then
    FreeAndNil(FServicio);
  if Assigned(FFabricado) then
    FreeAndNil(FFabricado);
end;

function TProducto.StockDisponibleEnComponentes: Real;
Var
  CantidadComponente: Real;
begin
  Result := 0;
  if not EsFabricado or (Fabricado.Componentes.Count = 0) then
    Exit;

  Fabricado.Componentes.First;
  Repeat
    if Fabricado.Componentes.IsFirst then
      Result := Fabricado.Componentes.Actual.Fabricado.Producto.CantidadStockLibre
    else
      begin
        CantidadComponente := Fabricado.Componentes.Actual.Fabricado.Producto.CantidadStockLibre;
        if CantidadComponente < Result then
          Result := CantidadComponente;
      end;
    Fabricado.componentes.next;
  Until Fabricado.componentes.IsLast;
end;

function TProducto.GetarchivoDeImagen: TString;
begin
  if (FabricadoID <> NullID) then
    Result := Fabricado.ArchivoDeImagen
  else if (ServicioID <> NullID) then
    Result := aplicacion.ArchivoSinImagenFabricados
  else if (MateriaPrimaID <> NullID) then
    Result := MateriaPrima.ArchivoDeImagen
  else
    Result := Fabricado.archivoSinImagen;
end;

function TProducto.GetarchivoSinImagen: TString;
begin
  Result := aplicacion.ArchivoSinImagenFabricados;
end;

function TProducto.GetCantidadStockAsignada: TReal;
begin
  try
    FCantidadStockAsignada := 0;
    if (StocksAsignado.count = 0 ) then
      Exit
    else
      begin
        StocksAsignado.First;
        repeat
          FCantidadStockAsignada := FCantidadStockAsignada + StocksAsignado.actual.Cantidad;
          StocksAsignado.Next;
        until StocksAsignado.IsLast;
      end;
  finally
    if Assigned(FStocksAsignado) then
      FreeAndNil(FStocksAsignado); // lo libero para que actualice la siguiente vez que lo consulte
    Result := FCantidadStockAsignada;
  end;
end;

function TProducto.GetCantidadStockEnTransito: TReal;
begin
  try
    FCantidadStockEnTransito := 0;
    if (StocksEnTransito.count = 0 ) then
      Exit
    else
      begin
        StocksAsignado.First;
        repeat
          FCantidadStockEnTransito := FCantidadStockEnTransito + StocksEnTransito.Actual.Cantidad;
          StocksEnTransito.Next;
        until StocksEnTransito.IsLast;
      end;
  finally
    if Assigned(FStocksEnTransito) then
      FreeAndNil(FStocksEnTransito); // lo libero para que actualice la siguiente vez que lo consulte
    Result := FCantidadStockEnTransito;
  end;
end;

function TProducto.GetCantidadStockLibre: TReal;
begin
  try
    FCantidadStockLibre := 0;
    if (StocksLibre.count = 0 ) then
      Exit
    else
      begin
        StocksLibre.First;
        repeat
          FCantidadStockLibre := FCantidadStockLibre + StocksLibre.actual.Cantidad;
          StocksLibre.Next;
        until StocksLibre.IsLast;
      end;
  finally
    if Assigned(FStocksLibre) then
      FreeAndNil(FStocksLibre); // lo libero para que actualice la siguiente vez que lo consulte
    Result := FCantidadStockLibre;
  end;
end;

function TProducto.GetCantidadStockPreparada: TReal;
begin
  try
    FCantidadStockPreparada := 0;
    if (StocksPreparado.count = 0 ) then
      Exit
    else
      begin
        StocksPreparado.First;
        repeat
          FCantidadStockPreparada := FCantidadStockPreparada + StocksPreparado.Actual.Cantidad;
          StocksPreparado.Next;
        until StocksPreparado.IsLast;
      end;
  finally
    if Assigned(FStocksPreparado) then
      FreeAndNil(FStocksPreparado); // lo libero para que actualice la siguiente vez que lo consulte
    Result := FCantidadStockPreparada;
  end;
end;

function TProducto.GetCantidadStockTotal: TReal;
begin
  try
    FCantidadStockTotal := 0;
    if (Stocks.count = 0 ) then
      Exit
    else
      begin
        Stocks.First;
        repeat
          FCantidadStockTotal := FCantidadStockTotal + Stocks.actual.Cantidad;
          Stocks.Next;
        until Stocks.IsLast;
      end;
  finally
    if Assigned(FStocks) then
      FreeAndNil(FStocks); // lo libero para que actualice la siguiente vez que lo consulte
    Result := FCantidadStockTotal;
  end;
end;

function TProducto.getcodigo: TString;
begin
  if (Fcodigo = null) then
  begin
    if MateriaPrimaID <> NullID then
      Fcodigo := MateriaPrima.codigo;

    if servicioID <> NullID then
      Fcodigo := servicio.codigo;

    if FabricadoID <> NullID then
      Fcodigo := Fabricado.codigo;
  end;

  Result := Fcodigo;
end;

function TProducto.GetCodigoAccesorio: TString;
begin
  if MateriaPrimaID <> NullID then
    Result := IntToHex(MateriaPrimaID, 12);

  if servicioID <> NullID then
    Result := IntToHex(servicioID, 12);

  if FabricadoID <> NullID then
    begin
      Result := IntToHex(fabricado.ArticuloID,12) + '-' + IntToHex(fabricado.terminacionID,4) + '-' + IntToHex(fabricado.CunioID,4);
      if (Fabricado.Crc<>0 ) then
        Result := Result + '@' + Fabricado.CodigoCrc;
    end;
end;

function TProducto.GetCodigoInternoSifab: Integer;
const
  _esServicio = 2;
  _esMateriaPrima = 3;

  Function GetCodigoInterno(_Codigo: String; _TipoDeBusqueda: Integer): Integer;
  begin
    if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    try
      if (_TipoDeBusqueda = _esServicio) then
        aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'Select codigoInternoCargoextra as CodigoInterno from cargoextra where ( codigoCargoExtra = ' +quotedstr(_Codigo) + ' ) ';
      if (_TipoDeBusqueda = _esMateriaPrima) then
        aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'Select codigoMaterial as CodigoInterno from Material where ( codigoMaterial = ' +quotedstr(_Codigo) + ' ) ';

      aplicacion.sesion.ConexionSifab.SqlQuery.Open;
      aplicacion.sesion.ConexionSifab.SqlQuery.First;
      Result := aplicacion.sesion.ConexionSifab.SqlQuery.FieldByName('CodigoInterno').Value;
    finally
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    end;
  end;

begin
  if isAssigned and (FCodigoInternoSifab = -999) then
  begin
    if MateriaPrimaID <> NullID then
      FCodigoInternoSifab := GetCodigoInterno(codigo, _esMateriaPrima);

    if servicioID <> NullID then
      FCodigoInternoSifab := GetCodigoInterno(codigo, _esServicio);

    if FabricadoID <> NullID then
      FCodigoInternoSifab := Fabricado.CodigoInternoSifab;
  end;
  Result := FCodigoInternoSifab;
end;

function TProducto.GetCodigoSifab: TString;
begin
  if MateriaPrimaID <> NullID then
    Result := MateriaPrima.CodigoSifab;

  if servicioID <> NullID then
    Result := servicio.CodigoSifab;

  if FabricadoID <> NullID then
    Result := Fabricado.CodigoSifab;
end;

function TProducto.GetDepositosDeStockLibre: TDepositoList;
begin
  if not Assigned(FDepositosDeStockLibre) then
    GetList(TPDList(FDepositosDeStockLibre), TPDList(TDepositoList.CreateByStockItemLibre(ID)));
  Result := TDepositoList(FDepositosDeStockLibre);
end;

function TProducto.getDescripcion: TString;
begin
  Result := '';

  if MateriaPrimaID <> NullID then
    Result := MateriaPrima.Descripcion;

  if servicioID <> NullID then
    Result := servicio.Descripcion;

  if FabricadoID <> NullID then
    Result := Fabricado.Descripcion;

end;

function TProducto.GetDescripcionEnIngles: TString;
begin
  Result := '';

  if MateriaPrimaID <> NullID then
    Result := MateriaPrima.DescripcionEnIngles
  else if servicioID <> NullID then
    Result := servicio.DescripcionEnIngles
  else if FabricadoID <> NullID then
    Result := Fabricado.DescripcionEnIngles

end;

function TProducto.GetDescripcionTipoDeProducto: String;
begin
  Result := '';
  If FFabricadoID <> NullID Then
    Result := aplicacion.ParametrosDelSistema.FabricadoDescripcion
  else If FservicioID <> NullID Then
    Result := aplicacion.ParametrosDelSistema.ServicioDescripcion
  else If FMateriaPrimaID <> NullID Then
    Result := aplicacion.ParametrosDelSistema.MateriaPrimaDescripcion;
end;

function TProducto.GetEsFabricado: TBoolean;
begin
  Result := FabricadoID <> Nullid;
end;

function TProducto.GetEsMateriaPrima: TBoolean;
begin
  Result := MateriaPrimaID <> Nullid;
end;

function TProducto.GetEsServicio: TBoolean;
begin
  Result := servicioID <> Nullid;
end;

function TProducto.GetesStockeable: TBoolean;
begin
  Result := True;
  if MateriaPrimaID <> NullID then
    Result := MateriaPrima.esStockeable
  else
    if servicioID <> NullID then
      Result := servicio.esStockeable
    else
      if FabricadoID <> NullID then
        Result := Fabricado.esStockeable;
end;

function TProducto.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, FFabricado, FFabricadoID);

  Result := TFabricado(FFabricado);
end;

function TProducto.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, FMateriaPrimaID);

  Result := TMateriaPrima(FMateriaPrima);
end;

function TProducto.GetRuteoDefault: TProductoRuteoDefaultList;
begin
  if not Assigned(FRuteoDefault) then
    GetList(TPDList(FRuteoDefault), TPDList(TProductoRuteoDefaultList.CreateByProducto(Self)));
  Result := TProductoRuteoDefaultList(FRuteoDefault);
end;

function TProducto.GetServicio: TServicio;
begin
  if not assigned(Fservicio) then
    GetObject(TServicio, Fservicio, FservicioID);
  Result := TServicio(Fservicio);
end;

function TProducto.GetStocks: TStockItemList;
begin
//  Result := nil;
//  if (FabricadoID <> NullID) then
//    Result := Fabricado.Stocks
  if not Assigned(FStocks) then
    GetList(TPDList(FStocks), TPDList(TStockItemList.CreateByProducto(Self)));
  Result := TStockItemList(FStocks);
end;

function TProducto.GetStocksAsignado: TStockItemList;
begin
  if not Assigned(FStocksAsignado) then
    GetList(TPDList(FStocksAsignado), TPDList(TStockItemList.CreateByProductoAsignadoAItems(ID, True )));
  Result := TStockItemList(FStocksAsignado);
end;

function TProducto.GetStocksEnTransito: TStockItemList;
begin
  if not Assigned(FStocksEnTransito) then
    GetList(TPDList(FStocksEnTransito), TPDList(TStockItemList.CreateByProductoEnTransito(ID)));
  Result := TStockItemList(FStocksEnTransito);
end;

function TProducto.GetStocksLibre: TStockItemList;
begin
  if not Assigned(FStocksLibre) then
    GetList(TPDList(FStocksLibre), TPDList(TStockItemList.CreateByProductoEstadoDepositoSinAsignar(ID)));
  Result := TStockItemList(FStocksLibre);
end;

function TProducto.GetStocksPreparado: TStockItemList;
begin
  if not Assigned(FStocksPreparado) then
    GetList(TPDList(FStocksPreparado), TPDList(TStockItemList.CreateByProductoPreparado(ID)));
  Result := TStockItemList(FStocksPreparado);
end;

function TProducto.GetunidadDeMedida: TUnidadDeMedida;
begin
  Result := nil;
  if MateriaPrimaID <> NullID then
    Result := MateriaPrima.unidadDeMedida
  else if servicioID <> NullID then
    Result := servicio.unidadDeMedida
  else if FabricadoID <> NullID then
    Result := Fabricado.unidadDeMedida
end;

//procedure TProducto.GuardarMaterialEnSifab(_Empresa: String);
//
//  Function VerificarHijos(_SNM: TNomencladorDeMaterial): Integer;
//
//    function FaltaElDato(_Codigo: String; _rotuloArticulos,
//      _TipodeCaracteristica: Integer): Boolean;
//    begin
//      if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
//        aplicacion.sesion.ConexionSifab.SqlQuery.Close;
//      try
//        aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text :=
//          'select codigoCaracteristica from Caracteristica where (codigoCaracteristica = ' + quotedstr(_Codigo)
//          + ') and (codigoInternoRotuloClasificador = ' + IntToStr
//          (_rotuloArticulos) + ') and (codigoTipoCaracteristica=' + IntToStr
//          (_TipodeCaracteristica) + ')';
//        aplicacion.sesion.ConexionSifab.SqlQuery.Open;
//        Result := (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount = 0);
//      finally
//        aplicacion.sesion.ConexionSifab.SqlQuery.Close;
//      end;
//    end;
//
//  const
//    _rotuloFamilia = 1;
//    _rotuloArticulos = 2;
//    _rotuloTerminaciones = 3;
//    _rotuloProceso1 = 4;
//    _rotuloProceso2 = 5;
//    _rotuloProceso3 = 6;
//    _rotuloProceso4 = 7;
//    _rotuloGrabadoLaser = 8;
//    _rotuloImpresion = 9;
//    _rotuloSticker = 10;
//    _rotuloCunios = 11;
//    _rotuloArticulosEnIngles = 12;
//    _rotuloTerminacionesEnIngles = 13;
//    _rotuloTipoDeComponente = 24;
//    _CodigoInternoEmpresaApholos = 2;
//    _CodigoInternoEmpresaTriebca = 3;
//
//    atributo = -202;
//    subatributo = -203;
//
//  var
//    Error: TNomencladorDeMaterialError;
//    ErrorList: TNomencladorDeMaterialErrorList;
//
//    procedure CrearError(_ErrorID: TObjectID; _CodigoClaseError: Integer; _CodigoTipoError: Integer; _ClaseError: String);
//    begin
//      Error := TNomencladorDeMaterialError.Create;
//      Error.NomencladorDeMaterialID := _SNM.ID;
//      Error.ErrorID := _ErrorID;
//      Error.CodigoClaseError := _CodigoClaseError;
//      Error.ClaseError := _ClaseError;
//      Error.CodigoTipoError := _CodigoTipoError;
//      Error.Tabla := 'TABLAEMPRESAITEM';
//      Error.Save;
//      ErrorList.Add(Error);
//      Error := NIL;
//    end;
//
//  begin
//    if not aplicacion.sesion.ConexionSifab.Conectado then
//      exit;
//
//    try
//      ErrorList := TNomencladorDeMaterialErrorList.CreateEmpty;
//
//      if FaltaElDato(Fabricado.articulo.familiaDeArticulo.codigo, _rotuloFamilia, atributo) then
//        CrearError(Fabricado.articulo.familiaDeArticuloID, _rotuloFamilia, atributo, TNomencladorDeMaterialErrorDM._ErrFamiliaDeArticulo);
//
//      if FaltaElDato(Fabricado.Articulo.Material.codigo, _rotuloFamilia, subatributo) then
//        CrearError(Fabricado.articulo.MaterialID, _rotuloFamilia, subatributo, TNomencladorDeMaterialErrorDM._ErrMaterial);
//
//      if FaltaElDato(Fabricado.articulo.codigo, _rotuloArticulos, atributo) then
//        CrearError(Fabricado.articuloID, _rotuloArticulos, atributo, TNomencladorDeMaterialErrorDM._ErrArticulo);
//
//      if (_Empresa = 'APH') and Fabricado.articulo.TipoDeComponente.FaltaEnSifab(_rotuloTipoDeComponente, _CodigoInternoEmpresaApholos) then
//        CrearError(Fabricado.articulo.TipoDeComponenteID, _rotuloTipoDeComponente, 0, TNomencladorDeMaterialErrorDM._ErrTipoDeComponente);
//
//      if (_Empresa = 'TRI') and Fabricado.articulo.TipoDeComponente.FaltaEnSifab(_rotuloTipoDeComponente, _CodigoInternoEmpresaTriebca) then
//        CrearError(Fabricado.articulo.TipoDeComponenteID, _rotuloTipoDeComponente, 0, TNomencladorDeMaterialErrorDM._ErrTipoDeComponente);
//
//      if FaltaElDato(Fabricado.articulo.codigo, _rotuloArticulosEnIngles, atributo) then
//        CrearError(Fabricado.articuloID, _rotuloArticulosEnIngles, atributo, TNomencladorDeMaterialErrorDM._ErrArticuloEnIngles);
//
//      if FaltaElDato(Fabricado.articulo.CategoriaDeTerminacionPosible.codigo, _rotuloArticulos, subatributo) then
//        CrearError(Fabricado.articulo.CategoriaDeTerminacionPosibleID, _rotuloArticulos, subatributo, TNomencladorDeMaterialErrorDM._ErrCategoriaTerminacion);
//
//      if FaltaElDato(Fabricado.terminacion.codigo, _rotuloTerminaciones, atributo) then
//        CrearError(Fabricado.terminacionID, _rotuloTerminaciones, atributo, TNomencladorDeMaterialErrorDM._ErrTerminacion);
//
//      if FaltaElDato(Fabricado.terminacion.codigo, _rotuloTerminacionesEnIngles, atributo) then
//        CrearError(Fabricado.terminacionID, _rotuloTerminacionesEnIngles, atributo, TNomencladorDeMaterialErrorDM._ErrTerminacionEnIngles);
//
//      if FaltaElDato(Fabricado.Cunio.codigo, _rotuloCunios, atributo) then
//        CrearError(Fabricado.CunioID, _rotuloCunios, atributo, TNomencladorDeMaterialErrorDM._ErrCunio);
//
//      if (Fabricado.desarrolloID <> NullID) then
//      begin
//        if FaltaElDato(Fabricado.desarrollo.codigo, _rotuloGrabadoLaser, atributo) then
//          CrearError(Fabricado.desarrolloID, _rotuloGrabadoLaser, atributo, TNomencladorDeMaterialErrorDM._ErrLaser);
//
//        if FaltaElDato(Fabricado.desarrollo.codigo, _rotuloImpresion, atributo) then
//          CrearError(Fabricado.desarrolloID, _rotuloImpresion, atributo, TNomencladorDeMaterialErrorDM._ErrImpresion);
//
//        if FaltaElDato(Fabricado.desarrollo.codigo, _rotuloSticker, atributo) then
//          CrearError(Fabricado.desarrolloID, _rotuloSticker, atributo, TNomencladorDeMaterialErrorDM._ErrSticker);
//      End;
//
//      Fabricado.Procesos.First;
//      while not Fabricado.Procesos.IsLast do
//        begin
//          if FaltaElDato(Fabricado.Procesos.Actual.proceso.codigo, _rotuloProceso1, atributo) then
//            CrearError(Fabricado.Procesos.Actual.procesoID, _rotuloProceso1, atributo, TNomencladorDeMaterialErrorDM._ErrProceso1);
//
//          if FaltaElDato(Fabricado.Procesos.Actual.proceso.codigo, _rotuloProceso2, atributo) then
//            CrearError(Fabricado.Procesos.Actual.procesoID, _rotuloProceso2, atributo, TNomencladorDeMaterialErrorDM._ErrProceso2);
//
//          if FaltaElDato(Fabricado.Procesos.Actual.proceso.codigo, _rotuloProceso3, atributo) then
//            CrearError(Fabricado.Procesos.Actual.procesoID, _rotuloProceso3, atributo, TNomencladorDeMaterialErrorDM._ErrProceso3);
//
//          if FaltaElDato(Fabricado.Procesos.Actual.proceso.codigo, _rotuloProceso4, atributo) then
//            CrearError(Fabricado.Procesos.Actual.procesoID, _rotuloProceso4, atributo, TNomencladorDeMaterialErrorDM._ErrProceso4);
//
//          Fabricado.Procesos.Actual.Especificaciones.First;
//          while not Fabricado.Procesos.Actual.Especificaciones.IsLast do
//            begin
//              if (Fabricado.Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID) and FaltaElDato(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.codigo, _rotuloProceso1, subatributo) then
//                CrearError(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.ID, _rotuloProceso1, subatributo, TNomencladorDeMaterialErrorDM._ErrEspecificacion1);
//
//              if (Fabricado.Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID) and FaltaElDato(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.codigo, _rotuloProceso2, subatributo) then
//                CrearError(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.ID, _rotuloProceso2, subatributo,TNomencladorDeMaterialErrorDM._ErrEspecificacion2);
//
//              if (Fabricado.Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID) and FaltaElDato(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.codigo, _rotuloProceso3, subatributo) then
//                CrearError(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.ID, _rotuloProceso3, subatributo,TNomencladorDeMaterialErrorDM._ErrEspecificacion3);
//
//              if (Fabricado.Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID) and FaltaElDato(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.codigo, _rotuloProceso4, subatributo) then
//                CrearError(Fabricado.Procesos.Actual.Especificaciones.Actual.Especificacion.ID, _rotuloProceso4, subatributo,TNomencladorDeMaterialErrorDM._ErrEspecificacion4);
//
//              Fabricado.Procesos.Actual.Especificaciones.next;
//            end;
//          Fabricado.Procesos.next;
//        end;
//
//      if (ErrorList.Count > 0) then
//        Result := 2
//      else
//        Result := 0;
//
//      ErrorList.ApplyUpdates;
//
//    finally
//      FreeAndNil(ErrorList);
//    end;
//  end;
//
//  procedure AsignarDatos(_SNM: TNomencladorDeMaterial);
//  begin
//    _SNM.CodigoMaterial := Fabricado.CodigoSifab;
//    _SNM.DescripcionCorta := Fabricado.codigo;
//    _SNM.descripcionComercial := Fabricado.Descripcion;
//    _SNM.Especificacion := Fabricado.DescripcionCustom;
//    _SNM.materialDescripcionExportacion := Copy(Fabricado.DescripcionParaExportacion, 1, 300);
//    _SNM.codigoSubRubro := Fabricado.articulo.rubroDeArticulo.CodigoSubrubroSifab; ;
//    _SNM.GrupoProducto  := Fabricado.articulo.rubroDeArticulo.CodigoGrupoProductoSifab;
//    _SNM.CodigoInternoGrupoMaterial := Fabricado.articulo.TipoDeComponente.codigo;
//    _SNM.CodigoInternoPosicionArancelaria := Fabricado.articulo.rubroDeArticulo.CodigoPosicionArancelariaSifab;
//    _SNM.FechaAlta := Fabricado.fechaDeCreacion;
//    _SNM.nombreArchivoImagen := Copy(Fabricado.articulo.archivoDeImagen, length('\\srv_aph\usuarios\imagenes\') + 1, 100);
//    _SNM.nombreArchivoImagen2 := Copy(Fabricado.Cunio.archivoDeImagen2D, length('\\srv_aph\usuarios\imagenes\') + 1, 100);
//    _SNM.CodigoEmpresa := _Empresa;
//
//    if (Fabricado.articulo.familiaDeArticulo.EsMatriz) then
//      _SNM.UMedidaFormula := 'UNIDAD'
//    else
//      _SNM.UMedidaFormula := 'MILLAR';
//
//    _SNM.TipoMaterial := 29;
//    _SNM.UMedidaStock := 'UNIDAD';
//    _SNM.UMedidaVenta := 'UNIDAD';
//    _SNM.Rubro := '014';
//    _SNM.MarcaParaVenta := 1;
//    _SNM.CodigoInternoLineaMaterial := 'EM';
//    _SNM.codigoInternoClaseMaterial := -163;
//    _SNM.CuentaContableVenta := '4.1.00.01.001';
//    _SNM.CuentaContableInventario := '1.1.04.03.000';
//    _SNM.cantidadPorMultiploDeEmpaque := 1;
//    _SNM.EnProcesoBaja := False;
//
//    _SNM.Habilitado := 0; // se habilita cuando la InterfaceMaterialImpuestos.exe se ejecute
//
//    _SNM.transaccionable := True;
//    _SNM.caracteristica2 := 0;
//    _SNM.esParte := False;
//    _SNM.GestionPorLoteCF := False;
//    _SNM.reparacion := False;
//    _SNM.marca := '0001';
//    _SNM.Tapping := 0;
//    _SNM.codigoTipoGestion := 'PROD';
//    _SNM.EstadoMigracion := 0;
//    _SNM.PorcentajeAdmisionVenta := 100;
//    _SNM.CodigoInternoConvenio := 'NADI';
//    _SNM.codigoInternoPaisOrigen := 'ARGENTINA';
//    _SNM.exportacionUMVolumen := 'M3';
//    _SNM.exportacionUMVenta := 'UNIDAD';
//    _SNM.exportacionUMPeso := 'KG';
//    _SNM.codigoNomencladorComunMercosur := Fabricado.CodigoSifab;
//    _SNM.esMaterialARecuperar := False;
//    _SNM.codigoInternoMaterialARecuperarAsociado := '';
//    _SNM.CuentaContableVentaExportacion := '4.1.00.02.001';
//    _SNM.Save;
//    _SNM.MigroASifab := VerificarHijos(_SNM);
//    _SNM.Save;
//  end;
//
//var
//  SNM: TNomencladorDeMaterial;
//  SNML: TNomencladorDeMaterialList;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    SNML := TNomencladorDeMaterialList.CreateByCodigoDeMaterialAndEmpresa(Fabricado.CodigoSifab, _Empresa);
//    borrarInterfaceDatosViejos(SNML);
//
//    SNM := TNomencladorDeMaterial.Create;
//    AsignarDatos(SNM);
//    SNML.Add(SNM);
//    SNML.ApplyUpdates;
//
//    if (SNM.MigroASifab = 0) then
//    begin
//      GuardarParametrosEnSifab(_Empresa);
//      GuardarAtributosEnSifab(_Empresa);
//      GuardarEspecificacionesEnSifab(_Empresa);
//    end;
//
//  finally
//    SNM.NilObject;
//    if assigned(SNML) then
//      FreeAndNil(SNML);
//  end;
//end;

//procedure TProducto.GuardarAtributosEnSifab(_Empresa: String);
//
//  procedure Familia(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R001';
//    SA.CodigoInternoCaracteristica := Fabricado.articulo.familiaDeArticulo.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure Material(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -203;
//    SA.CodigoInternoRotuloClasificador := 'R001';
//    SA.CodigoInternoCaracteristica := Fabricado.Articulo.Material.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure articulo(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := 'APH';
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R020';
//    SA.CodigoInternoCaracteristica := Fabricado.articulo.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure ArticuloEnIngles(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := 'APH';
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R021';
//    SA.CodigoInternoCaracteristica := Fabricado.articulo.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure CategTerminacion(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -203;
//    SA.CodigoInternoRotuloClasificador := 'R020';
//    SA.CodigoInternoCaracteristica := Fabricado.articulo.CategoriaDeTerminacionPosible.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure terminacion(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R030';
//    SA.CodigoInternoCaracteristica := Fabricado.terminacion.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure TerminacionIngles(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R031';
//    SA.CodigoInternoCaracteristica := Fabricado.terminacion.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure Cunio(_SAL: TMaterialCaracteristicaList);
//  var
//    SA: TMaterialCaracteristica;
//  begin
//    SA := TMaterialCaracteristica.Create;
//    SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    SA.CodigoEmpresa := _Empresa;
//    SA.CodigoTipoCaracteristica := -202;
//    SA.CodigoInternoRotuloClasificador := 'R055';
//    SA.CodigoInternoCaracteristica := Fabricado.Cunio.codigo;
//    SA.Save;
//    _SAL.Add(SA);
//    SA.NilObject;
//  end;
//
//  procedure Procesos(_SAL: TMaterialCaracteristicaList);
//  var
//    i: Integer;
//    procedure addProceso;
//    var
//      SA: TMaterialCaracteristica;
//    begin
//      SA := TMaterialCaracteristica.Create;
//      SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//      SA.CodigoEmpresa := _Empresa;
//      SA.CodigoTipoCaracteristica := -202;
//      SA.CodigoInternoRotuloClasificador := 'R04' + IntToStr(i);
//
//      if Fabricado.Procesos.Actual.proceso.codigo = 'GLA' then // GRABADO LASER
//        SA.CodigoInternoRotuloClasificador := 'R050';
//      if Fabricado.Procesos.Actual.proceso.codigo = 'STK' then // STIKER
//        SA.CodigoInternoRotuloClasificador := 'R052';
//      if (Fabricado.Procesos.Actual.proceso.codigo = 'FOT') or (Fabricado.Procesos.Actual.proceso.codigo = 'SER') then // IMPRESION
//        SA.CodigoInternoRotuloClasificador := 'R051';
//
//      if not Fabricado.Procesos.Actual.proceso.LlevaNumeroDeDesarrollo then
//        SA.CodigoInternoCaracteristica := Fabricado.Procesos.Actual.proceso.codigo
//      else
//      begin
//        Fabricado.Procesos.Actual.Especificaciones.First;
//        SA.CodigoInternoCaracteristica := Fabricado.Procesos.Actual.Especificaciones.Actual.desarrollo.codigo;
//      end;
//      SA.Save;
//      _SAL.Add(SA);
//      SA.NilObject;
//    end;
//
//    Procedure AgregoEspecificacion;
//    var
//      SA: TMaterialCaracteristica;
//    begin
//      if Fabricado.Procesos.Actual.Especificaciones.Count = 0 then
//        exit;
//
//      Fabricado.Procesos.Actual.Especificaciones.First;
//      while not Fabricado.Procesos.Actual.Especificaciones.IsLast do
//      begin
//        SA := TMaterialCaracteristica.Create;
//        SA.CodigoInternoMaterial := Fabricado.CodigoSifab;
//        SA.CodigoEmpresa := _Empresa;
//        SA.CodigoTipoCaracteristica := -203; // subatributo
//        SA.CodigoInternoRotuloClasificador := 'R04' + IntToStr(i);
//        SA.CodigoInternoCaracteristica := Fabricado.Procesos.Actual.Especificaciones.Actual.CodigoColor;
//        SA.Save;
//        _SAL.Add(SA);
//        SA.NilObject;
//        Fabricado.Procesos.Actual.Especificaciones.next;
//        if not Fabricado.Procesos.Actual.Especificaciones.IsLast then
//        begin
//          i := i + 1;
//          addProceso;
//        end;
//      end;
//    end;
//
//  begin
//    i := 0;
//    Fabricado.Procesos.First;
//
//    while not Fabricado.Procesos.IsLast do
//    begin
//      addProceso;
//      if not Fabricado.Procesos.Actual.proceso.LlevaNumeroDeDesarrollo then
//        AgregoEspecificacion;
//      i := i + 1;
//      Fabricado.Procesos.next;
//    end;
//  end;
//
//var
//  SAL: TMaterialCaracteristicaList;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    SAL := TMaterialCaracteristicaList.CreateByCodigoDeMaterialAndEmpresa(Fabricado.CodigoSifab, _Empresa);
//    BorrarInterfaceDatosViejos(SAL);
//    Familia(SAL);
//    Material(SAL);
//    articulo(SAL);
//    ArticuloEnIngles(SAL);
//    Cunio(SAL);
//    CategTerminacion(SAL);
//    terminacion(SAL);
//    TerminacionIngles(SAL);
//    Procesos(SAL);
//    SAL.ApplyUpdates;
//  finally
//    if assigned(SAL) then
//      FreeAndNil(SAL);
//
//  end;
//end;
//
//procedure TProducto.GuardarEspecificacionesEnSifab(_Empresa: String);
//  procedure AsignarDatos(_SE: TMaterialEspecificacion);
//  begin
//    _SE.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    _SE.CodigoEmpresa := _Empresa;
//    _SE.Save;
//  end;
//
//var
//  SE: TMaterialEspecificacion;
//  SEL: TMaterialEspecificacionList;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    SEL := TMaterialEspecificacionList.CreateByCodigoDeMaterialAndEmpresa(Fabricado.CodigoSifab, _Empresa);
//    BorrarInterfaceDatosViejos(SEL);
//    SE := TMaterialEspecificacion.Create;
//    AsignarDatos(SE);
//    SEL.Add(SE);
//    SEL.ApplyUpdates;
//  finally
//    SE.NilObject;
//    FreeAndNil(SEL);
//  end;
//end;
//
//procedure TProducto.GuardarParametrosEnSifab(_Empresa: String);
//  procedure AsignarDatos(_SP: TMaterialParametro);
//  begin
//    _SP.CodigoInternoMaterial := Fabricado.CodigoSifab;
//    _SP.codigoInternoPlanta := '01';
//    _SP.codigoInternoStockPoliticaPuntoPedido := 'FIJO';
//    _SP.comportamientoIngresoProduccion := 'MANUAL';
//    _SP.comportamientoTransferencias := 'MANUAL';
//    _SP.comportamientoConsumos := 'AUTOMATICO';
//    _SP.controlLotes := False;
//    _SP.codigoTipoNumeracionLote := -84;
//    _SP.CodigoEmpresa := _Empresa;
//    _SP.codigoInternoTipoEtiqueta := 'BULTO';
//    _SP.semielaboradoOProductoOrdenable := True;
//    _SP.generaEtiquetasIdentificacion := True;
//    _SP.transaccionEntregaAutomatica := null;
//    _SP.codigoCentroCostoDeRecupero := null; ;
//    _SP.codigoMovimientoDeRecupero := null;
//    _SP.Save;
//  end;
//
//var
//  SP: TMaterialParametro;
//  SPL: TMaterialParametroList;
//begin
//  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
//    Exit;
//  try
//    SPL := TMaterialParametroList.CreateByCodigoDeMaterialAndEmpresa(Fabricado.CodigoSifab, _Empresa);
//    borrarInterfaceDatosViejos(SPL);
//
//    SP := TMaterialParametro.Create;
//    AsignarDatos(SP);
//    SPL.Add(SP);
//    SPL.ApplyUpdates;
//  finally
//    SP.NilObject;
//    FreeAndNil(SPL);
//  end;
//end;

function TProducto.Save: Boolean;
begin
  if FfechaDeCreacion = null then
    FfechaDeCreacion := aplicacion.DateTimeService.FechaHoraActual;
  Result := inherited Save;
end;

procedure TProducto.SetFabricadoID(const Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
  begin
    FreeAndNil(FFabricado);
    Fcodigo := null;
    FCodigoInternoSifab := -999;
  end;

  FFabricadoID := Value;
end;

procedure TProducto.SetMateriaPrimaID(const Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
  begin
    FreeAndNil(FMateriaPrima);
    Fcodigo := null;
    FCodigoInternoSifab := -999;
  end;
  FMateriaPrimaID := Value;
end;

procedure TProducto.SetServicioID(const Value: TObjectID);
begin
  if (Value <> FservicioID) and assigned(Fservicio) then
  begin
    FreeAndNil(Fservicio);
    Fcodigo := null;
    FCodigoInternoSifab := -999;
  end;

  FservicioID := Value;
end;

Class function TProducto.StockAsignado(_PVIID: TObjectID): Real;
var
  SIL : TStockItemList;
begin
  Result := 0;
  if (_PVIID <> NullId) then
    try
      SIL := TStockItemList.CreateByPVItem( _PVIID);
      if (SIL.count >0) then
        begin
          SIL.first;
          Result := SIL.Actual.Cantidad;
        end;
    finally
      FreeAndNil( SIL);
    end
end;
{ TProductoDetalle }

function TProductoDetalle.GetEsStockeable: TBoolean;
begin
  Result := True;
end;

function TProductoDetalle.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, FProductoID);
  Result := TProducto(FProducto);
end;

function TProductoDetalle.GetunidadDeMedida: TUnidadDeMedida;
begin
  if not assigned(FunidadDeMedida) then
    GetObject(TUnidadDeMedida, FunidadDeMedida, FunidadDeMedidaID);
  Result := TUnidadDeMedida(FunidadDeMedida);
end;

function TProductoDetalle.GetunidadDeMedidaID: TObjectID;
begin
  Result := FunidadDeMedidaID;
end;

function TProductoDetalle.Save: Boolean;
var
  P: TProducto;
begin
  if not isAssigned then
    begin

      // Doy de alta ocultamente para el usuario un TProducto
      P := TProducto.Create;
      // Lo grabo para tener un ID de producto NUEVO
      P.Save;
      // Una vez que tengo el nuevo ID del TProducto, lo asigno al ProductoDetalle como foreignKey
      self.ProductoID := P.ID;
      FreeAndNil(P);
      // Grabo ProductoDetalle
      Result := inherited Save;
      asignarIDalProducto;
    end
  else
    Result := inherited Save;

end;


procedure TProductoDetalle.SetProductoID(const Value: TObjectID);
begin
  if (Value <> FProductoID) and assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

procedure TProductoDetalle.SetunidadDeMedidaID(const Value: TObjectID);
begin
  if (Value <> FunidadDeMedidaID) and assigned(FunidadDeMedida) then
    FreeAndNil(FunidadDeMedida);
  FunidadDeMedidaID := Value;
end;

{ TMateriaPrima }

procedure TMateriaPrima.AsignarCantidadesDeStockSifab;
begin
  if Aplicacion.Sesion.ConexionSifab.ConsultaStock.Active then
    Aplicacion.Sesion.ConexionSifab.ConsultaStock.Close;
  try
    Aplicacion.Sesion.ConexionSifab.ConsultaStock.SQL.text := 'SELECT Top 1 ExistenciaTotal, ExistenciaAsignada, ExistenciaLibre FROM StockOperacionesCalculadas where codigoInternoEmpresa = 2 and codigoInternoMaterial=' + IntToStr(CodigoInternoSifab);
    Aplicacion.Sesion.ConexionSifab.ConsultaStock.Open;
    Aplicacion.Sesion.ConexionSifab.ConsultaStock.First;
    if (Aplicacion.Sesion.ConexionSifab.ConsultaStock.RecordCount > 0) then
      begin
        FCantidadStockLibreSifab    := Aplicacion.Sesion.ConexionSifab.ConsultaStock.FieldByName('ExistenciaLibre'   ).Value;
        FCantidadStockAsignadaSifab := Aplicacion.Sesion.ConexionSifab.ConsultaStock.FieldByName('ExistenciaAsignada').Value;
        FCantidadStockTotalSifab    := Aplicacion.Sesion.ConexionSifab.ConsultaStock.FieldByName('ExistenciaTotal'   ).Value;
      end
    else
      begin
        FCantidadStockLibreSifab    := 0;
        FCantidadStockAsignadaSifab := 0;
        FCantidadStockTotalSifab    := 0;
      end;
  finally
    Aplicacion.Sesion.ConexionSifab.ConsultaStock.Close;
  end;
end;

procedure TMateriaPrima.AsignarIDAlProducto;
begin
  Producto.MateriaPrimaID := Self.ID;
  Producto.Save;
end;

constructor TMateriaPrima.Create;
begin
  inherited;
  DMObject                    := Aplicacion.DMProvider.GetGlobalDM(TMateriaPrimaDM);
  LargoCodigo                 := Aplicacion.LargoCodigos.LargoMateriasPrimas;
  RellenarCodigo              := True;
  FArchivoDeImagen            := Null;
  FArchivoSinImagen           := Null;
  FCodigoInternoSifab         := -999;
  FCantidadStockTotalSifab    := -777;
  FCantidadStockLibreSifab    := -777;
  FCantidadStockAsignadaSifab := -777;
  FIDTeamplace                := Null;
end;

procedure TMateriaPrima.Delete;
  Function HayEnArticulos : Boolean;
  var
    AL : TArticuloList;
  begin
    Try
      AL := TArticuloList.CreateByMateriaPrima(Self);
      Result := (AL.Count > 0);
    Finally
      FreeAndNil(AL);
    end;
  end;

  Function HayEnCunios : Boolean;
  var
    CL : TCunioList;
  begin
    Try
      CL := TCunioList.CreateByMateriaPrima(Self);
      Result := (CL.Count > 0);
    Finally
      FreeAndNil(CL);
    end;
  end;

begin
   If HayEnArticulos or HayEnCunios then
    Aplicacion.RaiseExceptionCreate('La materia prima está siendo utilizada en algún artículo y/o cuño.');
  inherited;
end;

function TMateriaPrima.GetAnchoDeTiraDescripcion: TString;
begin
  if (UnidadDeMedidaAnchoDeTiraID <> NullID)  then
    Result := FloatToStrF(AnchoDeTira,ffNumber, 10, 3) + ' ' + UnidadDeMedidaAnchoDeTira.Codigo;
end;

function TMateriaPrima.GetarchivoDeImagen: TString;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagen = null) then
    try
      FL := TFotoList.CreatebyMateriaPrimaCodigo( Codigo , 'materia prima' ); // aca hay que cambiar el create
      if FL.Count > 0 then
        begin
          FL.First;
          FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
        end
      else
        FarchivoDeImagen := ArchivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TMateriaPrima.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenFabricados;
  Result := FarchivoSinImagen;
end;

function TMateriaPrima.GetCantidadStockAsignadaSifab: TReal;
begin
  if isAssigned and (FCantidadStockAsignadaSifab = -777) then
    AsignarCantidadesDeStockSifab;
  Result := FCantidadStockAsignadaSifab;
end;

function TMateriaPrima.GetCantidadStockLibreSifab: TReal;
begin
  if isAssigned and (FCantidadStockLibreSifab = -777) then
    AsignarCantidadesDeStockSifab;
  Result := FCantidadStockLibreSifab;
end;

function TMateriaPrima.GetCantidadStockTotalSifab: TReal;
begin
  if isAssigned and (FCantidadStockTotalSifab = -777) then
    AsignarCantidadesDeStockSifab;
  Result := FCantidadStockTotalSifab;
end;

function TMateriaPrima.GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
begin
  if not assigned(FCategoriaDeMateriaPrima) then
    GetObject(TCategoriaDeMateriaPrima, FCategoriaDeMateriaPrima, FCategoriaDeMateriaPrimaID);
  Result := TCategoriaDeMateriaPrima(FCategoriaDeMateriaPrima);
end;

function TMateriaPrima.GetCodigoInternoSifab: Integer;
  Function GetCodigoInterno(_Codigo: String): Integer;
  begin
    Result := 0;
    if Aplicacion.Sesion.ConexionSifab.SqlQuery.Active then
      Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
    try
      Aplicacion.Sesion.ConexionSifab.SqlQuery.SQL.text := 'Select CodigoInternoMaterial from Material where ( CodigoMaterial = ' + QuotedStr(_Codigo) + ' ) ';
      Aplicacion.Sesion.ConexionSifab.SqlQuery.Open;
      if (Aplicacion.Sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
      begin
        Aplicacion.Sesion.ConexionSifab.SqlQuery.First;
        Result := Aplicacion.sesion.ConexionSifab.SqlQuery.FieldByName('CodigoInternoMaterial').Value;
      end;
    finally
      Aplicacion.Sesion.ConexionSifab.SqlQuery.Close;
    end;
  end;
begin
  if isAssigned and (FCodigoInternoSifab = -999) then
  begin
    FCodigoInternoSifab := GetCodigoInterno(codigo);
    FCantidadStockTotalSifab    := -777;
    FCantidadStockLibreSifab    := -777;
    FCantidadStockAsignadaSifab := -777;
  end;
  Result := FCodigoInternoSifab;
end;

function TMateriaPrima.GetCodigoSifab: TString;
begin
  Result := codigo;
end;

function TMateriaPrima.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TMateriaPrimaList;
end;

function TMateriaPrima.GetDiametroDescripcion: TString;
begin
  if (UnidadDeMedidaDiametroID <> NullID)  then
    Result := FloatToStrF(Diametro,ffNumber, 10, 3) + ' ' + UnidadDeMedidaDiametro.Codigo;
end;

function TMateriaPrima.GetEsInyeccion: TBoolean;
begin
  if (FCategoriaDeMateriaPrimaID <> NullID)then
    Result := CategoriaDeMateriaPrima.EsInyectado;
end;

function TMateriaPrima.GetEspesorDescripcion: TString;
begin
  if (UnidadDeMedidaEspesorID <> NullID)  then
    Result := FloatToStrF(Espesor,ffNumber, 10, 3) + ' ' + UnidadDeMedidaEspesor.Codigo;
end;

function TMateriaPrima.GetEsStockeable: TBoolean;
begin
  Result := True;
end;

function TMateriaPrima.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TMateriaPrimaDM._TeamplaceTableName, TMateriaPrimaDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TMateriaPrimaDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TMateriaPrima.GetLongitudDescripcion: TString;
begin
  if (UnidadDeMedidaLongitudID <> NullID)  then
    Result := FloatToStrF(Longitud,ffNumber, 10, 3) + ' ' + UnidadDeMedidaLongitud.Codigo;
end;

function TMateriaPrima.GetMaterial: TMaterial;
begin
  if not assigned(FMaterial) then
    GetObject(TMaterial, FMaterial, FMaterialID);
  Result := TMaterial(Fmaterial);
end;

function TMateriaPrima.GetMonedaDeCosto: TMoneda;
begin
  if not assigned(FMonedaDeCosto) then
    GetObject(TMoneda, FMonedaDeCosto, FMonedaDeCostoID);
  Result := TMoneda(FMonedaDeCosto);
end;

function TMateriaPrima.GetPesoDescripcion: TString;
begin
  if (UnidadDeMedidaPesoID <> NullID)  then
    Result := FloatToStrF(Peso,ffNumber, 10, 3) + ' ' + UnidadDeMedidaPeso.Codigo;
end;

function TMateriaPrima.GetTipoDeProducto: String;
begin
  Result := aplicacion.ParametrosDelSistema.MateriaPrimaDescripcion;
end;

function TMateriaPrima.GetUnidadDeMedidaAnchoDeTira: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaAnchoDeTira) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaAnchoDeTira, FUnidadDeMedidaAnchoDeTiraID);
  Result := TUnidadDeMedida(FUnidadDeMedidaAnchoDeTira);
end;

function TMateriaPrima.GetUnidadDeMedidaDiametro: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaDiametro) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaDiametro, FUnidadDeMedidaDiametroID);
  Result := TUnidadDeMedida(FUnidadDeMedidaDiametro);
end;

function TMateriaPrima.GetUnidadDeMedidaEspesor: TUnidadDeMedida;
begin
  if not assigned(fUnidadDeMedidaEspesor) then
    GetObject(TUnidadDeMedida, fUnidadDeMedidaEspesor, fUnidadDeMedidaEspesorID);
  Result := TUnidadDeMedida(fUnidadDeMedidaEspesor);
end;

function TMateriaPrima.GetUnidadDeMedidaLongitud: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaLongitud) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaLongitud, FUnidadDeMedidaLongitudID);
  Result := TUnidadDeMedida(FUnidadDeMedidaLongitud);
end;

function TMateriaPrima.GetUnidadDeMedidaPeso: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaPeso) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaPeso, FUnidadDeMedidaPesoID);
  Result := TUnidadDeMedida(FUnidadDeMedidaPeso);
end;

class function TMateriaPrima.GuardarEnTeamPlace(_MP: TMateriaPrima; _MostrarMensaje : Boolean): Boolean;
begin
  Result := False;
  try
    if _MP.EsInactivo then
      Aplicacion.RaiseExceptionCreate('Solo se pueden migrar a Teamplace Materias Primas Activas');

  //  if (Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TMateriaPrimaDM._TeamplaceTableName, TMateriaPrimaDM._TeamplaceCodigo + ' = ' + QuotedStr(_MP.Codigo) , TMateriaPrimaDM._TeamplaceID) <> 0) then
  //    Aplicacion.RaiseExceptionCreate('La Materia Prima ya se encuentra en la Base de datos de Teamplace');

    if (_MP.IDTeamplace <> 0) then
      begin
        Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TMateriaPrimaDM._TeamplaceTableName,
        ['Nombre'      ,
         'UnidadIDStock1',
         'Codigo' ,
         'Activo',
         'Descripcion' ,
         'EsStockeable',
         'CuentaIDCompra',
         'ConceptoIDCompra',
         'UnidadIDVenta',
         'UnidadIDCompra',
         'RelacionUnidadCompraStock',
         'RelacionUnidadVentaStock',
         'TasaImpositivaIDCompra',
         'ProductoTipoID',
         'MonedaID',
         'UnidadValorizacion',
         'NoControlaStock',
         'EsElaborado',
         'ControlImpositivo3'],
        [QuotedStr(_MP.Descripcion),
         IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
         QuotedStr(_MP.codigo ),
         '1',
         QuotedStr( _MP.Descripcion),
         '0',
         IntToStr(_MP.CategoriaDeMateriaPrima.CuentaContableDepositoMP.IDTeamplace),
         '2',
         IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
         IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
         '1',
         '1',
         '1',
         '4',
         IfThen( (_MP.MonedaDeCostoID <> NullID), IntToStr(_MP.MonedaDeCosto.IDTeamplace), IntToStr(Aplicacion.MonedaDefault.IDTeamplace) ),
         '0',
         '0',
         '0',
         '0'],
         TMateriaPrimaDM._TeamplaceID + '=' + IntToStr(_MP.IDTeamplace));
      end
    else
      begin
      Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TMateriaPrimaDM._TeamplaceTableName,
      ['Nombre'      ,
       'UnidadIDStock1',
       'Codigo' ,
       'Activo',
       'Descripcion' ,
       'EsStockeable',
       'CuentaIDCompra',
       'ConceptoIDCompra',
       'UnidadIDVenta',
       'UnidadIDCompra',
       'RelacionUnidadCompraStock',
       'RelacionUnidadVentaStock',
       'TasaImpositivaIDCompra',
       'ProductoTipoID',
       'MonedaID',
       'UnidadValorizacion',
       'NoControlaStock',
       'EsElaborado',
       'ControlImpositivo3'],
      [QuotedStr(_MP.Descripcion),
       IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
       QuotedStr(_MP.codigo ),
       '1',
       QuotedStr( _MP.Descripcion),
       '0',
       IntToStr(_MP.CategoriaDeMateriaPrima.CuentaContableDepositoMP.IDTeamplace),
       '2',
       IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
       IfThen( (_MP.UnidadDeMedidaID <> NullID), IntToStr(_MP.UnidadDeMedida.IDTeamplace), IntToStr(Aplicacion.MeasureService.UnidadDeMedidaPesoDefault.IDTeamplace) ),
       '1',
       '1',
       '1',
       '4',
       IfThen( (_MP.MonedaDeCostoID <> NullID), IntToStr(_MP.MonedaDeCosto.IDTeamplace), IntToStr(Aplicacion.MonedaDefault.IDTeamplace) ),
       '0',
       '0',
       '0',
       '0']);
      end;
    if _MostrarMensaje then
      Aplicacion.Mensaje('Migración Exitosa', 'Aviso', MB_OK);
  Except
    aplicacion.RaiseExceptionCreate('Hubo un error al actualizar la base de datos de Teamplace');
  end;
end;

function TMateriaPrima.Save: Boolean;
begin
  Result := inherited Save;
end;

procedure TMateriaPrima.SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeMateriaPrimaID) and assigned(FCategoriaDeMateriaPrima) then
    FreeAndNil(FCategoriaDeMateriaPrima);
  FCategoriaDeMateriaPrimaID := Value;
end;

procedure TMateriaPrima.SetMaterialID(const Value: TObjectID);
begin
  if (Value <> FMaterialID) and Assigned(FMaterial) then
    FreeAndNil(FMaterial);
  FMaterialID := Value;
end;

procedure TMateriaPrima.SetMonedaDeCostoID(const Value: TObjectID);
begin
  if (Value <> FMonedaDeCostoID) and Assigned(FMonedaDeCosto) then
    FreeAndNil(FMonedaDeCosto);
  FMonedaDeCostoID := Value;
end;

procedure TMateriaPrima.SetUnidadDeMedidaAnchoDeTiraID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaAnchoDeTiraID) and assigned(FUnidadDeMedidaAnchoDeTira) then
    FreeAndNil(FUnidadDeMedidaAnchoDeTira);
  FUnidadDeMedidaAnchoDeTiraID := Value;
end;

procedure TMateriaPrima.SetUnidadDeMedidaDiametroID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaDiametroID) and assigned(FUnidadDeMedidaDiametro) then
    FreeAndNil(FUnidadDeMedidaDiametro);
  FUnidadDeMedidaDiametroID := Value;
end;

procedure TMateriaPrima.setUnidadDeMedidaEspesorID(const Value: TObjectID);
begin
  if (Value <> fUnidadDeMedidaEspesorID) and assigned(fUnidadDeMedidaEspesor) then
    FreeAndNil(fUnidadDeMedidaEspesor);
  fUnidadDeMedidaEspesorID := Value;
end;

procedure TMateriaPrima.SetUnidadDeMedidaLongitudID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaLongitudID) and assigned(FUnidadDeMedidaLongitud) then
    FreeAndNil(FUnidadDeMedidaLongitud);
  FUnidadDeMedidaLongitudID := Value;
end;

procedure TMateriaPrima.SetUnidadDeMedidaPesoID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaPesoID) and assigned(FUnidadDeMedidaPeso) then
    FreeAndNil(FUnidadDeMedidaPeso);
  FUnidadDeMedidaPesoID := Value;
end;

{ TMateriaPrimaDM }

class function TMateriaPrimaDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TMateriaPrimaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMateriaPrimaDM.ID_FieldName: string;
begin
  Result := 'MateriaPrimaID';
end;

procedure TMateriaPrimaDM.PopulateFields(PDObject: TPDObject);
begin
  with TMateriaPrima(PDObject) do
  begin
    StringField[_Codigo]                     := Codigo;
    StringField[_Descripcion]                := Descripcion;
    IDField[_UnidadDeMedidaID]               := FUnidadDeMedidaID;
    IDField[_UnidadDeMedidaAnchoDeTiraID]    := FUnidadDeMedidaAnchoDeTiraID;
    IDField[_UnidadDeMedidaEspesorID]        := FUnidadDeMedidaEspesorID;
    IDField[_UnidadDeMedidaDiametroID]       := FUnidadDeMedidaDiametroID;
    IDField[_UnidadDeMedidaLongitudID]       := FUnidadDeMedidalongitudID;
    IDField[_UnidadDeMedidaPesoID]           := FUnidadDeMedidaPesoID;
    IDField[_productoID]                     := FProductoID;
    IDField[_productoID]                     := FProductoID;
    IDField[_CategoriaDeMateriaPrimaID]      := FCategoriaDeMateriaPrimaID;
    FloatField[_StockMinimo]                 := FStockMinimo;
    FloatField[_StockMedio]                  := FStockMedio;
    FloatField[_LoteCompra]                  := FLoteCompra;
    FloatField[_Espesor]                     := FEspesor;
    FloatField[_AnchoDeTira]                 := FAnchoDeTira;
    FloatField[_Diametro]                    := FDiametro;
    FloatField[_Longitud]                    := FLongitud;
    FloatField[_Peso]                        := FPeso;
    IntegerField[_TiempoDeEntregaEnDias]     := FTiempoDeEntregaEnDias;
    IDField[_MaterialID]                     := FMaterialID;
    BooleanField[_EsInactivo]                := FEsInactivo;
    IDField[_MonedaDeCostoID]                := FMonedaDeCostoID;
    FloatField[_Costo]                       := FCosto;
  end;
end;

procedure TMateriaPrimaDM.PopulateObject(PDObject: TPDObject);
begin
  with TMateriaPrima(PDObject) do
  begin
    codigo                       := StringField[_Codigo];
    Descripcion                  := StringField[_Descripcion];
    FunidadDeMedidaID            := IDField[_UnidadDeMedidaID];
    FUnidadDeMedidaAnchoDeTiraID := IDField[_UnidadDeMedidaAnchoDeTiraID];
    fUnidadDeMedidaEspesorID     := IDField[_UnidadDeMedidaEspesorID];
    FUnidadDeMedidaDiametroID    := IDField[_UnidadDeMedidaDiametroID];
    FUnidadDeMedidaLongitudID    := IDField[_UnidadDeMedidaLongitudID];
    FUnidadDeMedidaPesoID        := IDField[_UnidadDeMedidaPesoID];
    FProductoID                  := IDField[_productoID];
    FCategoriaDeMateriaPrimaID   := IDField[_CategoriaDeMateriaPrimaID];
    FStockMinimo                 := FloatField[_StockMinimo];
    FStockMedio                  := FloatField[_StockMedio];
    FLoteCompra                  := FloatField[_LoteCompra];
    FEspesor                     := FloatField[_Espesor];
    FAnchoDeTira                 := FloatField[_AnchoDeTira];
    FDiametro                    := FloatField[_Diametro];
    FLongitud                    := FloatField[_Longitud];
    FPeso                        := FloatField[_Peso];
    FTiempoDeEntregaEnDias       := IntegerField[_TiempoDeEntregaEnDias];
    FMaterialID                  := IDField[_MaterialID];
    FEsInactivo                  := BooleanField[_EsInactivo];
    FMonedaDeCostoID             := IDField[_MonedaDeCostoID];
    FCosto                       := FloatField[_Costo];
  end;
end;

class function TMateriaPrimaDM.TableName: string;
begin
  Result := 'MateriasPrimas';
end;

{ TMateriaPrimaList }

constructor TMateriaPrimaList.CreateAll(_SoloActivos : Boolean);
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll(False, '' ,_SoloActivos));
end;

constructor TMateriaPrimaList.CreateByCategoriaDeMateriaPrima(_CID : TObjectID; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr( _CID );
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TMateriaPrimaList.CreateByCategoriaDeMateriaPrimaAndCodigoLike(_CID: TObjectID; _C: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' = ' + IntToStr( _CID );
    Result := Result + ' and (' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( '%' + _C + '%' )+ ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TMateriaPrimaList.CreateByMaterial(_M: TMaterial; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '(' + TMateriaPrimaDM._MaterialID + ' = ' + IntToStr(_M.ID) + ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TMateriaPrimaList.CreateByMaterialAndCodigoLike(_M: TMaterial; _C: String; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '(' + TMateriaPrimaDM._MaterialID + ' = ' + IntToStr(_M.ID) + ')';
    Result := Result + ' and (' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( '%' + _C + '%' )+ ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TMateriaPrimaList.CreateByMaterialesPosibles(_M: TMaterial; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( Select ' + TCategoriaDeMateriaPrimaMaterialDM._CategoriaDeMateriaPrimaID + ' from '
    + TCategoriaDeMateriaPrimaMaterialDM.TableName + ' where ' +  TCategoriaDeMateriaPrimaMaterialDM._MaterialID  + ' = ' +  IntToStr(_M.ID) + ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TMateriaPrimaList.CreateByMaterialesPosiblesandCodigoLike(_M: TMaterial; _C: String; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( Select ' + TCategoriaDeMateriaPrimaMaterialDM._CategoriaDeMateriaPrimaID + ' from '
    + TCategoriaDeMateriaPrimaMaterialDM.TableName + ' where ' +  TCategoriaDeMateriaPrimaMaterialDM._MaterialID  + ' = ' +  IntToStr(_M.ID) + ')';
    Result := Result + ' and (' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( '%' + _C + '%' )+ ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TMateriaPrimaList.CreateByTerminacion(_T: TTerminacion);
  function WhereString: string;
  begin
    Result := TMateriaPrimaDM.ID_FieldName + ' in (';
    Result := Result + 'Select ' + TTerminacionInsumoDM.ID_Fieldname + ' from ' + TTerminacionInsumoDM.TableName + ' where ';
    Result := Result + TTerminacionInsumoDM._terminacionID + ' = ' + IntToStr(_T.ID) + ')';
  end;
begin
  inherited Create(TMateriaPrima, TMateriaPrimaDM.CreateAll(False, WhereString));
end;

constructor TMateriaPrimaList.CreateEmpty;
begin
  inherited Create(TMateriaPrima,TMateriaPrimaDM.CreateEmpty);
end;

function TMateriaPrimaList.CreateNewObject: TPDObject;
begin
  Result := TMateriaPrima.Create;
end;

function TMateriaPrimaList.GetActual: TMateriaPrima;
begin
  Result := TMateriaPrima(CurrentObject);
end;

{ TProductoDM }

class function TProductoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TProductoDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result :=          TProductoDM.TableName     + '.*, ';
    Result := Result + TFabricadoDM.TableName    + '.*, ';
    Result := Result + TMateriaPrimaDM.TableName + '.*, ';
    Result := Result + TServicioDM.TableName     + '.*  ';
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' left join '+ TFabricadoDM.TableName    + ' on '+ TProductoDM.TableName + '.' + TProductoDM._FabricadoID    +' = '+ TFabricadoDM.TableName    + '.' + TFabricadoDM.ID_FieldName;
    Result := Result + ' left join '+ TMateriaPrimaDM.TableName + ' on '+ TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID +' = '+ TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName;
    Result := Result + ' left join '+ TServicioDM.TableName     + ' on '+ TProductoDM.TableName + '.' + TProductoDM._ServicioID     +' = '+ TServicioDM.TableName     + '.' + TServicioDM.ID_FieldName;
  end;
begin
  Case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TProductoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TProductoDM.ID_FieldName: string;
begin
  Result := 'ProductoID';
end;

procedure TProductoDM.PopulateFields(PDObject: TPDObject);
begin
  with TProducto(PDObject) do
  begin
    IDField[_MateriaPrimaID]        := FMateriaPrimaID;
    IDField[_ServicioID]            := FServicioID;
    IDField[_FabricadoID]           := FFabricadoID;
    DateTimeField[_FechaDeCreacion] := FfechaDeCreacion;
    BooleanField[_EsInactivo]       := FEsInactivo;
  end;
end;

procedure TProductoDM.PopulateObject(PDObject: TPDObject);
begin
  with TProducto(PDObject) do
  begin
    FMateriaPrimaID  := IDField[_MateriaPrimaID];
    FservicioID      := IDField[_ServicioID];
    FFabricadoID     := IDField[_FabricadoID];
    FfechaDeCreacion := DateTimeField[_FechaDeCreacion];
    FEsInactivo      := BooleanField[_EsInactivo];
  end;
end;

class function TProductoDM.TableName: string;
begin
  Result := 'productos';
end;

{ TProductoList }

constructor TProductoList.CreateAll(_SoloActivos, _Fab, _Serv, _MP: Boolean);
  Function WhereString: String;
  Begin
    Result := '';
    With TProductoDM Do
      Begin
        If (_Fab) Or (_Serv) or (_MP) Then
          begin
            If _Fab Then
              Result := Result +'('+ TableName +'.'+ _FabricadoID + ' is not null )' +  ifThen( _SoloActivos, ' and (' + TableName +'.'+ _FabricadoID +
              ' in (select '+ TFabricadoDM.ID_FieldName + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM.esInactivo_FieldName + ' = 0)) ', '' );

            If _Serv then
              Result := Result + ifThen( (Result >''), ' and ('+ TableName + '.' + _ServicioID + ' is not null )','('+ TableName + '.' + _ServicioID + ' > is not null )') +
              ifThen( _SoloActivos, ' and (' + TProductoDM.TableName +'.'+ TProductoDM._ServicioID +
              ' in (select '+ TServicioDM.ID_FieldName + ' from ' + TServicioDM.TableName + ' where ' + TServicioDM.esInactivo_FieldName + ' = 0)) ', '' );

            If _MP then
              Result := Result + ifThen( (Result >''), ' and ('+ TableName + '.' + _MateriaPrimaID + ' is not null)','('+ TableName + '.' + _MateriaPrimaID + ' is not null )' )+
              ifThen( _SoloActivos, ' and (' + TableName + '.' + _MateriaPrimaID +
              ' in (select '+ TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM.esInactivo_FieldName + ' = 0)) ', '' );
          end;
    End;
  end;

begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString, False ));
end;

constructor TProductoList.CreateAllByCodigoLikeFabricadoPorCliente(_Codigo: String; _CID: TObjectID; _Vendible: Boolean; _SoloActivos: Boolean);

  Function WhereString: String;
  Begin
//    Result := TProductoDM.TableName + '.'+TProductoDM._FabricadoID + ' IN (Select ' + TFabricadoDM.ID_FieldName + ' from ' + TFabricadoDM.TableName +
//      ' Where ((lower(tablename.codigo) Like ' + quotedstr(lowerCase(_Codigo) + '%') + ifthen( _SoloActivos,') And (' + TFabricadoDM.esInactivo_FieldName +'=0) And ' ,') And ')
//      + TFabricadoDM._articuloID + ' IN (Select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName +
//      ' Where ' + TArticuloDM._TipoDeComponenteID + ' IN (Select ' + TTipoDeComponenteDM.ID_FieldName + ' from ' +  TTipoDeComponenteDM.TableName + ' Where (' +
//      TTipoDeComponenteDM._esVendible + ' = 0))))' + 'And (' + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID + ' IN (Select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.TableName + ' Where (' +
//      TCunioDM._EsCunioEstandar + '=1) Or (' + TCunioDM.ID_FieldName +' in (Select ' + TCunioEmpresaDM._CunioID + ' from ' +  TCunioEmpresaDM.TableName + ' where (' + TCunioEmpresaDM._empresaID +
//      '=' + IntToStr(_CID) + ' or ' + TCunioEmpresaDM._empresaID +
//      ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' +
//      TEmpresaAsociadaDM.TableName + ' where ' +
//      TEmpresaAsociadaDM._empresaID + '=' + IntToStr(_CID)
//      + ' or ' + TCunioEmpresaDM._empresaID + ' in (Select ' +
//      TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' +
//      TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._empresaID + '=' + IntToStr(_CID) + ')))))))';
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateAllByFabricadoPorCliente(_CID: TObjectID; _SoloActivos: Boolean);
  Function WhereFabricado: String;
  Begin
//    Result := '('+ TProductoDM.TableName+'.'+TProductoDM._FabricadoID + ' > 0 ) and (' + TProductoDM.TableName+'.'+TProductoDM._FabricadoID + ' IN ' + '(Select ' + TProductoDM._FabricadoID + ' from ' + TFabricadoDM.TableName +
//      ' Where ' + ifThen( _SoloActivos, '('+TFabricadoDM.EsInactivo_FieldName+'=0) and ', '') + TFabricadoDM._articuloID + ' IN ' + '(Select ' + TFabricadoDM._articuloID + ' from ' + TArticuloDM.TableName +
//      ' Where  ' + TArticuloDM._TipoDeComponenteID + ' IN ' + '(Select ' + TArticuloDM._TipoDeComponenteID + ' from ' +
//      TTipoDeComponenteDM.TableName + ' Where (esVendible = 1))) And (' + TFabricadoDM._CunioID + ' IN (Select ' +
//      TCunioDM.ID_FieldName + ' from ' + TCunioDM.TableName + ' Where (' + TCunioDM._EsCunioEstandar + '=1) Or ' + TCunioDM.ID_FieldName + ' IN ' +
//      '(Select ' + TCunioEmpresaDM._CunioID + ' from ' + TCunioEmpresaDM.TableName + ' where (' + TCunioEmpresaDM._empresaID +'=' + IntToStr(_CID) +
//      ') or ' + TCunioEmpresaDM._empresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where (' +
//      TEmpresaAsociadaDM._empresaID + '=' + IntToStr(_CID) + ') or ' + TEmpresaAsociadaDM._empresaID + ' in (Select ' +
//      TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where (' + TLicenciatarioDM._empresaID + '=' + IntToStr(_CID) + ') )))))))';
  End;

  function WhereMateriaPrima: String;
  Begin
    Result := '('+ TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID + ' is not null )' +
    ifThen( _SoloActivos, ' and (' + TProductoDM.TableName+'.'+ TProductoDM._MateriaPrimaID + ' in (Select ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.EsInactivo_FieldName+'=0))', '');
  end;

  function WhereServicio: String;
  Begin
    Result := '('+ TProductoDM.TableName + '.' + TProductoDM._ServicioID + ' is not null )' +
    ifThen( _SoloActivos, ' and (' + TProductoDM.TableName+'.'+ TProductoDM._ServicioID + ' in (Select ' + TServicioDM.TableName + '.' + TServicioDM.ID_FieldName + ' from ' + TServicioDM.TableName + ' where ' + TServicioDM.TableName + '.' + TServicioDM.EsInactivo_FieldName+'=0))', '');
  end;

  function WhereString: String;
  begin
    Result := Result + WhereFabricado;
    Result := Result + ' or ';
    Result := Result + '( ' + WhereMateriaPrima + ' ) ';

    Result := Result + ' or ';
    Result := Result + '( ' + WhereServicio + ' ) ';
  end;

begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateAllFabricados( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+TProductoDM.TableName+'.'+TProductoDM._FabricadoID + ' is not null) ' + ifThen( _SoloActivos, ' and (' + TProductoDM.TableName +'.'+ TProductoDM._FabricadoID +
              ' in (select '+ TFabricadoDM.ID_FieldName + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM.esInactivo_FieldName + ' = 0)) ', '' );
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString, _SoloActivos ));
end;

constructor TProductoList.CreateByCodigo(_Cod: TString);
  Function WhereString : String;
  begin
    Result := '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TFabricadoDM.Tablename+'.'+ TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.Tablename +' where ' + TFabricadoDM.Tablename+'.'+ TFabricadoDM._codigo + ' = '+ QuotedStr( _Cod) +'))';
    Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TMateriaPrimaDM.Tablename+'.'+ TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.Tablename +' where ' + TMateriaPrimaDM.Tablename + '.'+ TMateriaPrimaDM._codigo + ' = '+ QuotedStr( _Cod) +'))';
    Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TServicioDM.Tablename+'.'+ TServicioDM._ProductoID + ' from ' + TServicioDM.Tablename +' where ' + TServicioDM.tablename +'.'+ TServicioDM._codigo + ' = '+ QuotedStr( _Cod) +'))';
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateByCodigoLike(_cod: String; _Fab, _Serv, _MP: Boolean; _SoloActivos:Boolean);
  Function WhereString : String;
  begin
    if _SoloActivos then
      begin
        Result := '(('             + TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName +
                  ' in( Select '   + TFabricadoDM.Tablename    + '.' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.Tablename +
                  ' where '        + TFabricadoDM.Tablename    + '.' + TFabricadoDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') +
                  ')) and ('       + TFabricadoDM.Tablename    + '.' + TFabricadoDM._esInactivo + ' = 0))';
        Result := Result + ' or (('+ TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName +
                  ' in( Select '   + TMateriaPrimaDM.Tablename + '.' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.Tablename +
                  ' where '        + TMateriaPrimaDM.Tablename + '.' + TMateriaPrimaDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') +
                  ')) and ('       + TMateriaPrimaDM.Tablename + '.' + TMateriaPrimaDM._esInactivo + ' = 0))';
        Result := Result +' or ((' + TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName +
                  ' in( Select '   + TServicioDM.Tablename     + '.' + TServicioDM._ProductoID + ' from ' + TServicioDM.Tablename +
                  ' where '        + TServicioDM.Tablename     + '.' + TServicioDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') +
                  ')) and ('       + TServicioDM.Tablename     + '.' + TServicioDM._EsInactivo + ' = 0))';
      end
    else
      begin
        Result := '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TFabricadoDM.Tablename+'.'+ TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.Tablename +' where ' + TFabricadoDM.TableName + '.' + TFabricadoDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
        Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TMateriaPrimaDM.Tablename+'.'+ TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.Tablename +' where ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
        Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TServicioDM.Tablename+'.'+ TServicioDM._ProductoID + ' from ' + TServicioDM.Tablename +' where ' + TServicioDM.TableName + '.' + TServicioDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
      end
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateByCodigoLikeSemielaborado(_cod: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    if _SoloActivos then
      begin
        Result := '(('             + TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName +
                  ' in( Select '   + TFabricadoDM.Tablename    + '.' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.Tablename +
                  ' where '        + TFabricadoDM.Tablename    + '.' + TFabricadoDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%')
                  + ')) and ('     + TFabricadoDM.Tablename    + '.' + TFabricadoDM._esInactivo + ' = 0 )'
                  + ' and ('       + TFabricadoDM.Tablename    + '.' + TFabricadoDM._Crc + ' = 0))';
      end
    else
      begin
        Result := '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TFabricadoDM.Tablename+'.'+ TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.Tablename +' where ' + TFabricadoDM.TableName + '.' + TFabricadoDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
        Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TMateriaPrimaDM.Tablename+'.'+ TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.Tablename +' where ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
        Result := Result + ' or ' + '('+ TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in( Select ' + TServicioDM.Tablename+'.'+ TServicioDM._ProductoID + ' from ' + TServicioDM.Tablename +' where ' + TServicioDM.TableName + '.' + TServicioDM._codigo + ' Like '+ QuotedStr('%'+_Cod+'%') + '))';
        Result := Result + ' and (' + TFabricadoDM.Tablename   + '.' + TFabricadoDM._esInactivo + ' = 0 )';
      end
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateByFabricado(_F: TFabricado);
  Function WhereString : String;
  begin
    Result := '('+TProductoDM._FabricadoID + ' = ' + IntToStr(_F.ID)+')';
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

Constructor TProductoList.CreateByFiltrosFabricado(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde,
  _DesarrolloHasta, _Cliente, _Marca, _Estado: String; _Depositos : TStringList ; _Medida: Integer; _CuniosEstandar, _DesarrollosEstandar: Boolean;
  _Producto: String);

  function SqlFabricados: String;
  var
    CondProducto, CondFamilia, CondArticulo, condMaterial, condTerminacion, condCRC, condCliente, CondMarca, CondCunio, CondCuniosEstandar,
    CondDesarrollosEstandar, CondDesarrollo, CondMedida, CondEstadoOrigen, CondEstadoDestino, CondDepositoOrigen, CondDepositoDestino, CondDeposito : String;
    CL : TClienteList;
    ML : TMarcaList;
    I : Integer;
  begin
// 1
    CondProducto := '';
    if (_Producto>'') then
      CondProducto := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

    condFamilia := '';
    if (_Familia>'') then
      condFamilia := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._ArticuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
      ' where ' + TArticuloDM._FamiliaDeArticuloID + ' in ( select '+ TFamiliaDeArticuloDM.ID_FieldName + ' from ' + TFamiliaDeArticuloDM.TableName +
      ' where ' + TFamiliaDeArticuloDM._codigo + ' = ' + QuotedStr( _Familia ) + '))) ';
// 2
    condArticulo := '';
    if (_Articulo>'') then
      begin
        condArticulo :=  ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName;
        if (pos('_', _Articulo)=0 ) and (pos('%', _Articulo)=0 ) then
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' = ' + QuotedStr( _Articulo ) + ')) '
        else
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' like ' + QuotedStr( _Articulo ) + ')) ';
      end;
// 3
    condMaterial := '';
    if (_Material>'') then
      condMaterial := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName + ' where ' + TArticuloDM._MaterialID + ' in ( select '+
      TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM._Codigo + ' = ' + QuotedStr( _Material ) + '))) ';
// 4
    condTerminacion := '';
    if (_Terminacion>'') then
      begin
        condTerminacion := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' in ( select ' + TTerminacionDM.ID_FieldName + ' from ' +TTerminacionDM.TableName;
        condTerminacion := condTerminacion + ' where ' + TTerminacionDM._codigo + ' = ' + QuotedStr( _Terminacion ) + ')) '
      end;
// 5
    condCRC := '';
    if (_CRC>'') then
      condCRC := ' (('+ TFabricadoDM._Crc +' > 0) and (' + TFabricadoDM._Codigo + ' like ' + QuotedStr( '%#'+_CRC )+')) ';

// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
    CondCunio := '';
    if (_CunioDesde>'') then
      begin
        CondCunio := CondCunio + '('+ TCunioDM.TableName+'.'+TCunioDM._codigo;
        if (_CunioHasta>'') then
          CondCunio := CondCunio + ' >= ' + QuotedStr( _CunioDesde ) + ') and ('+ TCunioDM.TableName+'.'+TCunioDM._codigo + ' <= ' + QuotedStr( _CunioHasta ) +') '
        else
          CondCunio := CondCunio + ' = ' + QuotedStr( _CunioDesde ) + ') ';
      end;

    if _CuniosEstandar then
      begin
        CondCuniosEstandar := '('+ TCunioDM.TableName+ '.'+ TCunioDM._EsCunioEstandar + '=1) ';
        if CondCunio>'' then
          CondCunio := CondCuniosEstandar + ' and ' + CondCunio
        else
          CondCunio := CondCuniosEstandar;
      end;

// 7 _DesarrolloDesde, _DesarrolloHasta,
    CondDesarrollosEstandar := '';
    if _DesarrollosEstandar then
      CondDesarrollosEstandar := ' ('+ TDesarrolloDM.TableName+ '.'+ TDesarrolloDM._esEstandar + '=1) ';

    condDesarrollo := '';
    if (_DesarrolloDesde>'') then
      begin
        condDesarrollo := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' ;
        if (CondDesarrollosEstandar > '') then
          condDesarrollo :=  condDesarrollo + CondDesarrollosEstandar + ' and ';
        condDesarrollo :=  condDesarrollo + ' (' + TDesarrolloDM._codigo;
        if (_DesarrolloHasta>'') then
          condDesarrollo := condDesarrollo + ' Between ' + QuotedStr( _DesarrolloDesde ) + ' and '+ QuotedStr( _DesarrolloHasta ) +'))) '
        else
          condDesarrollo := condDesarrollo + ' = ' + QuotedStr( _DesarrolloDesde ) + '))) ';
      end
    else
      if (CondDesarrollosEstandar>'') then
        condDesarrollo := ' (' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' + CondDesarrollosEstandar + '))';

// 8
    condCliente := '';
    if (_Cliente>'') then
      try
        CL := TClienteList.CreateByCodigo(_Cliente, False );
        CL.First;

        CondCliente := '( ' + TFabricadoDM.TableName + '.' + TFabricadoDM._cunioID + ' in ' + ' Select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.Tablename + ' Where ' + TCunioDM._MarcaID + ' in (';
        CondCliente := CondCliente + '( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(Cl.actual.ID) + ') or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(Cl.actual.ID) + ' )) or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(Cl.actual.ID) + ' ))) ))';

      finally
        FreeAndNil( CL);
      end;

// 9 _marca
    CondMarca := '';
    if (_Marca>'') then
      Try
        ML := TMarcaList.CreateByDescripcion(_Marca, TMarcaDM._Descripcion ,False);
        ML.First;
        CondMarca := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID + ' IN (SELECT '+ TCunioDM.ID_FieldName + ' from '+ TCunioDM.TableName + ' WHERE (' ;
        CondMarca := CondMarca + TCunioDM._MarcaID +' = '+ IntToStr( ML.actual.ID)+ '))) ' ;
      finally
        FreeAndNil(ML);
      end;

// 10 _Medida
    CondMedida := '';
    if (_Medida>0) then
      begin
        CondMedida := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
                     ' where (' + TArticuloDM._medida + ' = ' + IntToStr( _Medida ) + '))) ';
      end;

    CondDepositoOrigen := '';
    if (_Depositos.Count > 0) then
      begin
        CondDepositoOrigen := TProductoDM.Tablename + '.' + TProductoDM.ID_FieldName + ' in ( Select ' + TMovimientoDeStockDM._ProductoID + ' from ' + TMovimientoDeStockDM.TableName;
        CondDepositoOrigen := CondDepositoOrigen + ' where ' +  TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoOrigen := CondDepositoOrigen + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDepositoOrigen := CondDepositoOrigen + _Depositos[I] + ', ';
        CondDepositoOrigen := CondDepositoOrigen + '-1 ) )';
      end;

    CondDepositoDestino := '';
    if (_Depositos.Count > 0) then
      begin
        CondDepositoDestino := TProductoDM.Tablename + '.' + TProductoDM.ID_FieldName + ' in ( Select ' + TMovimientoDeStockDM._ProductoID + ' from ' + TMovimientoDeStockDM.TableName;
        CondDepositoDestino := CondDepositoDestino + ' where ' +  TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoDestino := CondDepositoDestino + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDepositoDestino := CondDepositoDestino + _Depositos[I] + ', ';
        CondDepositoDestino := CondDepositoDestino + '-1 ) )';
      end;

    CondDeposito := '';
    if (CondDepositoOrigen > '') and (CondDepositoDestino > '') then
      CondDeposito := '(' + CondDepositoOrigen + ' or ' + CondDepositoDestino + ')';

//    CondDepositoOrigen := '';
//    if (_Deposito>'') then
//      begin
//        CondDepositoOrigen := ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
//        CondDepositoOrigen := CondDepositoOrigen + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
//        CondDepositoOrigen := CondDepositoOrigen + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
//      end;
//    CondDepositoDestino := '';
//    if (_Deposito>'') then
//      begin
//        CondDepositoDestino :=                       ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoDestinoID;
//        CondDepositoDestino := CondDepositoDestino + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
//        CondDepositoDestino := CondDepositoDestino + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
//      end;

    CondEstadoOrigen := '';
    if (_Estado>'') then
      begin
        CondEstadoOrigen :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoOrigenID;
        CondEstadoOrigen := CondEstadoOrigen + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoOrigen := CondEstadoOrigen + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    CondEstadoDestino := '';
    if (_Estado>'') then
      begin
        CondEstadoDestino :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoDestinoID;
        CondEstadoDestino := CondEstadoDestino + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoDestino := CondEstadoDestino + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    result := '';
    if (CondProducto>'') then
      Result := CondProducto;

    if (condFamilia>'') then
      Result := condFamilia;

    if (condArticulo>'') then
      if result>'' then
        Result := Result + ' and ' + condArticulo
      else
        Result := condArticulo;

    if (condMaterial>'') then
      if result>'' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (condTerminacion>'') then
      if result>'' then
        Result := Result + ' and ' + condTerminacion
      else
        Result := condTerminacion;

    if (condCRC>'') then
      if result>'' then
        Result := Result + ' and ' + condCRC
      else
        Result := condCRC;

    if (CondCunio>'') then
      if result>'' then
        Result := Result + ' and ' + CondCunio
      else
        Result := CondCunio;

    if (CondDesarrollo>'') then
      if result>'' then
        Result := Result + ' and ' + CondDesarrollo
      else
        Result := CondDesarrollo;

    if (CondCliente>'') then
      if result>'' then
        Result := Result + ' and ' + CondCliente
      else
        Result := CondCliente;

    if (CondMarca>'') then
      if result>'' then
        Result := Result + ' and ' + CondMarca
      else
        Result := CondMarca;

    if (CondMedida>'') then
      if result>'' then
        Result := Result + ' and ' + CondMedida
      else
        Result := CondMedida;

    if (CondDepositoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoOrigen
      else
        Result := CondDepositoOrigen;

    if (CondDepositoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoDestino
      else
        Result := CondDepositoDestino;

    if (CondEstadoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoOrigen
      else
        Result := CondEstadoOrigen;

    if (CondEstadoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoDestino
      else
        Result := CondEstadoDestino;
  end;

  function WhereString: String;
  var
    CondicionDeFiltrado : String;
  begin
    CondicionDeFiltrado := SQLFabricados;
    if (CondicionDeFiltrado = '') then
      Result := ''
    else
      begin
        result := CondicionDeFiltrado ;
      end;
  end;

begin
  inherited Create(TProducto, TProductoDM.CreateAll(False, WhereString, False));
end;

constructor TProductoList.CreateByFiltrosMateriaPrima(_Depositos : TStringList ; _Estado, _Material : String; _Producto : String; _CategoriaDeMateriaPrimaCodigo: String);
  function SqlFabricados: String;
  var
    CondProducto, condMaterial, CondEstadoOrigen, CondEstadoDestino, CondDepositoOrigen, CondDepositoDestino, CondDeposito, CondCategoria : String;
    I : Integer;
  begin
    CondProducto := '';
    if (_Producto>'') then
      if _CategoriaDeMateriaPrimaCodigo>'' then
        begin
          CondProducto := TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID  + ' in ( Select ' + TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ') and ( ';
          CondProducto := CondProducto +  TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( Select ' + TCategoriaDeMateriaPrimaDM.ID_FieldName + ' from ' + TCategoriaDeMateriaPrimaDM.TableName + ' where ' + TCategoriaDeMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _CategoriaDeMateriaPrimaCodigo + '%' ) + ') )'
        end
      else
      CondProducto := TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID + ' in ( Select ' + TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

    if (CondProducto ='' ) and (_CategoriaDeMateriaPrimaCodigo>'') then
      CondProducto := TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID  + ' in ( Select ' + TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( Select ' + TCategoriaDeMateriaPrimaDM.ID_FieldName + ' from ' + TCategoriaDeMateriaPrimaDM.TableName + ' where ' + TCategoriaDeMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _CategoriaDeMateriaPrimaCodigo + '%' ) + ')) ';

    CondMaterial := '';
    if (_Material>'') then
      CondMaterial := TProductoDM.TableName +'.'+ TProductoDM._MateriaPrimaID + ' in ( Select ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName + ' from ' + TMateriaPrimaDM.TableName + ' where ' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._MaterialID + ' in ( ' +
      ' Select ' + TMaterialDM.TableName + '.' + TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM.TableName + '.' + TMaterialDM._Codigo + ' = ' + QuotedStr(_Material) + '))';

    CondDepositoOrigen := '';
    if (_Depositos.Count > 0) then
      begin
        CondDepositoOrigen := TProductoDM.Tablename + '.' + TProductoDM.ID_FieldName + ' in ( Select ' + TMovimientoDeStockDM._ProductoID + ' from ' + TMovimientoDeStockDM.TableName;
        CondDepositoOrigen := CondDepositoOrigen + ' where ' +  TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoOrigen := CondDepositoOrigen + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDepositoOrigen := CondDepositoOrigen + _Depositos[I] + ', ';
        CondDepositoOrigen := CondDepositoOrigen + '-1 ) )';
      end;

    CondDepositoDestino := '';
    if (_Depositos.Count > 0) then
      begin
        CondDepositoDestino := TProductoDM.Tablename + '.' + TProductoDM.ID_FieldName + ' in ( Select ' + TMovimientoDeStockDM._ProductoID + ' from ' + TMovimientoDeStockDM.TableName;
        CondDepositoDestino := CondDepositoDestino + ' where ' +  TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoDestino := CondDepositoDestino + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDepositoDestino := CondDepositoDestino + _Depositos[I] + ', ';
        CondDepositoDestino := CondDepositoDestino + '-1 ) )';
      end;

    if (CondDepositoOrigen > '') and (CondDepositoDestino > '') then
      CondDeposito := '(' + CondDepositoOrigen + ' or ' + CondDepositoDestino + ')';

    CondEstadoOrigen := '';
    if (_Estado>'') then
      begin
        CondEstadoOrigen :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoOrigenID;
        CondEstadoOrigen := CondEstadoOrigen + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoOrigen := CondEstadoOrigen + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    CondEstadoDestino := '';
    if (_Estado>'') then
      begin
        CondEstadoDestino :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoDestinoID;
        CondEstadoDestino := CondEstadoDestino + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoDestino := CondEstadoDestino + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    result := '';
    if (CondProducto>'') then
      Result := CondProducto;

    if (condMaterial>'') then
      if result>'' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (CondDeposito>'') then
      if result>'' then
        Result := Result + ' and ' + CondDeposito
      else
        Result := CondDeposito;

    if (CondEstadoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoOrigen
      else
        Result := CondEstadoOrigen;

    if (CondEstadoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoDestino
      else
        Result := CondEstadoDestino;
  end;

  function WhereString: String;
  var
    CondicionDeFiltrado : String;
  begin
    CondicionDeFiltrado := SQLFabricados;
    if (CondicionDeFiltrado = '') then
      Result := ''
    else
      begin
        result := CondicionDeFiltrado ;
      end;
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll(False, WhereString, False));
end;

constructor TProductoList.CreateByID(_ID: TObjectID);
begin
  inherited Create(TProducto, TProductoDM.CreateByID(_ID));
end;

constructor TProductoList.CreateByMateriaPrima(_MP: TMateriaPrima);
  Function WhereString : String;
  begin
    Result := '(' + TProductoDM.TableName + '.' + TProductoDM._MateriaPrimaID + ' = ' + IntToStr(_MP.ID) + ')';
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( False, WhereString ));
end;

constructor TProductoList.CreateByProductosEnStock(_DepositoID: TObjectID; _EstadoID: TObjectID; _esMateriaPrima, _EsFabricado: Boolean);
//var
//  SL  : TStringList;
//  SIL : TStockItemList;
//  _in : string;
//  i   : integer;
//  _Mat, _Fab : String;
begin
//  sl := tstringlist.Create;
//  SIl := TStockItemList.CreateByEstadoDeposito(_DepositoID,_EstadoID);
//  if sil.Count>0 then
//    repeat
//      if sl.IndexOf(IntToStr(sil.Actual.ProductoID))=-1 then
//        sl.Add(IntToStr(sil.Actual.ProductoID));
//      sil.next;
//    until
//  sil.IsLast;
//
//  FreeAndNil(sil);
//  _in := '(-1';
//  for i := 0 to SL.Count-1 do
//    _in := _in+','+SL[i];
//  _in := _in+')';
//
//  FreeAndNil(SL);
//  If _EsFabricado    Then
//    _Fab:='('+ TProductoDM._FabricadoID+' Is Not Null) And';
//  If _EsMateriaPrima Then
//    _Mat:='('+ TProductoDM._MateriaPrimaID+' is Not Null) And';
//  inherited Create(TProducto,TProductoDM.Create('select * from tablename where '+_Mat+_Fab+' (IDFieldName in '+_in+')'));
end;

constructor TProductoList.CreateByServicio(_S: TServicio);
  Function WhereString : String;
  begin
    Result := '('+TProductoDM._ServicioID + ' = ' + IntToStr(_S.ID)+')';
  end;
begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateEmpty;
begin
  inherited Create(TProducto, TProductoDM.CreateEmpty);
end;

function TProductoList.CreateNewObject: TPDObject;
begin
  Result := TProducto.Create;
end;

constructor TProductoList.CreateUniqueByCliente(_C: TCliente; _CodProd: String; _SoloActivos: Boolean;_FechaDesde: TDate; _AplicaFecha: Boolean);

  Function WhereString: String;
  begin
    Result := TProductoDM.TableName +'.'+ TProductoDM.ID_FieldName + ' in ';
    Result := Result + '(';
    Result := Result + 'Select distinct ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._productoID + ' from ' + TPedidoDeVentaItemDM.TableName + ' where ' +  TPedidoDeVentaItemDM.TableName + '.' +TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ';
    Result := Result + '( select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where (' + TPedidoDeVentaDM._ClienteID + '=' + IntToStr(_C.ID) + ')';
    if _AplicaFecha then
      Result := Result + ' and (' + TPedidoDeVentaDM._FechaReal + ' >= ' + quotedstr(FormatDateTime('yyyymmdd', _FechaDesde)) + ')';
    Result := Result + ')';
    Result := Result + ')';

    if (_CodProd > '') then
      begin
        if Copy(_CodProd, 1, 1) <> '%' then
          _CodProd := '%' + _CodProd;
        if Copy(_CodProd, length(_CodProd), 1) <> '%' then
          _CodProd := _CodProd + '%';

        Result := Result + ' and ';
        Result := Result + TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in ';
        Result := Result + '(';
        Result := Result + 'Select ' + TFabricadoDM._productoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo + ' like ' + quotedstr(_CodProd) + ifThen(_SoloActivos,' and '+TFabricadoDM.EsInactivo_FieldName+' = 0', '' );
        Result := Result + ')';
      end;
  end;

begin
  inherited Create(TProducto, TProductoDM.CreateAll( false, WhereString ));
end;

constructor TProductoList.CreateUniqueByClienteAndMarca(_C: TCliente;_M: TMarca; _CodProd: String; _SoloActivos: Boolean; _FechaDesde: TDate; _AplicaFecha: Boolean);
  Function WhereString: String;
  begin
    Result := TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in ';
    Result := Result + '(';
    Result := Result + 'Select distinct ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._productoID + ' from ' + TPedidoDeVentaItemDM.TableName + ' where ' + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ';
    Result := Result + '( select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where (' + TPedidoDeVentaDM._ClienteID + '=' + IntToStr(_C.ID) + ')';
    if _AplicaFecha then
      Result := Result + ' and (' + TPedidoDeVentaItemDM.TableName + '.' +TPedidoDeVentaDM._FechaReal + ' >= ' + quotedstr(FormatDateTime('yyyymmdd', _FechaDesde)) + ')';
    Result := Result + ')';
    Result := Result + ')';

    if (_CodProd > '') then
      begin
        if Copy(_CodProd, length(_CodProd), 1) <> '%' then
          _CodProd := _CodProd + '%';
        Result := Result + ' and ';
        Result := Result + TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in ';
        Result := Result + '(';
        Result := Result + 'Select ' + TFabricadoDM._productoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM.TableName + '.' + TFabricadoDM._Codigo + ' like ' + quotedstr(_CodProd);
        Result := Result + ' and ' + TFabricadoDM._CunioID + ' in (';
        Result := Result + ' select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.TableName + ' where (' + TCunioDM._EsCunioEstandar + ' =1) or (' + TCunioDM._marcaID + ' = ' + IntToStr(_M.ID) + '))';
        Result := Result + ')';
      end
    else
      begin
        Result := Result + ' and ';
        Result := Result + TProductoDM.TableName + '.' + TProductoDM.ID_FieldName + ' in ';
        Result := Result + '(';
        Result := Result + 'Select ' + TFabricadoDM._productoID + ' from ' + TFabricadoDM.TableName + ' where ' +
        ifThen(_SoloActivos,'('+TFabricadoDM.EsInactivo_FieldName+' = 0) and ', '' )+ TFabricadoDM._CunioID + ' in (';
        Result := Result + ' select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.TableName + ' where (' + TCunioDM._EsCunioEstandar + ' =1) or (' + TCunioDM._marcaID + ' = ' + IntToStr(_M.ID) + '))';
        Result := Result + ')';
      end;

  end;

begin
  inherited Create(TProducto, TProductoDM.CreateAll( False, WhereString, _SoloActivos ));
end;

function TProductoList.FindCodigo(_cod: string): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
    begin
      Result := uppercase(TProducto(CurrentObject).codigo) = uppercase(_cod);
      if not Result then
        next;
    end;

  if IsLast then
    First;
end;

function TProductoList.GetProducto: TProducto;
begin
  Result := TProducto(CurrentObject);
end;

{ TServicio }
function TServicio.GetCodigoInternoSifab: TEntero;
var
  Aux : String;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab  := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('CargoExtra', 'CodigoCargoExtra = ' + QuotedStr( Codigo ), 'CodigoInternoCargoExtra');
  Result := FCodigoInternoSifab;
end;

function TServicio.GetCodigoSifab: TString;
begin
  Result := Codigo;
end;

function TServicio.GetConceptoContableFacturacion: TCuentaContable;
begin
  if not assigned(FConceptoContableFacturacion) then
    GetObject(TCuentaContable, FConceptoContableFacturacion, ConceptoContableFacturacionID);
  Result := TCuentaContable(FConceptoContableFacturacion);
end;

function TServicio.GetDescripcionParaExportacion: TString;
  Function DescripcionComercial : String;
    begin
      if (Traducciones.Count > 0) then
      begin
        Traducciones.First;
        While not Traducciones.IsLast do
        begin
          Result := Result + Traducciones.Actual.Descripcion;
          Traducciones.next;
          if not Traducciones.IsLast then
            Result := Result + '/';
        end;
      end;
    end;
begin
  if ( fDescripcionParaExportacion = Null ) or  (fDescripcionParaExportacion = '') then
    begin
      FDescripcionParaExportacion := '';
      FDescripcionParaExportacion := DescripcionComercial;
      if ( FDescripcionParaExportacion = '' ) then
        FDescripcionParaExportacion := 'SERV';
      FDescripcionParaExportacion := FDescripcionParaExportacion + ': ' + Codigo;
      if length(FDescripcionParaExportacion) > 300 then // no debe superar los 300 caracteres
        FDescripcionParaExportacion := Copy(FDescripcionParaExportacion, 1, 297) + '...';
    End;
  Result := FDescripcionParaExportacion;
end;

function TServicio.GetDescriptibleAbreviadoListClass;
begin
  Result := TServicioList;
end;

constructor TServicio.Create;
begin
  inherited;
  DMObject                       := Aplicacion.DMProvider.GetGlobalDM(TServicioDM);
  LargoCodigo                    := 30;
  RellenarCodigo                 := False;
  FEstaEnSifab                   := Null;
  FCodigoInternoSifab            := Null;
  FConceptoContableFacturacionID := NullID;
  FConceptoContableFacturacion   := nil;
  FEsParaNota                    := Null;
  FEsParaVentas                  := Null;
  FPermiteEditarDescripcion      := False;
  FIDTeamplace                   := Null;
end;

function TServicio.GetEsStockeable: TBoolean;
begin

  Result := False;
end;

function TServicio.GetEstaEnSifab: TBoolean;
begin
  if (FEstaEnSifab = Null) then
    FEstaEnSifab := (CodigoInternoSifab <> 0);
  Result := FEstaEnSifab;
end;

function TServicio.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TArticuloDM._TeamplaceTableName, TArticuloDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TArticuloDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TServicio.GetImpuestos: TServicioImpuestoList;
begin
  if not Assigned(FImpuestos) then
    GetList(TPDList(FImpuestos),TPDList(TServicioImpuestoList.CreateByServicio(Self)));
  Result := TServicioImpuestoList(FImpuestos);
end;

function TServicio.GetPrecios: TServicioPrecioList;
begin
  if not Assigned(FPrecios) then
    GetList(TPDList(FPrecios),TPDList(TServicioPrecioList.CreateByServicio(Self)));
  Result := TServicioPrecioList(FPrecios);
end;

procedure TServicio.asignarIDalProducto;
begin
  Producto.ServicioID := Self.ID;
  Producto.Save;
end;

function TServicio.GetTipoDeProducto: String;
begin
  Result := aplicacion.ParametrosDelSistema.ServicioDescripcion;
end;

function TServicio.GetTraducciones: TServicioTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TServicioTraduccionList.CreateByServicio(self)));
  Result := TServicioTraduccionList(FTraducciones);
end;

class function TServicio.GuardarEnSifab(_S: TServicio): Boolean;
var
  CodigoInternoCargoExtra : Integer;
begin
  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
    Exit;

  Result := False;
  if _S.EstaEnSifab then
    begin
      Aplicacion.Mensaje('El Servicio '+ _S.Codigo +' ya se encuentra en Sifab', 'Aviso', MB_OK );
      exit;
    end;
  Try
    Aplicacion.Sesion.ConexionSifab.Conexion.StartTransaction;
    with Aplicacion.Sesion.ConexionSifab.StoredProc do
      begin
        StoredProcName := 'VE_CargoExtra_Agregar';
        Prepare;
        ParamByName('CodigoCargoExtra').Value     := _S.Codigo;
        ParamByName('Descripcion').Value          := _S.Descripcion;
        ParamByName('CodigoTipoVigencia').Value   := 1253;//actual
        ParamByName('CodigoInternoEmpresa').Value := 2;
        ParamByName('Habilitado').Value           := 1;
        ExecProc;
        CodigoInternoCargoExtra := ParamByName('CodigoInternoCargoExtra').Value;
      end;
    with Aplicacion.Sesion.ConexionSifab.StoredProc do
      begin
        StoredProcName := 'VE_CargoExtraVigencia_Agregar';
        Prepare;
        if _S.EstaEnSifab then
          ParamByName('CodigoInternoCargoExtra').Value     := _S.CodigoInternoSifab
        else
          ParamByName('CodigoInternoCargoExtra').Value     := CodigoInternoCargoExtra;
        ParamByName('CodigoTipoCargoExtra').Value        := 1255;//Monto
        ParamByName('Importe').Value                     := 1;
        ParamByName('CodigoMoneda').Value                := Aplicacion.MonedaDefault.CodigoInternoSifab;
        ParamByName('AplicaDescuentos').Value            := 0;
        ParamByName('AplicaImpuestos').Value             := _S.ImpuestosActivos;
        ParamByName('CodigoInternoCuentaContable').Value := 600;
        ParamByName('VigenciaDesde').Value               := StrToDate( '01/01/2012');
        ParamByName('VigenciaHasta').Value               := StrToDate( '31/12/2050');;
        ExecProc;
      end;

    with Aplicacion.Sesion.ConexionSifab.StoredProc do
      begin
        StoredProcName := 'MaterialAgregar';
        Prepare;
        ParamByName('CodigoMaterial').Value                         := _S.Codigo;
        ParamByName('CodigoInternoEmpresa').Value                   := 2;
        ParamByName('TipoMaterial').Value                           := 29;
        ParamByName('DescripcionCorta').Value                       := _S.Descripcion;
        ParamByName('DescripcionComercial').Value                   := _S.Descripcion;
        ParamByName('CodigoUMedidaStock').Value                     := 1347;
        ParamByName('CodigoUMedidaFormula').Value                   := 1347;
        ParamByName('CodigoInternoCuentaContableVenta').Value       := 600;
        ParamByName('CodigoInternoRubro').Value                     := 12;
        ParamByName('MarcaParaVenta').Value                         := 1;
        ParamByName('CodigoInternoLineaMaterial').Value             := 143;
        ParamByName('CodigoInternoClaseMaterial').Value             := -163;
        ParamByName('CodigoUMedidaVenta').Value                     := 1347;
        ParamByName('CantidadPorMultiploDeEmpaque').Value           := 1;
        ParamByName('CodigoInternoGrupoProducto').Value             := 86;
        ParamByName('EnProcesoBaja').Value                          := 0;
        ParamByName('Transaccionable').Value                        := 0;
        ParamByName('granel').Value                                 := 0;
        ParamByName('CodigoTipoKit').Value                          := 527;
        ParamByName('CodigoInternoMarca').Value                     := 1;
        ParamByName('CodigoNomencladorComunMercosur').Value         := _S.Codigo;
        ParamByName('habilitado').Value                             := 1;
        ParamByName('materialDescripcionExportacion').Value         := _S.Descripcion;
        ParamByName('ExportacionUMVenta').Value                     := 1347;
        ParamByName('CodigoInternoPaisOrigen').Value                := 43707;
        ParamByName('CodigoInternoSubRubro').Value                  := 331;
        ParamByName('Consignacion').Value                           := 0;
        ParamByName('Unificador').Value                             := 0;
        ParamByName('PorcentajeAdmisionVenta').Value                := 100;
        ParamByName('EsMaterialARecuperar').Value                   := 0;
        ParamByName('CodigoInternoCuentaContableVentaExportacion').Value := 606;
        ParamByName('GestionXLoteCF').Value                         := 0;
        ParamByName('ZonaLiberada').Value                           := 0;
        ParamByName('Caracteristica2').Value                        := 0;
        ExecProc;
      end;
    Aplicacion.Sesion.ConexionSifab.Conexion.Commit;
    Result := True;
  Except
    Aplicacion.Sesion.ConexionSifab.Conexion.Rollback;
  End;
  If Not Result Then
    Aplicacion.Mensaje('El Servicio ' + _S.Codigo + ' no pudo agregarse a Sifab', 'Aviso', MB_OK )
  else
    Aplicacion.Mensaje('El Servicio ' + _S.Codigo + ' se agregó a Sifab con éxito', 'Aviso', MB_OK );
end;

class function TServicio.GuardarEnTeamPlace(_S : TServicio): Boolean;

  Function DevolverUnidadDeMedida : String;
  begin
    if _S.UnidadDeMedidaID <> NullID then
      Result := IntToStr(_S.UnidadDeMedida.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MeasureService.UnidadDeMedidaCantidadDefault.IDTeamplace);
  end;

  Function DevolverImpuestoConcepto : String;
  begin
    if _S.Impuestos.Count > 0 then
      Result := IntToStr(_S.Impuestos.Actual.ImpuestoConcepto.IDTeamplace)
    else
      Result := '1';
  end;

  Function DevolverMoneda : String;
  begin
    if _S.Precios.Count > 0 then
      Result := IntToStr(_S.Precios.Actual.Moneda.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MonedaDefault.IDTeamplace);
  end;

begin
  Result := False;

  if _S.EsInactivo then
    Aplicacion.RaiseExceptionCreate('Solo se pueden migrar a Teamplace Articulos Activos');

  if (Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TServicioDM._TeamplaceTableName, TServicioDM._TeamplaceCodigo + ' = ' + QuotedStr(_S.Codigo) , TServicioDM._TeamplaceID) <> 0) then
    Aplicacion.RaiseExceptionCreate('El Articulo ya se encuentra en la Base de datos de Teamplace');

  Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TServicioDM._TeamplaceTableName,
  ['Nombre'      ,
   'UnidadIDStock1',
   'Codigo' ,
   'Activo',
   'Descripcion' ,
   'EsStockeable',
   'CuentaIDCompra',
   'CuentaIDVenta',
   'ConceptoIDVenta',
   'ConceptoIDCompra',
   'UnidadIDVenta',
   'UnidadIDCompra',
   'RelacionUnidadCompraStock',
   'RelacionUnidadVentaStock',
   'TasaImpositivaIDVenta',
   'TasaImpositivaIDCompra',
   'ProductoTipoID',
   'MonedaID',
   'UnidadValorizacion',
   'NoControlaStock',
   'EsElaborado',
   'ControlImpositivo3'],
  [QuotedStr(_S.Descripcion),
   DevolverUnidadDeMedida,
   QuotedStr(_S.codigo ),
   '1',
   QuotedStr( _S.Descripcion),
   '0',
   '415',
   '310',
   '2',
   '2',
   DevolverUnidadDeMedida,
   DevolverUnidadDeMedida,
   '1',
   '1',
   DevolverImpuestoConcepto,
   DevolverImpuestoConcepto,
   '4',
   DevolverMoneda,
   '0',
   '0',
   '1',
   '0'])
end;

function TServicio.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID; _Moneda: TMoneda): TReal;
begin

  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TServicioDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          False );
end;

function TServicio.Save: Boolean;
var
  ICL : TImpuestoConceptoList;
  SI  : TServicioImpuesto;
begin
  Result := inherited Save;

  if ( Impuestos.Count = 0 ) and ImpuestosActivos then
    try
      ICL := TImpuestoConceptoList.CreateByDefaultFabricados(True);
      if ( ICL.Count > 0 ) then
        begin
          ICL.First;
          SI                    := TServicioImpuesto.Create;
          SI.ServicioID         := Self.ID;
          SI.ImpuestoConceptoID := ICL.actual.ID;
          SI.Save;
          Impuestos.Add(SI);
        end;
    finally
      FreeAndNil(ICL);
      SI.NilObject;
    end;
end;

procedure TServicio.SetConceptoContableFacturacionID(const Value: TObjectID);
begin
  if Assigned( FConceptoContableFacturacion ) and ( Value <> FConceptoContableFacturacionID ) then
    FreeAndNil( FConceptoContableFacturacion);
  FConceptoContableFacturacionID := Value;
end;

{ TServicioDM }
class function TServicioDM.TableName: string;
begin
  Result := 'Servicios';
end;

class function TServicioDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TServicioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TServicioDM.ID_FieldName: string;
begin
  Result := 'ServicioID';
end;

procedure TServicioDM.PopulateFields(PDObject: TPDObject);
begin
  with TServicio(PDObject) do
  begin
    StringField[_Codigo]              := Codigo;
    StringField[_Descripcion]         := Descripcion;
    BooleanField[_esInactivo]         := EsInactivo;
    IDField[_productoID]              := FProductoID;
    IDField[_UnidadDeMedidaID]        := FunidadDeMedidaID;
    BooleanField[_EsRuteable]         := FEsRuteable;
    BooleanField[_EsConceptoARemitir] := FEsConceptoARemitir;
    StringField[_ConceptoARemitir]    := FConceptoARemitir;
    BooleanField[_ImpuestosActivos]   := FImpuestosActivos;
    IDField[_ConceptoContableFacturacionID] := ConceptoContableFacturacionID;
    BooleanField[_EsParaNota]         := EsParaNota;
    BooleanField[_EsParaVentas]       := EsParaVentas;
    BooleanField[_PermiteEditarDescripcion] := PermiteEditarDescripcion;
  end;
end;

procedure TServicioDM.PopulateObject(PDObject: TPDObject);
begin
  with TServicio(PDObject) do
    begin
      codigo              := StringField[_Codigo];
      Descripcion         := StringField[_Descripcion];
      FProductoID         := IDField[_productoID];
      FunidadDeMedidaID   := IDField[_UnidadDeMedidaID];
      EsInactivo          := BooleanField[_esInactivo];
      EsRuteable          := BooleanField[_EsRuteable];
      FEsConceptoARemitir := BooleanField[_EsConceptoARemitir];
      FConceptoARemitir   := StringField[_ConceptoARemitir] ;
      FImpuestosActivos   := BooleanField[_ImpuestosActivos];
      FConceptoContableFacturacionID := IDField[_ConceptoContableFacturacionID];
      FEsParaNota         := BooleanField[_EsParaNota];
      FEsParaVentas       := BooleanField[_EsParaVentas];
      FPermiteEditarDescripcion := BooleanField[_PermiteEditarDescripcion];
    end;
end;

{ TServicioList }
function TServicioList.GetActual: TServicio;
begin
  Result := TServicio(CurrentObject);
end;

constructor TServicioList.CreateAllParaNota(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TServicioDM.TableName + '.' +  TServicioDM._EsParaNota + ' = 1)';
  end;
begin
  inherited Create(TServicio, TServicioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TServicioList.CreateAllParaVentas(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TServicioDM.TableName + '.' +  TServicioDM._EsParaVentas + ' = 1)';
  end;
begin
  inherited Create(TServicio, TServicioDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TServicioList.CreateNewObject: TPDObject;
begin
  Result := TServicio.Create;
end;

constructor TServicioList.CreateAll(_SoloActivos: Boolean = False);
  Function WhereString: String;
  begin
    Result := '';
  end;
begin
  inherited Create(TServicio, TServicioDM.CreateAll(False, WhereString, _SoloActivos));
end;

{ TLicenciatario }
constructor TLicenciatario.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TLicenciatarioDM);
end;

function TLicenciatario.Getempresa: TAbstractEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TAbstractEmpresa, Fempresa, empresaID);

  Result := TAbstractEmpresa(Fempresa);
end;

procedure TLicenciatario.SetempresaID(Value: TObjectID);
begin
  if (Value <> FempresaID) and assigned(Fempresa) then
    FreeAndNil(Fempresa);

  FempresaID := Value;

end;

function TLicenciatario.GetLicenciatario: TAbstractEmpresa;
begin
  if not assigned(FEmpresaLicenciataria) then
    GetObject(TAbstractEmpresa, FEmpresaLicenciataria, FEmpresaLicenciatariaID);

  Result := TAbstractEmpresa(FEmpresaLicenciataria);
end;

procedure TLicenciatario.SetLicenciatarioID(Value: TObjectID);
begin
  if (Value <> 0) and (Value = FempresaID) Then
    Aplicacion.RaiseExceptionCreate('La empresa seleccionada no puede ser licenciataria de si misma');
  if (Value <> FEmpresaLicenciatariaID) and assigned(FEmpresaLicenciataria) then
    FreeAndNil(FEmpresaLicenciataria);

  FEmpresaLicenciatariaID := Value;

end;

{ TLicenciatarioDM }
class function TLicenciatarioDM.TableName: string;
begin
  Result := 'licenciatarios';
end;

class function TLicenciatarioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CamposTablaLicenciatarios      : String;
    CamposTablaEmpresasLicenciadas : String;
    CamposTablaEmpresas            : String;
  begin
    CamposTablaLicenciatarios       := TableName + '.*';
    CamposTablaEmpresasLicenciadas  :=                                  'EL.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCLicenciatarioCodigo      + ', ' ;
    CamposTablaEmpresasLicenciadas  := CamposTablaEmpresasLicenciadas + 'EL.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCLicenciatarioDescripcion + ', ' ;
    CamposTablaEmpresasLicenciadas  := CamposTablaEmpresasLicenciadas + 'EL.' + TAbstractEmpresaDM._esInactivo  + ' as ' + _CCLicenciatarioEsInactivo  + ', ' ;
    CamposTablaEmpresasLicenciadas  := CamposTablaEmpresasLicenciadas + 'EL.' + TAbstractEmpresaDM._Cuit        + ' as ' + _CCLicenciatarioCUIT;

    CamposTablaEmpresas             :=                       'E.' + TAbstractEmpresaDM._Codigo      + ' as ' + _CCEmpresaCodigo      + ', ' ;
    CamposTablaEmpresas             := CamposTablaEmpresas + 'E.' + TAbstractEmpresaDM._Descripcion + ' as ' + _CCEmpresaDescripcion + ', ' ;
    CamposTablaEmpresas             := CamposTablaEmpresas + 'E.' + TAbstractEmpresaDM._esInactivo  + ' as ' + _CCEmpresaEsInactiva  + ', ' ;
    CamposTablaEmpresas             := CamposTablaEmpresas + 'E.' + TAbstractEmpresaDM._Cuit        + ' as ' + _CCEmpresaCUIT;

    Result := CamposTablaLicenciatarios + ', ';
    Result := Result + CamposTablaEmpresasLicenciadas + ', ';
    Result := Result + CamposTablaEmpresas;
  end;

  Function LeftJoinString : String;
  var
    IDNameTablaEmpresas            : String;
    IDNameTablaEmpresasLicenciadas : String;
    ID1NameTablaLicenciatarios     : string;
    ID2NameTablaLicenciatarios     : string;
  begin
    ID1NameTablaLicenciatarios      := TLicenciatarioDM.TableName + '.' + TLicenciatarioDM._EmpresaID;
    ID2NameTablaLicenciatarios      := TLicenciatarioDM.TableName + '.' + TLicenciatarioDM._EmpresaLicenciatariaID;
    IDNameTablaEmpresas             := 'E.'  + TAbstractEmpresaDM.ID_FieldName;
    IDNameTablaEmpresasLicenciadas  := 'EL.' + TAbstractEmpresaDM.ID_FieldName;
    Result :=          ' LEFT JOIN ' + TAbstractEmpresaDM.TableName   + ' E ON ('  + ID1NameTablaLicenciatarios + '=' + IDNameTablaEmpresas + ')';
    Result := Result + ' LEFT JOIN ' + TAbstractEmpresaDM.TableName   + ' EL ON (' + ID2NameTablaLicenciatarios + '=' + IDNameTablaEmpresasLicenciadas + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;










class function TLicenciatarioDM.ID_FieldName: string;
begin
  Result := 'LicenciatarioID';
end;

procedure TLicenciatarioDM.PopulateFields(PDObject: TPDObject);
begin
  with TLicenciatario(PDObject) do
  begin
    IDField[_empresaID] := FempresaID;
    IDField[_EmpresaLicenciatariaID] := FEmpresaLicenciatariaID;
  end;
end;

procedure TLicenciatarioDM.PopulateObject(PDObject: TPDObject);
begin
  with TLicenciatario(PDObject) do
  begin
    FempresaID := IDField[_empresaID];
    FEmpresaLicenciatariaID := IDField[_EmpresaLicenciatariaID];
    // del create compuesto
    FCCLicenciatarioDescripcion := StringField[_CCLicenciatarioDescripcion];
    FCCLicenciatarioEsInactivo  := BooleanField[_CCLicenciatarioEsInactivo];
    FCCLicenciatarioCUIT        := StringField[_CCLicenciatarioCUIT];
    FCCLicenciatarioCodigo      := StringField[_CCLicenciatarioCodigo];
    FCCEmpresaDescripcion       := StringField[_CCEmpresaDescripcion];
    FCCEmpresaCUIT              := StringField[_CCEmpresaCUIT];
    FCCEmpresaEsInactiva        := BooleanField[_CCEmpresaEsInactiva];
    FCCEmpresaCodigo            := StringField[_CCEmpresaCodigo];
  end;
end;

{ TLicenciatarioList }
function TLicenciatarioList.GetActual: TLicenciatario;
begin
  Result := TLicenciatario(CurrentObject);
end;

function TLicenciatarioList.CreateNewObject: TPDObject;
begin
  Result := TLicenciatario.Create;
end;

constructor TLicenciatarioList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TLicenciatario, TLicenciatarioDM.CreateAll( False, '', _SoloActivos));
end;

procedure TAbstractEmpresa.SetJurisdiccionDeIngresosBrutosID
  (const Value: TObjectID);
begin
  if (Value <> FJurisdiccionDeIngresosBrutosID) and assigned
    (FJurisdiccionDeIngresosBrutos) then
    FreeAndNil(FJurisdiccionDeIngresosBrutos);

  FJurisdiccionDeIngresosBrutosID := Value;
end;

procedure TAbstractEmpresa.SetListaDePrecioID(const Value: TObjectID);
begin
  if (Value <> FListaDePrecioID) and assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);

  FListaDePrecioID := Value;
end;

procedure TAbstractEmpresa.SetLocalidadID(const Value: TObjectID);
begin
  if (Value <> FLocalidadID) and assigned(FLocalidad) then
  begin
    FCodigoIDImpositivoExterior := null;
    FreeAndNil(FLocalidad);
  end;
  FLocalidadID := Value;
end;

procedure TAbstractEmpresa.SetCalle(const Value: TString);
begin
  FCalle := UpperCase(Value);
end;

procedure TAbstractEmpresa.SetCategoriaDeClienteID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeClienteID) and assigned(FCategoriaDeCliente) then
    FreeAndNil(FCategoriaDeCliente);
  FCategoriaDeClienteID := Value;
end;

procedure TAbstractEmpresa.SetActividadID(const Value: TObjectID);
begin
  if (Value <> FActividadID) and assigned(FActividad) then
    FreeAndNil(FActividad);

  FActividadID := Value;
end;

function TAbstractEmpresa.getLicenciatarios: TLicenciatarioList;
begin
  If not assigned(FLicenciatarios) Then
    GetList(TPDList(FLicenciatarios),  TPDList(TLicenciatarioList.CreateByEmpresa(self)));
  Result := FLicenciatarios;
end;

constructor TLicenciatarioList.CreateByEmpresa(_E: TAbstractEmpresa ; _SoloActivos : Boolean);
  function WhereString: String;
  begin
    Result := '(' + TLicenciatarioDM.TableName + '.' + TLicenciatarioDM._EmpresaID + ' = ' + IntToStr(_E.ID)+')';
  end;
begin
  inherited Create(TLicenciatario,TLicenciatarioDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TLicenciatarioList.CreateByEmpresaCodigo(_C: String ; _SoloActivos : Boolean);
  function WhereString: String;
  begin
    Result := '(' + TLicenciatarioDM.TableName + '.' + TLicenciatarioDM._empresaID + ' in (Select ' + TAbstractEmpresaDM.ID_FieldName + ' from  ' +
      TAbstractEmpresaDM.TableName + ' where ' + TAbstractEmpresaDM._Codigo  + ' like ' + QuotedStr(_C + '%') +'))';
  end;
begin
  inherited Create(TLicenciatario, TLicenciatarioDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TLicenciatarioList.CreateByLicenciado(_E: TAbstractEmpresa);
  function WhereString: String;
  begin
    Result := '(' + TLicenciatarioDM.TableName + '.' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(_E.ID)+')';
  end;
begin
  inherited Create(TLicenciatario, TLicenciatarioDM.CreateAll( False, WhereString));
end;

{ TCunio }
function TCunio.GetDescripcionMarca: TString;
begin
  if (FDescripcionMarca = null) and (FmarcaID <> NullID) then
    FDescripcionMarca := marca.Descripcion;
  Result := FDescripcionMarca;
end;

function TCunio.GetDescriptibleAbreviadoListClass;
begin
  Result := TCunioList;
end;

function TCunio.GetEmpresasAsociadas: TEmpresaList;
begin
  If not Assigned(FEmpresasAsociadas) Then
    GetList(TPDList(FEmpresasAsociadas), TPDList(TEmpresaList.CreateByCunio(Self, True)));
  Result := FEmpresasAsociadas;
end;

function TCunio.GetesCunioNuevo: TBoolean;
begin
  if (FesCunioNuevo = Null) then
    FEsCunioNuevo := (FechaDeFinDeConstruccion > Aplicacion.DateTimeService.FechaActual) or (FechaDeFinDeConstruccion = 0) or (FechaDeFinDeConstruccion = Null);
  Result := FesCunioNuevo;
end;

function TCunio.GetFotoID: TObjectID;
var
  FL: TFotoList;
begin
  if FFotoID = NullID then
    try
      FL := TFotoList.CreatebyCunioCodigo(Codigo, 'Cuño');
      if FL.Count > 0 then
        begin
          FL.First;
          FFotoID := FL.Actual.ID;
        end
      else
        FFotoID := NullID;
    Finally
      FreeAndNil(FL);
    end;
  Result := FFotoID;
end;

function TCunio.GetInsumos: TInsumoCunioList;
begin
  If not Assigned(FInsumos) Then
    GetList(TPDList(FInsumos), TPDList(TInsumoCunioList.CreateByCunio(self)));
  Result := FInsumos;
end;

function TCunio.GetLastNumber(_devolverDisponibleParaUsar: Boolean): String;
var
  CL: TCunioList;
  X: Integer;
begin
  Result := '';
  try
    CL := TCunioList.CreateTop;
    if (CL.Count = 0) then
      exit;
    CL.First;

    Result := CL.Actual.codigo;
    if _devolverDisponibleParaUsar then
    begin
      X := strtoint(Result) + 1;
      Result := IntToStr(X);
      Result := aplicacion.TextService.RellenarCodigo(Result, LargoCodigo);
    end;
  finally
    FreeAndNil(CL);
  end;
end;

function TCunio.Getmarca: TMarca;
begin
  if not assigned(Fmarca) then
    GetObject(TMarca, Fmarca, FmarcaID);
  Result := TMarca(Fmarca);
end;

function TCunio.GetOrigenComercial: TOrigenComercial;
begin
  if not Assigned(FOrigenComercial) then
    GetObject(TOrigenComercial, FOrigenComercial, FOrigenComercialID);
  Result := TOrigenComercial(FOrigenComercial);
end;

function TCunio.GetPrecios: TCunioPrecioList;
begin
  if not assigned(FPrecios) then
    GetList(TPDList(FPrecios),TPDList(TCunioPrecioList.CreateByCunio(self)));
  Result := TCunioPrecioList(FPrecios);
end;

function TCunio.GetPreciosDeLista: TCunioPrecioDeListaList;
begin
  if not Assigned(FPreciosDeLista) then
    GetList(TPDList(FPreciosDeLista),TPDList(TCunioPrecioDeListaList.CreateByCunio(self)));
  Result := TCunioPrecioDeListaList(FPreciosDeLista);
end;

function TCunio.GetTiempoEstimadoEnDias: TEntero;
begin
  if esCunioNuevo then
    Result := tiempoEstimadoEnDiasDesarrollo
  else
    Result := tiempoEstimadoEnDiasReposicion;
end;

function TCunio.GetUsuarioAsignacionFechaFindeConst: TUsuario;
begin
  if not assigned(FUsuarioAsignacionFechaFindeConst) then
    GetObject(TUsuario, FUsuarioAsignacionFechaFindeConst, FUsuarioAsignacionFechaFindeConstID);
  Result := TUsuario(FUsuarioAsignacionFechaFindeConst);
end;

function TCunio.GetUsuarioModificacionFechaFindeConst: TUsuario;
begin
  if not assigned(FUsuarioModificacionFechaFindeConst) then
    GetObject(TUsuario, FUsuarioModificacionFechaFindeConst, FUsuarioModificacionFechaFindeConstID);
  Result := TUsuario(FUsuarioModificacionFechaFindeConst);
end;

//function TCunio.PrecioDeLista(_ListaDePrecioID: TObjectID; _Moneda: TMoneda): TReal;
//begin
//  Result := Aplicacion.DataService.DevolverPrecioDeLista( TCunioDM.TableName, ID, _ListaDePrecioID, _Moneda, False );
//end;

function TCunio.Save: Boolean;
begin
  if (fechaDeCreacion = null) or ( FechaDeCreacion = 0 ) then
    begin
      FfechaDeCreacion := Aplicacion.DateTimeService.FechaHoraActual;
      if ( (FechaDeFinDeConstruccion <> Null ) and (FechaDeFinDeConstruccion <> 0 ) and (FechaDeFinDeConstruccion <> FechaDeFinDeConstruccionOriginal )) then
        begin
          FFechaAsignacionFechaDeFinDeConst   := FfechaDeCreacion;
          FUsuarioAsignacionFechaFindeConstID := Aplicacion.Usuario.ID;
        end;
    end
  else
    if (FechaDeFinDeConstruccionOriginal <> FechaDeFinDeConstruccion ) then
      begin
        if (FechaDeFinDeConstruccionOriginal = Null ) or (FechaDeFinDeConstruccionOriginal = 0 ) then
          begin
            FFechaAsignacionFechaDeFinDeConst   := Aplicacion.DateTimeService.FechaHoraActual;
            FUsuarioAsignacionFechaFindeConstID := Aplicacion.Usuario.ID;
          end
        else
          begin
            FFechaModificacionFechaDeFinDeConst   := Aplicacion.DateTimeService.FechaHoraActual;
            FUsuarioModificacionFechaFindeConstID := Aplicacion.Usuario.ID;
          end;
      end;

  if (OrigenComercialID = NullID) then
    Aplicacion.RaiseExceptionCreate('Cuño: ' + Codigo + '. Debe asignar origen comercial.');

  Result := inherited Save;
end;

function TCunio.ArchivoDeImagenConArticuloTerminacion(_T: string; _A: string): TString;
var
  FL: TFotoList;
begin
  try
    if (Codigo = Aplicacion.ParametrosDelSistema.SinCunio.Codigo) or (Codigo = aplicacion.ParametrosDelSistema.CunioEstandarApholos.Codigo) then
      Result := ArchivoDeImagen2D
    else
      begin
        FL := TFotoList.CreatebyArticuloTerminacionCunio( _A, _T, Codigo );
        if FL.Count > 0 then
          begin
            FL.First;
            if not FL.actual.Fabricado.articulo.FamiliaDeArticulo.EsMatriz then
              Result := FL.Actual.RutaDeArchivoRed
            else
              Result := ArchivoDeImagen2D;
          end
  else
    Result := archivoDeImagen2D;
    end;
  Finally
    FreeAndNil(FL);
  end;
end;

function TCunio.CostoDeMatriceria(_ListaDePrecioID: TObjectID; _Moneda: TMoneda): TReal;
var
  exigePrecio : boolean;
begin
  Result := Aplicacion.DataService.DevolverPrecioDeLista( exigePrecio,
                                                          TCunioDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          ID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          True );
end;

constructor TCunio.Create;
begin
  inherited;
  SaveSqlLog                          := True;
  DMObject                            := aplicacion.DMProvider.GetGlobalDM(TCunioDM);
  LargoCodigo                         := aplicacion.LargoCodigos.LargoCunio;
  RellenarCodigo                      := True;
  FfechaDeCreacion                    := null;
  RellenarCodigo                      := True;
  FEsInactivo                         := False;
  FmarcaID                            := NullID;
  FDescripcionMarca                   := '';
  FarchivoDeImagen                    := null;
  FarchivoDeImagen2D                  := null;
  FarchivoDeImagenWeb                 := null;
  FarchivoDeImagen2DWeb               := null;
  FarchivoSinImagen                   := null;
  FArchivoSinImagenWeb                := null;
  FNumeroDeDesarrollo                 := null;
  FesCunioNuevo                       := null;
  FFechaDeFinDeConstruccion           := null;
  FFechaDeFinDeConstruccionOriginal   := null;
  FFechaAsignacionFechaDeFinDeConst   := null;
  FFechaModificacionFechaDeFinDeConst := null;

end;


procedure TCunio.SetmarcaID(const Value: TObjectID);
begin
  if (Value <> FmarcaID) and assigned(Fmarca) then
    FreeAndNil(Fmarca);

  FDescripcionMarca := null;
  FmarcaID := Value;
end;

procedure TCunio.SetObservacion(const Value: TString);
var
  comilla: TString;
begin
  Fobservacion := trim(Value);
  // reemplazo comillas prohibidas
  comilla := #39;
  Fobservacion := aplicacion.TextService.ReemplazarEn(Fobservacion, '"'     , '´´');
  Fobservacion := aplicacion.TextService.ReemplazarEn(Fobservacion, comilla , '´' );
  Fobservacion := aplicacion.TextService.ReemplazarEn(Fobservacion, '`'     , '´' );
  Fobservacion := aplicacion.TextService.ReemplazarEn(Fobservacion, '"'     , '´´');
end;

procedure TCunio.SetOrigenComercialID(const Value: TObjectID);
begin
  if ( Value <> FOrigenComercialID ) and Assigned( FOrigenComercial ) then
    FreeAndNil( FOrigenComercial );
  FOrigenComercialID := Value;
end;

procedure TCunio.SetUsuarioAsignacionFechaFindeConstID(const Value: TObjectID);
begin
  if (Value <> FUsuarioAsignacionFechaFindeConstID) and assigned( FUsuarioAsignacionFechaFindeConst ) then
    FreeAndNil(FUsuarioAsignacionFechaFindeConst);
  FUsuarioAsignacionFechaFindeConstID := Value;
end;

procedure TCunio.SetUsuarioModificacionFechaFindeConstID(const Value: TObjectID);
begin
  if (Value <> FUsuarioModificacionFechaFindeConstID ) and assigned( FUsuarioModificacionFechaFindeConst ) then
    FreeAndNil(FUsuarioModificacionFechaFindeConst);
  FUsuarioModificacionFechaFindeConstID := Value;
end;

function TCunio.GetCodigoSinCerosAdelante: TString;
var
  i: Integer;
  _A: String;
begin
  _A := codigo;
  Result := _A;
  for i := 1 to length(_A) do
  begin
    if _A[i] <> '0' then
      break;
  end;
  if i < length(_A) then
    Result := Copy(_A, i, length(_A) - i + 1);
end;

function TCunio.GetCostos: TCostoCunioList;
begin
  If not Assigned(FCostos) Then
    GetList(TPDList(FCostos), TPDList(TCostoCunioList.CreateByCunio(self)));
  Result := FCostos;
end;

procedure TCunio.Delete;
  Function HayFabricadosConElCuño : Boolean;
  var
    FL : TFabricadoList;
  begin
    try
      FL := TFabricadoList.CreateByCunio(Self);
      Result := (FL.Count > 0);
    finally
      FreeAndNil(FL);
    end;
  end;
begin

  if HayFabricadosConElCuño then
    Aplicacion.RaiseExceptionCreate('El cuño no se puede eliminar por que ha sido usado en un producto.');

  If Self.Costos.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Costos asignados a este cuño antes de eliminarlo.');

  If Self.ArticulosPosibles.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Artículos Asociados a este cuño antes de eliminarlo.');

  If Self.Insumos.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Insumos asignados a este cuño antes de eliminarlo.');

  If Self.PreciosDeLista.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Precios de lista asignados a este cuño antes de eliminarlo.');

  If Self.Precios.Count > 0 then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Precios Adicionales / Costos de matricería asignados a este cuño antes de eliminarlo.');

  inherited;
end;

destructor TCunio.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

Procedure TCunio.FreeObjectsFromMemory;
begin
  if Assigned(FArticulosPosibles) then
    FreeAndNil(FArticulosPosibles);
  if Assigned(FCostos) then
    FreeAndNil(FCostos);
  if Assigned(FInsumos) then
    FreeAndNil(FInsumos);
  if Assigned(Fmarca) then
    FreeAndNil(Fmarca);
  if Assigned(FPrecios) then
    FreeAndNil(FPrecios);
end;

Function TCunio.GetarchivoDeImagen: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagen = null then
    try
      if (codigo = aplicacion.ParametrosDelSistema.SinCunio.codigo) or (codigo = aplicacion.ParametrosDelSistema.CunioEstandarApholos.codigo) then
        FarchivoDeImagen := archivoDeImagen2D
      else
        begin
          FL := TFotoList.CreatebyCunioCodigo(codigo, 'fabricado');
          if FL.Count > 0 then
            begin
              FL.First;
              while not FL.IsLast do
                begin
                  if not FL.actual.Fabricado.Articulo.FamiliaDeArticulo.EsMatriz then
                    FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
                  FL.Next
                end;
              if FarchivoDeImagen = null then
                FarchivoDeImagen := archivoDeImagen2D;
            end
          else
            FarchivoDeImagen := archivoDeImagen2D;
      end;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TCunio.GetarchivoDeImagen2D: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagen2D = null then
    try
      FL := TFotoList.CreatebyCunioCodigo(codigo, 'cuño');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen2D := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen2D := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;

  Result := FarchivoDeImagen2D;
end;

function TCunio.GetarchivoDeImagen2DWeb: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagen2DWeb = null then
    try
      FL := TFotoList.CreatebyCunioCodigo(codigo, 'cuño');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen2DWeb := FL.Actual.RutaDeArchivoWeb;
      end
      else
        FarchivoDeImagen2DWeb := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen2DWeb;
end;

function TCunio.GetarchivoDeImagenWeb: TString;
var
  FL: TFotoList;
begin
  if FarchivoDeImagenWeb = null then
    try
      if (codigo = aplicacion.ParametrosDelSistema.SinCunio.codigo) or
        (codigo = aplicacion.ParametrosDelSistema.CunioEstandarApholos.codigo)
        then
        FarchivoDeImagenWeb := archivoDeImagen2DWeb
      else
      begin
        FL := TFotoList.CreatebyCunioCodigo(codigo, 'fabricado');
        if FL.Count > 0 then
        begin
          FL.First;
          FarchivoDeImagenWeb := FL.Actual.RutaDeArchivoWeb;
        end
        else
          FarchivoDeImagenWeb := ArchivoDeImagen2DWeb;
      end;

    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagenWeb;
end;

function TCunio.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenCunios;
  Result := FarchivoSinImagen;
end;

function TCunio.GetarchivoSinImagenWeb: TString;
begin
  if (FarchivoSinImagenWeb = Null) then
    begin
      FarchivoSinImagenWeb := LowerCase(Aplicacion.ArchivoSinImagenCunios);
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FArchivoSinImagenWeb,LowerCase('\\srv_aph\usuarios\imagenes'),'http://w3.apholos.com');
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FarchivoSinImagenWeb,'\','/');
    end;
  Result := LowerCase(FarchivoSinImagenWeb);
end;

function TCunio.GetarticulosPosibles: TCunioArticuloPosibleList;
begin
  if FarticulosPosibles = nil then
    GetList(TPDList(FarticulosPosibles), TPDList(TCunioArticuloPosibleList.CreateByCunio(self)));
  Result := FarticulosPosibles;
end;

{ TCunioDM }
class function TCunioDM.TableName: string;
begin
  Result := 'Cunios';
end;

class function TCunioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TMarcaDM.TableName + '.' +  TMarcaDM._Descripcion;
  end;
  Function LeftJoinString : String;
  begin
    Result := 'LEFT JOIN ' + TMarcaDM.TableName + ' ON (' + TableName + '.' + _marcaID + '=' + TMarcaDM.TableName +  '.' + TMarcaDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TCunioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCunioDM.ID_FieldName: string;
begin
  Result := 'CunioID';
end;

procedure TCunioDM.PopulateFields(PDObject: TPDObject);
begin
  with TCunio(PDObject) do
    begin
      StringField[_Codigo]                               := Codigo;
      StringField[_Descripcion]                          := Descripcion;
      IntegerField[_TiempoEstimadoEnDiasDesarrollo]      := FTiempoEstimadoEnDiasDesarrollo;
      IntegerField[_TiempoEstimadoEnDiasReposicion]      := FTiempoEstimadoEnDiasReposicion;
      IntegerField[_MarcaID]                             := FMarcaID;
      StringField[_Observacion]                          := FObservacion;
      BooleanField[_EsInactivo]                          := FEsInactivo;
      BooleanField[_EsCunioEstandar]                     := FEsCunioEstandar;
      DateTimeField[_FechaDeCreacion]                    := FFechaDeCreacion;
      BooleanField[_FueFacturado]                        := FFueFacturado;
      FloatField[_HorasDeMecanizadoEstimadas]            := FHorasDeMecanizadoEstimadas;
      FloatField[_HorasDeMecanizadoReales]               := FHorasDeMecanizadoReales;
      StringField[_NumeroDeDesarrollo]                   := FNumeroDeDesarrollo;
      DateField[_FechaDeFinDeConstruccion]               := FFechaDeFinDeConstruccion;
      DateTimeField[_FechaAsignacionFechaDeFinDeConst]   := FFechaAsignacionFechaDeFinDeConst;
      IDField[_UsuarioAsignacionFechaFindeConstID]       := FUsuarioAsignacionFechaFindeConstID;
      DateTimeField[_FechaModificacionFechaDeFinDeConst] := FFechaModificacionFechaDeFinDeConst;
      IDField[_UsuarioModificacionFechaFindeConstID]     := FUsuarioModificacionFechaFindeConstID;
      BooleanField[_EsInyectado]                         := FEsInyectado;
      IntegerField[_OrigenComercialID]                   := FOrigenComercialID;
    end;
end;

procedure TCunioDM.PopulateObject(PDObject: TPDObject);
begin
  with TCunio(PDObject) do
    begin
      Codigo                                := StringField[_Codigo];
      Descripcion                           := StringField[_Descripcion];
      FTiempoEstimadoEnDiasDesarrollo       := IntegerField[_TiempoEstimadoEnDiasDesarrollo];
      FTiempoEstimadoEnDiasReposicion       := IntegerField[_TiempoEstimadoEnDiasReposicion];
      FMarcaID                              := IDField[_MarcaID];
      FObservacion                          := StringField[_Observacion];
      FEsInactivo                           := BooleanField[_EsInactivo];
      FEsCunioEstandar                      := BooleanField[_EsCunioEstandar];
      FFechaDeCreacion                      := DateTimeField[_FechaDeCreacion];
      FFueFacturado                         := BooleanField[_FueFacturado];
      FHorasDeMecanizadoEstimadas           := FloatField[_HorasDeMecanizadoEstimadas];
      FHorasDeMecanizadoReales              := FloatField[_HorasDeMecanizadoReales];
      FNumeroDeDesarrollo                   := StringField[_NumeroDeDesarrollo];
      FFechaDeFinDeConstruccion             := DateField[_FechaDeFinDeConstruccion];
      FFechaDeFinDeConstruccionOriginal     := DateField[_FechaDeFinDeConstruccion]; // se usa para saber si fue modificado
      FFechaAsignacionFechaDeFinDeConst     := DateTimeField[_FechaAsignacionFechaDeFinDeConst];
      FUsuarioAsignacionFechaFindeConstID   := IDField[_UsuarioAsignacionFechaFindeConstID];
      FFechaModificacionFechaDeFinDeConst   := DateTimeField[_FechaModificacionFechaDeFinDeConst];
      FUsuarioModificacionFechaFindeConstID := IDField[_UsuarioModificacionFechaFindeConstID];
      FEsInyectado                          := BooleanField[_EsInyectado];
      FOrigenComercialID                    := IDField[_OrigenComercialID];
      // del create compuesto
      FDescripcionMarca                     := StringField[_DescripcionMarca];
    end;
end;

{ TCunioList }
function TCunioList.GetActual: TCunio;
begin
  Result := TCunio(CurrentObject);
end;

function TCunioList.CreateNewObject: TPDObject;
begin
  Result := TCunio.Create;
end;

constructor TCunioList.CreateTop;
  function MaximoCodigoNumericoPosible: String;
  var
    i: Integer;
  begin
    Result := '';
    for i := 1 to aplicacion.LargoCodigos.LargoCunio do
      Result := Result + '9';
  end;
  Function WhereString : String;
  begin
    Result := TCunioDM.TableName + '.' + TCunioDM._marcaID + '=' + TMarcaDM.TableName + '.' + TMarcaDM.ID_FieldName;
    Result := Result + ' and ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '>=' + QuotedStr('0') + ' and ' + TCunioDM.TableName + '.' +TCunioDM._Codigo + '<=' + QuotedStr(MaximoCodigoNumericoPosible);
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateTop(1, WhereString, TCunioDM._Codigo + ' desc'));
end;

constructor TCunioList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCunio, TCunioDM.CreateAll( False, '', _SoloActivos ));
end;

constructor TCunioList.CreateByArticuloAsociado(_A: TArticulo;_soloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := '( ' + TCunioDM.ID_FieldName + ' in ( select ' + TCunioArticuloPosibleDM._CunioID;
    Result := Result + ' from ' + TCunioArticuloPosibleDM.TableName + ' where ' + TCunioArticuloPosibleDM._articuloID + '=' + IntToStr(_A.ID) + ' )';
    // agrego cuño 00000 y 00001
    Result := Result + ' or (' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr(aplicacion.ParametrosDelSistema.CodigoSinCunio)+ ') or (' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr(aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' ))';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByArticuloAsociadoLike(_A: TString; _SoloActivos : Boolean);
  function WhereString: String;
  Begin
    Result := TCunioDM.ID_FieldName + ' in ( select ' + TCunioDM.ID_FieldName + ' from ' + TCunioArticuloPosibleDM.TableName;
    Result := Result + ' where ' + TCunioArticuloPosibleDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ' + TArticuloDM.TableName + '.' + TArticuloDM._Codigo + ' like ' + quotedstr(_A) + ' ))';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByCliente(_C: TCliente; _SoloActivos: Boolean; _IncluyeEstandar: Boolean);
  function WhereString: String;
  begin
    Result := '';
    if _incluyeEstandar then
      Result := '(' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(aplicacion.ParametrosDelSistema.CodigoSinCunio)+ ') or ('
                    + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + quotedstr(aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' )' + ' or ('
                    + TCunioDM._EsCunioEstandar + '=1) or ';

    Result := Result + TCunioDM.TableName + '.' + TCunioDM._MarcaID + ' in ( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(_C.ID) + ') or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(_C.ID) + ' )) or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(_C.ID) + ' )))';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByClienteAndArticuloAsociado(_A: TArticulo; _C: TCliente; _SoloActivos: Boolean ; _IncluyeEstandar: Boolean);
  function WhereString: String;
  Begin
    Result := '(';
    if _incluyeEstandar then
      Result := Result +
                '(' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoSinCunio)+ ') or ('
                    + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' )' + ' or ('
                    + TCunioDM._EsCunioEstandar + '=1) or ';

    Result := Result + TCunioDM.TableName + '.' + TCunioDM._MarcaID + ' in ( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(_C.ID) + ') or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(_C.ID) + ' )) or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(_C.ID) + ' ))) )';

    if not _A.familiaDeArticulo.EsMatriz then
      begin
        Result := Result + ' and (' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM._CunioID + ' From ' + TCunioArticuloPosibleDM.TableName + ' where ' + TCunioArticuloPosibleDM._articuloID + '=' + IntToStr(_A.ID) + '))';
      end
    else
      begin
        Result := Result + ' and (' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM._CunioID + ' From ' + TCunioArticuloPosibleDM.TableName + ' where ' +
        TCunioArticuloPosibleDM._articuloID + ' in (select ' + TMatrizArticuloAsociadoDM._ArticuloAsociadoID + ' from ' + TMatrizArticuloAsociadoDM.TableName + ' where ' + TMatrizArticuloAsociadoDM._ArticuloPadreID + ' = ' + IntToStr(_A.ID) + ')))';
      end;
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByClienteAndComponenteAsociadoAndMarca(_A: TArticulo; _C: TCliente; _M: TMarca; _SoloActivos: Boolean; _IncluyeEstandar : Boolean);
  function WhereString: String;
  Begin
    Result := '(';
    if _IncluyeEstandar then
      Result := Result +
                '(' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoSinCunio)+ ') or ('
                    + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' )' + ' or ('
                    + TCunioDM._EsCunioEstandar + '=1) or ';

    Result := Result + TCunioDM.TableName + '.' + TCunioDM._MarcaID + ' in ( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(_C.ID) + ') or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(_C.ID) + ' )) or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(_C.ID) + ' ))) )';

    Result := Result +  ' and (' + TCunioDM.TableName + '.' + TCunioDM._MarcaID + '=' + IntToStr(_M.ID) + ')';

    if not _A.familiaDeArticulo.EsMatriz then
      begin
        Result := Result + ' and (' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM._CunioID + ' From ' + TCunioArticuloPosibleDM.TableName + ' where ' + TCunioArticuloPosibleDM._articuloID + '=' + IntToStr(_A.ID) + '))';
      end
    else
      begin
        Result := Result + ' and (' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM._CunioID + ' From ' + TCunioArticuloPosibleDM.TableName + ' where ' +
        TCunioArticuloPosibleDM._articuloID + ' in (select ' + TMatrizArticuloAsociadoDM._ArticuloAsociadoID + ' from ' + TMatrizArticuloAsociadoDM.TableName + ' where ' + TMatrizArticuloAsociadoDM._ArticuloPadreID + ' = ' + IntToStr(_A.ID) + ')))';
      end;
  End;

begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByClienteAndMarca(_C: TCliente; _M: TMarca; _SoloActivos: Boolean; _IncluyeEstandar: Boolean);
  function WhereString: String;
  begin
    Result := '(';
    if _incluyeEstandar then
      Result := Result + '(' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + QuotedStr(aplicacion.ParametrosDelSistema.CodigoSinCunio)+ ') or ('
                    + TCunioDM.TableName + '.' + TCunioDM._Codigo + '=' + quotedstr(aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' )' + ' or ('
                    + TCunioDM._EsCunioEstandar + '=1) or ';

    Result := Result + TCunioDM.TableName + '.' + TCunioDM._MarcaID + ' in ( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(_C.ID) + ') or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(_C.ID) + ' )) or';
    Result := Result + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(_C.ID) + ' ))) )';

    Result := Result +  ' and (' + TCunioDM.TableName + '.' + TCunioDM._MarcaID + '=' + IntToStr(_M.ID) + ')';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll( False, WhereString, _Soloactivos));
end;

constructor TCunioList.CreateByCodigoDesdeHasta(_Desde, _Hasta: String; _SoloActivos: Boolean);
  Function WhereString : STring;
  begin
    Result := '( ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' >= ' + QuotedStr(_Desde) + ' AND ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + '<= ' + quotedstr(_Hasta) + ' ) ';
  end;
begin
  inherited Create(TCunio,TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByComponenteAsociado(_A: TArticulo; _SoloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := '( ' + TCunioDM.ID_FieldName + ' in ( select ' + TCunioArticuloPosibleDM._CunioID;
    Result := Result + ' from ' + TCunioArticuloPosibleDM.TableName + ' where ' + TCunioArticuloPosibleDM._ComponenteID + '=' + IntToStr(_A.ID) + ' )';
    // agrego cuño 00000
    Result := Result + ' or ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoSinCunio) + ' or ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + QuotedStr(Aplicacion.ParametrosDelSistema.CodigoCunioEstandarApholos) + ' )';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByEstandar(_SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TCunioDM._EsCunioEstandar + '=1';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByMarca(_M: TMarca; _soloActivos: Boolean);
 Function WhereString : String;
 begin
   Result := '(' + TCunioDM.TableName + '.' + TCunioDM._MarcaID + '=' + IntToStr(_M.ID) + ')';
 end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByMarcaAndArticuloAsociado(_A: TArticulo; _M: TMarca; _SoloActivos: Boolean; _EvauluarProductoCompleto: Boolean);

  Function FiltroArticulosAsociados: String;
  begin
    if _A.familiaDeArticulo.EsMatriz then
      begin
        Result := ' ( ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr(aplicacion.ParametrosDelSistema.CodigoSinCunio) + ') or ';
        Result := Result + '( ' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ' in (select ';
        Result := Result + TCunioArticuloPosibleDM._CunioID + ' From ' + TCunioArticuloPosibleDM.TableName;
        Result := Result + ' where ' + TCunioArticuloPosibleDM._ComponenteID + ' in (';
        Result := Result + 'select ' + TCunioArticuloPosibleDM._ComponenteID + ' from ' + TCunioArticuloPosibleDM.TableName + ' where ';
        Result := Result + TCunioArticuloPosibleDM._articuloID + ' in (';
        Result := Result + ' select ' + TMatrizArticuloAsociadoDM._ArticuloAsociadoID + ' from ' + TMatrizArticuloAsociadoDM.TableName;
        Result := Result + ' where ' + TMatrizArticuloAsociadoDM._ArticuloPadreID + ' in (';
        Result := Result + ' select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ';
        Result := Result + TArticuloDM.ID_FieldName + ' = ' + IntToStr(_A.ID) + '))))) ';
      end
    else
      begin
        Result := ' ( ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr(aplicacion.ParametrosDelSistema.CodigoSinCunio) + ') or ';
        Result := Result + '( ' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM.TableName + '.' + TCunioArticuloPosibleDM._CunioID;
        Result := Result + ' From ' + TCunioArticuloPosibleDM.TableName;
        if _EvauluarProductoCompleto then
          Result := Result + ' Where ' + TCunioArticuloPosibleDM._ArticuloID + ' = ' + IntToStr(_A.ID) + ' ) )'
        else
          Result := Result + ' Where ' + TCunioArticuloPosibleDM._ComponenteID + ' = ' + IntToStr(_A.ID) + ' ) )';
      end;
  end;

  Function FiltroMarca: String;
  begin
    Result := '( ' + TCunioDM.TableName + '.' + TCunioDM._EsCunioEstandar + '=1 ' + ' or (' + TCunioDM.TableName + '.' + TCunioDM._marcaID + ' = ' +  IntToStr(_M.ID) + ' )) ';
  end;

  Function FiltroEstandares: String;
  begin
    if not _A.familiaDeArticulo.EsMatriz then
      begin
        Result := '( ' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM._CunioID + ' From ';
        Result := Result + TCunioArticuloPosibleDM.TableName + ' where ' + TCunioArticuloPosibleDM._ComponenteID + ' = ' + IntToStr(_A.ID) + ' )';
      end
    else
      begin
        Result := '( ' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleDM.TableName + '.' + TCunioArticuloPosibleDM._CunioID;
        Result := Result + ' From ' + TCunioArticuloPosibleDM.TableName;
        Result := Result + ' Where ' + TCunioArticuloPosibleDM._articuloID + ' in ( Select  ';
        Result := Result + TArticuloDM.TableName + '.' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ';
        Result := Result + TArticuloDM.TableName + '.' + TArticuloDM.ID_FieldName + ' in ( Select ' + TMatrizArticuloAsociadoDM._ArticuloAsociadoID;
        Result := Result + ' from ' + TMatrizArticuloAsociadoDM.TableName + ' where ' + TMatrizArticuloAsociadoDM._ArticuloPadreID + ' = ';
        Result := Result + IntToStr(_A.ID) + ') ) )';
      end;
    Result := Result + ' and ' + TCunioDM._EsCunioEstandar + ' = 1 )';
    Result := Result + ' or ( ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr('00000') + ' )';
    Result := Result + ' or ( ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ' = ' + quotedstr('00001') + ' )';
  end;
  Function WhereString : STring;
  begin
    Result := FiltroArticulosAsociados + ' and ' + FiltroMarca;
  end;

begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateByMateriaPrima(_M: TMateriaPrima; _SoloActivos: Boolean);
  function WhereString: String;
  begin
    Result := '(' + TCunioDM.TableName +'.'+ TCunioDM.ID_FieldName +  ' in (Select ' + TCunioArticuloPosibleDM._CunioID +
      ' from ' + TCunioArticuloPosibleDM.Tablename + ' where ' +  TCunioArticuloPosibleDM.ID_FieldName + ' in ( Select ' + TCunioArticuloPosibleHerramentalDM._CunioArticuloPosibleID +
      ' from ' + TCunioArticuloPosibleHerramentalDM.TableName + ' where ' + TCunioArticuloPosibleHerramentalDM._MateriaPrimaID + '=' + IntToStr(_M.ID) + ')))';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll( False, WhereString, _SoloActivos ));
end;

constructor TCunioList.CreateByNumeroDeDesarrollo(_Des: String; _SoloActivos: Boolean);
  Function WhereString : STring;
  begin
    Result := '( lower( ' + TCunioDM.TableName + '.' + TCunioDM._NumeroDeDesarrollo + ')= lower(' + QuotedStr(_Des) + '))';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateBySinMarca(_SoloActivos: Boolean);
  Function WhereString : STring;
  begin
    Result := '(' + TCunioDM.TableName + '.' + TCunioDM._marcaID + '=0)';
  end;
begin
  inherited Create(TCunio, TCunioDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TCunioList.CreateEmpty;
begin
  inherited Create(TCunio, TCunioDM.CreateEmpty);
end;

{ TFormulario }

function TFormulario.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = NULL) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field( 'Genericas', 'DescripcionItem = ' + QuotedStr(Descripcion) + 'and CodigoTabla = 205 ' , 'CodigoItem');
  Result := FCodigoInternoSifab;
end;

function TFormulario.GetDescriptibleAbreviadoListClass;
begin
  Result := TFormularioList;
end;

constructor TFormulario.Create;
begin
  inherited;
  DMObject            := Aplicacion.DMProvider.GetGlobalDM(TFormularioDM);
  FCodigoInternoSifab := Null;
end;

function TFormulario.GetTipodeAsiento: TTipodeAsiento;
begin
  if not assigned(FTipodeAsiento) then
    GetObject(TTipodeAsiento, FTipodeAsiento, TipodeAsientoID);
  Result := TTipodeAsiento(FTipodeAsiento);
end;

function TFormulario.GetTiposDeFormulario: TTipoDeFormularioList;
begin
  if not assigned(FTiposDeFormulario) then
    GetList(TPDList(FTiposDeFormulario), TPDList(TTipoDeFormularioList.CreateByFormulario(self)));
  Result := TTipoDeFormularioList(FTiposDeFormulario);
end;

procedure TFormulario.SetObservacionDefaultID(const Value: TObjectID);
begin
  if assigned( FObservacionDefault ) And (FObservacionDefaultID <> Value)  then
    FreeAndNil( FObservacionDefault);
  FObservacionDefaultID := Value;
end;

procedure TFormulario.SetTipodeAsientoID(const Value: TObjectID);
begin
  if assigned( FTipodeAsiento ) And (FTipodeAsientoID <> Value)  then
    FreeAndNil( FTipodeAsiento );
  FTipodeAsientoID := Value;
end;

function TFormulario.GetObsercacionDefault: TFormularioObservacion;
begin
  if not assigned(FObservacionDefault) then
    GetObject(TFormularioObservacion, FObservacionDefault, FObservacionDefaultID);
  Result := TFormularioObservacion(FObservacionDefault);
end;

function TFormulario.GetOrganizacionesDeMonitor: TOrganizacionDeMonitorList;
begin
  if not assigned(FOrganizacionesDeMonitor) then
    GetList(TPDList(FOrganizacionesDeMonitor), TPDList(TOrganizacionDeMonitorList.CreateByFormularioID(Self.ID)));
  Result := TOrganizacionDeMonitorList(FOrganizacionesDeMonitor);
end;

{ TFormularioDM }
class function TFormularioDM.TableName: string;
begin
  Result := 'Formularios';
end;

class function TFormularioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TFormularioDM.ID_FieldName: string;
begin
  Result := 'FormularioID';
end;

procedure TFormularioDM.PopulateFields(PDObject: TPDObject);
begin
  with TFormulario(PDObject) do
    begin
      StringField[_Codigo]            := Codigo;
      StringField[_Descripcion]       := Descripcion;
      IDField[_ObservacionDefaultID]  := ObservacionDefaultID;
      IDField[_TipoDeAsientoID]       := TipoDeAsientoID;
      BooleanField[_EsFormularioAFIP] := EsFormularioAFIP;
      BooleanField[_EsFormularioFacturable] := EsFormularioFacturable;
      BooleanField[_EsInactivo]       := EsInactivo;
    end;
end;

procedure TFormularioDM.PopulateObject(PDObject: TPDObject);
begin
  with TFormulario(PDObject) do
  begin
    Fcodigo               := StringField[_Codigo];
    Fdescripcion          := StringField[_Descripcion];
    FObservacionDefaultID := IDField[_ObservacionDefaultID];
    FEsFormularioAFIP     := BooleanField[_EsFormularioAFIP];
    FEsFormularioFacturable     := BooleanField[_EsFormularioFacturable];
    EsInactivo            := BooleanField[_EsInactivo];
    FTipoDeAsientoID      := IDField[_TipoDeAsientoID];
  end;
end;

{ TFormularioList }
function TFormularioList.GetActual: TFormulario;
begin
  Result := TFormulario(CurrentObject);
end;

function TFormularioList.CreateNewObject: TPDObject;
begin
  Result := TFormulario.Create;
end;

constructor TFormularioList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TFormulario, TFormularioDM.CreateAll(false, '', _SoloActivos));
end;

function TTipoDeFormulario.GetAccionesDeStock: TTipoDeFormularioAccionStockList;
begin
  if not assigned(FAccionesDeStock) then
    GetList(TPDList(FAccionesDeStock), TPDList(TTipoDeFormularioAccionStockList.CreateByTipoDeFormulario(self)));
  Result := TTipoDeFormularioAccionStockList(FAccionesDeStock);
end;

function TTipoDeFormulario.GetCentroDeFacturacion: TCentroDeFacturacion;
begin
  if not Assigned(FCentroDeFacturacion) then
    GetObject(TCentroDeFacturacion, FCentroDeFacturacion, FCentroDeFacturacionID);
  Result := TCentroDeFacturacion(FCentroDeFacturacion);
end;

function TTipoDeFormulario.GetCodigoInternoLetraSifab: TEntero;
begin
  if (FCodigoInternoLetraSifab = Null) or (FCodigoInternoLetraSifab = 0) then
    FCodigoInternoLetraSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('Genericas', 'descripcionitem = ' + QuotedStr( Letra ) + ' and CodigoTabla = 45', 'CodigoItem') ;
  Result := FCodigoInternoLetraSifab;
end;

function TTipoDeFormulario.GetConceptosPosibles : TTipoDeFormularioConceptoPosibleList;
begin
  if not assigned(FConceptosPosibles) then
    GetList(TPDList(FConceptosPosibles), TPDList(TTipoDeFormularioConceptoPosibleList.CreateByFormulario(self)));
  Result := TTipoDeFormularioConceptoPosibleList(FConceptosPosibles);
end;

function TTipoDeFormulario.GetOperacionContable: TCuentaContable;
begin
  if not assigned(FOperacionContable) then
    GetObject(TCuentaContable, FOperacionContable, OperacionContableID);
  Result := TCuentaContable(FOperacionContable);
end;

function TTipoDeFormulario.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeFormularioList;
end;

function TTipoDeFormulario.GetEditarPorAdministrador: TBoolean;
begin
  Result := FEditarPorAdministrador and (Aplicacion.Usuario.TipoDeUsuario.codigo=Aplicacion.ParametrosDelSistema.TipoDeUsuarioAdministrador);
end;

procedure TTipoDeFormulario.getEmailBody(const Value: WideString);
begin
  FEmailBody := Value;
end;

constructor TTipoDeFormulario.Create;
begin
  inherited;
  DMObject                   := Aplicacion.DMProvider.GetGlobalDM(TTipoDeFormularioDM);
  FLetra                     := Null;
  Forden                     := Null;
  FEditarPorAdministrador    := False;
  FMailPorMacAddressValidado := False;
  FEmailBodyEsHtml           := False;
  FImpresoraDefaultID        := NullID;
  FCodigoInternoLetraSifab   := Null;
end;

function TTipoDeFormulario.GetObservacionesPosibles: TFormularioObservacionList;
begin
  if not assigned(FObservacionesPosibles) then
    GetList(TPDList(FObservacionesPosibles), TPDList(TFormularioObservacionList.CreateByFormulario(self)));
  Result := TFormularioObservacionList(FObservacionesPosibles);
end;

function TTipoDeFormulario.GetTTipoDeFormularioConceptoPosible : TTipoDeformularioConceptoPosible;
begin
  if not assigned(FConceptoPosibleDefault) then
    GetObject(TTipoDeformularioConceptoPosible, FConceptoPosibleDefault, FConceptoPosibleDefaultID);
  Result := TTipoDeformularioConceptoPosible(FConceptoPosibleDefault);
end;

procedure TTipoDeFormulario.SetCentroDeFacturacionID(const Value: TObjectID);
begin
  if (Value <> FCentroDeFacturacionID) and assigned(FCentroDeFacturacion) then
    FreeAndNil(FCentroDeFacturacion);
  FCentroDeFacturacionID := Value;
end;

procedure TTipoDeFormulario.SetConceptoPosibleDefaultID(const Value: TObjectID);
begin
  if (Value <> FConceptoPosibleDefaultID) and assigned(FConceptoPosibleDefault) then
    FreeAndNil(FConceptoPosibleDefault);
  FConceptoPosibleDefaultID := Value;
end;

procedure TTipoDeFormulario.SetOperacionContableID(const Value: TObjectID);
begin
  if (Value <> FOperacionContableID) and assigned(FOperacionContable) then
    FreeAndNil(FOperacionContable);
  FOperacionContableID := Value;
end;

function TTipoDeFormulario.GetEmailCuerpos: TTipoDeFormularioEmailCuerpoList;
begin
  if not assigned(FEmailCuerpos) then
    GetList(TPDList(FEmailCuerpos), TPDList(TTipoDeFormularioEmailCuerpoList.CreateByTipoDeFormulario(self)));
  Result := TTipoDeFormularioEmailCuerpoList(FEmailCuerpos);
end;

function TTipoDeFormulario.GetEmailEncabezados: TTipoDeFormularioEmailEncabezadoList;
begin
  if not assigned(FEmailEncabezados) then
    GetList(TPDList(FEmailEncabezados), TPDList(TTipoDeFormularioEmailEncabezadoList.CreateByTipoDeFormulario(self)));
  Result := TTipoDeFormularioEmailEncabezadoList(FEmailEncabezados);
end;

function TTipoDeFormulario.GetEmailFirmas: TTipoDeFormularioEmailFirmaList;
begin
  if not assigned(FEmailFirmas) then
    GetList(TPDList(FEmailFirmas), TPDList(TTipoDeFormularioEmailFirmaList.CreateByTipoDeFormulario(self)));
  Result := TTipoDeFormularioEmailFirmaList(FEmailFirmas);
end;

function TTipoDeFormulario.GetEmailItems: TTipoDeFormularioEmailItemList;
begin
  if not assigned(FEmailItems) then
    GetList(TPDList(FEmailItems), TPDList(TTipoDeFormularioEmailItemList.CreateByTipoDeFormulario(self)));
  Result := TTipoDeFormularioEmailItemList(FEmailItems);
end;

function TTipoDeFormulario.GetFormulario: TFormulario;
begin
  if not assigned(FFormulario) then
    GetObject(TFormulario, FFormulario, FormularioID);
  Result := TFormulario(FFormulario);
end;

function TTipoDeFormulario.GetFormularioObsercacion: TFormularioObservacion;
begin
  if not assigned(FObservacionDefault) then
    GetObject(TFormularioObservacion, FObservacionDefault, ObservacionDefaultID);
  Result := TFormularioObservacion(FObservacionDefault);
end;

function TTipoDeFormulario.GetImpresoraDefault: TImpresoraDocumento;
begin
  if not Assigned(FImpresoraDefault) then
    GetObject(TImpresoraDocumento, FImpresoraDefault, ImpresoraDefaultID);
  Result := TImpresoraDocumento(FImpresoraDefault);
end;

procedure TTipoDeFormulario.SetFormularioID(const Value: TObjectID);
begin
  if (Value <> FFormularioID) and assigned(FFormulario) then
    FreeAndNil(FFormulario);
  FFormularioID := Value;
end;

procedure TTipoDeFormulario.SetImpresoraDefaultID(const Value: TObjectID);
begin
  if (Value <> FImpresoraDefaultID) and assigned(FImpresoraDefault) then
    FreeAndNil(FImpresoraDefault);
  FImpresoraDefaultID := Value;
end;

procedure TTipoDeFormulario.SetLetra(const Value: TString);
begin
  FLetra := AnsiUpperCase( Value );
end;

procedure TTipoDeFormulario.SetobservacionDefaultID(const Value: TObjectID);
begin
  if (Value <> FObservacionDefaultID) and assigned(FObservacionDefault) then
    FreeAndNil(FObservacionDefault);
  FObservacionDefaultID := Value;
end;

{ TTipoDeFormularioDM }
class function TTipoDeFormularioDM.TableName: string;
begin
  Result := 'TiposDeFormulario';
end;

class function TTipoDeFormularioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeFormularioDM.ID_FieldName: string;
begin
  Result := 'TipoDeFormularioID';
end;

procedure TTipoDeFormularioDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormulario(PDObject) do
    begin
      StringField[_Codigo]                                    := codigo;
      StringField[_Descripcion]                               := Descripcion;
      WideStringField[_EmailBody]                             := FEmailBody;
      IDField[_FormularioID]                                  := FFormularioID;
      IntegerField[_Orden]                                    := orden;
      IntegerField[_CantidadDeImpresiones]                    := CantidadDeImpresiones;
      IDField[_OperacionContableID]                           := FOperacionContableID;
      IDField[_ObservacionDefaultID]                          := FObservacionDefaultID;
      IDField[_ConceptoPosibleDefaultID]                      := FConceptoPosibleDefaultID;
      IDField[_CentroDeFacturacionID]                         := FCentroDeFacturacionID;
      BooleanField[_ActuaEnStockPorAjuste]                    := FActuaEnStockPorAjuste;
      BooleanField[_VerificaCai]                              := FVerificaCai;
      BooleanField[_ActuaEnStockPorCambioDeEstado]            := FActuaEnStockPorCambioDeEstado;
      BooleanField[_ActuaEnStockPorCambioDePasoDeFabricacion] := FActuaEnStockPorCambioDePasoDeFabricacion;
      StringField[_PieImpresion]                              := FPieImpresion;
      StringField[_EmailSubject]                              := FEmailSubject;
      BooleanField[_EmailBodyEsHtml]                          := FEmailBodyEsHtml;
      BooleanField[_EditarPorAdministrador]                   := FEditarPorAdministrador;
      BooleanField[_MailPorMacAddressValidado]                := FMailPorMacAddressValidado;
      StringField[_ArchivoReporte]                            := FArchivoReporte;
      StringField[_ArchivoFD3TitulosES]                       := FArchivoFD3TitulosES;
      StringField[_ArchivoFD3TitulosEN]                       := FArchivoFD3TitulosEN;
      StringField[_ArchivoFD3TitulosPO]                       := FArchivoFD3TitulosPO;
      StringField[_ArchivoXMLCamposEncabezado]                := FArchivoXMLCamposEncabezado;
      StringField[_ArchivoXMLCamposItems]                     := FArchivoXMLCamposItems;
      StringField[_CodigoFiscal]                              := FcodigoFiscal;
      StringField[_Letra]                                     := FLetra;
      BooleanField[_EsInactivo]                               := EsInactivo;
      IDField[_ImpresoraDefaultID]                            := FImpresoraDefaultID;
      BooleanField[_EsParaDepositoSemielaborado]              := EsParaDepositoSemielaborado;
      BooleanField[_EsParaDepositoMateriaPrima]               := EsParaDepositoMateriaPrima;
      BooleanField[_EsParaDepositoProductosTerminados]        := EsParaDepositoProductosTerminados;
    end;
end;

procedure TTipoDeFormularioDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormulario(PDObject) do
    begin
      codigo                                     := StringField[_Codigo];
      Descripcion                                := StringField[_Descripcion];
      FFormularioID                              := IDField[_FormularioID];
      Forden                                     := IntegerField[_Orden];
      FCantidadDeImpresiones                     := IntegerField[_CantidadDeImpresiones];
      FOperacionContableID                       := IDField[_OperacionContableID];
      FObservacionDefaultID                      := IDField[_ObservacionDefaultID];
      FConceptoPosibleDefaultID                  := IDField[_ConceptoPosibleDefaultID];
      FCentroDeFacturacionID                     := IDField[_CentroDeFacturacionID];
      FActuaEnStockPorAjuste                     := BooleanField[_ActuaEnStockPorAjuste];
      FVerificaCai                               := BooleanField[_VerificaCai];
      FActuaEnStockPorCambioDeEstado             := BooleanField[_ActuaEnStockPorCambioDeEstado];
      FActuaEnStockPorCambioDePasoDeFabricacion  := BooleanField[_ActuaEnStockPorCambioDePasoDeFabricacion];
      FPieImpresion                              := StringField[_PieImpresion];
      FEmailSubject                              := StringField[_EmailSubject];
      FEmailBody                                 := WideStringField[_EmailBody];
      FEmailBodyEsHtml                           := BooleanField[_EmailBodyEsHtml];
      FEditarPorAdministrador                    := BooleanField[_EditarPorAdministrador];
      FMailPorMacAddressValidado                 := BooleanField[_MailPorMacAddressValidado];
      FArchivoReporte                            := StringField[_ArchivoReporte];
      FArchivoFD3TitulosES                       := StringField[_ArchivoFD3TitulosES];
      FArchivoFD3TitulosPO                       := StringField[_ArchivoFD3TitulosPO];
      FArchivoFD3TitulosEN                       := StringField[_ArchivoFD3TitulosEN];
      FArchivoXMLCamposEncabezado                := StringField[_ArchivoXMLCamposEncabezado];
      FArchivoXMLCamposItems                     := StringField[_ArchivoXMLCamposItems];
      FcodigoFiscal                              := StringField[_CodigoFiscal];
      FLetra                                     := StringField[_Letra];
      EsInactivo                                 := BooleanField[_EsInactivo];
      FImpresoraDefaultID                        := IDField[_ImpresoraDefaultID];
      FEsParaDepositoSemielaborado               := BooleanField[_EsParaDepositoSemielaborado];
      FEsParaDepositoMateriaPrima                := BooleanField[_EsParaDepositoMateriaPrima];
      FEsParaDepositoProductosTerminados         := BooleanField[_EsParaDepositoProductosTerminados];
    end;
end;

{ TTipoDeFormularioList }
function TTipoDeFormularioList.GetActual: TTipoDeFormulario;
begin
  Result := TTipoDeFormulario(CurrentObject);
end;

constructor TTipoDeFormularioList.CreateByCentroDeFacturacion(_CF: TCentroDeFacturacion);
begin
  CreateByCentroDeFacturacion(_CF.ID);
end;

constructor TTipoDeFormularioList.CreateByCentroDeFacturacion(_CFID: TObjectID);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._CentroDeFacturacionID + ' = ' + IntToStr( _CFID );
  end;
  Function OrderString : String;
  begin
    Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._Codigo;
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False , OrderString ));
end;

constructor TTipoDeFormularioList.CreateByFormularioAndDeposito(_F : TFormulario ; _EsDepositoMP, _EsDepositoSemi, _EsDepositoProd: Boolean);
  Function WhereString : String;
  begin
    if _EsDepositoMP then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoMateriaPrima + '=1'
    else if _EsDepositoSemi then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoSemielaborado + '=1'
    else if _EsDepositoProd then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoProductosTerminados + '=1';

    if not Aplicacion.Sesion.Usuario.EsAdministradorDelSistema then
      Result := Result + ' and ' + TTipoDeFormularioDM.ID_FieldName + ' in ( Select ' + TTipoDeFormularioAccionStockDM._TipoDeFormularioID + ' from ' + TTipoDeFormularioAccionStockDM.TableName
      + ' where ' + TTipoDeFormularioAccionStockDM._TipoDeMovimientoDeStockID + ' in ( Select ' + TTipoDeMovimientoDeStockDM.ID_FieldName  + ' from ' + TTipoDeMovimientoDeStockDM.TableName
      + ' where ' + TTipoDeMovimientoDeStockDM._DepositoDestinoID + ' in ( Select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName
      + ' where ' + TDepositoDM._SectorID + '=' + IntToStr(Aplicacion.Sesion.Usuario.SectorID) + ') or ' + TTipoDeMovimientoDeStockDM._DepositoOrigenID + ' in ( Select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName
      + ' where ' + TDepositoDM._SectorID + '=' + IntToStr(Aplicacion.Sesion.Usuario.SectorID) + ')))';
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False ,TTipoDeFormularioDM._Orden));
end;

constructor TTipoDeFormularioList.CreateByFormularioAndDepositoAndCodigoLike(_F: TFormulario; _C: String; _EsDepositoMP, _EsDepositoSemi, _EsDepositoProd: Boolean);
  Function WhereString : String;
  begin
    if not (_EsDepositoMP or _EsDepositoSemi or _EsDepositoProd) then
      Aplicacion.RaiseExceptionCreate('Debe asignar al menos un depósito');

    if _EsDepositoMP then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoMateriaPrima + '=1'
    else if _EsDepositoSemi then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoSemielaborado + '=1'
    else if _EsDepositoProd then
      Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._EsParaDepositoProductosTerminados + '=1';

    Result := Result + ' and ' + TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._Codigo  + ' Like ' + QuotedStr( _C +'%');

    if not Aplicacion.Sesion.Usuario.EsAdministradorDelSistema then
      Result := Result + ' and ' + TTipoDeFormularioDM.ID_FieldName + ' in ( Select ' + TTipoDeFormularioAccionStockDM._TipoDeFormularioID + ' from ' + TTipoDeFormularioAccionStockDM.TableName
      + ' where ' + TTipoDeFormularioAccionStockDM._TipoDeMovimientoDeStockID + ' in ( Select ' + TTipoDeMovimientoDeStockDM.ID_FieldName  + ' from ' + TTipoDeMovimientoDeStockDM.TableName
      + ' where ' + TTipoDeMovimientoDeStockDM._DepositoDestinoID + ' in ( Select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName
      + ' where ' + TDepositoDM._SectorID + '=' + IntToStr(Aplicacion.Sesion.Usuario.SectorID) + ') or ' + TTipoDeMovimientoDeStockDM._DepositoOrigenID + ' in ( Select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName
      + ' where ' + TDepositoDM._SectorID + '=' + IntToStr(Aplicacion.Sesion.Usuario.SectorID) + ')))';
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False ,TTipoDeFormularioDM._Orden));
end;

constructor TTipoDeFormularioList.CreateByFormulario(_F: TFormulario);
begin
  CreateByFormulario( _F.ID ) ;
end;

constructor TTipoDeFormularioList.CreateByFormulario(_FID: TObjectID);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioDM._FormularioID + ' = ' + IntToStr(_FID);
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False ,TTipoDeFormularioDM._Orden));
end;

constructor TTipoDeFormularioList.CreateByFormularioAndCondicionDeIva(_F: TFormulario; _CIVA: TCondicionDeIva);
  Function WhereString : String;
  begin
    Result := '('+ TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._FormularioID + ' = ' + IntToStr( _F.ID );
    Result := Result + ') and (' + TTipoDeFormularioDM._Letra + ' = ' + QuotedStr( _CIVA.LetraDeComprobante ) + ')';
  end;
  Function OrderString : String;
  begin
    Result := TTipoDeFormularioDM.TableName +'.'+ TTipoDeFormularioDM._Orden;
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False , OrderString ));
end;

constructor TTipoDeFormularioList.CreateByFormularioFacturable;
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioDM._FormularioID + ' in ( Select ' + TFormularioDM.ID_FieldName + ' from ' + TFormularioDM.TableName + ' where ( ' + TFormularioDM._EsFormularioFacturable + ' = 1 ) )';
  end;
  Function OrderString : String;
  begin
    Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._Codigo;
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False , OrderString ));
end;

constructor TTipoDeFormularioList.CreateDocumentosAfipByCentroDeFacturacion(_CF: TCentroDeFacturacion);
begin
  CreateDocumentosAfipByCentroDeFacturacion(_CF.ID);
end;

constructor TTipoDeFormularioList.CreateDocumentosAfipByCentroDeFacturacion(_CFID: TObjectID);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._CentroDeFacturacionID + ' = ' + IntToStr( _CFID );
    Result := Result + ' and ' + TTipoDeFormularioDM._FormularioID + ' in ( Select ' + TFormularioDM.ID_FieldName + ' from ' + TFormularioDM.TableName + ' where (' + TFormularioDM._EsFormularioAFIP + ' = 1))';
  end;
  Function OrderString : String;
  begin
    Result := TTipoDeFormularioDM.TableName +'.'+ TTipoDeFormularioDM._Codigo;
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False , OrderString ));
end;

constructor TTipoDeFormularioList.CreateDocumentosAfipByCentroDeFacturacionCodigoLike(_CF: TCentroDeFacturacion; _C: String);
begin
  CreateDocumentosAfipByCentroDeFacturacionCodigoLike(_CF.ID , _C);
end;

constructor TTipoDeFormularioList.CreateDocumentosAfipByCentroDeFacturacionCodigoLike(_CFID: TObjectID; _C: String);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._CentroDeFacturacionID + ' = ' + IntToStr( _CFID );
    Result := Result + ' and ' + TTipoDeFormularioDM.TableName + '.' + TTipoDeFormularioDM._Codigo + ' like ' + QuotedStr( _C + '%' );
    Result := Result + ' and ' + TTipoDeFormularioDM._FormularioID + ' in ( Select ' + TFormularioDM.ID_FieldName + ' from ' + TFormularioDM.TableName + ' where (' + TFormularioDM._EsFormularioAFIP + ' = 1))';
  end;
  Function OrderString : String;
  begin
    Result := TTipoDeFormularioDM.TableName +'.'+ TTipoDeFormularioDM._Codigo;
  end;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False, WhereString, False , OrderString ));
end;

function TTipoDeFormularioList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormulario.Create;
end;

constructor TTipoDeFormularioList.CreateAll;
begin
  inherited Create(TTipoDeFormulario, TTipoDeFormularioDM.CreateAll(False));
end;

//{ TtipoDeFormularioMovimientoPosible }
//constructor TTipoDeFormularioMovimientoPosible.Create;
//begin
//  inherited;
//  DMObject := aplicacion.DMProvider.GetGlobalDM(TtipoDeFormularioMovimientoPosibleDM);
//  FClientesEnOrigen := null;
//  FProveedoresEnOrigen := null;
//end;
//
//procedure TTipoDeFormularioMovimientoPosible.SetEstadoOrigenID(Value: TObjectID);
//begin
//  if (Value <> FEstadoOrigenID) and assigned(FEstadoOrigen) then
//    FreeAndNil(FEstadoOrigen);
//  FEstadoOrigenID := Value;
//
//end;
//
//function TTipoDeFormularioMovimientoPosible.GetEstadoOrigen: TEstadoDeStock;
//begin
//  if not assigned(FEstadoOrigen) then
//    GetObject(TEstadoDeStock, FEstadoOrigen, EstadoOrigenID);
//  Result := TEstadoDeStock(FEstadoOrigen);
//end;
//
//procedure TTipoDeFormularioMovimientoPosible.SetDepositoDefaultDestinoID(Value: TObjectID);
//begin
//  if (FDepositoDefaultDestinoID <> Value) and Assigned( FDepositoDefaultDestino )  then
//    FreeAndNil( FDepositoDefaultDestino );
//  FDepositoDefaultDestinoID := Value;
//end;
//
//procedure TTipoDeFormularioMovimientoPosible.SetDepositoDefaultOrigenID(Value: TObjectID);
//begin
//  if (FDepositoDefaultOrigenID <> Value) and Assigned( FDepositoDefaultOrigen )  then
//    FreeAndNil( FDepositoDefaultOrigen );
//  FDepositoDefaultOrigenID := Value;
//end;
//
//procedure TTipoDeFormularioMovimientoPosible.SetEstadoDestinoID(Value: TObjectID);
//begin
//  if (Value <> FEstadoDestinoID) and assigned(FEstadoDestino) then
//    FreeAndNil(FEstadoDestino);
//  FEstadoDestinoID := Value;
//end;
//
//function TTipoDeFormularioMovimientoPosible.GetDepositoDefaultDestino: TDeposito;
//begin
//  if not assigned(FDepositoDefaultDestino) then
//    GetObject(TDeposito, FDepositoDefaultDestino, DepositoDefaultDestinoID);
//  Result := TDeposito(FDepositoDefaultDestino);
//end;
//
//function TTipoDeFormularioMovimientoPosible.GetDepositoDefaultOrigen: TDeposito;
//begin
// if not assigned(FDepositoDefaultOrigen) then
//    GetObject(TDeposito, FDepositoDefaultOrigen, DepositoDefaultOrigenID);
//  Result := TDeposito(FDepositoDefaultOrigen);
//end;
//
//function TTipoDeFormularioMovimientoPosible.GetEstadoDestino: TEstadoDeStock;
//begin
//  if not assigned(FEstadoDestino) then
//    GetObject(TEstadoDeStock, FEstadoDestino, EstadoDestinoID);
//  Result := TEstadoDeStock(FEstadoDestino);
//end;
//
//function TTipoDeFormularioMovimientoPosible.Save: Boolean;
//{ function ValidarMoviemientoImposible : Boolean;
//  Begin
//  Result:=False;
//  if (EstadoOrigenID=EstadoDestinoID) then
//  Begin
//  If (ClientesEnOrigen=ClientesEnDestino) Then Result := True;
//  If ProveedoresEnOrigen=ProveedoresEnDestino Then Result:=True;
//  If InterdepositoEnOrigen=InterdepositoEnDestino Then Result:=True;
//  If DepositoPropioEnOrigen=DepositoPropioEnDestino Then Result:=True;
//  End;
//  End; }
//begin
//  Result := False;
//
////  if (EstadoOrigenID <> NullID) and (EstadoDestinoID <> NullID) and
////    (EstadoOrigenID = EstadoDestinoID) and ((ClientesEnOrigen and ClientesEnDestino) or  (ProveedoresEnOrigen and ProveedoresEnDestino) or
////      (InterdepositoEnOrigen and InterdepositoEnDestino) or
////      (DepositoPropioEnOrigen and DepositoPropioEnDestino)) then
////    Aplicacion.RaiseExceptionCreate(
////      'Si los Tipos de Empresa Origen y Destino son iguales, los Estados origen y destino no pueden coincidir.');
//
//  if (EstadoOrigenID = NullID) and (EstadoDestinoID = NullID) then
//    Aplicacion.RaiseExceptionCreate( 'Debe asignar un estado Origen o Destino antes de grabar el tipo de Movimiento');
//
//  // If ValidarMoviemientoImposible Then
//  // Aplicacion.RaiseExceptionCreate('Si los estados son iguales, los Estados origen y destino no pueden coincidir.');
//  Result := inherited Save;
//end;
//
//constructor TTipoDeFormularioList.CreateByFormulario(_F: TFormulario);
//begin
//  CreateByFormulario(_F.ID);
//end;
//
//{ TtipoDeFormularioMovimientoPosibleDM }
//class function TtipoDeFormularioMovimientoPosibleDM.TableName: string;
//begin
//  Result := 'tipodeformulariomovimientosposibles';
//end;
//
//class function TtipoDeFormularioMovimientoPosibleDM.ID_FieldName: string;
//begin
//  Result := 'TipoDeFormMovimientoPosibleID';
//end;
//
//procedure TtipoDeFormularioMovimientoPosibleDM.PopulateFields(PDObject: TPDObject);
//begin
//  with TTipoDeFormularioMovimientoPosible(PDObject) do
//  begin
//    IDField[_TipoDeformularioID]           := FTipoDeformularioID;
//    IDField[_EstadoOrigenID]               := FEstadoOrigenID;
//    IDField[_EstadoDestinoID]              := FEstadoDestinoID;
//    BooleanField[_ClientesEnOrigen]        := ClientesEnOrigen;
//    BooleanField[_ProveedoresEnOrigen]     := ProveedoresEnOrigen;
//    BooleanField[_depositoPropioEnOrigen]  := DepositoPropioEnOrigen;
//    BooleanField[_ClientesEnDestino]       := ClientesEnDestino;
//    BooleanField[_ProveedoresEnDestino]    := ProveedoresEnDestino;
//    BooleanField[_InterdepositoEnDestino]  := InterdepositoEnDestino;
//    BooleanField[_DepositoPropioEnDestino] := DepositoPropioEnDestino;
//    IDField[_DepositoDefaultOrigenID]      := DepositoDefaultOrigenID;
//    IDField[_DepositoDefaultDestinoID]     := DepositoDefaultDestinoID;
//    IntegerField[_Orden]                   := orden;
//  end;
//end;
//
//procedure TtipoDeFormularioMovimientoPosibleDM.PopulateObject
//  (PDObject: TPDObject);
//begin
//  with TTipoDeFormularioMovimientoPosible(PDObject) do
//  begin
//    FTipoDeformularioID := IDField[_TipoDeformularioID];
//    FEstadoOrigenID := IDField[_EstadoOrigenID];
//    FEstadoDestinoID := IDField[_EstadoDestinoID];
//    FClientesEnOrigen := BooleanField[_ClientesEnOrigen];
//    FProveedoresEnOrigen := BooleanField[_ProveedoresEnOrigen];
//    FDepositoPropioEnOrigen := BooleanField[_depositoPropioEnOrigen];
//    FClientesEnDestino := BooleanField[_ClientesEnDestino];
//    FProveedoresEnDestino := BooleanField[_ProveedoresEnDestino];
//    FInterdepositoEnDestino := BooleanField[_InterdepositoEnDestino];
//    FDepositoPropioEnDestino := BooleanField[_DepositoPropioEnDestino];
//    FDepositoDefaultOrigenID  := IDField[_DepositoDefaultOrigenID];
//    FDepositoDefaultDestinoID := IDField[_DepositoDefaultDestinoID];
//    Forden := IntegerField[_Orden];
//  end;
//end;
//
//{ TtipoDeFormularioMovimientoPosibleList }
//function TTipoDeFormularioMovimientoPosibleList.GetActual: TTipoDeFormularioMovimientoPosible;
//begin
//  Result := TTipoDeFormularioMovimientoPosible(CurrentObject);
//end;
//
//function TTipoDeFormularioMovimientoPosibleList.CreateNewObject: TPDObject;
//begin
//  Result := TTipoDeFormularioMovimientoPosible.Create;
//end;
//
//constructor TTipoDeFormularioMovimientoPosibleList.CreateAll;
//begin
//  inherited Create(TTipoDeFormularioMovimientoPosible, TtipoDeFormularioMovimientoPosibleDM.CreateAll(False));
//end;
//
//constructor TTipoDeFormularioMovimientoPosibleList.CreateByTipoDeFormulario(_TF: TTipoDeFormulario);
//  Function WhereString : String;
//  begin
//    Result := TTipoDeFormularioMovimientoPosibleDM._TipoDeformularioID + ' = ' + IntToStr(_TF.ID);
//  end;
//begin
//  inherited Create(TTipoDeFormularioMovimientoPosible, TtipoDeFormularioMovimientoPosibleDM.CreateAll(False, WhereString, False, TTipoDeFormularioMovimientoPosibleDM._Orden));
//end;

function TAbstractEmpresa.getDepositosDeEmpresa: TDepositoList;
begin
  If not assigned(FDepositosDeEmpresa) Then
    GetList(TPDList(FDepositosDeEmpresa), TPDList(TDepositoList.CreateByEmpresa(self)));
  Result := FDepositosDeEmpresa;
end;

constructor TDepositoList.CreateByDescripcionLikeAndEmpresa(_Des: String; _SoloActivos, _DefaultProductosTerminados, _DefaultMateriaPrima, _DefaultSemielaborados: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TDepositoDM._empresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';
    if (_Des > '') then
      Result := Result + ' And (' + TDepositoDM._Descripcion + ' like ' + QuotedStr( '%' + _Des + '%') + ')';

    if _DefaultProductosTerminados then
      Result := Result + IfThen( (Result>''), ' and (', '(')+ TDepositoDM._esDepositoProductosTerminados + ' = 1 )';
    if _DefaultMateriaPrima then
      Result := Result + IfThen( (Result>''), ' and (', '(')+ TDepositoDM._esDepositoMateriaPrima + ' = 1 )';
    if _DefaultSemielaborados then
      Result := Result + IfThen( (Result>''), ' and (', '(') + TDepositoDM._esDepositoSemielaborado + ' = 1 )';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByDPTyVirtualDeLaEmpresa(_Emp: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TDepositoDM._empresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';
    Result := Result + ' and (' ;
    Result := Result + '('+TDepositoDM._esDepositoProductosTerminados + '= 1)';
    Result := Result + ' or ' ;
    Result := Result + '('+TDepositoDM.ID_FieldName + ' = '+ IntToStr( _Emp.DepositoVirtualDeStockID )+'))';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByEmpresaDepositosPosibles(_Emp: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+TDepositoDM._empresaID + '=' +  IntToStr(_Emp.ID)+')';
    Result := Result  + ' or (' + TDepositoDM._empresaID + ' in ( Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' +TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaID + ' = ' + IntToStr( _Emp.ID )+')) ';
    Result := Result  + ' or (' + TDepositoDM._empresaID + ' in ( Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' +TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._EmpresaID + ' = ' + IntToStr( _Emp.ID )+')) ';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;


constructor TDepositoList.CreateByEmpresa(_Emp: TAbstractEmpresa; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+TDepositoDM._empresaID + '=' +  IntToStr(_Emp.ID)+')';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByEmpresaLocal( _SoloActivos: Boolean = True; _DPT: Boolean = False; _DPTVirtual: Boolean = False; _DMP: Boolean = False; _DSemi: Boolean = False );
  Function WhereString: String;
  begin
    Result := '(' + TDepositoDM._empresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';
    if _DPT and _DPTVirtual then
      begin
        Result := Result + ' and ((' + TDepositoDM._esDepositoProductosTerminados + ' = 1 ) ';
        Result := Result + ' or ( '+ TDepositoDM._esDepositoVirtual + ' = 1 ))';
      end
    else
      begin
        if _DPT then
          Result := Result + ' and (' + TDepositoDM._esDepositoProductosTerminados + ' = 1 )';
        if _DPTVirtual then
          Result := Result + ' and (' + TDepositoDM._esDepositoVirtual + ' = 1 )';
        if _DMP then
          Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + ' = 1 )';
        if _DSemi then
          Result := Result + ' and (' + TDepositoDM._esDepositoSemielaborado + ' = 1 )';
      end;
  end;
begin
  if not Assigned(Aplicacion.Empresa) then
    inherited Create(TDeposito, TDepositoDM.CreateEmpty)
  else
    inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByEmpresaLocalAll(_SoloActivos: Boolean; _EsDepositoMP : Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TDepositoDM._EmpresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';

    if _EsDepositoMP then
      Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + '=1)'
    else
      Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + '=0)';
  end;
begin
  if not Assigned(Aplicacion.Empresa) then
    inherited Create(TDeposito, TDepositoDM.CreateEmpty)
  else
    inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByEmpresaLocalAndDescripcionLike(_D: String; _SoloActivos: Boolean; _EsDepositoMP : Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TDepositoDM._EmpresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';
    Result := Result + '(' + TDepositoDM._Descripcion + ' like ' +  QuotedStr('%' + _D + '%') + ')';

    if _EsDepositoMP then
      Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + '=1)'
    else
      Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + '=0)';
  end;
begin
  if not Assigned(Aplicacion.Empresa) then
    inherited Create(TDeposito, TDepositoDM.CreateEmpty)
  else
    inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByEmpresaLocalSinSector(_SoloActivos, _DPT, _DPTVirtual, _DMP, _DSemi: Boolean);
  Function WhereString: String;
  begin
    Result := '((' + TDepositoDM._empresaID + '=' + IntToStr(Aplicacion.Empresa.ID) + ')';
    Result := Result  + ' and (( ' + TDepositoDM._SectorID + ' is NULL) or (' + TDepositoDM._SectorID + '=' + IntToStr(NullID)+')))';

    if _DPT and _DPTVirtual then
      begin
        Result := Result + ' and ((' + TDepositoDM._esDepositoProductosTerminados + ' = 1 ) ';
        Result := Result + ' or ( '+ TDepositoDM._esDepositoVirtual + ' = 1 ))';
      end
    else
      begin
        if _DPT then
          Result := Result + ' and (' + TDepositoDM._esDepositoProductosTerminados + ' = 1 )';
        if _DPTVirtual then
          Result := Result + ' and (' + TDepositoDM._esDepositoVirtual + ' = 1 )';
        if _DMP then
          Result := Result + ' and (' + TDepositoDM._esDepositoMateriaPrima + ' = 1 )';
        if _DSemi then
          Result := Result + ' and (' + TDepositoDM._esDepositoSemielaborado + ' = 1 )';
      end;
  end;
begin
  if not Assigned(Aplicacion.Empresa) then
    inherited Create(TDeposito, TDepositoDM.CreateEmpty)
  else
    inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByLocalidad(_L: TLocalidad; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result :=  '(' + TDepositoDM._localidadID + '=' + IntToStr(_L.ID)+')';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;


constructor TDepositoList.CreateBySector(_S: TSector; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+TDepositoDM._sectorID + '=' +  IntToStr(_S.ID)+')';
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TDepositoList.CreateByStockItemLibre(_ProductoID: TObjectID);
  Function WhereString : String;
  begin
    Result := 'DepositoID in (Select DepositoID from StockItems where ProductoID = ' + IntToStr(_ProductoID) + ' and PedidoDeVentaItemAsignadoID is null and EstadoDeStockID in ( Select EstadoDeStockID from EstadosDeStock where Codigo = ' + QuotedStr('A') + ' ))'
  end;
begin
  inherited Create(TDeposito, TDepositoDM.CreateAll( False, WhereString ) );
end;


function TAbstractEmpresa.GetDiasPromedioDeMora: TEntero;
begin
  FDiasPromedioDeMora :=  DiasPromedioDePago - ToleranciaDePagoEnDias ;
  if ( FDiasPromedioDeMora < 0 ) then
    FDiasPromedioDeMora := 0;
  Result := FDiasPromedioDeMora;
end;

function TAbstractEmpresa.GetDiasPromedioDePago: TEntero;
begin
  if ( FDiasPromedioDePago= 0 ) then
  try
    // SP  = [dbo].[APHOSOFT_DiasPromedioDePago]
    // Params
		//@FechaDesde = N'01/10/2016',
		//@FechaHasta = N'06/12/2016',
		//@OrganizacionID = 0,
		//@EmpresaID = 16

    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.StoredProcName := Aplicacion.ParametrosDelSistema.StoredProc_Teamplace_DiasPromedioDePago;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Prepare;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'OrganizacionID' ).Value := IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'EmpresaID' ).Value      := Aplicacion.Sesion.EmpresaDeSistema.IDTeamplace;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'FechaDesde' ).Value     := Aplicacion.DateTimeService.FechaActual - 365;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ParamByName( 'FechaHasta' ).Value     := Aplicacion.DateTimeService.FechaActual;
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.ExecProc;

    if (Aplicacion.Sesion.ConexionTeamPlace.StoredProc.RecordCount > 0 ) then
      FDiasPromedioDePago := Aplicacion.Sesion.ConexionTeamPlace.StoredProc.FieldByName('promedioDiasDePago').Value;

  finally
    Aplicacion.Sesion.ConexionTeamPlace.StoredProc.Active := False;
  end;
  Result := FDiasPromedioDePago;
end;

function TAbstractEmpresa.GetDireccionCompleta: TString;
begin
  Result := Domicilio + ' ';
  if (CodigoPostal > '') then
    Result := Result + '(' + Self.CodigoPostal + ') ';

  if EsDireccionEnIngles then
    Result := Result + Self.Localidad.DescripcionConProvinciaYPaisEnIngles
  else
    Result := Result + Self.Localidad.DescripcionConProvinciaYPais;
end;

function TAbstractEmpresa.GetDireccionDeEntrega: TDeposito;
begin
  if not assigned(FDireccionDeEntrega) and (FDireccionDeEntregaID <> NullID)
    then
  begin
    if depositosDeEmpresa.Find(FDireccionDeEntregaID) then
      FDireccionDeEntrega := TDeposito(depositosDeEmpresa.Actual)
    else
      Aplicacion.RaiseExceptionCreate('La dirección de entrega no existe.');
  end;

  if not assigned(FDireccionDeEntrega) and (FDireccionDeEntregaID = NullID) then
  begin
    AgregarDireccionLegal;

  end;

  Result := TDeposito(FDireccionDeEntrega);
end;

procedure TAbstractEmpresa.SetDireccionDeEntregaID(const Value: TObjectID);
begin
  if (Value <> FDireccionDeEntregaID) and assigned(FDireccionDeEntrega) then
    FDireccionDeEntrega := Nil;

  FDireccionDeEntregaID := Value;
end;

procedure TAbstractEmpresa.SetCondicionDeIngresosBrutosID
  (const Value: TObjectID);
begin
  if (Value <> FCondicionDeIngresosBrutosID) and assigned
    (FCondicionDeIngresosBrutos) then
    FreeAndNil(FCondicionDeIngresosBrutos);

  FCondicionDeIngresosBrutosID := Value;
end;

procedure TAbstractEmpresa.SetCondicionDeIVAId(const Value: TObjectID);
begin
  if (Value <> FCondicionDeIvaID) and assigned(FCondicionDeIva) then
    FreeAndNil(FCondicionDeIva);

  FCondicionDeIvaID := Value;
end;

procedure TAbstractEmpresa.SetCondicionDeVentaDetalleID(const Value: TObjectID);
begin
  if (Value <> FCondicionDeVentaDetalleID ) and assigned(FCondicionDeVentaDetalle ) then
    begin
      FreeAndNil(FCondicionDeVentaDetalle);
      FCCCondicionDeVentaDetalleDescripcion := Null;
    end;
  FCondicionDeVentaDetalleID := Value;
end;

procedure TAbstractEmpresa.SetTelefonoEmpresaDefaultID(const Value: TObjectID);
begin
  if (Value <> FTelefonoEmpresaDefaultID) and assigned(FTelefonoEmpresaDefault)
    then
    FreeAndNil(FTelefonoEmpresaDefault);

  FTelefonoEmpresaDefaultID := Value;
end;


procedure TAbstractEmpresa.SetTipoDeIdentificacionTributariaID(const Value: TObjectID);
begin
if (Value <> FTipoDeIdentificacionTributariaID) and Assigned(FTipoDeIdentificacionTributaria) then
    FreeAndNil(FTipoDeIdentificacionTributaria);
  FTipoDeIdentificacionTributariaID := Value;
end;

procedure TAbstractEmpresa.SetFaxDefaultID(const Value: TObjectID);
begin
  if (Value <> FFaxDefaultID) and assigned(FFaxDefault) then
    FreeAndNil(FFaxDefault);

  FFaxDefaultID := Value;
end;

function TAbstractEmpresa.GetDireccionDeRetiro: TDeposito;
begin
  if not assigned(FDireccionDeRetiro) then
    GetObject(TDeposito, FDireccionDeRetiro, DireccionDeRetiroID);

  Result := TDeposito(FDireccionDeRetiro);

end;

function TAbstractEmpresa.GetDomicilio: TString;
begin
  if (FormatoDeDireccionID <> NullID) then
    begin
      FDomicilio := FormatoDeDireccion.Formato;
      if (Calle > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Calle', Calle )
      else
        begin
          if (FormatoDeDireccion.TituloCalle > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloCalle + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloCalle, '' );
            end;
        end;

      if (NumeroCalle > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Numero', NumeroCalle )
      else
        begin
          if (FormatoDeDireccion.TituloNumero > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloNumero + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloNumero, '' );
            end;
        end;

      if (Piso > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Piso', Piso )
      else
        begin
          if (FormatoDeDireccion.TituloPiso > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloPiso + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloPiso, '' );
            end;
        end;

      if (Departamento > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Departamento', Departamento )
      else
        begin
          if (FormatoDeDireccion.TituloDepartamento > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloDepartamento + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloDepartamento, '' );
            end;
        end;

      if (Edificio > '') then
        FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, '#Edificio', Edificio )
      else
        begin
          if (FormatoDeDireccion.TituloEdificio > '') then
            begin
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloEdificio + ' ', '' );
              FDomicilio := Aplicacion.TextService.ReemplazarEn(FDomicilio, FormatoDeDireccion.TituloEdificio, '' );
            end;
        end;
    end;
  Result := AnsiUpperCase(FDomicilio);
end;

procedure TAbstractEmpresa.SetDireccionDeRetiroID(const Value: TObjectID);
begin
  if (Value <> FDireccionDeRetiroID) and assigned(FDireccionDeRetiro) then
    FreeAndNil(FDireccionDeRetiro);
  FDireccionDeRetiroID := Value;
end;

procedure TAbstractEmpresa.SetEdificio(const Value: TString);
begin
  FEdificio := UpperCase(Value);
end;

{ TStockItem }
constructor TStockItem.Create;
begin
  inherited;
  DMObject                     := Aplicacion.DMPRovider.GetGlobalDM(TStockItemDM);
  FCantidad                    := Null;
  FPedidoDeVentaItemAsignado   := Nil;
  FPedidoDeVentaItemAsignadoID := NullID;
end;


function TStockItem.GetDeposito : TDeposito;
begin
  if not assigned(FDeposito) then
    GetObject(TDeposito,FDeposito,DepositoID);
  Result := TDeposito(FDeposito);
end;

function TStockItem.GetEstadoDeStock : TEstadoDeStock;
begin
  if not assigned(FEstadoDeStock) then
    GetObject(TEstadoDeStock,FEstadoDeStock,EstadoDeStockID);
  Result := TEstadoDeStock(FEstadoDeStock);
end;

function TStockItem.GetPedidoDeVentaItemAsignado: TPDObject;
begin
  if not assigned(FPedidoDeVentaItemAsignado) then
    GetObject(TPedidoDeVentaItem,FPedidoDeVentaItemAsignado,PedidoDeVentaItemAsignadoID);
  Result := TPedidoDeVentaItem( FPedidoDeVentaItemAsignado );
end;

function TStockItem.GetProducto : TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto,FProducto,ProductoID);
  Result := TProducto(FProducto);
end;

procedure TStockItem.SetDepositoID(const Value: TObjectID);
begin
  if (Value<>FDepositoID) and Assigned(FDeposito) then
    FreeAndNil(FDeposito);
  FDepositoID := Value;
end;

procedure TStockItem.SetEstadoDeStockID(const Value: TObjectID);
begin
  if (Value<>FEstadoDeStockID) and Assigned(FEstadoDeStock) then
    FreeAndNil(FEstadoDeStock);
  FEstadoDeStockID := Value;
end;

procedure TStockItem.SetPedidoDeVentaItemAsignadoID(const Value: TObjectID);
begin
  If (Value <> FPedidoDeVentaItemAsignadoID) and assigned( FPedidoDeVentaItemAsignado ) then
    FreeAndNil(FPedidoDeVentaItemAsignado);
  FPedidoDeVentaItemAsignadoID := Value;
end;

procedure TStockItem.SetProductoID(const Value: TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

{ TStockItemDM }
class function TStockItemDM.TableName : string;
begin
  Result := 'StockItems';
end;

class function TStockItemDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result :=          TStockItemDM.TableName         + '.*, ';
    Result := Result + TProductoDM.TableName          + '.' + TProductoDM._FabricadoID      + ' as ' + TStockItemDM._CCFabricadoID             + ', ';
    Result := Result + TProductoDM.TableName          + '.' + TProductoDM._MateriaPrimaID   + ' as ' + TStockItemDM._CCMateriaPrimaID          + ', ';
    Result := Result + TFabricadoDM.TableName         + '.' + TFabricadoDM._Codigo          + ' as ' + TStockItemDM._CCFabricadoCodigo         + ', ';
    Result := Result + TFabricadoDM.TableName         + '.' + TFabricadoDM._Descripcion     + ' as ' + TStockItemDM._CCFabricadoDescripcion    + ', ';
    Result := Result + TMateriaPrimaDM.TableName      + '.' + TMateriaPrimaDM._Codigo       + ' as ' + TStockItemDM._CCMateriaPrimaCodigo      + ', ';
    Result := Result + TMateriaPrimaDM.TableName      + '.' + TMateriaPrimaDM._Descripcion  + ' as ' + TStockItemDM._CCMateriaPrimaDescripcion + ', ';
    Result := Result + TEstadoDeStockDM.TableName     + '.' + TEstadoDeStockDM._Descripcion + ' as ' + TStockItemDM._CCEstadoDescripcion       + ', ';
    Result := Result + TDepositoDM.TableName          + '.' + TDepositoDM._Descripcion      + ' as ' + TStockItemDM._CCDepositoDescripcion     + ', ';
    Result := Result + TPedidoDeVentaDM.TableName     + '.' + TPedidoDeVentaDM._Numero      + ' as ' + TStockItemDM._CCPedidoDeVentaNumero     + ', ';
    Result := Result + TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._ItemNro + ' as ' + TStockItemDM._CCPedidoDeVentaItemNumero;
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' left join '+ TProductoDM.TableName      + ' on '+ TStockItemDM.TableName + '.' + TStockItemDM._ProductoID      +' = '+ TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName;
    Result := Result + ' left join '+ TFabricadoDM.TableName     + ' on '+ TProductoDM.TableName  + '.' + TProductoDM._FabricadoID      +' = '+ TFabricadoDM.TableName    + '.' + TFabricadoDM.ID_FieldName;
    Result := Result + ' left join '+ TMateriaPrimaDM.TableName  + ' on '+ TProductoDM.TableName  + '.' + TProductoDM._MateriaPrimaID   +' = '+ TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName;
    Result := Result + ' left join '+ TEstadoDeStockDM.TableName + ' on '+ TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID +' = '+ TEstadoDeStockDM.TableName+ '.' + TEstadoDeStockDM.ID_FieldName;
    Result := Result + ' left join '+ TDepositoDM.TableName      + ' on '+ TStockItemDM.TableName + '.' + TStockItemDM._DepositoID      +' = '+ TDepositoDM.TableName     + '.' + TDepositoDM.ID_FieldName;
    Result := Result + ' left join '+ TCunioDM.TableName         + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID         +' = '+ TCunioDM.TableName        + '.' + TCunioDM.ID_FieldName;
    Result := Result + ' left join '+ TArticuloDM.TableName      + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID      +' = '+ TArticuloDM.TableName     + '.' + TArticuloDM.ID_FieldName;
    Result := Result + ' left join '+ TTerminacionDM.TableName   + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._TerminacionID   +' = '+ TTerminacionDM.TableName  + '.' + TTerminacionDM.ID_FieldName;
    Result := Result + ' left join '+ TPedidoDeVentaItemDM.TableName + ' on '+ TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID     +' = '+ TPedidoDeVentaItemDM.TableName  + '.' + TPedidoDeVentaItemDM.ID_FieldName;
    Result := Result + ' left join '+ TPedidoDeVentaDM.TableName     + ' on '+ TPedidoDeVentaItemDM.TableName + '.' + TPedidoDeVentaItemDM._PedidoDeVentaID +' = '+ TPedidoDeVentaDM.TableName      + '.' + TPedidoDeVentaDM.ID_FieldName;
  end;
begin
  Case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TStockItemDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TStockItemDM.ID_FieldName : string;
begin
  Result := 'StockItemID';
end;

procedure TStockItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TStockItem(PDObject) do
    begin
      FloatField[_cantidad]                      := FCantidad;
      IDField[_DepositoID]                       := FDepositoID;
      IDField[_EstadoDeStockID]                  := FEstadoDeStockID;
      IDField[_ProductoID]                       := FProductoID;
      IDField[_PedidoDeVentaItemAsignadoID]      := FPedidoDeVentaItemAsignadoID;
      IntegerField[_UnidadesPorEmbalaje]         := FUnidadesPorEmbalaje;
    end;
end;

procedure TStockItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TStockItem(PDObject) do
    begin
      FCantidad                    := FloatField[_Cantidad];
      FDepositoID                  := IDField[_DepositoID];
      FEstadoDeStockID             := IDField[_EstadoDeStockID];
      FProductoID                  := IDField[_ProductoID];
      FPedidoDeVentaItemAsignadoID := IDField[_PedidoDeVentaItemAsignadoID];
      FUnidadesPorEmbalaje         := IntegerField[_UnidadesPorEmbalaje];
      // del create compuesto
      FCCDepositoDescripcion       := StringField[_CCDepositoDescripcion];
      FCCEstadoDeStockDescripcion  := StringField[_CCEstadoDescripcion];
      FCCFabricadoDescripcion      := StringField[_CCFabricadoDescripcion];
      FCCFabricadoCodigo           := StringField[_CCFabricadoCodigo];
      FCCFabricadoID               := IDField[_CCFabricadoID];
      FCCMateriaPrimaDescripcion   := StringField[_CCMateriaPrimaDescripcion];
      FCCMateriaPrimaCodigo        := StringField[_CCMateriaPrimaCodigo];
      FCCMateriaPrimaID            := IDField[_ProductoID ];
      FCCPedidoDeVentaNumero       := IntegerField[_CCPedidoDeVentaNumero];
      FCCPedidoDeVentaItemNumero   := IntegerField[_CCPedidoDeVentaItemNumero];
    end;
end;

 { TStockItemList }
function TStockItemList.GetActual : TStockItem;
begin
  Result := TStockItem(CurrentObject);
end;

function TStockItemList.CreateNewObject: TPDObject;
begin
  Result := TStockItem.Create;
end;

constructor TStockItemList.CreateAll;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll(False));
end;

constructor TStockItemList.CreateAllOrderedByDepositoYProducto;
  Function OrderByTxt : String;
  begin
    Result := TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ',' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID;
  end;
begin
  inherited Create(TStockItem, TStockItemDM.CreateAll( False, '', False, OrderByTxt ));
end;

constructor TStockItemList.CreateByEstadoAndDeposito(_DepositoID: TObjectID ; _EstadoID: TObjectID);
  Function WhereString : String;
  begin
    Result := TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + '=' + IntToStr( _DepositoID ) + ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + '=' + IntToStr( _EstadoID );
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByEstadoDepositoOrigenDestino(_depositoOrigen, _depositoDestino: Tdeposito; _estadoOrigen, _estadoDestino: TEstadoDeStock);
  function WhereString: string;
  begin
    Result := '(('   + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID      + ' = ' + IntToStr(_DepositoOrigen.ID) + ') AND (';
    Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoOrigen.ID)   + ')) OR ((';
    Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID      + ' = ' + IntToStr(_DepositoDestino.ID)+ ') AND (';
    Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoDestino.ID)  + '))';
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde,
  _DesarrolloHasta, _Cliente, _Marca, _Estado: String; _Depositos : TStringList; _Medida, _Orden: Integer; _CuniosEstandar, _DesarrollosEstandar: Boolean;
  _Producto : String ; _BuscarMateriaPrima : Boolean; _CategoriaDeMateriaPrimaCodigo: String );
// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9 _Marca,
// 10 _Medida

  function SQLMateriaPrima: String;
  var
    CondProducto, condMaterial, CondEstado, CondDeposito, CondCategoria : String;
    I : Integer;
  begin

    CondProducto := '';
    if (_Producto > '') then
      CondProducto := ' (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

    if (_CategoriaDeMateriaPrimaCodigo > '') then
      if (CondProducto > '') then
        CondProducto := CondProducto +  ' and (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( select ' +  TCategoriaDeMateriaPrimaDM.ID_FieldName + ' from ' +TCategoriaDeMateriaPrimaDM.TableName +
                     ' where (' + TCategoriaDeMateriaPrimaDM._Codigo + ' = ' + QuotedStr( _CategoriaDeMateriaPrimaCodigo ) + '))) '
      else
        CondProducto := ' (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._CategoriaDeMateriaPrimaID + ' in ( select ' +  TCategoriaDeMateriaPrimaDM.ID_FieldName + ' from ' +TCategoriaDeMateriaPrimaDM.TableName +
                     ' where (' + TCategoriaDeMateriaPrimaDM._Codigo + ' = ' + QuotedStr( _CategoriaDeMateriaPrimaCodigo ) + '))) ';

    CondMaterial := '';
    if (_Material > '') then
      CondMaterial := ' (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._MaterialID + ' in ( Select ' + TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM._Codigo + ' = ' + QuotedStr( _Material ) + '))';

    CondDeposito := '';
    if (_Depositos.Count > 0) then
      begin
        CondDeposito := ' (' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDeposito := CondDeposito + _Depositos[I] + ', ';
        CondDeposito := CondDeposito + '-1 ) )';
      end;

    CondEstado := '';
    if (_Estado > '') then
      begin
        CondEstado := ' (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName +
                     ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    Result := '';
    if (CondProducto > '') then
      Result := CondProducto;

    if (condMaterial > '') then
      if Result > '' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (CondEstado > '') then
      if Result > '' then
        Result := Result + ' and ' + CondEstado
      else
        Result := CondEstado;

    if (CondDeposito > '') then
      if Result > '' then
        Result := Result + ' and ' + CondDeposito
      else
        Result := CondDeposito;
  end;

  function sqlFabricados: String;
  var
    CondProducto, condFamilia, condArticulo, condMaterial, condTerminacion, condCRC, condCliente, CondMarca, CondCunio, CondCuniosEstandar, CondDesarrollosEstandar, condDesarrollo, CondMedida, CondEstado, CondDeposito : String;
    CL : TClienteList;
    ML : TMarcaList;
    I : Integer;
  begin
    condProducto := '';
    if (_Producto>'') then
      CondProducto := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

// 1
    condFamilia := '';
    if (_Familia>'') then
      condFamilia := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
      ' where ' + TArticuloDM._FamiliaDeArticuloID + ' in ( select '+ TFamiliaDeArticuloDM.ID_FieldName + ' from ' + TFamiliaDeArticuloDM.TableName +
      ' where ' + TFamiliaDeArticuloDM._codigo + ' = ' + QuotedStr( _Familia ) + '))) ';
// 2
    condArticulo := '';
    if (_Articulo>'') then
      begin
        condArticulo :=  ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName;
        if (pos('_', _Articulo)=0 ) and (pos('%', _Articulo)=0 ) then
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' = ' + QuotedStr( _Articulo ) + ')) '
        else
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' like ' + QuotedStr( _Articulo ) + ')) ';
      end;
// 3
    condMaterial := '';
    if (_Material>'') then
      condMaterial := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName + ' where ' + TArticuloDM._MaterialID + ' in ( select '+
      TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM._Codigo + ' = ' + QuotedStr( _Material ) + '))) ';
// 4
    condTerminacion := '';
    if (_Terminacion>'') then
      begin
        condTerminacion := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' in ( select ' + TTerminacionDM.ID_FieldName + ' from ' +TTerminacionDM.TableName;
        condTerminacion := condTerminacion + ' where ' + TTerminacionDM._codigo + ' = ' + QuotedStr( _Terminacion ) + ')) '
      end;
// 5
    condCRC := '';
    if (_CRC>'') then
      condCRC := ' (('+ TFabricadoDM._Crc +' > 0) and (' + TFabricadoDM._Codigo + ' like ' + QuotedStr( '%#'+_CRC )+')) ';

// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
    CondCunio := '';
    if (_CunioDesde>'') then
      begin
        CondCunio := CondCunio + '('+ TCunioDM.TableName+'.'+TCunioDM._codigo;
        if (_CunioHasta>'') then
          CondCunio := CondCunio + ' >= ' + QuotedStr( _CunioDesde ) + ') and ('+ TCunioDM.TableName+'.'+TCunioDM._codigo + ' <= ' + QuotedStr( _CunioHasta ) +') '
        else
          CondCunio := CondCunio + ' = ' + QuotedStr( _CunioDesde ) + ') ';
      end;

    if _CuniosEstandar then
      begin
        CondCuniosEstandar := '('+ TCunioDM.TableName+ '.'+ TCunioDM._EsCunioEstandar + '=1) ';
        if CondCunio>'' then
          CondCunio := CondCuniosEstandar + ' and ' + CondCunio
        else
          CondCunio := CondCuniosEstandar;
      end;

// 7 _DesarrolloDesde, _DesarrolloHasta,
    CondDesarrollosEstandar := '';
    if _DesarrollosEstandar then
      CondDesarrollosEstandar := ' ('+ TDesarrolloDM.TableName+ '.'+ TDesarrolloDM._esEstandar + '=1) ';

    condDesarrollo := '';
    if (_DesarrolloDesde>'') then
      begin
        condDesarrollo := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' ;
        if (CondDesarrollosEstandar > '') then
          condDesarrollo :=  condDesarrollo + CondDesarrollosEstandar + ' and ';
        condDesarrollo :=  condDesarrollo + ' (' + TDesarrolloDM._codigo;
        if (_DesarrolloHasta>'') then
          condDesarrollo := condDesarrollo + ' Between ' + QuotedStr( _DesarrolloDesde ) + ' and '+ QuotedStr( _DesarrolloHasta ) +'))) '
        else
          condDesarrollo := condDesarrollo + ' = ' + QuotedStr( _DesarrolloDesde ) + '))) ';
      end
    else
      if (CondDesarrollosEstandar>'') then
        condDesarrollo := ' (' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' + CondDesarrollosEstandar + '))';

// 8
    condCliente := '';
    if (_Cliente>'') then
      try
        CL := TClienteList.CreateByCodigo(_Cliente, False );
        CL.First;

        CondCliente := '( ' + TFabricadoDM.TableName + '.' + TFabricadoDM._cunioID + ' in ' + ' (Select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.Tablename + ' Where ' + TCunioDM._MarcaID + ' in (';
        CondCliente := CondCliente + 'Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(Cl.actual.ID) + ') or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(Cl.actual.ID) + ' )) or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(Cl.actual.ID) + ' )))))';

        CondCLiente := CondCliente + ' or ' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' in ( Select ' +
        TPedidoDeVentaItemDM.ID_FieldName + ' from ' + TPedidoDeVentaItemDM.TableName + ' where ' + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( Select ' +
        TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName + ' where ' + TPedidoDeVentaDM._ClienteID + ' = ' + IntToStr(Cl.actual.ID) + '))'

      finally
        FreeAndNil( CL);
      end;

// 9 _marca
    CondMarca := '';
    if (_Marca>'') then
      Try
        ML := TMarcaList.CreateByDescripcion(_Marca, TMarcaDM._Descripcion ,False);
        ML.First;
        CondMarca := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID + ' IN (SELECT '+ TCunioDM.ID_FieldName + ' from '+ TCunioDM.TableName + ' WHERE (' ;
        CondMarca := CondMarca + TCunioDM._MarcaID +' = '+ IntToStr( ML.actual.ID)+ '))) ' ;
      finally
        FreeAndNil(ML);
      end;

// 10 _Medida
    CondMedida := '';
    if (_Medida>0) then
      begin
        CondMedida := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
                     ' where (' + TArticuloDM._medida + ' = ' + IntToStr( _Medida ) + '))) ';
      end;

    CondDeposito := '';
    if (_Depositos.Count > 0) then
      begin
        CondDeposito := ' (' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' in (';
        for I := 0 to _Depositos.count - 1 do
          CondDeposito := CondDeposito + _Depositos[I] + ', ';
        CondDeposito := CondDeposito + '-1 ) )';
      end;

    CondEstado := '';
    if (_Estado>'') then
      begin
        CondEstado := ' (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName +
                     ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9_Marca:
// 10_Medida
//11_Producto

    result := '';
    if (CondProducto>'') then
      Result := CondProducto;

    if (condFamilia>'') then
      Result := condFamilia;

    if (condArticulo>'') then
      if result>'' then
        Result := Result + ' and ' + condArticulo
      else
        Result := condArticulo;

    if (condMaterial>'') then
      if result>'' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (condTerminacion>'') then
      if result>'' then
        Result := Result + ' and ' + condTerminacion
      else
        Result := condTerminacion;

    if (condCRC>'') then
      if result>'' then
        Result := Result + ' and ' + condCRC
      else
        Result := condCRC;

    if (CondCunio>'') then
      if result>'' then
        Result := Result + ' and ' + CondCunio
      else
        Result := CondCunio;

    if (CondDesarrollo>'') then
      if result>'' then
        Result := Result + ' and ' + CondDesarrollo
      else
        Result := CondDesarrollo;

    if (CondCliente>'') then
      if result>'' then
        Result := Result + ' and ' + CondCliente
      else
        Result := CondCliente;

    if (CondMarca>'') then
      if result>'' then
        Result := Result + ' and ' + CondMarca
      else
        Result := CondMarca;

    if (CondMedida>'') then
      if result>'' then
        Result := Result + ' and ' + CondMedida
      else
        Result := CondMedida;

    if (CondDeposito>'') then
      if result>'' then
        Result := Result + ' and ' + CondDeposito
      else
        Result := CondDeposito;

    if (CondEstado>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstado
      else
        Result := CondEstado;
  end;

  function WhereString: String;
  var
    CondicionDeFiltrado : String;
  begin
    if not _BuscarMateriaPrima then
      CondicionDeFiltrado := SQLFabricados
    else
      CondicionDeFiltrado  :=  SQLMateriaPrima;

    if (CondicionDeFiltrado = '') then
      Result := ''
    else
      begin
        result := TStockItemDM.TableName  + '.' + TStockItemDM._ProductoID + ' in (';
        result := result + 'Select ' + TFabricadoDM._ProductoID + ' from '+ TFabricadoDM.TableName + ' where ' + CondicionDeFiltrado  + ')';

        result := result + ' or ' +  TStockItemDM.TableName  + '.' + TStockItemDM._ProductoID + ' in (';
        result := result + 'Select ' + TMateriaPrimaDM._ProductoID + ' from '+ TMateriaPrimaDM.TableName + ' where ' + CondicionDeFiltrado  + ')';
      end;
  end;
  Function OrderBy : String;
  begin
    Result := '';
    case _Orden of
      0: Result := TArticuloDM.TableName    + '.' + TArticuloDM._Codigo    + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TCunioDM.TableName     + '.' + TCunioDM._Codigo  + ', ' + TFabricadoDM.TableName + '.' + TFabricadoDM._Crc;
      1: Result := TCunioDM.TableName       + '.' + TCunioDM._Codigo       + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TFabricadoDM.TableName + '.' + TFabricadoDM._CRC + ', ' + TArticuloDM.TableName  + '.' + TArticuloDM._Codigo;
      2: Result := TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TFabricadoDM.TableName   + '.' + TFabricadoDM._CRC      + ', ' + TCunioDM.TableName     + '.' + TCunioDM._Codigo  + ', ' + TArticuloDM.TableName  + '.' + TArticuloDM._Codigo;
    end;
  end;
begin
  inherited Create(TStockItem, TStockItemDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TStockItemList.CreateByCodigoEstadoAndDeposito(_Cod: String ; _EstadoID : TObjectID; _DepositoID : TObjectID; _EsMateriaPrima, _EsFabricado : Boolean);
  function SQLTxt : String;
  begin
    if _EsFabricado then
      Result := TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' In ( Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' Where ' + TFabricadoDM._Codigo + ' = ' + QuotedStr( _Cod ) + ')'
    else if _EsMateriaPrima then
      Result := TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' In ( Select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName + ' Where ' + TMateriaPrimaDM._Codigo + ' = ' + QuotedStr( _Cod ) + ')';
    if (_DepositoID <> NullID) then
      Result := Result + ' And ' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + '=' + IntToStr( _DepositoID );
    if (_EstadoID <> NullID) then
      Result := Result + ' And ' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + '=' + IntToStr( _EstadoID );
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, SQLTxt ));
end;

constructor TStockItemList.CreateByCodigoLikeEstadoAndDeposito(_Cod : String; _EstadoID : TObjectID; _DepositoID : TObjectID; _EsMateriaPrima, _EsFabricado : Boolean);
  function WhereString : String;
  begin
      if _EsFabricado then
        Result := TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' In ( Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' Where ' + TFabricadoDM._Codigo + ' like ' + QuotedStr( _Cod + '%' ) + ')'
      else if _EsMateriaPrima then
        Result := TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' In ( Select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName + ' Where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr( _Cod + '%' ) + ')';
      if (_DepositoID <> NullID) then
        Result := Result + ' And ' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + '=' + IntToStr( _DepositoID );
      if (_EstadoID <> NullID) then
        Result := Result + ' And ' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + '=' + IntToStr( _EstadoID );
    End;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByDeposito(_D: TDeposito);
  function WhereString : String;
  begin
    Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + '=' + IntToStr( _D.ID ) + ')';
  End;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByProductoAsignadoAItems(_ProductoID: TObjectID; _SoloAsignado : Boolean = False);
  function WhereString: String;
  var
    ESL : TEstadoDeStockList;
  begin
    Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID+ ' = ' + IntToStr(_ProductoID) + ' ) and (' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' <> '+ IntToStr(NullID) + ')';

    if _SoloAsignado then
      try
        ESL := TEstadoDeStockList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDeStockAsignado, False);
        ESL.First;
        Result := Result + ' and (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(ESL.Actual.ID) + ')';
      finally
        FreeAndNil( ESL );
      end;
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;


constructor TStockItemList.CreateByProductoEnTransito(_ProductoID: TObjectID);
  function WhereString: String;
  var
    ESL : TEstadoDeStockList;
  begin
    Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID+ ' = ' + IntToStr(_ProductoID) + ' ) and (' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' <> '+ IntToStr(NullID) + ')';
    try
      ESL := TEstadoDeStockList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDeStockEnTransito, False);
      ESL.First;
      Result := Result + ' and (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(ESL.Actual.ID) + ')';
    finally
      FreeAndNil( ESL );
    end;
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByProductoEstadoDepositoItemAsignadoID(_ProductoID: TobjectID; _EstadoID: TobjectID; _DepositoID: TobjectID; _PedidodeVentaItemAsignadoID: TObjectID);
  function WhereString: String;
  Begin
    if (_ProductoID <> NullID) then
      Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' = '+ IntToStr (_ProductoID) + ')';
    if (_EstadoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND ';
        Result := Result + '('+ TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoID) + ')';
      end;

    if (_DepositoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND ';
        Result := Result + '('+ TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' = ' + IntToStr(_DepositoID) + ')';
      end;

    If (_PedidodeVentaItemAsignadoID <> NullID) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND ';
        Result := Result + '('+TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' = ' + IntToStr(_PedidodeVentaItemAsignadoID) + ')';
      end;
  End;
begin
  // los parametros permiten nil o Nullid
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByProductoEstadoDepositoSinAsignar(_ProductoID, _EstadoID, _DepositoID: TobjectID );
  function WhereString: String;
  Begin
    if (_ProductoID <> NullID) then
      Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' = '+ IntToStr (_ProductoID) + ')';

    if (_EstadoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoID) + ')';
      end;

    if (_DepositoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' = ' + IntToStr(_DepositoID) + ')';
      end;

    if (Result > '' ) then
      Result := Result + ' AND (';
    Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' is NULL )';
  End;
begin
  // los parametros permiten nil o Nullid
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByProductoLibre(_P: TProducto);
  Function WhereString : String;
  begin
    Result := 'StockItems.ProductoID = ' + IntToStr(_P.ID) + ' and StockItems.PedidoDeVentaItemAsignadoID is null and StockItems.EstadoDeStockID in ( Select EstadoDeStockID from EstadosDeStock where Codigo = ' + QuotedStr('A') + ')'
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByProductoLibreAndDeposito(_P: TProducto; _D: TDeposito);
  Function WhereString : String;
  begin
    Result := 'StockItems.ProductoID = ' + IntToStr(_P.ID) + ' and StockItems.PedidoDeVentaItemAsignadoID is null and StockItems.EstadoDeStockID in ( Select EstadoDeStockID from EstadosDeStock where Codigo = ' + QuotedStr('A') + ')';
    Result := Result + ' and StockItems.DepositoID = ' + IntToStr(_D.ID);
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByProductoPreparado(_ProductoID: TObjectID);
  function WhereString: String;
  var
    ESL : TEstadoDeStockList;
  begin
    Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID+ ' = ' + IntToStr(_ProductoID) + ' ) and (' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' <> '+ IntToStr(NullID) + ')';
    try
      ESL := TEstadoDeStockList.CreateByCodigo(Aplicacion.ConstantAllocator.CodigoEstadoDeStockPreparado, False);
      ESL.First;
      Result := Result + ' and (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(ESL.Actual.ID) + ')';
    finally
      FreeAndNil( ESL );
    end;
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll( False, WhereString ));
end;

constructor TStockItemList.CreateByProducto(_P: TProducto);
begin
  CreateByProductoEstadoDepositoItemAsignadoID(_P.ID);
end;

constructor TStockItemList.CreateByCodigoLikeEstadoDepositoItemAsignadoID(_Cod : String; _EstadoID, _DepositoID, _PedidodeVentaItemAsignadoID: TObjectID);
  function WhereString: String;
  Begin
    Result := '((' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName;
    Result := Result + ' where ' + TFabricadoDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + '))';
    Result := Result + ' or ' ;
    Result := '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName;
    Result := Result + ' where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + ')))';


    if (_EstadoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoID)+')' ;
      end;

    if (_DepositoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' = ' + IntToStr(_DepositoID)+')' ;
      end;

    If (_PedidodeVentaItemAsignadoID <> NullID) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' = ' + IntToStr(_PedidodeVentaItemAsignadoID)+')';
      end;
  End;
begin
  // los parametros permiten nil o Nullid
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByCodigoLikeEstadoDepositoSinAsignar(_Cod: String; _EstadoID, _DepositoID: TobjectID);
  function WhereString: String;
  Begin
    Result := '( (' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName;
    Result := Result + ' where ' + TFabricadoDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + '))';
    Result := Result + ' or ' ;
    Result := Result + '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName;
    Result := Result + ' where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + '))) ';

    if (_EstadoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_EstadoID)+')' ;
      end;

    if (_DepositoID <> NullID ) then
      begin
        if (Result > '' ) then
          Result := Result + ' AND (';
        Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' = ' + IntToStr(_DepositoID)+')' ;
      end;

    if (Result > '' ) then
      Result := Result + ' AND (';
    Result := Result + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' = ' + IntToStr(NullID);
    Result := Result + ' or ' +  TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' is NULL )';
  End;
begin
  // los parametros permiten nil o Nullid
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByCodigoLikeSemielaborado(_Cod: String);
  Function WhereString : String;
  begin
    Result := '( (' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName;
    Result := Result + ' where ' + TFabricadoDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + '))';
    Result := Result + ' or ' ;
    Result := Result + '(' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (Select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName;
    Result := Result + ' where ' + TMateriaPrimaDM._Codigo + ' like ' + QuotedStr(_Cod + '%' ) + '))) ';

    Result := Result + ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' in (Select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName + ' where ' + TDepositoDM._EsDepositoSemielaborado +' = 1)';
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;

constructor TStockItemList.CreateByProductosEstadoDepositoItemAsignadoID(_productos : TProductoList; _estado : TEstadoDeStock; _deposito : Tdeposito;  _PedidoDeVentaItemAsignadoID : TObjectID);
  function WhereString: string;
  begin
    _Productos.First;
    Result := '('+ TStockItemDM.TableName + '.' + TStockItemDM._productoID + ' In (-1';
    Repeat
      Result := Result + ',' + IntToStr (_Productos.Actual.ID);
      _Productos.Next;
    Until _productos.IsLast;
    Result := Result+ '))';

    if Assigned(_Estado) then
      Result := Result + ' AND (' + TStockItemDM.TableName + '.' + TStockItemDM._EstadoDeStockID + ' = ' + IntToStr(_Estado.ID) + ')';
    if Assigned(_Deposito) then
      Result := Result + ' AND (' + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' = ' + IntToStr(_Deposito.ID) + ')';
    If (_PedidodeVentaItemAsignadoID <> NullID) then
      Result := Result + ' AND (' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' = ' + IntToStr(_PedidodeVentaItemAsignadoID) + ')';
  end;
begin
  inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString));
end;


constructor TStockItemList.CreateByProductosYPedidoDeVentaItemAsignadoID(_Productos: TProductoList; _PedidoDeVentaItemAsignadoID: TObjectID);
begin
  CreateByProductosEstadoDepositoItemAsignadoID(_Productos, Nil, Nil, _PedidoDeVentaItemAsignadoID);
end;

constructor TStockItemList.CreateByPVItem(_PedidoDeVentaItemAsignadoID: TObjectID);
begin
  CreateByProductoEstadoDepositoItemAsignadoID(NullID,NullID,NullID,_PedidoDeVentaItemAsignadoID);
end;

constructor TStockItemList.CreateByPVItemAndEstado(_PedidoDeVentaItemAsignadoID, _EstadoDeStockID: TObjectID);
begin
  CreateByProductoEstadoDepositoItemAsignadoID(NullID,_EstadoDeStockID,NullID,_PedidoDeVentaItemAsignadoID);
end;

constructor TStockItemList.CreateEmpty;
begin
  inherited Create (TStockItem, TStockItemDM.CreateEmpty);
end;

constructor TStockItemList.CreateAllByAsignados;
  function WhereString: string;
  begin
    Result := 'not ' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + ' is null';
  end;

  Function OrderString : String;
  begin
    Result := TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ',' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID;
  end;
begin
  inherited Create(TStockItem, TStockItemDM.CreateAll( False, WhereString, False, OrderString ));
end;

constructor TStockItemList.CreateAllOrderedByDepositoYProducto( _Depositos: TDepositoList; _Fabricados, _MateriasPrimas : Boolean; _CodigoArticuloDesde,_CodigoArticuloHasta : string; _PedidodeVentaItemAsignadoID : TObjectID  );
var
  TextoArticuloDes       : string;
  TextoArticuloHas       : string;
  TextoArticulo          : string;
  TextoPVItemDest        : string;
  TiposDeProd            : string;

  function ArmarInDepositos : string;
  begin
    Result := '(-1';
    _Depositos.First;
    if _Depositos.Count>0 then
      repeat
        Result := Result +','+IntToStr(_Depositos.Actual.ID);
        _Depositos.Next;
      until _Depositos.IsLast;
      Result := Result +')';
  end;
  Procedure LlenarVariables;
  begin
  if (_CodigoArticuloDesde <> '') and (_CodigoArticuloHasta <> '') then
    TextoArticulo := ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ' where ' + TFabricadoDM._articuloID +' in (select '+TFabricadoDM._articuloID+' from ' + TArticuloDM.TableName + ' where '+ TArticuloDM._codigo+ '>=' + quotedstr(_CodigoArticuloDesde) + ' and ' + TArticuloDM._codigo + '<='+quotedstr(_CodigoArticuloHasta)+'))'
  else
    begin
         TextoArticuloDes := '';
         TextoArticuloHas := '';
        if (_CodigoArticuloDesde <> '') then
        TextoArticuloDes := ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (select ' + TFabricadoDM._ProductoID + ' from '+TFabricadoDM.TableName + ' where '+ TFabricadoDM._articuloID + ' in (select ' + TFabricadoDM._articuloID + ' from ' + TArticuloDM.TableName + ' where ' + TArticuloDM._codigo + '>=' + QuotedStr(_CodigoArticuloDesde) + '))';
        if (_CodigoArticuloHasta <> '') then
        TextoArticuloHas := ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (select ' + TFabricadoDM._ProductoID + ' from '+TFabricadoDM.TableName + ' where '+ TFabricadoDM._articuloID + ' in (select ' + TFabricadoDM._articuloID + ' from ' + TArticuloDM.TableName + ' where '+ TArticuloDM._codigo + '<=' + QuotedStr(_CodigoArticuloHasta)+'))';
        TextoArticulo := TextoArticuloDes + TextoArticuloHas;
      end;
    TextoPVItemDest := '';
    if ( _PedidodeVentaItemAsignadoID <> NullID)  then
      TextoPVItemDest := ' and ' + TStockItemDM.TableName + '.' + TStockItemDM._PedidoDeVentaItemAsignadoID + '=' + IntToStr(_PedidodeVentaItemAsignadoID);

    TiposDeProd := '';
  if _MateriasPrimas and not _Fabricados then
      TiposDeProd := TStockItemDM.TableName + '.' + TStockItemDm._ProductoID + ' in (select ' + TMateriaPrimaDM._ProductoID + ' from ' + TMateriaPrimaDM.TableName + ')'
  else
    if not _MateriasPrimas and _Fabricados then
      TiposDeProd := TStockItemDM.TableName + '.' + TStockItemDM._ProductoID + ' in (select ' + TFabricadoDM._ProductoID + ' from ' + TFabricadoDM.TableName + ')';
    if (TiposDeProd <> '' ) then
      TiposDeProd := TiposDeProd + ' and ';
  end;
  Function WhereString : String;
  begin
    LlenarVariables;
    Result := TiposDeProd + TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ' in ' + ArmarInDepositos + TextoArticulo + TextoPVItemDest;
  end;
  Function Orderby  : String;
  begin
    Result := TStockItemDM.TableName + '.' + TStockItemDM._DepositoID + ',' + TStockItemDM.TableName + '.' + TStockItemDM._ProductoID;
  end;
begin
    inherited Create(TStockItem,TStockItemDM.CreateAll(False, WhereString , False, OrderBy));
end;

{ TMovimientoDeStock }
constructor TMovimientoDeStock.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TMovimientoDeStockDM);
  FCantidad := null;
  FDocumentoNumero := null;
  FItemNumero := null;
  FFechaHora := null;
  FPedidoDeVentaItemAsignadoID := NullID;
end;

function TMovimientoDeStock.GetDepositoDestino: TDeposito;
begin
  if not assigned(FDepositoDestino) then
    GetObject(TDeposito, FDepositoDestino, DepositoDestinoID);
  Result := TDeposito(FDepositoDestino);
end;

function TMovimientoDeStock.GetDepositoOrigen: TDeposito;
begin
  if not assigned(FDepositoOrigen) then
    GetObject(TDeposito, FDepositoOrigen, DepositoOrigenID);

  Result := TDeposito(FDepositoOrigen);
end;

function TMovimientoDeStock.GetEstadoDeDestino: TEstadoDeStock;
begin
  if not assigned(FEstadoDeDestino) then
    GetObject(TEstadoDeStock, FEstadoDeDestino, EstadoDeDestinoID);

  Result := TEstadoDeStock(FEstadoDeDestino);
end;

function TMovimientoDeStock.GetEstadoDeOrigen: TEstadoDeStock;
begin
  if not assigned(FEstadoDeOrigen) then
    GetObject(TEstadoDeStock, FEstadoDeOrigen, EstadoDeOrigenID);

  Result := TEstadoDeStock(FEstadoDeOrigen);
end;

function TMovimientoDeStock.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, ProductoID);

  Result := TProducto(FProducto);
end;

function TMovimientoDeStock.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, TipoDeformularioID);

  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

function TMovimientoDeStock.GetUsuario: TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);

  Result := TUsuario(FUsuario);
end;

procedure TMovimientoDeStock.SetDepositoDestinoID(const Value: TObjectID);
begin
  if (Value <> FDepositoDestinoID) and assigned(FDepositoDestino) then
    FreeAndNil(FDepositoDestino);

  FDepositoDestinoID := Value;
end;

procedure TMovimientoDeStock.SetDepositoOrigenID(const Value: TObjectID);
begin
  if (Value <> FDepositoOrigenID) and assigned(FDepositoOrigen) then
    FreeAndNil(FDepositoOrigen);
  FDepositoOrigenID := Value;
end;

procedure TMovimientoDeStock.SetEstadoDeDestinoID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeDestinoID) and assigned(FEstadoDeDestino) then
    FreeAndNil(FEstadoDeDestino);
  FEstadoDeDestinoID := Value;
end;

procedure TMovimientoDeStock.SetEstadoDeOrigenID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeOrigenID) and assigned(FEstadoDeOrigen) then
    FreeAndNil(FEstadoDeOrigen);
  FEstadoDeOrigenID := Value;
end;

procedure TMovimientoDeStock.SetProductoID(const Value: TObjectID);
begin
  if (Value <> FProductoID) and assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

procedure TMovimientoDeStock.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value <> FTipoDeformularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeformularioID := Value;
end;

procedure TMovimientoDeStock.SetUsuarioID(const Value: TObjectID);
begin
  if (Value <> FUsuarioID) and assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;

{ TMovimientoDeStockDM }
class function TMovimientoDeStockDM.TableName: string;
begin
  Result := 'movimientosdestock';
end;

class function TMovimientoDeStockDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result :=          TMovimientoDeStockDM.TableName + '.*, ';
    Result := Result + TProductoDM.TableName       + '.' + TProductoDM._FabricadoID      + ' as ' + TMovimientoDeStockDM._CCFabricadoID               + ', ';
    Result := Result + TProductoDM.TableName       + '.' + TProductoDM._MateriaPrimaID   + ' as ' + TMovimientoDeStockDM._CCMateriaPrimaID            + ', ';
    Result := Result + TFabricadoDM.TableName      + '.' + TFabricadoDM._Codigo          + ' as ' + TMovimientoDeStockDM._CCFabricadoCodigo           + ', ';
    Result := Result + TFabricadoDM.TableName      + '.' + TFabricadoDM._Descripcion     + ' as ' + TMovimientoDeStockDM._CCFabricadoDescripcion      + ', ';
    Result := Result + TMateriaPrimaDM.TableName   + '.' + TMateriaPrimaDM._Codigo       + ' as ' + TMovimientoDeStockDM._CCMateriaPrimaCodigo        + ', ';
    Result := Result + TMateriaPrimaDM.TableName   + '.' + TMateriaPrimaDM._Descripcion  + ' as ' + TMovimientoDeStockDM._CCMateriaPrimaDescripcion   + ', ';
    Result := Result + 'ESTO.' + TEstadoDeStockDM._Descripcion                           + ' as ' + TMovimientoDeStockDM._CCEstadoOrigenDescripcion   + ', ';
    Result := Result + 'ESTD.' + TEstadoDeStockDM._Descripcion                           + ' as ' + TMovimientoDeStockDM._CCEstadoDestinoDescripcion  + ', ';
    Result := Result + 'DO.'   + TDepositoDM._Descripcion                                + ' as ' + TMovimientoDeStockDM._CCDepositoOrigenDescripcion + ', ';
    Result := Result + 'DD.'   + TDepositoDM._Descripcion                                + ' as ' + TMovimientoDeStockDM._CCDepositoDestinoDescripcion;
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' left join '+ TProductoDM.TableName      + ' on '+ TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._ProductoID + ' = '+ TProductoDM.TableName     + '.' + TProductoDM.ID_FieldName;
    Result := Result + ' left join '+ TFabricadoDM.TableName     + ' on '+ TProductoDM.TableName  + '.' + TProductoDM._FabricadoID      +' = '+ TFabricadoDM.TableName    + '.' + TFabricadoDM.ID_FieldName;
    Result := Result + ' left join '+ TMateriaPrimaDM.TableName  + ' on '+ TProductoDM.TableName  + '.' + TProductoDM._MateriaPrimaID   +' = '+ TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName;
    Result := Result + ' left join '+ TEstadoDeStockDM.TableName + ' ESTO on '+ TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoOrigenID    +' = ESTO.' + TEstadoDeStockDM.ID_FieldName;
    Result := Result + ' left join '+ TEstadoDeStockDM.TableName + ' ESTD on '+ TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoDestinoID   +' = ESTD.' + TEstadoDeStockDM.ID_FieldName;
    Result := Result + ' left join '+ TDepositoDM.TableName      + ' DO on '  + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID  +' = DO.'   + TDepositoDM.ID_FieldName;
    Result := Result + ' left join '+ TDepositoDM.TableName      + ' DD on '  + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoDestinoID +' = DD.'   + TDepositoDM.ID_FieldName;
    Result := Result + ' left join '+ TCunioDM.TableName         + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID         +' = '+ TCunioDM.TableName        + '.' + TCunioDM.ID_FieldName;
    Result := Result + ' left join '+ TArticuloDM.TableName      + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID      +' = '+ TArticuloDM.TableName     + '.' + TArticuloDM.ID_FieldName;
    Result := Result + ' left join '+ TTerminacionDM.TableName   + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._TerminacionID   +' = '+ TTerminacionDM.TableName  + '.' + TTerminacionDM.ID_FieldName;
  end;
begin
  Case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TMovimientoDeStockDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TMovimientoDeStockDM.ID_FieldName: string;
begin
  Result := 'MovimientoDeStockID';
end;

procedure TMovimientoDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TMovimientoDeStock(PDObject) do
    begin
      FloatField[_Cantidad]                 := FCantidad;
      IDField[_depositoDestinoID]           := FDepositoDestinoID;
      IDField[_depositoOrigenID]            := FDepositoOrigenID;
      StringField[_documentoNumero]         := FDocumentoNumero;
      IntegerField[_ItemNumero]             := FItemNumero;
      IDField[_EstadoDestinoID]             := FEstadoDeDestinoID;
      IDField[_EstadoOrigenID]              := FEstadoDeOrigenID;
      DateTimeField[_FechaHora]             := FFechaHora;
      IDField[_productoID]                  := FProductoID;
      IDField[_TipoDeformularioID]          := FTipoDeformularioID;
      IDField[_UsuarioID]                   := FUsuarioID;
      IDField[_PedidoDeVentaItemAsignadoID] := FPedidoDeVentaItemAsignadoID;
    end;
end;

procedure TMovimientoDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TMovimientoDeStock(PDObject) do
    begin
      FCantidad                    := FloatField[_Cantidad];
      FDepositoDestinoID           := IDField[_depositoDestinoID];
      FDepositoOrigenID            := IDField[_depositoOrigenID];
      FDocumentoNumero             := StringField[_documentoNumero];
      FItemNumero                  := IntegerField[_ItemNumero];
      FEstadoDeDestinoID           := IDField[_EstadoDestinoID];
      FEstadoDeOrigenID            := IDField[_EstadoOrigenID];
      FFechaHora                   := DateTimeField[_FechaHora];
      FProductoID                  := IDField[_productoID];
      FTipoDeformularioID          := IDField[_TipoDeformularioID];
      FUsuarioID                   := IDField[_UsuarioID];
      FPedidoDeVentaItemAsignadoID := IDField[_PedidoDeVentaItemAsignadoID];
      //Del Create Compuesto
      FCCDepositoOrigenDescripcion := StringField[_CCDepositoOrigenDescripcion];
      FCCDepositoDestinoDescripcion:= StringField[_CCDepositoDestinoDescripcion];
      FCCEstadoOrigenDescripcion   := StringField[_CCEstadoOrigenDescripcion];
      FCCEstadoDestinoDescripcion  := StringField[_CCEstadoDestinoDescripcion];
      FCCFabricadoDescripcion      := StringField[_CCFabricadoDescripcion];
      FCCFabricadoCodigo           := StringField[_CCFabricadoCodigo];
      FCCFabricadoID               := IDField[_CCFabricadoID];
      FCCMateriaPrimaDescripcion   := StringField[_CCMateriaPrimaDescripcion];
      FCCMateriaPrimaCodigo        := StringField[_CCMateriaPrimaCodigo];
      FCCMateriaPrimaID            := IDField[_ProductoID ];
    end;
end;

{ TMovimientoDeStockList }
function TMovimientoDeStockList.GetActual: TMovimientoDeStock;
begin
  Result := TMovimientoDeStock(CurrentObject);
end;

function TMovimientoDeStockList.CreateNewObject: TPDObject;
begin
  Result := TMovimientoDeStock.Create;
end;

constructor TMovimientoDeStockList.CreateAll;
begin
  inherited Create(TMovimientoDeStock, TMovimientoDeStockDM.CreateAll(False));
end;

constructor TMovimientoDeStockList.CreateByDepositoOrigenODestino(_D : TDeposito);
  Function WhereString : String;
  begin
    Result := '(' + TMovimientoDeStockDM._DepositoOrigenID + ' = ' + IntToStr(_D.ID) + ' ) or ( ' + TMovimientoDeStockDM._DepositoDestinoID + ' = ' + IntToStr(_D.ID) + ' )'
  end;
begin
  inherited Create(TMovimientoDeStock, TMovimientoDeStockDM.CreateAll(False, WhereString, False));
end;

constructor TMovimientoDeStockList.CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde,
  _DesarrolloHasta, _Cliente, _Marca, _Deposito, _Estado : String; _Medida, _Orden: Integer; _CuniosEstandar,
  _DesarrollosEstandar: Boolean; _Producto : String);
// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9 _Marca,
// 10 _Medida

  function sqlFabricados: String;
  var
    CondProducto,condFamilia, condArticulo, condMaterial, condTerminacion, condCRC, condCliente, CondMarca, CondCunio, CondCuniosEstandar,
    CondDesarrollosEstandar, condDesarrollo, CondMedida, CondEstadoOrigen, CondEstadoDestino, CondDepositoOrigen, CondDepositoDestino : String;
    CL : TClienteList;
    ML : TMarcaList;
  begin
// 1
    condProducto := '';
    if (_Producto>'') then
      CondProducto := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

    condFamilia := '';
    if (_Familia>'') then
      condFamilia := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
      ' where ' + TArticuloDM._FamiliaDeArticuloID + ' in ( select '+ TFamiliaDeArticuloDM.ID_FieldName + ' from ' + TFamiliaDeArticuloDM.TableName +
      ' where ' + TFamiliaDeArticuloDM._codigo + ' = ' + QuotedStr( _Familia ) + '))) ';
// 2
    condArticulo := '';
    if (_Articulo>'') then
      begin
        condArticulo :=  ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName;
        if (pos('_', _Articulo)=0 ) and (pos('%', _Articulo)=0 ) then
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' = ' + QuotedStr( _Articulo ) + ')) '
        else
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' like ' + QuotedStr( _Articulo ) + ')) ';
      end;
// 3
    condMaterial := '';
    if (_Material>'') then
      condMaterial := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName + ' where ' + TArticuloDM._MaterialID + ' in ( select '+
      TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM._Codigo + ' = ' + QuotedStr( _Material ) + '))) ';
// 4
    condTerminacion := '';
    if (_Terminacion>'') then
      begin
        condTerminacion := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' in ( select ' + TTerminacionDM.ID_FieldName + ' from ' +TTerminacionDM.TableName;
        condTerminacion := condTerminacion + ' where ' + TTerminacionDM._codigo + ' = ' + QuotedStr( _Terminacion ) + ')) '
      end;
// 5
    condCRC := '';
    if (_CRC>'') then
      condCRC := ' (('+ TFabricadoDM._Crc +' > 0) and (' + TFabricadoDM._Codigo + ' like ' + QuotedStr( '%#'+_CRC )+')) ';

// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
    CondCunio := '';
    if (_CunioDesde>'') then
      begin
        CondCunio := CondCunio + '('+ TCunioDM.TableName+'.'+TCunioDM._codigo;
        if (_CunioHasta>'') then
          CondCunio := CondCunio + ' >= ' + QuotedStr( _CunioDesde ) + ') and ('+ TCunioDM.TableName+'.'+TCunioDM._codigo + ' <= ' + QuotedStr( _CunioHasta ) +') '
        else
          CondCunio := CondCunio + ' = ' + QuotedStr( _CunioDesde ) + ') ';
      end;

    if _CuniosEstandar then
      begin
        CondCuniosEstandar := '('+ TCunioDM.TableName+ '.'+ TCunioDM._EsCunioEstandar + '=1) ';
        if CondCunio>'' then
          CondCunio := CondCuniosEstandar + ' and ' + CondCunio
        else
          CondCunio := CondCuniosEstandar;
      end;

// 7 _DesarrolloDesde, _DesarrolloHasta,
    CondDesarrollosEstandar := '';
    if _DesarrollosEstandar then
      CondDesarrollosEstandar := ' ('+ TDesarrolloDM.TableName+ '.'+ TDesarrolloDM._esEstandar + '=1) ';

    condDesarrollo := '';
    if (_DesarrolloDesde>'') then
      begin
        condDesarrollo := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' ;
        if (CondDesarrollosEstandar > '') then
          condDesarrollo :=  condDesarrollo + CondDesarrollosEstandar + ' and ';
        condDesarrollo :=  condDesarrollo + ' (' + TDesarrolloDM._codigo;
        if (_DesarrolloHasta>'') then
          condDesarrollo := condDesarrollo + ' Between ' + QuotedStr( _DesarrolloDesde ) + ' and '+ QuotedStr( _DesarrolloHasta ) +'))) '
        else
          condDesarrollo := condDesarrollo + ' = ' + QuotedStr( _DesarrolloDesde ) + '))) ';
      end
    else
      if (CondDesarrollosEstandar>'') then
        condDesarrollo := ' (' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' + CondDesarrollosEstandar + '))';

// 8
    condCliente := '';
    if (_Cliente>'') then
      try
        CL := TClienteList.CreateByCodigo(_Cliente, False );
        CL.First;

        CondCliente := '( ' + TFabricadoDM.TableName + '.' + TFabricadoDM._cunioID + ' in ' + ' Select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.Tablename + ' Where ' + TCunioDM._MarcaID + ' in (';
        CondCliente := CondCliente + '( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(Cl.actual.ID) + ') or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(Cl.actual.ID) + ' )) or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(Cl.actual.ID) + ' ))) ))';

      finally
        FreeAndNil( CL);
      end;

// 9 _marca
    CondMarca := '';
    if (_Marca>'') then
      Try
        ML := TMarcaList.CreateByDescripcion(_Marca, TMarcaDM._Descripcion ,False);
        ML.First;
        CondMarca := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID + ' IN (SELECT '+ TCunioDM.ID_FieldName + ' from '+ TCunioDM.TableName + ' WHERE (' ;
        CondMarca := CondMarca + TCunioDM._MarcaID +' = '+ IntToStr( ML.actual.ID)+ '))) ' ;
      finally
        FreeAndNil(ML);
      end;

// 10 _Medida
    CondMedida := '';
    if (_Medida>0) then
      begin
        CondMedida := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
                     ' where (' + TArticuloDM._medida + ' = ' + IntToStr( _Medida ) + '))) ';
      end;
    CondDepositoOrigen := '';
    if (_Deposito>'') then
      begin
        CondDepositoOrigen := ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoOrigen := CondDepositoOrigen + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
        CondDepositoOrigen := CondDepositoOrigen + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
      end;
    CondDepositoDestino := '';
    if (_Deposito>'') then
      begin
        CondDepositoDestino :=                       ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoDestinoID;
        CondDepositoDestino := CondDepositoDestino + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
        CondDepositoDestino := CondDepositoDestino + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
      end;

    CondEstadoOrigen := '';
    if (_Estado>'') then
      begin
        CondEstadoOrigen :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoOrigenID;
        CondEstadoOrigen := CondEstadoOrigen + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoOrigen := CondEstadoOrigen + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    CondEstadoDestino := '';
    if (_Estado>'') then
      begin
        CondEstadoDestino :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoDestinoID;
        CondEstadoDestino := CondEstadoDestino + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoDestino := CondEstadoDestino + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9_Marca:
// 10_Medida

    result := '';
    if (CondProducto>'') then
      Result := CondProducto;

    if (condFamilia>'') then
      Result := condFamilia;

    if (condArticulo>'') then
      if result>'' then
        Result := Result + ' and ' + condArticulo
      else
        Result := condArticulo;

    if (condMaterial>'') then
      if result>'' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (condTerminacion>'') then
      if result>'' then
        Result := Result + ' and ' + condTerminacion
      else
        Result := condTerminacion;

    if (condCRC>'') then
      if result>'' then
        Result := Result + ' and ' + condCRC
      else
        Result := condCRC;

    if (CondCunio>'') then
      if result>'' then
        Result := Result + ' and ' + CondCunio
      else
        Result := CondCunio;

    if (CondDesarrollo>'') then
      if result>'' then
        Result := Result + ' and ' + CondDesarrollo
      else
        Result := CondDesarrollo;

    if (CondCliente>'') then
      if result>'' then
        Result := Result + ' and ' + CondCliente
      else
        Result := CondCliente;

    if (CondMarca>'') then
      if result>'' then
        Result := Result + ' and ' + CondMarca
      else
        Result := CondMarca;

    if (CondMedida>'') then
      if result>'' then
        Result := Result + ' and ' + CondMedida
      else
        Result := CondMedida;

    if (CondDepositoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoOrigen
      else
        Result := CondDepositoOrigen;

    if (CondDepositoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoDestino
      else
        Result := CondDepositoDestino;

    if (CondEstadoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoOrigen
      else
        Result := CondEstadoOrigen;

    if (CondEstadoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoDestino
      else
        Result := CondEstadoDestino;
  end;

  function WhereString: String;
  var
    CondicionDeFiltrado : String;
  begin
    CondicionDeFiltrado := SQLFabricados;
    if (CondicionDeFiltrado = '') then
      Result := ''
    else
      begin
        result := TMovimientoDeStockDM.TableName  + '.' + TMovimientoDeStockDM._ProductoID + ' in (';
        result := result + 'Select ' + TFabricadoDM._ProductoID + ' from '+ TFabricadoDM.TableName + ' where ' + CondicionDeFiltrado  + ')';
      end;
  end;
  Function OrderBy : String;
  begin
    Result := '';
    case _Orden of
      0: Result := TArticuloDM.TableName    + '.' + TArticuloDM._Codigo    + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TCunioDM.TableName     + '.' + TCunioDM._Codigo  + ', ' + TFabricadoDM.TableName + '.' + TFabricadoDM._Crc;
      1: Result := TCunioDM.TableName       + '.' + TCunioDM._Codigo       + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TFabricadoDM.TableName + '.' + TFabricadoDM._CRC + ', ' + TArticuloDM.TableName  + '.' + TArticuloDM._Codigo;
      2: Result := TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TFabricadoDM.TableName   + '.' + TFabricadoDM._CRC      + ', ' + TCunioDM.TableName     + '.' + TCunioDM._Codigo  + ', ' + TArticuloDM.TableName  + '.' + TArticuloDM._Codigo;
    end;
  end;
begin
  inherited Create(TMovimientoDeStock, TMovimientoDeStockDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TMovimientoDeStockList.CreateForReporteMovimientos;
  Function OrderBy : String;
  begin
    Result := TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._ProductoID + ',' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._PedidoDeVentaItemAsignadoID + ',' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._FechaHora;
  end;
begin
  inherited Create(TMovimientoDeStock, TMovimientoDeStockDM.CreateAll( False, '', False, OrderBy ));
end;

{ TFabricado }

Procedure TFabricado.FreeObjectsFromMemory;
begin
  if assigned(Fcomponentes) then
    FreeAndNil(Fcomponentes);
  if assigned(FSubComponentes) then
    FreeAndNil(FSubComponentes);
  if assigned(FProcesos) then
    FreeAndNil(FProcesos);
  if assigned(Farticulo) then
    FreeAndNil(Farticulo);
  if assigned(Fterminacion) then
    FreeAndNil(Fterminacion);
  if assigned(FCunio) then
    FreeAndNil(FCunio);
  if assigned(FCategoriaDeTerminacion) then
    FreeAndNil(FCategoriaDeTerminacion);
  if assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  if assigned(FProducto) then
    FreeAndNil(FProducto);
  if assigned(FTraductor) then
    FreeAndNil(FTraductor);
  if assigned(FunidadDeMedida) then
    FreeAndNil(FunidadDeMedida);
  if assigned(FComponentesDesplegados) then
    FreeAndNil(FComponentesDesplegados);
  if assigned(FDesarrollo) then
    FreeAndNil(FDesarrollo);
  if assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  if assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  if assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  if assigned(FSubComponentes) then
    FreeAndNil(FSubComponentes);
  if assigned(FMonedaDelPedido) then
    FreeAndNil(FMonedaDelPedido);
  if assigned(FFabricadoDatoFisico) then
    FreeAndNil(FFabricadoDatoFisico);
end;

procedure TFabricado.CodigoRelease;
begin
  FCodigo:= null;
end;

function TFabricado.CrearCodigoDeUnFabricadoDesdeUnArticulo(_AC: TArticuloComponente; _F: TFabricado): String;
begin
  if _AC.orden = 1 then
    Result := _AC.componente.codigo + '-' + _F.terminacion.codigo + '-' + _F.Cunio.codigo
  else if _AC.componente.HeredaCunioDelProductoFinal then
    Result := _AC.componente.codigo + '-' + _AC.componente.TerminacionDefault.codigo + '-' + _F.Cunio.codigo
  else
    Result := _AC.componente.codigo + '-' + _AC.componente.TerminacionDefault.codigo + '-' + _AC.componente.cunioDefault.codigo;
end;

procedure TFabricado.CrearComponentes(_TerminacionDelPadre: TTerminacion);

  function BuscarOCrearComponente(_TDL: TTerminacionComponenteTerminacionDefaultList; _Orden: Integer): TFabricadoComponente;
    function ComponenteAsignado(_A: TArticulo; _T: TTerminacion; _C: TCunio; _Crc: TEntero): TObjectID;
    var
      i: Integer;
      FID, AID, TID, CID, CrcNum: Integer;
    begin
      Result := NullID;
      for i := 0 to aplicacion.TemporalesDelSistema.FabricadosSinGrabar.Count - 1 do
      begin
        FID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.FabricadosSinGrabar[i],'|', 1));
        AID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.FabricadosSinGrabar[i],'|', 2));
        TID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.FabricadosSinGrabar[i],'|', 3));
        CID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.FabricadosSinGrabar[i],'|', 4));
        CrcNum := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.FabricadosSinGrabar[i], '|', 5));
        if (AID = _A.ID) and (TID = _T.ID) and (CID = _C.ID) and
          (CrcNum = _Crc) Then
        begin
          Result := FID;
          break;
        end;
      end;
    end;

  var
    FL: TFabricadoList;
    F: TFabricado;
    A: TArticulo;
    T: TTerminacion;
    C: TCunio;
    FC: TFabricadoComponente;
    FID: TObjectID;

    function TerminacionIDDelUltimoComponente(_A: TArticulo): TObjectID;
    begin
      if _A.componentes.Count = 0 then
      begin
        _TDL.First;
        if (_TDL.Count > 0) and _TDL.Find(_A.TipoDeComponente) then
          Result := _TDL.Actual.TerminacionDefaultID
        else
          Result := self.terminacionID;
      end;

      if _A.componentes.Count > 0 then
      begin
        _A.componentes.First;
        repeat
          Result := TerminacionIDDelUltimoComponente(_A.componentes.Actual.componente);
          _A.componentes.next;
        until (_A.componentes.IsLast) or (_A.componentes.Actual.orden <> 1);
      end;
    end;

  begin
    A := TArticulo.Create;
    A.Load(articulo.componentes.Actual.componenteID);

    T := TTerminacion.Create;
    // si el articulo tiene una terminacion default se le asigna esta
    // pero si el componente es de orden 1 puro debe conservar la terminacion del producto final
    if (_Orden = 1) then
      T.Load(terminacionID)
    else
    begin
      if A.TerminacionDefaultID <> NullID then
        T.Load(A.TerminacionDefaultID)
      else
      begin
        // sino la busca en la tabla de componentes default
        _TDL.First;
        if (_TDL.Count > 0) and _TDL.Find(A.TipoDeComponente) then
          T.Load(_TDL.Actual.TerminacionDefaultID)
        else if (articulo.componentes.Actual.orden = 1) then
          T.Load(self.terminacionID)
        else
          T.Load(TerminacionIDDelUltimoComponente(A));
      end;
    end;

    C := TCunio.Create;
    if (articulo.TransfiereAtributos) and (articulo.componentes.Actual.orden = 1) then
      C.Load(CunioID)
    else
    begin
      if articulo.HeredaCunioDelProductoFinal then
        C.Load(CunioID)
      else if (articulo.componentes.Actual.componente.cunioDefaultID <> NullID)
        then
        C.Load(articulo.componentes.Actual.componente.cunioDefaultID)
      else
        C.Load(aplicacion.ParametrosDelSistema.SinCunio.ID);
    end;
    try
      FL := TFabricadoList.CreateByArticuloTerminacionCunioyCRC(A, T, C, 0);
      if (FL.Count > 0) then
      begin
        FL.First;
        FC := TFabricadoComponente.Create;
        FC.FabricadoPadreID := self.ID;
        FC.FabricadoID := FL.Actual.ID;
        FC.OrdenDeArmado := articulo.componentes.Actual.orden;
        FC.CantidadDeElementos := articulo.componentes.Actual.Cantidad;
      end
      else
        begin
          FID := ComponenteAsignado(A, T, C, 0);
          if (FID = NullID) then
            begin
              F := TFabricado.Create;
              F.articuloID := A.ID;
              F.terminacionID := T.ID;
              F.CunioID := C.ID;
              F.Crc := 0;
              F.Save;
              FL.Add(F);
              Aplicacion.TemporalesDelSistema.AgregarFabricadoSinGrabar(F);
              F.NilObject;
              FC := TFabricadoComponente.Create;
              FC.FabricadoPadreID := self.ID;
              FC.FabricadoID := FL.Actual.ID;
              FC.OrdenDeArmado := articulo.componentes.Actual.orden;
              FC.CantidadDeElementos := articulo.componentes.Actual.Cantidad;
            end
          else
            begin
              FC := TFabricadoComponente.Create;
              FC.FabricadoPadreID := self.ID;
              FC.FabricadoID := FID;
              FC.OrdenDeArmado := articulo.componentes.Actual.orden;
              FC.CantidadDeElementos := articulo.componentes.Actual.Cantidad;
            end;

        end;

      // los siguientes Ids son para poder comprobar asignado en memoria
      FC.Fabricado.articuloID := A.ID;
      FC.Fabricado.terminacionID := T.ID;
      FC.Fabricado.CunioID := C.ID;
      FC.Fabricado.Crc := 0;
      //
      FC.Save;

      Result := FC;
    finally
      FreeAndNil(FL);
    end;
  end;

var
  Componente: TFabricadoComponente;
  TDL: TTerminacionComponenteTerminacionDefaultList;
begin
  if (articulo.componentes.Count = 0) then
    exit;

  try
    TDL := TTerminacionComponenteTerminacionDefaultList.CreateByTerminacion(_TerminacionDelPadre);
    articulo.componentes.First;
    repeat
      componente := BuscarOCrearComponente(TDL, articulo.componentes.Actual.orden);
      componentes.Add(componente);
      articulo.componentes.next;
    until articulo.componentes.IsLast;
  finally
    FreeAndNil(TDL);
  end;
end;

constructor TFabricado.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFabricadoDM);
  FFotoID := NullID;
  Fcodigo := null;
  Fdescripcion := null;
  FDescripcionCustom := null;
  Fcrc := 0;
  FCodigoCRC := null;
  FExpandOnSave := True;
  Fcomponentes := Nil;
  fDescripcionParaExportacion     := Null;
  FTiempoEstimadoTotalDelProducto := null;
  FTiempoEstimadoEnDiasBasicoProducto := null;
  FTiempoEstimadoEnDiasArticulo := null;
  FTiempoEstimadoEnDiasTerminacion := null;
  FTiempoEstimadoEnDiasCunio := null;
  FTiempoEstimadoEnDiasCustomizacion := null;
  FPrecioDeListaTotalDelProducto := null;
  FfechaDeCreacion := null;
  FarchivoDeImagen := null;
  FarchivoSinImagen := null;
  farchivoDeImagenParaEtiqueta := null;
  FesFabricadoFinal := False;
  FesFabricadoBase := False;
  FesdescripcionRelease := False;
  FCodigoSifab := null;
  FdesarrolloID := NullID;
  FDesarrollo := Nil;
  FEsInactivo := False;
  FResourceLanguage := Nil;
  fPosicionArancelaria := null;
  FCodigoInternoSifab := -999;
  FDescripcionCustomEnIngles := null;
  FListaDePrecioDelPedidoID := NullID;
  FMonedaDelPedidoID        := NullID;
  FEsMatriz := Null;
  FTiempototalPasosDeFabricacionEnSegundos := null;
  FIDTeamplace := Null;
end;

function TFabricado.GetarchivoDeImagen: TString;
  procedure VoyAlComponenteSiguiente(_F: TFabricado; _FL: TFotoList);
  begin
    _FL := TFotoList.CreateByArticuloTerminacionCunioyCRC(_F.articulo.codigo, _F.terminacion.codigo, _F.Cunio.codigo, _F.CodigoCrc);
    if _FL.Count > 0 then
      FarchivoDeImagen := _FL.Actual.RutaDeArchivoRed
    else if (_F.componentes.Count > 0) then
    begin
      _F.componentes.First;
      VoyAlComponenteSiguiente(_F.componentes.Actual.Fabricado, _FL);
    end;
  end;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagen = null) then
    Try
      FL := TFotoList.CreateByArticuloTerminacionCunioyCRC(Articulo.Codigo, Terminacion.Codigo, Cunio.Codigo, CodigoCrc);
        FL.First;
        If (FL.Count > 0) then
          FarchivoDeImagen := FL.Actual.RutaDeArchivoRed
        else
        begin
          if (Componentes.Count > 0) then
          begin
            Componentes.First;
            VoyAlComponenteSiguiente(Componentes.Actual.Fabricado, FL);
          end;
        end;

      if (FarchivoDeImagen = Null) then
        FarchivoDeImagen := Cunio.ArchivoDeImagen;

      if (FarchivoDeImagen = Null) or (FarchivoDeImagen = Aplicacion.ArchivoSinImagenCunios) or not (Articulo.TipoDeComponente.LlevaCunio) then
        FarchivoDeImagen := Articulo.ArchivoDeImagen;

      if (FarchivoDeImagen = null) then
        FarchivoDeImagen := ArchivoSinImagen;
    Finally
      if assigned(FL) then
        FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TFabricado.GetarchivoDeImagenParaEtiqueta: TString;
begin
  if farchivoDeImagenParaEtiqueta = null then
  begin
    if (Cunio.codigo = aplicacion.ParametrosDelSistema.CodigoSinCunio) then
      farchivoDeImagenParaEtiqueta := articulo.archivoDeImagen
    else
    begin
      farchivoDeImagenParaEtiqueta := Cunio.archivoDeImagen2D;
      if farchivoDeImagenParaEtiqueta = Cunio.archivoSinImagen then
        farchivoDeImagenParaEtiqueta := Cunio.archivoDeImagen;

      if farchivoDeImagenParaEtiqueta = Cunio.archivoSinImagen then
        farchivoDeImagenParaEtiqueta := articulo.archivoDeImagen;

      if farchivoDeImagenParaEtiqueta = articulo.archivoSinImagen then
        farchivoDeImagenParaEtiqueta := '';
    end;
  end;
  Result := farchivoDeImagenParaEtiqueta;
end;

function TFabricado.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenFabricados;
  Result := FarchivoSinImagen;
end;

function TFabricado.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);

  Result := TArticulo(Farticulo);
end;

function TFabricado.GetCantidadStockAsignada: TReal;
begin
  Result := Producto.CantidadStockAsignada;
end;

function TFabricado.GetCantidadStockEnTransito: TReal;
begin
  Result := Producto.CantidadStockEnTransito;
end;

function TFabricado.GetCantidadStockLibre: TReal;
begin
  Result := Producto.CantidadStockLibre;
end;

function TFabricado.GetCantidadStockPreparada: TReal;
begin
  Result := Producto.CantidadStockPreparada;
end;

function TFabricado.GetCantidadStockTotal: TReal;
begin
  Result := Producto.CantidadStockTotal;
end;

function TFabricado.GetCentroDeCosto: TCentroDeCosto;
begin
  if not assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto, FCentroDeCosto, articulo.CentroDeCosto.ID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

function TFabricado.GetCodigo: TString;
begin

  if (Fcodigo = null) or (Fcodigo = '') then
  begin
    Fcodigo := '';
    if assigned(articulo) Then
      Fcodigo := articulo.codigo;

    if assigned(terminacion) Then
      Fcodigo := Fcodigo + '-' + terminacion.codigo;

    if assigned(Cunio) Then
      Fcodigo := Fcodigo + '-' + Cunio.codigo;

    if (Crc) <> 0 Then
      Fcodigo := Fcodigo + '#' + CodigoCrc;
  end;

  Result := FCodigo;

end;

function TFabricado.GetCodigoCrc: TString;
begin
  if (FCodigoCRC = null) and (Fcrc <> 0) then
    FCodigoCRC := aplicacion.MathService.ConvertirDecimalABaseN(Fcrc, aplicacion.ConstantAllocator.PRM_BaseParaCovertirCRC);

  if Fcrc = 0 then
    FCodigoCRC := '';

  Result := FCodigoCRC;

end;

function TFabricado.GetCodigoInternoSifab: Integer;
  Function GetCodigoInterno(_Codigo: String): Integer;
  begin
    Result := 0;
    if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    try
      aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'Select codigoInternoMaterial from Material where ( DescripcionCorta = ' + quotedstr(_Codigo) + ' ) ';
      aplicacion.sesion.ConexionSifab.SqlQuery.Open;
      if (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount > 0) then
      begin
        aplicacion.sesion.ConexionSifab.SqlQuery.First;
        Result := aplicacion.sesion.ConexionSifab.SqlQuery.FieldByName('CodigoInternoMaterial').Value;
      end;
    finally
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    end;
  end;

begin
  if isAssigned and (FCodigoInternoSifab = -999) then
    FCodigoInternoSifab := GetCodigoInterno(codigo);
  Result := FCodigoInternoSifab;
end;

function TFabricado.GetCodigoSifab: TString;
begin
  if isAssigned and ((FCodigoSifab = null) or (FCodigoSifab = '')) then
    FCodigoSifab := aplicacion.MathService.ConvertirDecimalABaseN(ID, aplicacion.ConstantAllocator.PRM_BaseParaCovertirCRC);
  Result := FCodigoSifab;
end;

function TFabricado.Getcomponentes: TFabricadoComponenteList;
begin
  if not assigned(Fcomponentes) then
    GetList(TPDList(Fcomponentes), TPDList(TFabricadoComponenteList.CreateByPadre(self)));
  Result := TFabricadoComponenteList(Fcomponentes);
end;

function TFabricado.GetComponentesDesplegados : TFabricadoComponenteDesplegadoList;

  Procedure Cargar_componentes(_FCL: TFabricadoComponenteList;
    _PadreID: TObjectID; _Nivel: TEntero);
  var
    FC2: TFabricadoComponenteDesplegado;
  Begin
    if (_FCL.Count = 0) then
      exit;
    _FCL.First;
    Repeat
      FC2 := TFabricadoComponenteDesplegado.Create;
      FC2.ComponenteDesplegadoPadreID          := _PadreID;
      FC2.FabricadoPadreID                     := _FCL.Actual.FabricadoPadreID;
      FC2.FabricadoPadre                       := _FCL.Actual.FabricadoPadre;
      FC2.FabricadoPadre.articuloID            := _FCL.Actual.FabricadoPadre.articuloID;
      FC2.FabricadoPadre.terminacionID         := _FCL.Actual.FabricadoPadre.terminacionID;
      FC2.FabricadoPadre.CunioID               := _FCL.Actual.FabricadoPadre.CunioID;
      FC2.FabricadoPadre.Crc                   := _FCL.Actual.FabricadoPadre.Crc;
      FC2.FabricadoID                          := _FCL.Actual.FabricadoID;
      FC2.Fabricado                            := _FCL.Actual.Fabricado;
      FC2.orden                                := _FCL.Actual.OrdenDeArmado;
      FC2.Cantidad                             := _FCL.Actual.CantidadDeElementos;
      FC2.ComponenteDesplegadoNivel            := _Nivel + 1;
      FC2.ArticuloOriginalID                   := _FCL.Actual.ArticuloOriginalID;
      FC2.TerminacionOriginalID                := _FCL.Actual.TerminacionOriginalID;
      FC2.CunioOriginalID                      := _FCL.Actual.CunioOriginalID;
      FC2.CrcOriginal                          := _FCL.Actual.CrcOriginal;
      FC2.esNoEstandar                         := _FCL.Actual.esNoEstandar;
      FC2.Save;
      FComponentesDesplegados.Add(FC2);
      Cargar_componentes(_FCL.Actual.Fabricado.componentes, FC2.ID, FC2.ComponenteDesplegadoNivel);
      FC2.NilObject;
      _FCL.next;
    Until _FCL.IsLast;
  End;

var
  FC: TFabricadoComponenteDesplegado;
begin
  if not assigned(FComponentesDesplegados) then
  begin
    FComponentesDesplegados := TFabricadoComponenteDesplegadoList.CreateEmpty;
    if componentes.Count > 0 then
    Begin
      componentes.First;
      repeat
        FC := TFabricadoComponenteDesplegado.Create;
        FC.FabricadoID := componentes.Actual.FabricadoID;
        FC.FabricadoPadreID := componentes.Actual.FabricadoPadreID;
        FC.FabricadoPadre := componentes.Actual.FabricadoPadre;
        FC.FabricadoPadre.articuloID :=  componentes.Actual.FabricadoPadre.articuloID;
        FC.FabricadoPadre.terminacionID :=  componentes.Actual.FabricadoPadre.terminacionID;
        FC.FabricadoPadre.CunioID := componentes.Actual.FabricadoPadre.CunioID;
        FC.FabricadoPadre.Crc := componentes.Actual.FabricadoPadre.Crc;

        FC.Fabricado                   := componentes.Actual.Fabricado;
        FC.orden                       := componentes.Actual.OrdenDeArmado;
        FC.Cantidad                    := componentes.Actual.CantidadDeElementos;
        FC.ComponenteDesplegadoPadreID := ID;
        FC.ComponenteDesplegadoNivel   := 1;
        FC.ArticuloOriginalID          := componentes.Actual.ArticuloOriginalID;
        FC.TerminacionOriginalID       := componentes.Actual.TerminacionOriginalID;
        FC.CunioOriginalID             := componentes.Actual.CunioOriginalID;
        FC.CrcOriginal                 := componentes.Actual.CrcOriginal;
        FC.esNoEstandar                := componentes.Actual.esNoEstandar;
        FC.Save;
        FComponentesDesplegados.Add(FC);
        Cargar_componentes(componentes.Actual.Fabricado.componentes, FC.ID, 1);
        FC.NilObject;
        componentes.next;
      until componentes.IsLast;
      FComponentesDesplegados.First;
    End;
  End;
  Result := TFabricadoComponenteDesplegadoList(FComponentesDesplegados);

end;

function TFabricado.GetCunio: TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio, FCunio, CunioID);
  Result := TCunio(FCunio);
end;

function TFabricado.GetDatosFisicos: TFabricadoDatoFisicoList;
begin
  if not Assigned(FDatosFisicos) then
    GetList(TPDList(FDatosFisicos), TPDList(TFabricadoDatoFisicoList.CreateByFabricado(Self)));
  Result := TFabricadoDatoFisicoList(FDatosFisicos);
end;

function TFabricado.GetDesarrollo: TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo, FDesarrollo, desarrolloID);
  Result := TDesarrollo(FDesarrollo);
end;

procedure TFabricado.SetCrc(const Value: TEntero);
begin
  if (Fcrc <> Value) then
  begin
    FCodigoCRC := null;
    FCodigoSifab := null;
    Fcodigo := null;
    FTiempoEstimadoTotalDelProducto := null;
    FTiempoEstimadoEnDiasCustomizacion := null;
    Fdescripcion := null;
    FDescripcionCustom := null;
  end;
  Fcrc := Value;

end;

procedure TFabricado.SetCunioID(Value: TObjectID);
begin
  if (Value <> FCunioID) and assigned(FCunio) then
  begin
    Fcodigo := null;
    FCodigoSifab := null;
    FTiempoEstimadoTotalDelProducto := null;
    FTiempoEstimadoEnDiasCunio := null;
    FTiempoEstimadoEnDiasBasicoProducto := null;
    Fdescripcion := null;
    FreeAndNil(FCunio);
  end;

  FCunioID := Value;
end;

procedure TFabricado.SetDesarrolloID(const Value: TObjectID);
begin
  if (Value <> FdesarrolloID) and assigned(FDesarrollo) then
    FreeAndNil(FDesarrollo);

  FdesarrolloID := Value;
end;

procedure TFabricado.SetListaDePrecioDelPedidoID(const Value: TObjectID);
begin
  FListaDePrecioDelPedidoID := Value;
end;

procedure TFabricado.SetMonedaDelPedidoID(const Value: TObjectId);
begin
  if (FMonedaDelPedidoId<>Value) and assigned( FMonedaDelPedido)  then
    FreeAndNil( FMonedaDelPedido );
  FMonedaDelPedidoId := Value;
end;


procedure TFabricado.SetResourceLanguageID(const Value: TObjectID);
begin
  if Assigned(FResourceLanguage) and ( FResourceLanguageID <> Value) then
    FreeAndNil( FResourceLanguage );
  FResourceLanguageID := Value;
end;

function TFabricado.Getterminacion: TTerminacion;
begin
  if not Assigned(FTerminacion) then
    GetObject(TTerminacion, FTerminacion, TerminacionID);
  Result := TTerminacion(Fterminacion);
end;

function TFabricado.GetTerminacionDefault: TTerminacion;
begin
  if not assigned(FTerminacionDefault) then
    GetObject(TTerminacion, FTerminacionDefault, TerminacionDefaultID);

  Result := TTerminacion(FTerminacionDefault);
end;

function TFabricado.GetTerminacionDefaultID: TObjectID;
var
  TDL: TTerminacionComponenteTerminacionDefaultList;
begin
  Result := NullID;
  if (articuloID = NullID) then
    exit;
  {
    la terminacion default la debo calcular:
    1- de la tabla de terminaciones default por tipo de componente
    2- de la property TerminacionDefaultID
    3- la terminacion del padre
    }
  try
    TDL :=
      TTerminacionComponenteTerminacionDefaultList
      .CreateByTerminacionAndTipoDeComponente
      (terminacion, articulo.TipoDeComponente);

    if TDL.Count > 0 then
    Begin
      TDL.First;
      Result := TDL.Actual.TerminacionDefaultID;
    End
    else
    begin
      if articulo.TerminacionDefaultID <> NullID then
        Result := articulo.TerminacionDefaultID
      else
        Result := terminacionID;
    end;
  finally
    FreeAndNil(TDL);
  end;
end;


procedure TFabricado.SetTerminacionDefaultID(const Value: TObjectID);
begin
  if (Value <> FTerminacionDefaultID) and assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  FTerminacionDefaultID := Value;
end;

procedure TFabricado.SetterminacionID(Value: TObjectID);
begin
  if (Value <> FterminacionID) and assigned(Fterminacion) then
  begin
    Fcodigo := null;
    FCodigoSifab := null;
    FTiempoEstimadoTotalDelProducto := null;
    FTiempoEstimadoEnDiasTerminacion := null;
    FTiempoEstimadoEnDiasBasicoProducto := null;
    Fdescripcion := null;
    FreeAndNil(Fterminacion);
  end;
  FterminacionID := Value;
end;

procedure TFabricado.SetTiempoEstimadoEnDiasArticulo(const Value: TEntero);
begin
  if (FTiempoEstimadoEnDiasArticulo <> Value) then
  begin
    FTiempoEstimadoEnDiasBasicoProducto := null;
    FTiempoEstimadoTotalDelProducto := null;
  end;
  FTiempoEstimadoEnDiasArticulo := Value;
end;

procedure TFabricado.SetTiempoEstimadoEnDiasBasicoProducto
  (const Value: TEntero);
begin
  if FTiempoEstimadoEnDiasBasicoProducto <> Value then
    FTiempoEstimadoTotalDelProducto := null;
  FTiempoEstimadoEnDiasBasicoProducto := Value;
end;

procedure TFabricado.SetTiempoEstimadoEnDiasCunio(const Value: TEntero);
begin
  if FTiempoEstimadoEnDiasCunio <> Value then
  begin
    FTiempoEstimadoEnDiasBasicoProducto := null;
    FTiempoEstimadoTotalDelProducto := null;
  end;
  FTiempoEstimadoEnDiasCunio := Value;
end;

procedure TFabricado.SetTiempoEstimadoEnDiasCustomizacion(const Value: TEntero);
begin
  if FTiempoEstimadoEnDiasCustomizacion <> Value then
    FTiempoEstimadoTotalDelProducto := null;

  FTiempoEstimadoEnDiasCustomizacion := Value;
end;

procedure TFabricado.SetTiempoEstimadoEnDiasTerminacion(const Value: TEntero);
begin
  if FTiempoEstimadoEnDiasTerminacion <> Value then
  begin
    FTiempoEstimadoEnDiasBasicoProducto := null;
    FTiempoEstimadoTotalDelProducto := null;
  end;
  FTiempoEstimadoEnDiasTerminacion := Value;
end;

class function TFabricado.ArmarCodigoFabricado(_Art: TArticulo;_Ter: TTerminacion; _Cun: TCunio; _CodigoCrc: String): string;
begin
  Result := '';
  if assigned(_Art) Then
    Result := _Art.codigo;

  if assigned(_Ter) Then
    Result := Result + '-' + _Ter.codigo;

  if assigned(_Cun) Then
    Result := Result + '-' + _Cun.codigo;

  if (_CodigoCrc) <> '' Then
    Result := Result + '#' + _CodigoCrc;

end;

function TFabricado.DescripcionDelFabricado(_MostrarDefault: Boolean; _Idioma: TResourceLanguage; _ProductoFinal, _articuloModificado, _terminacionModificada, _cunioModificado: Boolean): string;
var
  A, T, C, e: String;
begin

  Result := '';
  if (articuloID = NullID) or (terminacionID = NullID) or (CunioID = NullID) then
    exit;

  if _ProductoFinal then
    begin
      if not articulo.traducciones.Find(_Idioma) then
        Result := articulo.DescripcionCompleta
      else
        Result := articulo.traducciones.Actual.Descripcion;

      T := DescripcionDeLosProcesos(_Idioma);

      if not terminacion.traducciones.Find(_Idioma) then
        Result := Result + ' - ' + terminacion.Descripcion + ' ' + T
      else
        Result := Result + ' - ' + terminacion.traducciones.Actual.Descripcion +
          ' ' + T;

      if (Cunio.Descripcion > '') Then
        Result := Result + ' - ' + Cunio.Descripcion;

      C := DescripcionDeLosComponentes(_Idioma);

      if C > '' then
        Result := Result + ' [' + C + ']';
    end
  else
    begin
      if not articulo.TipoDeComponente.traducciones.Find(_Idioma) then
        A := articulo.TipoDeComponente.descripcionComercial
      else
        A := articulo.TipoDeComponente.traducciones.Actual.Descripcion;

      If (_articuloModificado) Then
        A := A + ' ' + articulo.codigo; // se puede cambiar por la descripcion

      T := '';
      if (_terminacionModificada or _MostrarDefault) then
        begin
          if not terminacion.traducciones.Find(_Idioma) then
            T := terminacion.Descripcion
          else
            T := terminacion.traducciones.Actual.Descripcion;

          if (T > '') then
            T := T + ' ';
        end;

      e := T + DescripcionDeLosProcesos(_Idioma);

      C := '';
      if _cunioModificado then
        C := Cunio.Descripcion + ' (' + Cunio.codigo + ')';

      if (_articuloModificado) or (e > '') or (C > '') then
        Result := A;

      if (Result > '') and (e > '') then
        Result := Result + ' = ';
      Result := Result + e;

      if (Result > '') and (C > '') then
        Result := Result + ' - ';
      Result := Result + C;
    end;
end;

function TFabricado.DescripcionDeLosComponentes(_Idioma: TResourceLanguage) : string;
var
  Descrip: String;
  Function RecorrerComponentes(_Idioma: TResourceLanguage; _Comp: TFabricadoComponente; _MostrarDefault: Boolean; _DescripcionForzada: Boolean = False): string;
  var
    descrip2: String;
    ArticuloCambiado2, TerminacionCambiada2, CunioCambiado2, TieneCrc2: Boolean;
  begin
    Result := '';
    // si no tiene componentes
    if (_Comp.Fabricado.componentes.Count = 0) or _DescripcionForzada then
      begin

        TieneCrc2 := (_Comp.Fabricado.Crc <> 0);
        ArticuloCambiado2 := (_Comp.Fabricado.articuloID <> _Comp.ArticuloOriginalID);
        if not ArticuloCambiado2 then
          begin
            TerminacionCambiada2 := (_Comp.Fabricado.terminacionID <> _Comp.TerminacionOriginalID) ;
            CunioCambiado2 := (_Comp.Fabricado.CunioID <> _Comp.CunioOriginalID) ;
          end
        else
          begin
            TerminacionCambiada2 := (_Comp.Fabricado.terminacionID <> _Comp.Fabricado.articulo.TerminacionDefaultID ) and ( _Comp.Fabricado.componentes.Count =0) ;
            CunioCambiado2 := (_Comp.Fabricado.CunioID <> _Comp.Fabricado.articulo.cunioDefaultID) and ( _Comp.Fabricado.componentes.Count =0);
          end;
        if TieneCrc2 or ArticuloCambiado2 or TerminacionCambiada2 or CunioCambiado2 or _MostrarDefault then
          Result := _Comp.Fabricado.DescripcionDelFabricado(_MostrarDefault, _Idioma, False, ArticuloCambiado2, TerminacionCambiada2, CunioCambiado2);
        exit;
      end;

    // si tiene componentes
    _Comp.Fabricado.componentes.First;
    repeat
      descrip2 := RecorrerComponentes(_Idioma, _Comp.Fabricado.componentes.Actual, (_Comp.Fabricado.articulo.MostrarComponentesDefaultEnCustomizacion and (_Comp.Fabricado.Crc <> 0)));
      if (Result > '') and (descrip2 > '') then
        Result := Result + '; ' + descrip2
      else
        Result := Result + descrip2;

      descrip2 := '';
      _Comp.Fabricado.componentes.next;
    until _Comp.Fabricado.componentes.IsLast;

  end;

begin
  Result := '';
  if not assigned(FComponentesDesplegados) then
    begin
      if (componentes.Count > 0) then
        begin
          componentes.First;
          repeat
            descrip := '';
            // esto lo hago para que ponga la descripción en los componentes opcionales que tienen componentes
            if (componentes.Actual.Fabricado.componentes.count > 0) and ( componentes.Actual.Fabricado.articuloID <> componentes.Actual.ArticuloOriginalID ) then
              descrip := RecorrerComponentes(_Idioma, componentes.Actual, (articulo.MostrarComponentesDefaultEnCustomizacion and (Crc <> 0)), True);
            if (Result > '') and (descrip > '') then
              Result := Result + '; ' + descrip
            else
              Result := Result + descrip;

            descrip := RecorrerComponentes(_Idioma, componentes.Actual, (articulo.MostrarComponentesDefaultEnCustomizacion and (Crc <> 0)));
            if (Result > '') and (descrip > '') then
              Result := Result + '; ' + descrip
            else
              Result := Result + descrip;
            componentes.next;
          until componentes.IsLast;
          descrip := '';
        end;
    end
  else if (ComponentesDesplegados.Count > 0) then
    begin
      ComponentesDesplegados.First;
      repeat
        descrip := '';
        if (ComponentesDesplegados.Actual.Fabricado.Crc <> 0) or ComponentesDesplegados.Actual.Fabricado.cambioOriginal(ComponentesDesplegados.Actual) or ComponentesDesplegados.Actual.FabricadoPadre.articulo.MostrarComponentesDefaultEnCustomizacion then
          descrip :=ComponentesDesplegados.Actual.Fabricado.DescripcionDelFabricado(ComponentesDesplegados.Actual.FabricadoPadre.articulo.MostrarComponentesDefaultEnCustomizacion, _Idioma, False,(ComponentesDesplegados.Actual.Fabricado.articuloID <> ComponentesDesplegados.Actual.ArticuloOriginalID),
            (ComponentesDesplegados.Actual.Fabricado.terminacionID <> ComponentesDesplegados.Actual.TerminacionOriginalID), (ComponentesDesplegados.Actual.Fabricado.CunioID <> ComponentesDesplegados.Actual.CunioOriginalID));

        if (Result > '') and (descrip > '') then
          Result := Result + '; ' + descrip
        else
          Result := Result + descrip;
        ComponentesDesplegados.next;
      until ComponentesDesplegados.IsLast;
    end;
end;

function TFabricado.DescripcionDeLosProcesos(_Idioma: TResourceLanguage)
  : string;
var
  e: string;
begin
  Result := '';
  If (Crc = 0) or (Procesos.Count = 0) then
    exit;

  Procesos.First;
  repeat
    if (Result > '') then
      Result := Result + ' / ';

    if not Procesos.Actual.proceso.traducciones.Find(_Idioma) then
      Result := Result + Procesos.Actual.proceso.Descripcion
    else
      Result := Result +
        Procesos.Actual.proceso.traducciones.Actual.Descripcion;

    if Procesos.Actual.Especificaciones.Count > 0 then
    begin
      Result := Result + ': ';
      Procesos.Actual.Especificaciones.First;
      repeat

        if (Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID)
          then
        begin
          if not Procesos.Actual.Especificaciones.Actual.Especificacion.Color.
            traducciones.Find(_Idioma) then
            e :=
              Procesos.Actual.Especificaciones.Actual.Especificacion.Descripcion
          else
            e := Procesos.Actual.Especificaciones.Actual.Especificacion.Color.
              traducciones.Actual.Descripcion;
        end
        else if (Procesos.Actual.Especificaciones.Actual.desarrolloID <>
            NullID) then
          e := Procesos.Actual.Especificaciones.Actual.desarrollo.codigo;

        if (e > '') then
          Result := Result + e;

        Procesos.Actual.Especificaciones.next;
        if Not Procesos.Actual.Especificaciones.IsLast then
          Result := Result + ', ';
      until Procesos.Actual.Especificaciones.IsLast;
    end;

    Procesos.next;
  until Procesos.IsLast;
end;


procedure TFabricado.DescripcionRelease;
begin
  Fdescripcion := null;
  FesdescripcionRelease := True;
end;

destructor TFabricado.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

function TFabricado.DevolverPadreID(_Subcomponente, _ProductoFinal: TFabricado): TObjectID;
begin
  Result := _ProductoFinal.ProductoID;
  if _ProductoFinal.ComponentesDesplegados.FindFabricado( _Subcomponente ) then
    Result := _ProductoFinal.ComponentesDesplegados.Actual.FabricadoPadre.ProductoID;
end;

function TFabricado.FabricadoBase(_F: TFabricado): TTmpFabricado;
begin
  Result := TTmpFabricado.Create;
  Result.articuloID := _F.articuloID;
  Result.terminacionID := _F.terminacionID;
  Result.CunioID := _F.CunioID;
  Result.Crc := 0;
  Result.esFabricadoBase := True;
  Result.esFabricadoFinal := True;
  Result.ExpandOnSave := True;
  Result.Save;
  Result.componentes.ApplyUpdates;
end;

procedure TFabricado.asignarIDalProducto;
begin
  Producto.FabricadoID := self.ID;
  Producto.Save;
  GetCodigoSifab;
  inherited Save;
end;

function TFabricado.cambioOriginal(_FCD: TFabricadoComponenteDesplegado) : Boolean;
begin
  Result := _FCD.ArticuloOriginalID <> _FCD.Fabricado.articuloID;
  Result := Result or (_FCD.TerminacionOriginalID <> _FCD.Fabricado.terminacionID);
  Result := Result or (_FCD.CunioOriginalID <> _FCD.Fabricado.CunioID);
end;

function TFabricado.GetDescripcionCustom: TString;
begin
  if FDescripcionCustom = null then
    if (Crc = 0) and not articulo.familiaDeArticulo.EsMatriz then
      FDescripcionCustom := ''
    else
    begin
      if articulo.familiaDeArticulo.EsMatriz then
      begin
        FDescripcionCustom := aplicacion.TextService.ReemplazarEn
          (articulo.DescripcionComponentesDeMatriz, '[', '');
        FDescripcionCustom := aplicacion.TextService.ReemplazarEn
          (FDescripcionCustom, ']', '');
      end
      else if (componentes.Count = 0) then
        FDescripcionCustom := DescripcionDeLosProcesos
      else
        FDescripcionCustom := DescripcionDeLosComponentes;
    end;

  Result := FDescripcionCustom;
end;

function TFabricado.GetDescripcionCustomEnIngles: TString;
var
  IL: TResourceLanguageList;
begin
  if (FDescripcionCustomEnIngles = null) or (FDescripcionCustomEnIngles = '') then
    if (Crc = 0) and not articulo.familiaDeArticulo.EsMatriz then
      FDescripcionCustomEnIngles := ''
    else
    begin
      if articulo.familiaDeArticulo.EsMatriz then
      begin
          FDescripcionCustomEnIngles := aplicacion.TextService.ReemplazarEn(articulo.DescripcionComponentesDeMatriz, '[', '');
          FDescripcionCustomEnIngles := aplicacion.TextService.ReemplazarEn(FDescripcionCustomEnIngles, ']', '');
      end
      else
        try
          IL := TResourceLanguageList.CreateByCodigo('EN', False);
          IL.First;
          if (componentes.Count = 0) then
            FDescripcionCustomEnIngles := DescripcionDeLosProcesos(IL.Actual)
          else
            FDescripcionCustomEnIngles := DescripcionDeLosComponentes(IL.Actual);
        finally
          FreeAndNil(IL);
        end;
    end;
  Result := FDescripcionCustomEnIngles;
end;

function TFabricado.GetDescripcionParaExportacion: TString;
  Function CodigosDeComponentes: String;
  begin
    Result := '';
    if (componentes.Count > 0) then
    begin
      Result := ' <<< Component: ';
      componentes.First;
      while not componentes.IsLast do
      begin
        Result := Result + componentes.Actual.Fabricado.codigo;
        componentes.next;
        if not componentes.IsLast then
          Result := Result + ' - ';
      end;
      Result := Result + ' >>> ';
    end;
  end;

begin
  if ( fDescripcionParaExportacion = Null ) or  (fDescripcionParaExportacion = '') then
    begin
      fDescripcionParaExportacion := '';
      fDescripcionParaExportacion := articulo.rubroDeArticulo.descripcionComercial;
      if ( fDescripcionParaExportacion = '' ) then
        fDescripcionParaExportacion := 'PROD';
      fDescripcionParaExportacion := fDescripcionParaExportacion + ': ' + codigo;
      fDescripcionParaExportacion := fDescripcionParaExportacion + CodigosDeComponentes;
      if length(fDescripcionParaExportacion) > 300 then // no debe superar los 300 caracteres
        fDescripcionParaExportacion := Copy(fDescripcionParaExportacion, 1, 297) + '...';
    End;
  Result := fDescripcionParaExportacion;
end;

function TFabricado.getDescripcionTraducida: TString;
begin
  if (ResourceLanguage <> Nil) then
    if (ResourceLanguage.ID <> Aplicacion.Empresa.Localidad.pais.ResourceLanguagePaisID ) then
      FDescripcionTraducida := DescripcionDelFabricado(articulo.MostrarComponentesDefaultEnCustomizacion, ResourceLanguage)
    else
      FDescripcionTraducida := Descripcion;
  Result := FDescripcionTraducida;
end;

function TFabricado.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TFabricadoList;
end;

function TFabricado.GetEsMatriz: TBoolean;
begin
  Result := False;
  if (FEsMatriz = Null) and (FarticuloID <> NullId) then
    FEsMatriz := Articulo.familiaDeArticulo.EsMatriz;
  Result := FEsMatriz;
end;

function TFabricado.GetesStockeable: TBoolean;
begin
  Result := True;
end;

function TFabricado.GetFechaDeVentaAnterior(_C: TCliente; _F: TDate; _PedidoDeVentaID: TObjectID): TFechaHora;
var
  PVIL: TPedidodeVentaItemList;
begin
  Result := null;
  try
    PVIL := TPedidodeVentaItemList.CreateByProductoYEmpresa(self.Producto, _C);
    if (PVIL.Count > 0) then
      begin
        PVIL.First;
        while (not PVIL.IsLast) do
          begin
            if (PVIL.Actual.FechaDelPedido <= _F) and (PVIL.Actual.pedidoDeVentaID <> _PedidoDeVentaID) then
              begin
                Result := PVIL.Actual.FechaDelPedido;
                break;
              end;
            PVIL.next;
          end;
      end;
  finally
    FreeAndNil(PVIL);
  end;
end;

function TFabricado.GetFotoID: TObjectID;
  procedure VoyAlComponenteSiguiente(_F: TFabricado; _FL: TFotoList);
  begin
    _FL := TFotoList.CreateByArticuloTerminacionCunioyCRC(_F.articulo.codigo, _F.terminacion.codigo, _F.Cunio.codigo, _F.CodigoCrc);
    if _FL.Count > 0 then
      FFotoID := _FL.Actual.ID
    else if (_F.componentes.Count > 0) then
    begin
      _F.componentes.First;
      VoyAlComponenteSiguiente(_F.componentes.Actual.Fabricado, _FL);
    end;
  end;
var
  FL: TFotoList;
begin
  if (FFotoID = NullID) then
    Try
      FL := TFotoList.CreateByArticuloTerminacionCunioyCRC(Articulo.Codigo, Terminacion.Codigo, Cunio.Codigo, CodigoCrc);
        FL.First;
        If (FL.Count > 0) then
          FFotoID := FL.Actual.ID
        else
        begin
          if (Componentes.Count > 0) then
          begin
            Componentes.First;
            VoyAlComponenteSiguiente(Componentes.Actual.Fabricado, FL);
          end;
        end;

      if (FFotoID = NullID) then
        FFotoID := Cunio.FotoID;

      if (FFotoID = NullID) then
        FFotoID := NullID;
    Finally
      if Assigned(FL) then
        FreeAndNil(FL);
    end;
  Result := FFotoID;
end;

function TFabricado.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TFabricadoDM._TeamplaceTableName, TFabricadoDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TFabricadoDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TFabricado.GetMonedaDelPedido: TMoneda;
begin
  if not assigned(FMonedaDelPedido) then
    GetObject(TMoneda, FMonedaDelPedido, MonedaDelPedidoID);
  Result := TMoneda(FMonedaDelPedido);
end;

function TFabricado.GetPosicionArancelaria: TString;
begin
  if (fPosicionArancelaria = null) then
    fPosicionArancelaria := articulo.rubroDeArticulo.CodigoPosicionArancelariaSifab;
  Result := fPosicionArancelaria;
end;

//function TFabricado.PrecioDeListaArticulo( _ListaDePrecioDelPedidoID: TObjectID; _MonedaDelPedido: TMoneda; _Cunio: TCunio; var _ElPrecioEsDelCunio: Boolean ): TReal;
//begin
//  if (articuloID <> NullID) then
//    Result := articulo.PrecioDeLista( _ListaDePrecioDelPedidoID, _MonedaDelPedido, _Cunio, _ElPrecioEsDelCunio )
//  else
//    Result := 0;
//end;

//function TFabricado.PrecioDeListaCunio( _ListaDePrecioDelPedidoID: TObjectID; _MonedaDelPedido: TMoneda ): TReal;
//begin
//  if (fCunioID <> NullID) then
//    Result := Cunio.PrecioDeLista( _ListaDePrecioDelPedidoID, _MonedaDelPedido )
//  else
//    Result := 0;
//end;

//function TFabricado.PrecioDeListaTerminacion( _ListaDePrecioDelPedidoID: TObjectID; _MonedaDelPedido: TMoneda; _Articulo: TArticulo ): TReal;
//begin
//  if (articuloID <> NullID) and (terminacionID <> NullID) then
//    Result := Terminacion.PrecioDeLista( _ListaDePrecioDelPedidoID, _MonedaDelPedido, _Articulo )
//  else
//    Result := 0;
//end;

function TFabricado.PrecioTotalFabricado(_ListaDePrecioDelPedidoID: TObjectID; _MonedaDelPedido: TMoneda): TReal;
begin
  Result := aplicacion.DataService.ObtenerOGuardarPrecioDelProducto( Producto, _MonedaDelPedido, _ListaDePrecioDelPedidoID  );
end;

Function TFabricado.GetPrecioDeVentaAnterior(_C: TCliente; _M: TMoneda; _FechaPedido: TDate; _PedidoDeVentaID: TObjectID): TReal ;
var
  PVIL: TPedidodeVentaItemList;
begin
  Result := 0;
  try
    PVIL := TPedidodeVentaItemList.CreateByProductoYEmpresa(Self.Producto, _C );
    if (PVIL.Count > 0) then
      begin
        PVIL.First;
        while (not PVIL.isLast) do
          begin
            if (PVIL.Actual.FechaDelPedido <= _FechaPedido) and (PVIL.Actual.PedidoDeVentaID <> _PedidoDeVentaID) then
              begin
                Result := aplicacion.CurrencyService.ConvertirMonedaToMoneda(PVIL.Actual.PrecioDeVenta, PVIL.Actual.MonedaDelPedido, _M, PVIL.Actual.FechaDelPedido );
                break;
              end;
            PVIL.Next;
          end;
      end;
  finally
    FreeAndNil(PVIL);
  end;
end;

function TFabricado.GetProcesos: TFabricadoProcesoList;
begin
  if not assigned(FProcesos) then
    GetList(TPDList(FProcesos), TPDList(TFabricadoProcesoList.CreateByFabricado(self)));
  Result := TFabricadoProcesoList(FProcesos);
end;

function TFabricado.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, ResourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

function TFabricado.GetSubComponentes: TStringList;
  procedure AgregarSubcomponente( _F : Tfabricado; _CantidadDeComponentes: TEntero );
  var
    S : TFabricado;
  begin
    if ( _F.componentes.Count = 0 ) then
      try
        S := TFabricado.Create;
        S.Load( _F.ID );
        S.TmpCantidadAFabricar := _cantidadDeComponentes;
        FSubComponentes.AddObject( IntToStr( FSubComponentes.Count + 1 ), S);
      finally
        S.NilObject;
      end
    else
      _F.componentes.First;
      while not _F.componentes.IsLast do
        begin
          agregarSubcomponente( _F.componentes.Actual.Fabricado, _cantidadDeComponentes * _F.componentes.Actual.CantidadDeElementos );
          _F.componentes.Next;
        end;
  end;
begin
  if not assigned( FSubComponentes) then
    begin
      FSubComponentes := TStringList.Create;
      agregarSubcomponente( Self, 1  );
    end;
  Result := FSubComponentes;
end;

procedure TFabricado.SetArticuloID(Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) then
  begin
    Fcodigo := null;
    FCodigoSifab := null;
    FTiempoEstimadoTotalDelProducto := null;
    FTiempoEstimadoEnDiasArticulo := null;
    FTiempoEstimadoEnDiasBasicoProducto := null;
    fPosicionArancelaria := null;
    FEsMatriz := Null;

    if assigned(Fcomponentes) then
      FreeAndNil(Fcomponentes);
    Fdescripcion := null;
    FreeAndNil(Farticulo);
  end;

  FarticuloID := Value;
end;

function TFabricado.GetTiempoEstimadoEnDiasArticulo: TEntero;
begin
  if (FTiempoEstimadoEnDiasArticulo = null) and (articuloID <> NullID) then
    FTiempoEstimadoEnDiasArticulo := articulo.tiempoEstimadoEnDias;

  if (FTiempoEstimadoEnDiasArticulo = null) then
    Result := 0
  else
    Result := FTiempoEstimadoEnDiasArticulo;
end;

function TFabricado.GetTiempoEstimadoEnDiasBasicoProducto: TEntero;
begin
  if (FTiempoEstimadoEnDiasBasicoProducto = Null) then
    FTiempoEstimadoEnDiasBasicoProducto := TiempoEstimadoEnDiasArticulo + TiempoEstimadoEnDiasTerminacion + TiempoEstimadoEnDiasCunio;
  Result := FTiempoEstimadoEnDiasBasicoProducto;
end;

function TFabricado.GetTiempoEstimadoEnDiasCunio: TEntero;
begin
  if (FTiempoEstimadoEnDiasCunio = null) and (CunioID <> NullID) then
    FTiempoEstimadoEnDiasCunio := Cunio.tiempoEstimadoEnDias;

  if (FTiempoEstimadoEnDiasCunio = null) then
    Result := 0
  else
    Result := FTiempoEstimadoEnDiasCunio;
end;

function TFabricado.GetTiempoEstimadoEnDiasCustomizacion: TEntero;
  function sumarTiempoProcesos(_F: TFabricado): TEntero;
  begin
    Result := 0;
    if (_F.Procesos.Count = 0) then
      exit;

    _F.Procesos.First;
    repeat
      Result := Result + _F.Procesos.Actual.proceso.tiempoEstimadoEnDias;
      if _F.Procesos.Actual.Especificaciones.Count > 0 then
      begin
        _F.Procesos.Actual.Especificaciones.First;
        repeat
          Result := Result + _F.Procesos.Actual.Especificaciones.Actual.
            Especificacion.tiempoEstimadoEnDias;
          _F.Procesos.Actual.Especificaciones.next;
        until _F.Procesos.Actual.Especificaciones.IsLast;
      end;
      _F.Procesos.next;
    until _F.Procesos.IsLast;
  end;

  function TiempoTerminacionNoDefault(_F: TFabricado): TEntero;
  begin
    Result := 0;
    if (_F.terminacionID <> _F.TerminacionDefaultID) then
      Result := (_F.TerminacionDefault.tiempoEstimadoEnDias - _F.terminacion.tiempoEstimadoEnDias);
  end;

  function recorroComponentes(_F: TFabricado): TEntero;
  var
    T, S: TEntero;

  begin
    Result := TiempoTerminacionNoDefault(_F); // ajusto la diferencia de tiempos por cambio de terminacion default
    Result := Result + sumarTiempoProcesos(_F);

    if _F.componentes.Count > 0 then
    begin
      _F.componentes.First;
      T := 0;
      repeat
        S := recorroComponentes(_F.componentes.Actual.Fabricado);
        if (S > T) then
          T := S; // guardo en T el componente que lleva mas tiempo

        _F.componentes.next;
      until _F.componentes.IsLast;
      Result := Result + T;
    end;
  end;

Begin
  if (FTiempoEstimadoEnDiasCustomizacion = null) and (Crc <> 0) then
    FTiempoEstimadoEnDiasCustomizacion := recorroComponentes(self);
  // se toman los días del componente que se tarda más
  if (Crc = 0) then
    FTiempoEstimadoEnDiasCustomizacion := 0;
  Result := FTiempoEstimadoEnDiasCustomizacion;
end;

function TFabricado.GetTiempoEstimadoEnDiasTerminacion: TEntero;
begin
  if (FTiempoEstimadoEnDiasTerminacion = null) and (terminacionID <> NullID)
    then
    FTiempoEstimadoEnDiasTerminacion := terminacion.tiempoEstimadoEnDias;

  if (FTiempoEstimadoEnDiasTerminacion = null) then
    Result := 0
  else
    Result := FTiempoEstimadoEnDiasTerminacion;
end;

function TFabricado.GetTiempoEstimadoTotalDelProducto: TEntero;
begin
  if FTiempoEstimadoTotalDelProducto = null then
  begin
    FTiempoEstimadoTotalDelProducto := TiempoEstimadoEnDiasBasicoProducto;
    FTiempoEstimadoTotalDelProducto := FTiempoEstimadoTotalDelProducto + TiempoEstimadoEnDiasCustomizacion;
  end;
  Result := FTiempoEstimadoTotalDelProducto;
end;

function TFabricado.GetTiempototalPasosDeFabricacionEnSegundos: TReal;
//  Function TiempoRotura(var _HuboRotura : Boolean; _Articulo: TArticulo; _Cunio: TCunio; _ArticuloPasoDeFabricacion: TArticuloPasoDeFabricacion ; _CantidadDeElementos: ShortInt = 1 ): TReal;
//  begin
//    if (not _HuboRotura ) then
//      begin
//        if (_ArticuloPasoDeFabricacion.PasoDeFabricacion.EsPasoDeRoturaManual) then
//          begin
//            if _Cunio.ArticulosPosibles.FindArticulo( _Articulo ) then
//              if _Cunio.ArticulosPosibles.Actual.Herramentales.FindDefault then
//                if _Cunio.ArticulosPosibles.Actual.Herramentales.Actual.EsRoturaManual then
//                  begin
//                    Result := Result + (_ArticuloPasoDeFabricacion.TiempoEnSegundos * _CantidadDeElementos);
//                    _HuboRotura := True;
//                  end;
//          end
//        else
//          begin
//            Result := Result + (_ArticuloPasoDeFabricacion.TiempoEnSegundos * _CantidadDeElementos);
//            _HuboRotura := True;
//          end;
//      end
//    else
//      Result :=0;
//  end;

var
  CantidadDeElementos : ShortInt;
//  HuboRotura          : Boolean;
begin
  if (FTiempototalPasosDeFabricacionEnSegundos = null) then
    Begin
      FTiempototalPasosDeFabricacionEnSegundos := 0;
      Articulo.PasosDeFabricacion.First;
      CantidadDeElementos := 1;

//      HuboRotura := False;
//      while not Articulo.PasosDeFabricacion.IsLast do // primero sumo los del componente terminado
//        begin
//          if Articulo.PasosDeFabricacion.Actual.PasoDeFabricacion.EsPasoDeRotura then
//            FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + TiempoRotura( HuboRotura, Articulo, Cunio, Articulo.PasosDeFabricacion.Actual, CantidadDeElementos )
//          else
//            FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + Articulo.PasosDeFabricacion.Actual.TiempoEnSegundos;
//          Articulo.PasosDeFabricacion.Next;
//        end;

//      ComponentesDesplegados.First; // despues los tiempos de los componentes y subcomponentes
//      while not ComponentesDesplegados.IsLast do
//        begin
//          CantidadDeElementos := CantidadDeElementos * ComponentesDesplegados.Actual.Cantidad;
//          if ( ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Count > 0) then
//            begin
//              ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.First;
//              HuboRotura := False;
//              while not ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.IsLast do
//                begin
//                  if ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Actual.PasoDeFabricacion.EsPasoDeRotura then
//                    FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + TiempoRotura( HuboRotura, ComponentesDesplegados.Actual.Fabricado.Articulo, ComponentesDesplegados.Actual.Fabricado.Cunio, ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Actual, ComponentesDesplegados.Actual.Cantidad )
//
//                  else
//                    FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + (ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Actual.TiempoEnSegundos * ComponentesDesplegados.Actual.Cantidad );
//                  ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Next;
//                end;
//            end;
//          ComponentesDesplegados.Next;
//        end;
//    end;
//  Result := FTiempototalPasosDeFabricacionEnSegundos;

      while not Articulo.PasosDeFabricacion.IsLast do // primero sumo los del componente terminado
        begin
          if Articulo.PasosDeFabricacion.Actual.SumaEnCalculoDeCostos then
            FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + Articulo.PasosDeFabricacion.Actual.TiempoEnSegundos;
          Articulo.PasosDeFabricacion.Next;
        end;

      ComponentesDesplegados.First; // despues los tiempos de los componentes y subcomponentes
      while not ComponentesDesplegados.IsLast do
        begin
          CantidadDeElementos := CantidadDeElementos * ComponentesDesplegados.Actual.Cantidad;
          if ( ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Count > 0) then
            begin
              ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.First;
              while not ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.IsLast do
                begin
                  if ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Actual.SumaEnCalculoDeCostos then
                    FTiempototalPasosDeFabricacionEnSegundos := FTiempototalPasosDeFabricacionEnSegundos + (ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Actual.TiempoEnSegundos * ComponentesDesplegados.Actual.Cantidad );
                  ComponentesDesplegados.Actual.Fabricado.Articulo.PasosDeFabricacion.Next;
                end;
            end;
          ComponentesDesplegados.Next;
        end;
    end;
  Result := FTiempototalPasosDeFabricacionEnSegundos;
end;


function TFabricado.GetTipoDeProducto: String;
begin
  Result := aplicacion.ParametrosDelSistema.FabricadoDescripcion;
end;

function TFabricado.GetunidadDeMedidaFabricado: TUnidadDeMedida;
begin
  Result := articulo.unidadDeMedida;
end;

function TFabricado.GetunidadDeMedidaFabricadoID: TObjectID;
begin
  Result := articulo.unidadDeMedidaID;
end;

class function TFabricado.GuardarEnTeamPlace(_F: TFabricado): Boolean;
  Function DevolverUnidadDeMedida : String;
  begin
    if _F.UnidadDeMedidaID <> NullID then
      Result := IntToStr(_F.UnidadDeMedida.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MeasureService.UnidadDeMedidaCantidadDefault.IDTeamplace);
  end;

  Function DevolverImpuestoConcepto : String;
  begin
    if _F.Articulo.Impuestos.Count > 0 then
      Result := IntToStr(_F.Articulo.Impuestos.Actual.ImpuestoConcepto.IDTeamplace)
    else
      Result := '1';
  end;

  Function DevolverMoneda : String;
  begin
    if _F.Articulo.Precios.Count > 0 then
      Result := IntToStr(_F.Articulo.Precios.Actual.Moneda.IDTeamplace)
    else
      Result := IntToStr(Aplicacion.MonedaDefault.IDTeamplace);
  end;
begin
  Result := False;

  if _F.EsInactivo then
    Aplicacion.RaiseExceptionCreate('Solo se pueden migrar a Teamplace Artículos Fabricados Activos');

  if (Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TFabricadoDM._TeamplaceTableName, TFabricadoDM._TeamplaceCodigo + ' = ' + QuotedStr(_F.Codigo) , TFabricadoDM._TeamplaceID) <> 0) then
    Aplicacion.RaiseExceptionCreate('El Articulo ya se encuentra en la Base de datos de Teamplace');

  Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TFabricadoDM._TeamplaceTableName,
  ['Nombre'      ,
   'UnidadIDStock1',
   'Codigo' ,
   'Activo',
   'Descripcion' ,
   'EsStockeable',
   'CuentaIDCompra',
   'CuentaIDVenta',
   'ConceptoIDVenta',
   'ConceptoIDCompra',
   'UnidadIDVenta',
   'UnidadIDCompra',
   'RelacionUnidadCompraStock',
   'RelacionUnidadVentaStock',
   'TasaImpositivaIDVenta',
   'TasaImpositivaIDCompra',
   'ProductoTipoID',
   'MonedaID',
   'UnidadValorizacion',
   'NoControlaStock',
   'EsElaborado',
   'ControlImpositivo3'],
  [QuotedStr(_F.Descripcion),
   DevolverUnidadDeMedida,
   QuotedStr(_F.codigo ),
   '1',
   QuotedStr( _F.Descripcion),
   '0',
   '415',//cuentacompra
   '310',//cuentaventa
   '2',
   '2',
   DevolverUnidadDeMedida,
   DevolverUnidadDeMedida,
   '1',
   '1',
   DevolverImpuestoConcepto,
   DevolverImpuestoConcepto,
   '4',
   DevolverMoneda,
   '0',
   '0',
   '1',
   '0'])
end;

procedure TFabricado.limpiarCodigoSifab;
begin
  FCodigoSifab := null;
end;


class function TFabricado.ObtenerKMateriaPrimaEnMonedaSolicitada(_Fabricado: TFabricado; _MonedaID: TObjectID; _FechaCotizacion: TDateTime): TReal;
var
  ML : TMonedaList;
begin
  Try
    ML := TMonedaList.CreateByID( _MonedaID );
    if (ML.count=0) Then
      Aplicacion.RaiseExceptionCreate('La moneda de cálculo es incorrecta.');
    Result := ObtenerKMateriaPrimaEnMonedaSolicitada(_Fabricado, ML.actual, _FechaCotizacion );
  Finally
    FreeAndNil( ML );
  End;
end;

class function TFabricado.ObtenerKMateriaPrimaEnMonedaSolicitada(_Fabricado: TFabricado; _Moneda: TMoneda; _FechaCotizacion: TDateTime): TReal;
var
  I       : Integer;
  SubComp : TFabricado;
  NCosto, PrecioMP : TReal;
begin
  Result := 0;

  if not Aplicacion.ParametrosDelSistema.CalculaCostos  then
    exit;

  if (_Fabricado.Articulo.Componentes.Count = 0) then
    begin
      NCosto := 0;
      // en cunios habría que hacer el create compuesto con los campos necesarios
      if ( _Fabricado.Cunio.ArticulosPosibles.FindComponente( _Fabricado.Articulo ) and _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.FindDefault ) then
        begin
          if (_Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo > 0 ) then
            Begin
              PrecioMP := Aplicacion.CurrencyService.ConvertirMonedaToMoneda( _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo,
                                                                              _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.MonedaDeCostoID,
                                                                              _Moneda.ID, _FechaCotizacion );
              NCosto := (PrecioMP * Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia( _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrapUnidadDeMedida, _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrap) );
              Result := Result + NCosto;
            End;
        end;

      if (NCosto=0) and ( _Fabricado.Articulo.MetodosDeCorte.FindDefault ) then
        begin
          if _Fabricado.Articulo.MetodosDeCorte.actual.EsComprado then
            NCosto := Aplicacion.CurrencyService.ConvertirMonedaToMoneda( _Fabricado.Articulo.K1, _Fabricado.Articulo.MonedaK1ID, _Moneda.ID, _FechaCotizacion )
          else if (_Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaCosto>0) then
            NCosto := (_Fabricado.Articulo.MetodosDeCorte.actual.PesoUnitarioConScrap * _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaUnidadDeMedidaEquivalencia *
                      Aplicacion.CurrencyService.ConvertirMonedaToMoneda( _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaCosto, _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaMonedaCostoID, _Moneda.ID, _FechaCotizacion ));
          Result := Result + NCosto;
        end;
    end
  else
    for I := 0 to _Fabricado.SubComponentes.Count - 1 do
      try
        SubComp := TFabricado( _Fabricado.SubComponentes.Objects[I] ); // se trabaja como Tstringlist
        NCosto := 0;
        // Cuños
        if ( SubComp.Cunio.ArticulosPosibles.FindComponente( SubComp.Articulo ) and SubComp.Cunio.ArticulosPosibles.actual.Herramentales.FindDefault ) then
          begin
            if ( SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo > 0 ) then
              begin
                PrecioMP := Aplicacion.CurrencyService.ConvertirMonedaToMoneda( SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo, SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.MonedaDeCostoID, _Moneda.ID, _FechaCotizacion );
                NCosto := Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia(SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrapUnidadDeMedida, SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrap);
                NCosto := NCosto * PrecioMP;
                NCosto := NCosto * SubComp.TmpCantidadAFabricar;
                Result := Result + NCosto;
              end;
          end;
        // Articulos
        if (NCosto = 0) and (SubComp.Articulo.MetodosDeCorte.FindDefault) then
          begin
            if SubComp.Articulo.MetodosDeCorte.actual.EsComprado then
              begin
                NCosto := Aplicacion.CurrencyService.ConvertirMonedaToMoneda( SubComp.Articulo.K1, SubComp.Articulo.MonedaK1ID, _Moneda.ID, _FechaCotizacion );
                NCosto := NCosto * SubComp.TmpCantidadAFabricar;
              end
            else
              begin
                PrecioMP := Aplicacion.CurrencyService.ConvertirMonedaToMoneda( SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaCosto, SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaMonedaCostoID, _Moneda.ID, _FechaCotizacion );
                NCosto := SubComp.Articulo.MetodosDeCorte.actual.PesoUnitarioConScrap;
                NCosto := NCosto * SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaUnidadDeMedidaEquivalencia;
                NCosto := NCosto * PrecioMP;
                NCosto := NCosto * SubComp.TmpCantidadAFabricar;
              end;
            Result := Result + NCosto;
          end;
      finally
        SubComp.NilObject;
      end;
end;

class function TFabricado.ObtenerKMateriaPrimaEnMonedaOficial(_FabricadoID: TObjectID; Var _ListadeErrores: TStringList; _PI : String; _FechaCotizacion: TDateTime): TReal;
var
  FL : TFabricadoList;
begin
  Try
    Result := 0;
    try
      FL := TFabricadoList.createByID( _FabricadoID );
      if (FL.count >0) then
        result := FL.actual.ObtenerKMateriaPrimaEnMonedaOficial( FL.actual, _ListadeErrores, _PI, _FechaCotizacion );
    Except
      on e: exception do
        raise exception.Create(e.message);
    end;
  Finally
    FreeAndNil( FL );
  End;
end;

class function TFabricado.ObtenerKMateriaPrimaEnMonedaOficial(_Fabricado: TFabricado; Var _ListadeErrores: TStringList; _PI : String; _FechaCotizacion: TDateTime ): TReal;
  procedure ReportaCostoCero( _C: TReal; _Informe: String);
  Begin
    if (_C=0) then
      if Assigned(_ListaDeErrores) Then
        TStringList(_ListadeErrores).Add( _Informe );
  End;
var
  I       : Integer;
  SubComp : TFabricado;
  NCosto, PrecioMP, PesoMP : TReal;
begin
  try
    Result := 0;
    if (_Fabricado.Articulo.Componentes.Count = 0) then
      begin
        NCosto   := 0;
        PrecioMP := 0;
        PesoMP   := 0;
        if ( _Fabricado.Cunio.ArticulosPosibles.FindComponente( _Fabricado.articulo ) and
             _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.FindDefault) then
          Begin
            PrecioMP := Aplicacion.CurrencyService.ConvertirAMonedaOficial( _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo, _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.MonedaDeCostoID, _FechaCotizacion );
            PesoMP   := Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia( _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrapUnidadDeMedida, _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrap );
            NCosto   := ( PesoMP * PrecioMP);
            Result   := NCosto;
            ReportaCostoCero( PrecioMP ,_PI + ';NO HAY COSTO INFORMADO DE LA MATERIA PRIMA;' + _Fabricado.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Codigo);
            ReportaCostoCero( PesoMP   ,_PI + ';NO HAY PESO INFORMADO DEL CUÑO;'          + _Fabricado.CunioCodigo );
          End
        else if _Fabricado.Articulo.MetodosDeCorte.FindDefault then
          if _Fabricado.Articulo.MetodosDeCorte.actual.EsComprado then
            begin
              NCosto := Aplicacion.CurrencyService.ConvertirAMonedaOficial(_Fabricado.Articulo.K1, _Fabricado.Articulo.MonedaK1ID, _FechaCotizacion);
              Result := NCosto;
              ReportaCostoCero( NCosto,_PI + ';NO HAY K1 INFORMADO EN EL ARTICULO COMPRADO;'+ _Fabricado.ArticuloCodigo );
            end
          else
            begin
              PrecioMP := Aplicacion.CurrencyService.ConvertirAMonedaOficial( _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaCosto, _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaMonedaCostoID, _FechaCotizacion);
              PesoMP   := _Fabricado.Articulo.MetodosDeCorte.actual.PesoUnitarioConScrap * _Fabricado.Articulo.MetodosDeCorte.actual.CCMateriaPrimaUnidadDeMedidaEquivalencia;
              NCosto   := (PesoMP * PrecioMP);
              Result   := NCosto;
              ReportaCostoCero( PrecioMP ,_PI + ';NO HAY COSTO INFORMADO DE LA MATERIA PRIMA;' + _Fabricado.Articulo.MetodosDeCorte.actual.MateriaPrima.Codigo);
              ReportaCostoCero( PesoMP   ,_PI + ';NO HAY PESO INFORMADO DEL ARTICULO;'      + _Fabricado.ArticuloCodigo );
            end
        else
          ReportaCostoCero( 0,_PI + ';METODO DE CORTE / HERRAMENTALCUNIO Articulo;' + _Fabricado.ArticuloCodigo + ';Cunio;' + _Fabricado.CunioCodigo);
      end
    else
      for I := 0 to _Fabricado.SubComponentes.Count - 1 do
        try
          SubComp  := TFabricado( _Fabricado.SubComponentes.Objects[I] ); // se trabaja como Tstringlist
          NCosto   := 0;
          PrecioMP := 0;
          PesoMP   := 0;
          // Cuños
          if SubComp.Cunio.ArticulosPosibles.FindComponente(SubComp.Articulo) and SubComp.Cunio.ArticulosPosibles.actual.Herramentales.FindDefault then
            begin
              PrecioMP := Aplicacion.CurrencyService.ConvertirAMonedaOficial( SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Costo, SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.MonedaDeCostoID, _FechaCotizacion );
              PesoMP   := Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia( SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrapUnidadDeMedida, SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.CantidadUnitariaConScrap) * SubComp.TmpCantidadAFabricar;
              NCosto := ( PesoMP * PrecioMP );
              Result := Result + NCosto;
              ReportaCostoCero( PrecioMP ,_PI + ';NO HAY COSTO INFORMADO DE LA MATERIA PRIMA;' + SubComp.Cunio.ArticulosPosibles.actual.Herramentales.actual.MateriaPrima.Codigo);
              ReportaCostoCero( PesoMP   ,_PI + ';NO HAY PESO INFORMADO DEL CUÑO;'          + SubComp.CunioCodigo );
            end
          else if (SubComp.Articulo.MetodosDeCorte.FindDefault) then
            if SubComp.Articulo.MetodosDeCorte.actual.EsComprado then
              begin
                NCosto := Aplicacion.CurrencyService.ConvertirAMonedaOficial( SubComp.Articulo.K1, SubComp.Articulo.MonedaK1ID, _FechaCotizacion ) * SubComp.TmpCantidadAFabricar;
                Result := Result + NCosto;
                ReportaCostoCero( NCosto,_PI + ';NO HAY K1 INFORMADO EN EL ARTICULO COMPRADO;'+ SubComp.ArticuloCodigo );
              end
            else
              begin
                PrecioMP := Aplicacion.CurrencyService.ConvertirAMonedaOficial( SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaCosto, SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaMonedaCostoID, _FechaCotizacion );
                PesoMP   := SubComp.Articulo.MetodosDeCorte.actual.PesoUnitarioConScrap * SubComp.Articulo.MetodosDeCorte.actual.CCMateriaPrimaUnidadDeMedidaEquivalencia * SubComp.TmpCantidadAFabricar;
                NCosto := ( PesoMP * PrecioMP );
                Result := Result + NCosto;
                ReportaCostoCero( PrecioMP ,_PI + ';NO HAY COSTO INFORMADO DE LA MATERIA PRIMA;' + SubComp.Articulo.MetodosDeCorte.actual.MateriaPrima.Codigo);
                ReportaCostoCero( PesoMP   ,_PI + ';NO HAY PESO INFORMADO DEL ARTICULO;'      + SubComp.ArticuloCodigo );
              end
          else
            ReportaCostoCero( 0,_PI + ';NO HAY METODO DE CORTE / HERRAMENTALCUNIO INFORMADO Articulo;' + SubComp.ArticuloCodigo + ';Cunio;' + SubComp.CunioCodigo  );
        finally
          SubComp.NilObject;
        end;
  Except
    on e: exception do
    begin
      raise exception.Create(e.message + #13#10 + 'Fabricado: ' + _Fabricado.codigo );
    end;
  end;

end;

class function TFabricado.ObtenerKMateriaPrimaEnMonedaOficial(_Fabricado: TFabricado; _FechaCotizacion: TDateTime ): TReal;
var
  _StringList : TStringList;
begin
  Try
    _StringList := TStringList.create;
    Result := _Fabricado.ObtenerKMateriaPrimaEnMonedaOficial(_Fabricado, _StringList, '', _FechaCotizacion );
  Finally
    FreeAndNil( _StringList );
  End;
end;

procedure TFabricado.ProductoRelease;
begin
  if assigned(FProducto) then
    FreeAndNil(FProducto);
end;

function TFabricado.Save: Boolean;

  Procedure RecorrerComponentes(_F: TFabricado; _F0: TTmpFabricado);
  begin
    if (_F.componentes.Count > 0) then
      begin
        _F.componentes.First;
        _F0.componentes.First;
        repeat
          if not _F.componentes.IsLast then
            begin
              _F.componentes.Actual.ArticuloOriginalID    := _F0.componentes.Actual.Fabricado.articuloID;
              _F.componentes.Actual.TerminacionOriginalID := _F0.componentes.Actual.Fabricado.terminacionID;
              _F.componentes.Actual.CunioOriginalID       := _F0.componentes.Actual.Fabricado.CunioID;
              _F.componentes.Actual.CrcOriginal           := _F0.componentes.Actual.Fabricado.Crc;
              _F.componentes.Actual.Save;
              RecorrerComponentes(_F.componentes.Actual.Fabricado, _F0.componentes.Actual.Fabricado);
            end;
          _F0.componentes.next;
          _F.componentes.next;
        until _F0.componentes.IsLast;
      end;
  end;
  Procedure AsignarOriginales;
  var
    F0: TTmpFabricado;
  begin
    if (componentes.Count = 0) then
      exit;
    componentes.First;
    // if (componentes.Actual.ArticuloOriginalID <> NullID) then
    // exit;
    try
      F0 := FabricadoBase(self);
      F0.componentes.ApplyUpdates;
      RecorrerComponentes(self, F0);
    finally
      F0.componentes.ApplyUpdates;
      F0.DeleteFabricadoCompleto;
      F0.Delete;
      F0.componentes.ApplyUpdates;
      FreeAndNil(F0);
    end;
  end;
var
  FL                    : TFabricadoList;
  DebeAsignarOriginales : Boolean;
begin
  Result := False;

  if FfechaDeCreacion = null then
    FfechaDeCreacion := aplicacion.DateTimeService.FechaHoraActual;

  if FCunioID = NullID then
    Aplicacion.RaiseExceptionCreate('Debe agregar un Cuño para poder guardar un Fabricado');
  if FArticuloID = NullID then
    Aplicacion.RaiseExceptionCreate('Debe agregar un Artículo para poder guardar un Fabricado');
  if FTerminacionID = NullID then
    Aplicacion.RaiseExceptionCreate('Debe agregar una Terminación para poder guardar un Fabricado');

  Result := inherited Save; // guardar el padre antes de crear el componente
  if Result then
    begin
      debeAsignarOriginales := esFabricadoFinal and not esFabricadoBase and ExpandOnSave;
      if ExpandOnSave then
        begin
          CrearComponentes(terminacion);
          ExpandOnSave := False;
        end;

      if esFabricadoFinal then
        aplicacion.TemporalesDelSistema.BorrarFabricadosSinGrabar;

      if debeAsignarOriginales then
        asignarOriginales;

      FesdescripcionRelease := False;
    end;
end;

{ TFabricadoDM }
class function TFabricadoDM.TableName: string;
begin
  Result := 'fabricados';
end;

class function TFabricadoDM.ConexionBaseDeDatos: TConnection;
begin
  result := Aplicacion.DatabaseForFabricados;
end;

class function TFabricadoDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  begin
    Result :=          TFabricadoDM.TableName   + '.*, ';
    Result := Result + TArticuloDM.TableName    + '.' + TArticuloDM._Codigo       + ' as '+ TFabricadoDM._CCArticuloCodigo    +', ';
    Result := Result + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo    + ' as '+ TFabricadoDM._CCTerminacionCodigo +', ';
    Result := Result + TCunioDM.TableName       + '.' + TCunioDM._Codigo          + ' as '+ TFabricadoDM._CCCunioCodigo       +', ';
    Result := Result + TCunioDM.TableName       + '.' + TCunioDM._Descripcion     + ' as '+ TFabricadoDM._CCCunioDescripcion  +', ';
    Result := Result + TCunioDM.TableName       + '.' + TCunioDM._EsCunioEstandar + ' as '+ TFabricadoDM._CCCunioEsEstandar   +', ';
    Result := Result + TDesarrolloDM.TableName  + '.' + TDesarrolloDM._Codigo     + ' as '+ TFabricadoDM._CCDesarrolloCodigo;
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' left join '+ TArticuloDM.TableName    + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID    +' = '+ TArticuloDM.TableName    + '.' + TArticuloDM.ID_FieldName;
    Result := Result + ' left join '+ TTerminacionDM.TableName + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID +' = '+ TTerminacionDM.TableName + '.' + TTerminacionDM.ID_FieldName;
    Result := Result + ' left join '+ TCunioDM.TableName       + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID       +' = '+ TCunioDM.TableName       + '.' + TCunioDM.ID_FieldName;
    Result := Result + ' left join '+ TDesarrolloDM.TableName  + ' on '+ TFabricadoDM.TableName + '.' + TFabricadoDM._desarrolloID  +' = '+ TDesarrolloDM.TableName  + '.' + TDesarrolloDM.ID_FieldName ;
  end;
begin
  Case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TFabricadoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TFabricadoDM.ID_FieldName: string;
begin
  Result := 'FabricadoID';
end;

procedure TFabricadoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricado(PDObject) do
    begin
      IDField[_articuloID]                     := FarticuloID;
      IDField[_CunioID]                        := FCunioID;
      IDField[_terminacionID]                  := FterminacionID;
      IntegerField[_Crc]                       := Crc;
      IDField[_productoID]                     := FProductoID;
      StringField[_Codigo]                     := codigo;
      StringField[_Descripcion]                := Descripcion;
      StringField[_DescripcionParaExportacion] := DescripcionParaExportacion;
      StringField[_DescripcionCustomEnIngles ] := DescripcionCustomEnIngles;
      StringField[_CodigoSifab]                := CodigoSifab;
      DateField[_fechaDeCreacion]              := fechaDeCreacion;
      IDField[_desarrolloID]                   := FdesarrolloID;
      BooleanField[_EsInactivo]                := FEsInactivo;
    end;
end;

procedure TFabricadoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricado(PDObject) do
    begin
      FarticuloID                := IDField[_articuloID];
      FCunioID                   := IDField[_CunioID];
      FterminacionID             := IDField[_terminacionID];
      Fcrc                       := IntegerField[_Crc];
      FProductoID                := IDField[_productoID];
      Fcodigo                    := StringField[_Codigo];
      Fdescripcion               := StringField[_Descripcion];
      FCodigoSifab               := StringField[_CodigoSifab];
      FfechaDeCreacion           := DateField[_fechaDeCreacion];
      FdesarrolloID              := IDField[_desarrolloID];
      FEsInactivo                := BooleanField[_EsInactivo];
      FDescripcionParaExportacion := StringField[_DescripcionParaExportacion];
      FDescripcionCustomEnIngles  := StringField[_DescripcionCustomEnIngles];
  // del create compuesto
      FArticuloCodigo            := StringField[_CCArticuloCodigo];
      FTerminacionCodigo         := StringField[_CCTerminacionCodigo];
      FCunioCodigo               := StringField[_CCCunioCodigo];
      FCunioDescripcion          := StringField[_CCCunioDescripcion];
      FCunioEsEstandar           := StringField[_CCCunioEsEstandar];
      FDesarrolloCodigo          := StringField[_CCDesarrolloCodigo];
    end;
end;

{ TFabricadoList }
function TFabricadoList.GetActual: TFabricado;
begin
  Result := TFabricado(CurrentObject);
end;

//constructor TFabricadoList.SP_Fabricados_By_CodigoProductoLike_Cliente(_CodigoProductoLike, _CodigoCliente: String; _SoloVendibles: Boolean);
//Var
//  ParametersValues: array[0..3] of variant;
//begin
//  if _CodigoProductoLike > '' then
//    ParametersValues[0] := _CodigoProductoLike;
//  if _CodigoCliente > '' then
//    ParametersValues[1] := _CodigoCliente;
//  ParametersValues[2] := _SoloVendibles;
//  ParametersValues[3] := 'Select ' + TFabricadoDM.CreateCompuesto(1)+ ' from '+ TFabricadoDM.Tablename + TFabricadoDM.CreateCompuesto(2);
//
//  inherited Create(TFabricado, TFabricadoDM.Create_SP( TFabricadoDM._SP_Fabricados_By_CodigoProductoLike_Cliente, ParametersValues ));
//end;

constructor TFabricadoList.SP_Fabricados_DevolverFabricadoPadres(_FabricadoID: TObjectID; _CodigoFabricado: String);
Var
  ParametersValues: array[0..2] of variant;
begin
  if _FabricadoID <> NullID then
    ParametersValues[0] := _FabricadoID;
  if (_CodigoFabricado > '') then
    ParametersValues[1] := _CodigoFabricado;
  ParametersValues[2] := 'Select ' + TFabricadoDM.CreateCompuesto(1)+ ' from '+ TFabricadoDM.Tablename  + TFabricadoDM.CreateCompuesto(2);

  inherited Create(TFabricado, TFabricadoDM.Create_SP( TFabricadoDM._SP_Fabricados_DevolverFabricadoPadres, ParametersValues ));

end;

function TFabricadoList.CreateNewObject: TPDObject;
begin
  Result := TFabricado.Create;
end;


constructor TFabricadoList.CreateTop(_NTop: Integer; _SoloActivos, _soloVendibles, _Desc: Boolean);
  function WhereString: string;
  begin
    Result := '';
    if _SoloActivos then
      Result := '('+ TFabricadoDM.TableName+'.'+TFabricadoDM._EsInactivo + ' =0)';

    if _soloVendibles then
      Begin
        if (Result >'') then
          Result := Result + ' and ';

        Result := Result + TFabricadoDM.TableName+'.'+TFabricadoDM._articuloID + ' in ';
        Result := Result + '(select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ' + TArticuloDM._TipoDeComponenteID + ' in ';
        Result := Result + '(select ' + TTipoDeComponenteDM.ID_FieldName + ' from ' + TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + '=1))';
      End;
  end;

  function OrderBy: string;
  begin
    Result := TFabricadoDM.TableName+'.'+TFabricadoDM.ID_FieldName;
    if _Desc then
      Result := Result + ' desc';
  end;

begin
  inherited Create(TFabricado, TFabricadoDM.CreateTop( _Ntop, WhereString, OrderBy ));
end;

function TFabricadoList.FindCodigoSifab(_CodigoSifab: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
    begin
      Result := (AnsiLowerCase(Actual.CodigoSifab) = AnsiLowerCase(_CodigoSifab));
      if not Result then
        next;
    end;

  if IsLast then
    First;
end;

constructor TFabricadoList.CreateAll( _SoloActivos: Boolean; _soloVendibles: Boolean = False);
  function WhereString: string;
  begin
    Result := '';
    if _soloVendibles then
      Begin
        Result := TFabricadoDM.TableName+'.'+TFabricadoDM._articuloID + ' in ';
        Result := Result + '(select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ' + TArticuloDM._TipoDeComponenteID + ' in ';
        Result := Result + '(select ' + TTipoDeComponenteDM.ID_FieldName + ' from ' + TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + '=1))';
      End;
  end;

begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TFabricadoList.CreateAllEspecialMigracion(_soloVendibles: Boolean; _SoloActivos: Boolean);
  function WhereString: string;
    Function Condicion1: String;
    begin
      Result := TFabricadoDM.TableName+'.'+TFabricadoDM._CodigoSifab + ' not in ';
      Result := Result + '(select ' + TNomencladorDeMaterialDM._CodigoMaterial + ' from ' + TNomencladorDeMaterialDM.TableName + ')';
    end;
    Function Condicion2: String;
    begin
      Result := TFabricadoDM.TableName+'.'+TFabricadoDM._articuloID + ' in ';
      Result := Result + '(select ' + TArticuloDM.ID_FieldName + ' from ' + TArticuloDM.TableName + ' where ' + TArticuloDM._TipoDeComponenteID + ' in ';
      Result := Result + '(select ' + TTipoDeComponenteDM.ID_FieldName +' from ' + TTipoDeComponenteDM.TableName + ' where ' + TTipoDeComponenteDM._esVendible + '=1))';
    end;
  begin
    if not _soloVendibles then
      Result := Condicion1
    else
      Result := Condicion1 + ' and ' + condicion2;
  end;
begin
    inherited Create(TFabricado,   TFabricadoDM.CreateAll( false, WhereString, _soloActivos));
end;

constructor TFabricadoList.CreateByArticuloTerminacionCunio(_A: TArticulo; _T: TTerminacion; _C: TCunio);
  function WhereString: string;
  begin
    Result := '('+TFabricadoDM.TableName+'.'+TFabricadoDM._articuloID + '=' + IntToStr(_A.ID) +
              ') and (' + TFabricadoDM.TableName+'.'+TFabricadoDM._terminacionID + '=' + IntToStr(_T.ID) +
              ') and (' + TFabricadoDM.TableName+'.'+TFabricadoDM._CunioID + '=' + IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( false, whereString));
end;

constructor TFabricadoList.CreateByArticuloTerminacionCunioyCRC(_A: TArticulo; _T: TTerminacion; _C: TCunio; Crc: Integer);
  function WhereString: string;
  begin
    Result :=  '('+ TFabricadoDM.TableName + '.'+ TFabricadoDM._articuloID + '=' + IntToStr(_A.ID) + ') and (' +
               TFabricadoDM.TableName + '.'+TFabricadoDM._terminacionID + '=' + IntToStr(_T.ID) + ') and (' +
               TFabricadoDM.TableName + '.'+TFabricadoDM._CunioID + '=' + IntToStr(_C.ID) + ') And (' +
               TFabricadoDM.TableName + '.'+TFabricadoDM._Crc + '=' + IntToStr(Crc)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( false, WhereString));
end;

constructor TFabricadoList.CreateByCodigoProductoLikeCliente( _CodigoProductoLike: String; _CodigoCliente: String; _SoloVendibles: Boolean; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '';
    If _SoloVendibles then
      begin
        Result := '('+TFabricadoDM.TableName+'.'+TFabricadoDM._articuloID + ' in (SELECT ' + TArticuloDM.ID_FieldName +' FROM '+TArticuloDM.TableName;
        Result := Result + ' WHERE '+TArticuloDM._TipoDeComponenteID+' in (SELECT '+TTipoDeComponenteDM.ID_FieldName+' FROM '+TTipoDeComponenteDM.TableName;
        Result := Result + ' WHERE ' + TTipoDeComponenteDM._esVendible+ ' =1)))';
      end;
    if (_CodigoProductoLike > '') then
      Result :=  Result + ifthen( (result > '') ,' AND (', '(') + TFabricadoDM.TableName+'.'+TFabricadoDM._Codigo+ ' like '+ QuotedStr( _CodigoProductoLike +'%')+')';

    if (_CodigoCliente > '') then
      Begin
        Result :=  Result + ifthen( (result > '') ,' AND (', '(') + TFabricadoDM.TableName+'.'+TFabricadoDM._productoID +' in (SELECT ' + TPedidoDeVentaItemDM._ProductoID + ' From ' + TPedidoDeVentaItemDM.TableName + ' where ';
        Result := Result + TPedidoDeVentaItemDM._PedidoDeVentaID + ' in ( select ' + TPedidoDeVentaDM.ID_FieldName + ' from ' + TPedidoDeVentaDM.TableName;
        Result := Result + ' where '+TPedidoDeVentaDM._ClienteID+' = (Select '+ TAbstractEmpresaDM.ID_FieldName + ' from ' + TAbstractEmpresaDM.TableName;
        Result := Result + ' where '+TAbstractEmpresaDM._Codigo + ' = ' + quotedStr( _CodigoCliente)+ '))))';
      End;
  end;
begin
  If (_CodigoProductoLike ='') and (_CodigoCliente = '') then
    Aplicacion.RaiseExceptionCreate('Se debe informar al menos uno de los parámetros: Producto o cliente');

  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString, _SoloActivos));
end;

constructor TFabricadoList.CreateByCunio(_C: TCunio; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM._CunioID + '=' + IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString, _SoloActivos));
end;

constructor TFabricadoList.CreateByDesarrolloID(_ID: TObjectID );
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM._desarrolloID + '=' + IntToStr(_ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString));
end;

constructor TFabricadoList.CreateByFabricadoID(_ID: TObjectID);
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM.ID_FieldName + '=' + IntToStr(_ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString));
end;


constructor TFabricadoList.CreateByFiltros(_Familia, _Articulo, _Material, _Terminacion, _CRC, _CunioDesde, _CunioHasta, _DesarrolloDesde, _DesarrolloHasta,
  _Cliente, _Marca, _Deposito, _Estado: String; _Medida, _Orden : Integer; _CuniosEstandar, _DesarrollosEstandar: Boolean; _Producto: String);
// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9 _Marca,
// 10 _Medida

  function sqlFabricados: String;
  var
    CondProducto,condFamilia, condArticulo, condMaterial, condTerminacion, condCRC, condCliente, CondMarca, CondCunio, CondCuniosEstandar,
    CondDesarrollosEstandar, condDesarrollo, CondMedida, CondEstadoOrigen, CondEstadoDestino, CondDepositoOrigen, CondDepositoDestino : String;
    CL : TClienteList;
    ML : TMarcaList;
  begin
// 1
    condProducto := '';
    if (_Producto>'') then
      CondProducto := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._Codigo + ' like ' + QuotedStr( _Producto + '%' ) + ')';

    condFamilia := '';
    if (_Familia>'') then
      condFamilia := ' ('+ TFabricadoDM.TableName + '.' +TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
      ' where ' + TArticuloDM._FamiliaDeArticuloID + ' in ( select '+ TFamiliaDeArticuloDM.ID_FieldName + ' from ' + TFamiliaDeArticuloDM.TableName +
      ' where ' + TFamiliaDeArticuloDM._codigo + ' = ' + QuotedStr( _Familia ) + '))) ';
// 2
    condArticulo := '';
    if (_Articulo>'') then
      begin
        condArticulo :=  ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName;
        if (pos('_', _Articulo)=0 ) and (pos('%', _Articulo)=0 ) then
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' = ' + QuotedStr( _Articulo ) + ')) '
        else
          condArticulo := condArticulo + ' where ' + TArticuloDM._NumerodeArticulo + ' like ' + QuotedStr( _Articulo ) + ')) ';
      end;
// 3
    condMaterial := '';
    if (_Material>'') then
      condMaterial := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._articuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName + ' where ' + TArticuloDM._MaterialID + ' in ( select '+
      TMaterialDM.ID_FieldName + ' from ' + TMaterialDM.TableName + ' where ' + TMaterialDM._Codigo + ' = ' + QuotedStr( _Material ) + '))) ';
// 4
    condTerminacion := '';
    if (_Terminacion>'') then
      begin
        condTerminacion := ' ('+ TFabricadoDM.TableName + '.' + TFabricadoDM._terminacionID + ' in ( select ' + TTerminacionDM.ID_FieldName + ' from ' +TTerminacionDM.TableName;
        condTerminacion := condTerminacion + ' where ' + TTerminacionDM._codigo + ' = ' + QuotedStr( _Terminacion ) + ')) '
      end;
// 5
    condCRC := '';
    if (_CRC>'') then
      condCRC := ' (('+ TFabricadoDM._Crc +' > 0) and (' + TFabricadoDM._Codigo + ' like ' + QuotedStr( '%#'+_CRC )+')) ';

// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
    CondCunio := '';
    if (_CunioDesde>'') then
      begin
        CondCunio := CondCunio + '('+ TCunioDM.TableName+'.'+TCunioDM._codigo;
        if (_CunioHasta>'') then
          CondCunio := CondCunio + ' >= ' + QuotedStr( _CunioDesde ) + ') and ('+ TCunioDM.TableName+'.'+TCunioDM._codigo + ' <= ' + QuotedStr( _CunioHasta ) +') '
        else
          CondCunio := CondCunio + ' = ' + QuotedStr( _CunioDesde ) + ') ';
      end;

    if _CuniosEstandar then
      begin
        CondCuniosEstandar := '('+ TCunioDM.TableName+ '.'+ TCunioDM._EsCunioEstandar + '=1) ';
        if CondCunio>'' then
          CondCunio := CondCuniosEstandar + ' and ' + CondCunio
        else
          CondCunio := CondCuniosEstandar;
      end;

// 7 _DesarrolloDesde, _DesarrolloHasta,
    CondDesarrollosEstandar := '';
    if _DesarrollosEstandar then
      CondDesarrollosEstandar := ' ('+ TDesarrolloDM.TableName+ '.'+ TDesarrolloDM._esEstandar + '=1) ';

    condDesarrollo := '';
    if (_DesarrolloDesde>'') then
      begin
        condDesarrollo := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' ;
        if (CondDesarrollosEstandar > '') then
          condDesarrollo :=  condDesarrollo + CondDesarrollosEstandar + ' and ';
        condDesarrollo :=  condDesarrollo + ' (' + TDesarrolloDM._codigo;
        if (_DesarrolloHasta>'') then
          condDesarrollo := condDesarrollo + ' Between ' + QuotedStr( _DesarrolloDesde ) + ' and '+ QuotedStr( _DesarrolloHasta ) +'))) '
        else
          condDesarrollo := condDesarrollo + ' = ' + QuotedStr( _DesarrolloDesde ) + '))) ';
      end
    else
      if (CondDesarrollosEstandar>'') then
        condDesarrollo := ' (' + TFabricadoDM._DesarrolloID + ' in ( select ' + TDesarrolloDM.ID_FieldName + ' from ' +TDesarrolloDM.TableName + ' where ' + CondDesarrollosEstandar + '))';

// 8
    condCliente := '';
    if (_Cliente>'') then
      try
        CL := TClienteList.CreateByCodigo(_Cliente, False );
        CL.First;

        CondCliente := '( ' + TFabricadoDM.TableName + '.' + TFabricadoDM._cunioID + ' in ' + ' Select ' + TCunioDM.ID_FieldName + ' from ' + TCunioDM.Tablename + ' Where ' + TCunioDM._MarcaID + ' in (';
        CondCliente := CondCliente + '( Select ' + TMarcaAsociadaDM._MarcaID + ' from ' + TMarcaAsociadaDM.TableName + ' where ( ' + TMarcaAsociadaDM.TableName + '.' + TMarcaAsociadaDM._EmpresaID + ' = ' + IntToStr(Cl.actual.ID) + ') or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TEmpresaAsociadaDM._AsociadaID + ' from ' + TEmpresaAsociadaDM.TableName + ' where ' + TEmpresaAsociadaDM._AsociadaID + ' = ' + IntToStr(Cl.actual.ID) + ' )) or';
        CondCliente := CondCliente + '( ' + TMarcaAsociadaDM._EmpresaID + ' in (Select ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' + TLicenciatarioDM.TableName + ' where ' + TLicenciatarioDM._EmpresaLicenciatariaID + ' = ' + IntToStr(Cl.actual.ID) + ' ))) ))';

      finally
        FreeAndNil( CL);
      end;

// 9 _marca
    CondMarca := '';
    if (_Marca>'') then
      Try
        ML := TMarcaList.CreateByDescripcion(_Marca, TMarcaDM._Descripcion ,False);
        ML.First;
        CondMarca := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._CunioID + ' IN (SELECT '+ TCunioDM.ID_FieldName + ' from '+ TCunioDM.TableName + ' WHERE (' ;
        CondMarca := CondMarca + TCunioDM._MarcaID +' = '+ IntToStr( ML.actual.ID)+ '))) ' ;
      finally
        FreeAndNil(ML);
      end;

// 10 _Medida
    CondMedida := '';
    if (_Medida>0) then
      begin
        CondMedida := ' (' + TFabricadoDM.TableName + '.' + TFabricadoDM._ArticuloID + ' in ( select ' + TArticuloDM.ID_FieldName + ' from ' +TArticuloDM.TableName +
                     ' where (' + TArticuloDM._medida + ' = ' + IntToStr( _Medida ) + '))) ';
      end;
    CondDepositoOrigen := '';
    if (_Deposito>'') then
      begin
        CondDepositoOrigen := ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoOrigenID;
        CondDepositoOrigen := CondDepositoOrigen + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
        CondDepositoOrigen := CondDepositoOrigen + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
      end;
    CondDepositoDestino := '';
    if (_Deposito>'') then
      begin
        CondDepositoDestino :=                       ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._DepositoDestinoID;
        CondDepositoDestino := CondDepositoDestino + ' in ( select ' + TDepositoDM.ID_FieldName + ' from ' + TDepositoDM.TableName;
        CondDepositoDestino := CondDepositoDestino + ' where (' + TDepositoDM._Descripcion + ' = ' + QuotedStr( _Deposito ) + '))) ';
      end;

    CondEstadoOrigen := '';
    if (_Estado>'') then
      begin
        CondEstadoOrigen :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoOrigenID;
        CondEstadoOrigen := CondEstadoOrigen + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoOrigen := CondEstadoOrigen + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

    CondEstadoDestino := '';
    if (_Estado>'') then
      begin
        CondEstadoDestino :=                    ' (' + TMovimientoDeStockDM.TableName + '.' + TMovimientoDeStockDM._EstadoDestinoID;
        CondEstadoDestino := CondEstadoDestino + ' in ( select ' + TEstadoDeStockDM.ID_FieldName + ' from ' +TEstadoDeStockDM.TableName;
        CondEstadoDestino := CondEstadoDestino + ' where (' + TEstadoDeStockDM._Descripcion + ' = ' + QuotedStr( _Estado ) + '))) ';
      end;

// 1 _Familia,
// 2 _Articulo,
// 3 _Material,
// 4 _Terminacion,
// 5 _CRC,
// 6 _CunioDesde, _CunioHasta, _CuniosEstandar
// 7 _DesarrolloDesde, _DesarrolloHasta,
// 8 _Cliente,
// 9_Marca:
// 10_Medida

    result := '';
    if (CondProducto>'') then
      Result := CondProducto;

    if (condFamilia>'') then
      Result := condFamilia;

    if (condArticulo>'') then
      if result>'' then
        Result := Result + ' and ' + condArticulo
      else
        Result := condArticulo;

    if (condMaterial>'') then
      if result>'' then
        Result := Result + ' and ' + condMaterial
      else
        Result := condMaterial;

    if (condTerminacion>'') then
      if result>'' then
        Result := Result + ' and ' + condTerminacion
      else
        Result := condTerminacion;

    if (condCRC>'') then
      if result>'' then
        Result := Result + ' and ' + condCRC
      else
        Result := condCRC;

    if (CondCunio>'') then
      if result>'' then
        Result := Result + ' and ' + CondCunio
      else
        Result := CondCunio;

    if (CondDesarrollo>'') then
      if result>'' then
        Result := Result + ' and ' + CondDesarrollo
      else
        Result := CondDesarrollo;

    if (CondCliente>'') then
      if result>'' then
        Result := Result + ' and ' + CondCliente
      else
        Result := CondCliente;

    if (CondMarca>'') then
      if result>'' then
        Result := Result + ' and ' + CondMarca
      else
        Result := CondMarca;

    if (CondMedida>'') then
      if result>'' then
        Result := Result + ' and ' + CondMedida
      else
        Result := CondMedida;

    if (CondDepositoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoOrigen
      else
        Result := CondDepositoOrigen;

    if (CondDepositoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondDepositoDestino
      else
        Result := CondDepositoDestino;

    if (CondEstadoOrigen>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoOrigen
      else
        Result := CondEstadoOrigen;

    if (CondEstadoDestino>'') then
      if result>'' then
        Result := Result + ' and ' + CondEstadoDestino
      else
        Result := CondEstadoDestino;
  end;

  function WhereString: String;
  var
    CondicionDeFiltrado : String;
  begin
    CondicionDeFiltrado := SQLFabricados;
    if (CondicionDeFiltrado = '') then
      Result := ''
    else
      begin
        result := CondicionDeFiltrado ;
      end;
  end;
  Function OrderBy : String;
begin
    case _Orden of
      0: Result := TArticuloDM.TableName + '.' + TArticuloDM._Codigo + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TCunioDM.TableName + '.' + TCunioDM._Codigo + ', ' + TFabricadoDM._CRC;
      1: Result := TCunioDM.TableName + '.' + TCunioDM._Codigo       + ', ' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ', ' + TFabricadoDM._CRC  + ', ' + TArticuloDM.TableName + '.' + TArticuloDM._Codigo;
//      2: Result := TFotoDM._TerminacionCodigo + ', ' + TFotoDM._CodigoCRC         + ', ' + TFotoDM._CunioCodigo       + ', ' + TFotoDM._ArticuloCodigo  ;
    end;
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TFabricadoList.CreateByProductoID(_ID: TObjectID);
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM._productoID + '=' + IntToStr(_ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString));
end;

constructor TFabricadoList.CreateByTerminacion(_T: TTerminacion; _SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM._terminacionID + ' = ' + IntToStr(_T.ID)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString, _SoloActivos));
end;

constructor TFabricadoList.CreateByTieneCRC(_SoloActivos: Boolean);
  function WhereString: string;
  begin
    Result := '('+ TFabricadoDM.TableName+'.'+ TFabricadoDM._Crc + ' <> ' + IntToStr(0)+')';
  end;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateAll( False, whereString, _SoloActivos));
end;

constructor TFabricadoList.CreateEmpty;
begin
  inherited Create(TFabricado, TFabricadoDM.CreateEmpty);
end;


{ TCunioArticuloPosible }
constructor TCunioArticuloPosible.Create;
begin
  inherited;
  SaveSqlLog    := True;
  DMObject      := aplicacion.DMProvider.GetGlobalDM(TCunioArticuloPosibleDM);
  FArticuloID   := NullID;
  FComponenteID := NullID;
end;

function TCunioArticuloPosible.GetCunio: TCunio;
begin
  if not Assigned(FCunio) then
    GetObject(TCunio, FCunio, FCunioID);
  Result := TCunio(FCunio);
end;

function TCunioArticuloPosible.GetHerramentales: TCunioArticuloPosibleHerramentalList;
begin
  if not assigned(FHerramentales) then
    GetList(TPDList(FHerramentales),TPDList(TCunioArticuloPosibleHerramentalList.CreateByCunioArticuloPosible(self, false )));
  Result := TCunioArticuloPosibleHerramentalList(FHerramentales);
end;

procedure TCunioArticuloPosible.SetcomponenteID(const Value: TObjectID);
begin
  if (Value <> FcomponenteID) and assigned(FComponente) then
    FreeAndNil(FComponente);
  FcomponenteID := Value;
end;

procedure TCunioArticuloPosible.SetCunioID(Value: TObjectID);
begin
  if (Value <> FCunioID) and assigned(FCunio) then
    FreeAndNil(FCunio);
  FCunioID := Value;
end;

function TCunioArticuloPosible.Save: Boolean;
begin
  ComponenteID := Articulo.ComponenteQueLlevaElCunio.ID;
  Result := inherited Save;
end;

procedure TCunioArticuloPosible.SetArticuloID(Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) then
    FreeAndNil(Farticulo);
  FArticuloID   := Value;
end;

procedure TCunioArticuloPosible.Delete;
begin
  if (Herramentales.Count > 0) then
    Aplicacion.RaiseExceptionCreate('Debe eliminar los Herramentales asignados a este cuño antes de eliminarlo.');
  inherited;
end;

function TCunioArticuloPosible.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);
  Result := TArticulo(Farticulo);
end;

function TCunioArticuloPosible.GetComponente: TArticulo;
begin
  if not assigned(FComponente) then
    GetObject(TArticulo, FComponente, ComponenteID);
  Result := TArticulo(FComponente);
end;

{ TCunioArticuloPosibleDM }
class function TCunioArticuloPosibleDM.TableName: string;
begin
  Result := 'CunioArticulosPosibles';
end;

class function TCunioArticuloPosibleDM.ID_FieldName: string;
begin
  Result := 'CunioArticuloPosibleID';
end;

procedure TCunioArticuloPosibleDM.PopulateFields(PDObject: TPDObject);
begin
  with TCunioArticuloPosible(PDObject) do
  begin
    IDField[_CunioID] := FCunioID;
    IDField[_articuloID] := FarticuloID;
    IDField[_ComponenteID] := FcomponenteID;
  end;
end;

procedure TCunioArticuloPosibleDM.PopulateObject(PDObject: TPDObject);
begin
  with TCunioArticuloPosible(PDObject) do
  begin
    FCunioID := IDField[_CunioID];
    FarticuloID := IDField[_articuloID];
    FcomponenteID := IDField[_ComponenteID];
  end;
end;

{ TCunioArticuloPosibleList }
function TCunioArticuloPosibleList.GetActual: TCunioArticuloPosible;
begin
  Result := TCunioArticuloPosible(CurrentObject);
end;

function TCunioArticuloPosibleList.CreateNewObject: TPDObject;
begin
  Result := TCunioArticuloPosible.Create;
end;

function TCunioArticuloPosibleList.FindArticulo(_A: TArticulo): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.articuloID = _A.ID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TCunioArticuloPosibleList.FindComponente(_A: TArticulo): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.ComponenteID = _A.ID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCunioArticuloPosibleList.CreateAll;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateAll(False));
end;

constructor TCunioArticuloPosibleList.CreateByCunio(_C: TCunio);
  Function WhereString : String;
  begin
    Result := TCunioArticuloPosibleDM._CunioID + ' = ' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateAll(False, WhereString));
end;

constructor TCunioArticuloPosibleList.CreateEmpty;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateEmpty);
end;

constructor TCunioArticuloPosibleList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TCunioArticuloPosibleDM._articuloID + ' = ' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateAll(False, WhereString));
end;

constructor TCunioArticuloPosibleList.CreateByArticuloYCliente(_A: TArticulo; _C: TCliente);
  function WhereString: string;
  var
    CL: TCunioList;
  begin
    Try
      Result := '';

      CL := TCunioList.CreateByCliente(_C);
      if CL.Count = 0 then
        exit;

      Result := TCunioArticuloPosibleDM._CunioID + ' in (0';
      CL.First;
      Repeat
        Result := Result + ',' + IntToStr(CL.Actual.ID);
        CL.next;
      until CL.IsLast;
      Result := Result + ')';
    finally
      FreeAndNil(CL);
    end;
  end;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateAll(False, WhereString));
end;

constructor TCunioArticuloPosibleList.CreateByArticuloYCunio(_A: TArticulo; _C: TCunio);
  Function WhereString : String;
  begin
    Result := TCunioArticuloPosibleDM._CunioID + ' = ' + IntToStr(_C.ID) + ' and ' + TCunioArticuloPosibleDM._articuloID + ' = ' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TCunioArticuloPosible, TCunioArticuloPosibleDM.CreateAll(False, WhereString));
end;

{ TMatrizArticuloAsociado }
constructor TMatrizArticuloAsociado.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TMatrizArticuloAsociadoDM);
end;

procedure TMatrizArticuloAsociado.SetArticuloAsociadoID(Value: TObjectID);
begin
  if (Value <> FArticuloAsociadoID) and assigned(FArticuloAsociado) then
    FreeAndNil(FArticuloAsociado);
  FArticuloAsociadoID := Value;
end;

procedure TMatrizArticuloAsociado.SetArticuloPadreID(const Value: TObjectID);
begin
  if (Value <> FArticuloPadreID) and assigned(FArticuloPadre) then
    FreeAndNil(FArticuloPadre);
  FArticuloPadreID := Value;
end;

function TMatrizArticuloAsociado.GetArticuloAsociado: TArticulo;
begin
  if not assigned(FArticuloAsociado) then
    GetObject(TArticulo, FArticuloAsociado, ArticuloAsociadoID);
  Result := TArticulo(FArticuloAsociado);
end;

function TMatrizArticuloAsociado.GetArticuloPadre: TArticulo;
begin
  if not assigned(FArticuloPadre) then
    GetObject(TArticulo, FArticuloPadre, ArticuloPadreID);
  Result := TArticulo(FArticuloPadre);
end;

{ TMatrizArticuloAsociadoDM }
class function TMatrizArticuloAsociadoDM.TableName: string;
begin
  Result := 'matrizarticulosasociados';
end;

class function TMatrizArticuloAsociadoDM.ID_FieldName: string;
begin
  Result := 'MatrizArticuloAsociadoID';
end;

procedure TMatrizArticuloAsociadoDM.PopulateFields(PDObject: TPDObject);
begin
  with TMatrizArticuloAsociado(PDObject) do
  begin
    IDField[_ArticuloPadreID] := FArticuloPadreID;
    IDField[_ArticuloAsociadoID] := FArticuloAsociadoID;
  end;
end;

procedure TMatrizArticuloAsociadoDM.PopulateObject(PDObject: TPDObject);
begin
  with TMatrizArticuloAsociado(PDObject) do
  begin
    FArticuloPadreID := IDField[_ArticuloPadreID];
    FArticuloAsociadoID := IDField[_ArticuloAsociadoID];
  end;
end;

{ TMatrizArticuloAsociadoList }
function TMatrizArticuloAsociadoList.GetActual: TMatrizArticuloAsociado;
begin
  Result := TMatrizArticuloAsociado(CurrentObject);
end;

function TMatrizArticuloAsociadoList.CreateNewObject: TPDObject;
begin
  Result := TMatrizArticuloAsociado.Create;
end;

function TMatrizArticuloAsociadoList.FindArticuloID(_ID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (TMatrizArticuloAsociado(CurrentObject)
          .ArticuloAsociadoID = _ID);
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;

end;

constructor TMatrizArticuloAsociadoList.CreateAll;
begin
  inherited Create(TMatrizArticuloAsociado,  TMatrizArticuloAsociadoDM.CreateAll(False));
end;

constructor TMatrizArticuloAsociadoList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TMatrizArticuloAsociadoDM._ArticuloAsociadoID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TMatrizArticuloAsociado, TMatrizArticuloAsociadoDM.CreateAll(False, WhereString));
end;

constructor TMatrizArticuloAsociadoList.CreateByMatriz(_M: TArticulo);
  Function WhereString : String;
  begin
    Result := TMatrizArticuloAsociadoDM._ArticuloPadreID + '=' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TMatrizArticuloAsociado, TMatrizArticuloAsociadoDM.CreateAll(False, WhereString));
end;

function TAbstractEmpresa.GetMonedaDefault: TMoneda;
begin
  if not assigned(FMonedaDefault) then
    GetObject(TMoneda, FMonedaDefault, FMonedaDefaultID);

  Result := TMoneda(FMonedaDefault);
end;

function TAbstractEmpresa.GetMonedaDeLimiteDeCredito: TMoneda;
begin
  if not assigned(FMonedaDeLimiteDeCredito) then
    GetObject(TMoneda, FMonedaDeLimiteDeCredito, FMonedaDeLimiteDeCreditoID);

  Result := TMoneda(FMonedaDeLimiteDeCredito);

end;

function TAbstractEmpresa.GetNivelDeServicioDeCliente: TNivelDeServicioDeCliente;
begin
  if not assigned(FNivelDeServicioDeCliente) then
    GetObject(TNivelDeServicioDeCliente, FNivelDeServicioDeCliente, NivelDeServicioDeClienteID);

  Result := TNivelDeServicioDeCliente(FNivelDeServicioDeCliente);
end;

procedure TAbstractEmpresa.SetMarcaAsociadaDefaultID(const Value: TObjectID);
begin
  if (Value <> FMarcaAsociadaDefaultID) and assigned(FMarcaDefault) then
    begin
      FreeAndNil(FMarcaDefault);
      FMarcaDefaultID := NullID;
    end;
  FMarcaAsociadaDefaultID := Value;
end;

procedure TAbstractEmpresa.SetMarcaDefaultID(const Value: TObjectID);
begin
  if (Value <> FMarcaDefaultID) and assigned(FMarcaDefault) then
    FreeAndNil(FMarcaDefault);
  FMarcaDefaultID := Value;
end;

procedure TAbstractEmpresa.SetMonedaDefaultID(const Value: TObjectID);
begin
  if (Value <> FMonedaDefaultID) and assigned(FMonedaDefault) then
    FreeAndNil(FMonedaDefault);
  FMonedaDefaultID := Value;
end;

procedure TAbstractEmpresa.setMonedaDeLimiteDeCreditoID(const Value: TObjectID);
begin
  if (Value <> FMonedaDeLimiteDeCreditoID) and assigned
    (FMonedaDeLimiteDeCredito) then
    FreeAndNil(FMonedaDeLimiteDeCredito);

  FMonedaDeLimiteDeCreditoID := Value;
end;

{ TLocalidad }
constructor TLocalidad.Create;
begin
  inherited;
  DMObject      := Aplicacion.DMProvider.GetGlobalDM(TLocalidadDM);
  provinciaID   := NullID;
  FIDTeamplace  := Null;
end;

procedure TLocalidad.setPaisID(const Value: TObjectID);
begin
  if (Value <> FPaisID) and assigned(FPais) then
    FreeAndNil(FPais);
  FPaisID := Value;
end;

procedure TLocalidad.SetprovinciaID(Value: TObjectID);
begin
  if (Value <> FprovinciaID) and assigned(Fprovincia) then
    FreeAndNil(Fprovincia);
  FprovinciaID := Value;
  FPaisID := provincia.paisID;
end;

function TLocalidad.GetPais: TPais;
begin
  if not assigned(FPais) then
    GetObject(TPais, FPais, paisID);

  Result := TPais(FPais);
end;

function TLocalidad.Getprovincia: TProvincia;
begin
  if not assigned(Fprovincia) then
    GetObject(TProvincia, Fprovincia, provinciaID);

  Result := TProvincia(Fprovincia);
end;

class function TLocalidad.GuardarEnTeamPlace(_L: TLocalidad): Boolean;
begin
  Result := False;
  if (_L.Provincia.Pais.IDTeamplace = NullID) then
    Aplicacion.RaiseExceptionCreate('Primero debe migrar el país a Teamplace');

  if (_L.Provincia.IDTeamplace = NullID) then
    Aplicacion.RaiseExceptionCreate('Primero debe migrar la provincia a Teamplace');

  //if (_L.IDTeamplace <> NullID) then
    //Aplicacion.RaiseExceptionCreate('La localidad ya existe en Teamplace');

  if (_L.IDTeamplace <> NullID) then
    Result := Aplicacion.Sesion.ConexionTeamPlace.Update_Record(TLocalidadDM._TeamplaceTableName,
      ['ProvinciaID', 'Nombre', 'Codigo', 'Activo'], [IntToStr(_L.Provincia.IDTeamplace), QuotedStr(_L.Descripcion), IntToStr(_L.ID), '1'], TLocalidadDM._TeamplaceID + '=' + IntToStr(_L.IDTeamplace))
  else
    Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TLocalidadDM._TeamplaceTableName,
    ['ProvinciaID', 'Nombre', 'Codigo', 'Activo'], [IntToStr(_L.Provincia.IDTeamplace), QuotedStr(_L.Descripcion), IntToStr(_L.ID), '1']);
end;

procedure TLocalidad.Delete;
Var
  DL: TDepositoList;
  EL: TEmpresaList;
  // RL : TRemitoList;
  VL: TVendedorList;
begin
  Try
    DL := TDepositoList.CreateByLocalidad(self);
    EL := TEmpresaList.CreateByLocalidad(self);
    // RL:=TRemitolist.CreateByLocalidad (Self);
    VL := TVendedorList.CreateByLocalidad(self);
    IF DL.Count > 0 then
      Aplicacion.RaiseExceptionCreate(
        'No se puede eliminar la Localidad porque esta asignada a un deposito');
    IF EL.Count > 0 then
      Aplicacion.RaiseExceptionCreate(
        'No se puede eliminar la Localidad esta porque asignada a una empresa');
    // IF RL.Count>0 then
    // Aplicacion.RaiseExceptionCreate ('No se puede eliminar la Localidad esta porque asignada a un remito');
    IF VL.Count > 0 then
      Aplicacion.RaiseExceptionCreate(
        'No se puede eliminar la Localidad esta asignada a un vendedor');
  Finally
    FreeAndNil(DL);
    FreeAndNil(EL);
    // FreeAndNil (RL);
    FreeAndNil(VL);
  End;
  inherited;
end;

function TLocalidad.GetDescripcionConProvinciaYPais: string;
begin
  Result := self.Descripcion + ', ' + self.provincia.Descripcion + ', ' + self.provincia.pais.Descripcion;
end;

function TLocalidad.GetDescripcionConProvinciaYPaisEnIngles: string;
begin
  Result := self.Descripcion + ', ' + self.provincia.Descripcion + ', ' +   self.provincia.pais.DescripcionEnIngles;
end;

function TLocalidad.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TLocalidadDM._TeamplaceTableName, TLocalidadDM._TeamplaceCodigo + ' = ' + QuotedStr( IntToStr( ID ) ), TLocalidadDM._TeamplaceID);
  Result := FIDTeamplace;
end;

{ TLocalidadDM }
class function TLocalidadDM.TableName: string;
begin
  Result := 'localidades';
end;

class function TLocalidadDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TLocalidadDM.ID_FieldName: string;
begin
  Result := 'LocalidadID';
end;

procedure TLocalidadDM.PopulateFields(PDObject: TPDObject);
begin
  with TLocalidad(PDObject) do
  begin
    StringField[_Descripcion]  := Descripcion;
    IDField[_ProvinciaID]      := FprovinciaID;
    StringField[_CodigoPostal] := FCodigoPostal;
    BooleanField[_EsInactivo]  := EsInactivo;
  end;
end;

procedure TLocalidadDM.PopulateObject(PDObject: TPDObject);
begin
  with TLocalidad(PDObject) do
  begin
    Descripcion  := StringField[_Descripcion];
    provinciaID  := IDField[_ProvinciaID];
    CodigoPostal := StringField[_CodigoPostal];
    EsInactivo   := BooleanField[_EsInactivo];
  end;
end;

{ TLocalidadList }
function TLocalidadList.GetActual: TLocalidad;
begin
  Result := TLocalidad(CurrentObject);
end;

function TLocalidadList.CreateNewObject: TPDObject;
begin
  Result := TLocalidad.Create;
end;

function TLocalidadList.FindCodigoPostal(_CP: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(Actual.CodigoPostal) = uppercase(_CP));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TLocalidadList.FindDescripcion(_Des: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(Actual.Descripcion) = uppercase(_Des));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TLocalidadList.CreateAll;
begin
  inherited Create(TLocalidad, TLocalidadDM.CreateAll(False));
end;

constructor TLocalidadList.CreateByCodigoPostal(_CP: String);
  Function WhereString : String;
  begin
    Result := TLocalidadDM._CodigoPostal + '=' + quotedstr(_CP);
  end;
begin
  inherited Create(TLocalidad, TLocalidadDM.CreateAll(False, WhereString));
end;

constructor TLocalidadList.CreateByCodigoPostalLike(_CP: String; findAll: Boolean);
  Function WhereString : String;
  begin
    if Copy(_CP, length(_CP), 1) <> '%' then
      _CP := _CP + '%';

    if Copy(_CP, 1, 1) <> '%' then
      begin
        Result := 'lower(' + TLocalidadDM._CodigoPostal +') like ' + quotedstr(lowerCase(_CP));
        if findAll then
          Result := Result + ' or lower(' + TLocalidadDM._CodigoPostal +') like ' + quotedstr('%' + lowerCase(_CP));
      end
    else
      Result := 'lower(' + TLocalidadDM._CodigoPostal +') like ' + quotedstr(lowerCase(_CP)) + ' order by ' + TLocalidadDM._Descripcion;
  end;
begin
  inherited Create(TLocalidad, TLocalidadDM.CreateAll( false, WhereString, False, TLocalidadDM._CodigoPostal + ', ' + TLocalidadDM._Descripcion ));
end;

constructor TLocalidadList.CreateByProvincia(_P: TProvincia);
  Function WhereString : String;
  begin
    Result := TLocalidadDM._ProvinciaID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TLocalidad, TLocalidadDM.CreateAll( false, WhereString, False, TLocalidadDM._Descripcion ));
end;

procedure TAbstractEmpresa.SetesCliente(const Value: TBoolean);
begin
  // if self.IsAssigned and (self.ID=aplicacion.Empresa.ID) then
  // FesCliente := false
  // else
  FesCliente := Value;
end;

procedure TAbstractEmpresa.SetesProveedor(const Value: TBoolean);
begin
  // if self.IsAssigned and (self.ID=aplicacion.Empresa.ID) then
  // FesProveedor := false
  // else
  FesProveedor := Value;
end;

function TAbstractEmpresa.GetesCliente: TBoolean;
begin
  // if self.IsAssigned and (self.codigo=aplicacion.Parametros. ) then
  // Result := false
  // else
  Result := FesCliente;
end;

function TAbstractEmpresa.GetEsDireccionEnIngles: TBoolean;
begin
  Result := Localidad.pais.EsDireccionEnIngles;
end;

function TAbstractEmpresa.GetEsEmpresaNueva: TBoolean;
var
  PVL : TPedidoDeVentaList;
begin
  Result := True;
  try
    PVL := TPedidoDeVentaList.CreateByCliente( TCliente(Self), 25, TAbstractEmpresaDM.TableName + '.' + TAbstractEmpresaDM.ID_FieldName + ' asc' );
    if (PVL.Count > 0) then
      begin
        PVL.First;
        while not PVL.IsLast do
          begin
            if (PVL.Actual.EstadoDePedidoDeVenta.EsEstadoDePedidoPendiente) or (PVL.Actual.EstadoDePedidoDeVenta.Codigo = Aplicacion.ConstantAllocator.CodigoEstadoDocumento_Cumplido) then
              Begin
                Result := False;
                exit;
              End;
            PVL.Next;
          end;
      end;
  finally
    FreeAndNil(PVL);
  end;
end;

function TAbstractEmpresa.GetEsExportacion: Boolean;
begin
  if (LocalidadID <> NullID) then
    FEsExportacion := (CategoriaDeCliente.TipoDePedidoDeVenta.EsExportacion);
  Result := FEsExportacion;
end;

function TAbstractEmpresa.GetesLicenciatario: TBoolean;
var
  LL: TLicenciatarioList;
begin
  if (FesLicenciatario = null) then
    try
      LL := TLicenciatarioList.CreateByLicenciado(self);
      FesLicenciatario := LL.Count > 0;
    finally
      FreeAndNil(LL);
    end;
  Result := FesLicenciatario;
end;

function TAbstractEmpresa.GetesProveedor: TBoolean;
begin
  // if self.IsAssigned and (self.ID=aplicacion.Empresa.ID) then
  // Result := false
  // else
  Result := FesProveedor;
end;


{ TEstadoDeBanco }
function TEstadoDeBanco.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeBancoList;
end;

constructor TEstadoDeBanco.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDeBancoDM);
  Fadvertir := null;
  Frechazar := null;
  FtextoAdvertencia := null;
end;

function TEstadoDeBanco.Save: Boolean;
begin
  if (Fadvertir) and (Frechazar) then
    Aplicacion.RaiseExceptionCreate(
      'Al rechazar los valores se mostrará una advertencia, por lo cual no es necesario marcar en la columna "Advertir Estado?". Quite esta marca para poder continuar.');
  Result := inherited Save;
end;

function TEstadoDeBanco.GetMensajeDeAdvertencia: TString;
begin
  if FtextoAdvertencia <> '' then
    Result := FtextoAdvertencia
  else
    Result := 'El estado del banco es "' + Fdescripcion + '".';

  if Frechazar then
    Result := ' No se pueden aceptar estos valores.'

end;

{ TEstadoDeBancoDM }
class function TEstadoDeBancoDM.TableName: string;
begin
  Result := 'estadosdebancos';
end;

class function TEstadoDeBancoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeBancoDM.ID_FieldName: string;
begin
  Result := 'EstadoDeBancoID';
end;

procedure TEstadoDeBancoDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeBanco(PDObject) do
  begin
    StringField[_Codigo]           := codigo;
    StringField[_Descripcion]      := Descripcion;
    BooleanField[_advertir]        := advertir;
    BooleanField[_rechazar]        := rechazar;
    StringField[_textoAdvertencia] := textoAdvertencia;
    BooleanField[_EsInactivo]      := EsInactivo;
  end;
end;

procedure TEstadoDeBancoDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeBanco(PDObject) do
  begin
    codigo := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    advertir := BooleanField[_advertir];
    rechazar := BooleanField[_rechazar];
    textoAdvertencia := StringField[_textoAdvertencia];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDeBancoList }
function TEstadoDeBancoList.GetActual: TEstadoDeBanco;
begin
  Result := TEstadoDeBanco(CurrentObject);
end;

function TEstadoDeBancoList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeBanco.Create;
end;

constructor TEstadoDeBancoList.CreateAll;
begin
  inherited Create(TEstadoDeBanco, TEstadoDeBancoDM.CreateAll(False));
end;

function TAbstractEmpresa.getEstadoDeBanco: TEstadoDeBanco;
begin
  if not assigned(FEstadoDeBanco) then
    GetObject(TEstadoDeBanco, FEstadoDeBanco, EstadoDeBancoID);

  Result := TEstadoDeBanco(FEstadoDeBanco);

end;

procedure TAbstractEmpresa.SetEstadoDeBancoID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeBancoID) and assigned(FEstadoDeBanco) then
    FreeAndNil(FEstadoDeBanco);

  FEstadoDeBancoID := Value;
end;

procedure TAbstractEmpresa.ValidarBanco;
begin
  If FesBanco then
    Begin
      if FcodigoDeBanco = '' then
        Aplicacion.RaiseExceptionCreate('Esta empresa es un banco por lo cual es obligatorio informar el código del banco correspondiente.');

      if FEstadoDeBancoID = NullID then
        Aplicacion.RaiseExceptionCreate('Esta empresa es un banco por lo cual es obligatorio informar el estado financiero del banco correspondiente.');
    End
  else
  Begin
    FcodigoDeBanco := '';
    SetEstadoDeBancoID(0);
  End;
end;

procedure TAbstractEmpresa.ValidarCodigoDeBancoDuplicado(_CodBanco: String; _ID: TObjectID);
Var
  BL: TEmpresaList;
begin
  Try
    If _CodBanco <> '' then
    Begin
      BL := TEmpresaList.CreateByCodigoDeBancoYIDDiferente(_CodBanco, _ID);
      If BL.Count > 0 then
      Begin
        BL.First;
        Aplicacion.RaiseExceptionCreate('El código de Banco "' + _CodBanco + '" ya está asignado a la empresa "' + BL.Actual.codigo + ' - ' + BL.Actual.Descripcion + '".');
      end;
    end;
  Finally
    FreeAndNil(BL);
  end;
end;

{ TCategoriaDeTerminacionesPosibles }
constructor TCategoriaDeTerminacionesPosibles.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM
    (TCategoriaDeTerminacionesPosiblesDM);
  FTerminacionesPosibles := Nil;
end;

Procedure TCategoriaDeTerminacionesPosibles.Delete;
Var
  AL: TArticuloList;
begin
  Try
    AL := TArticuloList.CreateByCategoriaDeTerminacion(self, False);
    if AL.Count > 0 then
      Aplicacion.RaiseExceptionCreate(
        'No se puede eliminar la Categoria de Terminacion Posible, porque ya ha sido utilizada en algunos Articulos');

    if TerminacionesPosibles.Count > 0 then
      TerminacionesPosibles.DeleteAll;

    inherited Delete;
  Finally
    FreeAndNil(AL);
  End;

end;

function TCategoriaDeTerminacionesPosibles.GetDescriptibleAbreviadoListClass : TDescriptibleAbreviadoListClass;
begin
  Result := TCategoriaDeTerminacionesPosiblesList;
end;

function TCategoriaDeTerminacionesPosibles.GetTerminacionesPosibles : TCategoriaDeTerminacionesTerminacionPosibleList;
begin
  If not assigned(FTerminacionesPosibles) Then
    FTerminacionesPosibles := TCategoriaDeTerminacionesTerminacionPosibleList.CreateByCategoriaDeTerminacionesPosibles(self);
  Result := TCategoriaDeTerminacionesTerminacionPosibleList(FTerminacionesPosibles);
end;

{ TCategoriaDeTerminacionesPosiblesDM }
class function TCategoriaDeTerminacionesPosiblesDM.TableName: string;
begin
  Result := 'catDeTermsPosibles';
end;

class function TCategoriaDeTerminacionesPosiblesDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCategoriaDeTerminacionesPosiblesDM.ID_FieldName: string;
begin
  Result := 'CatDeTermsPosiblesID';
end;

procedure TCategoriaDeTerminacionesPosiblesDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesPosibles(PDObject) do
    begin
      StringField[_Codigo]                              := Fcodigo;
      StringField[_Descripcion]                         := Fdescripcion;
      FloatField[_PorcentajeAjustePrecioTerminacion]    := FPorcentajeAjustePrecioTerminacion;
      FloatField[_PorcentajeAjustePrecioProceso]        := FPorcentajeAjustePrecioProceso;
      FloatField[_PorcentajeAjustePrecioEspecificacion] := FPorcentajeAjustePrecioEspecificacion;
      BooleanField[_EsInactivo]                         := EsInactivo;
    end;
end;

procedure TCategoriaDeTerminacionesPosiblesDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesPosibles(PDObject) do
    begin
      Fcodigo                               := StringField[_Codigo];
      Fdescripcion                          := StringField[_Descripcion];
      FPorcentajeAjustePrecioTerminacion    := FloatField[_PorcentajeAjustePrecioTerminacion];
      FPorcentajeAjustePrecioProceso        := FloatField[_PorcentajeAjustePrecioProceso];
      FPorcentajeAjustePrecioEspecificacion := FloatField[_PorcentajeAjustePrecioEspecificacion];
      EsInactivo                            := BooleanField[_EsInactivo];
    end;
end;

{ TCategoriaDeTerminacionesPosiblesList }
function TCategoriaDeTerminacionesPosiblesList.GetActual : TCategoriaDeTerminacionesPosibles;
begin
  Result := TCategoriaDeTerminacionesPosibles(CurrentObject);
end;

constructor TCategoriaDeTerminacionesPosiblesList.CreateEmpty;
begin
  inherited Create(TCategoriaDeTerminacionesPosibles, TCategoriaDeTerminacionesPosiblesDM.CreateEmpty);
end;

function TCategoriaDeTerminacionesPosiblesList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeTerminacionesPosibles.Create;
end;

function TCategoriaDeTerminacionesPosiblesList.Find(_Descripcion: String)
  : Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.Descripcion) = lowerCase(_Descripcion));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCategoriaDeTerminacionesPosiblesList.CreateAll;
  Function OrderBy  : String;
  begin
    Result := TCategoriaDeTerminacionesPosiblesDM.TableName + '.' + TCategoriaDeTerminacionesPosiblesDM._Descripcion;
  end;
begin
  inherited Create(TCategoriaDeTerminacionesPosibles, TCategoriaDeTerminacionesPosiblesDM.CreateAll(False, '', False , OrderBy));
end;

function TCategoriaDeTerminacionesTerminacionPosible.GetCategoriaDeTerminacionesPosibles: TCategoriaDeTerminacionesPosibles;
begin
  if not assigned(FCategoriaDeTerminacionesPosibles) then
    GetObject(TCategoriaDeTerminacionesPosibles, FCategoriaDeTerminacionesPosibles, FCategoriaDeTerminacionesPosiblesID);

  Result := TCategoriaDeTerminacionesPosibles(FCategoriaDeTerminacionesPosibles);

end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateByCategoriaDeTerminacionesPosibles(_CTP: TCategoriaDeTerminacionesPosibles);
  Function WhereString: String;
  begin
    Result := '( ' + TTerminacionDM.TableName + '.' + TTerminacionDM._esInactivo + ' = 0 )';
    Result := Result + ' and ( ' + TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._CatDeTermsPosiblesID + '=' + IntToStr(_CTP.ID) + ')';
  end;
  Function OrderBy: String;
  begin
    Result := TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo;
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( False, WhereString, False, OrderBy ));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateByCategoriaDeTerminacionesPosiblesLike(_CTP: TCategoriaDeTerminacionesPosibles; _CodigoTerminacionLike: String);
  Function WhereString: String;
  var
    CLike: String;
  begin
    CLike := StringReplace(_CodigoTerminacionLike, '%', '', [rfReplaceall]);
    CLike := '%' + CLike + '%';

    Result := '( ' + TTerminacionDM.TableName + '.' + TTerminacionDM._esInactivo + ' = 0 )';
    Result := Result + ' and ( ' + TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.';
    Result := Result + TCategoriaDeTerminacionesTerminacionPosibleDM._CatDeTermsPosiblesID + '=' + IntToStr(_CTP.ID) + ') and (lower(' + TTerminacionDM.TableName + '.' + TTerminacionDM._Codigo + ') like ' + quotedstr(lowerCase(CLike))+')';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateByCategoriaYTerminacionYProcesoLike(_C: TCategoriaDeTerminacionesPosibles; _T: TTerminacion; _P: String);
  Function WhereString: String;
  begin
    Result := '('+TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._CatDeTermsPosiblesID + '=' + IntToStr(_C.ID) + ') and (';
    Result := Result + TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._terminacionID + '=' + IntToStr(_T.ID) + ') and (';
    Result := Result + TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._CatDeTermsPosiblesID + '=' + IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( false, WhereString ));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleList.CreateByCategoriaYTerminacion(_C: TCategoriaDeTerminacionesPosibles; _T: TTerminacion; _SoloActivos : Boolean);
  Function WhereString: String;
  begin
    Result := '('+TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._CatDeTermsPosiblesID + '=' + IntToStr(_C.ID) + ') and (' ;
    Result := Result + TCategoriaDeTerminacionesTerminacionPosibleDM.TableName + '.' + TCategoriaDeTerminacionesTerminacionPosibleDM._TerminacionID + '=' + IntToStr(_T.ID) + ')';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosible, TCategoriaDeTerminacionesTerminacionPosibleDM.CreateAll( False, WhereString, _SoloActivos ));
end;

function TAbstractEmpresa.GetContactoResponsableID: TContactoDeEmpresa;
begin
  if not Assigned(FContactoResponsable) then
    GetObject(TContactoDeEmpresa, FContactoResponsable, FContactoResponsableID);
  Result := TContactoDeEmpresa(FContactoResponsable);

end;

procedure TAbstractEmpresa.SetContactoResponsableID(const Value: TObjectID);
begin
  if (Value <> FContactoResponsableID) and Assigned(FContactoResponsable) then
    FreeAndNil(FContactoResponsable);
  FContactoResponsableID := Value;
end;

procedure TAbstractEmpresa.SetPiso(const Value: TString);
begin
  FPiso := UpperCase(Value);
end;

procedure TAbstractEmpresa.SetPorcentajeDeTolerancia(const Value: TReal);
begin
  if (Value < 0) Or (Value > 100) then
    Aplicacion.RaiseExceptionCreate('El porcentaje debe estar entre 0 y 100');
  FPorcentajeDeTolerancia := Value;
end;

procedure TAbstractEmpresa.setEmailEmpresarial(const Value: TString);
begin
  IF (Value <> '') and (Not aplicacion.TextService.ValidarEmail(Value)) Then
    Aplicacion.RaiseExceptionCreate('Ingrese un  e-mail empresarial válido.');
  FEmailEmpresarial := Value;
end;

{ TEstadoDeAjusteDeStock }
function TEstadoDeAjusteDeStock.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeAjusteDeStockList;
end;

constructor TEstadoDeAjusteDeStock.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDeAjusteDeStockDM);
end;

{ TEstadoDeAjusteDeStockDM }
class function TEstadoDeAjusteDeStockDM.TableName: string;
begin
  Result := 'estadosDeAjusteDeStock';
end;

class function TEstadoDeAjusteDeStockDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeAjusteDeStockDM.ID_FieldName: string;
begin
  Result := 'EstadoAjusteDeStockID';
end;

procedure TEstadoDeAjusteDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeAjusteDeStock(PDObject) do
  begin
    StringField[_Codigo] := codigo;
    StringField[_Descripcion] := Descripcion;
  end;
end;

procedure TEstadoDeAjusteDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeAjusteDeStock(PDObject) do
  begin
    codigo := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
  end;
end;

{ TEstadoDeAjusteDeStockList }
function TEstadoDeAjusteDeStockList.GetActual: TEstadoDeAjusteDeStock;
begin
  Result := TEstadoDeAjusteDeStock(CurrentObject);
end;

function TEstadoDeAjusteDeStockList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeAjusteDeStock.Create;
end;

constructor TEstadoDeAjusteDeStockList.CreateAll( _soloActivos: Boolean);
begin
  inherited Create(TEstadoDeAjusteDeStock, TEstadoDeAjusteDeStockDM.CreateAll( False, '', _soloActivos));
end;

{ TEstadoDeCierreDeStock }
function TEstadoDeCierreDeStock.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeCierreDeStockList;
end;

constructor TEstadoDeCierreDeStock.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TEstadoDeCierreDeStockDM);
end;

{ TEstadoDeCierreDeStockDM }
class function TEstadoDeCierreDeStockDM.TableName: string;
begin
  Result := 'EstadosDeCierreDeStock';
end;

class function TEstadoDeCierreDeStockDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeCierreDeStockDM.ID_FieldName: string;
begin
  Result := 'EstadoCierreDeStockID';
end;

procedure TEstadoDeCierreDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeCierreDeStock(PDObject) do
  begin
    StringField[_Codigo] := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDeCierreDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeCierreDeStock(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDeCierreDeStockList }
function TEstadoDeCierreDeStockList.GetActual: TEstadoDeCierreDeStock;
begin
  Result := TEstadoDeCierreDeStock(CurrentObject);
end;

function TEstadoDeCierreDeStockList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeCierreDeStock.Create;
end;

constructor TEstadoDeCierreDeStockList.CreateAll;
begin
  inherited Create(TEstadoDeCierreDeStock, TEstadoDeCierreDeStockDM.CreateAll( False));
end;

function TAccesoDirecto.Save: Boolean;
begin
  if FMenuDePerfilID = NullID then
  Begin
    if fRutaEjecutable = '' then
      Aplicacion.RaiseExceptionCreate('Debe expecificar un menu relacionado');

    if (Fdescripcion = '') and (fRutaEjecutable = '') then
      Aplicacion.RaiseExceptionCreate('Debe ingresar una descripcion')
    else
      Fdescripcion := ExtractFileName(fRutaEjecutable);

  End;

  if (fIcono = 0) and (fRutaEjecutable = '') then
    Aplicacion.RaiseExceptionCreate('Debe seleccionar un ícono');

  Result := Inherited Save;
end;

procedure TAccesoDirecto.SetFMenuID(const Value: TObjectID);
begin
  if (Value <> FMenuDePerfilID) and assigned(FMEnuDePerfil) then
    FreeAndNil(FMEnuDePerfil);

  FMenuDePerfilID := Value;
end;

procedure TAccesoDirecto.SetRutaEjecutable(const Value: String);
begin
  fRutaEjecutable := Value;
end;

procedure TAccesoDirecto.SetUsuarioID(Value: TObjectID);
begin
  if (Value <> FUsuarioID) and assigned(FUsuario) then
    FreeAndNil(FUsuario);

  FUsuarioID := Value;

end;

destructor TAccesoDirecto.Destroy;
begin
  if assigned(FMEnuDePerfil) then
    FreeAndNil(FMEnuDePerfil);
  inherited;
end;

function TAccesoDirecto.GetMEnu: TMenuDePerfil;
begin
  if not assigned(FMEnuDePerfil) then
    GetObject(TMenuDePerfil, FMEnuDePerfil, MenuDePerfilID);

  Result := TMenuDePerfil(FMEnuDePerfil);

end;

function TAccesoDirecto.GetUsuario: TUsuario;
begin
  if not Assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);
  Result := TUsuario(FUsuario);
end;

{ TTAccesoDirectoDM }
class function TAccesoDirectoDM.TableName: string;
begin
  Result := 'AccesosDirectos';
end;

class function TAccesoDirectoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TAccesoDirectoDM.ID_FieldName: string;
begin
  Result := 'AccesoDirectoID';
end;

procedure TAccesoDirectoDM.PopulateFields(PDObject: TPDObject);
begin
  with TAccesoDirecto(PDObject) do
  begin
    IntegerField[_X]             := FX;
    IntegerField[_Y]             := FY;
    IntegerField[_Icono]         := FIcono;
    IDField[_UsuarioID]          := FUsuarioID;
    StringField[_Descripcion]    := Descripcion;
    StringField[_RutaEjecutable] := FRutaEjecutable;
    IDField[_MenuID]             := FMenuDePerfilID;
    BooleanField[_EsInactivo]    := EsInactivo;
  end;
end;

procedure TAccesoDirectoDM.PopulateObject(PDObject: TPDObject);
begin
  with TAccesoDirecto(PDObject) do
  begin
    FX              := IntegerField[_X];
    FY              := IntegerField[_Y];
    fIcono          := IntegerField[_Icono];
    FUsuarioID      := IDField[_UsuarioID];
    Descripcion     := StringField[_Descripcion];
    fRutaEjecutable := StringField[_RutaEjecutable];
    FMenuDePerfilID := IDField[_MenuID];
    EsInactivo      := BooleanField[_EsInactivo];
  end;
end;

{ TAccesoDirectoList }
function TAccesoDirectoList.GetActual: TAccesoDirecto;
begin
  Result := TAccesoDirecto(CurrentObject);
end;

procedure TAccesoDirectoList.GrabarIcono(_A: TAccesoDirecto);
begin
  Actual.Load(_A.ID);
  Actual.X := _A.X;
  Actual.Y := _A.Y;
  Actual.Save;
  ApplyUpdates;
end;

constructor TAccesoDirectoList.CreateByMenuDePerfil(_M: TMenuDePerfil);
  Function WhereString : String;
  begin
    Result := TAccesoDirectoDM._MenuID + '=' + IntToStr(_M.ID);
  end;
begin
  inherited Create(TAccesoDirecto, TAccesoDirectoDM.CreateAll(False, WhereString));
end;

constructor TAccesoDirectoList.CreateByUsuario(_U: TUsuario);
  Function WhereString : String;
  begin
    Result := TAccesoDirectoDM._UsuarioID + '=' + IntToStr(_U.ID);
  end;
begin
  inherited Create(TAccesoDirecto, TAccesoDirectoDM.CreateAll(False, WhereString));
end;

constructor TAccesoDirectoList.CreateEmpty;
begin
  inherited Create(TAccesoDirecto, TAccesoDirectoDM.CreateEmpty);
end;

function TAccesoDirectoList.CreateNewObject: TPDObject;
begin
  Result := TAccesoDirecto.Create;
end;

procedure TAccesoDirectoList.DeleteAll;
begin
  if Count = 0 then
    exit;

  First;
  repeat
    DeleteCurrent;
    next;
  until IsLast;
end;

constructor TAccesoDirectoList.CreateAll;
begin
  inherited Create(TAccesoDirecto, TAccesoDirectoDM.CreateAll(False));
end;

{ TCostoCunio }
constructor TCostoCunio.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TCostoCunioDM);
  FCosto     := null;
end;

procedure TCostoCunio.SetTipoDeCostoID(Value: TObjectID);
begin
  if (Value <> FTipoDeCostoID) and assigned(FTipoDeCosto) then
    FreeAndNil(FTipoDeCosto);
  FTipoDeCostoID := Value;
end;

function TCostoCunio.GetTipoDeCosto: TTipoDeCosto;
begin
  if not assigned(FTipoDeCosto) then
    GetObject(TTipoDeCosto, FTipoDeCosto, TipoDeCostoID);
  Result := TTipoDeCosto(FTipoDeCosto);
end;

procedure TCostoCunio.SetMonedaID(Value: TObjectID);
begin
  if (Value <> FMonedaID) and assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

function TCostoCunio.GetMoneda: TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda, FMoneda, MonedaID);
  Result := TMoneda(FMoneda);
end;

procedure TCostoCunio.SetCunioID(Value: TObjectID);
begin
  if (Value <> FCunioID) and assigned(FCunio) then
    FreeAndNil(FCunio);
  FCunioID := Value;
end;

function TCostoCunio.GetCunio: TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio, FCunio, CunioID);
  Result := TCunio(FCunio);
end;

{ TCostoCunioDM }
Class function TCostoCunioDM.TableName: string;
begin
  Result := 'costoscunios';
end;

class function TCostoCunioDM.ID_FieldName: string;
begin
  Result := 'CostoCunioID';
end;

procedure TCostoCunioDM.PopulateFields(PDObject: TPDObject);
begin
  with TCostoCunio(PDObject) do
  begin
    IDField[_TipoDeCostoID] := FTipoDeCostoID;
    FloatField[_Costo] := FCosto;
    IDField[_MonedaID] := FMonedaID;
    IDField[_CunioID] := FCunioID;
  end;
end;

procedure TCostoCunioDM.PopulateObject(PDObject: TPDObject);
begin
  with TCostoCunio(PDObject) do
  begin
    FTipoDeCostoID := IDField[_TipoDeCostoID];
    FCosto := FloatField[_Costo];
    FMonedaID := IDField[_MonedaID];
    FCunioID := IDField[_CunioID];
  end;
end;

{ TCostoCunioList }
function TCostoCunioList.GetActual: TCostoCunio;
begin
  Result := TCostoCunio(CurrentObject);
end;

constructor TCostoCunioList.CreateByCunio(_C: TCunio);
  Function WhereString : String;
  begin
    Result := TCostoCunioDM._CunioID + ' = ' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TCostoCunio,  TCostoCunioDM.CreateAll(False, WhereString ));
end;

function TCostoCunioList.CreateNewObject: TPDObject;
begin
  Result := TCostoCunio.Create;
end;

constructor TCostoCunioList.CreateAll;
begin
  inherited Create(TCostoCunio, TCostoCunioDM.CreateAll( False));
end;

{ TInsumoCunio }
constructor TInsumoCunio.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TInsumoCunioDM);
  FCantidad  := null;
end;

procedure TInsumoCunio.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);

  FMateriaPrimaID := Value;
end;

procedure TInsumoCunio.SetUnidadDeMedidaID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaID) and assigned(FUnidadDeMedida) then
    FreeAndNil(FUnidadDeMedida);

  FUnidadDeMedidaID := Value;
end;

function TInsumoCunio.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);

  Result := TMateriaPrima(FMateriaPrima);
end;

function TInsumoCunio.GetUnidadDeMedida: TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedida) then
    GetObject(TUnidadDeMedida, FUnidadDeMedida, UnidadDeMedidaID);

  Result := TUnidadDeMedida(FUnidadDeMedida);
end;

procedure TInsumoCunio.SetCunioID(Value: TObjectID);
begin
  if (Value <> FCunioID) and assigned(FCunio) then
    FreeAndNil(FCunio);

  FCunioID := Value;

end;

function TInsumoCunio.GetCunio: TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio, FCunio, CunioID);

  Result := TCunio(FCunio);
end;

{ TInsumoCunioDM }
Class function TInsumoCunioDM.TableName: string;
begin
  Result := 'InsumosCunios';
end;

class function TInsumoCunioDM.ID_FieldName: string;
begin
  Result := 'InsumoCunioID';
end;

procedure TInsumoCunioDM.PopulateFields(PDObject: TPDObject);
begin
  with TInsumoCunio(PDObject) do
  begin
    IDField[_CunioID]          := FCunioID;
    IDField[_MateriaPrimaID] := FMateriaPrimaID;
    FloatField[_Cantidad] := Cantidad;
    IDField[_UnidadDeMedidaID] := FUnidadDeMedidaID;
  end;
end;

procedure TInsumoCunioDM.PopulateObject(PDObject: TPDObject);
begin
  with TInsumoCunio(PDObject) do
  begin
    FCunioID          := IDField[_CunioID];
    FMateriaPrimaID := IDField[_MateriaPrimaID];
    Cantidad := FloatField[_Cantidad];
    FUnidadDeMedidaID := IDField[_UnidadDeMedidaID];
  end;
end;

{ TInsumoCunioList }
function TInsumoCunioList.GetActual: TInsumoCunio;
begin
  Result := TInsumoCunio(CurrentObject);
end;

constructor TInsumoCunioList.CreateByCunio(_C: TCunio);
begin
  inherited Create(TInsumoCunio, TInsumoCunioDM.CreateAll(False,TInsumoCunioDM._CunioID + ' = ' + IntToStr(_C.ID)));
end;

function TInsumoCunioList.CreateNewObject: TPDObject;
begin
  Result := TInsumoCunio.Create;
end;

constructor TInsumoCunioList.CreateAll;
begin
  inherited Create(TInsumoCunio, TInsumoCunioDM.CreateAll(False));
end;

{ TOperacionPermitidaDeUsuario }
function TOperacionPermitidaDeUsuario.GetDescriptibleAbreviadoListClass;
begin
  Result := TOperacionPermitidaDeUsuarioList;
end;

constructor TOperacionPermitidaDeUsuario.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TOperacionPermitidaDeUsuarioDM);
end;

{ TOperacionPermitidaDeUsuarioDM }
class function TOperacionPermitidaDeUsuarioDM.TableName: string;
begin
  Result := 'operacionpermitidadeusuarios';
end;

class function TOperacionPermitidaDeUsuarioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TOperacionPermitidaDeUsuarioDM.ID_FieldName: string;
begin
  Result := 'OperacionPermitidaDeUsuarioID';
end;

procedure TOperacionPermitidaDeUsuarioDM.PopulateFields(PDObject: TPDObject);
begin
  with TOperacionPermitidaDeUsuario(PDObject) do
  begin
    StringField[_Codigo] := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TOperacionPermitidaDeUsuarioDM.PopulateObject(PDObject: TPDObject);
begin
  with TOperacionPermitidaDeUsuario(PDObject) do
  begin
    codigo := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TOperacionPermitidaDeUsuarioList }
function TOperacionPermitidaDeUsuarioList.GetActual
  : TOperacionPermitidaDeUsuario;
begin
  Result := TOperacionPermitidaDeUsuario(CurrentObject);
end;

function TOperacionPermitidaDeUsuarioList.CreateNewObject: TPDObject;
begin
  Result := TOperacionPermitidaDeUsuario.Create;
end;

constructor TOperacionPermitidaDeUsuarioList.CreateAll;
begin
  inherited Create(TOperacionPermitidaDeUsuario, TOperacionPermitidaDeUsuarioDM.CreateAll(False));
end;

{ TTipoDeUsuario }
constructor TTipoDeUsuario.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeUsuarioDM);
  nombreClaseFormulario := '';
end;

procedure TTipoDeUsuario.Delete;
begin
  If (Operaciones.Count > 0) then
  Begin
    If (aplicacion.Mensaje(
        'Este tipo de usuario contiene operaciones asignadas. Se eliminaran ' +
          ' todas esas asociaciones. Prosigue ?', 'ATENCION',
        MB_YESNO) = ID_YES) then
      Operaciones.DeleteAll
    else
      Abort;
  End;
  Inherited;

end;

destructor TTipoDeUsuario.destroy;
begin
  if assigned( FOperacionesPorFormulario ) then
    FreeAndNil(FOperacionesPorFormulario);
  if assigned( FOperaciones ) then
    FreeAndNil(FOperaciones);
  inherited;
end;

function TTipoDeUsuario.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeUsuarioList;
end;

function TTipoDeUsuario.GetOperaciones: TTipoDeUsuarioOperacionPermitidaList;
begin
  If not Assigned(FOperaciones) Then
    FOperaciones := TTipoDeUsuarioOperacionPermitidaList.CreateByTipodeUsuario(Self);
  Result := FOperaciones;
end;

function TTipoDeUsuario.GetOperacionesPorFormulario: TTipoDeUsuarioOperacionPermitidaList;
begin
  If not Assigned(FOperacionesPorFormulario) Then
    FOperacionesPorFormulario := TTipoDeUsuarioOperacionPermitidaList.CreateByTipodeUsuarioAndClassNameForm( Self, nombreClaseFormulario );
  Result := FOperacionesPorFormulario;

end;

procedure TTipoDeUsuario.SetNombreClaseFormulario(const Value: String);
begin
  if ( fnombreClaseFormulario <> Value ) and Assigned( FOperacionesPorFormulario )  then
    FreeAndNil( FOperacionesPorFormulario );
  fnombreClaseFormulario := Value;
end;

{ TTipoDeUsuarioDM }
Class function TTipoDeUsuarioDM.TableName: string;
begin
  Result := 'Tiposdeusuario';
end;

class function TTipoDeUsuarioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TTipoDeUsuarioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeUsuarioDM.ID_FieldName: string;
begin
  Result := 'TipoDeUsuarioID';
end;

procedure TTipoDeUsuarioDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeUsuario(PDObject) do
  begin
    StringField[_TipoDeUsuario] := Fdescripcion;
    StringField[_Codigo]        := Fcodigo;
    BooleanField[_EsInactivo]   := EsInactivo;
  end;
end;

procedure TTipoDeUsuarioDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeUsuario(PDObject) do
    begin
      Fdescripcion := StringField[TTipoDeUsuarioDM._TipoDeUsuario];
      Fcodigo      := StringField[TTipoDeUsuarioDM._Codigo];
      FEsInactivo  := BooleanField[_EsInactivo];
    end;
end;

{ TTipoDeUsuarioList }
function TTipoDeUsuarioList.GetActual: TTipoDeUsuario;
begin
  Result := TTipoDeUsuario(CurrentObject);
end;

constructor TTipoDeUsuarioList.CreateByOperacion(_O: TOperacionPermitidaDeUsuario);
  Function WhereString : String;
  begin
    Result := TTipoDeUsuarioDM._fOperacionPermitidaDeUsuarioID + ' = ' + IntToStr(_O.ID);
  end;
begin
  inherited Create(TTipoDeUsuario, TTipoDeUsuarioDM.CreateAll( False, WhereString ));
end;

function TTipoDeUsuarioList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeUsuario.Create;
end;

constructor TTipoDeUsuarioList.CreateAll( _Soloactivos : Boolean );
begin
  inherited Create(TTipoDeUsuario, TTipoDeUsuarioDM.CreateAll( False, '', _Soloactivos ));
end;

{ TTipoDeUsuarioOperacionPermitida }
constructor TTipoDeUsuarioOperacionPermitida.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM
    (TTipoDeUsuarioOperacionPermitidaDM);
end;

function TTipoDeUsuarioOperacionPermitida.GetMenuAplicacion: TMenuAplicacion;
begin
  if not assigned(FMenuAplicacion) then
    GetObject(TMenuAplicacion, FMenuAplicacion, FMenuAplicacionID);

  Result := TMenuAplicacion(FMenuAplicacion);

end;

function TTipoDeUsuarioOperacionPermitida.GetOperacionPermitidaDeUsuario
  : TOperacionPermitidaDeUsuario;
begin
  if not assigned(FOperacionPermitidaDeUsuario) then
    GetObject(TOperacionPermitidaDeUsuario, FOperacionPermitidaDeUsuario,
      FOperacionPermitidaDeUsuarioID);

  Result := TOperacionPermitidaDeUsuario(FOperacionPermitidaDeUsuario);
end;

function TTipoDeUsuarioOperacionPermitida.GetTipoDeUsuario: TTipoDeUsuario;
begin
  if not assigned(FTipoDeUsuario) then
    GetObject(TTipoDeUsuario, FTipoDeUsuario, FTipoDeUSuarioID);

  Result := TTipoDeUsuario(FTipoDeUsuario);

end;

function TTipoDeUsuarioOperacionPermitida.Save: Boolean;
begin
  If FOperacionPermitidaDeUsuarioID = NullID Then
    Aplicacion.RaiseExceptionCreate(
      'No puede guardar un item sin asignarle una operacion');

  Result := inherited Save;
end;

procedure TTipoDeUsuarioOperacionPermitida.SetMenuAplicacionID
  (const Value: TObjectID);
begin
  if (Value <> FMenuAplicacionID) and assigned(FMenuAplicacion) then
    FreeAndNil(FMenuAplicacion);

  FMenuAplicacionID := Value;
end;

procedure TTipoDeUsuarioOperacionPermitida.SetOperacionPermitidaDeUsuarioID
  (Value: TObjectID);
begin

  if (Value <> FOperacionPermitidaDeUsuarioID) and assigned
    (FOperacionPermitidaDeUsuario) then
    FreeAndNil(FOperacionPermitidaDeUsuario);

  FOperacionPermitidaDeUsuarioID := Value;

end;

procedure TTipoDeUsuarioOperacionPermitida.SetTipoDeUsuarioID(Value: TObjectID);
begin
  if (Value <> FTipoDeUSuarioID) and assigned(FTipoDeUsuario) then
    FreeAndNil(FTipoDeUsuario);

  FTipoDeUSuarioID := Value;

end;

{ TTipoDeUsuarioOperacionPermitidaDM }
class function TTipoDeUsuarioOperacionPermitidaDM.TableName: string;
begin
  Result := 'TipoDeUsuarioOperacionesPermitidas';
end;

class function TTipoDeUsuarioOperacionPermitidaDM.ID_FieldName: string;
begin
  Result := 'TipoDeUsuarioOperacionPermitidaID';
end;

procedure TTipoDeUsuarioOperacionPermitidaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeUsuarioOperacionPermitida(PDObject) do
    begin
      IDField[TTipoDeUsuarioOperacionPermitidaDM._OperacionPermitidaDeUsuarioID] := FOperacionPermitidaDeUsuarioID;
      IDField[TTipoDeUsuarioOperacionPermitidaDM._TipoDeUsuarioID]               := FTipoDeUSuarioID;
      IDField[TTipoDeUsuarioOperacionPermitidaDM._MenuID]                        := FMenuAplicacionID;
    end;
end;

procedure TTipoDeUsuarioOperacionPermitidaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeUsuarioOperacionPermitida(PDObject) do
    begin
      FOperacionPermitidaDeUsuarioID := IDField[TTipoDeUsuarioOperacionPermitidaDM._OperacionPermitidaDeUsuarioID];
      FTipoDeUSuarioID := IDField[TTipoDeUsuarioOperacionPermitidaDM._TipoDeUsuarioID];
      FMenuAplicacionID := IDField[TTipoDeUsuarioOperacionPermitidaDM._MenuID];
    end;
end;

{ TTipoDeUsuarioOperacionPermitidaList }
function TTipoDeUsuarioOperacionPermitidaList.GetActual: TTipoDeUsuarioOperacionPermitida;
begin
  Result := TTipoDeUsuarioOperacionPermitida(CurrentObject);
end;

function TTipoDeUsuarioOperacionPermitidaList.TienePermiso(_P: TString;_M: TMenuAplicacion): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  repeat
    Result := (Actual.MenuAplicacion.nombreClaseFormulario = _M.nombreClaseFormulario) and
     (Actual.OperacionPermitidaDeUsuario.codigo = _P);
    if not Result then
      next;
  until Result or IsLast;
end;

constructor TTipoDeUsuarioOperacionPermitidaList.CreateByTipodeUsuario(_T: TTipoDeUsuario);
  Function WhereString : String;
  begin
    Result := TTipoDeUsuarioOperacionPermitidaDM._TipoDeUsuarioID + ' = ' + IntToStr(_T.ID);
  end;
  Function OrderBy : String;
  begin
    Result := TTipoDeUsuarioOperacionPermitidaDM._MenuID;
  end;
begin
  inherited Create(TTipoDeUsuarioOperacionPermitida, TTipoDeUsuarioOperacionPermitidaDM.CreateAll( False, WhereString, False, OrderBy ));
end;

constructor TTipoDeUsuarioOperacionPermitidaList.CreateByTipodeUsuarioAndClassNameForm(_T: TTipoDeUsuario; _nombreClaseFormulario: String);
  Function WhereString : String;
  begin
    Result := '('+ TTipoDeUsuarioOperacionPermitidaDM._TipoDeUsuarioID + ' = ' + IntToStr(_T.ID) +') ';
    Result := Result + ' and (' + TTipoDeUsuarioOperacionPermitidaDM._MenuID + ' in ( select ';
    Result := Result + TMenuAplicacionDM.ID_FieldName + ' from ' + TMenuAplicacionDM.TableName +  ' where ' + TMenuAplicacionDM._NombreClaseFormulario + ' = ' + QuotedStr(_nombreClaseFormulario )+'))';
  end;
  Function OrderBy : String;
  begin
    Result := TTipoDeUsuarioOperacionPermitidaDM._MenuID + ', '+ TTipoDeUsuarioOperacionPermitidaDM._OperacionPermitidaDeUsuarioID;
  end;
begin
  inherited Create(TTipoDeUsuarioOperacionPermitida, TTipoDeUsuarioOperacionPermitidaDM.CreateAll( False, WhereString, False, OrderBy ));
end;

function TTipoDeUsuarioOperacionPermitidaList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeUsuarioOperacionPermitida.Create;
end;

function TTipoDeUsuarioOperacionPermitidaList.Find(_cod: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (UpperCase(Actual.OperacionPermitidaDeUsuario.Codigo) = UpperCase(_cod));
    except
      Result := False; // esto es porque a veces se produce un error
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TTipoDeUsuarioOperacionPermitidaList.CreateAll;
begin
  inherited Create(TTipoDeUsuarioOperacionPermitida, TTipoDeUsuarioOperacionPermitidaDM.CreateAll(False));
end;

{ TComposicionDeProducto }

class procedure TComposicionDeProducto.ArmarListaComponentes
  (_PL: TProductoList; _A: TArticulo; _T: TTerminacion; _C: TCunio);
Var
  ProList: TProductoList;
  P: TProducto;
begin
  // Armo la lista de Fabricados que existan como componentes del Articulo+Terminacion+Cunio
  ProList := TProductoList.CreateByCodigo(TFabricado.ArmarCodigoFabricado(_A,
      _T, _C, ''));

  If (ProList.Count > 0) then
  begin
    ProList.First;
    P := TProducto.Create;
    if P.Load(ProList.Actual.ID) then
      _PL.Add(P);
  end;

  FreeAndNil(ProList);

  If _A.componentes.Count > 0 Then
  Begin
    _A.componentes.First;
    Repeat
      If (_A.componentes.Actual.orden = 1) Then
      Begin
        ProList := TProductoList.CreateByCodigo
          (TFabricado.ArmarCodigoFabricado(_A.componentes.Actual.componente,
            _T, _C, ''));
        If (ProList.Count > 0) then
        begin
          ProList.First;
          P := TProducto.Create;
          if P.Load(ProList.Actual.ID) then
            _PL.Add(P);
        end;
        FreeAndNil(ProList);
      End
      Else
      Begin
        if _A.componentes.Actual.componente.HeredaCunioDelProductoFinal then
          ProList := TProductoList.CreateByCodigo
            (TFabricado.ArmarCodigoFabricado(_A.componentes.Actual.componente,
              _A.componentes.Actual.componente.TerminacionDefault, _C, ''))
        else
          ProList := TProductoList.CreateByCodigo
            (TFabricado.ArmarCodigoFabricado(_A.componentes.Actual.componente,
              _A.componentes.Actual.componente.TerminacionDefault,
              _A.componentes.Actual.componente.cunioDefault, ''));

        If (ProList.Count > 0) then
        begin
          ProList.First;
          P := TProducto.Create;
          if P.Load(ProList.Actual.ID) then
            _PL.Add(P);
        end;
        FreeAndNil(ProList);
      End;
      _A.componentes.next;
    Until _A.componentes.IsLast;
    _A.componentes.First;
  End;
  _PL.First;
end;

{ TFormularioObservacion }
constructor TFormularioObservacion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFormularioObservacionDM);
end;

function TFormularioObservacion.GetDescriptibleAbreviadoListClass
  : TDescriptibleAbreviadoListClass;
begin
  Result := TFormularioObservacionList;
end;

{ TFormularioObservacionDM }
class function TFormularioObservacionDM.TableName: string;
begin
  Result := 'formularioobservaciones';
end;

class function TFormularioObservacionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TFormularioObservacionDM.ID_FieldName: string;
begin
  Result := 'FormularioObservacionID';
end;

procedure TFormularioObservacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TFormularioObservacion(PDObject) do
  begin
    StringField[_Descripcion]    := Descripcion;
    StringField[_Codigo]         := Codigo;
    IDField[_TipoDeformularioID] := FTipoDeformularioID;
    BooleanField[_EsInactivo]    := EsInactivo;
  end;
end;

procedure TFormularioObservacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TFormularioObservacion(PDObject) do
  begin
    FDescripcion        := StringField[_Descripcion];
    FTipoDeformularioID := IDField[_TipoDeformularioID];
    Codigo              := StringField[_Codigo];
    EsInactivo          := BooleanField[_EsInactivo];
  end;
end;

{ TFormularioObservacionList }
function TFormularioObservacionList.GetActual: TFormularioObservacion;
begin
  Result := TFormularioObservacion(CurrentObject);
end;

constructor TFormularioObservacionList.CreateByFormulario(_F: TTipoDeFormulario);
begin
  inherited Create(TFormularioObservacion, TFormularioObservacionDM.CreateAll(False,TFormularioObservacionDM._TipoDeformularioID + '=' + IntToStr(_F.ID)));

end;

function TFormularioObservacionList.CreateNewObject: TPDObject;
begin
  Result := TFormularioObservacion.Create;
end;

constructor TFormularioObservacionList.CreateAll;
begin
  inherited Create(TFormularioObservacion, TFormularioObservacionDM.CreateAll(false));
end;

{ TTipoDeFormularioConceptoPosible }
constructor TTipoDeformularioConceptoPosible.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM
    (TTipoDeFormularioConceptoPosibleDM);
end;

procedure TTipoDeformularioConceptoPosible.SetTipoDeFormularioID
  (Value: TObjectID);
begin
  if (Value <> FTipoDeformularioID) and assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);

  FTipoDeformularioID := Value;

end;

function TTipoDeformularioConceptoPosible.GetTipoDeFormulario
  : TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, TipoDeformularioID);

  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDeformularioConceptoPosible.SEtCuentaContableID
  (Value: TObjectID);
begin
  if (Value <> FCuentaContableID) and assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);

  FCuentaContableID := Value;

end;

function TTipoDeformularioConceptoPosible.getcodigo: String;
begin
  Result := '';
  If assigned(FCuentaContable) then
    Result := TCuentaContable(FCuentaContable).codigo;

end;

function TTipoDeformularioConceptoPosible.GetCuentaContable: TCuentaContable;
begin
  if not assigned(FCuentaContable) then
    GetObject(TCuentaContable, FCuentaContable, CuentaContableID);

  Result := TCuentaContable(FCuentaContable);
end;

{ TTipoDeFormularioConceptoPosibleDM }
class function TTipoDeFormularioConceptoPosibleDM.TableName: string;
begin
  Result := 'tipoDeFormularioConceptosPosibles';
end;

class function TTipoDeFormularioConceptoPosibleDM.ID_FieldName: string;
begin
  Result := 'TipoDeFormularioConceptoPosibleID';
end;

procedure TTipoDeFormularioConceptoPosibleDM.PopulateFields
  (PDObject: TPDObject);
begin
  with TTipoDeformularioConceptoPosible(PDObject) do
  begin
    IDField[_TipoDeformularioID] := FTipoDeformularioID;
    IDField[_CuentaContableID] := FCuentaContableID;
  end;
end;

procedure TTipoDeFormularioConceptoPosibleDM.PopulateObject
  (PDObject: TPDObject);
begin
  with TTipoDeformularioConceptoPosible(PDObject) do
  begin
    FTipoDeformularioID := IDField[_TipoDeformularioID];
    FCuentaContableID := IDField[_CuentaContableID];
  end;
end;

{ TTipoDeFormularioConceptoPosibleList }
function TTipoDeFormularioConceptoPosibleList.GetActual
  : TTipoDeformularioConceptoPosible;
begin
  Result := TTipoDeformularioConceptoPosible(CurrentObject);
end;

constructor TTipoDeFormularioConceptoPosibleList.CreateByFormulario(_F: TTipoDeFormulario);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioConceptoPosibleDM._TipoDeformularioID + '=' + IntToStr(_F.ID);
  end;
begin
  inherited Create(TTipoDeformularioConceptoPosible, TTipoDeFormularioConceptoPosibleDM.CreateAll( false, WhereString));
End;

function TTipoDeFormularioConceptoPosibleList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeformularioConceptoPosible.Create;
end;

function TTipoDeFormularioConceptoPosibleList.Find(_cod: string): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := uppercase(Actual.codigo) = uppercase(_cod);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TTipoDeFormularioConceptoPosibleList.CreateAll;
begin
  inherited Create(TTipoDeformularioConceptoPosible, TTipoDeFormularioConceptoPosibleDM.CreateAll(false) );
end;

function TAbstractEmpresa.getMarcas: TMarcaAsociadaList;
begin
  If not assigned(FMarcas) Then
    GetList(TPDList(FMarcas), TPDList(TMarcaAsociadaList.CreateByEmpresa(self, False )) );
  Result := FMarcas;

end;

{ TAccesoDirecto }
constructor TAccesoDirecto.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TAccesoDirectoDM);
  SaveSqlLog := False;
  fIcono := 0;
  FX := null;
  FY := null;
end;


{ TMarca }

constructor TMarca.Create;
begin
  inherited;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TMarcaDM);
  FesInactivo := False;
end;

procedure TMarca.Delete;
Var
  PL   : TPedidoDeVentaList;
  PrVL : TPresupuestoDeVentaList;
  CL   : TCunioList;
  DL   : TDesarrolloList;
  CliL, CliML: TClienteList;
  ML   : TMarcaAsociadaList;

  CLientes1, CLientes2, Marcas, Cunios, Pedidos, Presupuestos, Desarrollos: TString;
begin
  Try
    PL    := TPedidoDeVentaList.CreateByMarca(Self);
    PrVL  := TPresupuestoDeVentaList.CreateByMarca(Self);
    ML    := TMarcaAsociadaList.CreateByMarca(Self);
    CL    := TCunioList.CreateByMarca(Self);
    DL    := TDesarrolloList.CreateByMarca(Self);
    CliL  := TClienteList.CreateByMarca(Self);
    CliML := TClienteList.CreateByMarcaDefault(Self);

    PL.First;
    PrVL.First;
    ML.First;
    CL.First;
    DL.First;
    CliL.First;
    CliML.First;

    while not PL.IsLast do
    begin
      Pedidos := Pedidos + IntToStr(PL.Actual.numero);
      PL.next;
      if not PL.IsLast then
        Pedidos := Pedidos + ' - ';
    end;

    while not PrVL.IsLast do
    begin
      Presupuestos := Presupuestos + IntToStr(PrVL.Actual.Numero);
      PrVL.next;
      if not PrVL.IsLast then
        Presupuestos := Presupuestos + ' - ';
    end;

    while not CL.IsLast do
    begin
      Cunios := Cunios + CL.Actual.codigo;
      CL.next;
      if not CL.IsLast then
        Cunios := Cunios + ' - ';
    end;

    while not DL.IsLast do
    begin
      Desarrollos := Desarrollos + DL.Actual.codigo;
      DL.next;
      if not DL.IsLast then
        Desarrollos := Desarrollos + ' - ';
    end;
    while not CliL.IsLast do
    begin
      CLientes1 := CLientes1 + CliL.Actual.codigo;
      CliL.next;
      if not CliL.IsLast then
        CLientes1 := CLientes1 + ' - ';
    end;
    while not CliML.IsLast do
    begin
      CLientes2 := CLientes2 + CliML.Actual.codigo;
      CliML.next;
      if not CliML.IsLast then
        CLientes2 := CLientes2 + ' - ';
    end;

    If PL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta siendo usada en uno o mas Pedidos de Venta: ' + Pedidos);
    If PrVL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta siendo usada en uno o mas Presupuestos de Venta: ' + Presupuestos);
    if CL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta asociada a los cuños: ' +  Cunios);
    if DL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta asociada a uno o mas desarrollos: ' + Desarrollos);
    if CliL.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta asociada a uno o mas Clientes: ' + CLientes1);
    if CliML.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar porque es la marca default de ' + CLientes2);
    If ML.Count > 0 then
      Aplicacion.RaiseExceptionCreate('No se puede eliminar la marca porque esta asociada ');
  Finally
    FreeAndNil(PL);
    FreeAndNil(PrVL);
    FreeAndNil(ML);
    FreeAndNil(CL);
    FreeAndNil(DL);
    FreeAndNil(CliL);
    FreeAndNil(CliML);
  End;
  inherited;
end;

procedure TMarca.ValidarDescripcionDuplicada(_D: String; _ID: TObjectID);
Var
  ML: TMarcaList;
begin
  Try
    If _D <> '' then
    Begin
      ML := TMarcaList.CreateByDescripcionYIDDiferente(_D, _ID, TMarcaDM._Descripcion ,False);
      If ML.Count > 0 then
      Begin
        ML.First;
        Aplicacion.RaiseExceptionCreate('Ha ingresado una marca duplicada ( "' + _D + '" )');
      end;
    end;
  Finally
    FreeAndNil(ML);
  end;
end;

procedure TMarca.ValidateOnInsert;
begin
  inherited;
  ValidarDescripcionDuplicada(Descripcion, ID);
end;

procedure TMarca.ValidateOnUpdate;
begin
  inherited;
  ValidarDescripcionDuplicada(Descripcion, ID);
end;

{ TMarcaDM }
class function TMarcaDM.TableName: string;
begin
  Result := 'marcas';
end;

class function TMarcaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TMarcaDM.ID_FieldName: string;
begin
  Result := 'MarcaID';
end;

procedure TMarcaDM.PopulateFields(PDObject: TPDObject);
begin
  with TMarca(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo
  end;
end;

procedure TMarcaDM.PopulateObject(PDObject: TPDObject);
begin
  with TMarca(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    FEsInactivo := BooleanField[_EsInactivo];
  end;
end;

{ TMarcaList }
function TMarcaList.GetActual: TMarca;
begin
  Result := TMarca(CurrentObject);
end;

function TMarcaList.CreateNewObject: TPDObject;
begin
  Result := TMarca.Create;
end;

constructor TMarcaList.CreateAll(_soloActivos: Boolean);
begin
  inherited Create(TMarca, TMarcaDM.CreateAll( False, '', _SoloActivos ));
end;

function TMarcaAsociada.GetMarcaAsociada: TMarca;
begin
  if not assigned(Fmarca) then
    GetObject(TMarca, Fmarca, FmarcaID);
  Result := TMarca(Fmarca);
end;

function TMarcaAsociada.GrupoDeVendedorActivo(_Fecha: TFecha): TGrupoDeVendedor;
begin
  if (GrupoDeVendedorInicialID <> NullID) and
     ((VigenciaHastaGrupoDeVendedorInicial <> Null) or (VigenciaHastaGrupoDeVendedorInicial <> 0)) and
     (_Fecha <= VigenciaHastaGrupoDeVendedorInicial)  then
    Result := GrupoDeVendedorInicial
  else
    if (GrupoDeVendedorID <> NullID) then
      Result := GrupoDeVendedor
    else
      Result := empresa.GrupoDeVendedorActivo(_Fecha);
end;


procedure TMarcaAsociada.SetmarcaID(const Value: TObjectID);
begin
  if (Value <> FmarcaID) and assigned(Fmarca) then
    FreeAndNil(Fmarca);
  FmarcaID := Value;
end;

{ TProcesoEspecificacion }

constructor TProcesoEspecificacion.Create;
begin
  inherited;
  DMObject              := Aplicacion.DMProvider.GetGlobalDM(TProcesoEspecificacionDM);
  Fdescripcion          := Null;
  Fcodigo               := Null;
  FtiempoEstimadoEnDias := Null;
end;

procedure TProcesoEspecificacion.Delete;
var
  EL : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList;

  Function EstaUsadaEnFabricados : Boolean;
  var
    FEL : TFabricadoProcesoEspecificacionList;
  begin
    Try
      FEL := TFabricadoProcesoEspecificacionList.CreateByEspecificacion(Self);
      Result := (FEL.Count > 0);
    Finally
      FreeAndNil(Fel)
    end;
  end;

  Function EstaUsadaEnCategorías : Boolean;
  var
    EL : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList;
  begin
    Try
      EL := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoEspecificacion(Self);
      Result := (EL.Count > 0);
    Finally
      FreeAndNil(EL)
    end;
  end;

begin
   if EstaUsadaEnFabricados then
     Aplicacion.RaiseExceptionCreate('La Especificación no puede ser eliminada porque está siendo utilizada en algún fabricado');

   try
     EL := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoEspecificacion(Self);
     if EL.Count > 0 then
       if (Aplicacion.Mensaje('La Especificación utilizada en algúna categoría de terminación, ¿desea eliminar vinculaciones?','Aviso',MB_YESNO)=mrYes) then
        EL.DeleteAll;
   finally
     FreeAndNil(EL);
   end;

  inherited;

end;

function TProcesoEspecificacion.getcodigo: TString;
begin
  if (FCodigo = null) and Assigned(Color) then
    Fcodigo := Color.Codigo;
  Result := Fcodigo;
end;

function TProcesoEspecificacion.GetColor: TKolor;
begin
  if not assigned(FColor) then
    GetObject(TKolor, FColor, ColorID);
  Result := TKolor(FColor);
end;

function TProcesoEspecificacion.getDescripcion: TString;
begin
  if (Fdescripcion = null) then
    Fdescripcion := Color.Descripcion;
  Result := Fdescripcion;
end;

function TProcesoEspecificacion.GetProceso: TProceso;
begin
  if not Assigned(FProceso) then
    GetObject(TProceso, FProceso, ProcesoID);
  Result := TProceso(FProceso);
end;

function TProcesoEspecificacion.GetTiempoEstimadoEnDias: TEntero;
begin
  if (FtiempoEstimadoEnDias = null) and (ColorID <> NullID) then
    FtiempoEstimadoEnDias := Color.tiempoEstimadoEnDias;

  if (ColorID = NullID) then
    Result := 0
  else
    Result := FtiempoEstimadoEnDias;
end;

procedure TProcesoEspecificacion.GuardarEnSifab(_CodigoRotulo, _CodigoTipoCaracteristica, _CodigoEmpresa: Integer);
  procedure AsignarDatos;
  begin
    try
      try
        aplicacion.sesion.ConexionSifab.Caracteristica.Active := True;
        aplicacion.sesion.ConexionSifab.StartTransaction;
        aplicacion.sesion.ConexionSifab.Caracteristica.Append;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoInternoRotuloClasificador').Value := _CodigoRotulo;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoCaracteristica').AsString := codigo;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('descripcionCaracteristica').AsString := Descripcion;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoTipoCaracteristica').Value := _CodigoTipoCaracteristica;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoInternoEmpresa').Value := _CodigoEmpresa;
        aplicacion.sesion.ConexionSifab.Caracteristica.FieldByName('codigoEstado').Value := 1;
        aplicacion.sesion.ConexionSifab.Caracteristica.Post;
        aplicacion.sesion.ConexionSifab.Commit;
      Except
        aplicacion.sesion.ConexionSifab.Rollback;
      end;
    finally
      aplicacion.sesion.ConexionSifab.Caracteristica.Active := False;
    end;
  end;

  function FaltaElDato(_Codigo: String; _Rotulo, _TipodeCaracteristica: Integer): Boolean;
  begin
    if aplicacion.sesion.ConexionSifab.SqlQuery.Active then
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    try
      aplicacion.sesion.ConexionSifab.SqlQuery.SQL.text := 'select codigoCaracteristica from Caracteristica where (codigoCaracteristica = ' + quotedstr(_Codigo)
                                                           + ') and (codigoInternoRotuloClasificador = ' + IntToStr(_Rotulo) + ') and (codigoTipoCaracteristica=' + IntToStr(_TipodeCaracteristica) + ')';
      aplicacion.sesion.ConexionSifab.SqlQuery.Open;
      Result := (aplicacion.sesion.ConexionSifab.SqlQuery.RecordCount = 0);
    finally
      aplicacion.sesion.ConexionSifab.SqlQuery.Close;
    end;
  end;

begin
  if not Aplicacion.ParametrosDelSistema.UpdateSifab then
    Exit;

  if FaltaElDato(codigo, _CodigoRotulo, _CodigoTipoCaracteristica) then
    AsignarDatos;
end;

function TProcesoEspecificacion.Save: Boolean;
begin
  if (ColorID = NullID) then
    Aplicacion.RaiseExceptionCreate('Falta el color.');
  Inherited Save;
end;

procedure TProcesoEspecificacion.SetColorID(const Value: TObjectID);
begin
  if (Value <> FColorID) and assigned(FColor) then
  begin
    FreeAndNil(FColor);
    Fcodigo := null;
    Fdescripcion := null;
    FtiempoEstimadoEnDias := null;
  end;

  FColorID := Value;
end;

procedure TProcesoEspecificacion.SetProcesoID(const Value: TObjectID);
begin
  if (Value <> FprocesoID) and Assigned(Fproceso) then
    FreeAndNil(Fproceso);
  FprocesoID := Value;
end;

{ TProcesoDM }
class function TProcesoEspecificacionDM.TableName: string;
begin
  Result := 'ProcesoEspecificaciones';
end;

class function TProcesoEspecificacionDM.ID_FieldName: string;
begin
  Result := 'ProcesoEspecificacionID';
end;

procedure TProcesoEspecificacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TProcesoEspecificacion(PDObject) do
  begin
    IDField[_procesoID] := procesoID;
    StringField[_ColorID] := ColorID;

  end;
end;

procedure TProcesoEspecificacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TProcesoEspecificacion(PDObject) do
  begin
    procesoID := IDField[_ProcesoID];
    FColorID  := StringField[_ColorID];
  end;
end;

{ TProcesoEspecificacionList }
function TProcesoEspecificacionList.GetActual: TProcesoEspecificacion;
begin
  Result := TProcesoEspecificacion(CurrentObject);
end;

constructor TProcesoEspecificacionList.CreateByProceso(_P: TProceso);
  Function WhereString : String;
  begin
    Result := TProcesoEspecificacionDM._procesoID + ' = ' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TProcesoEspecificacion, TProcesoEspecificacionDM.CreateAll(False,WhereString));
end;

constructor TProcesoEspecificacionList.CreateByProcesoYCodigoLike(_P: TProceso; _C: TString);
  Function WhereString : String;
  begin
    Result := TProcesoEspecificacionDM._ProcesoID + ' = ' + IntToStr(_P.ID);
    Result := Result + ' and '   + TProcesoEspecificacionDM._ColorID + ' in ( select ' + TKolorDM.ID_FieldName + ' from ' + TKolorDM.TableName;
    Result := Result + ' where ' + TKolorDM._Codigo + ' Like ' + QuotedStr('%' + _C + '%') + ')';
  end;
begin
  inherited Create(TProcesoEspecificacion, TProcesoEspecificacionDM.CreateAll(False, WhereString));
end;

constructor TProcesoEspecificacionList.CreateByProcesoYDescripcionLike(_P: TProceso; _D: TString);
  Function WhereString : String;
  begin
    Result := TProcesoEspecificacionDM._ProcesoID + ' = ' + IntToStr(_P.ID);
    Result := Result + ' and '   + TProcesoEspecificacionDM._ColorID + ' in ( select ' + TKolorDM.ID_FieldName + ' from ' + TKolorDM.TableName;
    Result := Result + ' where ' + TKolorDM._Descripcion + ' Like ' + QuotedStr('%' + _D + '%') + ')';
  end;
begin
  inherited Create(TProcesoEspecificacion, TProcesoEspecificacionDM.CreateAll(False, WhereString));
end;

function TProcesoEspecificacionList.CreateNewObject: TPDObject;
begin
  Result := TProcesoEspecificacion.Create;
end;

function TProcesoEspecificacionList.Find(_Descripcion: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (uppercase(Actual.Descripcion) = uppercase(_Descripcion));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TProcesoEspecificacionList.FindEspecificacion(_K: TKolor): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.ColorID = _K.ID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TProcesoEspecificacionList.CreateAll;
begin
  inherited Create(TProcesoEspecificacion, TProcesoEspecificacionDM.CreateAll(False));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion }

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM);
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.SetEspecificacionID(Value: TObjectID);
begin
  if (Value <> FEspecificacionID) and assigned(FEspecificacion) then
    FreeAndNil(FEspecificacion);
  FEspecificacionID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.GetEspecificacion: TProcesoEspecificacion;
begin
  if not assigned(FEspecificacion) then
    GetObject(TProcesoEspecificacion, FEspecificacion, EspecificacionID);
  Result := TProcesoEspecificacion(FEspecificacion);
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.GetCatTermTerminacionPosibleProcesoPosible: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible;
begin
  if not assigned(FCatTermTerminacionPosibleProcesoPosible) then
    GetObject(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,FCatTermTerminacionPosibleProcesoPosible,CatTermTerminacionPosibleProcesoPosibleID);
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible(FCatTermTerminacionPosibleProcesoPosible);
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM }
class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.TableName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecif';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.ID_FieldName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecifID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion(PDObject) do
  begin
    IDField[_CatDeTermsPosTermPosProcPosID] := FCatTermTerminacionPosibleProcesoPosibleID;
    IDField[_EspecificacionID] := FEspecificacionID;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion(PDObject) do
  begin
    FCatTermTerminacionPosibleProcesoPosibleID := IDField[_CatDeTermsPosTermPosProcPosID];
    FEspecificacionID := IDField[_EspecificacionID];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList }
function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion(CurrentObject);
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoEspecificacion(_SP: TProcesoEspecificacion);
Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM._EspecificacionID + ' = ' + IntToStr(_SP.ID)
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoPosible(_CTTPPP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible);
Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM._CatDeTermsPosTermPosProcPosID + ' = ' + IntToStr(_CTTPPP.ID)
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoPosibleYEspecificacion(_CTTPPP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible; _SP: TProcesoEspecificacion);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM._CatDeTermsPosTermPosProcPosID + ' = ' + IntToStr(_CTTPPP.ID) + ' and ' + TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM._EspecificacionID + ' = ' + IntToStr(_SP.ID)
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.CreateAll(False, WhereString));
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.Create;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.DeleteAll;
var
  dlg: T_FrmDialogsService;
  Num: Integer;
begin
  if Count = 0 then
    exit;
  try
    aplicacion.DialogsService.CrearDialogo(dlg, 'Borrando Especificaciones... ', TAviComunes.RuedaDentada);
    Num := Count;
    First;
    repeat
      dlg.MensajeSuperior := 'Borrando Especificaciones... ' + IntToStr(Num) + '/' + IntToStr(Count);
      Actual.Delete;
      Num := Num - 1;
      ApplyUpdates;
      next;
    until IsLast;
  finally
    aplicacion.DialogsService.CerrarDialogo(dlg);
  end;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.Find(_PE: TProcesoEspecificacion; _Next: Boolean): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  if Not _Next then
    First;
  while (not Result) and (not IsLast) do
  begin
    Result := Actual.EspecificacionID = _PE.ID;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.FindCodigo(_cod: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.Especificacion.codigo) = lowerCase(_cod));
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionDM.CreateAll(False));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible }
procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.automatizarEspecificaciones;
Var
  SP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion;
begin
  If (ProcesoPosible.proceso.Especificaciones.Count = 0) Then
    exit;
  ProcesoPosible.proceso.Especificaciones.First;
  Repeat
    SP := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion.Create;
    SP.CatTermTerminacionPosibleProcesoPosibleID := ID;
    SP.EspecificacionID := ProcesoPosible.proceso.Especificaciones.Actual.ID;
    SP.Save;
    Especificaciones.Add(SP);
    SP := nil;
    ProcesoPosible.proceso.Especificaciones.next;
  Until ProcesoPosible.proceso.Especificaciones.IsLast;
  ProcesoPosible.proceso.Especificaciones.First;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM);
  FDebeAutomatizarEspecificaciones := False;
  FObservaciones := '';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.Delete;
begin
  Especificaciones.DeleteAll;
  inherited;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.
  SetProcesoPosibleID(Value: TObjectID);
begin
  if (Value <> FProcesoPosibleID) and assigned(FProcesoPosible) then
    FreeAndNil(FProcesoPosible);

  FProcesoPosibleID := Value;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.
  GetProcesoPosible: TTerminacionProcesoPosible;
begin
  if not assigned(FProcesoPosible) then
    GetObject(TTerminacionProcesoPosible, FProcesoPosible, ProcesoPosibleID);

  Result := TTerminacionProcesoPosible(FProcesoPosible);
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.GetEspecificaciones: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList;
begin
  if not assigned(FEspecificaciones) then
    FEspecificaciones :=  TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList.CreateByProcesoPosible(self);

  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionList(FEspecificaciones);
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.
  GetTerminacionPosible: TCategoriaDeTerminacionesTerminacionPosible;
begin
  if not assigned(FTerminacionPosible) then
    GetObject(TCategoriaDeTerminacionesTerminacionPosible, FTerminacionPosible,
      TerminacionPosibleID);

  Result := TCategoriaDeTerminacionesTerminacionPosible(FTerminacionPosible);
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.Save
  : Boolean;
begin
  Result := inherited Save;
  if DebeAutomatizarEspecificaciones then
    automatizarEspecificaciones;

end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM }
class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.
  TableName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPos'
end;

class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.
  ID_FieldName: string;
begin
  Result := 'CatDeTermsPosTermPosProcPosID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.
  PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible(PDObject) do
  begin
    IDField[_CatDeTermsPosiblesTermPosID] := FTerminacionPosibleID;
    IDField[_TermProcPosibleID] := FProcesoPosibleID;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.
  PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible(PDObject) do
  begin
    FTerminacionPosibleID := IDField[_CatDeTermsPosiblesTermPosID];
    FProcesoPosibleID := IDField[_TermProcPosibleID];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList }
function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.GetActual: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible(CurrentObject);
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByPaletaDeColor(_PC: TPaletaDeColor);
  function WhereString: String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM ._TermProcPosibleID + ' in (';
    Result := Result + ' Select ' + TTerminacionProcesoPosibleDM.ID_FieldName + ' from ' + TTerminacionProcesoPosibleDM.TableName + ' where ' + TTerminacionProcesoPosibleDM._procesoID + ' in (';
    Result := Result + ' Select ' + TProcesoDM.ID_FieldName + ' from ' + TProcesoDM.TableName + ' where ' + TProcesoDM._PaletaDeColorID + ' = ' + IntToStr(_PC.ID) + '))';
  end;

begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByProceso(_P: TProceso);
  function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._TermProcPosibleID + ' in (Select ';
    Result := Result + TTerminacionProcesoPosibleDM.ID_FieldName + ' From ' +TTerminacionProcesoPosibleDM.TableName;
    Result := Result + ' where ' + TTerminacionProcesoPosibleDM._procesoID + '=' + IntToStr(_P.ID) + ')';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionProcesoPosible(_TPP: TTerminacionProcesoPosible);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._TermProcPosibleID + ' = ' + IntToStr(_TPP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._CatDeTermsPosiblesTermPosID + ' = ' + IntToStr(_TP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionPosibleYProcesoLike(_TP:TCategoriaDeTerminacionesTerminacionPosible; _Cod: TString);
  Function WhereString : String;
  begin
    if Copy(_Cod, length(_Cod), 1) <> '%' then
      _Cod := _Cod + '%';
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._CatDeTermsPosiblesTermPosID + ' = ' + IntToStr(_TP.ID) + ' and ' +TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._TermProcPosibleID + ' in ( select ';
    Result := Result + TTerminacionProcesoPosibleDM.ID_FieldName + ' from ' +TTerminacionProcesoPosibleDM.TableName + ' where ' +TTerminacionProcesoPosibleDM._terminacionID + '=' + IntToStr(_TP.terminacionID) + ' and ';
    Result := Result + TTerminacionProcesoPosibleDM._procesoID + ' in (select ' +TProcesoDM.ID_FieldName + ' where ' + TProcesoDM._Codigo + ' like ' +quotedstr(_cod) + '))';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible,TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateByTerminacionPosibleYProcesoPosible(_TP:TCategoriaDeTerminacionesTerminacionPosible; _P: TProceso);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._CatDeTermsPosiblesTermPosID + ' = ' + IntToStr(_TP.ID) + ' and ' + TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM._TermProcPosibleID + ' in ( select ';
    Result := Result + TTerminacionProcesoPosibleDM.ID_FieldName + ' from ' +TTerminacionProcesoPosibleDM.TableName + ' where ' +TTerminacionProcesoPosibleDM._terminacionID + '=' + IntToStr(_TP.terminacionID) + ' and ' +TTerminacionProcesoPosibleDM._procesoID + '=' + IntToStr(_P.ID) + ')';
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleDM.CreateAll(False, WhereString));
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosible.Create;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.Find(_P: TProceso; _Next: Boolean): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  if Not _Next then
    First;
  while (not Result) and (not IsLast) do
    begin
      Result := Actual.ProcesoPosible.procesoID = _P.ID;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleList.FindCodigo(_Cod: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (LowerCase(Actual.ProcesoPosible.Proceso.Codigo) = LowerCase(_cod));
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

{ TTerminacionInsumo }
constructor TTerminacionInsumo.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TTerminacionInsumoDM);
end;

procedure TTerminacionInsumo.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

function TTerminacionInsumo.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

{ TTerminacionInsumoDM }
class function TTerminacionInsumoDM.TableName: string;
begin
  Result := 'TerminacionInsumos';
end;

class function TTerminacionInsumoDM.ID_FieldName: string;
begin
  Result := 'TerminacionInsumoID';
end;

procedure TTerminacionInsumoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionInsumo(PDObject) do
  begin
    IDField[_TerminacionID]  := FterminacionID;
    IDField[_MateriaPrimaID] := FMateriaPrimaID;
  end;
end;

procedure TTerminacionInsumoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionInsumo(PDObject) do
  begin
    FTerminacionID  := IDField[_TerminacionID];
    FMateriaPrimaID := IDField[_MateriaPrimaID];
  end;
end;

{ TTerminacionInsumoList }
function TTerminacionInsumoList.GetActual: TTerminacionInsumo;
begin
  Result := TTerminacionInsumo(CurrentObject);
end;

constructor TTerminacionInsumoList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionInsumoDM._terminacionID + ' = ' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTerminacionInsumo, TTerminacionInsumoDM.CreateAll(False, WhereString));
end;

function TTerminacionInsumoList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionInsumo.Create;
end;

constructor TTerminacionInsumoList.CreateAll;
begin
  inherited Create(TTerminacionInsumo, TTerminacionInsumoDM.CreateAll(False));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleInsumo }
constructor TCategoriaDeTerminacionesTerminacionPosibleInsumo.Create;
begin
  inherited;
  SaveSqlLog       := True;
  DMObject         := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleInsumoDM);
  FCantidadTeorica := 0;
  FOnBeforeDelete  := DoBeforeDelete;
  // FOnBeforeInsert := DoBeforeInsert;
end;

function TCategoriaDeTerminacionesTerminacionPosibleInsumo.Save: Boolean;
begin
  if not isAssigned and assigned(FOnBeforeInsert) then
    FOnBeforeInsert(Self);
  Result := inherited Save;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumo.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumo.Delete;
begin
  if assigned(FOnBeforeDelete) then
    FOnBeforeDelete(self);
  inherited;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumo.DoBeforeDelete(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se puede eliminar ningun insumo');
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumo.DoBeforeInsert(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se puede agregar ningun insumo');
end;

function TCategoriaDeTerminacionesTerminacionPosibleInsumo.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

{ TCategoriaDeTerminacionesTerminacionPosibleInsumoDM }
class function TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.TableName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosInsumos';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.ID_FieldName : string;
begin
  Result := 'CatDeTermsPosTermPosInsumoID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleInsumo(PDObject) do
  begin
    IDField[_CatDeTermsPosiblesTermPosID] := FCategoriaDeTerminacionesPosiblesTerminacionPosibleID;
    IDField[_MateriaPrimaID] := FMateriaPrimaID;
    FloatField[_CantidadTeorica] := FCantidadTeorica;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleInsumo(PDObject) do
  begin
    FCategoriaDeTerminacionesPosiblesTerminacionPosibleID := IDField[_CatDeTermsPosiblesTermPosID];
    FMateriaPrimaID  := IDField[_MateriaPrimaID];
    FCantidadTeorica := FloatField[_CantidadTeorica];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleInsumoList }
function TCategoriaDeTerminacionesTerminacionPosibleInsumoList.GetActual : TCategoriaDeTerminacionesTerminacionPosibleInsumo;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleInsumo(CurrentObject);
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleInsumoList.CreateByCategoriaDeTerminacionesTerminacionPosible(_TP: TCategoriaDeTerminacionesTerminacionPosible);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleInsumoDM._CatDeTermsPosiblesTermPosID + '=' + IntToStr(_TP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleInsumo,TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.CreateAll(False, WhereString));
end;

function TCategoriaDeTerminacionesTerminacionPosibleInsumoList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleInsumo.Create;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleInsumoList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleInsumo, TCategoriaDeTerminacionesTerminacionPosibleInsumoDM.CreateAll(False));
end;

{ TResource }

function TResource.getResourceStringByLanguage(L: TResourceLanguage): string;
var
  RSL: TResourceStringList;
begin
  Result := self.Descripcion;
  RSL := TResourceStringList.CreateByResourceAndLanguage(Self, L);
  if RSL.Count > 0 then
    Result := RSL.Actual.text;
  FreeAndNil(RSL);
end;

procedure TResource.Delete;
Var
  RSL: TResourceStringList;
begin
  Try
    RSL := TResourceStringList.CreateByResource(self);
    If (RSL.Count > 0) then
    begin
      if (aplicacion.Mensaje('Este resource contiene textos asociados. Se eliminaran todos estos textos. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
        RSL.DeleteAll
      else
        Abort;
    end;
    inherited;
  finally
    FreeAndNil(RSL);
  end;
end;

function TResource.GetResourceStrings: TResourceStringList;
begin
  if FResourceStrings = nil then
    FResourceStrings := TResourceStringList.CreateByResource(self);
  Result := FResourceStrings;
end;

constructor TResource.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TResourceDM);
  solomayusculas := False;
end;

{ TResourceDM }
class function TResourceDM.TableName: string;
begin
  Result := 'resources';
end;

class function TResourceDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TResourceDM.ID_FieldName: string;
begin
  Result := 'ResourceID';
end;

procedure TResourceDM.PopulateFields(PDObject: TPDObject);
begin
  with TResource(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TResourceDM.PopulateObject(PDObject: TPDObject);
begin
  with TResource(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    EsInactivo   := BooleanField[_EsInactivo];
  end;
end;

{ TResourceList }
function TResourceList.GetActual: TResource;
begin
  Result := TResource(CurrentObject);
end;

function TResourceList.CreateNewObject: TPDObject;
begin
  Result := TResource.Create;
end;

function TResourceList.FindDescripcion(_Desc: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (UpperCase(Actual.Descripcion) = UpperCase(_Desc));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TResourceList.CreateAll;
begin
  inherited Create(TResource, TResourceDM.CreateAll(False));
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo }
constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM);
  FCantidadTeorica := 0;
  OnBeforeDelete := DoBeforeDelete;
  // OnBeforeInsert := DoBeforeInsert;
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.Save: Boolean;
begin
  if not isAssigned and assigned(FOnBeforeInsert) then
    DoBeforeInsert(self);
  Result := inherited Save;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.Delete;
begin
  if assigned(FOnBeforeDelete) then
    DoBeforeDelete(self);
  inherited;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.DoBeforeDelete(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden agregar eliminar insumos ');
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.DoBeforeInsert(Sender: TOBject);
begin
  Aplicacion.RaiseExceptionCreate('No se pueden agregar nuevos insumos');
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM }
class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.TableName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecifInsumos';
end;

class function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.ID_FieldName: string;
begin
  Result := 'CatDeTermsPosiblesTermPosProcPosEspecifInsumoID';
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.PopulateFields(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo(PDObject) do
  begin
    IDField[_CatDeTermsPosiblesTermPosProcPosEspecifID] := FCatDeTermsPosiblesTermPosProcPosEspecifID;
    IDField[_MateriaPrimaID] := FMateriaPrimaID;
    FloatField[_CantidadTeorica] := FCantidadTeorica;
  end;
end;

procedure TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.PopulateObject(PDObject: TPDObject);
begin
  with TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo(PDObject) do
  begin
    FCatDeTermsPosiblesTermPosProcPosEspecifID := IDField[_CatDeTermsPosiblesTermPosProcPosEspecifID];
    FMateriaPrimaID := IDField[_MateriaPrimaID];
    FCantidadTeorica := FloatField[_CantidadTeorica];
  end;
end;

{ TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList }
function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList.GetActual : TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo(CurrentObject);
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList.CreateByCategoriaDeTerminacionesPosiblesTerminacionPosibleProcesoPosibleEspecificacion(_SP: TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacion);
  Function WhereString : String;
  begin
    Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM._CatDeTermsPosiblesTermPosProcPosEspecifID + '=' + IntToStr(_SP.ID);
  end;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo, TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.CreateAll(False, WhereString));
end;

function TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList.CreateNewObject: TPDObject;
begin
  Result := TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo.Create;
end;

constructor TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoList.CreateAll;
begin
  inherited Create(TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumo , TCategoriaDeTerminacionesTerminacionPosibleProcesoPosibleEspecificacionInsumoDM.CreateAll(False));
end;

{ TArticuloTraduccion }
constructor TArticuloTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TArticuloTraduccionDM);
end;

procedure TArticuloTraduccion.SetArticuloID(Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) then
    FreeAndNil(Farticulo);

  FarticuloID := Value;

end;

function TArticuloTraduccion.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);

  Result := TArticulo(Farticulo);
end;

{ TArticuloTraduccionDM }
class function TArticuloTraduccionDM.TableName: string;
begin
  Result := 'articuloTraducciones';
end;

class function TArticuloTraduccionDM.ID_FieldName: string;
begin
  Result := 'ArticuloTraduccionID';
end;

procedure TArticuloTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloTraduccion(PDObject) do
  begin
    IDField[_articuloID] := FarticuloID;
    StringField[_Descripcion] := Descripcion;
    IDField[_resourceLanguageID] := FresourceLanguageID;
  end;
end;

procedure TArticuloTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloTraduccion(PDObject) do
  begin
    FarticuloID := IDField[_articuloID];
    Fdescripcion := StringField[_Descripcion];
    FresourceLanguageID := IDField[_resourceLanguageID];
  end;
end;

{ TArticuloTraduccionList }
function TArticuloTraduccionList.GetActual: TArticuloTraduccion;
begin
  Result := TArticuloTraduccion(CurrentObject);
end;

constructor TArticuloTraduccionList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloTraduccionDM._ArticuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloTraduccion, TArticuloTraduccionDM.CreateAll(False, WhereString));
end;

constructor TArticuloTraduccionList.CreateEmpty;
begin
  inherited Create(TArticuloTraduccion, TArticuloTraduccionDM.CreateEmpty);
end;

function TArticuloTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TArticuloTraduccion.Create;
end;

constructor TArticuloTraduccionList.CreateAll;
begin
  inherited Create(TArticuloTraduccion, TArticuloTraduccionDM.CreateAll(False));
end;

{ TTraduccion }

function TTraduccion.getResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

procedure TTraduccion.SetresourceLanguageID(const Value: TObjectID);
begin
  if (Value <> FresourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FresourceLanguageID := Value;
end;

{ TTraduccionList }

function TTraduccionList.Find(_RL: TResourceLanguage): Boolean;
var
  IDActual: TObjectID;
begin
  Result := False;
  if not assigned(_RL) then
    exit;

  if (Count = 0) then
    exit
  else
    IDActual := self.CurrentObject.ID;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := TTraduccion(self.CurrentObject).resourceLanguageID = _RL.ID;
    if not Result then
      next;
  end;

  if IsLast then
    Find(IDActual);

end;

function TTraduccionList.GetActual: TTraduccion;
begin
  Result := TTraduccion(CurrentObject);
end;

{ TTerminacionTraduccion }
constructor TTerminacionTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTerminacionTraduccionDM);
end;

function TTerminacionTraduccion.Getterminacion: TTerminacion;
begin
  if not assigned(Fterminacion) then
    GetObject(TTerminacion, Fterminacion, terminacionID);

  Result := TTerminacion(Fterminacion);
end;

procedure TTerminacionTraduccion.SetterminacionID(Value: TObjectID);
begin
  if (Value <> FterminacionID) and assigned(Fterminacion) then
    FreeAndNil(Fterminacion);

  FterminacionID := Value;

end;

{ TTerminacionTraduccionDM }
class function TTerminacionTraduccionDM.TableName: string;
begin
  Result := 'terminaciontraducciones';
end;

class function TTerminacionTraduccionDM.ID_FieldName: string;
begin
  Result := 'TerminacionTraduccionID';
end;

procedure TTerminacionTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionTraduccion(PDObject) do
  begin
    IDField[_terminacionID] := FterminacionID;
    IDField[_resourceLanguageID] := FresourceLanguageID;
    StringField[_Descripcion] := Descripcion;
  end;
end;

procedure TTerminacionTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionTraduccion(PDObject) do
  begin
    FterminacionID      := IDField[_TerminacionID];
    FresourceLanguageID := IDField[_ResourceLanguageID];
    Fdescripcion        := StringField[_Descripcion];
  end;
end;

{ TTerminacionTraduccionList }
function TTerminacionTraduccionList.GetActual: TTerminacionTraduccion;
begin
  Result := TTerminacionTraduccion(CurrentObject);
end;

constructor TTerminacionTraduccionList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionTraduccionDM._TerminacionID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTerminacionTraduccion, TTerminacionTraduccionDM.CreateAll(False, WhereString));
end;

function TTerminacionTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionTraduccion.Create;
end;

constructor TTerminacionTraduccionList.CreateAll;
begin
  inherited Create(TTerminacionTraduccion, TTerminacionTraduccionDM.CreateAll(False));
end;

{ TTraductor }

constructor TTraductor.Create(_ActiveLanguage: TResourceLanguage; _FatherObject: TDescriptible; _Traducciones: TTraduccionList);
begin
  inherited Create;
  fFatherObject := _FatherObject;
  ActiveLanguageID := _ActiveLanguage.ID;
  FTraducciones := _Traducciones;
end;

destructor TTraductor.Destroy;
begin
  if assigned(fActiveLanguage) then
    FreeAndNil(fActiveLanguage);
  inherited;
end;

function TTraductor.GetActiveLanguage: TResourceLanguage;
begin
  if not assigned(fActiveLanguage) then
  begin
    fActiveLanguage := TResourceLanguage.Create;
    fActiveLanguage.Load(fActiveLanguageID);
  end;

  Result := TResourceLanguage(fActiveLanguage);
end;

function TTraductor.GetDescripcionTraducida: TString;
begin
  Result := '';
  if FTraducciones.Count > 0 then
  begin
    if FTraducciones.Find(ActiveLanguage) then
      Result := FTraducciones.Actual.Descripcion;
  end;

end;

procedure TTraductor.SetActiveLanguageID(const Value: TObjectID);
begin
  if (Value <> fActiveLanguageID) and assigned(fActiveLanguage) then
    FreeAndNil(fActiveLanguage);

  fActiveLanguageID := Value;
end;

{ TProcesoTraduccion }
constructor TProcesoTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TProcesoTraduccionDM);
end;

procedure TProcesoTraduccion.SetprocesoID(Value: TObjectID);
begin
  if (Value <> FprocesoID) and assigned(Fproceso) then
    FreeAndNil(Fproceso);

  FprocesoID := Value;

end;

function TProcesoTraduccion.Getproceso: TProceso;
begin
  if not assigned(Fproceso) then
    GetObject(TProceso, Fproceso, procesoID);

  Result := TProceso(Fproceso);
end;

{ TProcesoTraduccionDM }
class function TProcesoTraduccionDM.TableName: string;
begin
  Result := 'procesotraducciones';
end;

class function TProcesoTraduccionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TProcesoTraduccionDM.ID_FieldName: string;
begin
  Result := 'ProcesoTraduccionID';
end;

procedure TProcesoTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TProcesoTraduccion(PDObject) do
  begin
    IDField[_resourceLanguageID] := FresourceLanguageID;
    StringField[_Descripcion]    := Descripcion;
    IDField[_procesoID]          := FprocesoID;
    BooleanField[_EsInactivo]    := EsInactivo;
  end;
end;

procedure TProcesoTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TProcesoTraduccion(PDObject) do
  begin
    FresourceLanguageID := IDField[_resourceLanguageID];
    Fdescripcion        := StringField[_Descripcion];
    FprocesoID          := IDField[_procesoID];
    EsInactivo          := BooleanField[_EsInactivo];
  end;
end;

{ TProcesoTraduccionList }
function TProcesoTraduccionList.GetActual: TProcesoTraduccion;
begin
  Result := TProcesoTraduccion(CurrentObject);
end;

constructor TProcesoTraduccionList.CreateByProceso(_P: TProceso);
  Function WhereString : String;
  begin
    Result := TProcesoTraduccionDM._ProcesoID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TProcesoTraduccion, TProcesoTraduccionDM.CreateAll(False, WhereString));
end;

function TProcesoTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TProcesoTraduccion.Create;
end;

constructor TProcesoTraduccionList.CreateAll;
begin
  inherited Create(TProcesoTraduccion, TProcesoTraduccionDM.CreateAll(False));
end;

{ TTipoDeEmail }
constructor TTipoDeEmail.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeEmailDM);
  FEsElResponsable := False;
end;

{ TTipoDeEmailDM }
class function TTipoDeEmailDM.TableName: string;
begin
  Result := 'TiposDeEmail';
end;


class function TTipoDeEmailDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

Class function TTipoDeEmailDM.ID_FieldName: string;
begin
  Result := 'TipoDeEmailID';
end;

procedure TTipoDeEmailDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeEmail(PDObject) do
  begin
    StringField[_Descripcion]      := Fdescripcion;
    BooleanField[_EsElResponsable] := FEsElResponsable;
    BooleanField[_EsInactivo]      := EsInactivo;
    // StringField [_EmailSubject] := FEmailSubject;
    // StringField [_EmailBody]    := FEmailBody;
  end;
end;

procedure TTipoDeEmailDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeEmail(PDObject) do
  begin
    Descripcion      := StringField[_Descripcion];
    FEsElResponsable := BooleanField[_EsElResponsable];
    EsInactivo       := BooleanField[_EsInactivo];
    // EmailSubject := StringField[_EmailSubject];
    // EmailBody    := StringField[_EmailBody];
  end;
end;

{ TTipoDeEmailList }
function TTipoDeEmailList.GetActual: TTipoDeEmail;
begin
  Result := TTipoDeEmail(CurrentObject);
end;

function TTipoDeEmailList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeEmail.Create;
end;

function TTipoDeEmailList.Find(_Descripcion: TString): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (lowerCase(Actual.Descripcion) = lowerCase(_Descripcion));
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

constructor TTipoDeEmailList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TTipoDeEmail, TTipoDeEmailDM.CreateAll(False, '', _SoloActivos));
end;

{ TCondicionDeCompraItem }
constructor TCondicionDeCompraItem.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCondicionDeCompraItemDM);
  FPocentajeDelTotal := null;
  FDias := null;
end;

{ TCondicionDeCompraItemDM }
class function TCondicionDeCompraItemDM.TableName: string;
begin
  Result := 'condiciondecompraitems';
end;

class function TCondicionDeCompraItemDM.ID_FieldName: string;
begin
  Result := 'CondicionDeCompraItemID';
end;

procedure TCondicionDeCompraItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TCondicionDeCompraItem(PDObject) do
  begin
    // IDField[_condicionDeCompraItemID] := FcondicionDeCompraItemID;
    FloatField[_PocentajeDelTotal] := FPocentajeDelTotal;
    IntegerField[_Dias] := FDias;
    IDField[_CondicionDeCompraID] := FCondicionDeCompraID;
  end;
end;

procedure TCondicionDeCompraItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TCondicionDeCompraItem(PDObject) do
  begin

    FPocentajeDelTotal := FloatField[_PocentajeDelTotal];
    FDias := IntegerField[_Dias];
    FCondicionDeCompraID := IDField[_CondicionDeCompraID];
  end;
end;

{ TCondicionDeCompraItemList }
function TCondiciondecompraItemList.GetActual: TCondicionDeCompraItem;
begin
  Result := TCondicionDeCompraItem(CurrentObject);
end;

constructor TCondiciondecompraItemList.CreateByCondicionDeCompraID(_C: TCondicionDeCompra);
  Function WhereString : String;
  begin
    Result := TCondicionDeCompraItemDM._CondicionDeCompraID + '=' + IntToStr(_C.ID);
  end;
begin
  inherited Create(TCondicionDeCompraItem, TCondicionDeCompraItemDM.CreateAll(False, WhereString));
end;

function TCondiciondecompraItemList.CreateNewObject: TPDObject;
begin
  Result := TCondicionDeCompraItem.Create;
end;

constructor TCondiciondecompraItemList.CreateAll;
begin
  inherited Create(TCondicionDeCompraItem, TCondicionDeCompraItemDM.CreateAll(False));
end;

procedure TCondicionDeCompra.Delete;
begin
  if (Items.Count > 0) then
    Items.DeleteAll;
  inherited;
end;

function TCondicionDeCompra.GetItems: TCondiciondecompraItemList;
begin
  If not assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TCondiciondecompraItemList.CreateByCondicionDeCompraID(self)));
  Result := FItems;
end;

function TCondicionDeCompra.Save: Boolean;
begin
  Result := inherited Save;
end;

function TCondicionDeCompra.grabar: Boolean;
Var
  P: Real;
begin
  // Valido que haya por lo menos un item y que la suma de todos los items de 100 x 100 perfecto

  Result := False;
  if Items.Count = 0 then
    Aplicacion.RaiseExceptionCreate(
      'Necesita especificar el detalle de la condicion para poder guardarla');

  Items.First;
  P := 0;
  Repeat
    P := P + Items.Actual.PocentajeDelTotal;
    Items.next;
  Until Items.IsLast;
  if P <> 100 then
    Aplicacion.RaiseExceptionCreate(
      'La sumatoria de todos los porcentajes de las especificaciones de la categoria deben sumar 100 %');

  Result := Save;
end;

{ TSimboloDeFlexibilidad }
function TTipoDeFlexibilidad.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeFlexibilidadList;
end;

constructor TTipoDeFlexibilidad.Create;
begin
  inherited;
  DMObject                      := Aplicacion.DMProvider.GetGlobalDM(TTipoDeFlexibilidadDM);
  FNoValidarFecha               := False;
  FPlazoMinimoEntregaHabilitado := False;
  FPlazoMinimoEntrega           := 0;
end;

{ TSimboloDeFlexibilidadDM }
class function TTipoDeFlexibilidadDM.TableName: string;
begin
  Result := 'TiposDeFlexibilidad';
end;

class function TTipoDeFlexibilidadDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeFlexibilidadDM.ID_FieldName: string;
begin
  Result := 'TipoDeFlexibilidadID';
end;

procedure TTipoDeFlexibilidadDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFlexibilidad(PDObject) do
    begin
      StringField[_Descripcion]                   := Descripcion;
      StringField[_Codigo]                        := codigo;
      BooleanField[_NoValidarFecha]               := NoValidarFecha;
      BooleanField[_PlazoMinimoEntregaHabilitado] := PlazoMinimoEntregaHabilitado;
      IntegerField[_PlazoMinimoEntregaHabilitado] := PlazoMinimoEntrega;
      BooleanField[_EsInactivo]                   := FEsInactivo;
    end;
end;

procedure TTipoDeFlexibilidadDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFlexibilidad(PDObject) do
    begin
      Fdescripcion                  := StringField[_Descripcion];
      Fcodigo                       := StringField[_Codigo];
      FNoValidarFecha               := BooleanField[_NoValidarFecha];
      FPlazoMinimoEntregaHabilitado := BooleanField[_PlazoMinimoEntregaHabilitado];
      FPlazoMinimoEntrega           := IntegerField[_PlazoMinimoEntrega];
      FEsInactivo                   := BooleanField[_EsInactivo];
    end;
end;

{ TSimboloDeFlexibilidadList }
function TTipoDeFlexibilidadList.GetActual: TTipoDeFlexibilidad;
begin
  Result := TTipoDeFlexibilidad(CurrentObject);
end;

function TTipoDeFlexibilidadList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFlexibilidad.Create;
end;

constructor TTipoDeFlexibilidadList.CreateAll(_SoloActivos : Boolean );
begin
  inherited Create(TTipoDeFlexibilidad, TTipoDeFlexibilidadDM.CreateAll(False, '', _SoloActivos));
end;

{ TEstadoDePedidoDeVentaItem }
function TEstadoDePedidoDeVentaItem.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePedidoDeVentaItemList;
end;

constructor TEstadoDePedidoDeVentaItem.Create;
begin
  inherited;
  DMObject                 := Aplicacion.DMProvider.GetGlobalDM(TEstadoDePedidoDeVentaItemDM);
  FesEstadoDeItemPendiente := False;
  FesEstadoDeItemBloqueado := False;
end;

{ TEstadoDePedidoDeVentaItemDM }
class function TEstadoDePedidoDeVentaItemDM.TableName: string;
begin
  Result := 'estadosdepedidodeventaitem';
end;

class function TEstadoDePedidoDeVentaItemDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePedidoDeVentaItemDM.ID_FieldName: string;
begin
  Result := 'EstadoDePedidoDeVentaItemID';
end;

procedure TEstadoDePedidoDeVentaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeVentaItem(PDObject) do
  begin
    StringField[_Codigo]                   := Codigo;
    StringField[_Descripcion]              := Descripcion;
    BooleanField[_EsEstadoDeItemPendiente] := EsEstadoDeItemPendiente;
    BooleanField[_EsEstadoDeItemCumplido]  := EsEstadoDeItemCumplido;
    BooleanField[_EsEstadoDeItemBloqueado] := EsEstadoDeItemBloqueado;
    BooleanField[_EsInactivo]              := EsInactivo;
  end;
end;

procedure TEstadoDePedidoDeVentaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeVentaItem(PDObject) do
  begin
    Codigo                   := StringField[_Codigo];
    Descripcion              := StringField[_Descripcion];
    FEsEstadoDeItemPendiente := BooleanField[_EsEstadoDeItemPendiente];
    FEsEstadoDeItemCumplido  := BooleanField[_EsEstadoDeItemCumplido];
    FEsEstadoDeItemBloqueado := BooleanField[_EsEstadoDeItemBloqueado];
    FEsInactivo              := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDePedidoDeVentaItemList }
function TEstadoDePedidoDeVentaItemList.GetActual: TEstadoDePedidoDeVentaItem;
begin
  Result := TEstadoDePedidoDeVentaItem(CurrentObject);
end;

function TEstadoDePedidoDeVentaItemList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePedidoDeVentaItem.Create;
end;

constructor TEstadoDePedidoDeVentaItemList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDePedidoDeVentaItem, TEstadoDePedidoDeVentaItemDM.CreateAll(False, '', _SoloActivos, TEstadoDePedidoDeVentaItemDM._Descripcion));
end;

constructor TEstadoDePedidoDeVentaItemList.CreateByEstadosDeItemPendiente(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDePedidoDeVentaItem, TEstadoDePedidoDeVentaItemDM.CreateAll(False, TEstadoDePedidoDeVentaItemDM._EsEstadoDeItemPendiente + '=1',_SoloActivos, TEstadoDePedidoDeVentaItemDM._Descripcion));
end;

{ TEstadoDepresupuestoDeVentaItem }
function TEstadoDePresupuestoDeVentaItem.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePresupuestoDeVentaItemList;
end;

constructor TEstadoDePresupuestoDeVentaItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMProvider.GetGlobalDM(TEstadoDePresupuestoDeVentaItemDM);
end;

{ TEstadoDepresupuestoDeVentaItemDM }
class function TEstadoDePresupuestoDeVentaItemDM.TableName: string;
begin
  Result := 'EstadosDePresupuestoDeVentaItem';
end;


class function TEstadoDePresupuestoDeVentaItemDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePresupuestoDeVentaItemDM.ID_FieldName: string;
begin
  Result := 'EstadoDePresupuestoDeVentaItemID';
end;

procedure TEstadoDePresupuestoDeVentaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePresupuestoDeVentaItem(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDePresupuestoDeVentaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePresupuestoDeVentaItem(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDepresupuestoDeVentaItemList }
function TEstadoDePresupuestoDeVentaItemList.GetActual : TEstadoDePresupuestoDeVentaItem;
begin
  Result := TEstadoDePresupuestoDeVentaItem(CurrentObject);
end;

function TEstadoDePresupuestoDeVentaItemList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePresupuestoDeVentaItem.Create;
end;

constructor TEstadoDePresupuestoDeVentaItemList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDePresupuestoDeVentaItem, TEstadoDePresupuestoDeVentaItemDM.CreateAll( False, '', _SoloActivos ));
end;
{ TEstadoDePedidoDeProduccionItem }
function TEstadoDePedidoDeProduccionItem.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePedidoDeProduccionItemList;
end;

constructor TEstadoDePedidoDeProduccionItem.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM
    (TEstadoDePedidoDeProduccionItemDM);
end;

{ TEstadoDePedidoDeProduccionItemDM }
class function TEstadoDePedidoDeProduccionItemDM.TableName: string;
begin
  Result := 'estadosdePedidoDeProduccionitem';
end;

class function TEstadoDePedidoDeProduccionItemDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePedidoDeProduccionItemDM.ID_FieldName: string;
begin
  Result := 'EstadoDePedidoDeProduccionItemID';
end;

procedure TEstadoDePedidoDeProduccionItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeProduccionItem(PDObject) do
  begin
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TEstadoDePedidoDeProduccionItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDePedidoDeProduccionItem(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TEstadoDePedidoDeProduccionItemList }
function TEstadoDePedidoDeProduccionItemList.GetActual : TEstadoDePedidoDeProduccionItem;
begin
  Result := TEstadoDePedidoDeProduccionItem(CurrentObject);
end;

function TEstadoDePedidoDeProduccionItemList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePedidoDeProduccionItem.Create;
end;

constructor TEstadoDePedidoDeProduccionItemList.CreateAll;
begin
  inherited Create(TEstadoDePedidoDeProduccionItem, TEstadoDePedidoDeProduccionItemDM.CreateAll(False));
end;

{ TKolor }
procedure TKolor.Delete;
begin
  traducciones.DeleteAll;
  inherited;
end;

function TKolor.GetDescriptibleAbreviadoListClass;
begin
  Result := TKolorList;
end;


function TKolor.GetPaletaDeColor: TPaletaDeColor;
begin
  if not assigned(FPaletaDeColor) then
    GetObject(TPaletaDeColor, FPaletaDeColor, FPaletaDeColorID);

  Result := TPaletaDeColor(FPaletaDeColor);
end;

function TKolor.GetPrecios: TKolorPrecioList;
begin
  if not assigned(FPrecios) then
  	GetList(TPDList(FPrecios),TPDList(TKolorPrecioList.CreateByKolor(self)));

  Result := TKolorPrecioList( FPrecios );
end;

function TKolor.GetTraducciones: TKolorTraduccionList;
begin
  if not assigned(FTraducciones) then
    GetList(TPDList(FTraducciones), TPDList(TKolorTraduccionList.CreateByColor(self)));
  Result := TKolorTraduccionList(FTraducciones);
end;


function TKolor.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID; _Moneda: TMoneda; _Articulo: TArticulo; _Cunio: TCunio  ): TReal;
var
  pFamiliaID, pMaterialID, pCunioID : TObjectID;
begin
  if Assigned( _Cunio ) then
    pCunioID   := _Cunio.ID
  else
    pCunioID   := NullID;

  if Assigned( _Articulo) then
    begin
      pFamiliaID                 := _Articulo.FamiliaDeArticuloID;
      pMaterialID                := _Articulo.MaterialID;
    end
  else
    begin
      pFamiliaID                 := NullID;
      pMaterialID                := NullID;
    end;

  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TKolorDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          pCunioID,
                                                          Aplicacion.Dataservice.TipoDePreciodeCunioEspecificacionID,
                                                          pFamiliaID,
                                                          pMaterialID,
                                                          False );
  if Assigned( _Articulo ) then
    Result := Result * ( 1 + ( _Articulo.CategoriaDeTerminacionPosible.FPorcentajeAjustePrecioEspecificacion /100 ));
end;

procedure TKolor.SetPaletaDeColorID(const Value: TObjectID);
begin
  if (Value <> FPaletaDeColorID) and assigned(FPaletaDeColor) then
    FreeAndNil(FPaletaDeColor);

  FPaletaDeColorID := Value;
end;

constructor TKolor.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TKolorDM);
  Fr := null;
  Fg := null;
  Fb := null;
end;

{ TKolorDM }
class function TKolorDM.TableName: string;
begin
  Result := 'colores';
end;

class function TKolorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TKolorDM.ID_FieldName: string;
begin
  Result := 'colorID';
end;

procedure TKolorDM.PopulateFields(PDObject: TPDObject);
begin
  with TKolor(PDObject) do
    begin
      StringField[_Descripcion]             := Descripcion;
      StringField[_Codigo]                  := codigo;
      IntegerField[_r]                      := Fr;
      IntegerField[_g]                      := Fg;
      IntegerField[_b]                      := Fb;
      IDField[_PaletaDeColorID]             := FPaletaDeColorID;
      IntegerField[_tiempoEstimadoEnDias]   := FtiempoEstimadoEnDias;
      BooleanField[_Esinactivo]             := FEsInactivo;
      FloatField[_RecargoPorEspecificacion ]:= FRecargoPorEspecificacion;
    end;
end;

procedure TKolorDM.PopulateObject(PDObject: TPDObject);
begin
  with TKolor(PDObject) do
    begin
      Fdescripcion              := StringField[_Descripcion];
      Fcodigo                   := StringField[_Codigo];
      Fr                        := IntegerField[_r];
      Fg                        := IntegerField[_g];
      Fb                        := IntegerField[_b];
      FPaletaDeColorID          := IDField[_PaletaDeColorID];
      FtiempoEstimadoEnDias     := IntegerField[_tiempoEstimadoEnDias];
      FEsInactivo               := BooleanField[_Esinactivo];
      FRecargoPorEspecificacion := FloatField[_RecargoPorEspecificacion ];
    end;
end;

{ TKolorList }
function TKolorList.GetActual: TKolor;
begin
  Result := TKolor(CurrentObject);
end;

function TKolorList.CreateNewObject: TPDObject;
begin
  Result := TKolor.Create;
end;

constructor TKolorList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TKolor, TKolorDM.CreateAll(False, '', _SoloActivos));
end;

constructor TKolorList.CreateByPaletaDeColor(_PC: TPaletaDeColor; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TKolorDM._PaletaDeColorID + '=' + IntToStr(_PC.ID);
  end;
begin
  inherited Create(TKolor, TKolorDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TKolorList.CreateByPaletaDeColorID(_PCID: TObjectID);
  Function WhereString : String;
  begin
    Result := TKolorDM._PaletaDeColorID + '=' + IntToStr(_PCID);
  end;
begin
  inherited Create(TKolor, TKolorDM.CreateAll(False, WhereString));
end;


{ TParametroLocal }
function TParametroLocal.GetImpresoraPredetWindows: String;
var
  impresoras: TPrinter;
begin
  Result := '';
  try
    impresoras := Printer.Create;
    impresoras.Refresh;
    if (impresoras.printers.Count > 0) then
      Result := impresoras.printers[impresoras.PrinterIndex];
  finally
    impresoras := Nil;
  end;
end;

{ TFabricadoProcesoEspecificacion }
constructor TFabricadoProcesoEspecificacion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFabricadoProcesoEspecificacionDM);
  SaveSqlLog    := False;
  FCodigoColor := null;
  FdesarrolloID := NullID;
end;

procedure TFabricadoProcesoEspecificacion.SetFabricadoProcesoID
  (const Value: TObjectID);
begin
  if (Value <> FFabricadoProcesoID) and assigned(FFabricadoProceso) then
  begin
    FreeAndNil(FFabricadoProceso);
    FreeAndNil(FFabricado);
  end;
  FFabricadoProcesoID := Value;
end;

procedure TFabricadoProcesoEspecificacion.SetDesarrolloID
  (const Value: TObjectID);
begin
  if (Value <> FdesarrolloID) and assigned(FDesarrollo) then
    FreeAndNil(FDesarrollo);
  FdesarrolloID := Value;
end;

procedure TFabricadoProcesoEspecificacion.SetEspecificacionID(Value: TObjectID);
begin
  if (Value <> FEspecificacionID) and assigned(FEspecificacion) then
    FreeAndNil(FEspecificacion);

  FEspecificacionID := Value;

end;

function TFabricadoProcesoEspecificacion.GetCodigoColor: TString;
begin
  Result := '';
  if (EspecificacionID <> NullID) and (Especificacion.ColorID <> NullID) then
    Result := Especificacion.Color.codigo;

end;

function TFabricadoProcesoEspecificacion.GetDesarrollo: TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo, FDesarrollo, FdesarrolloID);

  Result := TDesarrollo(FDesarrollo);
end;

function TFabricadoProcesoEspecificacion.GetEspecificacion
  : TProcesoEspecificacion;
begin
  if not assigned(FEspecificacion) then
    GetObject(TProcesoEspecificacion, FEspecificacion, EspecificacionID);

  Result := TProcesoEspecificacion(FEspecificacion);
end;

function TFabricadoProcesoEspecificacion.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, FFabricado, FabricadoProceso.FabricadoID);

  Result := TFabricado(FFabricado);
end;

function TFabricadoProcesoEspecificacion.GetFabricadoProceso: TFabricadoProceso;
begin
  if not assigned(FFabricadoProceso) then
    GetObject(TFabricadoProceso, FFabricadoProceso, FabricadoProcesoID);

  Result := TFabricadoProceso(FFabricadoProceso);
end;

{ TFabricadoProcesoEspecificacionDM }
class function TFabricadoProcesoEspecificacionDM.TableName: string;
begin
  Result := 'FabricadoProcesoEspecificaciones';
end;

class function TFabricadoProcesoEspecificacionDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TFabricadoProcesoEspecificacionDM.ID_FieldName: string;
begin
  Result := 'FabricadoProcesoEspecificacionID';
end;

procedure TFabricadoProcesoEspecificacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricadoProcesoEspecificacion(PDObject) do
  begin
    IDField[_FabricadoProcesoID] := FFabricadoProcesoID;
    IDField[_EspecificacionID] := FEspecificacionID;
    IDField[_desarrolloID] := FdesarrolloID;
    IntegerField[_Orden] := Forden;
  end;
end;

procedure TFabricadoProcesoEspecificacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricadoProcesoEspecificacion(PDObject) do
  begin
    FFabricadoProcesoID := IDField[_FabricadoProcesoID];
    FEspecificacionID := IDField[_EspecificacionID];
    FdesarrolloID := IDField[_desarrolloID];
    Forden := IntegerField[_Orden];
  end;
end;

{ TFabricadoProcesoEspecificacionList }
function TFabricadoProcesoEspecificacionList.GetActual : TFabricadoProcesoEspecificacion;
begin
  Result := TFabricadoProcesoEspecificacion(CurrentObject);
end;

constructor TFabricadoProcesoEspecificacionList.CreateByEspecificacion(_E: TProcesoEspecificacion);
  Function WhereString : String;
  begin
    Result := TFabricadoProcesoEspecificacionDM._EspecificacionID + ' = ' + IntToStr(_E.ID);
  end;
begin
  inherited Create(TFabricadoProcesoEspecificacion, TFabricadoProcesoEspecificacionDM.CreateAll(False, WhereString, False, TFabricadoProcesoEspecificacionDM._Orden));
end;

constructor TFabricadoProcesoEspecificacionList.CreateByProceso(_FP: TFabricadoProceso);
  Function WhereString : String;
  begin
    Result := TFabricadoProcesoEspecificacionDM._FabricadoProcesoID + ' = ' + IntToStr(_FP.ID);
  end;
begin
  inherited Create(TFabricadoProcesoEspecificacion, TFabricadoProcesoEspecificacionDM.CreateAll(False, WhereString, False, TFabricadoProcesoEspecificacionDM._Orden));
end;

function TFabricadoProcesoEspecificacionList.CreateNewObject: TPDObject;
begin
  Result := TFabricadoProcesoEspecificacion.Create;
end;

constructor TFabricadoProcesoEspecificacionList.CreateAll;
begin
  inherited Create(TFabricadoProcesoEspecificacion, TFabricadoProcesoEspecificacionDM.CreateAll(False, '', False, TFabricadoProcesoEspecificacionDM._Orden));
end;

{ TFabricadoProceso }
constructor TFabricadoProceso.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFabricadoProcesoDM);
  SaveSqlLog    := False;
  FEspecificaciones := Nil;
end;

procedure TFabricadoProceso.SetprocesoID(Value: TObjectID);
begin
  if (Value <> FprocesoID) and assigned(Fproceso) then
    FreeAndNil(Fproceso);

  FprocesoID := Value;
end;

function TFabricadoProceso.Getproceso: TProceso;
begin
  if not assigned(Fproceso) then
    GetObject(TProceso, Fproceso, procesoID);

  Result := TProceso(Fproceso);
end;

procedure TFabricadoProceso.Delete;
begin
  if Especificaciones.Count > 0 then
    Especificaciones.DeleteAll;
  inherited;
end;

function TFabricadoProceso.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, FFabricado, FabricadoID);

  Result := TFabricado(FFabricado);
end;

function TFabricadoProceso.GetEspecificaciones
  : TFabricadoProcesoEspecificacionList;
begin
  if not assigned(FEspecificaciones) then
    GetList(TPDList(FEspecificaciones), TPDList(TFabricadoProcesoEspecificacionList.CreateByProceso(self)));

  Result := TFabricadoProcesoEspecificacionList(FEspecificaciones);
end;

{ TFabricadoProcesoDM }
class function TFabricadoProcesoDM.TableName: string;
begin
  Result := 'fabricadoprocesos';
end;

class function TFabricadoProcesoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.databaseForFabricados;
end;

class function TFabricadoProcesoDM.ID_FieldName: string;
begin
  Result := 'FabricadoProcesoID';
end;

procedure TFabricadoProcesoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricadoProceso(PDObject) do
  begin
    IDField[_FabricadoID] := FFabricadoID;
    IDField[_procesoID] := FprocesoID;
    IntegerField[_Orden] := Forden;
  end;
end;

procedure TFabricadoProcesoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricadoProceso(PDObject) do
  begin
    FFabricadoID := IDField[_FabricadoID];
    FprocesoID := IDField[_procesoID];
    Forden := IntegerField[_Orden];
  end;
end;

{ TFabricadoProcesoList }
function TFabricadoProcesoList.GetActual: TFabricadoProceso;
begin
  Result := TFabricadoProceso(CurrentObject);
end;

constructor TFabricadoProcesoList.CreateByFabricado(_F: TFabricado);
  Function WhereString : String;
  begin
    Result := TFabricadoProcesoDM._FabricadoID + ' = ' + IntToStr(_F.ID);
  end;
begin
  inherited Create(TFabricadoProceso, TFabricadoProcesoDM.CreateAll(False, WhereString, False, TFabricadoProcesoDM._Orden));
end;

constructor TFabricadoProcesoList.CreateByProceso(_P: TProceso);
  Function WhereString : String;
  begin
    Result := TFabricadoProcesoDM._procesoID + ' = ' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TFabricadoProceso, TFabricadoProcesoDM.CreateAll(False, WhereString, False, TFabricadoProcesoDM._Orden));
end;

function TFabricadoProcesoList.CreateNewObject: TPDObject;
begin
  Result := TFabricadoProceso.Create;
end;

procedure TFabricadoProcesoList.BorrarTodosLosProcesos;
begin
  if Count > 0 then
  begin
    First;
    repeat
      Actual.Delete;
      next;
    until IsLast;
  end;
end;

constructor TFabricadoProcesoList.CreateAll;
begin
  inherited Create(TFabricadoProceso, TFabricadoProcesoDM.CreateAll(False, '', False, TFabricadoProcesoDM._Orden));
end;

{ TFabricadoComponente }
constructor TFabricadoComponente.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFabricadoComponenteDM);
  SaveSqlLog    := False;
  FOrdenDeArmado := null;
  FCantidadDeElementos := null;
  FMostrarDescripcion := False;
  FArticuloOriginalID := NullID;
  FTerminacionOriginalID := NullID;
  FCunioOriginalID := NullID;
  FCrcOriginal := 0;
end;

procedure TFabricadoComponente.SetArticuloOriginalID(const Value: TObjectID);
begin
  if (Value <> FArticuloOriginalID) and assigned(FArticuloOriginal) then
    FreeAndNil(FArticuloOriginal);

  FArticuloOriginalID := Value;
end;

procedure TFabricadoComponente.SetCunioOriginalID(const Value: TObjectID);
begin
  if (Value <> FCunioOriginalID) and assigned(FCunioOriginal) then
    FreeAndNil(FCunioOriginal);

  FCunioOriginalID := Value;
end;

procedure TFabricadoComponente.SetFabricadoID(Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
    FreeAndNil(FFabricado);

  FFabricadoID := Value;
end;

function TFabricadoComponente.GetArticuloOriginal: TArticulo;
begin
  if not assigned(FArticuloOriginal) then
    GetObject(TArticulo, FArticuloOriginal, FArticuloOriginalID);

  Result := TArticulo(FArticuloOriginal);
end;

function TFabricadoComponente.GetCunioOriginal: TCunio;
begin
  if not assigned(FCunioOriginal) then
    GetObject(TCunio, FCunioOriginal, FCunioOriginalID);

  Result := TCunio(FCunioOriginal);
end;

procedure TFabricadoComponente.SetTerminacionOriginalID(const Value: TObjectID);
begin
  if (Value <> FTerminacionOriginalID) and assigned(FTerminacionOriginal) then
    FreeAndNil(FTerminacionOriginal);

  FTerminacionOriginalID := Value;
end;

function TFabricadoComponente.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, FFabricado, FabricadoID);

  Result := TFabricado(FFabricado);
end;

function TFabricadoComponente.GetFabricadoOriginalCodigo: TString;
begin
  if (FFabricadoOriginalCodigo = '' ) and (ArticuloOriginalID <> NullID) and (TerminacionOriginalID <> NullID) and (CunioOriginalID <> NullID) then
    begin
      FFabricadoOriginalCodigo := ArticuloOriginal.Codigo + '-' + TerminacionOriginal .Codigo + '-' + CunioOriginal.Codigo;
    end;
  result := FFabricadoOriginalCodigo;
end;

function TFabricadoComponente.GetFabricadoPadre: TFabricado;
begin
  if not assigned(FFabricadoPadre) then
    GetObject(TFabricado, FFabricadoPadre, FabricadoPadreID);

  Result := TFabricado(FFabricadoPadre);
end;


function TFabricadoComponente.GetTerminacionOriginal: TTerminacion;
begin
  if not assigned(FTerminacionOriginal) then
    GetObject(TTerminacion, FTerminacionOriginal, FTerminacionOriginalID);

  Result := TTerminacion(FTerminacionOriginal);
end;

{ TFabricadoComponenteDM }
class function TFabricadoComponenteDM.TableName: string;
begin
  Result := 'fabricadocomponentes';
end;

class function TFabricadoComponenteDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TFabricadoComponenteDM.ID_FieldName: string;
begin
  Result := 'FabricadoComponenteID';
end;

procedure TFabricadoComponenteDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricadoComponente(PDObject) do
  begin
    IDField[_FabricadoID] := FFabricadoID;
    IDField[_FabricadoPadreID] := FFabricadoPadreID;
    IntegerField[_OrdenDeArmado] := FOrdenDeArmado;
    IntegerField[_CantidadDeElementos] := FCantidadDeElementos;
    BooleanField[_MostrarDescripcion] := FMostrarDescripcion;
    IDField[_ArticuloOriginalID] := FArticuloOriginalID;
    IDField[_TerminacionOriginalID] := FTerminacionOriginalID;
    IDField[_CunioOriginalID] := FCunioOriginalID;
    IntegerField[_CrcOriginal] := FCrcOriginal;
    BooleanField[_EsNoEstandar] := FEsNoEstandar;
  end;
end;

procedure TFabricadoComponenteDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricadoComponente(PDObject) do
  begin
    FFabricadoID := IDField[_FabricadoID];
    FFabricadoPadreID := IDField[_FabricadoPadreID];
    FOrdenDeArmado := IntegerField[_OrdenDeArmado];
    FCantidadDeElementos := IntegerField[_CantidadDeElementos];
    FMostrarDescripcion := BooleanField[_MostrarDescripcion];
    FArticuloOriginalID := IDField[_ArticuloOriginalID];
    FTerminacionOriginalID := IDField[_TerminacionOriginalID];
    FCunioOriginalID := IDField[_CunioOriginalID];
    FCrcOriginal := IntegerField[_CrcOriginal];
    FEsNoEstandar := BooleanField[_EsNoEstandar];
  end;
end;

{ TFabricadoComponenteList }
function TFabricadoComponenteList.GetActual: TFabricadoComponente;
begin
  Result := TFabricadoComponente(CurrentObject);
end;

constructor TFabricadoComponenteList.CreateByHijo(_Hijo: TFabricado);
  Function WhereString : String;
  begin
    Result := TFabricadoComponenteDM._FabricadoID + ' = ' + IntToStr(_Hijo.ID);
  end;
begin
  inherited Create(TFabricadoComponente, TFabricadoComponenteDM.CreateAll(False, WhereString));
end;

constructor TFabricadoComponenteList.CreateByPadre(_Padre: TFabricado);
  Function WhereString : String;
  begin
    Result := TFabricadoComponenteDM._FabricadoPadreID + ' = ' + IntToStr(_Padre.ID);
  end;
begin
  inherited Create(TFabricadoComponente, TFabricadoComponenteDM.CreateAll(False, WhereString));
end;

constructor TFabricadoComponenteList.CreateByPadreYFabricado(_Padre, _Fabricado: TFabricado);
  Function WhereString : String;
  begin
    Result := TFabricadoComponenteDM._FabricadoPadreID + ' = ' + IntToStr(_Padre.ID)+ ' and ' + TFabricadoComponenteDM._FabricadoID + ' = ' + IntToStr(_Fabricado.ID);
  end;
begin
  inherited Create(TFabricadoComponente, TFabricadoComponenteDM.CreateAll(False, WhereString));
end;

constructor TFabricadoComponenteList.CreateEmpty;
begin
  inherited Create(TFabricadoComponente, TFabricadoComponenteDM.CreateEmpty);
end;

function TFabricadoComponenteList.CreateNewObject: TPDObject;
begin
  Result := TFabricadoComponente.Create;
end;

constructor TFabricadoComponenteList.CreateAll;
begin
  inherited Create(TFabricadoComponente, TFabricadoComponenteDM.CreateAll(False));
end;

{ TTmpFabricadoDM }

class function TTmpFabricadoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TTmpFabricadoDM.ID_FieldName: string;
begin
  Result := 'FabricadoID';
end;

procedure TTmpFabricadoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTmpFabricado(PDObject) do
  begin
    IDField[_articuloID]           := articuloID;
    IDField[_CunioID]              := CunioID;
    IDField[_terminacionID]        := terminacionID;
    IntegerField[_Crc]             := Crc;
    StringField[_IdPcUsuario]      := IdPcUsuario;
    StringField[_Codigo]           := codigo;
    StringField[_Descripcion]      := Descripcion;
    BooleanField[_esFabricadoBase] := esFabricadoBase;
    IDField[_desarrolloID]         := desarrolloID;

  end;
end;

procedure TTmpFabricadoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTmpFabricado(PDObject) do
  begin
    FarticuloID          := IDField[_articuloID];
    FCunioID             := IDField[_CunioID];
    FterminacionID       := IDField[_terminacionID];
    Fcrc                 := IntegerField[_Crc];
    FIdPcUsuario         := StringField[_IdPcUsuario];
    Fcodigo              := StringField[_Codigo];
    Fdescripcion         := StringField[_Descripcion];
    FesFabricadoBase     := BooleanField[_esFabricadoBase];
    FdesarrolloID        := IDField[_desarrolloID];
  end;
end;

class function TTmpFabricadoDM.TableName: string;
begin
  Result := 'TmpFabricados';
end;

{ TTmpFabricadoList }

constructor TTmpFabricadoList.CreateAll;
  Function WhereString : String;
  begin
    Result := TTmpFabricadoDM._IdPcUsuario + '=' + QuotedStr(aplicacion.IdPcUsuario);
  end;
begin
  inherited Create(TTmpFabricado, TTmpFabricadoDM.CreateAll(False, WhereString));
end;

constructor TTmpFabricadoList.CreateByArticuloTerminacionCunio(_A: TArticulo; _T: TTerminacion; _C: TCunio);
  Function WhereString : String;
  begin
    Result := '('+ TTmpFabricadoDM._ArticuloID + '=' + IntToStr(_A.ID) + ') and (' + TTmpFabricadoDM._TerminacionID + '=' + IntToStr(_T.ID) + ' and ' + TTmpFabricadoDM._CunioID + '=' + IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TTmpFabricado, TTmpFabricadoDM.CreateAll(False, WhereString));
end;

constructor TTmpFabricadoList.CreateByArticuloTerminacionCunioyCRC(_A: TArticulo; _T: TTerminacion; _C: TCunio; Crc: Integer);
  Function WhereString : String;
  begin
    Result := '('+TTmpFabricadoDM._ArticuloID + '=' + IntToStr(_A.ID) + ') and (' + TTmpFabricadoDM._TerminacionID + '=' + IntToStr(_T.ID);
    Result := Result + ') and (' + TTmpFabricadoDM._CunioID + '=' + IntToStr(_C.ID)  + ') And (' + TTmpFabricadoDM._Crc + '=' + IntToStr(Crc);
    Result := Result + ') and (' + TTmpFabricadoDM._IDPcUsuario + '=' + Quotedstr(Aplicacion.IDPcUsuario)+')';
  end;
begin
  inherited Create(TTmpFabricado, TTmpFabricadoDM.CreateAll(False, WhereString));
end;

constructor TTmpFabricadoList.CreateByFabricadoID(_FTmpID: TObjectID);
  Function WhereString : String;
  begin
    Result := '('+TTmpFabricadoDM.ID_FieldName + '=' + IntToStr(_FTmpID) + ')' ;
  end;
begin
  inherited Create(TTmpFabricado, TTmpFabricadoDM.CreateAll(False, WhereString));
end;

constructor TTmpFabricadoList.CreateEmpty;
begin
  inherited Create(TTmpFabricado, TTmpFabricadoDM.CreateEmpty);
end;

function TTmpFabricadoList.CreateNewObject: TPDObject;
begin
  Result := TTmpFabricado.Create;
end;

procedure TTmpFabricadoList.DeleteAll;
begin
  if Count = 0 then
    exit;

  First;
  repeat
    Actual.Delete;
    next;
  until IsLast;

end;

function TTmpFabricadoList.GetActual: TTmpFabricado;
begin
  Result := TTmpFabricado(CurrentObject);
end;

{ TTmpFabricadoComponenteDM }

class function TTmpFabricadoComponenteDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TTmpFabricadoComponenteDM.ID_FieldName: string;
begin
  Result := 'FabricadoComponenteID';
end;

procedure TTmpFabricadoComponenteDM.PopulateFields(PDObject: TPDObject);
begin
  with TTmpFabricadoComponente(PDObject) do
  begin
    IDField[_FabricadoID] := FFabricadoID;
    IDField[_FabricadoPadreID] := FFabricadoPadreID;
    IntegerField[_OrdenDeArmado] := FOrdenDeArmado;
    IntegerField[_CantidadDeElementos] := FCantidadDeElementos;
    StringField[_IdPcUsuario] := FIdPcUsuario;
    IDField[_ArticuloOriginalID] := FArticuloOriginalID;
    IDField[_TerminacionOriginalID] := FTerminacionOriginalID;
    IDField[_CunioOriginalID] := FCunioOriginalID;
    IntegerField[_CrcOriginal] := FCrcOriginal;
    BooleanField[_esNoEstandar] := FesNoEstandar;
  end;
end;

procedure TTmpFabricadoComponenteDM.PopulateObject(PDObject: TPDObject);
begin
  with TTmpFabricadoComponente(PDObject) do
  begin
    FFabricadoID := IDField[_FabricadoID];
    FFabricadoPadreID := IDField[_FabricadoPadreID];
    FOrdenDeArmado := IntegerField[_OrdenDeArmado];
    FCantidadDeElementos := IntegerField[_CantidadDeElementos];
    FIdPcUsuario := StringField[_IdPcUsuario];
    FArticuloOriginalID := IDField[_ArticuloOriginalID];
    FTerminacionOriginalID := IDField[_TerminacionOriginalID];
    FCunioOriginalID := IDField[_CunioOriginalID];
    FCrcOriginal := IntegerField[_CrcOriginal];
    FesNoEstandar := BooleanField[_esNoEstandar];
  end;
end;

class function TTmpFabricadoComponenteDM.TableName: string;
begin
  Result := 'TmpFabricadoComponentes';
end;

{ TTmpFabricadoComponenteList }

constructor TTmpFabricadoComponenteList.CreateAll;
  Function WhereString: String;
  begin
    Result := '('+TTmpFabricadoComponenteDM._IdPcUsuario + '=' + quotedstr(aplicacion.IDPcUsuario)+')';
  end;
begin
  inherited Create(TTmpFabricadoComponente, TTmpFabricadoComponenteDM.CreateAll(False, WhereString, False, TTmpFabricadoComponenteDM._OrdenDeArmado));
end;

constructor TTmpFabricadoComponenteList.CreateByPadre(_Padre: TTmpFabricado);
Function WhereString : String;
  begin
    Result := TTmpFabricadoComponenteDM._FabricadoPadreID + ' = ' + IntToStr(_Padre.ID);
  end;
begin
  inherited Create(TTmpFabricadoComponente, TTmpFabricadoComponenteDM.CreateAll(False, WhereString, False, TTmpFabricadoComponenteDM._OrdenDeArmado));
end;

constructor TTmpFabricadoComponenteList.CreateEmpty;
begin
  inherited Create(TTmpFabricadoComponente, TTmpFabricadoComponenteDM.CreateEmpty );
end;

function TTmpFabricadoComponenteList.CreateNewObject: TPDObject;
begin
  Result := TTmpFabricadoComponente.Create;
end;

procedure TTmpFabricadoComponenteList.DeleteAll;
begin
  if Count = 0 then
    exit;

  First;
  repeat
    Actual.Delete;
    next;
  until IsLast;
end;

function TTmpFabricadoComponenteList.GetActual: TTmpFabricadoComponente;
begin
  Result := TTmpFabricadoComponente(CurrentObject);
end;

{ TTmpFabricado }

function TTmpFabricado.DescripcionDelFabricado(_MostrarDefault, _ProductoFinal, _articuloModificado, _terminacionModificada, _cunioModificado: Boolean) : string;
var
  A, T, C, e: String;
begin
  Result := '';
  if (articuloID = NullID) or (terminacionID = NullID) or (CunioID = NullID) then
    exit;

  if _ProductoFinal then
    begin
      Result := articulo.Descripcion;
      T := DescripcionDeLosProcesos;
      Result := Result + ' - ' + terminacion.Descripcion + ' ' + T;
      if (Cunio.Descripcion > '') Then
        Result := Result + ' - ' + Cunio.Descripcion;

      C := DescripcionDeLosComponentes;
      if C > '' then
        Result := Result + ' [' + C + ']';
    end
  else
    begin

      A := articulo.TipoDeComponente.descripcionComercial;
      If (_articuloModificado) Then
        A := A + ' ' + articulo.codigo; // se puede cambiar por la descripcion

      T := '';
      if (_terminacionModificada or _MostrarDefault) then
        begin
          T := terminacion.Descripcion;
          if (T > '') then
            T := T + ' ';
        end;

      e := T + DescripcionDeLosProcesos;

      C := '';
      if _cunioModificado then
        C := Cunio.Descripcion + ' (' + Cunio.codigo + ')';

      if (_articuloModificado) or (e > '') or (C > '') then
        Result := A;

      if (Result > '') and (e > '') then
        Result := Result + ' = ';
      Result := Result + e;

      if (Result > '') and (C > '') then
        Result := Result + ' - ';
      Result := Result + C;

    end;
end;

function TTmpFabricado.DescripcionDeLosComponentes: string;
var
  descrip: String;
  F0: TTmpFabricado;
  F0L: TTmpFabricadoList;
  ArticuloCambiado1, TerminacionCambiada1, CunioCambiado1, MostrarDefault: Boolean;
  FPadreID: TObjectID;
  crcPadre, crcActual: Integer;

  Function RecorrerComponentes(_TmpComp: TTmpFabricadoComponente; _MostrarDefault: Boolean): string;
  var
    descrip2: String;
    ArticuloCambiado2, TerminacionCambiada2, CunioCambiado2, TieneCrc2: Boolean;
  begin
    Result := '';
    // si no tiene componentes
    if (_TmpComp.Fabricado.componentes.Count = 0) then
      begin
        TieneCrc2 := (_TmpComp.Fabricado.Crc <> 0);
        ArticuloCambiado2 := (_TmpComp.Fabricado.articuloID <> _TmpComp.ArticuloOriginalID);
        TerminacionCambiada2 := (_TmpComp.Fabricado.terminacionID <> _TmpComp.TerminacionOriginalID);
        CunioCambiado2 := (_TmpComp.Fabricado.CunioID <> _TmpComp.CunioOriginalID);

        if TieneCrc2 or ArticuloCambiado2 or TerminacionCambiada2 or CunioCambiado2 or _MostrarDefault then
          Result := _TmpComp.Fabricado.DescripcionDelFabricado(_MostrarDefault, False, ArticuloCambiado2, TerminacionCambiada2, CunioCambiado2);
        exit;
      end;

    // si tiene componentes
    _TmpComp.Fabricado.componentes.First;
    repeat
      descrip2 := RecorrerComponentes(_TmpComp.Fabricado.componentes.Actual,(_TmpComp.Fabricado.articulo.MostrarComponentesDefaultEnCustomizacion and (_TmpComp.Fabricado.Crc <> 0)));
      if (Result > '') and (descrip2 > '') then
        Result := Result + '; ' + descrip2
      else
        Result := Result + descrip2;

      descrip2 := '';
      _TmpComp.Fabricado.componentes.next;
    until _TmpComp.Fabricado.componentes.IsLast;

  end;

begin
  Result := '';
  if not assigned(FComponentesDesplegados) then
    begin
      if (componentes.Count > 0) then
        begin
          componentes.First;
          repeat

            descrip := RecorrerComponentes(componentes.Actual,(articulo.MostrarComponentesDefaultEnCustomizacion and (Crc <> 0)));
            if (Result > '') and (descrip > '') then
              Result := Result + '; ' + descrip
            else
              Result := Result + descrip;
            descrip := '';
            componentes.next;
          until componentes.IsLast;
        end;
      end
    else if (ComponentesDesplegados.Count > 0) then
      begin
        ComponentesDesplegados.First;
        FPadreID := self.ID;
        crcPadre := self.Crc;

        repeat

          descrip := '';
          crcActual := ComponentesDesplegados.Actual.Fabricado.Crc;
          if (ComponentesDesplegados.Actual.Fabricado.Crc <> 0) or ComponentesDesplegados.Actual.Fabricado.cambioOriginal(ComponentesDesplegados.Actual) or ComponentesDesplegados.Actual.FabricadoPadre.articulo.MostrarComponentesDefaultEnCustomizacion then
            begin
              ArticuloCambiado1 := (ComponentesDesplegados.Actual.Fabricado.articuloID <> ComponentesDesplegados.Actual.ArticuloOriginalID);
              if not ArticuloCambiado1 then
                begin
                  TerminacionCambiada1 := (ComponentesDesplegados.Actual.Fabricado.terminacionID <> ComponentesDesplegados.Actual.TerminacionOriginalID);
                  CunioCambiado1 := (ComponentesDesplegados.Actual.Fabricado.CunioID <> ComponentesDesplegados.Actual.CunioOriginalID);
                end
              else
                begin
                  TerminacionCambiada1 := (ComponentesDesplegados.Actual.Fabricado.terminacionID <> ComponentesDesplegados.Actual.Fabricado.articulo.TerminacionDefaultID);
                  CunioCambiado1 := (ComponentesDesplegados.Actual.Fabricado.CunioID <> ComponentesDesplegados.Actual.Fabricado.articulo.cunioDefaultID);
                end;
              MostrarDefault := (ComponentesDesplegados.Actual.FabricadoPadre.articulo.MostrarComponentesDefaultEnCustomizacion and crcPadre > 0);
              descrip := ComponentesDesplegados.Actual.Fabricado.DescripcionDelFabricado(MostrarDefault, False, ArticuloCambiado1, TerminacionCambiada1,CunioCambiado1);
            end;

          if (Result > '') and (descrip > '') then
            Result := Result + '; ' + descrip
          else
            Result := Result + descrip;
          ComponentesDesplegados.next;

          if not ComponentesDesplegados.IsLast and (FPadreID <> ComponentesDesplegados.Actual.FabricadoPadreID) then
            begin
              FPadreID := ComponentesDesplegados.Actual.FabricadoPadreID;
              crcPadre := crcActual;
            end;

        until ComponentesDesplegados.IsLast;
    end;

end;

function TTmpFabricado.DescripcionDeLosProcesos: string;
var
  e: string;
begin
  Result := '';
  If (Crc = 0) or (Procesos.Count = 0) then
    exit;

  Procesos.First;
  repeat
    if (Result > '') then
      Result := Result + ' / ';

    Result := Result + Procesos.Actual.proceso.Descripcion;

    if Procesos.Actual.Especificaciones.Count > 0 then
    begin
      Result := Result + ': ';
      Procesos.Actual.Especificaciones.First;
      repeat
        if (Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID)
          then
          e :=
            Procesos.Actual.Especificaciones.Actual.Especificacion.Descripcion
        else if (Procesos.Actual.Especificaciones.Actual.desarrolloID <>
            NullID) then
          e := Procesos.Actual.Especificaciones.Actual.desarrollo.codigo;

        if (e > '') then
          Result := Result + e;

        Procesos.Actual.Especificaciones.next;
        if Not Procesos.Actual.Especificaciones.IsLast then
          Result := Result + ', ';
      until Procesos.Actual.Especificaciones.IsLast;
    end;

    Procesos.next;
  until Procesos.IsLast;
end;

destructor TTmpFabricado.Destroy;
begin
  LimpiarComponentesDesplegados;

  if assigned(Fcomponentes) then
    FreeAndNil(Fcomponentes);
  if assigned(FProcesos) then
    FreeAndNil(FProcesos);
  if assigned(Farticulo) then
    FreeAndNil(Farticulo);
  if assigned(Fterminacion) then
    FreeAndNil(Fterminacion);
  if assigned(FCunio) then
    FreeAndNil(FCunio);
  if assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  if assigned(FTraductor) then
    FreeAndNil(FTraductor);
  inherited;
end;

function TTmpFabricado.FabricadoBase(_F: TTmpFabricado): TTmpFabricado;
begin
  Result := TTmpFabricado.Create;
  Result.articuloID := _F.articuloID;
  Result.terminacionID := _F.terminacionID;
  Result.CunioID := _F.CunioID;
  Result.Crc := 0;
  Result.ExpandOnSave := True;
  Result.esFabricadoFinal := True;
  Result.esFabricadoBase := True;
  Result.Save;
  // Result.Componentes.ApplyUpdates;
end;

function TTmpFabricado.CRCBase: String;
begin
  Result := aplicacion.TextService.ReemplazarEn(articulo.codigo, '-', '');
  Result := aplicacion.TextService.ReemplazarEn(Result, '/', '');
  Result := Result + terminacion.codigo + Cunio.codigo;
end;

function TTmpFabricado.CRCProcesos: String;
  function CrcEspecificaciones: String;
  begin
    Result := '';
    if Procesos.Actual.Especificaciones.Count > 0 then
    begin
      Procesos.Actual.Especificaciones.First;
      repeat
        if (Procesos.Actual.Especificaciones.Actual.EspecificacionID <> NullID)
          then
          Result := Result + Procesos.Actual.Especificaciones.Actual.CodigoColor
        else if (Procesos.Actual.Especificaciones.Actual.desarrolloID <>
            NullID) then
          Result := Result +
            Procesos.Actual.Especificaciones.Actual.desarrollo.codigo;

        Procesos.Actual.Especificaciones.next;
      until Procesos.Actual.Especificaciones.IsLast;
    end;
  end;

var
  textoCrcEspecificaciones: String;
begin
  Result := '';
  if Procesos.Count > 0 then
  begin
    Procesos.First;
    repeat
      textoCrcEspecificaciones := CrcEspecificaciones;
      Result := Result + Procesos.Actual.proceso.codigo +
        textoCrcEspecificaciones;
      Procesos.next;
    until Procesos.IsLast;
  end;
end;

function TTmpFabricado.CrcComponentesDelPadre(_TFCDL : TTmpFabricadoComponenteDesplegadoList): string;

var
  posID: TObjectID;
begin
  Result := '';
  if (_TFCDL.Count = 0) then
    exit;

  posID := _TFCDL.Actual.ID;

  _TFCDL.First;
  repeat
    if (_TFCDL.Actual.FabricadoPadreID = ID) then
    begin
      if (_TFCDL.Actual.Fabricado.Crc <> 0) or cambioOriginal(_TFCDL.Actual)
        then
        Result := Result + _TFCDL.Actual.Fabricado.codigo;
      // + IntToStr( _TFCDL.Actual.Fabricado.Crc ) ;
      // calcula crc si el componente fue modificado o customizado
    end;

    _TFCDL.next;
  until _TFCDL.IsLast;
  _TFCDL.Find(posID);
end;

procedure TTmpFabricado.AplicarComponentesDesplegados;
var
  TFCL: TTmpFabricadoComponenteList;
begin
  if Not assigned(ComponentesDesplegados) or (ComponentesDesplegados.Count = 0)
    then
    exit;

  ComponentesDesplegados.First;
  repeat
    if assigned(ComponentesDesplegados.Actual.Fabricado.componentes) then
      FreeAndNil(ComponentesDesplegados.Actual.Fabricado.Fcomponentes);
    ComponentesDesplegados.next;
  until ComponentesDesplegados.IsLast;

end;

procedure TTmpFabricado.CalcularCRC;
var
  CrcNuevo: TEntero;
  TextoCrcBase, TextoCrcProcesos, TextoCrcComponentes: String;
  FTmpL: TTmpFabricadoList;
begin
  // ComponentesDesplegados.ApplyUpdates;
  CrcNuevo := 0;
  TextoCrcBase := CRCBase;
  TextoCrcProcesos := CRCProcesos;
  TextoCrcComponentes := CrcComponentesDelPadre(ComponentesDesplegados);

  if (TextoCrcProcesos > '') or (TextoCrcComponentes > '') then
    CrcNuevo := aplicacion.MathService.Crc(TextoCrcBase + TextoCrcProcesos + TextoCrcComponentes);
  Crc := CrcNuevo;
  ExpandOnSave := False;
  esFabricadoFinal := True;
  Save;
  componentes.ApplyUpdates;

  if (ComponentesDesplegados.Count > 0) then
    begin
      ComponentesDesplegados.First;
      repeat
        FTmpL := TTmpFabricadoList.CreateByFabricadoID(ComponentesDesplegados.Actual.FabricadoID);
        FTmpL.First;
        if (FTmpL.Count > 0) and ((ComponentesDesplegados.Actual.Fabricado.articuloID <> FTmpL.Actual.articuloID) or (ComponentesDesplegados.Actual.Fabricado.terminacionID <> FTmpL.Actual.terminacionID) or
            (ComponentesDesplegados.Actual.Fabricado.CunioID <> FTmpL.Actual.CunioID) or (ComponentesDesplegados.Actual.Fabricado.Crc <> FTmpL.Actual.Crc)) then
          Try
            FTmpL.Actual.articuloID       := ComponentesDesplegados.Actual.Fabricado.articuloID;
            FTmpL.Actual.terminacionID    := ComponentesDesplegados.Actual.Fabricado.terminacionID;
            FTmpL.Actual.CunioID          := ComponentesDesplegados.Actual.Fabricado.CunioID;
            FTmpL.Actual.Crc              := ComponentesDesplegados.Actual.Fabricado.Crc;
            FTmpL.Actual.ExpandOnSave     := False;
            FTmpL.Actual.esFabricadoFinal := True;
            FTmpL.Actual.Save;
            FTmpL.ApplyUpdates;
          Finally
            FreeAndNil(FTmpL);
          end;
        ComponentesDesplegados.next;
      until ComponentesDesplegados.IsLast;
      ComponentesDesplegados.First;
    end;

end;

function TTmpFabricado.cambioOriginal(_TFCD: TTmpFabricadoComponenteDesplegado): Boolean;
begin
  Result := (_TFCD.ArticuloOriginalID <> _TFCD.Fabricado.articuloID );
  Result := Result or (_TFCD.TerminacionOriginalID <> _TFCD.Fabricado.terminacionID);
  Result := Result or (_TFCD.CunioOriginalID <> _TFCD.Fabricado.CunioID);
end;

function TTmpFabricado.CrcComponentes(_TFCDL: TTmpFabricadoComponenteDesplegadoList): string;
var
  posID: TObjectID;
begin
  Result := '';
  posID := _TFCDL.Actual.ID;
  While not _TFCDL.IsLast do
    begin
      if (_TFCDL.Actual.ComponenteDesplegadoPadreID = posID) and ((_TFCDL.Actual.Fabricado.Crc <> 0) or _TFCDL.Actual.esNoEstandar or cambioOriginal(_TFCDL.Actual) ) then
        Result := Result + _TFCDL.Actual.Fabricado.codigo;
      _TFCDL.next;
    end;
  _TFCDL.Find(posID);
end;

procedure TTmpFabricado.recalcularCrcPadres(_TFCDL : TTmpFabricadoComponenteDesplegadoList);
var
  posID, IDComponentePadre: TObjectID;
begin
  posID := _TFCDL.Actual.ID;
  IDComponentePadre := _TFCDL.Actual.ComponenteDesplegadoPadreID;

  if _TFCDL.Find(IDComponentePadre) then
    _TFCDL.Actual.Fabricado.CalcularCrcDesplegados(_TFCDL);

  _TFCDL.Find(posID);
end;

procedure TTmpFabricado.CalcularCrcDesplegados(_TFCDL: TTmpFabricadoComponenteDesplegadoList);
var
  CrcNuevo: TEntero; TextoCrcBase, TextoCrcProcesos, TextoCrcComponentes: String;
  TmpFL : TTmpFabricadoList;
begin
  if _TFCDL.islast or (_TFCDL.Actual.Fabricado.articuloID = NullID) or (_TFCDL.Actual.Fabricado.terminacionID = NullID) or (_TFCDL.Actual.Fabricado.CunioID = NullID) then
    exit;

  CrcNuevo := 0;
  TextoCrcBase        := _TFCDL.Actual.Fabricado.CRCBase;
  TextoCrcProcesos    := _TFCDL.Actual.Fabricado.CRCProcesos;
  TextoCrcComponentes := CrcComponentes(_TFCDL);

  if (TextoCrcProcesos > '') or (TextoCrcComponentes > '') then  // es customizado
    CrcNuevo := aplicacion.MathService.Crc(TextoCrcBase + TextoCrcProcesos + TextoCrcComponentes);

  try
    TmpFL := TTmpFabricadoList.createByID( _TFCDL.Actual.FabricadoID );
    TmpFL.actual.Crc          := CrcNuevo;
    TmpFL.actual.ExpandOnSave := False;
    TmpFL.actual.Save;
    TmpFL.ApplyUpdates;
    _TFCDL.Actual.CleanFabricado;
  finally
    FreeAndNil( TmpFL );
  end;
  recalcularCrcPadres(_TFCDL);
end;

procedure TTmpFabricado.CambiarCunioAPadres(_TFCDL : TTmpFabricadoComponenteDesplegadoList);
var
  posID, IDComponentePadre, CunioNuevoID: TObjectID;
  TmpFL : TTmpFabricadoList;
begin

  if (_TFCDL.Actual.Fabricado.CunioID = NullID) or _TFCDL.Actual.esOrdenPuro(_TFCDL) then
    exit;

  // si el componente es de orden 1 "NO PURO" y se modifico el cuño debe cambiarse el cuño del padre
  posID := _TFCDL.Actual.ID;
  IDComponentePadre := _TFCDL.Actual.ComponenteDesplegadoPadreID;
  CunioNuevoID      := _TFCDL.Actual.Fabricado.CunioID;


  //  Solo debe cambiar los atributos al padre si el padre no es puro
  if (IDComponentePadre <> NullID) and
      _TFCDL.Find(IDComponentePadre) and
      (not _TFCDL.Actual.esOrdenPuro(_TFCDL)) and
      (_TFCDL.Actual.Fabricado.CunioID <> CunioNuevoID) then

    Try
      TmpFL := TTmpFabricadoList.CreateByID( _TFCDL.Actual.FabricadoID );
      TmpFL.actual.CunioID := CunioNuevoID;
      TmpFL.actual.ExpandOnSave  := False;
      TmpFL.actual.Save;
      TmpFL.ApplyUpdates;
      _TFCDL.Actual.CleanFabricado;
      _TFCDL.Actual.Fabricado.CambiarCunioAPadres(_TFCDL);
    Finally
      FreeAndNil( TmpFL );
    End;

  _TFCDL.Find(posID);
end;

procedure TTmpFabricado.CambiarTerminacionAPadres(_TFCDL: TTmpFabricadoComponenteDesplegadoList);
var
  posID, IDComponentePadre, terminacionNuevaID: TObjectID;
  TmpFL : TTmpFabricadoList;
begin

  if (_TFCDL.Actual.Fabricado.terminacionID = NullID) or _TFCDL.Actual.esOrdenPuro(_TFCDL) or (_TFCDL.Actual.OrdenDeArmado > 1) then
    exit;

  // si el componente es de orden 1 "NO PURO" y se modifico la terminacion debe cambiarse la terminacion del padre
  posID              := _TFCDL.Actual.ID;
  IDComponentePadre  := _TFCDL.Actual.ComponenteDesplegadoPadreID;
  terminacionNuevaID := _TFCDL.Actual.Fabricado.terminacionID;

  //  Solo debe cambiar los atributos al padre si el padre no es puro
  if (IDComponentePadre <> NullID) and
     _TFCDL.Find(IDComponentePadre) and
      (not _TFCDL.Actual.esOrdenPuro(_TFCDL)) and
     (_TFCDL.Actual.Fabricado.terminacionID <> terminacionNuevaID) then
    try
      TmpFL := TTmpFabricadoList.CreateByID( _TFCDL.Actual.FabricadoID );
      TmpFL.actual.terminacionID := terminacionNuevaID;
      TmpFL.actual.ExpandOnSave  := False;
      TmpFL.actual.Save;
      TmpFL.ApplyUpdates;
      _TFCDL.Actual.CleanFabricado;
      _TFCDL.Actual.Fabricado.CambiarTerminacionAPadres(_TFCDL);
    finally
      FreeAndNil( TmpFL );
    end;
  _TFCDL.Find(posID);
end;

procedure TTmpFabricado.LimpiarComponentesDesplegados;
begin
  if assigned(FComponentesDesplegados) then
  begin
    FComponentesDesplegados.ApplyUpdates;
    FreeAndNil(FComponentesDesplegados);
  end;
end;

procedure TTmpFabricado.LimpiarCodigo;
begin
  FCodigo := null;
end;

procedure TTmpFabricado.LimpiarComponentes;
begin
  if assigned(FComponentes) then
  begin
    FComponentes.ApplyUpdates;
    FreeAndNil(FComponentes);
  end;
end;

procedure TTmpFabricado.LimpiarDescripcion;
begin
  Fdescripcion := null;
end;

procedure TTmpFabricado.LimpiarProcesos;
begin
  if assigned(FProcesos) then
  begin
    FProcesos.ApplyUpdates;
    FreeAndNil(FProcesos);
  end;
end;

constructor TTmpFabricado.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTmpFabricadoDM);
  SaveSqlLog    := False;
  FIdPcUsuario                       := aplicacion.IdPcUsuario;
  FValidarDuplicados                 := False;
  RellenarCodigo                     := False;
  FExpandOnSave                      := False; // al contrario que TFabricado
  Fcodigo                            := null;
  Fcrc                               := 0   ;
  Fdescripcion                       := null;
  FCodigoCRC                         := null;
  FarchivoDeImagen                   := null;
  FarchivoSinImagen                  := null;
  FesFabricadoFinal                  := False;
  Fcomponentes                       := Nil;
  FComponentesDesplegados            := Nil;
  FesFabricadoBase                   := False;
  FDescartar                         := True;
  FdesarrolloID                      := NullID;
  FDesarrollo                        := Nil;
  FTiempoEstimadoEnDiasCustomizacion := Null;
end;

procedure TTmpFabricado.Delete;
begin
  if (Procesos.Count > 0) then
    begin
      Procesos.First;
      repeat
        if Procesos.Actual.Especificaciones.Count > 0 then
        begin
          Procesos.Actual.Especificaciones.First;
          Procesos.Actual.Especificaciones.Actual.deleteFull(Procesos.Actual);
        end;

        Procesos.next;
      until Procesos.IsLast;

      Procesos.First;
      Procesos.Actual.deleteFull(self);
    end;

  if (componentes.Count > 0) then
    begin
      componentes.First;
      componentes.Actual.deleteFull(self);
    end;
  inherited Delete;
end;

procedure TTmpFabricado.DeleteFabricadoCompleto;
begin
  if (componentes.Count > 0) then
    begin
      componentes.First;
      repeat
        componentes.Actual.Fabricado.DeleteFabricadoCompleto;
        componentes.next;
      until (componentes.IsLast);
    end;
  Delete;
end;

procedure TTmpFabricado.DeleteFull;
var
  Condicion: String;
begin
  Condicion := TTmpFabricadoDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario);
  inherited DeleteFull(Condicion);
end;

function TTmpFabricado.GetarchivoDeImagen: TString;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagen = null) then
    try
      FL := TFotoList.CreateByArticuloTerminacionCunioyCRC(articulo.codigo, terminacion.codigo, Cunio.codigo, CodigoCrc);
      FL.First;
      if (FL.Count > 0) then
        FarchivoDeImagen := FL.Actual.RutaDeArchivoRed
      else
        FarchivoDeImagen := archivoSinImagen;
    finally
      FreeAndNil(FL);
    end;

  Result := FarchivoDeImagen;
end;

function TTmpFabricado.GetarchivoSinImagen: TString;
begin
  if (FarchivoSinImagen = null) then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenFabricados;

  Result := FarchivoSinImagen;
end;

function TTmpFabricado.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);

  Result := TArticulo(Farticulo);
end;

function TTmpFabricado.getcodigo: TString;
begin
  if (FCodigo = null) or (FCodigo = '') then
    begin
      FCodigo := '';
      if Assigned(Articulo) Then
        FCodigo := Articulo.Codigo;

      if Assigned(Terminacion) Then
        FCodigo := FCodigo + '-' + Terminacion.Codigo;

      if Assigned(Cunio) Then
        FCodigo := FCodigo + '-' + Cunio.Codigo;

      if (Crc) <> 0 Then
        FCodigo := FCodigo + '#' + CodigoCrc;
    end;

  Result := FCodigo;
end;

function TTmpFabricado.GetCodigoCrc: TString;
begin
  if (FCodigoCRC = null) and (Fcrc <> 0) then
    FCodigoCRC := aplicacion.MathService.ConvertirDecimalABaseN(Fcrc,
      aplicacion.ConstantAllocator.PRM_BaseParaCovertirCRC);

  if Fcrc = 0 then
    FCodigoCRC := '';

  Result := FCodigoCRC;
end;

function TTmpFabricado.Getcomponentes: TTmpFabricadoComponenteList;
begin
  if not assigned(Fcomponentes) then
    GetList(TPDList(Fcomponentes),TPDList(TTmpFabricadoComponenteList.CreateByPadre(self)));

  Result := TTmpFabricadoComponenteList(Fcomponentes);
end;

function TTmpFabricado.GetComponentesDesplegados : TTmpFabricadoComponenteDesplegadoList;
  Procedure Cargar_componentes(_FCL: TTmpFabricadoComponenteList; _PadreID: TObjectID; var _N: TEntero);
  var
    FC2: TTmpFabricadoComponenteDesplegado;
  Begin
    if (_FCL.Count = 0) then
      exit;

    _FCL.First;
    Repeat
      FC2 := TTmpFabricadoComponenteDesplegado.Create;
      FC2.ComponenteDesplegadoPadreID  := _PadreID;
      FC2.FabricadoComponenteID        := _FCL.Actual.ID;
      FC2.FabricadoPadreID             := _FCL.Actual.FabricadoPadreID;
      FC2.FabricadoPadre.articuloID    := _FCL.Actual.FabricadoPadre.articuloID;
      FC2.FabricadoPadre.terminacionID := _FCL.Actual.FabricadoPadre.terminacionID;
      FC2.FabricadoPadre.CunioID       := _FCL.Actual.FabricadoPadre.CunioID;
      FC2.FabricadoPadre.Crc           := _FCL.Actual.FabricadoPadre.Crc;
      FC2.FabricadoID                  := _FCL.Actual.FabricadoID;
      FC2.Fabricado.articuloID         := _FCL.Actual.Fabricado.articuloID;
      FC2.Fabricado.terminacionID      := _FCL.Actual.Fabricado.terminacionID;
      FC2.Fabricado.CunioID            := _FCL.Actual.Fabricado.CunioID;
      FC2.Fabricado.Crc                := _FCL.Actual.Fabricado.Crc;
      FC2.OrdenDeArmado                := _FCL.Actual.OrdenDeArmado;
      FC2.CantidadDeElementos          := _FCL.Actual.CantidadDeElementos;
      FC2.internalOrder                := _N;
      FC2.ArticuloOriginalID           := _FCL.Actual.ArticuloOriginalID;
      FC2.TerminacionOriginalID        := _FCL.Actual.TerminacionOriginalID;
      FC2.CunioOriginalID              := _FCL.Actual.CunioOriginalID;
      FC2.CrcOriginal                  := _FCL.Actual.CrcOriginal;
      FC2.esNoEstandar                 := _FCL.Actual.EsNoEstandar;
      _N := _N + 1;
      FC2.Save;
      FComponentesDesplegados.Add(FC2);
      Cargar_componentes(_FCL.Actual.Fabricado.componentes, FC2.ID, _N);
      FC2 := Nil;
      _FCL.next;
    Until _FCL.IsLast;
  End;

var
  FC: TTmpFabricadoComponenteDesplegado;
  N: TEntero;
begin
  Assert( esFabricadoFinal = True ,'Debe ser un FabricadoFinal para tener componentes desplegados');
  if not assigned(FComponentesDesplegados) and esFabricadoFinal then
  begin
    FComponentesDesplegados := TTmpFabricadoComponenteDesplegadoList.CreateEmpty;
    if (componentes.Count > 0) then
      begin
        componentes.ApplyUpdates;
        N := 1;
        componentes.First;
        repeat
          FC := TTmpFabricadoComponenteDesplegado.Create;
          FC.ComponenteDesplegadoPadreID  := ID;
          FC.FabricadoComponenteID        := componentes.Actual.ID;
          FC.FabricadoID                  := componentes.Actual.FabricadoID;
          FC.FabricadoPadreID             := componentes.Actual.FabricadoPadreID;
          FC.FabricadoPadre.articuloID    := componentes.Actual.FabricadoPadre.articuloID;
          FC.FabricadoPadre.terminacionID := componentes.Actual.FabricadoPadre.terminacionID;
          FC.FabricadoPadre.CunioID       := componentes.Actual.FabricadoPadre.CunioID;
          FC.FabricadoPadre.Crc           := componentes.Actual.FabricadoPadre.Crc;

          FC.OrdenDeArmado                := componentes.Actual.OrdenDeArmado;
          FC.CantidadDeElementos          := componentes.Actual.CantidadDeElementos;
          FC.internalOrder                := N;
          FC.ArticuloOriginalID           := componentes.Actual.ArticuloOriginalID;
          FC.TerminacionOriginalID        := componentes.Actual.TerminacionOriginalID;
          FC.CunioOriginalID              := componentes.Actual.CunioOriginalID;
          FC.CrcOriginal                  := componentes.Actual.CrcOriginal;
          FC.esNoEstandar                 := componentes.Actual.EsNoEstandar;
          FC.Save;
          N := N + 1;

          FComponentesDesplegados.Add(FC);
          Cargar_componentes(componentes.Actual.Fabricado.componentes, FC.ID, N);
          FC := Nil;
          componentes.next;
        until componentes.IsLast;
      end;
  End;
  Result := TTmpFabricadoComponenteDesplegadoList(FComponentesDesplegados);
end;

function TTmpFabricado.GetCunio: TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio, FCunio, CunioID);

  Result := TCunio(FCunio);
end;

function TTmpFabricado.GetDesarrollo: TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo, FDesarrollo, desarrolloID);

  Result := TDesarrollo(FDesarrollo);
end;

function TTmpFabricado.GetDesarrolloID: TObjectID;

  function RecorrerLosProcesos(_F: TTmpFabricado): TObjectID;
  begin
    Result := NullID;
    if (_F.Procesos.Count > 0) then
    begin
      _F.Procesos.First;
      repeat
        if (_F.Procesos.Actual.Especificaciones.Count > 0) then
        begin
          _F.Procesos.Actual.Especificaciones.First;
          repeat
            Result := _F.Procesos.Actual.Especificaciones.Actual.desarrolloID;
            _F.Procesos.Actual.Especificaciones.next;
          until (Result <> NullID)
            or _F.Procesos.Actual.Especificaciones.IsLast;
        end;
        _F.Procesos.next;
      until (Result <> NullID) or _F.Procesos.IsLast;
    end;
  end;

  function RecorrerLosComponentes(_F: TTmpFabricado): TObjectID;
  begin
    Result := NullID;
    if (_F.componentes.Count > 0) then
    begin
      _F.componentes.First;
      // Obtengo desarrolloid de los procesos
      repeat
        Result := RecorrerLosProcesos(_F.componentes.Actual.Fabricado);
        if (Result <> NullID) then
          exit;
        // Obtengo Desarrolloid de los componentes
        Result := RecorrerLosComponentes(_F.componentes.Actual.Fabricado);

        _F.componentes.next;
      until (Result <> NullID) or _F.componentes.IsLast;
    end;
  end;

begin

  if (FdesarrolloID = NullID) then
  begin
    // Obtengo desarrolloid de los procesos
    FdesarrolloID := RecorrerLosProcesos(self);

    // Obtengo Desarrolloid de los componentes
    if (FdesarrolloID = NullID) then
      FdesarrolloID := RecorrerLosComponentes(self);
  end;
  Result := FdesarrolloID;

end;

function TTmpFabricado.GetDescripcion: TString;
begin
  if (FDescripcion = Null) or (FDescripcion = '') then
    if FesFabricadoBase then
      FDescripcion := ''
    else
      FDescripcion := DescripcionDelFabricado(Articulo.MostrarComponentesDefaultEnCustomizacion);
  Result := FDescripcion;
end;

function TTmpFabricado.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TTmpFabricadoList;
end;

function TTmpFabricado.GetProcesos: TTmpFabricadoProcesoList;
begin
  if not assigned(FProcesos) then
    GetList(TPDList(FProcesos), TPDList(TTmpFabricadoProcesoList.CreateByFabricado(Self)));
  Result := TTmpFabricadoProcesoList(FProcesos);
end;

function TTmpFabricado.Getterminacion: TTerminacion;
begin
  if not assigned(Fterminacion) then
    GetObject(TTerminacion, Fterminacion, terminacionID);
  Result := TTerminacion(Fterminacion);
end;

function TTmpFabricado.GetTerminacionDefault: TTerminacion;
begin
  if not assigned(FTerminacionDefault) then
    GetObject(TTerminacion, FTerminacionDefault, TerminacionDefaultID);
  Result := TTerminacion(FTerminacionDefault);
end;

function TTmpFabricado.GetTerminacionDefaultID: TObjectID;
var
  TDL: TTerminacionComponenteTerminacionDefaultList;
begin
  Result := NullID;
  if (articuloID = NullID) then
    exit;
  {
    la terminacion default la debo calcular:
    1- de la tabla de terminaciones default por tipo de componente
    2- de la property TerminacionDefaultID
    3- la terminacion del padre
    }
  try
    TDL := TTerminacionComponenteTerminacionDefaultList.CreateByTerminacionAndTipoDeComponente(terminacion, articulo.TipoDeComponente);

    if TDL.Count > 0 then
    Begin
      TDL.First;
      Result := TDL.Actual.TerminacionDefaultID;
    End
    else
    begin
      if articulo.TerminacionDefaultID <> NullID then
        Result := articulo.TerminacionDefaultID
      else
        Result := terminacionID;
    end;
  finally
    FreeAndNil(TDL);
  end;
end;

function TTmpFabricado.GetTiempoEstimadoEnDiasCustomizacion: TEntero;
  function sumarTiempoProcesos(_F: TTmpFabricado): TEntero;
  begin
    Result := 0;
    if (_F.Procesos.Count = 0) then
      exit;

    _F.Procesos.First;
    repeat
      Result := Result + _F.Procesos.Actual.proceso.tiempoEstimadoEnDias;
      if _F.Procesos.Actual.Especificaciones.Count > 0 then
      begin
        _F.Procesos.Actual.Especificaciones.First;
        repeat
          Result := Result + _F.Procesos.Actual.Especificaciones.Actual.
            Especificacion.tiempoEstimadoEnDias;
          _F.Procesos.Actual.Especificaciones.next;
        until _F.Procesos.Actual.Especificaciones.IsLast;
      end;
      _F.Procesos.next;
    until _F.Procesos.IsLast;
  end;

  function TiempoTerminacionNoDefault(_F: TTmpFabricado): TEntero;
  begin
    Result := 0;
    if (_F.terminacionID <> _F.TerminacionDefaultID) then
      Result := (_F.TerminacionDefault.tiempoEstimadoEnDias - _F.terminacion.tiempoEstimadoEnDias);
  end;

  function recorroComponentes(_F: TTmpFabricado): TEntero;
  var
    T, S: TEntero;

  begin
    Result := TiempoTerminacionNoDefault(_F); // ajusto la diferencia de tiempos por cambio de terminacion default
    Result := Result + sumarTiempoProcesos(_F);

    if _F.componentes.Count > 0 then
    begin
      _F.componentes.First;
      T := 0;
      repeat
        S := recorroComponentes(_F.componentes.Actual.Fabricado);
        if (S > T) then
          T := S; // guardo en T el componente que lleva mas tiempo

        _F.componentes.next;
      until _F.componentes.IsLast;
      Result := Result + T;
    end;
  end;

Begin
  if (FTiempoEstimadoEnDiasCustomizacion = null) and (Crc <> 0) then
    FTiempoEstimadoEnDiasCustomizacion := RecorroComponentes(self);
  // se toman los días del componente que se tarda más
  if (Crc = 0) then
    FTiempoEstimadoEnDiasCustomizacion := 0;
  Result := FTiempoEstimadoEnDiasCustomizacion;
end;

procedure TTmpFabricado.CrearComponentes(_ExpandOnSave, _esFabricadoBase: TBoolean);

  function BuscarOCrearComponente(_TDL:  TTerminacionComponenteTerminacionDefaultList; _ExpandOnSave, _EsFabBase: TBoolean; _Orden: Integer): TTmpFabricadoComponente;

    function ComponenteAsignado(_A: TArticulo; _T: TTerminacion; _C: TCunio; _Crc: TEntero): TObjectID;
    var
      i: Integer;
      FID, AID, TID, CID, CrcNum, N: Integer;
    begin
      Result := NullID;
      for i := 0 to aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar.Count - 1 do
        begin
          FID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar[i], '|', 1));
          AID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar[i], '|', 2));
          TID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar[i], '|', 3));
          CID := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar[i], '|', 4));
          CrcNum := strtoint(aplicacion.TextService.ObtenerSeparadosXComas(aplicacion.TemporalesDelSistema.TmpFabricadosSinGrabar[i], '|',5));
          if (AID = _A.ID) and (TID = _T.ID) and (CID = _C.ID) and (CrcNum = _Crc) Then
            begin
              Result := FID;
              break;
            end;
        end;
    end;

  var
    FL: TTmpFabricadoList;
    F: TTmpFabricado;
    A: TArticulo;
    T: TTerminacion;
    C: TCunio;
    FC: TTmpFabricadoComponente;
    FID: TObjectID;

    function TerminacionIDDelUltimoComponente(_A: TArticulo): TObjectID;
    begin
      if _A.componentes.Count = 0 then
        begin
          _TDL.First;
          if (_TDL.Count > 0) and _TDL.Find(_A.TipoDeComponente) then
            Result := _TDL.Actual.TerminacionDefaultID
          else
            Result := self.terminacionID;
        end;

      if _A.componentes.Count > 0 then
        begin
          _A.componentes.First;
          repeat
            Result := TerminacionIDDelUltimoComponente(_A.componentes.Actual.componente);
            _A.componentes.next;
          until (_A.componentes.IsLast) or (_A.componentes.Actual.orden <> 1);
        end;
    end;

  begin
    A := TArticulo.Create;
    A.Load(articulo.componentes.Actual.componenteID);

    T := TTerminacion.Create;
    // si el articulo tiene una terminacion default se le asigna esta
    // pero si el componente es de orden 1 puro debe conservar la terminacion del producto final
    if (_Orden = 1) then
      T.Load(terminacionID)
    else
      begin
        if A.TerminacionDefaultID <> NullID then
          T.Load(A.TerminacionDefaultID)
        else
          begin
            // sino la busca en la tabla de componentes default
            _TDL.First;
            if (_TDL.Count > 0) and _TDL.Find(A.TipoDeComponente) then
              T.Load(_TDL.Actual.TerminacionDefaultID)
            else if (articulo.componentes.Actual.orden = 1) then
              T.Load(self.terminacionID)
            else
              T.Load(TerminacionIDDelUltimoComponente(A));
          end;
      end;

    C := TCunio.Create;
    if (articulo.TransfiereAtributos) and (articulo.componentes.Actual.orden = 1) then
      C.Load(CunioID)
    else
      begin
        if articulo.componentes.Actual.componente.HeredaCunioDelProductoFinal then
          C.Load(CunioID)
        else if (articulo.componentes.Actual.componente.cunioDefaultID <> NullID)
          then
          C.Load(articulo.componentes.Actual.componente.cunioDefaultID)
        else
          C.Load(aplicacion.ParametrosDelSistema.SinCunio.ID);
      end;
    try
      FL := TTmpFabricadoList.CreateEmpty;
      begin
        FID := ComponenteAsignado(A, T, C, 0);
        if (FID = NullID) then
          begin
            F := TTmpFabricado.Create;
            F.articuloID := A.ID;
            F.terminacionID := T.ID;
            F.CunioID := C.ID;
            F.Crc := 0;
            F.TmpTerminacionDelProducto := TmpTerminacionDelProducto;
            // transmito la terminacion del producto hacia los componentes
            F.ExpandOnSave := _ExpandOnSave;
            F.esFabricadoBase := _EsFabBase;
            F.Save;
            FL.Add(F);
            aplicacion.TemporalesDelSistema.AgregarTmpFabricadoSinGrabar(F);
            F := Nil;
            FC := TTmpFabricadoComponente.Create;
            FC.FabricadoPadreID := self.ID;
            FC.FabricadoID := FL.Actual.ID;
            FC.OrdenDeArmado := articulo.componentes.Actual.orden;
            FC.CantidadDeElementos := articulo.componentes.Actual.Cantidad;
          end
        else
          begin
            FC := TTmpFabricadoComponente.Create;
            FC.FabricadoPadreID := self.ID;
            FC.FabricadoID := FID;
            FC.OrdenDeArmado := articulo.componentes.Actual.orden;
            FC.CantidadDeElementos := articulo.componentes.Actual.Cantidad;
          end;
      end;

      // los siguientes Ids son para poder comprobar asignado en memoria
      FC.Fabricado.articuloID := A.ID;
      FC.Fabricado.terminacionID := T.ID;
      FC.Fabricado.CunioID := C.ID;
      FC.Fabricado.Crc := 0;
      FC.Fabricado.ExpandOnSave := _ExpandOnSave;
      FC.Save;
      Result := FC;
      FC := Nil;
    finally
      FreeAndNil(FL);
    end;
  end;

var
  codigoDeComponente: String;
  componente: TTmpFabricadoComponente;
  TDL: TTerminacionComponenteTerminacionDefaultList;
begin
  if (articulo.componentes.Count = 0) then
    exit;

  try
    TDL := TTerminacionComponenteTerminacionDefaultList.CreateByTerminacion(terminacion);
    articulo.componentes.First;
    repeat
      componente := BuscarOCrearComponente(TDL, _ExpandOnSave, _esFabricadoBase, articulo.componentes.Actual.orden);
      componentes.Add(componente);
      componente := Nil;
      articulo.componentes.next;
    until articulo.componentes.IsLast;
  finally
    FreeAndNil(TDL);
  end;
end;

function TTmpFabricado.Save: Boolean;
  Procedure RecorrerComponentes(_F: TTmpFabricado; _F0: TTmpFabricado);
  begin
    if (_F.componentes.Count > 0) then
    begin
      _F.componentes.First;
      _F0.componentes.First;
      repeat
        _F.componentes.Actual.ArticuloOriginalID    := _F0.componentes.Actual.Fabricado.articuloID;
        _F.componentes.Actual.TerminacionOriginalID := _F0.componentes.Actual.Fabricado.terminacionID;
        _F.componentes.Actual.CunioOriginalID       := _F0.componentes.Actual.Fabricado.CunioID;
        _F.componentes.Actual.CrcOriginal           := _F0.componentes.Actual.Fabricado.Crc;
        _F.componentes.Actual.Save;

        RecorrerComponentes(_F.componentes.Actual.Fabricado, _F0.componentes.Actual.Fabricado);
        _F.componentes.next;
        _F0.componentes.next;
      until _F.componentes.IsLast;
    end;
  end;

  Procedure asignarOriginales;
  var
    F0: TTmpFabricado;
  begin

    if (componentes.Count = 0) then
      exit;

    componentes.First;
    if (componentes.Actual.ArticuloOriginalID <> NullID) then
      exit;

    try
      F0 := FabricadoBase(self);
      F0.componentes.ApplyUpdates;
      RecorrerComponentes(self, F0);
    finally
      F0.componentes.ApplyUpdates;
      F0.DeleteFabricadoCompleto;
      F0.Delete;
      F0.componentes.ApplyUpdates;
      FreeAndNil(F0);
    end;
  end;

var
  debeAsignarOriginales: Boolean;
begin
  Result := inherited Save;
  if Result then
    begin
      debeAsignarOriginales := esFabricadoFinal and not esFabricadoBase and ExpandOnSave;
      if ExpandOnSave then
        begin
          CrearComponentes(ExpandOnSave, esFabricadoBase);
          ExpandOnSave := False;
        end;

      if esFabricadoFinal then
        aplicacion.TemporalesDelSistema.BorrarTmpFabricadosSinGrabar;

      if debeAsignarOriginales then
        begin
          asignarOriginales;
          Fdescripcion := null;
        end;
    end;
end;

procedure TTmpFabricado.SetArticuloID(const Value: TObjectID);
begin
  if (Value <> FarticuloID) then
    begin
      Fcodigo := null;
      FCodigoCRC := null;
      Fdescripcion := null;
      if assigned(Farticulo) then
        FreeAndNil(Farticulo);
      if assigned(Fprocesos) then
        FreeAndNil(Fprocesos);
      if assigned(FComponentes) then
        FreeAndNil(FComponentes);
    end;
  FarticuloID := Value;
end;

procedure TTmpFabricado.SetCrc(const Value: TEntero);
begin
  if (Fcrc <> Value) then
    begin
      FCodigoCRC    := null;
      Fcodigo       := null;
      Fdescripcion  := null;
      FdesarrolloID := NullID;
    end;
  Fcrc := Value;
end;

procedure TTmpFabricado.SetCunioID(Value: TObjectID);
begin
  if (Value <> FCunioID)  then
    begin
      Fcodigo := null;
      FCodigoCRC := null;
      Fdescripcion := null;
      If assigned(FCunio) then
        FreeAndNil(FCunio);
      If assigned(Fprocesos) then
        FreeAndNil(Fprocesos);
      If assigned(FComponentes) then
        FreeAndNil(FComponentes);
    end;
  FCunioID := Value;
end;

procedure TTmpFabricado.SetDesarrolloID(const Value: TObjectID);
begin
  if (Value <> FdesarrolloID) and assigned(FDesarrollo) then
    FreeAndNil(FDesarrollo);

  FdesarrolloID := Value;
end;

procedure TTmpFabricado.SetTerminacionDefaultID(const Value: TObjectID);
begin
  if (Value <> FTerminacionDefaultID) and assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);

  FTerminacionDefaultID := Value;
end;

procedure TTmpFabricado.SetterminacionID(Value: TObjectID);
begin
  if (Value <> FterminacionID) then
    begin
      Fcodigo := null;
      Fdescripcion := null;
      FCodigoCRC := null;
      if assigned(Fterminacion) then
        FreeAndNil(Fterminacion);
      if assigned(Fprocesos) then
        FreeAndNil(Fprocesos);
      if assigned(FComponentes) then
        FreeAndNil(FComponentes);
    end;
  FterminacionID := Value;
end;

{ TTmpFabricadoComponente }

constructor TTmpFabricadoComponente.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTmpFabricadoComponenteDM);
  SaveSqlLog    := False;
  FIdPcUsuario := aplicacion.IdPcUsuario;
  FOrdenDeArmado := null;
  FCantidadDeElementos := null;
  FArticuloOriginalID := NullID;
  FTerminacionOriginalID := NullID;
  FCunioOriginalID := NullID;
  FCrcOriginal := 0;
  FesNoEstandar := False;
end;

procedure TTmpFabricadoComponente.deleteFull(_F: TTmpFabricado);
var
  condicion: String;
begin
  if (_F = Nil) then
    condicion := TTmpFabricadoComponenteDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario)
  else
    condicion := TTmpFabricadoComponenteDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario) + ' and ' + TTmpFabricadoComponenteDM._FabricadoPadreID + ' = ' + IntToStr(_F.ID);
  inherited deleteFull(condicion);
end;

function TTmpFabricadoComponente.GetArticuloOriginal: TArticulo;
begin
  if not assigned(FArticuloOriginal) then
    GetObject(TArticulo, FArticuloOriginal, FArticuloOriginalID);

  Result := TArticulo(FArticuloOriginal);
end;

function TTmpFabricadoComponente.GetCunioOriginal: TCunio;
begin
  if not assigned(FCunioOriginal) then
    GetObject(TCunio, FCunioOriginal, FCunioOriginalID);

  Result := TCunio(FCunioOriginal);
end;

function TTmpFabricadoComponente.GetFabricado: TTmpFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TTmpFabricado, FFabricado, FFabricadoID);

  Result := TTmpFabricado(FFabricado);
end;

function TTmpFabricadoComponente.GetFabricadoPadre: TTmpFabricado;
begin
  if not assigned(FFabricadoPadre) then
    GetObject(TTmpFabricado, TPDObject(FFabricadoPadre), FabricadoPadreID);

  Result := TTmpFabricado(FFabricadoPadre);
end;

function TTmpFabricadoComponente.GetTerminacionOriginal: TTerminacion;
begin
  if not assigned(FTerminacionOriginal) then
    GetObject(TTerminacion, FTerminacionOriginal, FTerminacionOriginalID);

  Result := TTerminacion(FTerminacionOriginal);
end;

procedure TTmpFabricadoComponente.SetArticuloOriginalID(const Value: TObjectID);
begin
  if (Value <> FArticuloOriginalID) and assigned(FArticuloOriginal) then
    FreeAndNil(FArticuloOriginal);

  FArticuloOriginalID := Value;
end;

procedure TTmpFabricadoComponente.SetCunioOriginalID(const Value: TObjectID);
begin
  if (Value <> FCunioOriginalID) and assigned(FCunioOriginal) then
    FreeAndNil(FCunioOriginal);

  FCunioOriginalID := Value;
end;

procedure TTmpFabricadoComponente.SetFabricadoID(const Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
    FreeAndNil(FFabricado);
  FFabricadoID := Value;
end;

procedure TTmpFabricadoComponente.SetTerminacionOriginalID
  (const Value: TObjectID);
begin
  if (Value <> FTerminacionOriginalID) and assigned(FTerminacionOriginal) then
    FreeAndNil(FTerminacionOriginal);
  FTerminacionOriginalID := Value;
end;

{ TTmpFabricadoProceso }
constructor TTmpFabricadoProceso.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTmpFabricadoProcesoDM);
  SaveSqlLog    := False;
  FIdPcUsuario := aplicacion.IdPcUsuario;
end;

procedure TTmpFabricadoProceso.SetFabricadoID(Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
    FreeAndNil(FFabricado);

  FFabricadoID := Value;
end;

procedure TTmpFabricadoProceso.SetprocesoID(Value: TObjectID);
begin
  if (Value <> FprocesoID) and assigned(Fproceso) then
    FreeAndNil(Fproceso);

  FprocesoID := Value;

end;

procedure TTmpFabricadoProceso.Delete;
begin
  Especificaciones.DeleteAll;
  inherited;
end;

procedure TTmpFabricadoProceso.deleteFull(_F: TTmpFabricado);
var
  condicion: String;
begin
  if (_F = Nil) then
    condicion := TTmpFabricadoProcesoDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario)
  else
    condicion := TTmpFabricadoProcesoDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario) + ' and ' + TTmpFabricadoProcesoDM._FabricadoID + ' = ' + IntToStr(_F.ID);
  inherited deleteFull(condicion);

end;

function TTmpFabricadoProceso.GetFabricado: TTmpFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TTmpFabricado, FFabricado, FabricadoID);

  Result := TTmpFabricado(FFabricado);
end;

function TTmpFabricadoProceso.Getproceso: TProceso;
begin
  if not assigned(Fproceso) then
    GetObject(TProceso, Fproceso, procesoID);

  Result := TProceso(Fproceso);
end;

function TTmpFabricadoProceso.GetEspecificaciones
  : TTmpFabricadoProcesoEspecificacionList;
begin
  if not assigned(FEspecificaciones) then
    GetList(TPDList(FEspecificaciones), TPDList(TTmpFabricadoProcesoEspecificacionList.CreateByFabricadoProceso(self)) );

  Result := TTmpFabricadoProcesoEspecificacionList(FEspecificaciones);
end;

{ TTmpFabricadoProcesoDM }
class function TTmpFabricadoProcesoDM.TableName: string;
begin
  Result := 'tmpfabricadoprocesos';
end;

class function TTmpFabricadoProcesoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TTmpFabricadoProcesoDM.ID_FieldName: string;
begin
  Result := 'FabricadoProcesoID';
end;

procedure TTmpFabricadoProcesoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTmpFabricadoProceso(PDObject) do
  begin
    IDField[_FabricadoID] := FFabricadoID;
    IDField[_procesoID] := FprocesoID;
    StringField[_IdPcUsuario] := FIdPcUsuario;
    IntegerField[_Orden] := Forden;
  end;
end;

procedure TTmpFabricadoProcesoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTmpFabricadoProceso(PDObject) do
  begin
    FFabricadoID := IDField[_FabricadoID];
    FprocesoID := IDField[_procesoID];
    FIdPcUsuario := StringField[_IdPcUsuario];
    Forden := IntegerField[_Orden];
  end;
end;

{ TTmpFabricadoProcesoList }
function TTmpFabricadoProcesoList.GetActual: TTmpFabricadoProceso;
begin
  Result := TTmpFabricadoProceso(CurrentObject);
end;

function TTmpFabricadoProcesoList.CreateNewObject: TPDObject;
begin
  Result := TTmpFabricadoProceso.Create;
end;

procedure TTmpFabricadoProcesoList.DeleteAll;
begin
  if Count = 0 then
    exit;

  First;
  repeat
    Actual.Delete;
    next;
  until IsLast;
end;

constructor TTmpFabricadoProcesoList.CreateAll;
  Function WhereString: String;
  begin
    Result :=  '('+ TTmpFabricadoProcesoDM.TableName +'.'+ TTmpFabricadoProcesoDM._IdPcUsuario + '=' + quotedstr (aplicacion.IdPcUsuario)+')';
  end;
begin
  inherited Create(TTmpFabricadoProceso, TTmpFabricadoProcesoDM.CreateAll( False, WhereString, False, TTmpFabricadoProcesoDM._Orden));
end;

constructor TTmpFabricadoProcesoList.CreateByFabricado(_F: TTmpFabricado);
  Function WhereString: String;
  begin
    Result :=  '('+ TTmpFabricadoProcesoDM.TableName +'.'+ TTmpFabricadoProcesoDM._IdPcUsuario + '=' + quotedstr (aplicacion.IdPcUsuario)+')';
    Result := Result + ' and (' + TTmpFabricadoProcesoDM.TableName +'.'+ TTmpFabricadoProcesoDM._FabricadoID + ' = ' + IntToStr( _F.ID) +')';
  end;
begin
  inherited Create(TTmpFabricadoProceso, TTmpFabricadoProcesoDM.CreateAll( False, WhereString, False, TTmpFabricadoProcesoDM._Orden));
end;

{ TTipoDePedidoDeVenta }

function TTipoDePedidoDeVenta.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('TipoPedido', 'CodigoTipoPedido = ' + QuotedStr( CodigoSifab )  , 'CodigoInternoTipoPedido');
  Result := FCodigoInternoSifab;
end;

function TTipoDePedidoDeVenta.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDePedidoDeVentaList;
end;

function TTipoDePedidoDeVenta.GetEsParaNota: TBoolean;
begin
  Result := EsParaNotaDeCredito or EsParaNotaDeDebito;
end;

function TTipoDePedidoDeVenta.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDePedidoDeVenta.SetEMailA(const Value: TString);
var
  i, X: Integer;
  dire: String;
begin
  IF (Value <> '') and ((FEMailA = null) or (FEMailA <> Value)) then
  begin
    X := aplicacion.TextService.ContarSeparadosXComas(Value, ';');
    for i := 1 to X do
    begin
      dire := aplicacion.TextService.ObtenerSeparadosXComas(Value, ';', i);
      if Not aplicacion.TextService.ValidarEmail(dire) Then
        Aplicacion.RaiseExceptionCreate('Ingrese un email válido: ' + dire);
    end;
  end;
  FEMailA := Value;
end;

procedure TTipoDePedidoDeVenta.setTipoDeFormularioID(const Value: TObjectID);
begin
  if Assigned(FTipoDeFormulario) and (FTipoDeFormularioID <> Value) then
    FreeAndNil(FTipoDeFormulario );
  fTipoDeFormularioID := Value;
end;

procedure TTipoDePedidoDeVenta.validacionDePrioridad;
begin
  if EsAutonumerado and (( Prioridad <= 0 ) or ( Prioridad > 99 )) then
    Aplicacion.RaiseExceptionCreate('La prioridad debe ser entre 1 y 99.');
end;

procedure TTipoDePedidoDeVenta.validacionKits;
begin
  if EsParaKit and ( UnidadesPorKitDefault = 0 ) then
    Aplicacion.RaiseExceptionCreate('Debe indicar una cantidad default de unidades por Kit.');
end;

procedure TTipoDePedidoDeVenta.ValidateOnInsert;
begin
  inherited;
  validacionDePrioridad;
  validacionKits;
end;

procedure TTipoDePedidoDeVenta.ValidateOnUpdate;
begin
  inherited;
  validacionDePrioridad;
  validacionKits;
end;

constructor TTipoDePedidoDeVenta.Create;
begin
  inherited;
  DMObject             := Aplicacion.DMProvider.GetGlobalDM(TTipoDePedidoDeVentaDM);
  FEsAutonumerado      := False;
  FPrioridad           := 0;
  fTipoDeFormularioID  := NullID;
  FEsParaNotaDeCredito := False;
  FEsParaNotaDeDebito  := False;
  FEsParaAnticipo      := False;
  FCodigoInternoSifab  := Null;
  FValidaPreciosDeVenta:= False;
  FFiguraEnTiraDiaria  := False;
  SaveSqlLog           := True;
end;


{ TTipoDePedidoDeVentaDM }
class function TTipoDePedidoDeVentaDM.TableName: string;
begin
  Result := 'tiposdepedidodeventa';
end;

class function TTipoDePedidoDeVentaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDePedidoDeVentaDM.ID_FieldName: string;
begin
  Result := 'TipoDePedidoDeVentaID';
end;

procedure TTipoDePedidoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDePedidoDeVenta(PDObject) do
    begin
      StringField[_Descripcion]           := Descripcion;
      StringField[_Codigo]                := codigo;
      BooleanField[_EsAutonumerado]       := FEsAutonumerado;
      IntegerField[_Prioridad]            := FPrioridad;
      BooleanField[_EsExportacion]        := FEsExportacion;
      StringField[_CodigoSifab]           := FCodigoSifab;
      BooleanField[_MostrarTotalesEnMail] := FMostrarTotalesEnMail;
      IDField[_TipoDeFormularioID]        := fTipoDeFormularioID;
      BooleanField[_seProduceParaStock]   := FSeProduceParaStock;
      BooleanField[_esInactivo]           := FesInactivo;
      BooleanField[_EsParaNotaDeCredito]  := FEsParaNotaDeCredito;
      BooleanField[_EsParaNotaDeDebito]   := FEsParaNotaDeDebito;
      BooleanField[_EsParaAnticipo]       := FEsParaAnticipo;
      BooleanField[_Resta]                := FResta;
      BooleanField[_PermiteEditarDescripcionDelItem]:= PermiteEditarDescripcionDelItem;
      BooleanField[_VerificaCreditoDisponible]    := FVerificaCreditoDisponible;
      BooleanField[_EnviarAvisoRecepcionCliente]    := EnviarAvisoRecepcionCliente;
      BooleanField[_EnviarAvisoRecepcionUsuario]    := EnviarAvisoRecepcionUsuario;
      BooleanField[_EnviarAvisoRecepcionVendedor] := EnviarAvisoRecepcionVendedor;
      BooleanField[_EnviarConfirmacionCliente]      := EnviarConfirmacionCliente;
      BooleanField[_EnviarConfirmacionUsuario]      := EnviarConfirmacionUsuario;
      BooleanField[_EnviarConfirmacionVendedor]     := EnviarConfirmacionVendedor;
      BooleanField[_EsParaKit]                      := EsParaKit;
      IntegerField[_UnidadesPorKitDefault]          := UnidadesPorKitDefault;
      BooleanField[_ValidaPreciosDeVenta]           := ValidaPreciosDeVenta;
      StringField[_EmailA]                          := EmailA;
      BooleanField[_FiguraEnTiraDiaria]             := FiguraEnTiraDiaria;
      BooleanField[_MostrarAlerta]                  := FMostrarAlerta;
      StringField[_MensajeDeAlerta]                 := FMensajeDeAlerta;
    end;
end;

procedure TTipoDePedidoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDePedidoDeVenta(PDObject) do
    begin
      FDescripcion          := StringField[_Descripcion];
      FCodigo               := StringField[_Codigo];
      FEsAutonumerado       := BooleanField[_EsAutonumerado];
      FPrioridad            := IntegerField[_Prioridad];
      FEsExportacion        := BooleanField[_EsExportacion];
      FCodigoSifab          := StringField[_CodigoSifab];
      FMostrarTotalesEnMail := BooleanField[_MostrarTotalesEnMail];
      FEsInactivo           := BooleanField[_EsInactivo];
      FSeProduceParaStock   := BooleanField[_SeProduceParaStock];
      FTipoDeFormularioID   := IDField[_TipoDeFormularioID];
      FEsParaNotaDeCredito  := BooleanField[_EsParaNotaDeCredito];
      FEsParaNotaDeDebito   := BooleanField[_EsParaNotadeDebito];
      FEsParaAnticipo       := BooleanField[_EsParaAnticipo];
      FResta                := BooleanField[_Resta];
      FVerificaCreditoDisponible     := BooleanField[_VerificaCreditoDisponible];
      FPermiteEditarDescripcionDelItem := BooleanField[_PermiteEditarDescripcionDelItem];
      fEnviarAvisoRecepcionCliente     := BooleanField[_EnviarAvisoRecepcionCliente];
      fEnviarAvisoRecepcionUsuario     := BooleanField[_EnviarAvisoRecepcionUsuario];
      fEnviarAvisoRecepcionVendedor  := BooleanField[_EnviarAvisoRecepcionVendedor];
      fEnviarConfirmacionCliente       := BooleanField[_EnviarConfirmacionCliente];
      fEnviarConfirmacionUsuario       := BooleanField[_EnviarConfirmacionUsuario];
      fEnviarConfirmacionVendedor      := BooleanField[_EnviarConfirmacionVendedor];
      fEmailA                          := StringField[_EmailA];
      FEsParaKit                       := BooleanField[_EsParaKit];
      FUnidadesPorKitDefault           := IntegerField[_UnidadesPorKitDefault];
      FValidaPreciosDeVenta            := BooleanField[_ValidaPreciosDeVenta];
      FFiguraEnTiraDiaria              := BooleanField[_FiguraEnTiraDiaria];
      FMostrarAlerta                   := BooleanField[_MostrarAlerta];
      FMensajeDeAlerta                 := StringField[_MensajeDeAlerta];
    end;
end;

{ TTipoDePedidoDeVentaList }
function TTipoDePedidoDeVentaList.GetActual: TTipoDePedidoDeVenta;
begin
  Result := TTipoDePedidoDeVenta(CurrentObject);
end;

constructor TTipoDePedidoDeVentaList.CreateByExportacion(_SoloActivos: Boolean; _ParaNota: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + '=1)';
    if _ParaNota then
      begin
        Result := Result + ' and  ((' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=1) or ';
        Result := Result + '(' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=1))';
      end
    else
      begin
        Result := Result + ' and  ((' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=0) and ';
        Result := Result + '(' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=0))'
      end
  end;
begin
  inherited Create(TTipoDePedidoDeVenta, TTipoDePedidoDeVentaDM.CreateAll(False, WhereString , _SoloActivos, ''));
end;

constructor TTipoDePedidoDeVentaList.CreateByLocales(_SoloActivos: Boolean; _ParaNota: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TTipoDePedidoDeVentaDM.TableName + '.' + TTipoDePedidoDeVentaDM._EsExportacion + '=0)';
    if _ParaNota then
      begin
        Result := Result + ' and  ((' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=1) or ';
        Result := Result + '(' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=1))';
      end
    else
      begin
        Result := Result + ' and  ((' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeCredito + '=0) and ';
        Result := Result + '(' +TTipoDePedidoDeVentaDM.TableName+'.'+TTipoDePedidoDeVentaDM._EsParaNotaDeDebito + '=0))'
      end
  end;
begin
  inherited Create(TTipoDePedidoDeVenta, TTipoDePedidoDeVentaDM.CreateAll(False, WhereString , _SoloActivos, ''));
end;

function TTipoDePedidoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TTipoDePedidoDeVenta.Create;
end;

constructor TTipoDePedidoDeVentaList.CreateAll(_SoloActivos: Boolean; _Order: String );
  Function WhereString: String;
  begin
    Result := '';
  end;
begin
  inherited Create(TTipoDePedidoDeVenta, TTipoDePedidoDeVentaDM.CreateAll(False, WhereString , _SoloActivos, _Order ));
end;

{ TTipoDePresupuestoDeVenta }
function TTipoDePresupuestoDeVenta.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDePresupuestoDeVentaList;
end;

function TTipoDePresupuestoDeVenta.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDePresupuestoDeVenta.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if Assigned(FTipoDeFormulario) and (FTipoDeFormularioID <> Value) then
    FreeAndNil(FTipoDeFormulario );
  fTipoDeFormularioID := Value;
end;

constructor TTipoDePresupuestoDeVenta.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDePresupuestoDeVentaDM);
  FEsAutonumerado := False;
  FPrioridad := 0;
  FTipoDeFormularioID := NullID;
end;

{ TTipoDePresupuestoDeVentaDM }
class function TTipoDePresupuestoDeVentaDM.TableName: string;
begin
  Result := 'TiposdePresupuestoDeVenta';
end;

class function TTipoDePresupuestoDeVentaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDePresupuestoDeVentaDM.ID_FieldName: string;
begin
  Result := 'TipoDePresupuestoDeVentaID';
end;

procedure TTipoDePresupuestoDeVentaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDePresupuestoDeVenta(PDObject) do
    begin
      StringField[_Descripcion]     := Descripcion;
      StringField[_Codigo]          := codigo;
      BooleanField[_EsAutonumerado] := FEsAutonumerado;
      IntegerField[_Prioridad]      := FPrioridad;
      IDField[_TipoDeFormularioID]  := FTipoDeFormularioID;
      BooleanField[_EsInactivo]     := FEsInactivo;
    end;
end;

procedure TTipoDePresupuestoDeVentaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDePresupuestoDeVenta(PDObject) do
    begin
      Fdescripcion        := StringField[_Descripcion];
      Fcodigo             := StringField[_Codigo];
      FEsAutonumerado     := BooleanField[_EsAutonumerado];
      FPrioridad          := IntegerField[_Prioridad];
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FEsInactivo         := BooleanField[_EsInactivo];
    end;
end;

{ TTipoDePresupuestoDeVentaList }
function TTipoDePresupuestoDeVentaList.GetActual: TTipoDePresupuestoDeVenta;
begin
  Result := TTipoDePresupuestoDeVenta(CurrentObject);
end;

function TTipoDePresupuestoDeVentaList.CreateNewObject: TPDObject;
begin
  Result := TTipoDePresupuestoDeVenta.Create;
end;

constructor TTipoDePresupuestoDeVentaList.CreateAll( _SoloActivos: Boolean) ;
begin
  inherited Create(TTipoDePresupuestoDeVenta, TTipoDePresupuestoDeVentaDM.CreateAll( False, '', _SoloActivos));
end;

{ TTipoDePedidoDeProduccion }
function TTipoDePedidoDeProduccion.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDePedidoDeProduccionList;
end;

constructor TTipoDePedidoDeProduccion.Create;
begin
  inherited;
  DMObject        := aplicacion.DMProvider.GetGlobalDM(TTipoDePedidoDeProduccionDM);
  FEsAutonumerado := False;
  FPrioridad      := 0;
  FEsInactivo     := False;
end;

{ TTipoDePedidoDeProduccionDM }
class function TTipoDePedidoDeProduccionDM.TableName: string;
begin
  Result := 'tiposdePedidoDeProduccion';
end;

class function TTipoDePedidoDeProduccionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDePedidoDeProduccionDM.ID_FieldName: string;
begin
  Result := 'TipoDePedidoDeProduccionID';
end;

procedure TTipoDePedidoDeProduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDePedidoDeProduccion(PDObject) do
  begin
    StringField[_Descripcion]     := Descripcion;
    StringField[_Codigo]          := codigo;
    BooleanField[_EsAutonumerado] := EsAutonumerado;
    IntegerField[_Prioridad]      := Prioridad;
    BooleanField[_EsInactivo]     := EsInactivo;
  end;
end;

procedure TTipoDePedidoDeProduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDePedidoDeProduccion(PDObject) do
  begin
    Fdescripcion    := StringField[_Descripcion];
    Fcodigo         := StringField[_Codigo];
    FEsAutonumerado := BooleanField[_EsAutonumerado];
    FPrioridad      := IntegerField[_Prioridad];
    FEsInactivo     := BooleanField[_EsInactivo];
  end;
end;

{ TTipoDePedidoDeProduccionList }
function TTipoDePedidoDeProduccionList.GetActual: TTipoDePedidoDeProduccion;
begin
  Result := TTipoDePedidoDeProduccion(CurrentObject);
end;

function TTipoDePedidoDeProduccionList.CreateNewObject: TPDObject;
begin
  Result := TTipoDePedidoDeProduccion.Create;
end;

constructor TTipoDePedidoDeProduccionList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TTipoDePedidoDeProduccion,    TTipoDePedidoDeProduccionDM.CreateAll(False, '', _SoloActivos) );
end;

{ TTmpFabricadoProcesoEspecificacion }
constructor TTmpFabricadoProcesoEspecificacion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTmpFabricadoProcesoEspecificacionDM);
  SaveSqlLog    := False;
  FIdPcUsuario := aplicacion.IdPcUsuario;
  FCodigoColor := null;
  FdesarrolloID := NullID;
end;

procedure TTmpFabricadoProcesoEspecificacion.SetDesarrolloID
  (const Value: TObjectID);
begin
  if (FdesarrolloID <> Value) and assigned(FDesarrollo) then
    FreeAndNil(FDesarrollo);

  FdesarrolloID := Value;
end;

procedure TTmpFabricadoProcesoEspecificacion.SetEspecificacionID(Value: TObjectID);
begin
  if (Value <> FEspecificacionID) and assigned(FEspecificacion) then
    begin
      FreeAndNil(FEspecificacion);
      FCodigoColor := null;
    end;
  FEspecificacionID := Value;
end;

procedure TTmpFabricadoProcesoEspecificacion.SetFabricadoProcesoID(const Value: TObjectID);
begin
  if (FFabricadoProcesoID <> Value) and assigned(FFabricadoProceso) then
    FreeAndNil(FFabricadoProceso);
  FFabricadoProcesoID := Value;
end;

procedure TTmpFabricadoProcesoEspecificacion.deleteFull(_TmpFP: TTmpFabricadoProceso);
var
  condicion: String;
  ftmp: TTmpFabricado;
begin
  if (_TmpFP = Nil) then
    condicion := TTmpFabricadoProcesoEspecificacionDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario)
  else
    condicion := TTmpFabricadoProcesoEspecificacionDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario) + ' and ' +
      TTmpFabricadoProcesoEspecificacionDM._FabricadoProcesoID + ' = ' + IntToStr(_TmpFP.ID);
  inherited deleteFull(condicion);
end;

function TTmpFabricadoProcesoEspecificacion.GetCodigoColor: TString;
begin
  if (FCodigoColor = null) then
    FCodigoColor := Especificacion.Color.codigo;
  Result := FCodigoColor;
end;

function TTmpFabricadoProcesoEspecificacion.GetDesarrollo: TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo, FDesarrollo, FdesarrolloID);
  Result := TDesarrollo(FDesarrollo);
end;

function TTmpFabricadoProcesoEspecificacion.GetEspecificacion : TProcesoEspecificacion;
begin
  if not assigned(FEspecificacion) then
    GetObject(TProcesoEspecificacion, FEspecificacion, EspecificacionID);
  Result := TProcesoEspecificacion(FEspecificacion);
end;

function TTmpFabricadoProcesoEspecificacion.GetFabricadoProceso : TTmpFabricadoProceso;
begin
  if not assigned(FFabricadoProceso) then
    GetObject(TTmpFabricadoProceso, FFabricadoProceso, FFabricadoProcesoID);

  Result := TTmpFabricadoProceso(FFabricadoProceso);
end;

{ TTmpFabricadoProcesoEspecificacionDM }
class function TTmpFabricadoProcesoEspecificacionDM.TableName: string;
begin
  Result := 'tmpfabricadoprocesoEspecificaciones';
end;

class function TTmpFabricadoProcesoEspecificacionDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForfabricados;
end;

class function TTmpFabricadoProcesoEspecificacionDM.ID_FieldName: string;
begin
  Result := 'FabricadoProcesoEspecificacionID';
end;

procedure TTmpFabricadoProcesoEspecificacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTmpFabricadoProcesoEspecificacion(PDObject) do
  begin
    IDField[_FabricadoProcesoID] := FFabricadoProcesoID;
    IDField[_EspecificacionID] := FEspecificacionID;
    StringField[_IdPcUsuario] := FIdPcUsuario;
    IDField[_desarrolloID] := FdesarrolloID;
    IntegerField[_Orden] := Forden;
  end;
end;

procedure TTmpFabricadoProcesoEspecificacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTmpFabricadoProcesoEspecificacion(PDObject) do
  begin
    FFabricadoProcesoID := IDField[_FabricadoProcesoID];
    FEspecificacionID := IDField[_EspecificacionID];
    FdesarrolloID := IDField[_desarrolloID];
    FIdPcUsuario := StringField[_IdPcUsuario];
    Forden := IntegerField[_Orden];
  end;
end;

{ TTmpFabricadoProcesoEspecificacionList }
function TTmpFabricadoProcesoEspecificacionList.GetActual : TTmpFabricadoProcesoEspecificacion;
begin
  Result := TTmpFabricadoProcesoEspecificacion(CurrentObject);
end;

function TTmpFabricadoProcesoEspecificacionList.CreateNewObject: TPDObject;
begin
  Result := TTmpFabricadoProcesoEspecificacion.Create;
end;

procedure TTmpFabricadoProcesoEspecificacionList.DeleteAll;
begin
  if Count = 0 then
    exit;
  First;
  repeat
    Actual.Delete;
    next;
  until IsLast;
end;

constructor TTmpFabricadoProcesoEspecificacionList.CreateAll;
var
  condicion: string;
begin
  Condicion := TTmpFabricadoProcesoEspecificacionDM._IdPcUsuario + '=' + quotedstr(aplicacion.IdPcUsuario);
  inherited Create(TTmpFabricadoProcesoEspecificacion, TTmpFabricadoProcesoEspecificacionDM.CreateAll(False, Condicion, False, TTmpFabricadoProcesoEspecificacionDM._Orden));
end;

constructor TTmpFabricadoProcesoEspecificacionList.CreateByFabricadoProceso(_FP: TTmpFabricadoProceso);
var
  condicion: string;
begin
  Condicion := '('+TTmpFabricadoProcesoEspecificacionDM._FabricadoProcesoID + ' = ' + IntToStr(_FP.ID)+')';
  inherited Create(TTmpFabricadoProcesoEspecificacion, TTmpFabricadoProcesoEspecificacionDM.CreateAll(False, Condicion, False, TTmpFabricadoProcesoEspecificacionDM._Orden));
end;

//{ TTipoDePrecio }
//function TTipoDePrecio.calcular(_Precio: TReal; _Moneda: TMoneda): TReal;
//begin
//  Result := _Precio;
//
//  If (_Precio = 0) or ((Fporcentaje = 0) and (self.Incremento = 0)) then
//    exit;
//
//  if (porcentaje > 0) then
//  begin
//    if not self.esResta then
//      Result := _Precio * (1 + (self.porcentaje / 100))
//    else
//      Result := _Precio * (1 - (self.porcentaje / 100));
//  end
//  else
//  begin
//    if not self.esResta then
//      Result := _Precio + aplicacion.CurrencyService.ConvertirMonedaToMoneda
//        (self.Incremento, self.MonedaIncremento, _Moneda,
//        aplicacion.ParametrosDelSistema.FechaDeVigenciaListaDePrecios)
//    else
//      Result := _Precio - aplicacion.CurrencyService.ConvertirMonedaToMoneda
//        (self.Incremento, self.MonedaIncremento, _Moneda,
//        aplicacion.ParametrosDelSistema.FechaDeVigenciaListaDePrecios);
//  end;
//
//end;
//
//constructor TTipoDePrecio.Create;
//begin
//  inherited;
//  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDePrecioDM);
//  SaveSqlLog := True;
//  Fporcentaje := 0;
//  FIncremento := 0;
//  FesResta := False;
//end;
//
//function TTipoDePrecio.GetMonedaIncremento: TMoneda;
//begin
//  if not assigned(FMonedaIncremento) then
//    GetObject(TMoneda, FMonedaIncremento, FMonedaIncrementoID);
//
//  Result := TMoneda(FMonedaIncremento);
//
//end;
//
//function TTipoDePrecio.Save: Boolean;
//begin
//  if (porcentaje > 0) and (Incremento > 0) then
//    Aplicacion.RaiseExceptionCreate(
//      'El porcentaje y el incremento son distintos de 0. Agregele valor a sólo uno de ellos.');
//
//  if (Incremento = 0) then
//    MonedaIncrementoID := NullID;
//
//  inherited Save;
//end;
//
//procedure TTipoDePrecio.SetMonedaIncrementoID(const Value: TObjectID);
//begin
//  if (Value <> FMonedaIncrementoID) and assigned(FMonedaIncremento) then
//    FreeAndNil(FMonedaIncremento);
//
//  FMonedaIncrementoID := Value;
//end;
//
//{ TTipoDePrecioDM }
//class function TTipoDePrecioDM.TableName: string;
//begin
//  Result := 'tiposdeprecio';
//end;
//
//class function TTipoDePrecioDM.EsInactivo_FieldName: string;
//begin
//  Result := _EsInactivo;
//end;
//
//class function TTipoDePrecioDM.ID_FieldName: string;
//begin
//  Result := 'TipoDePrecioID';
//end;
//
//procedure TTipoDePrecioDM.PopulateFields(PDObject: TPDObject);
//begin
//  with TTipoDePrecio(PDObject) do
//  begin
//    StringField[_Descripcion] := Descripcion;
//    FloatField[_Porcentaje] := Fporcentaje;
//    FloatField[_incremento] := FIncremento;
//    BooleanField[_esResta] := FesResta;
//    IDField[_monedaIncrementoID] := FMonedaIncrementoID;
//    BooleanField[_EsInactivo] := EsInactivo;
//  end;
//end;
//
//procedure TTipoDePrecioDM.PopulateObject(PDObject: TPDObject);
//begin
//  with TTipoDePrecio(PDObject) do
//  begin
//    Fdescripcion := StringField[_Descripcion];
//    Fporcentaje := FloatField[_Porcentaje];
//    FIncremento := FloatField[_incremento];
//    FesResta := BooleanField[_esResta];
//    FMonedaIncrementoID := IDField[_monedaIncrementoID];
//    EsInactivo  := BooleanField[_EsInactivo];
//  end;
//end;


{ TPaletaDeColor }
constructor TPaletaDeColor.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TPaletaDeColorDM);
end;

{ TPaletaDeColorDM }
class function TPaletaDeColorDM.TableName: string;
begin
  Result := 'paletasdecolores';
end;

class function TPaletaDeColorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TPaletaDeColorDM.ID_FieldName: string;
begin
  Result := 'PaletaDeColorID';
end;

procedure TPaletaDeColorDM.PopulateFields(PDObject: TPDObject);
begin
  with TPaletaDeColor(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TPaletaDeColorDM.PopulateObject(PDObject: TPDObject);
begin
  with TPaletaDeColor(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    FEsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TPaletaDeColorList }
function TPaletaDeColorList.GetActual: TPaletaDeColor;
begin
  Result := TPaletaDeColor(CurrentObject);
end;

function TPaletaDeColorList.CreateNewObject: TPDObject;
begin
  Result := TPaletaDeColor.Create;
end;

constructor TPaletaDeColorList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TPaletaDeColor, TPaletaDeColorDM.CreateAll(False, '', _SoloActivos));
end;

{ TKolorTraduccion }
constructor TKolorTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TKolorTraduccionDM);
end;

procedure TKolorTraduccion.SeTKolorID(Value: TObjectID);
begin
  if (Value <> FColorID) and assigned(FColor) then
    FreeAndNil(FColor);

  FColorID := Value;

end;

function TKolorTraduccion.GeTKolor: TKolor;
begin
  if not assigned(FColor) then
    GetObject(TKolor, FColor, ColorID);

  Result := TKolor(FColor);
end;

{ TKolorTraduccionDM }
class function TKolorTraduccionDM.TableName: string;
begin
  Result := 'colortraducciones';
end;

class function TKolorTraduccionDM.ID_FieldName: string;
begin
  Result := 'ColorTraduccionID';
end;

procedure TKolorTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TKolorTraduccion(PDObject) do
  begin
    IDField[_resourceLanguageID] := FresourceLanguageID;
    StringField[_Descripcion] := Descripcion;
    IDField[_ColorID] := FColorID;
  end;
end;

procedure TKolorTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TKolorTraduccion(PDObject) do
  begin
    FresourceLanguageID := IDField[_resourceLanguageID];
    Fdescripcion := StringField[_Descripcion];
    FColorID := IDField[_ColorID];
  end;
end;

{ TProcesoTraduccionList }
function TKolorTraduccionList.GetActual: TKolorTraduccion;
begin
  Result := TKolorTraduccion(CurrentObject);
end;

constructor TKolorTraduccionList.CreateByColor(_K: TKolor);
  Function WhereString : String;
  begin
    Result := TKolorTraduccionDM._ColorID + '=' + IntToStr(_K.ID);
  end;
begin
  inherited Create(TKolorTraduccion, TKolorTraduccionDM.CreateAll(False, WhereString));
end;

constructor TKolorTraduccionList.CreateByColorYLanguage(_K: TKolor; _L: TResourceLanguage);
  Function WhereString : String;
  begin
    Result := TKolorTraduccionDM._ColorID + '=' + IntToStr(_K.ID) + ' and ' + TKolorTraduccionDM._resourceLanguageID + '=' + IntToStr(_L.ID);
  end;
begin
  inherited Create(TKolorTraduccion, TKolorTraduccionDM.CreateAll(False,WhereString));
end;

function TKolorTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TKolorTraduccion.Create;
end;

constructor TKolorTraduccionList.CreateAll;
begin
  inherited Create(TKolorTraduccion, TKolorTraduccionDM.CreateAll(False));
end;

{ TTerminacionComponenteTerminacionDefault }
constructor TTerminacionComponenteTerminacionDefault.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TTerminacionComponenteTerminacionDefaultDM);
end;

procedure TTerminacionComponenteTerminacionDefault.SetTipoDeComponenteID(Value: TObjectID);
begin
  if (Value <> FTipoDeComponenteID) and assigned(FTipoDeComponente) then
    FreeAndNil(FTipoDeComponente);
  FTipoDeComponenteID := Value;
end;

function TTerminacionComponenteTerminacionDefault.GetTipoDeComponente: TTipoDeComponente;
begin
  if not assigned(FTipoDeComponente) then
    GetObject(TTipoDeComponente, FTipoDeComponente, TipoDeComponenteID);
  Result := TTipoDeComponente(FTipoDeComponente);
end;

procedure TTerminacionComponenteTerminacionDefault.SetTerminacionDefaultID(Value: TObjectID);
begin
  if (Value <> FTerminacionDefaultID) and assigned(FTerminacionDefault) then
    FreeAndNil(FTerminacionDefault);
  FTerminacionDefaultID := Value;
end;

function TTerminacionComponenteTerminacionDefault.GetTerminacionDefault : TTerminacion;
begin
  if not assigned(FTerminacionDefault) then
    GetObject(TTerminacion, FTerminacionDefault, TerminacionDefaultID);
  Result := TTerminacion(FTerminacionDefault);
end;

{ TTerminacionComponenteTerminacionDefaultDM }
class function TTerminacionComponenteTerminacionDefaultDM.TableName: string;
begin
  Result := 'TerminacionComponentesTermDef';
end;

class function TTerminacionComponenteTerminacionDefaultDM.ID_FieldName: string;
begin
  Result := 'TerminacionComponenteTermDefID';
end;

procedure TTerminacionComponenteTerminacionDefaultDM.PopulateFields
  (PDObject: TPDObject);
begin
  with TTerminacionComponenteTerminacionDefault(PDObject) do
  begin
    IDField[_terminacionID] := FterminacionID;
    IDField[_TipoDeComponenteID] := FTipoDeComponenteID;
    IDField[_TerminacionDefaultID] := FTerminacionDefaultID;
  end;
end;

procedure TTerminacionComponenteTerminacionDefaultDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionComponenteTerminacionDefault(PDObject) do
  begin
    FTerminacionID        := IDField[_TerminacionID];
    FTipoDeComponenteID   := IDField[_TipoDeComponenteID];
    FTerminacionDefaultID := IDField[_TerminacionDefaultID];
  end;
end;

{ TTerminacionComponenteTerminacionDefaultList }
function TTerminacionComponenteTerminacionDefaultList.GetActual : TTerminacionComponenteTerminacionDefault;
begin
  Result := TTerminacionComponenteTerminacionDefault(CurrentObject);
end;

constructor TTerminacionComponenteTerminacionDefaultList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionComponenteTerminacionDefaultDM._terminacionID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTerminacionComponenteTerminacionDefault, TTerminacionComponenteTerminacionDefaultDM.CreateAll(False, WhereString));
end;

constructor TTerminacionComponenteTerminacionDefaultList.CreateByTerminacionAndTipoDeComponente(_T: TTerminacion; _TC: TTipoDeComponente);
  Function WhereString : String;
  begin
    Result := '(' + TTerminacionComponenteTerminacionDefaultDM._TerminacionID + '=' + IntToStr(_T.ID) + ') and (' + TTerminacionComponenteTerminacionDefaultDM._TipoDeComponenteID + '=' + IntToStr(_TC.ID) + ')'
  end;
begin
  inherited Create(TTerminacionComponenteTerminacionDefault, TTerminacionComponenteTerminacionDefaultDM.CreateAll(False, WhereString));
end;

constructor TTerminacionComponenteTerminacionDefaultList.CreateByTerminacionDefault(_TD: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionComponenteTerminacionDefaultDM._TerminacionDefaultID +'=' + IntToStr(_TD.ID);
  end;
begin
  inherited Create(TTerminacionComponenteTerminacionDefault,TTerminacionComponenteTerminacionDefaultDM.CreateAll(False, WhereString));
end;

constructor TTerminacionComponenteTerminacionDefaultList.CreateByTipoDeComponente(_TC: TTipoDeComponente);
  Function WhereString : String;
  begin
    Result := TTerminacionComponenteTerminacionDefaultDM._TipoDeComponenteID + '=' +IntToStr(_TC.ID);
  end;
begin
  inherited Create(TTerminacionComponenteTerminacionDefault,TTerminacionComponenteTerminacionDefaultDM.CreateAll(False, WhereString));
end;

function TTerminacionComponenteTerminacionDefaultList.CreateNewObject : TPDObject;
begin
  Result := TTerminacionComponenteTerminacionDefault.Create;
end;

function TTerminacionComponenteTerminacionDefaultList.Find(_TC: TTipoDeComponente): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (self.Actual.TipoDeComponenteID = _TC.ID);
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

constructor TTerminacionComponenteTerminacionDefaultList.CreateAll;
begin
  inherited Create(TTerminacionComponenteTerminacionDefault, TTerminacionComponenteTerminacionDefaultDM.CreateAll(False, '', False, TTerminacionComponenteTerminacionDefaultDM.ID_FieldName));
end;

{ TGrupoDeVendedorComision }
constructor TGrupoDeVendedorComision.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TGrupoDeVendedorComisionDM);
  FfechadeVigencia := null;
  FporcentajeComisionFacturacion := null;
  FporcentajeComisionCobranzas := null;
end;

function TGrupoDeVendedorComision.GetGrupoDeVendedor: TGrupoDeVendedor;
begin
  if not assigned(FGrupoDeVendedor) then
    GetObject(TGrupoDeVendedor, FGrupoDeVendedor, GrupoDeVendedorID);
  Result := TGrupoDeVendedor(FGrupoDeVendedor);
end;



procedure TGrupoDeVendedorComision.SetGrupoDeVendedorID(const Value: TObjectID);
begin
  if assigned(FGrupoDeVendedor) and (Value <> NullID) then
    FreeAndNil(FGrupoDeVendedor);
  FGrupoDeVendedorID := Value;
end;

{ TGrupoDeVendedorComisionDM }
class function TGrupoDeVendedorComisionDM.TableName: string;
begin
  Result := 'GrupoDeVendedorComisiones';
end;

class function TGrupoDeVendedorComisionDM.ID_FieldName: string;
begin
  Result := 'GrupoDeVendedorComisionID';
end;

procedure TGrupoDeVendedorComisionDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeVendedorComision(PDObject) do
  begin
    IDField[_GrupoDeVendedorID] := FGrupoDeVendedorID;
    DateField[_fechadeVigencia] := FfechadeVigencia;
    FloatField[_porcentajeComisionFacturacion] := FporcentajeComisionFacturacion;
    FloatField[_porcentajeComisionCobranzas] := FporcentajeComisionCobranzas;
  end;
end;

procedure TGrupoDeVendedorComisionDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeVendedorComision(PDObject) do
  begin
    FGrupoDeVendedorID := IDField[_GrupoDeVendedorID];
    FfechadeVigencia := DateField[_fechadeVigencia];
    FporcentajeComisionFacturacion := FloatField [_porcentajeComisionFacturacion];
    FporcentajeComisionCobranzas := FloatField[_porcentajeComisionCobranzas];
  end;
end;

{ TGrupoDeVendedorComisionList }
function TGrupoDeVendedorComisionList.GetActual: TGrupoDeVendedorComision;
begin
  Result := TGrupoDeVendedorComision(CurrentObject);
end;

constructor TGrupoDeVendedorComisionList.CreateByGrupoDeVendedor(_GV: TGrupoDeVendedor);
  Function WhereString : String;
  begin
    Result := TGrupoDeVendedorComisionDM._GrupoDeVendedorID + ' = ' + IntToStr(_GV.ID);
  end;
  Function OrderBy : String;
  begin
    Result := TGrupoDeVendedorComisionDM._FechadeVigencia + ' desc';
  end;
begin
  inherited Create(TGrupoDeVendedorComision, TGrupoDeVendedorComisionDM.CreateAll(False, WhereString, False, OrderBy));
end;

constructor TGrupoDeVendedorComisionList.CreateByGrupoDeVendedorAndFechaVigencia(_GV: TGrupoDeVendedor; _Fecha: TDate);
  Function WhereString : String;
  begin
    Result := '(' +TGrupoDeVendedorComisionDM.TableName +'.'+ TGrupoDeVendedorComisionDM._GrupoDeVendedorID + ' = ' + IntToStr(_GV.ID) +')';
    Result := Result + ' and (' + TGrupoDeVendedorComisionDM.TableName+'.'+ TGrupoDeVendedorComisionDM._FechadeVigencia + ' <= ' + quotedStr( DateToStr (_Fecha)) +')';
  end;

  Function OrderBy : String;
  begin
    Result := TGrupoDeVendedorComisionDM.TableName +'.'+ TGrupoDeVendedorComisionDM._FechadeVigencia+ ' desc';
  end;

begin
  inherited Create(TGrupoDeVendedorComision, TGrupoDeVendedorComisionDM.CreateTop(1, WhereString, Orderby));
end;

function TGrupoDeVendedorComisionList.CreateNewObject: TPDObject;
begin
  Result := TGrupoDeVendedorComision.Create;
end;

function TGrupoDeVendedorComisionList.FindComisionVigente(_GV: TGrupoDeVendedor; _Fecha: TDate): TBoolean;
var
  GVCL : TGrupoDeVendedorComisionList;
begin
  Try
    GVCL := TGrupoDeVendedorComisionList.CreateByGrupoDeVendedorAndFechaVigencia( _GV, _Fecha );
    GVCL.First;
    if ( GVCL.Count=0 ) then
      Result := False
    else
      Result := Find( GVCL.Actual.ID );
  Finally
    freeAndNil( GVCL );
  End;
end;

constructor TGrupoDeVendedorComisionList.CreateAll;
begin
  inherited Create(TGrupoDeVendedorComision, TGrupoDeVendedorComisionDM.CreateAll(False));
end;

{ TGrupoDeVendedorItemReparto }
constructor TGrupoDeVendedorItemReparto.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TGrupoDeVendedorItemRepartoDM);
  FfechadeVigencia := null;
  FporcentajeRepartoFacturacion := null;
  FporcentajeRepartoCobranzas := null;
end;

{ TGrupoDeVendedorItemRepartoDM }
class function TGrupoDeVendedorItemRepartoDM.TableName: string;
begin
  Result := 'GrupoDeVendedorItemRepartos';
end;

class function TGrupoDeVendedorItemRepartoDM.ID_FieldName: string;
begin
  Result := 'GrupoDeVendedorItemRepartoID';
end;

procedure TGrupoDeVendedorItemRepartoDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeVendedorItemReparto(PDObject) do
  begin
    IDField[_GrupoDeVendedorItemID]           := FgrupoDeVendedorItemID;
    DateField[_FechadeVigencia]               := FfechadeVigencia;
    FloatField[_PorcentajeRepartoFacturacion] := FporcentajeRepartoFacturacion;
    FloatField[_PorcentajeRepartoCobranzas]   := FporcentajeRepartoCobranzas;
  end;
end;

procedure TGrupoDeVendedorItemRepartoDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeVendedorItemReparto(PDObject) do
  begin
    FGrupoDeVendedorItemID        := IDField[_GrupoDeVendedorItemID];
    FFechadeVigencia              := DateField[_FechadeVigencia];
    FPorcentajeRepartoFacturacion := FloatField[_PorcentajeRepartoFacturacion];
    FPorcentajeRepartoCobranzas   := FloatField[_PorcentajeRepartoCobranzas];
  end;
end;

{ TGrupoDeVendedorItemRepartoList }
function TGrupoDeVendedorItemRepartoList.GetActual: TGrupoDeVendedorItemReparto;
begin
  Result := TGrupoDeVendedorItemReparto(CurrentObject);
end;

constructor TGrupoDeVendedorItemRepartoList.CreateByGrupoDeVendedorItem(_GVI: TGrupoDeVendedorItem);
  Function WhereString : String;
  begin
    Result := TGrupoDeVendedorItemRepartoDM._GrupoDeVendedorItemID + ' = ' + IntToStr(_GVI.ID);
  end;
begin
  inherited Create(TGrupoDeVendedorItemReparto, TGrupoDeVendedorItemRepartoDM.CreateAll(False, WhereString));
end;

function TGrupoDeVendedorItemRepartoList.CreateNewObject: TPDObject;
begin
  Result := TGrupoDeVendedorItemReparto.Create;
end;

constructor TGrupoDeVendedorItemRepartoList.CreateVigenteByGrupoDeVendedorItem(_GVI: TGrupoDeVendedorItem; _Fecha: TDate);
  Function WhereString : String;
  begin
    Result := '('+TGrupoDeVendedorItemRepartoDM._GrupoDeVendedorItemID + ' = ' + IntToStr(_GVI.ID)+') and (';
    Result := Result + TGrupoDeVendedorItemRepartoDM._FechadeVigencia + '<= ' + QuotedStr( DateToStr( _Fecha ) )+')';
  end;

  Function OrderBy : String;
  begin
    Result := TGrupoDeVendedorItemRepartoDM._FechadeVigencia+ ' desc';
  end;
begin
  inherited Create(TGrupoDeVendedorItemReparto, TGrupoDeVendedorItemRepartoDM.CreateTop( 1, WhereString, OrderBy));
end;


constructor TGrupoDeVendedorItemRepartoList.CreateAll;
begin
  inherited Create(TGrupoDeVendedorItemReparto, TGrupoDeVendedorItemRepartoDM.CreateAll(False));
end;

{ TCondicionDeIngresosBrutos }

function TCondicionDeIngresosBrutos.GetDescriptibleAbreviadoListClass;
begin
  Result := TCondicionDeIngresosBrutosList;
end;

constructor TCondicionDeIngresosBrutos.Create;
begin
  inherited;
  DMObject     := Aplicacion.DMProvider.GetGlobalDM(TCondicionDeIngresosBrutosDM);
  Fporcentaje  := null;
end;

{ TCondicionDeIngresosBrutosDM }
class function TCondicionDeIngresosBrutosDM.TableName: string;
begin
  Result := 'condicionesdeingresosbrutos';
end;

class function TCondicionDeIngresosBrutosDM.EsInactivo_FieldName: string;
begin
  result := _EsInactivo;
end;

class function TCondicionDeIngresosBrutosDM.ID_FieldName: string;
begin
  Result := 'CondicionDeIngresosBrutosID';
end;

procedure TCondicionDeIngresosBrutosDM.PopulateFields(PDObject: TPDObject);
begin
  with TCondicionDeIngresosBrutos(PDObject) do
  begin
    StringField[_Descripcion]      := Descripcion;
    FloatField[_Porcentaje]        := FPorcentaje;
    StringField[_Codigo]           := Codigo;
    StringField[_CodigoSifab]      := CodigoSifab;
    BooleanField[_esInactivo]      := EsInactivo;
    IntegerField[_CodigoTeamplace] := CodigoTeamplace;
  end;
end;

procedure TCondicionDeIngresosBrutosDM.PopulateObject(PDObject: TPDObject);
begin
  with TCondicionDeIngresosBrutos(PDObject) do
    begin
      Fdescripcion     := StringField[_Descripcion];
      Fporcentaje      := FloatField[_Porcentaje];
      Fcodigo          := StringField[_Codigo];
      FCodigoSifab     := StringField[_CodigoSifab];
      FEsInactivo      := BooleanField[_EsInactivo];
      FCodigoTeamplace := IntegerField[_CodigoTeamplace];
    end;
end;

{ TCondicionDeIngresosBrutosList }
function TCondicionDeIngresosBrutosList.GetActual: TCondicionDeIngresosBrutos;
begin
  Result := TCondicionDeIngresosBrutos(CurrentObject);
end;

function TCondicionDeIngresosBrutosList.CreateNewObject: TPDObject;
begin
  Result := TCondicionDeIngresosBrutos.Create;
end;

constructor TCondicionDeIngresosBrutosList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCondicionDeIngresosBrutos, TCondicionDeIngresosBrutosDM.CreateAll(False, '',_SoloActivos));
end;

{ TComponenteDeMatriz }
function TComponenteDeMatriz.GetDescriptibleAbreviadoListClass;
begin
  Result := TComponenteDeMatrizList;
end;

constructor TComponenteDeMatriz.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := aplicacion.DMProvider.GetGlobalDM(TComponenteDeMatrizDM);
end;

{ TComponenteDeMatrizDM }
class function TComponenteDeMatrizDM.TableName: string;
begin
  Result := 'componentesdematrices';
end;

class function TComponenteDeMatrizDM.EsInactivo_FieldName: string;
begin
  result := _EsInactivo;
end;

class function TComponenteDeMatrizDM.ID_FieldName: string;
begin
  Result := 'ComponenteDeMatrizID';
end;

procedure TComponenteDeMatrizDM.PopulateFields(PDObject: TPDObject);
begin
  with TComponenteDeMatriz(PDObject) do
    begin
      StringField[_Descripcion] := Descripcion;
      StringField[_Codigo]      := codigo;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;

procedure TComponenteDeMatrizDM.PopulateObject(PDObject: TPDObject);
begin
  with TComponenteDeMatriz(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    Fcodigo      := StringField[_Codigo];
    FEsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TComponenteDeMatrizList }
function TComponenteDeMatrizList.GetActual: TComponenteDeMatriz;
begin
  Result := TComponenteDeMatriz(CurrentObject);
end;

function TComponenteDeMatrizList.CreateNewObject: TPDObject;
begin
  Result := TComponenteDeMatriz.Create;
end;

constructor TComponenteDeMatrizList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TComponenteDeMatriz, TComponenteDeMatrizDM.CreateAll( false, '',_SoloActivos ));
end;

{ TMatrizComponente }
constructor TMatrizComponente.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TMatrizComponenteDM);
end;

procedure TMatrizComponente.SetArticuloID(Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) then
    FreeAndNil(Farticulo);
  FarticuloID := Value;
end;

function TMatrizComponente.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);
  Result := TArticulo(Farticulo);
end;

procedure TMatrizComponente.SetcomponenteDeMatrizID(Value: TObjectID);
begin
  if (Value <> FcomponenteDeMatrizID) and assigned(FcomponenteDeMatriz) then
    FreeAndNil(FcomponenteDeMatriz);

  FcomponenteDeMatrizID := Value;

end;

function TMatrizComponente.GetcomponenteDeMatriz: TComponenteDeMatriz;
begin
  if not assigned(FcomponenteDeMatriz) then
    GetObject(TComponenteDeMatriz, FcomponenteDeMatriz, componenteDeMatrizID);

  Result := TComponenteDeMatriz(FcomponenteDeMatriz);
end;

{ TMatrizComponenteDM }
class function TMatrizComponenteDM.TableName: string;
begin
  Result := 'matrizcomponentes';
end;

class function TMatrizComponenteDM.ID_FieldName: string;
begin
  Result := 'MatrizComponenteID';
end;

procedure TMatrizComponenteDM.PopulateFields(PDObject: TPDObject);
begin
  with TMatrizComponente(PDObject) do
  begin
    IDField[_Orden] := Forden;
    IDField[_articuloID] := FarticuloID;
    IDField[_componenteDeMatrizID] := FcomponenteDeMatrizID;
  end;
end;

procedure TMatrizComponenteDM.PopulateObject(PDObject: TPDObject);
begin
  with TMatrizComponente(PDObject) do
  begin
    Forden := IDField[_Orden];
    FarticuloID := IDField[_articuloID];
    FcomponenteDeMatrizID := IDField[_componenteDeMatrizID];
  end;
end;

{ TMatrizComponenteList }
function TMatrizComponenteList.GetActual: TMatrizComponente;
begin
  Result := TMatrizComponente(CurrentObject);
end;

constructor TMatrizComponenteList.CreateByArticuloMatriz(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TMatrizComponenteDM._articuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TMatrizComponente, TMatrizComponenteDM.CreateAll(False, WhereString, False, TMatrizComponenteDM._Orden));
end;

function TMatrizComponenteList.CreateNewObject: TPDObject;
begin
  Result := TMatrizComponente.Create;
end;

constructor TMatrizComponenteList.CreateAll;
begin
  inherited Create(TMatrizComponente, TMatrizComponenteDM.CreateAll(False));
end;

{ TServicioTraduccion }
constructor TServicioTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TServicioTraduccionDM);
end;

procedure TServicioTraduccion.SetServicioID(Value: TObjectID);
begin
  if (Value <> FservicioID) and assigned(Fservicio) then
    FreeAndNil(Fservicio);

  FservicioID := Value;

end;

function TServicioTraduccion.GetServicio: TServicio;
begin
  if not assigned(Fservicio) then
    GetObject(TServicio, Fservicio, servicioID);

  Result := TServicio(Fservicio);
end;

{ TServicioTraduccionDM }
class function TServicioTraduccionDM.TableName: string;
begin
  Result := 'servicioTraducciones';
end;

class function TServicioTraduccionDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TServicioTraduccionDM.ID_FieldName: string;
begin
  Result := 'servicioTraduccionID';
end;

procedure TServicioTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TServicioTraduccion(PDObject) do
  begin
    IDField[_ServicioID] := FservicioID;
    StringField[_Descripcion] := Descripcion;
    IDField[_resourceLanguageID] := FresourceLanguageID;
  end;
end;

procedure TServicioTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TServicioTraduccion(PDObject) do
  begin
    FServicioID         := IDField[_ServicioID];
    FDescripcion        := StringField[_Descripcion];
    FResourceLanguageID := IDField[_ResourceLanguageID];
  end;
end;

{ TArticuloTraduccionList }
function TServicioTraduccionList.GetActual: TServicioTraduccion;
begin
  Result := TServicioTraduccion(CurrentObject);
end;

constructor TServicioTraduccionList.CreateByServicio(_S: TServicio);
  Function WhereString : String;
  begin
    Result := TServicioTraduccionDM._ServicioID + '=' + IntToStr(_S.ID);
  end;
begin
  inherited Create(TServicioTraduccion, TServicioTraduccionDM.CreateAll(False, WhereString));
end;

constructor TServicioTraduccionList.CreateEmpty;
begin
  inherited Create(TServicioTraduccion, TServicioTraduccionDM.CreateEmpty);
end;

function TServicioTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TServicioTraduccion.Create;
end;

constructor TServicioTraduccionList.CreateAll;
begin
  inherited Create(TServicioTraduccion, TServicioTraduccionDM.CreateAll(False));
end;

{ TDesarrollo }
function TDesarrollo.GetDescripcionMarca: TString;
begin
  if (FDescripcionMarca = Null) and (FmarcaID <> NullID) then
    FDescripcionMarca := Marca.Descripcion;
  Result := FDescripcionMarca;
end;

function TDesarrollo.GetDescriptibleAbreviadoListClass;
begin
  Result := TDesarrolloList;
end;

function TDesarrollo.GetEmpresasAsociadas: TEmpresaList;
begin
  If not Assigned(FEmpresasAsociadas) Then
    GetList(TPDList(FEmpresasAsociadas), TPDList(TEmpresaList.CreateByDesarrollo(Self, True)));
  Result := FEmpresasAsociadas;
end;

constructor TDesarrollo.Create;
begin
  inherited;
  SaveSqlLog            := True;
  DMObject              := Aplicacion.DMProvider.GetGlobalDM(TDesarrolloDM);
  FLargoCodigo          := aplicacion.LargoCodigos.LargoCodigoDesarrollo;
  RellenarCodigo        := True;
  FObservacion          := Null;
  FTiempoEstimadoEnDias := Null;
  FEsInactivo           := False;
  FDescripcionMarca     := '';
  FFechaDeCreacion      := Null;
  FArchivoDeImagen3D    := Null;
  FArchivoDeImagen2D    := Null;
  FArchivoSinImagen     := Null;
  FArchivoDeImagen      := Null;
  FArchivoDeImagen3DWeb := Null;
  FArchivoDeImagen2DWeb := Null;
  FArchivoSinImagenWeb  := Null;
  FArchivoDeImagenWeb   := Null;
end;

function TDesarrollo.GetPrecios: TDesarrolloPrecioList;
begin
  if not Assigned(FPrecios) then
	  GetList(TPDList(FPrecios),TPDList(TDesarrolloPrecioList.CreateByDesarrollo(Self)));
  Result := TDesarrolloPrecioList(FPrecios);
end;

function TDesarrollo.GetTipoDeDesarrollo: TTipoDeDesarrollo;
begin
  if not Assigned(FTipoDeDesarrollo) then
    GetObject(TTipoDeDesarrollo, FTipoDeDesarrollo, TipoDeDesarrolloID);
  Result := TTipoDeDesarrollo(FTipoDeDesarrollo);
end;

function TDesarrollo.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID; _Moneda: TMoneda): TReal;
begin
  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TDesarrolloDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          False );
end;

function TDesarrollo.Save: Boolean;
begin
  if (FfechaDeCreacion = null) then
    FfechaDeCreacion := aplicacion.DateTimeService.FechaHoraActual;
  Result := inherited Save;
end;

procedure TDesarrollo.SetCodigo(const Value: TString);
begin
  inherited;
  if FCodigo <> Value then
  begin
    FArchivoDeImagen2D := Null;
    FArchivoDeImagen3D := Null;
  end;
  FCodigo := Value;
end;

procedure TDesarrollo.SetComplejidadDeDesarrolloID(const Value: TObjectID);
begin
  if (Value <> FComplejidadDeDesarrolloID) and assigned(FComplejidadDeDesarrollo) then
    FreeAndNil(FComplejidadDeDesarrollo);
  FComplejidadDeDesarrolloID := Value;
end;

procedure TDesarrollo.SetMarcaID(Value: TObjectID);
begin
  if (Value <> FmarcaID) and assigned(Fmarca) then
    FreeAndNil(Fmarca);
  FDescripcionMarca := null;
  FmarcaID := Value;
end;

procedure TDesarrollo.SetTipoDeDesarrolloID(const Value: TObjectID);
begin
  if (Value <> FTipoDeDesarrolloID) and Assigned(FTipoDeDesarrollo) then
    FreeAndNil(FTipoDeDesarrollo);
  FTipoDeDesarrolloID := Value;
end;

function TDesarrollo.Getmarca: TMarca;
begin
  if not assigned(Fmarca) then
    GetObject(TMarca, Fmarca, marcaID);
  Result := TMarca(Fmarca);
end;

//function TDesarrollo.Getempresas: TDesarrolloEmpresaList;
//begin
//  if not assigned(Fempresas) then
//    GetList(TPDList(Fempresas), TPDList(TDesarrolloEmpresaList.CreateByDesarrollo(self)));
//  Result := TDesarrolloEmpresaList(Fempresas);
//end;


procedure TDesarrollo.Delete;
begin
//  If empresas.Count > 0 then
//    Aplicacion.RaiseExceptionCreate(
//      'Debe eliminar las empresas asignadas a este desarrollo antes de eliminarlo.');
  If articulosPosibles.Count > 0 then
    Aplicacion.RaiseExceptionCreate(
      'Debe eliminar los artículos posibles asignados a este desarrollo antes de eliminarlo.');

  inherited;
end;

function TDesarrollo.GetarchivoDeImagen: TString;
begin
  if FarchivoDeImagen = null then
  begin
    if (archivoDeImagen3D <> archivoSinImagen) then
      FarchivoDeImagen := archivoDeImagen3D
    else if (archivoDeImagen2D <> archivoSinImagen) then
      FarchivoDeImagen := archivoDeImagen2D
    else
      FarchivoDeImagen := archivoSinImagen;
  end;
  Result := FarchivoDeImagen;
end;

function TDesarrollo.GetArchivoDeImagen2D: TString;
var
  FL: TFotoList;
begin
  if (FarchivoDeImagen2D = null) then
    try
      FL := TFotoList.CreatebyDesarrolloCodigo(codigo, 'desarrollo');
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen2D := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen2D := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen2D;
end;

function TDesarrollo.GetarchivoDeImagen2DWeb: TString;
var
  FL: TFotoList;
begin
  if (FArchivoDeImagen2DWeb = Null) then
    try
      FL := TFotoList.CreatebyDesarrolloCodigo(codigo,'desarrollo');
      if FL.Count > 0 then
      begin
        FL.First;
        FArchivoDeImagen2DWeb := FL.Actual.RutaDeArchivoWeb;
      end
      else
        FArchivoDeImagen2DWeb := ArchivoSinImagenWeb;
    Finally
      FreeAndNil(FL);
    end;
  Result := FArchivoDeImagen2DWeb;
end;

function TDesarrollo.GetarchivoDeImagen3D: TString;
var
  FL: TFabricadoList;
  FotoL: TFotoList;
begin
  if (FarchivoDeImagen3D = null) then
    try
      FL := TFabricadoList.CreateByDesarrolloID(ID);
      if FL.Count > 0 then
      begin
        FL.First;
        repeat
          FotoL := TFotoList.CreateByFabricadoID(FL.Actual.ID);
          FL.next;
        until (FL.IsLast) or (FotoL.Count > 0);
        if FotoL.Count > 0 then
        begin
          FotoL.First;
          FarchivoDeImagen3D := FotoL.Actual.RutaDeArchivoRed
        end
        else
          FarchivoDeImagen3D := archivoDeImagen2D;
      end
      else
        FarchivoDeImagen3D := archivoDeImagen2D;
    Finally
      FreeAndNil(FL);
      FreeAndNil(FotoL);
    end;
  Result := FarchivoDeImagen3D;
end;

function TDesarrollo.GetarchivoDeImagen3DWeb: TString;
var
  FL: TFabricadoList;
  FotoL: TFotoList;
begin
  if (FArchivoDeImagen3DWeb = Null) then
    try
      FL := TFabricadoList.CreateByDesarrolloID(ID);
      if FL.Count > 0 then
      begin
        FL.First;
        repeat
          FotoL := TFotoList.CreateByFabricadoID(FL.Actual.ID);
          FL.next;
        until (FL.IsLast) or (FotoL.Count > 0);
        if FotoL.Count > 0 then
          begin
            FotoL.First;
            FArchivoDeImagen3DWeb := FotoL.Actual.RutaDeArchivoWeb
          end
        else
          FArchivoDeImagen3DWeb := ArchivoDeImagen2DWeb;
      end
      else
        FArchivoDeImagen3DWeb := ArchivoDeImagen2DWeb;
    Finally
      FreeAndNil(FL);
      FreeAndNil(FotoL);
    end;
  Result := FArchivoDeImagen3DWeb;
end;

function TDesarrollo.GetarchivoDeImagenWeb: TString;
begin
  if (FArchivoDeImagenWeb = Null) then
  begin
    if (ArchivoDeImagen3DWeb <> ArchivoSinImagenWeb) then
      FArchivoDeImagenWeb := ArchivoDeImagen3DWeb
    else if (ArchivoDeImagen2DWeb <> ArchivoSinImagenWeb) then
      FArchivoDeImagenWeb := ArchivoDeImagen2DWeb
    else
      FArchivoDeImagenWeb := ArchivoSinImagenWeb;
  end;
  Result := FArchivoDeImagenWeb;
end;

function TDesarrollo.GetarchivoSinImagen: TString;
begin
  Result := Aplicacion.ArchivoSinImagenDesarrollos;
end;

function TDesarrollo.GetarchivoSinImagenWeb: TString;
begin
  if (FarchivoSinImagenWeb = Null) then
    begin
      FarchivoSinImagenWeb := LowerCase(Aplicacion.ArchivoSinImagenDesarrollos);
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FArchivoSinImagenWeb,LowerCase('\srv_aph\usuarios\imagenes'),'http://w3.apholos.com');
      FarchivoSinImagenWeb := Aplicacion.TextService.ReemplazarEn(FarchivoSinImagenWeb,'\','/');
    end;
  Result := LowerCase(FarchivoSinImagenWeb);
end;

function TDesarrollo.GetarticulosPosibles: TDesarrolloArticuloPosibleList;
begin
  if not assigned(FarticulosPosibles) then
    GetList(TPDList(FarticulosPosibles), TPDList(TDesarrolloArticuloPosibleList.CreateByDesarrollo(self)));
  Result := TDesarrolloArticuloPosibleList(FarticulosPosibles);
end;

function TDesarrollo.GetComplejidadDeDesarrollo: TComplejidadDeDesarrollo;
begin
  if not Assigned(FComplejidadDeDesarrollo) then
    GetObject(TComplejidadDeDesarrollo, FComplejidadDeDesarrollo, ComplejidadDeDesarrolloID);
  Result := TComplejidadDeDesarrollo(FComplejidadDeDesarrollo);
end;

{ TDesarrolloDM }
class function TDesarrolloDM.TableName: string;
begin
  Result := 'Desarrollos';
end;

class function TDesarrolloDM.ID_FieldName: string;
begin
  Result := 'DesarrolloID';
end;

procedure TDesarrolloDM.PopulateFields(PDObject: TPDObject);
begin
  with TDesarrollo(PDObject) do
    begin
      StringField[_Codigo]                := codigo;
      StringField[_Descripcion]           := Descripcion;
      StringField[_observacion]           := Fobservacion;
      IntegerField[_tiempoEstimadoEnDias] := FtiempoEstimadoEnDias;
      BooleanField[_esEstandar]           := FesEstandar;
      BooleanField[_esInactivo]           := FEsInactivo;
      DateField[_fechaDeCreacion]         := FfechaDeCreacion;
      IDField[_marcaID]                   := FmarcaID;
      IDField[_TipoDeDesarrolloID]        := FTipoDeDesarrolloID;
      IDField[_ComplejidadDeDesarrolloID] := FComplejidadDeDesarrolloID;
    end;
end;

procedure TDesarrolloDM.PopulateObject(PDObject: TPDObject);
begin
  with TDesarrollo(PDObject) do
    begin
      Fcodigo               := StringField[_Codigo];
      Fdescripcion          := StringField[_Descripcion];
      Fobservacion          := StringField[_observacion];
      FtiempoEstimadoEnDias := IntegerField[_tiempoEstimadoEnDias];
      FesEstandar           := BooleanField[_esEstandar];
      FEsInactivo           := BooleanField[_esInactivo];
      FfechaDeCreacion      := DateField[_fechaDeCreacion];
      FmarcaID              := IDField[_marcaID];
      FTipoDeDesarrolloID   := IDField[_TipoDeDesarrolloID];
      FDescripcionMarca     := StringField[_DescripcionMarca];
      FComplejidadDeDesarrolloID := IDField[_ComplejidadDeDesarrolloID];
    end;
end;

{ TDesarrolloList }
function TDesarrolloList.GetActual: TDesarrollo;
begin
  Result := TDesarrollo(CurrentObject);
end;

function TDesarrolloList.CreateNewObject: TPDObject;
begin
  Result := TDesarrollo.Create;
end;

constructor TDesarrolloList.CreateAll( _SoloActivos: Boolean );
begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( False, '' , _SoloActivos ));
end;

constructor TDesarrolloList.CreateByArticuloAsociado(_A: TArticulo; _soloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := TDesarrolloDM.ID_FieldName + ' in ( select ' + TDesarrolloArticuloPosibleDM._desarrolloID;
    Result := Result + ' from ' + TDesarrolloArticuloPosibleDM.TableName + ' where ' + TDesarrolloArticuloPosibleDM._articuloID + '=' + IntToStr(_A.ID) + ' )';
  end;

begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( False, WhereString, _soloActivos ));
end;

constructor TDesarrolloList.CreateByClienteAndArticuloAsociado(_A: TArticulo; _C: TCliente; _soloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := ' ( ' + TDesarrolloDM._esEstandar + '=1 or ';
    Result := Result + '(' + TDesarrolloDM.ID_FieldName + ' in ( select ' +
      TDesarrolloEmpresaDM._desarrolloID + ' from ' +
      TDesarrolloEmpresaDM.TableName + ' where ';
    Result := Result + '(' + TDesarrolloEmpresaDM._empresaID + '=' + IntToStr
      (_C.ID) + ' or ';
    Result := Result + TDesarrolloEmpresaDM._empresaID + ' in ( select ' +
      TEmpresaAsociadaDM._AsociadaID + ' from ' +
      TEmpresaAsociadaDM.TableName + ' where ' +
      TEmpresaAsociadaDM._empresaID + '=' + IntToStr(_C.ID)
      + ')) or (';
    Result := Result + TDesarrolloEmpresaDM._empresaID + ' in ( select ' +
      TLicenciatarioDM._EmpresaLicenciatariaID + ' from ' +
      TLicenciatarioDM.TableName + ' where ' +
      TLicenciatarioDM._EmpresaLicenciatariaID + '=' + IntToStr(_C.ID)
      + ')))) ) and ';
    Result := Result + '(' + TDesarrolloDM.ID_FieldName + ' in ( Select ' +
      TDesarrolloArticuloPosibleDM._desarrolloID + ' From ' +
      TDesarrolloArticuloPosibleDM.TableName + ' where ' +
      TDesarrolloArticuloPosibleDM._articuloID + '=' + IntToStr(_A.ID) + '))';
  end;

begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll(  False,  WhereString, _SoloActivos));
end;


constructor TDesarrolloList.CreateByClienteAndComponenteAsociadoAndMarca(_A: TArticulo; _C: TCliente; _M: TMarca; _soloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := TDesarrolloDM.ID_FieldName + ' IN (SELECT ' +
      TDesarrolloDM.ID_FieldName + ' from ' + TDesarrolloDM.TableName +
      ' WHERE ((' + TDesarrolloDM._esEstandar + '=1) and ' +
      TDesarrolloDM.ID_FieldName + ' IN (SELECT ' +
      TDesarrolloDM.ID_FieldName + ' From ' +
      TDesarrolloArticuloPosibleDM.TableName + '  where ' +
      TDesarrolloArticuloPosibleDM._ComponenteID + '=' + IntToStr(_A.ID)
      + '))) or ';
    Result := Result + '(' + TDesarrolloDM.ID_FieldName + ' IN (SELECT ' +
      TDesarrolloDM.ID_FieldName + ' from ' + TDesarrolloDM.TableName +
      ' WHERE ' + TDesarrolloDM.ID_FieldName + ' in ( Select ' +
      TDesarrolloDM.ID_FieldName + ' From ' +
      TDesarrolloArticuloPosibleDM.TableName + ' where ' +
      TDesarrolloArticuloPosibleDM._ComponenteID + '=' + IntToStr(_A.ID)
      + ' )) and ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._marcaID +
      '=' + IntToStr(_M.ID) + ' )';
    Result := Result + ' and (' + TDesarrolloDM.ID_FieldName +
      ' in ( select ' + TDesarrolloEmpresaDM._desarrolloID + ' from ' +
      TDesarrolloEmpresaDM.TableName + ' where ' + '(' +
      TDesarrolloEmpresaDM._empresaID + '=' + IntToStr(_C.ID)
      + ') or ' + TDesarrolloEmpresaDM._empresaID + ' in ( select ' +
      TEmpresaAsociadaDM._AsociadaID + ' from ' +
      TEmpresaAsociadaDM.TableName + ' where (' +
      TEmpresaAsociadaDM._empresaID + '=' + IntToStr(_C.ID)
      + ')) or ';
    Result := Result + '(' + TDesarrolloEmpresaDM._empresaID +
      ' in ( select ' + TLicenciatarioDM._empresaID + ' from ' +
      TLicenciatarioDM.TableName + ' where ' +
      TLicenciatarioDM._EmpresaLicenciatariaID + '=' + IntToStr(_C.ID)
      + '))))';
  end;
begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( false, WhereString, _soloActivos));
end;

constructor TDesarrolloList.CreateByComponenteAsociado(_A: TArticulo; _soloActivos: Boolean);
  function WhereString: String;
  Begin
    Result := TDesarrolloDM.ID_FieldName + ' in ( select ' + TDesarrolloArticuloPosibleDM._desarrolloID;
    Result := Result + ' from ' + TDesarrolloArticuloPosibleDM.TableName + ' where ' + TDesarrolloArticuloPosibleDM._ComponenteID + '=' + IntToStr(_A.ID) + ' )';
  end;
begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( false, WhereString, _soloActivos ));
end;

constructor TDesarrolloList.CreateByMarca(_M: TMarca; _soloActivos: Boolean);
  Function WhereString: String;
  begin
    Result  := '('+ TDesarrolloDM.TableName + '.' + TDesarrolloDM._marcaID + '=' + IntToStr(_M.ID) + ') ';
  end;
begin

  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( False, WhereString, _SoloActivos  ));
end;

constructor TDesarrolloList.CreateByMarcaAndArticuloAsociado(_A: TArticulo;_M: TMarca; _soloActivos: Boolean);
  function WhereString: String;

    Function FiltroArticulosAsociados: String;
    begin
      Result := '( ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM.ID_FieldName + ' in ( Select ' + TDesarrolloArticuloPosibleDM.TableName + '.' + TDesarrolloArticuloPosibleDM._desarrolloID;
      Result := Result + ' From ' + TDesarrolloArticuloPosibleDM.TableName;
      Result := Result + ' Where ' + TDesarrolloArticuloPosibleDM._ComponenteID + ' = ' + IntToStr(_A.ID) + ' ) )';
    end;

    Function FiltroMarca: String;
    begin
      Result := '( ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._esEstandar + '=1 ' + ' or (' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._marcaID + ' = ' + IntToStr(_M.ID) + ' )) ';
    end;

  begin
    Result := FiltroArticulosAsociados + ' and ' + FiltroMarca ;
  end;

begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( false, WhereString, _soloActivos ));
end;

constructor TDesarrolloList.CreateByMarcaAndArticuloAsociadoAndTipoDeDesarrollo(_A: TArticulo; _M: TMarca; _TD: TTipoDeDesarrollo; _SoloActivos: Boolean);
  function WhereString: String;

    Function FiltroArticulosAsociados: String;
    begin
      Result := '(' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._TipoDeDesarrolloID + ' = ' + IntToStr( _TD.ID ) + ')';
      Result := Result + ' and ( ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM.ID_FieldName + ' in ( Select ' + TDesarrolloArticuloPosibleDM.TableName + '.' + TDesarrolloArticuloPosibleDM._desarrolloID;
      Result := Result + ' From ' + TDesarrolloArticuloPosibleDM.TableName;
      Result := Result + ' Where ' + TDesarrolloArticuloPosibleDM._ComponenteID + ' = ' + IntToStr(_A.ID) + ' ) )';
    end;

    Function FiltroMarca: String;
    begin
      Result := '( ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._esEstandar + '=1 ' + ' or (' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._marcaID + ' = ' + IntToStr(_M.ID) + ' )) ';
    end;

  begin
    Result := FiltroArticulosAsociados + ' and ' + FiltroMarca ;
  end;

begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateAll( false, WhereString, _soloActivos ));
end;

constructor TDesarrolloList.CreateEmpty;
begin
  inherited Create(TDesarrollo, TDesarrolloDM.CreateEmpty);
end;

{ TDesarrolloEmpresa }
constructor TDesarrolloEmpresa.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TDesarrolloEmpresaDM);
end;

function TDesarrolloEmpresa.Getempresa: TEmpresa;
begin
  if not assigned(Fempresa) then
    GetObject(TEmpresa, Fempresa, empresaID);

  Result := TEmpresa(Fempresa);
end;

{ TDesarrolloEmpresaDM }
class function TDesarrolloEmpresaDM.TableName: string;
begin
  Result := 'desarrolloempresas';
end;


class function TDesarrolloEmpresaDM.ID_FieldName: string;
begin
  Result := 'DesarrolloEmpresaID';
end;

procedure TDesarrolloEmpresaDM.PopulateFields(PDObject: TPDObject);
begin
  with TDesarrolloEmpresa(PDObject) do
  begin
    IDField[_desarrolloID] := FdesarrolloID;
    IDField[_empresaID] := FempresaID;
  end;
end;

procedure TDesarrolloEmpresaDM.PopulateObject(PDObject: TPDObject);
begin
  with TDesarrolloEmpresa(PDObject) do
  begin
    FdesarrolloID := IDField[_desarrolloID];
    FempresaID := IDField[_empresaID];
  end;
end;

{ TDesarrolloEmpresaList }
function TDesarrolloEmpresaList.GetActual: TDesarrolloEmpresa;
begin
  Result := TDesarrolloEmpresa(CurrentObject);
end;

constructor TDesarrolloEmpresaList.CreateByDesarrollo(_D: TDesarrollo);
  function WhereString: String;
  Begin
    Result:= '('+TDesarrolloEmpresaDM.TableName+'.'+TDesarrolloEmpresaDM._desarrolloID + ' = ' + IntToStr(_D.ID)+')';
  End;
begin
  inherited Create(TDesarrolloEmpresa, TDesarrolloEmpresaDM.CreateAll( False, WhereString));
end;

function TDesarrolloEmpresaList.CreateNewObject: TPDObject;
begin
  Result := TDesarrolloEmpresa.Create;
end;

constructor TDesarrolloEmpresaList.CreateAll;
begin
  inherited Create(TDesarrolloEmpresa, TDesarrolloEmpresaDM.CreateAll(False));
end;

{ TDesarrolloArticuloPosible }
constructor TDesarrolloArticuloPosible.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TDesarrolloArticuloPosibleDM);
end;

function TDesarrolloArticuloPosible.Getarticulo: TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo, Farticulo, articuloID);

  Result := TArticulo(Farticulo);
end;

function TDesarrolloArticuloPosible.GetComponente: TArticulo;
begin
  if not assigned(FComponente) then
    FComponente := articulo.ComponenteQueLlevaElCunio;

  Result := TArticulo(FComponente);
end;

function TDesarrolloArticuloPosible.GetDesarrollo: TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo, FDesarrollo, FdesarrolloID);

  Result := TDesarrollo(FDesarrollo);
end;

procedure TDesarrolloArticuloPosible.SetArticuloID(const Value: TObjectID);
begin
  if (Value <> FarticuloID) and assigned(Farticulo) or assigned(FComponente)
    then
  begin
    if assigned(Farticulo) then
      FreeAndNil(Farticulo);

    if assigned(FComponente) then
      FreeAndNil(FComponente);
  end;

  FarticuloID := Value;
end;

procedure TDesarrolloArticuloPosible.SetcomponenteID(const Value: TObjectID);
begin
  if (Value <> FcomponenteID) and assigned(FComponente) then
    FreeAndNil(FComponente);
  FcomponenteID := Value;
end;

{ TDesarrolloArticuloPosibleDM }
class function TDesarrolloArticuloPosibleDM.TableName: string;
begin
  Result := 'desarrolloarticulosposibles';
end;


class function TDesarrolloArticuloPosibleDM.ID_FieldName: string;
begin
  Result := 'DesarrolloArticuloPosibleID';
end;

class function TDesarrolloDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  var
    CC : TCampoCompuesto;
  begin
    Try
      CC := TCampoCompuesto.create( TableName, '*');
      Result := CC.NombreCompleto;

      CC := TCampoCompuesto.create( TMarcaDM.TableName, TMarcaDM._Descripcion);
      Result := Result + ', ' + CC.NombreCompleto;
    Finally
      FreeAndNil(CC);
    End;
  end;
  Function LeftJoinString : String;
  begin
    Result := ' LEFT JOIN ' + TMarcaDM.TableName + ' ON (' + TableName + '.' + _marcaID + '=' + TMarcaDM.TableName + '.' + TMarcaDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TDesarrolloDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

procedure TDesarrolloArticuloPosibleDM.PopulateFields(PDObject: TPDObject);
begin
  with TDesarrolloArticuloPosible(PDObject) do
  begin
    IDField[_desarrolloID] := FdesarrolloID;
    IDField[_articuloID] := FarticuloID;
    IDField[_ComponenteID] := FcomponenteID;
  end;
end;

procedure TDesarrolloArticuloPosibleDM.PopulateObject(PDObject: TPDObject);
begin
  with TDesarrolloArticuloPosible(PDObject) do
  begin
    FdesarrolloID := IDField[_desarrolloID];
    FarticuloID := IDField[_articuloID];
    FcomponenteID := IDField[_ComponenteID];
  end;
end;

{ TDesarrolloArticuloPosibleList }
function TDesarrolloArticuloPosibleList.GetActual: TDesarrolloArticuloPosible;
begin
  Result := TDesarrolloArticuloPosible(CurrentObject);
end;

constructor TDesarrolloArticuloPosibleList.CreateByDesarrollo(_D: TDesarrollo);
  Function WhereString : String;
  begin
    Result := TDesarrolloArticuloPosibleDM._DesarrolloID + ' = ' + IntToStr(_D.ID);
  end;
begin
  inherited Create(TDesarrolloArticuloPosible, TDesarrolloArticuloPosibleDM.CreateAll(False, WhereString));
end;

function TDesarrolloArticuloPosibleList.CreateNewObject: TPDObject;
begin
  Result := TDesarrolloArticuloPosible.Create;
end;

constructor TDesarrolloArticuloPosibleList.CreateAll;
begin
  inherited Create(TDesarrolloArticuloPosible, TDesarrolloArticuloPosibleDM.CreateAll(False));
end;

{ TCobrador }
constructor TCobrador.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCobradorDM);
  Fnombre := null;
  Fapellido := null;
  FCelular := null;
  FDireccion := null;
  Femail := null;
  FTelefono := null;
end;

procedure TCobrador.Setemail(const Value: TString);
begin
  IF (Value <> '') and Not aplicacion.TextService.ValidarEmail(Value) Then
    Aplicacion.RaiseExceptionCreate('Ingrese un email válido.');

  Femail := Value;
end;

procedure TCobrador.SetLocalidadID(Value: TObjectID);
begin
  if (Value <> FLocalidadID) and assigned(FLocalidad) then
    FreeAndNil(FLocalidad);

  FLocalidadID := Value;

end;

function TCobrador.getDescripcion: TString;
begin
  Result := Fapellido;
  if (Result > '') and (Fnombre > '') then
    Result := Result + ', ';

  Result := Result + Fnombre;
end;

function TCobrador.GetLocalidad: TLocalidad;
begin
  if not assigned(FLocalidad) then
    GetObject(TLocalidad, FLocalidad, LocalidadID);

  Result := TLocalidad(FLocalidad);
end;

{ TCobradorDM }
class function TCobradorDM.TableName: string;
begin
  Result := 'cobradores';
end;

class function TCobradorDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCobradorDM.ID_FieldName: string;
begin
  Result := 'CobradorID';
end;

procedure TCobradorDM.PopulateFields(PDObject: TPDObject);
begin
  with TCobrador(PDObject) do
    begin
      StringField[_Nombre]      := Nombre;
      StringField[_Apellido]    := Apellido;
      StringField[_Celular]     := Celular;
      StringField[_Direccion]   := Direccion;
      IDField[_LocalidadID]     := FLocalidadID;
      StringField[_Email]       := Email;
      StringField[_Telefono]    := Telefono;
      BooleanField[_EsInactivo] := FEsInactivo;
    end;
end;

procedure TCobradorDM.PopulateObject(PDObject: TPDObject);
begin
  with TCobrador(PDObject) do
    begin
      FNombre      := StringField[_Nombre];
      FApellido    := StringField[_Apellido];
      FCelular     := StringField[_Celular];
      FDireccion   := StringField[_Direccion];
      FLocalidadID := IDField[_LocalidadID];
      FEmail       := StringField[_Email];
      FTelefono    := StringField[_Telefono];
      FEsInactivo  := BooleanField[_EsInactivo];
    end;
end;

{ TCobradorList }
function TCobradorList.GetActual: TCobrador;
begin
  Result := TCobrador(CurrentObject);
end;

constructor TCobradorList.CreateByDescripcionLike(_D: string; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(Lower(' + TCobradorDM._apellido +') Like ' + quotedstr(lowerCase(_D) + '%')+ ') or (Lower(' + TCobradorDM._nombre + ') Like ' + quotedstr(lowerCase(_D) + '%')+')';
  end;
begin
  inherited Create(TCobrador, TCobradorDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TCobradorList.CreateNewObject: TPDObject;
begin
  Result := TCobrador.Create;
end;

constructor TCobradorList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCobrador, TCobradorDM.CreateAll( False, '', _SoloActivos));
end;

{ TDescuentoPorCantidadVendidaItem }
constructor TDescuentoPorCantidadVendidaItem.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TDescuentoPorCantidadVendidaItemDM);
  FCantidadDesde := null;
  FCantidadHasta := null;
  FPorcentajeDescuento := null;
end;

function TDescuentoPorCantidadVendidaItem.Save: Boolean;
begin
  if (FCantidadHasta = 0) then
    Aplicacion.RaiseExceptionCreate('La cantidad Hasta no debe ser 0');

  if (FCantidadHasta < FCantidadDesde) then
    Aplicacion.RaiseExceptionCreate(
      'La cantidad Hasta no debe ser menor que la cantidad Desde');

  inherited Save;
end;

{ TDescuentoPorCantidadVendidaItemDM }
class function TDescuentoPorCantidadVendidaItemDM.TableName: string;
begin
  Result := 'descuentoporcantidadvendidaitems';
end;

class function TDescuentoPorCantidadVendidaItemDM.ID_FieldName: string;
begin
  Result := 'DescuentoPorCantidadVendidaItemID';
end;

procedure TDescuentoPorCantidadVendidaItemDM.PopulateFields
  (PDObject: TPDObject);
begin
  with TDescuentoPorCantidadVendidaItem(PDObject) do
  begin
    IDField[_DescuentoPorCantidadVendidaID] := FDescuentoPorCantidadVendidaID;
    IntegerField[_CantidadDesde] := FCantidadDesde;
    IntegerField[_CantidadHasta] := FCantidadHasta;
    FloatField[_PorcentajeDescuento] := FPorcentajeDescuento;
  end;
end;

procedure TDescuentoPorCantidadVendidaItemDM.PopulateObject
  (PDObject: TPDObject);
begin
  with TDescuentoPorCantidadVendidaItem(PDObject) do
  begin
    FDescuentoPorCantidadVendidaID := IDField[_DescuentoPorCantidadVendidaID];
    FCantidadDesde := IntegerField[_CantidadDesde];
    FCantidadHasta := IntegerField[_CantidadHasta];
    FPorcentajeDescuento := FloatField[_PorcentajeDescuento];
  end;
end;

{ TDescuentoPorCantidadVendidaItemList }
function TDescuentoPorCantidadVendidaItemList.GetActual
  : TDescuentoPorCantidadVendidaItem;
begin
  Result := TDescuentoPorCantidadVendidaItem(CurrentObject);
end;

constructor TDescuentoPorCantidadVendidaItemList.CreateByDescuento(_DPCV: TDescuentoPorCantidadVendida);
  Function WhereString : String;
  begin
    Result := TDescuentoPorCantidadVendidaItemDM._DescuentoPorCantidadVendidaID + ' = ' + IntToStr(_DPCV.ID);
  end;
begin
  inherited Create(TDescuentoPorCantidadVendidaItem, TDescuentoPorCantidadVendidaItemDM.CreateAll(False, WhereString));
end;

function TDescuentoPorCantidadVendidaItemList.CreateNewObject: TPDObject;
begin
  Result := TDescuentoPorCantidadVendidaItem.Create;
end;

constructor TDescuentoPorCantidadVendidaItemList.CreateAll;
begin
  inherited Create(TDescuentoPorCantidadVendidaItem, TDescuentoPorCantidadVendidaItemDM.CreateAll(False));
end;

{ TDescuentoPorCantidadVendida }
constructor TDescuentoPorCantidadVendida.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TDescuentoPorCantidadVendidaDM);
end;

function TDescuentoPorCantidadVendida.GetItems : TDescuentoPorCantidadVendidaItemList;
begin
  if not assigned(FItems) then
    GetList(TPDList(FItems), TPDList(TDescuentoPorCantidadVendidaItemList.CreateByDescuento(self)));

  Result := TDescuentoPorCantidadVendidaItemList(FItems);
end;

{ TDescuentoPorCantidadVendidaDM }
class function TDescuentoPorCantidadVendidaDM.TableName: string;
begin
  Result := 'DescuentosPorCantidadVendida';
end;


class function TDescuentoPorCantidadVendidaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo
end;

class function TDescuentoPorCantidadVendidaDM.ID_FieldName: string;
begin
  Result := 'DescuentoPorCantidadVendidaID';
end;

procedure TDescuentoPorCantidadVendidaDM.PopulateFields(PDObject: TPDObject);
begin
  with TDescuentoPorCantidadVendida(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TDescuentoPorCantidadVendidaDM.PopulateObject(PDObject: TPDObject);
begin
  with TDescuentoPorCantidadVendida(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    FEsInactivo  := BooleanField[_Descripcion];
  end;
end;

{ TDescuentoPorCantidadVendidaList }
function TDescuentoPorCantidadVendidaList.GetActual : TDescuentoPorCantidadVendida;
begin
  Result := TDescuentoPorCantidadVendida(CurrentObject);
end;

function TDescuentoPorCantidadVendidaList.CreateNewObject: TPDObject;
begin
  Result := TDescuentoPorCantidadVendida.Create;
end;

Function TDescuentoPorCantidadVendidaList.FindDescripcion(_Desc: String) : Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (uppercase(TDescriptible(CurrentObject).Descripcion) = uppercase
          (_Desc));
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TDescuentoPorCantidadVendidaList.CreateAll;
begin
  inherited Create(TDescuentoPorCantidadVendida, TDescuentoPorCantidadVendidaDM.CreateAll(False));
end;

{ TBuscadorDeCunio }
constructor TBuscadorDeCunio.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TBuscadorDeCunioDM);
  Fcodigo1 := '';
  Fcodigo2 := '';
  Fcodigo3 := '';
  Fcodigo4 := '';
  FDescripcion1 := '';
  FDescripcion2 := '';
  FDescripcion3 := '';
  FDescripcion4 := '';
  FFile1 := '';
  FFile2 := '';
  FFile3 := '';
  FFile4 := '';
  FSeleccionado4 := False;
  FSeleccionado3 := False;
  FSeleccionado2 := False;
  FSeleccionado1 := False;

end;

function TBuscadorDeCunio.Save( _NoPersistir: Boolean ): Boolean;
begin
  inherited save;
  if _NoPersistir then
    DMObject.CancelUpdates;
end;

{ TBuscadorDeCunioDM }
class function TBuscadorDeCunioDM.TableName: string;
begin
  Result := 'buscadordecunios';
end;

class function TBuscadorDeCunioDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForTemporales;
end;

class function TBuscadorDeCunioDM.ID_FieldName: string;
begin
  Result := 'BuscadorDeCunioID';
end;

procedure TBuscadorDeCunioDM.PopulateFields(PDObject: TPDObject);
begin
  with TBuscadorDeCunio(PDObject) do
  begin
    StringField[_codigo1] := codigo1;
    // StringField[_codigo2] := codigo2;
    // StringField[_codigo3] := codigo3;
    // StringField[_codigo4] := codigo4;
    // StringField[_Descripcion1] := Descripcion1;
    // StringField[_Descripcion2] := Descripcion2;
    // StringField[_Descripcion3] := Descripcion3;
    // StringField[_Descripcion4] := Descripcion4;
    // StringField[_File1] := File1;
    // StringField[_File2] := File2;
    // StringField[_File3] := File3;
    // StringField[_File4] := File4;
  end;
end;

procedure TBuscadorDeCunioDM.PopulateObject(PDObject: TPDObject);
begin
  with TBuscadorDeCunio(PDObject) do
  begin
    Fcodigo1 := StringField[_codigo1];
    // Fcodigo2 := StringField[_codigo2];
    // Fcodigo3 := StringField[_codigo3];
    // Fcodigo4 := StringField[_codigo4];
    // FDescripcion1 := StringField[_Descripcion1];
    // FDescripcion2 := StringField[_Descripcion2];
    // FDescripcion3 := StringField[_Descripcion3];
    // FDescripcion4 := StringField[_Descripcion4];
    // FFile1 := StringField[_File1];
    // FFile2 := StringField[_File2];
    // FFile3 := StringField[_File3];
    // FFile4 := StringField[_File4];
  end;
end;

{ TBuscadorDeCunioList }
function TBuscadorDeCunioList.GetActual: TBuscadorDeCunio;
begin
  Result := TBuscadorDeCunio(CurrentObject);
end;

function TBuscadorDeCunioList.CreateNewObject: TPDObject;
begin
  Result := TBuscadorDeCunio.Create;
end;

constructor TBuscadorDeCunioList.CreateEmpty;
begin
  inherited Create(TBuscadorDeCunio, TBuscadorDeCunioDM.CreateEmpty);
end;

{ TMetodoDeCorte }

function THerramental.GetDescriptibleAbreviadoListClass;
begin
  Result := THerramentalList;
end;

function THerramental.GetPasoDeMatrizDescripcion: TString;
begin
  if (UnidadDeMedidaPasoDeMatrizID <> NullID) then
    Result := FloatToStrF(PasoDeMatriz,ffNumber, 10, 3) + ' ' + UnidadDeMedidaPasoDeMatriz.Codigo;
end;

function THerramental.GetTipoDeRecurso: TTipoDeRecurso;
begin
  if not assigned(FTipoDeRecurso) then
    GetObject(TTipoDeRecurso, FTipoDeRecurso, TipoDeRecursoID);
  Result := TTipoDeRecurso(FTipoDeRecurso);
end;

function THerramental.GetUnidadDeMedidaPasoDeMatriz: TUnidadDeMedida;
begin
  if not Assigned(FUnidadDeMedidaPasoDeMatriz) then
    GetObject(TUnidadDeMedida, FUnidadDeMedidaPasoDeMatriz, UnidadDeMedidaPasoDeMatrizID);
  Result := TUnidadDeMedida(FUnidadDeMedidaPasoDeMatriz);
end;

procedure THerramental.SetTipoDeRecursoID(const Value: TObjectID);
begin
  if (Value <> FTipoDeRecursoID) and (assigned(FTipoDeRecurso)) then
    FreeAndNil(FTipoDeRecurso);
  FTipoDeRecursoID := Value;
end;

procedure THerramental.SetUnidadDeMedidaPasoDeMatrizID(const Value: TObjectID);
begin
  if (Value <> FUnidadDeMedidaPasoDeMatrizID) and (Assigned(FUnidadDeMedidaPasoDeMatriz)) then
    FreeAndNil(FUnidadDeMedidaPasoDeMatriz);
  FUnidadDeMedidaPasoDeMatrizID := Value;
end;

constructor THerramental.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(THerramentalDM);
end;

{ TMetodoDeCorteDM }
class function THerramentalDM.TableName: string;
begin
  Result := 'Herramentales';
end;

class function THerramentalDM.Esinactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function THerramentalDM.ID_FieldName: string;
begin
  Result := 'HerramentalID';
end;

procedure THerramentalDM.PopulateFields(PDObject: TPDObject);
begin
  with THerramental(PDObject) do
  begin
    StringField[_Descripcion]              := Descripcion;
    StringField[_Codigo]                   := codigo;
    BooleanField[_EsInactivo]              := FEsInactivo;
    StringField[_Cajon]                    := FCajon;
    IntegerField[_GolpesBPM]               := FGolpesBPM;
    IntegerField[_CantidadDeMovimientos]   := FCantidadDemovimientos;
    FloatField[_TiempoDeSetupEnHoras]      := FTiempoDeSetupEnHoras;
    IDField[_TipoDeRecursoID]              := FTipoDeRecursoID;
    IntegerField[_CantidadDeBocas]         := FCantidadDeBocas;
    FloatField[_PasoDeMatriz]              := FPasoDeMatriz;
    IDField[_UnidadDeMedidaPasoDeMatrizID] := FUnidadDeMedidaPasoDeMatrizID;
  end;
end;

procedure THerramentalDM.PopulateObject(PDObject: TPDObject);
begin
  with THerramental(PDObject) do
  begin
    Fdescripcion                        := StringField[_Descripcion];
    Fcodigo                             := StringField[_Codigo];
    FEsInactivo                         := BooleanField[_EsInactivo];
    FCajon                              := StringField[_Cajon];
    FGolpesBPM                          := IntegerField[_GolpesBPM];
    FCantidadDemovimientos              := IntegerField[_CantidadDeMovimientos];
    FTiempoDeSetupEnHoras               := FloatField[_TiempoDeSetupEnHoras];
    FTipoDeRecursoID                    := IDField[_TipoDeRecursoID];
    FCantidadDeBocas                    := IntegerField[_CantidadDeBocas];
    FPasoDeMatriz                       := FloatField[_PasoDeMatriz];
    FUnidadDeMedidaPasoDeMatrizID       := IDField[_UnidadDeMedidaPasoDeMatrizID];
  end;
end;

{ THerramentalList }
function THerramentalList.GetActual: THerramental;
begin
  Result := THerramental(CurrentObject);
end;

function THerramentalList.CreateNewObject: TPDObject;
begin
  Result := THerramental.Create;
end;

constructor THerramentalList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(THerramental, THerramentalDM.CreateAll( False, '', _SoloActivos));
end;

constructor THerramentalList.CreateByCodigoLikeAndRecurso(_C: String; _R: TRecurso; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result :=          '( ' + THerramentalDM.TableName + '.' + THerramentalDM._Codigo          + ' like ' + QuotedStr(_C + '%') + ' ) and ';
    Result := Result + '( ' + THerramentalDM.TableName + '.' + THerramentalDM.ID_FieldName + ' in ( Select ' + TRecursoHerramentalDM._HerramentalID + ' from ';
    Result := Result + TRecursoHerramentalDM.TableName + ' Where ' + TRecursoHerramentalDM._RecursoID + ' = ' + IntToStr(_R.ID) + '))';
  end;
begin
  inherited Create(THerramental, THerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor THerramentalList.CreateByCodigoLikeAndTipoDeRecurso(_C : String ; _TR : TTipoDeRecurso ; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result :=          '( ' + THerramentalDM.TableName + '.' + THerramentalDM._Codigo          + ' like ' + QuotedStr(_C + '%') + ' ) and ';
    Result := Result + '( ' + THerramentalDM.TableName + '.' + THerramentalDM._TipoDeRecursoID + ' = '    + IntToStr( _TR.ID )  + ' )';
  end;
begin
  inherited Create(THerramental, THerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor THerramentalList.CreateByRecurso(_R: TRecurso; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '( ' + THerramentalDM.TableName + '.' + THerramentalDM.ID_FieldName + ' in ( Select ' + TRecursoHerramentalDM._HerramentalID + ' from ' + TRecursoHerramentalDM.TableName + ' where ' + TRecursoHerramentalDM._RecursoID + '=' + IntToStr( _R.ID ) + ' ) )' ;
  end;
begin
  inherited Create(THerramental, THerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor THerramentalList.CreateByTipoDeRecurso(_TR: TTipoDeRecurso ; _SoloActivos : Boolean);
  Function WhereString : String;
  begin
    Result := '( ' + THerramentalDM.TableName + '.' + THerramentalDM._TipoDeRecursoID + ' = ' + IntToStr( _TR.ID ) + ' )' ;
  end;
begin
  inherited Create(THerramental, THerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor THerramentalList.CreateEmpty;
begin
  inherited Create(THerramental, THerramentalDM.CreateEmpty);
end;

{ TArticuloMetodoDeCorte }
function TArticuloMetodoDeCorte.CantidadDeMateriaPrimaNecesaria(_Cantidad: Integer): TReal;
begin
  Result := 0;
  if (PesoUnitarioConScrapUnidadDeMedidaID <> NullID) then
    Result := (Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia(PesoUnitarioConScrapUnidadDeMedida, PesoUnitarioConScrap * _Cantidad ) );
  //  Se informa el resultado en la unidad de medida default.
end;

constructor TArticuloMetodoDeCorte.Create;
begin
  inherited;
  SaveSqlLog                                := True;
  DMObject                                  := Aplicacion.DMProvider.GetGlobalDM(TArticuloMetodoDeCorteDM);
  FPesoUnitarioConScrap                     := 0;
  FMateriaPrimaID                           := NullID;
  FArticuloID                               := NullID;
  FHerramentalID                            := NullID;
  FPesoUnitarioConScrapUnidadDeMedidaID     := NullID;
  FCCMetodoDeCorteEsComprado                := Null;
  FCCHerramentalCantidadDeBocas             := -777;
  FCCMateriaPrimaUnidadDeMedidaEquivalencia := -777;
  FCCMateriaPrimaAnchoDeTira                := -777;
  FCCMaterialUnidadDeMedidaEquivalencia     := -777;
  FCCMaterialPesoEspecifico                 := -777;
  FCCHerramentalPasoDeMatriz                := -777;
  FCCMateriaPrimaEspesor                    := -777;
  FCCMateriaPrimaEsInyeccion                := Null;
  FCCMateriaPrimaCosto                      := -777;
  FCCMateriaPrimaDiametro                   := -777;
  FCCMateriaPrimaMonedaCostoID              := -777;
end;

function TArticuloMetodoDeCorte.GetArticulo: TArticulo;
begin
  if not Assigned(FArticulo) then
    GetObject(TArticulo, FArticulo, ArticuloID);
  Result := TArticulo(FArticulo);
end;

function TArticuloMetodoDeCorte.GetCCHerramentalCantidadDeBocas: TEntero;
begin
  if (FCCHerramentalCantidadDeBocas = -777) then
    begin
      FCCHerramentalCantidadDeBocas := 0;
      if (HerramentalID <> NullID) then
        FCCHerramentalCantidadDeBocas := Herramental.CantidadDeBocas;
    end;
  Result := FCCHerramentalCantidadDeBocas;
end;

function TArticuloMetodoDeCorte.GetCCHerramentalPasoDeMatriz: TReal;
begin
  if (FCCHerramentalPasoDeMatriz = -777) then
    begin
      FCCHerramentalPasoDeMatriz := 0;
      if HerramentalID <> NullID then
        FCCHerramentalPasoDeMatriz := Herramental.PasoDeMatriz;
    end;
  Result := FCCHerramentalPasoDeMatriz;
end;

function TArticuloMetodoDeCorte.GetCCMaterialPesoEspecifico: TReal;
begin
  if (FCCMaterialPesoEspecifico = -777) then
    begin
      FCCMaterialPesoEspecifico := 0;
      if (MateriaPrimaID <> NullID) and (MateriaPrima.MaterialID <> NullID) then
        FCCMaterialPesoEspecifico := MateriaPrima.Material.PesoEspecifico;
    end;
  Result := FCCMaterialPesoEspecifico;
end;

function TArticuloMetodoDeCorte.GetCCMaterialUnidadDeMedidaEquivalencia: TReal;
begin
  if (FCCMaterialUnidadDeMedidaEquivalencia = -777) then
    begin
      FCCMaterialUnidadDeMedidaEquivalencia := 0;
      if ( MateriaPrimaID <> NullID) and ( MateriaPrima.MaterialID <> NullID) and ( MateriaPrima.Material.PesoEspecificoUnidadDeMedidaID <> NullID ) then
        FCCMaterialUnidadDeMedidaEquivalencia := MateriaPrima.Material.PesoEspecificoUnidadDeMedida.Equivalencia;
    end;
  Result := FCCMaterialUnidadDeMedidaEquivalencia;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaAnchoDeTira: TReal;
begin
  if (FCCMateriaPrimaAnchoDeTira = -777) then
    begin
      FCCMateriaPrimaAnchoDeTira := 0;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaAnchoDeTira := MateriaPrima.AnchoDeTira;
    end;
  Result := FCCMateriaPrimaAnchoDeTira;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaCosto: TReal;
begin
  if (FCCMateriaPrimaCosto = -777) then
    begin
      FCCMateriaPrimaCosto := 0;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaCosto := MateriaPrima.Costo;
    end;
  Result := FCCMateriaPrimaCosto;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaDiametro: TReal;
begin
  if (FCCMateriaPrimaDiametro = -777) then
    begin
      FCCMateriaPrimaDiametro := 0;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaDiametro := MateriaPrima.Diametro;
    end;
  Result := FCCMateriaPrimaDiametro;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaEsInyeccion: TBoolean;
begin
  if (FCCMateriaPrimaEsInyeccion = Null) then
    begin
      FCCMateriaPrimaEsInyeccion := False;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaEsInyeccion := MateriaPrima.EsInyeccion;
    end;
  Result := FCCMateriaPrimaEsInyeccion;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaEspesor: TReal;
begin
  if (FCCMateriaPrimaEspesor = -777) then
    begin
      FCCMateriaPrimaEspesor := 0;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaEspesor := MateriaPrima.Espesor;
    end;
  Result := FCCMateriaPrimaEspesor;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaMonedaCostoID: TObjectID;
begin
  if (FCCMateriaPrimaMonedaCostoID = -777) then
    begin
      FCCMateriaPrimaMonedaCostoID := NullID;
      If (MateriaPrimaID <> NullID) then
        FCCMateriaPrimaMonedaCostoID := MateriaPrima.MonedaDeCostoID;
    end;
  Result := FCCMateriaPrimaMonedaCostoID;
end;

function TArticuloMetodoDeCorte.GetCCMateriaPrimaUnidadDeMedidaEquivalencia: TReal;
begin
  if (FCCMateriaPrimaUnidadDeMedidaEquivalencia = -777) then
    begin
      FCCMateriaPrimaUnidadDeMedidaEquivalencia := False;
      If (PesoUnitarioConScrapUnidadDeMedidaID <> NullID) then
        FCCMateriaPrimaUnidadDeMedidaEquivalencia := PesoUnitarioConScrapUnidadDeMedida.Equivalencia;
    end;
  Result := FCCMateriaPrimaUnidadDeMedidaEquivalencia;
end;

function TArticuloMetodoDeCorte.GetPesoUnitarioConScrap: TReal;
var
  DMFormulas : TDMFormulas;
begin
  if IsAssigned and ( FPesoUnitarioConScrap = 0 ) and (MateriaPrimaID <> NullID) then
    begin
      if not MateriaPrima.EsInyeccion then
        begin
          if (Self.MateriaPrima.CategoriaDeMateriaPrima.FormulaID <> NullID) then
            try
              DMFormulas := TDMFormulas.Create(nil);
              DMFormulas.HerramentalArticulo := Self;
              DMFormulas.JvInterpreterProgram.Pas.Clear;
              DMFormulas.JvInterpreterProgram.Pas.Add(Self.MateriaPrima.CategoriaDeMateriaPrima.Formula.Algoritmo);
              DMFormulas.JvInterpreterProgram.Run;
              FPesoUnitarioConScrap := DMFormulas.JvInterpreterProgram.VResult;
            finally
              FreeAndNil(DMFormulas);
            end;
        end
      else
        begin
          FPesoUnitarioConScrap                 := Articulo.PesoBruto;
          FPesoUnitarioConScrapUnidadDeMedidaID := Articulo.UnidadDeMedidaPesoID;
        end;
    end;
  Result := FPesoUnitarioConScrap;
end;

function TArticuloMetodoDeCorte.GetPesoUnitarioConScrapDescripcion: TString;
begin
  if (PesoUnitarioConScrapUnidadDeMedidaID <> NullID) and (PesoUnitarioConScrap <> Null) then
    Result := FloatToStrF(PesoUnitarioConScrap,ffNumber, 10, 3) + ' ' + PesoUnitarioConScrapUnidadDeMedida.Codigo
  else
    Result := FloatToStrF(0,ffNumber, 10, 3) + ' ' + PesoUnitarioConScrapUnidadDeMedida.Codigo
end;

function TArticuloMetodoDeCorte.GetPesoUnitarioConScrapUnidadDeMedida: TUnidadDeMedida;
begin
  if not Assigned(FPesoUnitarioConScrapUnidadDeMedida) then
    GetObject(TUnidadDeMedida, FPesoUnitarioConScrapUnidadDeMedida, PesoUnitarioConScrapUnidadDeMedidaID);
  Result := TUnidadDeMedida(FPesoUnitarioConScrapUnidadDeMedida);
end;

function TArticuloMetodoDeCorte.GetHerramental: THerramental;
begin
  if not Assigned(FHerramental) then
    GetObject(THerramental, FHerramental, HerramentalID);
  Result := THerramental(FHerramental);
end;

function TArticuloMetodoDeCorte.GetMateriaPrima: TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

function TArticuloMetodoDeCorte.Save: Boolean;
begin
  if (MateriaPrimaID = NullId ) and not EsComprado then
    Aplicacion.RaiseExceptionCreate('Si no es comprado, es obligatorio informar la Materia Prima');
  inherited save;
end;

procedure TArticuloMetodoDeCorte.SetHerramentalID(const Value: TObjectID);
begin
  if (Value <> FHerramentalID) and assigned(FHerramental) then
    begin
      FPesoUnitarioConScrap := 0;
      FCCMetodoDeCorteEsComprado                := Null;
      FCCHerramentalCantidadDeBocas             := -777;
      FCCMateriaPrimaUnidadDeMedidaEquivalencia := -777;
      FCCMateriaPrimaAnchoDeTira                := -777;
      FCCMaterialUnidadDeMedidaEquivalencia     := -777;
      FCCMaterialPesoEspecifico                 := -777;
      FCCHerramentalPasoDeMatriz                := -777;
      FCCMateriaPrimaEspesor                    := -777;
      FCCMateriaPrimaEsInyeccion                := Null;
      FCCMateriaPrimaCosto                      := -777;
      FCCMateriaPrimaDiametro                   := -777;
      FCCMateriaPrimaMonedaCostoID              := -777;
      FreeAndNil(FHerramental);
      FreeAndNil(FArticulo);
    end;
  FHerramentalID := Value;
end;

procedure TArticuloMetodoDeCorte.SetMateriaPrimaID(Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and assigned(FMateriaPrima) then
    begin
      FPesoUnitarioConScrap := 0;
      FCCMetodoDeCorteEsComprado                := Null;
      FCCHerramentalCantidadDeBocas             := -777;
      FCCMateriaPrimaUnidadDeMedidaEquivalencia := -777;
      FCCMateriaPrimaAnchoDeTira                := -777;
      FCCMaterialUnidadDeMedidaEquivalencia     := -777;
      FCCMaterialPesoEspecifico                 := -777;
      FCCHerramentalPasoDeMatriz                := -777;
      FCCMateriaPrimaEspesor                    := -777;
      FCCMateriaPrimaEsInyeccion                := Null;
      FCCMateriaPrimaCosto                      := -777;
      FCCMateriaPrimaDiametro                   := -777;
      FCCMateriaPrimaMonedaCostoID              := -777;
      FreeAndNil(FMateriaPrima);
      FreeAndNil(FArticulo);
    end;
  FMateriaPrimaID := Value;
end;

function TArticuloMetodoDeCorte.TiempoDeProduccionEnHoras(_CantDeProducto: Integer): TReal;
begin
  Result := 0;
  if not EsComprado then
    begin
      if (Herramental.GolpesBrutosPorMinuto = 0) then
        Aplicacion.RaiseExceptionCreate('El herramental ' + Herramental.Codigo + ' tiene golpes brutos por minuto = 0.' + #10#13 + 'No se puede calcular el tiempo de producción.');
      if (Herramental.CantidadDeBocas = 0) then
        Aplicacion.RaiseExceptionCreate('El herramental ' + Herramental.Codigo + ' tiene cantidad de bocas = 0.' + #10#13 + 'No se puede calcular el tiempo de producción.');
      if (Herramental.GolpesBrutosPorMinuto = 0) or  (Herramental.CantidadDeBocas = 0) then
        exit;

      Result := _CantDeProducto /(Herramental.GolpesBrutosPorMinuto * Herramental.CantidadDeBocas * 60 ) ;
      Result := Result + Herramental.TiempoDeSetupEnHoras;
    end;
end;

{ TArticuloMetodoDeCorteInsumoDM }
class function TArticuloMetodoDeCorteDM.TableName: string;
begin
  Result := 'ArticuloMetodoDeCorteInsumos';
end;

class function TArticuloMetodoDeCorteDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ';
    Result := Result + TMateriaPrimaDM.TableName       + '.' +  TMateriaPrimaDM._AnchoDeTira          + ' as ' + _CCMateriaPrimaAnchoDeTira            + ', ';
    Result := Result + TMateriaPrimaDM.TableName       + '.' +  TMateriaPrimaDM._Espesor              + ' as ' + _CCMateriaPrimaEspesor                + ', ';
    Result := Result + TMateriaPrimaDM.TableName       + '.' +  TMateriaPrimaDM._Diametro             + ' as ' + _CCMateriaPrimaDiametro               + ', ';
    Result := Result + TCategoriaDeMateriaPrimaDM.TableName + '.' +  TCategoriaDeMateriaPrimaDM._EsInyectado + ' as '     + _CCMateriaPrimaEsInyeccion            + ', ';
    Result := Result + TMateriaPrimaDM.TableName       + '.' +  TMateriaPrimaDM._Costo                + ' as ' + _CCMateriaPrimaCosto                  + ', ';
    Result := Result + 'ISNULL('+ TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._MonedaDeCostoID  + ',0) as ' + _CCMateriaPrimaMonedaCostoID       + ', ';
    Result := Result + TMaterialDM.TableName      + '.' + TMaterialDM._PesoEspecifico + ' as ' + _CCMaterialPesoEspecifico         + ', ';
    Result := Result + 'ISNULL('+ THerramentalDM.TableName  + '.' + THerramentalDM._CantidadDeBocas + ',0) as ' + _CCHerramentalCantidadDeBocas        + ', ';
    Result := Result + THerramentalDM.TableName        + '.' +  THerramentalDM._PasoDeMatriz          + ' as ' + _CCHerramentalPasoDeMatriz            + ', ';
    Result := Result + 'ISNULL(UMM.'                   +  TUnidadDeMedidaDM._Equivalencia         + ', 0) as ' + _CCMaterialUnidadDeMedidaEquivalencia + ', ';
    Result := Result + 'ISNULL(UMMP.'                  +  TUnidadDeMedidaDM._Equivalencia         + ', 0) as ' + _CCMateriaPrimaUnidadDeMedidaEquivalencia;
  end;
  Function LeftJoinString : String;
  begin
    Result :=           'LEFT JOIN ' + TArticuloDM.TableName              + ' ON (' + TArticuloDM.TableName     + '.' + TArticuloDM.ID_FieldName              + '=' + TableName                          +  '.' + TArticuloMetodoDeCorteDM._ArticuloID                           + ')';
    Result := Result + ' LEFT JOIN ' + TMateriaPrimaDM.TableName          + ' ON (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM.ID_FieldName          + '=' + TableName                          +  '.' + TArticuloMetodoDeCorteDM._MateriaPrimaID                       + ')';
    Result := Result + ' LEFT JOIN ' + THerramentalDM.TableName           + ' ON (' + THerramentalDM.TableName  + '.' + THerramentalDM.ID_FieldName           + '=' + TableName                          +  '.' + TArticuloMetodoDeCorteDM._HerramentalID                        + ')';
    Result := Result + ' LEFT JOIN ' + TMaterialDM.TableName              + ' ON (' + TMateriaPrimaDM.TableName + '.' + TMateriaPrimaDM._MaterialID           + '=' + TMaterialDM.TableName              +  '.' + TMaterialDM.ID_FieldName                                       + ')';
    Result := Result + ' LEFT JOIN ' + TUnidadDeMedidaDM.TableName  + ' UMM   ON ( UMM.'                              + TUnidadDeMedidaDM.ID_FieldName        + '=' + TMaterialDM.TableName              +  '.' + TMaterialDM._PesoEspecificoUnidadDeMedidaID                    + ')';
    Result := Result + ' LEFT JOIN ' + TUnidadDeMedidaDM.TableName  + ' UMMP  ON ( UMMP.'                             + TUnidadDeMedidaDM.ID_FieldName        + '=' + TableName                          +  '.' + TArticuloMetodoDeCorteDM._PesoUnitarioConScrapUnidadDeMedidaID + ')';
    Result := Result + ' LEFT JOIN ' + TCategoriaDeMateriaPrimaDM.TableName + ' ON (' + TCategoriaDeMateriaPrimaDM.TableName + '.' + TCategoriaDeMateriaPrimaDM.ID_FieldName + '=' + TMateriaPrimaDM.TableName +  '.' + TMateriaPrimaDM.ID_FieldName                             + ')';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TArticuloMetodoDeCorteDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TArticuloMetodoDeCorteDM.ID_FieldName: string;
begin
  Result := 'ArticuloMetodoDeCorteInsumoID';
end;

procedure TArticuloMetodoDeCorteDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloMetodoDeCorte(PDObject) do
  begin
    IntegerField[_HerramentalID]                        := FHerramentalID;
    IntegerField[_MateriaPrimaID]                       := FMateriaPrimaID;
    IntegerField[_ArticuloID]                           := FArticuloID;
    FloatField[_PesoUnitarioConScrap]                   := PesoUnitarioConScrap;
    IntegerField[_PesoUnitarioConScrapUnidadDeMedidaID] := FPesoUnitarioConScrapUnidadDeMedidaID;
    BooleanField[_EsDefault]                            := FEsDefault;
    BooleanField[_EsInactivo]                           := FEsInactivo;
    BooleanField[_EsComprado]                           := FEsComprado;
  end;
end;

procedure TArticuloMetodoDeCorteDM.PopulateObject(PDObject: TPDObject);
  begin
  with TArticuloMetodoDeCorte(PDObject) do
  begin
    FHerramentalID                        := IntegerField[_HerramentalID];
    FMateriaPrimaID                       := IntegerField[_MateriaPrimaID];
    FArticuloID                           := IntegerField[_ArticuloID];
    FPesoUnitarioConScrap                 := FloatField[_PesoUnitarioConScrap];
    FPesoUnitarioConScrapUnidadDeMedidaID := IntegerField[_PesoUnitarioConScrapUnidadDeMedidaID];
    FEsDefault                            := BooleanField[_EsDefault];
    FEsInactivo                           := BooleanField[_EsInactivo];
    FEsComprado                           := BooleanField[_EsComprado];
  end;
end;

{ TArticuloMetodoDeCorteList }
Function TArticuloMetodoDeCorteList.GetActual : TArticuloMetodoDeCorte;
begin
  Result := TArticuloMetodoDeCorte(CurrentObject);
end;

Constructor TArticuloMetodoDeCorteList.CreateByArticulo (_A: TArticulo; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TArticuloMetodoDeCorteDM.TableName + '.' + TArticuloMetodoDeCorteDM._ArticuloID + ' = ' + IntToStr(_A.ID)+')';
  end;
begin
  inherited Create(TArticuloMetodoDeCorte, TArticuloMetodoDeCorteDM.CreateAll(false, WhereString, _SoloActivos));
end;

constructor TArticuloMetodoDeCorteList.CreateByArticuloAndCodigoLike(_A: TArticulo; _C: String; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TArticuloMetodoDeCorteDM.TableName + '.' + TArticuloMetodoDeCorteDM._ArticuloID + ' = ' + IntToStr(_A.ID)+')';
    Result := Result + ' and (' + TArticuloMetodoDeCorteDM.TableName + '.' + TArticuloMetodoDeCorteDM._HerramentalID + ' in (Select ';
    Result := Result +  THerramentalDM.TableName + '.' + THerramentalDM.ID_FieldName + ' from ' + THerramentalDM._Codigo + ' like ' + QuotedStr('%'+_C+'%') + '))';
  end;
begin
  inherited Create(TArticuloMetodoDeCorte, TArticuloMetodoDeCorteDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TArticuloMetodoDeCorteList.CreateNewObject: TPDObject;
begin
  Result := TArticuloMetodoDeCorte.Create;
end;

function TArticuloMetodoDeCorteList.FindDefault: Boolean;
begin
  Result := False;
  if (Count = 0)  then
    exit;
  if (Count = 1) then
    begin
      First;
      Result := True;
      exit;
    end;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (Self.Actual.EsDefault);
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TArticuloMetodoDeCorteList.FindDefaultPopup: Boolean;
begin
  Result := False;
  if (Count = 0)  then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (Self.Actual.EsDefault);
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TArticuloMetodoDeCorteList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TArticuloMetodoDeCorte, TArticuloMetodoDeCorteDM.CreateAll(false, '', _SoloActivos));
end;

{ TArticuloComponenteDesplegadoDM }

class function TArticuloComponenteDesplegadoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForTemporales;
end;

class function TArticuloComponenteDesplegadoDM.ID_FieldName: string;
begin
  Result := 'ArticuloComponenteDesplegadoID';
end;

procedure TArticuloComponenteDesplegadoDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  // nada
end;

procedure TArticuloComponenteDesplegadoDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  // nada
end;

class function TArticuloComponenteDesplegadoDM.TableName: string;
begin
  Result := 'articuloComponentesDesplegados';
end;

{ TArticuloComponenteDesplegado }

constructor TArticuloComponenteDesplegado.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM (TArticuloComponenteDesplegadoDM);
  SaveSqlLog    := False;
  FCantidad := null;
  Forden := null;
  FarchivoDeImagen := null;
  FarchivoSinImagen := null;
end;

function TArticuloComponenteDesplegado.GetarchivoDeImagen: TString;
//  Function NombreDeArchivo: TString;
//  Begin
//    Result := ComponenteDesplegado.familiaDeArticulo.codigo + '-' +
//      ComponenteDesplegado.numeroDeArticulo + '/' +
//      aplicacion.TextService.RellenarCodigo
//      (IntToStr(ComponenteDesplegado.medida), 2);
//    if ComponenteDesplegado.TipoDeComponente.FiguraEnCodigoDeFabricado then
//      Result := Result + '-' + ComponenteDesplegado.TipoDeComponente.codigo;
//  end;

var
  FL: TFotoList; // hay que buscar tanto el codigo completo (B-2612/17-FD-B) como el codigo sin el material (B-2612/17-FD)
  Art : String;
begin
  if (FarchivoDeImagen = Null) then
    try
      Art := ComponenteDesplegado.codigo;
      FL := TFotoList.CreatebyArticuloCodigo(Art, 'articulo');
      if (FL.Count = 0) then
        Art := AnsiLeftStr(Art , Length(Art) -2);
      if FL.Count > 0 then
      begin
        FL.First;
        FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
      end
      else
        FarchivoDeImagen := archivoSinImagen;
    Finally
      FreeAndNil(FL);
    end;
  Result := FarchivoDeImagen;
end;

function TArticuloComponenteDesplegado.GetarchivoSinImagen: TString;
begin
  if FarchivoSinImagen = null then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenArticulos;

  Result := FarchivoSinImagen;
end;

function TArticuloComponenteDesplegado.GetArticuloPadre: TArticulo;
begin
  if not assigned(FArticuloPadre) then
    GetObject(TArticulo, FArticuloPadre, ArticuloPadreID);

  Result := TArticulo(FArticuloPadre);
end;

function TArticuloComponenteDesplegado.GetcomponenteDesplegado: TArticulo;
begin
  if not assigned(FcomponenteDesplegado) then
    GetObject(TArticulo, FcomponenteDesplegado, componenteDesplegadoID);

  Result := TArticulo(FcomponenteDesplegado);
end;

{ TArticuloComponenteDesplegadoList }
constructor TArticuloComponenteDesplegadoList.CreateEmpty;
begin
  inherited Create(TArticuloComponenteDesplegado, TArticuloComponenteDesplegadoDM.CreateEmpty);
end;

function TArticuloComponenteDesplegadoList.CreateNewObject: TPDObject;
begin
  Result := TArticuloComponenteDesplegado.Create;
end;

function TArticuloComponenteDesplegadoList.FindArticuloID(_ArticuloID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.componenteDesplegadoID = _ArticuloID);
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

function TArticuloComponenteDesplegadoList.GetActual
  : TArticuloComponenteDesplegado;
begin
  Result := TArticuloComponenteDesplegado(CurrentObject);
end;

{ TTmpFabricadoComponenteDesplegado }
procedure TTmpFabricadoComponenteDesplegado.CleanFabricado;
begin
  if Assigned( FFabricado) then
    FreeAndNil(FFabricado);
  if Assigned( FFabricadoComponente) then
    FreeAndNil(FFabricadoComponente);
end;

constructor TTmpFabricadoComponenteDesplegado.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TArticuloComponenteDesplegadoDM);
  SaveSqlLog    := False;
  FFabricado := Nil;
  FArticuloOriginalID := NullID;
  FTerminacionOriginalID := NullID;
  FCunioOriginalID := NullID;
  FCrcOriginal := 0;
end;

function TTmpFabricadoComponenteDesplegado.esOrdenPuro(_TFCDL: TTmpFabricadoComponenteDesplegadoList): Boolean;
var
  posID: TObjectID;
begin
  Result := True;
  posID := _TFCDL.Actual.ID;

  if not _TFCDL.IsFirst then
    repeat
      Result := (_TFCDL.Actual.OrdenDeArmado = 1);
      _TFCDL.Previous;
    until not Result or _TFCDL.IsFirst;

    _TFCDL.Find(posID);
end;

function TTmpFabricadoComponenteDesplegado.GetFabricado: TTmpFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TTmpFabricado, TPDObject(FFabricado), FabricadoID);

  Result := TTmpFabricado(FFabricado);
end;

function TTmpFabricadoComponenteDesplegado.GetFabricadoComponente: TTmpFabricadoComponente;
begin
  if not assigned(FFabricadoComponente) then
    GetObject(TTmpFabricadoComponente, FFabricadoComponente, FabricadoComponenteID);

  Result := TTmpFabricadoComponente(FFabricadoComponente);
end;

function TTmpFabricadoComponenteDesplegado.GetFabricadoPadre: TTmpFabricado;
begin
  if not assigned(FFabricadoPadre) then
    GetObject(TTmpFabricado, TPDObject(FFabricadoPadre), FabricadoPadreID);

  Result := TTmpFabricado(FFabricadoPadre);
end;

procedure TTmpFabricadoComponenteDesplegado.SetFabricadoComponenteID(const Value: TObjectID);
begin
  if (Value <> FFabricadoComponenteID) and assigned(FFabricadoComponente) then
    begin
      FreeAndNil(FFabricado);
      FreeAndNil(FFabricadoComponente);
    end;

  FFabricadoComponenteID := Value;
end;

procedure TTmpFabricadoComponenteDesplegado.SetFabricadoID
  (const Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
    begin
      FreeAndNil(FFabricado);
      FreeAndNil(FFabricadoComponente);
    end;

  FFabricadoID := Value;
end;

procedure TTmpFabricadoComponenteDesplegado.SetFabricadoPadreID
  (const Value: TObjectID);
begin
  if (Value <> FFabricadoPadreID) and assigned(FFabricadoPadre) then
    FreeAndNil(FFabricadoPadre);
  FFabricadoPadreID := Value;
end;

{ TTmpFabricadoComponenteDesplegadoList }

constructor TTmpFabricadoComponenteDesplegadoList.CreateEmpty;
begin
  inherited Create(TTmpFabricadoComponenteDesplegado, TArticuloComponenteDesplegadoDM.CreateEmpty);
end;

function TTmpFabricadoComponenteDesplegadoList.CreateNewObject: TPDObject;
begin
  Result := TTmpFabricadoComponenteDesplegado.Create;
end;

function TTmpFabricadoComponenteDesplegadoList.FindComponente(_C: TTmpFabricadoComponente): Boolean;
begin
  Result := False;
  if Count > 0 then
  begin
    First;
    while (Actual.FabricadoComponenteID <> _C.ID) and not IsLast do
      next;
    Result := Not IsLast;
  end;
end;

function TTmpFabricadoComponenteDesplegadoList.GetActual : TTmpFabricadoComponenteDesplegado;
begin
  Result := TTmpFabricadoComponenteDesplegado(CurrentObject);
end;

procedure TTmpFabricadoComponenteDesplegadoList.LimpiarHijos;
var
  IDComponentePadre : TobjectID;
begin
  IDComponentePadre := Actual.ID;
  next;
  while Not IsLast do
    begin
      if Actual.ComponenteDesplegadoPadreID = IDComponentePadre then
        begin
          LimpiarHijos;
          DeleteFromList;
        end
      else
        next;
    end;
  Find(IDComponentePadre);
end;

{ TFabricadoComponenteDesplegado }

constructor TFabricadoComponenteDesplegado.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TArticuloComponenteDesplegadoDM);
  SaveSqlLog    := False;
  FCantidad := null;
  Forden := null;
  FArticuloOriginalID := NullID;
  FTerminacionOriginalID := NullID;
  FCunioOriginalID := NullID;
  FCrcOriginal := 0;
end;

function TFabricadoComponenteDesplegado.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, TPDObject(FFabricado), FFabricadoID);

  Result := TFabricado(FFabricado);
end;

function TFabricadoComponenteDesplegado.GetFabricadoPadre: TFabricado;
begin
  if not assigned(FFabricadoPadre) then
    GetObject(TFabricado, TPDObject(FFabricadoPadre), FabricadoPadreID);

  Result := TFabricado(FFabricadoPadre);
end;

{ TFabricadoComponenteDesplegadoList }

constructor TFabricadoComponenteDesplegadoList.CreateEmpty;
begin
  inherited Create(TFabricadoComponenteDesplegado, TArticuloComponenteDesplegadoDM.CreateEmpty);
end;

function TFabricadoComponenteDesplegadoList.CreateNewObject: TPDObject;
begin
  Result := TFabricadoComponenteDesplegado.Create;
end;

function TFabricadoComponenteDesplegadoList.FindFabricado(_F: TFabricado): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result :=  (Actual.FabricadoID = _F.ID);
      except
        Result := False;
      end;
      if not Result then
        next;
    end;

  if IsLast then
    First;
end;

function TFabricadoComponenteDesplegadoList.GetActual
  : TFabricadoComponenteDesplegado;
begin
  Result := TFabricadoComponenteDesplegado(CurrentObject);
end;

{ TCargoDeEmpresaItem }
constructor TCargoDeEmpresaItem.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCargoDeEmpresaItemDM);
end;

function TCargoDeEmpresaItem.GetFormulario: TFormulario;
begin
  if not assigned(FFormulario) then
    GetObject(TFormulario, FFormulario, FormularioID);

  Result := TFormulario(FFormulario);
end;

procedure TCargoDeEmpresaItem.SetCargoDeEmpresaID(const Value: TObjectID);
begin
  FCargoDeEmpresaID := Value;
end;

procedure TCargoDeEmpresaItem.SetFormularioID(Value: TObjectID);
begin
  if (Value <> FFormularioID) and assigned(FFormulario) then
    FreeAndNil(FFormulario);

  FFormularioID := Value;

end;

{ TCargoDeEmpresaItemDM }
class function TCargoDeEmpresaItemDM.TableName: string;
begin
  Result := 'CargoDeEmpresaItems';
end;

class function TCargoDeEmpresaItemDM.ID_FieldName: string;
begin
  Result := 'CargoDeEmpresaItemID';
end;

procedure TCargoDeEmpresaItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TCargoDeEmpresaItem(PDObject) do
  begin
    IDField[_FormularioID]                 := FFormularioID;
    IDField[_CargoDeEmpresaID]             := FCargoDeEmpresaID;
  end;
end;

procedure TCargoDeEmpresaItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TCargoDeEmpresaItem(PDObject) do
  begin
    FFormularioID            := IDField[_FormularioID];
    FCargoDeEmpresaID        := IDField[_CargoDeEmpresaID];
  end;
end;

{ TCargoDeEmpresaItemList }
function TCargoDeEmpresaItemList.GetActual: TCargoDeEmpresaItem;
begin
  Result := TCargoDeEmpresaItem(CurrentObject);
end;

constructor TCargoDeEmpresaItemList.CreateByCargoDeEmpresa(_CE: TCargoDeEmpresa);
  function WhereString: String;
  begin
    Result := TCargoDeEmpresaItemDM._CargoDeEmpresaID + ' = ' + IntToStr(_CE.ID);
  end;
begin
  inherited Create(TCargoDeEmpresaItem, TCargoDeEmpresaItemDM.CreateAll(False, WhereString));
end;

function TCargoDeEmpresaItemList.CreateNewObject: TPDObject;
begin
  Result := TCargoDeEmpresaItem.Create;
end;

function TCargoDeEmpresaItemList.FindFormularioCodigo(_FormularioCodigo: string) : Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (UpperCase(Actual.Formulario.Codigo) = UpperCase(_FormularioCodigo));
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

constructor TCargoDeEmpresaItemList.CreateAll;
begin
  inherited Create(TCargoDeEmpresaItem, TCargoDeEmpresaItemDM.CreateAll(False));
end;

{ TCargoDeEmpresa }
constructor TCargoDeEmpresa.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCargoDeEmpresaDM);
end;

function TCargoDeEmpresa.GetItems: TCargoDeEmpresaItemList;
begin
  If not assigned(FItems) Then
    GetList(TPDList(FItems), TPDList(TCargoDeEmpresaItemList.CreateByCargoDeEmpresa(self)));
  Result := FItems;
end;

{ TCargoDeEmpresaDM }
class function TCargoDeEmpresaDM.TableName: string;
begin
  Result := 'CargosDeEmpresa';
end;

class function TCargoDeEmpresaDM.EsInactivo_FieldName: string;
begin
  result := _EsInactivo;
end;

class function TCargoDeEmpresaDM.ID_FieldName: string;
begin
  Result := 'CargoDeEmpresaID';
end;

procedure TCargoDeEmpresaDM.PopulateFields(PDObject: TPDObject);
begin
  with TCargoDeEmpresa(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TCargoDeEmpresaDM.PopulateObject(PDObject: TPDObject);
begin
  with TCargoDeEmpresa(PDObject) do
  begin
    Descripcion := StringField[_Descripcion];
    FEsInactivo := BooleanField[_EsInactivo];
  end;
end;

{ TCargoDeEmpresaList }
function TCargoDeEmpresaList.GetActual: TCargoDeEmpresa;
begin
  Result := TCargoDeEmpresa(CurrentObject);
end;

function TCargoDeEmpresaList.CreateNewObject: TPDObject;
begin
  Result := TCargoDeEmpresa.Create;
end;

constructor TCargoDeEmpresaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCargoDeEmpresa, TCargoDeEmpresaDM.CreateAll(False, '', _Soloactivos));
end;

{ TIncoterm }
function TIncoterm.GetDescriptibleAbreviadoListClass;
begin
  Result := TIncotermList;
end;

constructor TIncoterm.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TIncotermDM);
end;

{ TIncotermDM }
class function TIncotermDM.TableName: string;
begin
  Result := 'Incoterms';
end;

class function TIncotermDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TIncotermDM.ID_FieldName: string;
begin
  Result := 'IncotermID';
end;

procedure TIncotermDM.PopulateFields(PDObject: TPDObject);
begin
  with TIncoterm(PDObject) do
  begin
    StringField[_Descripcion] := Descripcion;
    StringField[_Codigo] := codigo;
    StringField[_grupo] := Grupo;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TIncotermDM.PopulateObject(PDObject: TPDObject);
begin
  with TIncoterm(PDObject) do
  begin
    Fdescripcion := StringField[_Descripcion];
    Fcodigo := StringField[_Codigo];
    FGrupo := StringField[_grupo];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TIncotermList }
function TIncotermList.GetActual: TIncoterm;
begin
  Result := TIncoterm(CurrentObject);
end;

function TIncotermList.CreateNewObject: TPDObject;
begin
  Result := TIncoterm.Create;
end;

constructor TIncotermList.CreateAll;
begin
  inherited Create(TIncoterm, TIncotermDM.CreateAll(False));
end;

{ TCentroDeCosto }
function TCentroDeCosto.GetDescriptibleAbreviadoListClass;
begin
  Result := TCentroDeCostoList;
end;

function TCentroDeCosto.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TCentroDeCostoDM._TeamplaceTableName, TCentroDeCostoDM._TeamplaceCodigo + ' = ' + QuotedStr( Codigo ), TCentroDeCostoDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TCentroDeCosto.GetSector: TSector;
begin
  if not assigned(FSector) then
    GetObject(TSector, FSector, FSectorID);
  Result := TSector(FSector);
end;

class function TCentroDeCosto.GuardarEnTeamPlace(_C: TCentroDeCosto): Boolean;
begin
  Result := False;

  if (_C.IDTeamplace <> NullID) then
    Aplicacion.RaiseExceptionCreate('El Centro de Costo ya existe en Teamplace');

  Result := Aplicacion.Sesion.ConexionTeamPlace.Insert_Record(TCentroDeCostoDM._TeamplaceTableName,
  ['Nombre', 'Codigo', 'Activo'], [QuotedStr(_C.Descripcion), QuotedStr(_C.Codigo), BoolToStr( not _C.EsInactivo )]);
end;

procedure TCentroDeCosto.SetSectorID(const Value: TObjectID);
begin
  if (Value <> FSectorID) and Assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

constructor TCentroDeCosto.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCentroDeCostoDM);
end;

{ TCentroDeCostoDM }
class function TCentroDeCostoDM.TableName: string;
begin
  Result := 'CentrosDeCosto';
end;

class function TCentroDeCostoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCentroDeCostoDM.ID_FieldName: string;
begin
  Result := 'CentroDeCostoID';
end;

procedure TCentroDeCostoDM.PopulateFields(PDObject: TPDObject);
begin
  with TCentroDeCosto(PDObject) do
  begin
    StringField[_Descripcion]      := Descripcion;
    StringField[_Codigo]           := Codigo;
    BooleanField[_EsInactivo]      := FEsInactivo;
    IDField[_SectorID]             := FSectorID;
    BooleanField[_ProrrateaCostos] := FProrrateaCostos;
  end;
end;

procedure TCentroDeCostoDM.PopulateObject(PDObject: TPDObject);
begin
  with TCentroDeCosto(PDObject) do
  begin
    Fdescripcion     := StringField[_Descripcion];
    Fcodigo          := StringField[_Codigo];
    FEsInactivo      := BooleanField[_EsInactivo];
    FSectorID        := IDField[_SectorID];
    FProrrateaCostos := BooleanField[_ProrrateaCostos];
  end;
end;

{ TCentroDeCostoList }
function TCentroDeCostoList.GetActual: TCentroDeCosto;
begin
  Result := TCentroDeCosto(CurrentObject);
end;

constructor TCentroDeCostoList.CreateByDescripcionLikeAndProrrateables(_D: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TCentroDeCostoDM.TableName + '.' + TCentroDeCostoDM._Descripcion + ' like ' + QuotedStr(_D + '%') + ' ) and ';
    Result := '(' + TCentroDeCostoDM.TableName + '.' + TCentroDeCostoDM._ProrrateaCostos + '=1)';
  end;
begin
  inherited Create(TCentroDeCosto, TCentroDeCostoDM.CreateAll( False, WhereString, _SoloActivos));
end;

constructor TCentroDeCostoList.CreateByProrrateables(_SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := '(' + TCentroDeCostoDM.TableName + '.' + TCentroDeCostoDM._ProrrateaCostos + '=1)';
  end;
begin
  inherited Create(TCentroDeCosto, TCentroDeCostoDM.CreateAll( False, WhereString, _SoloActivos));
end;

function TCentroDeCostoList.CreateNewObject: TPDObject;
begin
  Result := TCentroDeCosto.Create;
end;

constructor TCentroDeCostoList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCentroDeCosto, TCentroDeCostoDM.CreateAll( False, '', _SoloActivos));
end;

{ TTipoDeClaveFiscal }
function TTipoDeClaveFiscal.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeClaveFiscalList;
end;

constructor TTipoDeClaveFiscal.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeClaveFiscalDM);
end;

{ TTipoDeClaveFiscalDM }
class function TTipoDeClaveFiscalDM.TableName: string;
begin
  Result := 'TiposDeClaveFiscal';
end;

class function TTipoDeClaveFiscalDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeClaveFiscalDM.ID_FieldName: string;
begin
  Result := 'TipoDeClaveFiscalID';
end;

procedure TTipoDeClaveFiscalDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeClaveFiscal(PDObject) do
  begin
    StringField[_Codigo] := codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := EsInactivo;
  end;
end;

procedure TTipoDeClaveFiscalDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeClaveFiscal(PDObject) do
  begin
    codigo := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

{ TTipoDeClaveFiscalList }
function TTipoDeClaveFiscalList.GetActual: TTipoDeClaveFiscal;
begin
  Result := TTipoDeClaveFiscal(CurrentObject);
end;

function TTipoDeClaveFiscalList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeClaveFiscal.Create;
end;

constructor TTipoDeClaveFiscalList.CreateAll;
begin
  inherited Create(TTipoDeClaveFiscal, TTipoDeClaveFiscalDM.CreateAll(False));
end;

{ TFabricadoTraduccion }
constructor TFabricadoTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TFabricadoTraduccionDM);
end;

function TFabricadoTraduccion.GetFabricado: TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado, FFabricado, FFabricadoID);

  Result := TFabricado(FFabricado);
end;

procedure TFabricadoTraduccion.SetFabricadoID(Value: TObjectID);
begin
  if (Value <> FFabricadoID) and assigned(FFabricado) then
    FreeAndNil(FFabricado);

  FFabricadoID := Value;

end;

{ TFabricadoTraduccionDM }
class function TFabricadoTraduccionDM.TableName: string;
begin
  Result := 'FabricadoTraducciones';
end;

class function TFabricadoTraduccionDM.ConexionBaseDeDatos: TConnection;
Begin
  Result := Aplicacion.DatabaseForFabricados;
end;


class function TFabricadoTraduccionDM.ID_FieldName: string;
begin
  Result := 'FabricadoTraduccionID';
end;

procedure TFabricadoTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricadoTraduccion(PDObject) do
  begin
    IDField[_resourceLanguageID] := FresourceLanguageID;
    StringField[_Descripcion] := Descripcion;
    IDField[_FabricadoID] := FFabricadoID;
  end;
end;

procedure TFabricadoTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricadoTraduccion(PDObject) do
  begin
    FresourceLanguageID := IDField[_resourceLanguageID];
    Fdescripcion := StringField[_Descripcion];
    FFabricadoID := IDField[_FabricadoID];
  end;
end;

{ TFabricadoTraduccionList }
function TFabricadoTraduccionList.GetActual: TFabricadoTraduccion;
begin
  Result := TFabricadoTraduccion(CurrentObject);
end;

function TFabricadoTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TFabricadoTraduccion.Create;
end;

constructor TFabricadoTraduccionList.CreateAll;
begin
  inherited Create(TFabricadoTraduccion, TFabricadoTraduccionDM.CreateAll(False));
end;

{ TTipoDeComponenteTraduccion }
constructor TTipoDeComponenteTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TTipoDeComponenteTraduccionDM);
end;

function TTipoDeComponenteTraduccion.GetTipoDeComponente: TTipoDeComponente;
begin
  if not assigned(FTipoDeComponente) then
    GetObject(TTipoDeComponente, FTipoDeComponente, FTipoDeComponenteID);

  Result := TTipoDeComponente(FTipoDeComponente);
end;

procedure TTipoDeComponenteTraduccion.SetTipoDeComponenteID(Value: TObjectID);
begin
  if (Value <> FTipoDeComponenteID) and assigned(FTipoDeComponente) then
    FreeAndNil(FTipoDeComponente);

  FTipoDeComponenteID := Value;

end;

{ TTipoDeComponenteTraduccionDM }
class function TTipoDeComponenteTraduccionDM.TableName: string;
begin
  Result := 'TipoDeComponenteTraducciones';
end;

class function TTipoDeComponenteTraduccionDM.ID_FieldName: string;
begin
  Result := 'TipoDeComponenteTraduccionID';
end;

procedure TTipoDeComponenteTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeComponenteTraduccion(PDObject) do
  begin
    IDField[_resourceLanguageID] := FresourceLanguageID;
    StringField[_Descripcion] := Descripcion;
    IDField[_TipoDeComponenteID] := FTipoDeComponenteID;
  end;
end;

procedure TTipoDeComponenteTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeComponenteTraduccion(PDObject) do
  begin
    FresourceLanguageID := IDField[_resourceLanguageID];
    Fdescripcion := StringField[_Descripcion];
    FTipoDeComponenteID := IDField[_TipoDeComponenteID];
  end;
end;

{ TTipoDeComponenteTraduccionList }
function TTipoDeComponenteTraduccionList.GetActual: TTipoDeComponenteTraduccion;
begin
  Result := TTipoDeComponenteTraduccion(CurrentObject);
end;

constructor TTipoDeComponenteTraduccionList.CreateByTipoDeComponente(_T: TTipoDeComponente);
  Function WhereString : String;
  begin
    Result := TTipoDeComponenteTraduccionDM._TipoDeComponenteID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTipoDeComponenteTraduccion, TTipoDeComponenteTraduccionDM.CreateAll(False, WhereString));
end;

function TTipoDeComponenteTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeComponenteTraduccion.Create;
end;

constructor TTipoDeComponenteTraduccionList.CreateAll;
begin
  inherited Create(TTipoDeComponenteTraduccion, TTipoDeComponenteTraduccionDM.CreateAll(False));
end;

{ TRubroDeArticuloTraduccion }
constructor TRubroDeArticuloTraduccion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TRubroDeArticuloTraduccionDM);
end;

procedure TRubroDeArticuloTraduccion.SetrubroDeArticuloID(Value: TObjectID);
begin
  if (Value <> FrubroDeArticuloID) and assigned(FrubroDeArticulo) then
    FreeAndNil(FrubroDeArticulo);

  FrubroDeArticuloID := Value;

end;

function TRubroDeArticuloTraduccion.GetrubroDeArticulo: TRubroDeArticulo;
begin
  if not assigned(FrubroDeArticulo) then
    GetObject(TRubroDeArticulo, FrubroDeArticulo, FrubroDeArticuloID);

  Result := TRubroDeArticulo(FrubroDeArticulo);
end;

// procedure TRubroDeArticuloTraduccion.SetResourceLanguageID(Value : TObjectID);
// begin
// if (Value<>FResourceLanguageID) and Assigned(FResourceLanguage) then
// FreeAndNil(FResourceLanguage);
//
// FResourceLanguageID := Value;
//
// end;
{ TRubroDeArticuloTraduccionDM }
class function TRubroDeArticuloTraduccionDM.TableName: string;
begin
  Result := 'RubroDeArticuloTraducciones';
end;

class function TRubroDeArticuloTraduccionDM.ID_FieldName: string;
begin
  Result := 'RubroDeArticuloTraduccionID';
end;

procedure TRubroDeArticuloTraduccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TRubroDeArticuloTraduccion(PDObject) do
  begin
    IDField[_RubroDeArticuloID] := rubroDeArticuloID;
    IDField[_resourceLanguageID] := resourceLanguageID;
    StringField[_Descripcion] := Descripcion;
    IntegerField[_Orden] := orden;
  end;
end;

procedure TRubroDeArticuloTraduccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TRubroDeArticuloTraduccion(PDObject) do
  begin
    rubroDeArticuloID := IDField[_RubroDeArticuloID];
    resourceLanguageID := IDField[_resourceLanguageID];
    Descripcion := StringField[_Descripcion];
    orden := IntegerField[_Orden];
  end;
end;

{ TRubroDeArticuloTraduccionList }
function TRubroDeArticuloTraduccionList.GetActual: TRubroDeArticuloTraduccion;
begin
  Result := TRubroDeArticuloTraduccion(CurrentObject);
end;

constructor TRubroDeArticuloTraduccionList.CreateByRubroDeArticulo(_R: TRubroDeArticulo);
  Function WhereString : String;
  begin
    Result := TRubroDeArticuloTraduccionDM._RubroDeArticuloID + ' = ' + IntToStr(_R.ID);
  end;
begin
  inherited Create(TRubroDeArticuloTraduccion, TRubroDeArticuloTraduccionDM.CreateAll(False, WhereString, False, TRubroDeArticuloTraduccionDM._Orden));
end;

function TRubroDeArticuloTraduccionList.CreateNewObject: TPDObject;
begin
  Result := TRubroDeArticuloTraduccion.Create;
end;

constructor TRubroDeArticuloTraduccionList.CreateAll;
begin
  inherited Create(TRubroDeArticuloTraduccion,TRubroDeArticuloTraduccionDM.CreateAll(False));
end;

{ TCalibreDeControl }
function TCalibreDeControl.GetResponsablesTecnicos : TCalibreDeControlResponsableTecnicoList;
begin
  if FResponsablesTecnicos = nil then
    GetList(TPDList(FResponsablesTecnicos), TPDList(TCalibreDeControlResponsableTecnicoList.CreateByCalibreDeControl(Self)));
  Result := FResponsablesTecnicos;
end;

procedure TCalibreDeControl.Delete;
begin
  Aplicacion.RaiseExceptionCreate('No se permite borrar los datos de este instrumento de control');
end;

function TCalibreDeControl.GetCentroDeCosto: TCentroDeCosto;
begin
  if not assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto, FCentroDeCosto, FCentroDeCostoID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

function TCalibreDeControl.GetDescriptibleAbreviadoListClass;
begin
  Result := TCalibreDeControlList;
end;

function TCalibreDeControl.GetPeriodosDeCalibracion : TCalibreDeControlPeriodoDeCalibracionList;
begin
  if FPeriodosDeCalibracion = nil then
    GetList(TPDList(FPeriodosDeCalibracion), TPDList(TCalibreDeControlPeriodoDeCalibracionList.CreateByCalibreDeControl(self)));
  Result := TCalibreDeControlPeriodoDeCalibracionList(FPeriodosDeCalibracion);
end;

constructor TCalibreDeControl.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCalibreDeControlDM);
  FOtras := '';
  FLimiteDeErrorAdmitido := '';
  FClaseCalidad := '';
  FResolucion := '';
  FRango := '';
  FInstruccionDeCalibracion := '';
  FfechaDeAlta := null;
  FAnioDeFabricacion := '';
  FNumeroDeSerie := '';
  FModelo := '';
  Fmarca := '';
end;

procedure TCalibreDeControl.SetCentroDeCostoID(Value: TObjectID);
begin
  if (Value <> FCentroDeCostoID) and assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  FCentroDeCostoID := Value;
end;

{ TCalibreDeControlDM }
class function TCalibreDeControlDM.TableName: string;
begin
  Result := 'CalibresDeControl';
end;

class function TCalibreDeControlDM.EsInactivo_FieldName: string;
begin
  result := _EsInactivo;
end;

class function TCalibreDeControlDM.ID_FieldName: string;
begin
  Result := 'CalibreDeControlID';
end;

procedure TCalibreDeControlDM.PopulateFields(PDObject: TPDObject);
begin
  with TCalibreDeControl(PDObject) do
  begin
    StringField[_Otras] := Otras;
    StringField[_LimiteDeErrorAdmitido] := LimiteDeErrorAdmitido;
    StringField[_ClaseCalidad] := ClaseCalidad;
    StringField[_Resolucion] := Resolucion;
    StringField[_Rango] := Rango;
    IDField[_CentroDeCostoID] := FCentroDeCostoID;
    StringField[_InstruccionDeCalibracion] := InstruccionDeCalibracion;
    DateField[_FechaDeAlta] := FfechaDeAlta;
    StringField[_AnioDeFabricacion] := AnioDeFabricacion;
    StringField[_NumeroDeSerie] := NumeroDeSerie;
    StringField[_Modelo] := Modelo;
    StringField[_Marca] := marca;
    StringField[_Descripcion] := Descripcion;
    StringField[_Codigo] := codigo;
  end;
end;

procedure TCalibreDeControlDM.PopulateObject(PDObject: TPDObject);
begin
  with TCalibreDeControl(PDObject) do
  begin
    FOtras := StringField[_Otras];
    FLimiteDeErrorAdmitido := StringField[_LimiteDeErrorAdmitido];
    FClaseCalidad := StringField[_ClaseCalidad];
    FResolucion := StringField[_Resolucion];
    FRango := StringField[_Rango];
    FCentroDeCostoID := IDField[_CentroDeCostoID];
    FInstruccionDeCalibracion := StringField[_InstruccionDeCalibracion];
    FfechaDeAlta := DateField[_FechaDeAlta];
    FAnioDeFabricacion := StringField[_AnioDeFabricacion];
    FNumeroDeSerie := StringField[_NumeroDeSerie];
    FModelo := StringField[_Modelo];
    Fmarca := StringField[_Marca];
    Fdescripcion := StringField[_Descripcion];
    Fcodigo := StringField[_Codigo];
  end;
end;

{ TCalibreDeControlList }
function TCalibreDeControlList.GetActual: TCalibreDeControl;
begin
  Result := TCalibreDeControl(CurrentObject);
end;

function TCalibreDeControlList.CreateNewObject: TPDObject;
begin
  Result := TCalibreDeControl.Create;
end;

constructor TCalibreDeControlList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TCalibreDeControl, TCalibreDeControlDM.CreateAll( False, '',_SoloActivos));
end;

constructor TCalibreDeControlList.CreateEmpty;
begin
  inherited Create(TCalibreDeControl, TCalibreDeControlDM.CreateEmpty);
end;

{ TRecurso }
function TRecurso.GetArchivoDeImagen: TString;
var
  FL: TFotoList;
  begin
  if (FarchivoDeImagen = Null) then
    try
      FL := TFotoList.CreatebyRecursoCodigo(Codigo, 'recurso');
      if FL.Count > 0 then
        begin
          FL.First;
          FarchivoDeImagen := FL.Actual.RutaDeArchivoRed;
        end
      else
        FarchivoDeImagen := ArchivoSinImagen;
    Finally
      FreeAndNil(FL);
  end;
  Result := FarchivoDeImagen;
end;

function TRecurso.GetArchivoSinImagen: TString;
begin
  if (FarchivoSinImagen = Null) then
    FarchivoSinImagen := aplicacion.ArchivoSinImagenTerminaciones;
  Result := FarchivoSinImagen;
end;

function TRecurso.GetDescriptibleAbreviadoListClass;
begin
  Result := TRecursoList;
end;

function TRecurso.GetHerramentales: TRecursoHerramentalList;
begin
  if not Assigned(FHerramentales) then
    GetList(TPDList(FHerramentales),  TPDList(TRecursoHerramentalList.CreateByRecurso(Self)));
  Result := TRecursoHerramentalList(FHerramentales);
end;

function TRecurso.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, SectorID);
  Result := TSector(FSector);
end;

constructor TRecurso.Create;
begin
  inherited;
  DMObject := Aplicacion.DMProvider.GetGlobalDM(TRecursoDM);
end;

procedure TRecurso.SetSectorID(const Value: TObjectID);
begin
  if (Value <> FSectorID) and assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

procedure TRecurso.SetTipoDeRecursoID(Value: TObjectID);
begin
  if (Value <> FTipoDeRecursoID) and assigned(FTipoDeRecurso) then
    FreeAndNil(FTipoDeRecurso);
  FTipoDeRecursoID := Value;
end;

function TRecurso.GetTipoDeRecurso: TTipoDeRecurso;
begin
  if not assigned(FTipoDeRecurso) then
    GetObject(TTipoDeRecurso, FTipoDeRecurso, TipoDeRecursoID);
  Result := TTipoDeRecurso(FTipoDeRecurso);
end;

{ TRecursoDM }
class function TRecursoDM.TableName: string;
begin
  Result := 'Recursos';
end;

class function TRecursoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TRecursoDM.ID_FieldName: string;
begin
  Result := 'RecursoID';
end;

procedure TRecursoDM.PopulateFields(PDObject: TPDObject);
begin
  with TRecurso(PDObject) do
  begin
    IDField[_TipoDeRecursoID] := FTipoDeRecursoID;
    StringField[_Codigo]      := Codigo;
    StringField[_Descripcion] := Descripcion;
    BooleanField[_EsInactivo] := FEsInactivo;
    IDField[_SectorID]        := FSectorID;
  end;
end;

procedure TRecursoDM.PopulateObject(PDObject: TPDObject);
begin
  with TRecurso(PDObject) do
  begin
    FTipoDeRecursoID := IDField[_TipoDeRecursoID];
    Fcodigo          := StringField[_Codigo];
    Fdescripcion     := StringField[_Descripcion];
    FEsInactivo      := BooleanField[_EsInactivo];
    FSectorID        := IDField[_SectorID];
  end;
end;

{ TRecursoList }
function TRecursoList.GetActual: TRecurso;
begin
  Result := TRecurso(CurrentObject);
end;

function TRecursoList.CreateNewObject: TPDObject;
begin
  Result := TRecurso.Create;
end;

constructor TRecursoList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TRecurso, TRecursoDM.CreateAll(False, '', _SoloActivos ));
end;

constructor TRecursoList.CreateByPaso(_P: TPasoDeFabricacion; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+ TRecursoDM.TableName + '.' + TRecursoDM.ID_FieldName + ' in ( Select ' + TPasoDeFabricacionRecursoDM._RecursoID  + ' from ' + TPasoDeFabricacionRecursoDM.TableName + ' where ' + TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' = ' + IntToStr(_P.ID) + ') )';
  end;
begin
  inherited Create(TRecurso, TRecursoDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TRecursoList.CreateByPasoAndCodigoLike(_C: String; _P: TPasoDeFabricacion; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+ TRecursoDM.TableName + '.' + TRecursoDM.ID_FieldName + ' in ( Select ' + TPasoDeFabricacionRecursoDM._RecursoID  + ' from ' + TPasoDeFabricacionRecursoDM.TableName + ' where ' + TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' = ' + IntToStr(_P.ID) + ') )';
    Result := Result + ' and (' + TRecursoDM.TableName +'.'+TRecursoDM._Codigo + ' like ' + QuotedStr('%' + _C + '%') + ')';
  end;
begin
  inherited Create(TRecurso, TRecursoDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TRecursoList.CreateByTipoDeRecurso(_TR: TTipoDeRecurso; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+ TRecursoDM.TableName +'.'+TRecursoDM._TipoDeRecursoID + '=' + IntToStr(_TR.ID)+')';
  end;
begin
  inherited Create(TRecurso, TRecursoDM.CreateAll(False, WhereString, _SoloActivos ));
end;

{ TTipoDeRecurso }
function TTipoDeRecurso.GetCategoriaDeMateriaPrima: TCategoriaDeMateriaPrima;
begin
  if not assigned(FCategoriaDeMateriaPrima) then
    GetObject(TCategoriaDeMateriaPrima, FCategoriaDeMateriaPrima, FCategoriaDeMateriaPrimaID);
  Result := TCategoriaDeMateriaPrima(FCategoriaDeMateriaPrima);
end;

constructor TTipoDeRecurso.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := aplicacion.DMProvider.GetGlobalDM(TTipoDeRecursoDM);
end;

procedure TTipoDeRecurso.SetCategoriaDeMateriaPrimaID(const Value: TObjectID);
begin
  if (Value <> FCategoriaDeMateriaPrimaID) and assigned(FCategoriaDeMateriaPrima) then
    FreeAndNil(FCategoriaDeMateriaPrima);

  FCategoriaDeMateriaPrimaID := Value;
end;

{ TTipoDeRecursoDM }
class function TTipoDeRecursoDM.TableName: string;
begin
  Result := 'tiposderecurso';
end;

class function TTipoDeRecursoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeRecursoDM.ID_FieldName: string;
begin
  Result := 'TipoDeRecursoID';
end;

procedure TTipoDeRecursoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeRecurso(PDObject) do
  begin
    StringField[_Descripcion]           := Descripcion;
    BooleanField[_EsInactivo]           := FEsInactivo;
    IDField[_CategoriaDeMateriaPrimaID] := FCategoriaDeMateriaPrimaID;
  end;
end;

procedure TTipoDeRecursoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeRecurso(PDObject) do
  begin
    Fdescripcion                := StringField[_Descripcion];
    FEsInactivo                 := BooleanField[_EsInactivo];
    FCategoriaDeMateriaPrimaID  := IDField[_CategoriaDeMateriaPrimaID];
  end;
end;

{ TTipoDeRecursoList }
function TTipoDeRecursoList.GetActual: TTipoDeRecurso;
begin
  Result := TTipoDeRecurso(CurrentObject);
end;

function TTipoDeRecursoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeRecurso.Create;
end;

constructor TTipoDeRecursoList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TTipoDeRecurso, TTipoDeRecursoDM.CreateAll(False, '', _SoloActivos));
end;

{ TCalibreDeControlResponsableTecnico }
constructor TCalibreDeControlResponsableTecnico.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCalibreDeControlResponsableTecnicoDM);
  FfechadeVigencia := null;
end;

function TCalibreDeControlResponsableTecnico.GetCalibreDeControl
  : TCalibreDeControl;
begin
  if not assigned(FCalibreDeControl) then
    GetObject(TCalibreDeControl, FCalibreDeControl, FCalibreDeControlID);

  Result := TCalibreDeControl(FCalibreDeControl);
end;

function TCalibreDeControlResponsableTecnico.GetResponsableTecnico
  : TResponsableTecnico;
begin
  if not assigned(FResponsableTecnico) then
    GetObject(TResponsableTecnico, FResponsableTecnico, FResponsableTecnicoID);

  Result := TResponsableTecnico(FResponsableTecnico);
end;

procedure TCalibreDeControlResponsableTecnico.SetCalibreDeControlID
  (Value: TObjectID);
begin
  if (Value <> FCalibreDeControlID) and assigned(FCalibreDeControl) then
    FreeAndNil(FCalibreDeControl);

  FCalibreDeControlID := Value;

end;

procedure TCalibreDeControlResponsableTecnico.SetResponsableTecnicoID
  (const Value: TObjectID);
begin
  if (Value <> FResponsableTecnicoID) and assigned(FResponsableTecnico) then
    FreeAndNil(FResponsableTecnico);

  FResponsableTecnicoID := Value;
end;

{ TCalibreDeControlResponsableTecnicoDM }
class function TCalibreDeControlResponsableTecnicoDM.TableName: string;
begin
  Result := 'CalibreDeControlResponsablesTecnicos';
end;

class function TCalibreDeControlResponsableTecnicoDM.ID_FieldName: string;
begin
  Result := 'CalibreDeControlResponsableTecnicoID';
end;

procedure TCalibreDeControlResponsableTecnicoDM.PopulateFields
  (PDObject: TPDObject);
begin
  with TCalibreDeControlResponsableTecnico(PDObject) do
  begin
    IDField[_CalibreDeControlID] := FCalibreDeControlID;
    DateField[_fechadeVigencia] := FfechadeVigencia;
    IDField[_ResponsableTecnicoID] := ResponsableTecnicoID;
  end;
end;

procedure TCalibreDeControlResponsableTecnicoDM.PopulateObject
  (PDObject: TPDObject);
begin
  with TCalibreDeControlResponsableTecnico(PDObject) do
  begin
    FCalibreDeControlID := IDField[_CalibreDeControlID];
    FfechadeVigencia := DateField[_fechadeVigencia];
    FResponsableTecnicoID := IDField[_ResponsableTecnicoID]; ;
  end;
end;

{ TCalibreDeControlResponsableTecnicoList }
function TCalibreDeControlResponsableTecnicoList.GetActual
  : TCalibreDeControlResponsableTecnico;
begin
  Result := TCalibreDeControlResponsableTecnico(CurrentObject);
end;

constructor TCalibreDeControlResponsableTecnicoList.CreateByCalibreDeControl(_C: TCalibreDeControl);
  Function WhereString: String;
  begin
    result := '(' +TCalibreDeControlResponsableTecnicoDM._CalibreDeControlID + ' = ' + IntToStr(_C.ID) + ')';
  end;
begin
  inherited Create(TCalibreDeControlResponsableTecnico, TCalibreDeControlResponsableTecnicoDM.CreateAll( False, WhereString, False, TCalibreDeControlResponsableTecnicoDM._fechadeVigencia));
end;

function TCalibreDeControlResponsableTecnicoList.CreateNewObject: TPDObject;
begin
  Result := TCalibreDeControlResponsableTecnico.Create;
end;

constructor TCalibreDeControlResponsableTecnicoList.CreateAll;
begin
  inherited Create(TCalibreDeControlResponsableTecnico, TCalibreDeControlResponsableTecnicoDM.CreateAll(False));
end;

{ TResponsableTecnico }
function TResponsableTecnico.GetCentroDeCosto: TCentroDeCosto;
begin
  if not assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto, FCentroDeCosto, FCentroDeCostoID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

function TResponsableTecnico.GetDescriptibleAbreviadoListClass;
begin
  Result := TResponsableTecnicoList;
end;

procedure TResponsableTecnico.SetCentroDeCostoID(const Value: TObjectID);
begin
  if (Value <> FCentroDeCostoID) and assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);

  FCentroDeCostoID := Value;
end;

constructor TResponsableTecnico.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TResponsableTecnicoDM);
  FCentroDeCostoID := NullID;
  FCentroDeCosto := Nil;
end;

{ TResponsableTecnicoDM }
class function TResponsableTecnicoDM.TableName: string;
begin
  Result := 'ResponsablesTecnicos';
end;

class function TResponsableTecnicoDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TResponsableTecnicoDM.ID_FieldName: string;
begin
  Result := 'ResponsableTecnicoID';
end;

procedure TResponsableTecnicoDM.PopulateFields(PDObject: TPDObject);
begin
  with TResponsableTecnico(PDObject) do
  begin
    StringField[_Descripcion]      := Descripcion;
    StringField[_Codigo]           := Codigo;
    IntegerField[_CentroDeCostoID] := CentroDeCostoID;
    BooleanField[_EsInactivo]      := EsInactivo;
  end;
end;

procedure TResponsableTecnicoDM.PopulateObject(PDObject: TPDObject);
begin
  with TResponsableTecnico(PDObject) do
  begin
    Fdescripcion     := StringField[_Descripcion];
    Fcodigo          := StringField[_Codigo];
    FCentroDeCostoID := IntegerField[_CentroDeCostoID];
    EsInactivo       := BooleanField[_EsInactivo];
  end;
end;

{ TResponsableTecnicoList }
function TResponsableTecnicoList.GetActual: TResponsableTecnico;
begin
  Result := TResponsableTecnico(CurrentObject);
end;

function TResponsableTecnicoList.CreateNewObject: TPDObject;
begin
  Result := TResponsableTecnico.Create;
end;

constructor TResponsableTecnicoList.CreateAll;
begin
  inherited Create(TResponsableTecnico, TResponsableTecnicoDM.CreateAll(False));
end;

constructor TResponsableTecnicoList.CreateByCentroDeCosto(_CC: TCentroDeCosto);
  Function WhereString : String;
  begin
    Result := TResponsableTecnicoDM._CentroDeCostoID + ' = ' + IntToStr(_CC.ID);
  end;
begin
  inherited Create(TResponsableTecnico, TResponsableTecnicoDM.CreateAll(False, WhereString));
end;

{ TCalibreDeControlPeriodoDeCalibracionNovedad }
constructor TCalibreDeControlPeriodoDeCalibracionNovedad.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCalibreDeControlPeriodoDeCalibracionNovedadDM);
  FCalibreDeControlPeriodoDeCalibracionID := null;
  FFechaDeNovedad := null;
  FResultado := null;
  FCertificadoNumero := null;
  FDaniosReparaciones := null;
  FObservaciones := null;
end;

function TCalibreDeControlPeriodoDeCalibracionNovedad.GetResponsableTecnico : TResponsableTecnico;
begin
  if not assigned(FResponsableTecnico) then
    GetObject(TResponsableTecnico, FResponsableTecnico, FResponsableTecnicoID);
  Result := TResponsableTecnico(FResponsableTecnico);
end;

procedure TCalibreDeControlPeriodoDeCalibracionNovedad.SetResponsableTecnicoID(const Value: TEntero);
begin
  if (FResponsableTecnicoID <> Value) and assigned(FResponsableTecnico) then
    FreeAndNil(FResponsableTecnico);
  FResponsableTecnicoID := Value;
end;

{ TCalibreDeControlPeriodoDeCalibracionNovedadDM }
class function TCalibreDeControlPeriodoDeCalibracionNovedadDM.TableName: string;
begin
  Result := 'calibredecontrolperiododecalibracionnovedades';
end;

class function TCalibreDeControlPeriodoDeCalibracionNovedadDM.ID_FieldName : string;
begin
  Result := 'CalibreDeControlPeriodoDeCalibracionNovedadID';
end;

procedure TCalibreDeControlPeriodoDeCalibracionNovedadDM.PopulateFields(PDObject: TPDObject);
begin
  with TCalibreDeControlPeriodoDeCalibracionNovedad(PDObject) do
  begin
    IDField[_CalibreDeControlPeriodoDeCalibracionID] :=  FCalibreDeControlPeriodoDeCalibracionID;
    DateField[_FechaDeNovedad] := FFechaDeNovedad;
    StringField[_Resultado] := Resultado;
    IDField[_ResponsableTecnicoID] := FResponsableTecnicoID;
    StringField[_CertificadoNumero] := CertificadoNumero;
    StringField[_DaniosReparaciones] := DaniosReparaciones;
    StringField[_Observaciones] := Observaciones;
  end;
end;

procedure TCalibreDeControlPeriodoDeCalibracionNovedadDM.PopulateObject(PDObject: TPDObject);
begin
  with TCalibreDeControlPeriodoDeCalibracionNovedad(PDObject) do
  begin
    FCalibreDeControlPeriodoDeCalibracionID := IDField[_CalibreDeControlPeriodoDeCalibracionID];
    FFechaDeNovedad := DateField[_FechaDeNovedad];
    FResultado := StringField[_Resultado];
    FResponsableTecnicoID := IntegerField[_ResponsableTecnicoID];
    FCertificadoNumero := StringField[_CertificadoNumero];
    FDaniosReparaciones := StringField[_DaniosReparaciones];
    FObservaciones := StringField[_Observaciones];
  end;
end;

{ TCalibreDeControlPeriodoDeCalibracionNovedadList }
function TCalibreDeControlPeriodoDeCalibracionNovedadList.GetActual : TCalibreDeControlPeriodoDeCalibracionNovedad;
begin
  Result := TCalibreDeControlPeriodoDeCalibracionNovedad(CurrentObject);
end;

constructor TCalibreDeControlPeriodoDeCalibracionNovedadList.CreateByPeriodoDeCalibracion(_CCPC: TCalibreDeControlPeriodoDeCalibracion);
  Function WhereString : String;
  begin
    Result := TCalibreDeControlPeriodoDeCalibracionNovedadDM._CalibreDeControlPeriodoDeCalibracionID + ' = ' + IntToStr(_CCPC.ID);
  end;
begin
  inherited Create(TCalibreDeControlPeriodoDeCalibracionNovedad, TCalibreDeControlPeriodoDeCalibracionNovedadDM.CreateAll(False, WhereString));
end;

function TCalibreDeControlPeriodoDeCalibracionNovedadList.CreateNewObject : TPDObject;
begin
  Result := TCalibreDeControlPeriodoDeCalibracionNovedad.Create;
end;

constructor TCalibreDeControlPeriodoDeCalibracionNovedadList.CreateAll;
begin
  inherited Create(TCalibreDeControlPeriodoDeCalibracionNovedad, TCalibreDeControlPeriodoDeCalibracionNovedadDM.CreateAll(False));
end;

{ TCalibreDeControlPeriodoDeCalibracion }
constructor TCalibreDeControlPeriodoDeCalibracion.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TCalibreDeControlPeriodoDeCalibracionDM);
  FCalibreDeControlID := null;
  FFecha := null;
  FMesesDeVigencia := null;
  TmpCalibreDeControl := Nil;
end;

function TCalibreDeControlPeriodoDeCalibracion.GetNovedades : TCalibreDeControlPeriodoDeCalibracionNovedadList;
begin
  if not assigned(FNovedades) then
    GetList(TPDList(FNovedades), TPDList( TCalibreDeControlPeriodoDeCalibracionNovedadList.CreateByPeriodoDeCalibracion(self)));
  Result := TCalibreDeControlPeriodoDeCalibracionNovedadList(FNovedades);
end;

{ TCalibreDeControlPeriodoDeCalibracionDM }
class function TCalibreDeControlPeriodoDeCalibracionDM.TableName: string;
begin
  Result := 'calibredecontrolperiodosdecalibracion';
end;

class function TCalibreDeControlPeriodoDeCalibracionDM.ID_FieldName: string;
begin
  Result := 'CalibreDeControlPeriodoDeCalibracionID';
end;

procedure TCalibreDeControlPeriodoDeCalibracionDM.PopulateFields(PDObject: TPDObject);
begin
  with TCalibreDeControlPeriodoDeCalibracion(PDObject) do
  begin
    IntegerField[_CalibreDeControlID] := FCalibreDeControlID;
    DateField[_Fecha] := FFecha;
    IntegerField[_MesesDeVigencia] := FMesesDeVigencia;
  end;
end;

procedure TCalibreDeControlPeriodoDeCalibracionDM.PopulateObject(PDObject: TPDObject);
begin
  with TCalibreDeControlPeriodoDeCalibracion(PDObject) do
  begin
    FCalibreDeControlID := IntegerField[_CalibreDeControlID];
    FFecha := DateField[_Fecha];
    FMesesDeVigencia := IntegerField[_MesesDeVigencia];
  end;
end;

{ TCalibreDeControlPeriodoDeCalibracionList }
function TCalibreDeControlPeriodoDeCalibracionList.GetActual: TCalibreDeControlPeriodoDeCalibracion;
begin
  Result := TCalibreDeControlPeriodoDeCalibracion(CurrentObject);
end;

constructor TCalibreDeControlPeriodoDeCalibracionList.CreateByCalibreDeControl(_C: TCalibreDeControl);
  Function WhereString: String;
  begin
    Result := '('+TCalibreDeControlPeriodoDeCalibracionDM._CalibreDeControlID + ' = ' + IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TCalibreDeControlPeriodoDeCalibracion,TCalibreDeControlPeriodoDeCalibracionDM.CreateAll( False, WhereString));
end;

function TCalibreDeControlPeriodoDeCalibracionList.CreateNewObject: TPDObject;
begin
  Result := TCalibreDeControlPeriodoDeCalibracion.Create;
end;

constructor TCalibreDeControlPeriodoDeCalibracionList.CreateAll;
begin
  inherited Create(TCalibreDeControlPeriodoDeCalibracion, TCalibreDeControlPeriodoDeCalibracionDM.CreateAll(False));
end;

{ TComentario }
constructor TComentario.Create;
begin
  inherited;
  DMObject := aplicacion.DMProvider.GetGlobalDM(TComentarioDM);
  FClasePadre := null;
  FFechaHora := null;
  FAsunto := null;
  FComentario := null;
end;

procedure TComentario.SetUsuarioID(Value: TObjectID);
begin
  if (Value <> FUsuarioID) and assigned(FUsuario) then
    FreeAndNil(FUsuario);
  FUsuarioID := Value;
end;

function TComentario.GetUsuario: TUsuario;
begin
  if not assigned(FUsuario) then
    GetObject(TUsuario, FUsuario, UsuarioID);
  Result := TUsuario(FUsuario);
end;

{ TComentarioDM }
class function TComentarioDM.TableName: string;
begin
  Result := 'Comentarios';
end;

class function TComentarioDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForComentarios;
end;

class function TComentarioDM.ID_FieldName: string;
begin
  Result := 'ComentarioID';
end;

procedure TComentarioDM.PopulateFields(PDObject: TPDObject);
begin
  with TComentario(PDObject) do
  begin
    StringField[_ClasePadre] := ClasePadre;
    IDField[_PadreID] := FPadreID;
    IDField[_UsuarioID] := FUsuarioID;
    DateTimeField[_FechaHora] := FFechaHora;
    StringField[_Asunto] := Asunto;
    StringField[_Comentario] := Comentario;
  end;
end;

procedure TComentarioDM.PopulateObject(PDObject: TPDObject);
begin
  with TComentario(PDObject) do
  begin
    FClasePadre := StringField[_ClasePadre];
    FPadreID := IDField[_PadreID];
    FUsuarioID := IDField[_UsuarioID];
    FFechaHora := DateTimeField[_FechaHora];
    FAsunto := StringField[_Asunto];
    FComentario := StringField[_Comentario];
  end;
end;

{ TComentarioList }
function TComentarioList.GetActual: TComentario;
begin
  Result := TComentario(CurrentObject);
end;

constructor TComentarioList.CreateByPadre(_Padre: TPDObject);
  Function WhereString : String;
  begin
    Result := TComentarioDM._ClasePadre + ' = ' + QuotedStr(_Padre.DMClass.classname) + ' and ' + TComentarioDM._PadreID + ' = ' + IntToStr(_Padre.ID);
  end;
begin
  inherited Create(TComentario, TComentarioDM.CreateAll(False, WhereString));
end;

function TComentarioList.CreateNewObject: TPDObject;
begin
  Result := TComentario.Create;
end;

constructor TComentarioList.CreateAll;
begin
  inherited Create(TComentario, TComentarioDM.CreateAll(False));
end;

 { TListadePrecio }
function TListadePrecio.GetDescriptibleAbreviadoListClass;
begin
  Result := TListadePrecioList;
end;
constructor TListadePrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TListadePrecioDM);
  SaveSqlLog := True;
  FFechaCotizacionConversionAOficial := null;
  FCotizacionConversionAOficial      := null;
  FesInactivo                        := False;
end;

procedure TListadePrecio.SetmonedaID(Value : TObjectID);
begin
  if (Value<>FmonedaID) and Assigned(Fmoneda) then
    FreeAndNil(Fmoneda);

  FmonedaID := Value;

end;

function TListadePrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);

  Result := TMoneda(FMoneda);
end;

function TListadePrecio.GetPreciosArticulos: TArticuloPrecioList;
begin
  if not assigned(FPreciosArticulos) then
    GetList(TPDList(FPreciosArticulos), TPDList(TArticuloPrecioList.CreateByListaDePrecio(self)));

  Result := FPreciosArticulos;
end;

function TListadePrecio.GetPreciosComplejidadesDeDesarrollo: TComplejidadDeDesarrolloPrecioList;
begin
  if not assigned(FPreciosComplejidadesDeDesarrollo) then
    GetList(TPDList(FPreciosComplejidadesDeDesarrollo), TPDList(TComplejidadDeDesarrolloPrecioList.CreateByListaDePrecio(self)));
  Result := FPreciosComplejidadesDeDesarrollo;
end;

function TListadePrecio.GetPreciosCunios: TCunioPrecioDeListaList;
begin
  if not assigned(FPreciosCunios) then
    GetList(TPDList(FPreciosCunios), TPDList(TCunioPrecioDeListaList.CreateByListaDePrecio(self)));
  Result := FPreciosCunios;
end;

function TListadePrecio.GetPreciosAdicionalesCunios: TCunioPrecioList;
begin
  if not assigned(FPreciosAdicionalesCunios) then
    GetList(TPDList(FPreciosAdicionalesCunios), TPDList(TCunioPrecioList.CreateByListaDePrecio(self)));
  Result := FPreciosAdicionalesCunios;
end;

function TListadePrecio.GetPreciosDesarrollos: TDesarrolloPrecioList;
begin
  if not assigned(FPreciosDesarrollos) then
    GetList(TPDList(FPreciosDesarrollos), TPDList(TDesarrolloPrecioList.CreateByListaDePrecio(self)));
  Result := FPreciosDesarrollos;
end;

function TListadePrecio.GetPreciosEspecificaciones: TKolorPrecioList;
begin
  if not assigned(FPreciosEspecificaciones) then
    GetList(TPDList(FPreciosEspecificaciones), TPDList(TKolorPrecioList.CreateByListaDePrecio(self)));

  Result := FPreciosEspecificaciones;
end;

function TListadePrecio.GetPreciosProcesos: TProcesoPrecioList;
begin
  if not assigned(FPreciosProcesos) then
    GetList(TPDList(FPreciosProcesos), TPDList(TProcesoPrecioList.CreateByListaDePrecio(self)));

  Result := FPreciosProcesos;
end;

function TListadePrecio.GetPreciosServicios: TServicioPrecioList;
begin
  if not assigned(FPreciosServicios) then
    GetList(TPDList(FPreciosServicios), TPDList(TServicioPrecioList.CreateByListaDePrecio(self)));

  Result := FPreciosServicios;
end;

function TListadePrecio.GetPreciosTerminaciones: TTerminacionPrecioList;
begin
  if not assigned(FPreciosTerminaciones) then
    GetList(TPDList(FPreciosTerminaciones), TPDList(TTerminacionPrecioList.CreateByListaDePrecio(self)));

  Result := FPreciosTerminaciones;
end;

{ TListadePrecioDM }
class function TListadePrecioDM.TableName : string;
begin
  Result := 'ListasDePrecio';
end;

class function TListadePrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TListadePrecioDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TListadePrecioDM.ID_FieldName : string;
begin
  Result := 'ListadePrecioID';
end;

procedure TListadePrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TListadePrecio(PDObject) do
    begin
      StringField[_Codigo]                          := Codigo;
      StringField[_Descripcion]                     := Descripcion;
      IDField[_monedaID]                            := MonedaID;
      DateField[_FechaCotizacionConversionAOficial] := FechaCotizacionConversionAOficial;
      FloatField[_CotizacionConversionAOficial]     := CotizacionConversionAOficial;
      BooleanField[_EsInactivo]                     := FEsInactivo;
    end;
end;


procedure TListadePrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TListadePrecio(PDObject) do
    begin
      FCodigo                            := StringField[_Codigo];
      FDescripcion                       := StringField[_Descripcion];
      FMonedaID                          := IDField[_monedaID];
      FFechaCotizacionConversionAOficial := DateField[_FechaCotizacionConversionAOficial];
      FCotizacionConversionAOficial      := FloatField[_CotizacionConversionAOficial];
      FesInactivo                        := BooleanField[_EsInactivo];
    end;
end;

 { TListadePrecioList }
function TListadePrecioList.GetActual : TListadePrecio;
begin
  Result := TListadePrecio(CurrentObject);
end;

function TListadePrecioList.CreateNewObject: TPDObject;
begin
  Result := TListadePrecio.Create;
end;

constructor TListadePrecioList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TListadePrecio,TListadePrecioDM.CreateAll(False, '',_Soloactivos));
end;

 { TArticuloPrecio }
constructor TArticuloPrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TArticuloPrecioDM);
  SaveSqlLog := True;
  FPrecio := 0;
end;

function TArticuloPrecio.Save: Boolean;
begin
  Result := inherited Save;
end;

procedure TArticuloPrecio.SetarticuloID(Value : TObjectID);
begin
  if (Value<>FarticuloID) then
    begin
      if Assigned(Farticulo) then
        FreeAndNil(Farticulo);
      FarticuloID := Value;
      fArticuloCodigo      := articulo.codigo;
      fArticuloDescripcion := articulo.Descripcion;
    end;
end;

function TArticuloPrecio.Getarticulo : TArticulo;
begin
  if not assigned(Farticulo) then
    GetObject(TArticulo,Farticulo,articuloID);

  Result := TArticulo(Farticulo);
end;

procedure TArticuloPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TArticuloPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TArticuloPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

procedure TArticuloPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TArticuloPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);

  Result := TMoneda(FMoneda);
end;

function TArticuloPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TArticuloPrecioDM }
class function TArticuloPrecioDM.TableName : string;
begin
  Result := 'articuloprecios';
end;


class function TArticuloPrecioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TArticuloDM.TableName      + '.' +  TArticuloDM._Codigo      + ' as ' + TArticuloPrecioDM._CCArticuloCodigo       + ', ' + TArticuloDM.TableName      + '.' +  TArticuloDM._Descripcion      + ' as ' + TArticuloPrecioDM._CCArticuloDescripcion + ', '  ;
    Result := Result +                      TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TArticuloPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TArticuloPrecioDM._CCListaDePrecioDescripcion + ', ' ;
    Result := Result +                      TMonedaDM.TableName        + '.' +  TMonedaDM._Codigo        + ' as ' + TArticuloPrecioDM._CCMonedaCodigo         + ', ' + TMonedaDM.TableName        + '.' +  TMonedaDM._Descripcion        + ' as ' + TArticuloPrecioDM._CCMonedaDescripcion  ;
  end;
  Function LeftJoinString : String;
  begin
    Result := Result + ' LEFT JOIN ' + TArticuloDM.TableName + ' ON (' + TableName + '.' + _articuloID + '=' + TArticuloDM.TableName + '.' + TArticuloDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TArticuloPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TArticuloPrecioDM.ID_FieldName : string;
begin
  Result := 'ArticuloPrecioID';
end;

procedure TArticuloPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloPrecio(PDObject) do
    begin
      IDField[_articuloID]              := FArticuloID;
      IDField[_ListaDePrecioID]         := FListaDePrecioID;
      FloatField[_Precio]               := FPrecio;
      IDField[_MonedaID]                := FMonedaID;
      BooleanField[_ExigePrecioEnCunio] := FExigePrecioEnCunio;
    end;
end;

procedure TArticuloPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloPrecio(PDObject) do
    begin
      FArticuloID               := IDField[_articuloID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      FExigePrecioEnCunio       := BooleanField[_ExigePrecioEnCunio];
      // del cc
      fArticuloCodigo           := StringField[_CCArticuloCodigo];
      fArticuloDescripcion      := StringField[_CCArticuloDescripcion];
      fListaDePrecioCodigo      := StringField[_CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[_CCListaDePrecioDescripcion];
      fMonedaCodigo             := StringField[_CCMonedaCodigo];
      fMonedaDescripcion        := StringField[_CCMonedaDescripcion];
    end;
end;

 { TArticuloPrecioList }
function TArticuloPrecioList.GetActual : TArticuloPrecio;
begin
  Result := TArticuloPrecio(CurrentObject);
end;

constructor TArticuloPrecioList.CreateByArticulo(_A: TArticulo);
  Function WhereString: String;
  begin
    Result := '(' + TArticuloPrecioDM.TableName+'.'+ TArticuloPrecioDM._articuloID + '=' +  IntToStr(_A.ID)+')';
  end;
begin
  inherited Create(TArticuloPrecio, TArticuloPrecioDM.CreateAll( False, WhereString));
end;

constructor TArticuloPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := '(' + TArticuloPrecioDM.TableName+'.'+ TArticuloPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  end;
begin
  inherited Create(TArticuloPrecio, TArticuloPrecioDM.CreateAll( False, WhereString));
end;

constructor TArticuloPrecioList.CreateByListaDePrecioAndArticulo(_LP: TListaDePrecio; _A: TArticulo);
  Function WhereString: String;
  begin
    Result := '(' + TArticuloPrecioDM.TableName+'.'+ TArticuloPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID);
    Result := Result + ') and (' + TArticuloPrecioDM.TableName+'.'+ TArticuloPrecioDM._articuloID + '=' +  IntToStr(_A.ID)+')';
  end;
begin
  inherited Create(TArticuloPrecio, TArticuloPrecioDM.CreateAll( False, WhereString));
end;

constructor TArticuloPrecioList.CreateEmpty;
begin
  inherited Create(TArticuloPrecio, TArticuloPrecioDM.CreateEmpty );
end;

function TArticuloPrecioList.CreateNewObject: TPDObject;
begin
  Result := TArticuloPrecio.Create;
end;

function TArticuloPrecioList.FindArticulo(_A: TArticulo): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.articuloID = _A.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TArticuloPrecioList.FindCodigoArticulo(_CA: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.articuloCodigo = _CA );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TArticuloPrecioList.CreateAll;
begin
  inherited Create(TArticuloPrecio,TArticuloPrecioDM.CreateAll( false));
end;

 { TTerminacionPrecio }
constructor TTerminacionPrecio.Create;
begin
  inherited;
  SaveSqlLog  := True;
  DMObject    := Aplicacion.DMPRovider.GetGlobalDM(TTerminacionPrecioDM);
  FPrecio     := null;
end;

procedure TTerminacionPrecio.SetTerminacionID(Value : TObjectID);
begin
  if (Value<>FTerminacionID) then
    begin
      If Assigned(FTerminacion) then
        FreeAndNil(FTerminacion);
      FTerminacionID := Value;
      fTerminacionCodigo      := Terminacion.codigo;
      fTerminacionDescripcion := Terminacion.Descripcion;
    end;

end;

function TTerminacionPrecio.GetTerminacion : TTerminacion;
begin
  if not assigned(FTerminacion) then
    GetObject(TTerminacion,FTerminacion,TerminacionID);

  Result := TTerminacion(FTerminacion);
end;

procedure TTerminacionPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TTerminacionPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TTerminacionPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

procedure TTerminacionPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TTerminacionPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  Result := TMoneda(FMoneda);
end;

function TTerminacionPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TTerminacionPrecioDM }
class function TTerminacionPrecioDM.TableName : string;
begin
  Result := 'terminacionprecios';
end;


class function TTerminacionPrecioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TTerminacionDM.TableName      + '.' +  TTerminacionDM._Codigo      + ' as ' + TTerminacionPrecioDM._CCTerminacionCodigo       + ', ' + TTerminacionDM.TableName      + '.' +  TTerminacionDM._Descripcion      + ' as ' + TTerminacionPrecioDM._CCTerminacionDescripcion + ', '  ;
    Result := Result +  TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TTerminacionPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TTerminacionPrecioDM._CCListaDePrecioDescripcion + ', ' ;
    Result := Result +  TMonedaDM.TableName        + '.' +  TMonedaDM._Codigo        + ' as ' + TTerminacionPrecioDM._CCMonedaCodigo         + ', ' + TMonedaDM.TableName        + '.' +  TMonedaDM._Descripcion        + ' as ' + TTerminacionPrecioDM._CCMonedaDescripcion + ', '   ;
    Result := Result +  TGrupoDeTerminacionEspecialDM.TableName + '.' + TGrupoDeTerminacionEspecialDM._Descripcion  + ' as ' + TTerminacionPrecioDM._CCGrupoDeTeminacionEspecial ;
  end;
  Function LeftJoinString : String;
  begin
    Result :=           'LEFT JOIN ' + TTerminacionDM.TableName + ' ON (' + TableName + '.' + _TerminacionID + '=' + TTerminacionDM.TableName + '.' + TTerminacionDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TGrupoDeTerminacionEspecialDM.TableName + ' ON (' + TTerminacionDM.TableName + '.' + TTerminacionDM._GrupoDeTerminacionEspecialID + '=' + TGrupoDeTerminacionEspecialDM.TableName + '.' + TGrupoDeTerminacionEspecialDM.ID_FieldName + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TTerminacionPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TTerminacionPrecioDM.ID_FieldName : string;
begin
  Result := 'TerminacionPrecioID';
end;

procedure TTerminacionPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionPrecio(PDObject) do
    begin
      IDField[_TerminacionID]          := FTerminacionID;
      IDField[_ListaDePrecioID]        := FListaDePrecioID;
      FloatField[_Precio]              := FPrecio;
      IDField[_MonedaID]               := FMonedaID;
      BooleanField[_ExigePrecioEnCunio]:= FExigePrecioEnCunio;
    end;
end;


procedure TTerminacionPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionPrecio(PDObject) do
    begin
      FTerminacionID            := IDField[_TerminacionID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      FExigePrecioEnCunio       := BooleanField[_ExigePrecioEnCunio];
      // del cc
      fListaDePrecioCodigo      := StringField[ _CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[ _CCListaDePrecioDescripcion];
      FTerminacionCodigo        := StringField[ _CCTerminacionCodigo];
      FTerminacionDescripcion   := StringField[ _CCTerminacionDescripcion];
      fMonedaCodigo             := StringField[ _CCMonedaCodigo];
      fMonedaDescripcion        := StringField[ _CCMonedaDescripcion];
      fGrupoDeTeminacionEspecial:= StringField[ _CCGrupoDeTeminacionEspecial];
    end;
end;

 { TTerminacionPrecioList }
function TTerminacionPrecioList.GetActual : TTerminacionPrecio;
begin
  Result := TTerminacionPrecio(CurrentObject);
end;

constructor TTerminacionPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := '(' + TTerminacionPrecioDM.TableName+'.'+ TTerminacionPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  end;
begin
  inherited Create(TTerminacionPrecio, TTerminacionPrecioDM.CreateAll( false, WhereString));
end;

constructor TTerminacionPrecioList.CreateByListaDePrecioAndTerminacion(_LP: TListaDePrecio; _T: TTerminacion);
  Function WhereString: String;
  begin
    Result := '(' + TTerminacionPrecioDM.TableName+'.'+ TTerminacionPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (';
    Result := Result + TTerminacionPrecioDM.TableName+'.'+ TTerminacionPrecioDM._TerminacionID + '=' +  IntToStr(_T.ID)+')';
  end;
begin
  inherited Create(TTerminacionPrecio, TTerminacionPrecioDM.CreateAll( false, WhereString));
end;

constructor TTerminacionPrecioList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString: String;
  begin
    Result := '(' + TTerminacionPrecioDM.TableName+'.'+ TTerminacionPrecioDM._TerminacionID + '=' +  IntToStr(_T.ID)+')';
  end;
begin
  inherited Create(TTerminacionPrecio, TTerminacionPrecioDM.CreateAll( false, WhereString));
end;

constructor TTerminacionPrecioList.CreateEmpty;
begin
  inherited Create(TTerminacionPrecio, TTerminacionPrecioDM.CreateEmpty);
end;

function TTerminacionPrecioList.CreateNewObject: TPDObject;
begin
  Result := TTerminacionPrecio.Create;
end;

function TTerminacionPrecioList.FindCodigoTerminacion(_CT: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.TerminacionCodigo = _CT );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TTerminacionPrecioList.FindTerminacion(_T: TTerminacion): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.TerminacionID = _T.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TTerminacionPrecioList.CreateAll;
begin
  inherited Create(TTerminacionPrecio, TTerminacionPrecioDM.CreateAll( False ));
end;


 { TProcesoPrecio }
constructor TProcesoPrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TProcesoPrecioDM);
  SaveSqlLog := True;
  FPrecio := null;
end;

procedure TProcesoPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

procedure TProcesoPrecio.SetProcesoID(Value : TObjectID);
begin
  if (Value<>FProcesoID)  then
    begin
      if Assigned(FProceso) then
        FreeAndNil(FProceso);
      FProcesoID          := Value;
      fProcesoCodigo      := Proceso.codigo;
      fProcesoDescripcion := Proceso.Descripcion;
    end;

end;

function TProcesoPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

function TProcesoPrecio.GetProceso : TProceso;
begin
  if not assigned(FProceso) then
    GetObject(TProceso,FProceso,ProcesoID);

  Result := TProceso(FProceso);
end;

procedure TProcesoPrecio.SetFamiliaDeArticuloID(const Value: TObjectID);
begin
  if (Value<>FFamiliaDeArticuloID) and Assigned(FFamiliaDeArticulo) then
    FreeAndNil(FFamiliaDeArticulo);
  FFamiliaDeArticuloID := Value;
end;

procedure TProcesoPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TProcesoPrecio.GetFamiliaDeArticulo: TFamiliaDeArticulo;
begin
  if not Assigned(FFamiliaDeArticulo) then
    GetObject(TFamiliaDeArticulo,FFamiliaDeArticulo,FamiliaDeArticuloID);
  Result := TFamiliaDeArticulo(FFamiliaDeArticulo);
end;

function TProcesoPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);
  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TProcesoPrecio.SetMaterialID(const Value: TObjectID);
begin
  if (Value<>FMaterialID) and Assigned(FMaterial) then
    FreeAndNil(FMaterial);
  FMaterialID := Value;
end;

procedure TProcesoPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

function TProcesoPrecio.GetMaterial: TMaterial;
begin
  if not Assigned(FMaterial) then
    GetObject(TMaterial,FMaterial,MaterialID);
  Result := TMaterial(FMaterial);
end;

function TProcesoPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  Result := TMoneda(FMoneda);
end;
 { TProcesoPrecioDM }
class function TProcesoPrecioDM.TableName : string;
begin
  Result := 'procesoprecios';
end;


class function TProcesoPrecioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TProcesoDM.TableName       + '.' +  TProcesoDM._Codigo      + ' as ' + TProcesoPrecioDM._CCProcesoCodigo         + ', ' + TProcesoDM.TableName       + '.' +  TProcesoDM._Descripcion       + ' as ' + TProcesoPrecioDM._CCProcesoDescripcion       +', ' ;
    Result := Result +             TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TProcesoPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TProcesoPrecioDM._CCListaDePrecioDescripcion +', ' ;
    Result := Result +             TMonedaDM.TableName        + '.' +  TMonedaDM._Codigo        + ' as ' + TProcesoPrecioDM._CCMonedaCodigo         + ', ' + TMonedaDM.TableName        + '.' +  TMonedaDM._Descripcion        + ' as ' + TProcesoPrecioDM._CCMonedaDescripcion        +', ' ;
    Result := Result +             TFamiliaDeArticuloDM.TableName  + '.' +  TFamiliaDeArticuloDM._Codigo  + ' as ' + TProcesoPrecioDM._CCFamiliaCodigo  + ', ' + TFamiliaDeArticuloDM.TableName  + '.' +  TFamiliaDeArticuloDM._Descripcion  + ' as ' + TProcesoPrecioDM._CCFamiliaDescripcion  +', ' ;
    Result := Result +             TMaterialDM.TableName + '.' +  TMaterialDM._Codigo + ' as ' + TProcesoPrecioDM._CCMaterialCodigo + ', ' + TMaterialDM.TableName + '.' +  TMaterialDM._Descripcion + ' as ' + TProcesoPrecioDM._CCMaterialDescripcion;

  end;

  Function LeftJoinString : String;
  begin
    Result := Result + ' LEFT JOIN ' + TProcesoDM.TableName       + ' ON (' + TableName + '.' + _ProcesoID       + '=' + TProcesoDM.TableName + '.' + TProcesoDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName        + ' ON (' + TableName + '.' + _MonedaID        + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TMaterialDM.TableName      + ' ON (' + TableName + '.' + _MaterialID      + '=' + TMaterialDM.TableName + '.' + TMaterialDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TFamiliaDeArticuloDM.TableName  + ' ON (' + TableName + '.' + _FamiliaDeArticuloID  + '=' + TFamiliaDeArticuloDM.TableName  + '.' + TFamiliaDeArticuloDM.ID_FieldName  + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;


class function TProcesoPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TProcesoPrecioDM.ID_FieldName : string;
begin
  Result := 'ProcesoPrecioID';
end;

procedure TProcesoPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TProcesoPrecio(PDObject) do
    begin
      IDField[_ProcesoID]                 := FProcesoID;
      IDField[_ListaDePrecioID]           := FListaDePrecioID;
      FloatField[_Precio]                 := FPrecio;
      IDField[_MonedaID]                  := FMonedaID;
      IDField[_FamiliaDeArticuloID]       := FFamiliaDeArticuloID;
      IDField[_MaterialID]                := FMaterialID;
      BooleanField[_ExigePrecioEnCunio]   := FExigePrecioEnCunio;
    end;
end;


procedure TProcesoPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TProcesoPrecio(PDObject) do
    begin
      FProcesoID                := IDField[_ProcesoID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      FFamiliaDeArticuloID      := IDField[_FamiliaDeArticuloID];
      FMaterialID               := IDField[_MaterialID];
      FExigePrecioEnCunio       := BooleanField[_ExigePrecioEnCunio];
      // del cc
      FListaDePrecioCodigo      := StringField[ _CCListaDePrecioCodigo];
      FListaDePrecioDescripcion := StringField[ _CCListaDePrecioDescripcion];
      FProcesoCodigo            := StringField[ _CCProcesoCodigo];
      FProcesoDescripcion       := StringField[ _CCProcesoDescripcion];
      FMonedaCodigo             := StringField[ _CCMonedaCodigo];
      FMonedaDescripcion        := StringField[ _CCMonedaDescripcion];
      FMaterialCodigo           := StringField[ _CCMaterialCodigo];
      FMaterialDescripcion      := StringField[ _CCMaterialDescripcion];
      FFamiliaCodigo            := StringField[ _CCFamiliaCodigo];
      FFamiliaDescripcion       := StringField[ _CCFamiliaDescripcion];
    end;
end;

 { TProcesoPrecioList }
function TProcesoPrecioList.GetActual : TProcesoPrecio;
begin
  Result := TProcesoPrecio(CurrentObject);
end;

constructor TProcesoPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := '(' + TProcesoPrecioDM.TableName+'.'+ TProcesoPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  end;
begin
  inherited Create(TProcesoPrecio,TProcesoPrecioDM.CreateAll( False, WhereString));
end;

constructor TProcesoPrecioList.CreateByListaDePrecioAndProceso(_LP: TListaDePrecio; _P: TProceso);
  Function WhereString: String;
  begin
    Result := '(' + TProcesoPrecioDM.TableName+'.'+ TProcesoPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (' ;
    Result := Result + TProcesoPrecioDM.TableName+'.'+ TProcesoPrecioDM._ProcesoID + '=' +  IntToStr(_P.ID)+')';
  end;
begin
  inherited Create(TProcesoPrecio,TProcesoPrecioDM.CreateAll( False, WhereString));
end;

constructor TProcesoPrecioList.CreateByProceso(_P: TProceso);
  Function WhereString: String;
  begin
    Result := '(' + TProcesoPrecioDM.TableName+'.'+ TProcesoPrecioDM._ProcesoID + ' = ' + IntToStr(_P.ID) +')';
  end;
begin
  inherited Create(TProcesoPrecio,TProcesoPrecioDM.CreateAll( False, WhereString));
end;

constructor TProcesoPrecioList.CreateEmpty;
begin
  inherited Create(TProcesoPrecio,TProcesoPrecioDM.CreateEmpty);
end;

function TProcesoPrecioList.CreateNewObject: TPDObject;
begin
  Result := TProcesoPrecio.Create;
end;

function TProcesoPrecioList.FindCodigoProceso(_CP: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.ProcesoCodigo = _CP );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;


function TProcesoPrecioList.FindCodigoProcesoAndFamilia(_CP, _F: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ProcesoCodigo = _CP ) and ( Self.Actual.FamiliaCodigo = _F );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TProcesoPrecioList.FindCodigoProcesoFamiliaAndMaterial(_CP, _F, _M : String ): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ProcesoCodigo = _CP ) and ( Self.Actual.FamiliaCodigo = _F ) and ( Self.Actual.MaterialCodigo = _M ) ;
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TProcesoPrecioList.FindProceso(_P: TProceso): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.ProcesoID = _P.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;


constructor TProcesoPrecioList.CreateAll;
begin
  inherited Create(TProcesoPrecio,TProcesoPrecioDM.CreateAll( False ));
end;


 { TKolorPrecio }
constructor TKolorPrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TKolorPrecioDM);
  SaveSqlLog := True;
  FPrecio := null;
end;

procedure TKolorPrecio.SetKolorID(Value : TObjectID);
begin
  if (Value<>FKolorID) then
    begin
      if Assigned(FKolor) then
        FreeAndNil(FKolor);
      FKolorID          := Value;
      fKolorCodigo      := Kolor.codigo;
      fKolorDescripcion := Kolor.Descripcion;
      if Kolor.PaletaDeColorID<>nullId then
        FKolorPaleta    := Kolor.PaletaDeColor.Descripcion;
    end;

end;

function TKolorPrecio.GetKolor : TKolor;
begin
  if not assigned(FKolor) then
    GetObject(TKolor,FKolor,KolorID);

  Result := TKolor(FKolor);
end;

procedure TKolorPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TKolorPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TKolorPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

procedure TKolorPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TKolorPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);

  Result := TMoneda(FMoneda);
end;

function TKolorPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TKolorPrecioDM }
class function TKolorPrecioDM.TableName : string;
begin
  Result := 'Colorprecios';
end;


class function TKolorPrecioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TKolorDM.TableName      + '.' +  TKolorDM._Codigo      + ' as ' + TKolorPrecioDM._CCKolorCodigo       + ', ' + TKolorDM.TableName      + '.' +  TKolorDM._Descripcion      + ' as ' + TKolorPrecioDM._CCKolorDescripcion + ', '  ;
    Result := Result + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TKolorPrecioDM._CCListaDePrecioCodigo  + ', ' ;
    Result := Result + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TKolorPrecioDM._CCListaDePrecioDescripcion  + ', ' ;
    Result := Result + TPaletaDeColorDM.TableName        + '.' +  TPaletaDeColorDM._Descripcion + ' as ' + TKolorPrecioDM._CCKolorPaleta +', ';
    Result := Result + TMonedaDM.TableName        + '.' +  TMonedaDM._Codigo        + ' as ' + TKolorPrecioDM._CCMonedaCodigo         + ', ' + TMonedaDM.TableName        + '.' +  TMonedaDM._Descripcion        + ' as ' + TKolorPrecioDM._CCMonedaDescripcion  ;
  end;

  Function LeftJoinString : String;
  begin
    Result := ' LEFT JOIN ' + TKolorDM.TableName + ' ON (' + TableName + '.' + _KolorID + '=' + TKolorDM.TableName + '.' + TKolorDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TPaletaDeColorDM.TableName + ' ON (' + TKolorDm.TableName + '.' + TKolorDM._PaletaDeColorID + '=' + TPaletaDeColorDM.TableName + '.' + TPaletaDeColorDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;


class function TKolorPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TKolorPrecioDM.ID_FieldName : string;
begin
  Result := 'ColorPrecioID';
end;

procedure TKolorPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TKolorPrecio(PDObject) do
    begin
      IDField[_KolorID]                 := FKolorID;
      IDField[_ListaDePrecioID]         := FListaDePrecioID;
      FloatField[_Precio]               := FPrecio;
      IDField[_MonedaID]                := FMonedaID;
      BooleanField[_ExigePrecioEnCunio] := FExigePrecioEnCunio
    end;
end;


procedure TKolorPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TKolorPrecio(PDObject) do
    begin
      FKolorID                  := IDField[_KolorID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      FexigePrecioEnCunio       := BooleanField[_ExigePrecioEnCunio];
      // del cc
      fListaDePrecioCodigo      := StringField[ _CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[ _CCListaDePrecioDescripcion];
      FKolorCodigo              := StringField[ _CCKolorCodigo];
      FKolorDescripcion         := StringField[ _CCKolorDescripcion];
      fKolorPaleta              := StringField[ _CCKolorPaleta];
      fMonedaCodigo             := StringField[ _CCMonedaCodigo];
      fMonedaDescripcion        := StringField[ _CCMonedaDescripcion];
    end;
end;

 { TKolorPrecioList }
function TKolorPrecioList.GetActual : TKolorPrecio;
begin
  Result := TKolorPrecio(CurrentObject);
end;

constructor TKolorPrecioList.CreateByKolor(_K: TKolor);
  Function WhereString: String;
  begin
    Result := '(' + TKolorPrecioDM.TableName+'.'+ TKolorPrecioDM._KolorID + '=' +  IntToStr(_K.ID)+')';
  end;
begin
  inherited Create(TKolorPrecio,TKolorPrecioDM.CreateAll( False, WhereString));
end;

constructor TKolorPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := '(' + TKolorPrecioDM.TableName+'.'+ TKolorPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  end;
begin
  inherited Create(TKolorPrecio,TKolorPrecioDM.CreateAll( False, WhereString));
end;

constructor TKolorPrecioList.CreateByListaDePrecioAndKolor(_LP: TListaDePrecio; _K: TKolor);
  Function WhereString: String;
  begin
    Result := '(' + TKolorPrecioDM.TableName+'.'+ TKolorPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (';
    Result := Result + TKolorPrecioDM.TableName+'.'+ TKolorPrecioDM._KolorID + '=' +  IntToStr(_K.ID)+')';
  end;
begin
  inherited Create(TKolorPrecio,TKolorPrecioDM.CreateAll( False, WhereString));
end;

constructor TKolorPrecioList.CreateEmpty;
begin
  inherited Create(TKolorPrecio,TKolorPrecioDM.CreateEmpty);
end;

function TKolorPrecioList.CreateNewObject: TPDObject;
begin
  Result := TKolorPrecio.Create;
end;

function TKolorPrecioList.FindCodigoKolor(_CK: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.KolorCodigo = _CK );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TKolorPrecioList.FindKolor(_K: TKolor): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.KolorID = _K.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TKolorPrecioList.CreateAll;
begin
  inherited Create(TKolorPrecio,TKolorPrecioDM.CreateAll( False ));
end;


 { TDesarrolloPrecio }
constructor TDesarrolloPrecio.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TDesarrolloPrecioDM);
  FPrecio    := null;
end;

procedure TDesarrolloPrecio.SetDesarrolloID(Value : TObjectID);
begin
  if (Value<>FDesarrolloID)  then
    begin
      if Assigned(FDesarrollo) then
        FreeAndNil(FDesarrollo);
      FDesarrolloID          := Value;
      fDesarrolloCodigo      := desarrollo.codigo;
      fDesarrolloDescripcion := desarrollo.Descripcion;
      if (desarrollo.marcaID <> NullId) then
        FDesarrolloMarca       := desarrollo.marca.Descripcion;
    end;


end;

function TDesarrolloPrecio.GetDesarrollo : TDesarrollo;
begin
  if not assigned(FDesarrollo) then
    GetObject(TDesarrollo,FDesarrollo,DesarrolloID);

  Result := TDesarrollo(FDesarrollo);
end;

procedure TDesarrolloPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TDesarrolloPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TDesarrolloPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

procedure TDesarrolloPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TDesarrolloPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  Result := TMoneda(FMoneda);
end;


function TDesarrolloPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TDesarrolloPrecioDM }
class function TDesarrolloPrecioDM.TableName : string;
begin
  Result := 'desarrolloprecios';
end;


class function TDesarrolloPrecioDM.CreateCompuesto(_Parte : Integer): String;
  Function CamposString : String;
  var
    CC : TCampoCompuesto;
  begin
    Try
      CC := TCampoCompuesto.create( TableName, '*');
      Result := CC.NombreCompleto;

      CC := TCampoCompuesto.create( TDesarrolloDM.TableName, TDesarrolloDM._Codigo, TDesarrolloPrecioDM._CCDesarrolloCodigo );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TDesarrolloDM.TableName, TDesarrolloDM._Descripcion, TDesarrolloPrecioDM._CCDesarrolloDescripcion );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TMarcaDM.TableName, TMarcaDM._Descripcion, TDesarrolloPrecioDM._CCDesarrolloMarca );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TMonedaDM.TableName, TMonedaDM._Codigo, TDesarrolloPrecioDM._CCMonedaCodigo );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TMonedaDM.TableName, TMonedaDM._Descripcion, TDesarrolloPrecioDM._CCMonedaDescripcion );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TListadePrecioDM.TableName, TListadePrecioDM._Codigo, TDesarrolloPrecioDM._CCListaDePrecioCodigo );
      Result := Result +', ' + CC.NombreCompleto;

      CC := TCampoCompuesto.create( TListadePrecioDM.TableName, TListadePrecioDM._Descripcion, TDesarrolloPrecioDM._CCListaDePrecioDescripcion );
      Result := Result +', ' + CC.NombreCompleto;

//    Result :=          TableName               + '.*, ' + TDesarrolloDM.TableName  + '.' +  TDesarrolloDM._Codigo + ' as ' + TDesarrolloPrecioDM._CCDesarrolloCodigo + ', ' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._Descripcion + ' as ' + TDesarrolloPrecioDM._CCDesarrolloDescripcion + ', ';
//    Result := Result + TMarcaDM.TableName + '.' +  TMarcaDM._Descripcion + ' as ' + TDesarrolloPrecioDM._CCDesarrolloMarca + ', '  ;
//    Result := Result + TMonedaDM.TableName + '.' +  TMonedaDM._Codigo + ' as ' + TDesarrolloPrecioDM._CCMonedaCodigo  + ', ' + TMonedaDM.TableName + '.' +  TMonedaDM._Descripcion + ' as ' + TDesarrolloPrecioDM._CCMonedaDescripcion +', ' ;
//    Result := Result + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TDesarrolloPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TDesarrolloPrecioDM._CCListaDePrecioDescripcion  ;
    Finally
      FreeAndNil( CC ) ;
    End;
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' LEFT JOIN ' + TDesarrolloDM.TableName + ' ON (' + TableName + '.' + _DesarrolloID + '=' + TDesarrolloDM.TableName + '.' + TDesarrolloDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMarcaDM.TableName + ' ON (' + TDesarrolloDM.TableName + '.' + TDesarrolloDM._marcaID + '=' + TMarcaDM.TableName + '.' + TMarcaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1 : Result := CamposString;
    2 : Result := LeftJoinString;
  end;
end;

class function TDesarrolloPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TDesarrolloPrecioDM.ID_FieldName : string;
begin
  Result := 'DesarrolloPrecioID';
end;

procedure TDesarrolloPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TDesarrolloPrecio(PDObject) do
    begin
      IDField[_DesarrolloID] := FDesarrolloID;
      IDField[_ListaDePrecioID] := FListaDePrecioID;
      FloatField[_Precio] := FPrecio;
      IDField[_MonedaID] := FMonedaID;
    end;
end;

procedure TDesarrolloPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TDesarrolloPrecio(PDObject) do
    begin
      FDesarrolloID    := IDField[_DesarrolloID];
      FListaDePrecioID := IDField[_ListaDePrecioID];
      FPrecio          := FloatField[_Precio];
      FMonedaID        := IDField[_MonedaID];
      // del cc
      fListaDePrecioCodigo      := StringField[_CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[_CCListaDePrecioDescripcion];
      FDesarrolloCodigo         := StringField[_CCDesarrolloCodigo];
      FDesarrolloDescripcion    := StringField[_CCDesarrolloDescripcion];
      FDesarrolloMarca          := StringField[_CCDesarrolloMarca];
      fMonedaCodigo             := StringField[_CCMonedaCodigo];
      fMonedaDescripcion        := StringField[_CCMonedaDescripcion];
    end;
end;

 { TDesarrolloPrecioList }
function TDesarrolloPrecioList.GetActual : TDesarrolloPrecio;
begin
  Result := TDesarrolloPrecio(CurrentObject);
end;

constructor TDesarrolloPrecioList.CreateByDesarrollo(_D: TDesarrollo);
  Function WhereString: String;
  begin
    Result := '(' + TDesarrolloPrecioDM.TableName+'.'+ TDesarrolloPrecioDM._DesarrolloID + '=' +  IntToStr(_D.ID)+')';
  end;
begin
  inherited Create(TDesarrolloPrecio, TDesarrolloPrecioDM.CreateAll( false, WhereString));
end;

constructor TDesarrolloPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := '(' + TDesarrolloPrecioDM.TableName+'.'+ TDesarrolloPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  end;
begin
  inherited Create(TDesarrolloPrecio, TDesarrolloPrecioDM.CreateAll( false, WhereString));
end;

constructor TDesarrolloPrecioList.CreateByListaDePrecioAndDesarrollo(_LP: TListaDePrecio; _D: TDesarrollo);
  Function WhereString: String;
  begin
    Result := '(' + TDesarrolloPrecioDM.TableName+'.'+ TDesarrolloPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (';
    Result := Result + TDesarrolloPrecioDM.TableName+'.'+ TDesarrolloPrecioDM._DesarrolloID + '=' +  IntToStr(_D.ID)+')';
  end;
begin
  inherited Create(TDesarrolloPrecio, TDesarrolloPrecioDM.CreateAll( false, WhereString));
end;

constructor TDesarrolloPrecioList.CreateEmpty;
begin
  inherited Create(TDesarrolloPrecio,TDesarrolloPrecioDM.CreateEmpty);
end;

function TDesarrolloPrecioList.CreateNewObject: TPDObject;
begin
  Result := TDesarrolloPrecio.Create;
end;

function TDesarrolloPrecioList.FindCodigoDesarrollo(_CD: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.DesarrolloCodigo = _CD );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TDesarrolloPrecioList.FindDesarrollo(_D: TDesarrollo): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.DesarrolloID = _D.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TDesarrolloPrecioList.CreateAll;
begin
  inherited Create(TDesarrolloPrecio, TDesarrolloPrecioDM.CreateAll( false));
end;

 { TTipoDeDesarrollo }
function TTipoDeDesarrollo.GetDescriptibleAbreviadoListClass;
begin
  Result := TTipoDeDesarrolloList;
end;
constructor TTipoDeDesarrollo.Create;
begin
  inherited;
  DMObject    := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeDesarrolloDM);
  SaveSQLLog  := True;
  FesInactivo := False;
end;
 { TTipoDeDesarrolloDM }

class function TTipoDeDesarrolloDM.TableName : string;
begin
  Result := 'TiposDeDesarrollo';
end;

class function TTipoDeDesarrolloDM.ID_FieldName : string;
begin
  Result := 'TipoDeDesarrolloID';
end;

class function TTipoDeDesarrolloDM.EsInactivo_FieldName : string;
begin
  Result := _EsInactivo;
end;

procedure TTipoDeDesarrolloDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeDesarrollo(PDObject) do
    begin
      StringField[_Codigo]      := Codigo;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;

procedure TTipoDeDesarrolloDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeDesarrollo(PDObject) do
    begin
      FCodigo      := StringField[_Codigo];
      FDescripcion := StringField[_Descripcion];
      FEsInactivo  := BooleanField[_EsInactivo];
    end;
end;

 { TTipoDeDesarrolloList }
function TTipoDeDesarrolloList.GetActual : TTipoDeDesarrollo;
begin
  Result := TTipoDeDesarrollo(CurrentObject);
end;

function TTipoDeDesarrolloList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeDesarrollo.Create;
end;

constructor TTipoDeDesarrolloList.CreateAll(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := ''           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := ''           // campos separados por coma
  end;
begin
  inherited Create(TTipoDeDesarrollo,TTipoDeDesarrolloDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TCunioPrecio }
constructor TCunioPrecio.Create;
begin
  inherited;
  SaveSqlLog         := True;
  DMObject           := Aplicacion.DMPRovider.GetGlobalDM(TCunioPrecioDM);
  FPrecio            := null;
  FCostoDeDesarrollo := null;
end;

procedure TCunioPrecio.SetCunioID(Value : TObjectID);
begin
  if (Value<>FCunioID)  then
    begin
      if Assigned(FCunio) then
        FreeAndNil(FCunio);
      FCunioID          := Value;
      fCunioCodigo      := Cunio.codigo;
      fCunioDescripcion := Cunio.Descripcion;
      if (Cunio.marcaID <> NullId) then
        fCunioMarca       := Cunio.Marca.Descripcion;
    end;
end;

function TCunioPrecio.GetCunio : TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio,FCunio,CunioID);

  Result := TCunio(FCunio);
end;

procedure TCunioPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TCunioPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TCunioPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

procedure TCunioPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TCunioPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);

  Result := TMoneda(FMoneda);
end;
 function TCunioPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TCunioPrecioDM }
class function TCunioPrecioDM.TableName : string;
begin
  Result := 'cunioprecios';
end;


class function TCunioPrecioDM.CreateCompuesto(_Parte : Integer = 0): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TCunioDM.TableName      + '.' +  TCunioDM._Codigo      + ' as ' + TCunioPrecioDM._CCCunioCodigo       + ', ' + TCunioDM.TableName      + '.' +  TCunioDM._Descripcion      + ' as ' + TCunioPrecioDM._CCCunioDescripcion + ', '  ;
    Result := Result + TMarcaDM.TableName + '.' +  TMarcaDM._Descripcion + ' as ' + TCunioPrecioDM._CCCunioMarca + ', '  ;
    Result := Result + TMonedaDM.TableName + '.' +  TMonedaDM._Codigo + ' as ' + TCunioPrecioDM._CCMonedaCodigo  + ', ' + TMonedaDM.TableName + '.' +  TMonedaDM._Descripcion + ' as ' + TCunioPrecioDM._CCMonedaDescripcion +', ' ;
    Result := Result + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TCunioPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TCunioPrecioDM._CCListaDePrecioDescripcion  ;
  end;
  Function LeftJoinString : String;
  begin
    Result := ' LEFT JOIN ' + TCunioDM.TableName + ' ON (' + TableName + '.' + _CunioID + '=' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMarcaDM.TableName + ' ON (' + TCunioDM.TableName + '.' + TCunioDM._marcaID + '=' + TMarcaDM.TableName + '.' + TMarcaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TCunioPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TCunioPrecioDM.ID_FieldName : string;
begin
  Result := 'CunioPrecioID';
end;

procedure TCunioPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TCunioPrecio(PDObject) do
    begin
      IDField[_CunioID]              := FCunioID;
      IDField[_ListaDePrecioID]      := FListaDePrecioID;
      FloatField[_Precio]            := FPrecio;
      IDField[_MonedaID]             := FMonedaID;
      FloatField[_CostoDeDesarrollo] := FCostoDeDesarrollo;
    end;
end;

procedure TCunioPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TCunioPrecio(PDObject) do
    begin
      FCunioID                  := IDField[_CunioID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      FCostoDeDesarrollo        := FloatField[_CostoDeDesarrollo];
      // del cc
      fListaDePrecioCodigo      := StringField[ _CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[ _CCListaDePrecioDescripcion];
      FCunioCodigo              := StringField[ _CCCunioCodigo];
      FCunioDescripcion         := StringField[ _CCCunioDescripcion];
      fCunioMarca               := StringField[ _CCCunioMarca];
      fMonedaCodigo             := StringField[ _CCMonedaCodigo];
      fMonedaDescripcion        := StringField[ _CCMonedaDescripcion];
    end;
end;

 { TCunioPrecioList }
function TCunioPrecioList.GetActual : TCunioPrecio;
begin
  Result := TCunioPrecio(CurrentObject);
end;

constructor TCunioPrecioList.CreateByCunio(_C: TCunio);
  Function WhereString: String;
  begin
    Result := '(' + TCunioPrecioDM.TableName+'.'+ TCunioPrecioDM._CunioID + '=' +  IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TCunioPrecio, TCunioPrecioDM.CreateAll( false, WhereString));
end;

constructor TCunioPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  function WhereString: String;
  Begin
    Result := '('+TCunioPrecioDM.TableName+'.'+ TCunioPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  End;
begin
  inherited Create(TCunioPrecio, TCunioPrecioDM.CreateAll ( false, WhereString ));
end;

constructor TCunioPrecioList.CreateByListaDePrecioAndCunio(_LP: TListaDePrecio; _C: TCunio);
  function WhereString: String;
  Begin
    Result := '('+TCunioPrecioDM.TableName+'.'+ TCunioPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (';
    Result := Result + TCunioPrecioDM.TableName+'.'+ TCunioPrecioDM._CunioID + '=' +  IntToStr(_C.ID)+')';
  End;
begin
  inherited Create(TCunioPrecio, TCunioPrecioDM.CreateAll ( false, WhereString ));
end;

constructor TCunioPrecioList.CreateEmpty;
begin
  inherited Create(TCunioPrecio,TCunioPrecioDM.CreateEmpty  );
end;

function TCunioPrecioList.CreateNewObject: TPDObject;
begin
  Result := TCunioPrecio.Create;
end;

function TCunioPrecioList.FindCodigoCunio(_CC: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.CunioCodigo = _CC );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TCunioPrecioList.FindCunio(_C: TCunio): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.CunioID = _C.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TCunioPrecioList.CreateAll;
begin
  inherited Create(TCunioPrecio,TCunioPrecioDM.CreateAll( False ));
end;


 { TServicioPrecio }
constructor TServicioPrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TServicioPrecioDM);
  SaveSqlLog := True;
  FPrecio := 0;
end;

function TServicioPrecio.Save: Boolean;
begin
  Result := inherited Save;
end;

procedure TServicioPrecio.SetServicioID(Value : TObjectID);
begin
  if (Value<>FServicioID) then
    begin
      if Assigned(Fservicio) then
        FreeAndNil(Fservicio);
      FServicioID          := Value;
      fServicioCodigo      := servicio.codigo;
      fServicioDescripcion := servicio.Descripcion;
    end;
end;

function TServicioPrecio.Getservicio : TServicio;
begin
  if not assigned(Fservicio) then
    GetObject(TServicio,Fservicio,servicioID);

  Result := TServicio(Fservicio);
end;

procedure TServicioPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) then
    begin
      if Assigned(FListaDePrecio)  then
        FreeAndNil(FListaDePrecio);
      FListaDePrecioID := Value;
      fListaDePrecioCodigo      := ListaDePrecio.codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
      FMonedaID                 := ListaDePrecio.monedaID;
      fMonedaCodigo             := ListaDePrecio.moneda.codigo;
      fMonedaDescripcion        := ListaDePrecio.moneda.Descripcion;
    end;
end;

function TServicioPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  Result := TListaDePrecio(FListaDePrecio);
end;

procedure TServicioPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);

  FMonedaID := Value;

end;

procedure TServicioPrecio.SetPrecio(const Value: TReal);
begin
  FPrecio := Aplicacion.MathService.Redondear( Value, 3 );
end;

function TServicioPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);

  Result := TMoneda(FMoneda);
end;

function TServicioPrecio.GetPrecio: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPrecio, 3 );
end;

{ TServicioPrecioDM }
class function TServicioPrecioDM.TableName : string;
begin
  Result := 'servicioprecios';
end;


class function TServicioPrecioDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TServicioPrecioDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result :=           TableName + '.*, ';
    Result := Result +  TServicioDM.TableName      + '.' +  TServicioDM._Codigo      + ' as ' + TServicioPrecioDM._CCServicioCodigo       + ', ' + TServicioDM.TableName      + '.' +  TServicioDM._Descripcion      + ' as ' + TServicioPrecioDM._CCServicioDescripcion      + ', '  ;
    Result := Result +  TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TServicioPrecioDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TServicioPrecioDM._CCListaDePrecioDescripcion + ', ' ;
    Result := Result +  TMonedaDM.TableName        + '.' +  TMonedaDM._Codigo        + ' as ' + TServicioPrecioDM._CCMonedaCodigo         + ', ' + TMonedaDM.TableName        + '.' +  TMonedaDM._Descripcion        + ' as ' + TServicioPrecioDM._CCMonedaDescripcion;
  end;
  Function LeftJoinString : String;
  begin
    Result :=          ' LEFT JOIN ' + TServicioDM.TableName      + ' ON (' + TableName + '.' + _ServicioID      + '=' + TServicioDM.TableName      + '.' + TServicioDM.ID_FieldName      + ') ';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ') ';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName        + ' ON (' + TableName + '.' + _MonedaID        + '=' + TMonedaDM.TableName        + '.' + TMonedaDM.ID_FieldName        + ') ';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TServicioPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TServicioPrecioDM.ID_FieldName : string;
begin
  Result := 'ServicioPrecioID';
end;

procedure TServicioPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TServicioPrecio(PDObject) do
    begin
      IDField[_servicioID]      := ServicioID;
      IDField[_ListaDePrecioID] := ListaDePrecioID;
      FloatField[_Precio]       := Precio;
      IDField[_MonedaID]        := MonedaID;    end;
end;

procedure TServicioPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TServicioPrecio(PDObject) do
    begin
      FServicioID               := IDField[_servicioID];
      FListaDePrecioID          := IDField[_ListaDePrecioID];
      FPrecio                   := FloatField[_Precio];
      FMonedaID                 := IDField[_MonedaID];
      // del cc
      fServicioCodigo           := StringField[_CCServicioCodigo];
      fServicioDescripcion      := StringField[_CCServicioDescripcion];
      fListaDePrecioCodigo      := StringField[_CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[_CCListaDePrecioDescripcion];
      fMonedaCodigo             := StringField[_CCMonedaCodigo];
      fMonedaDescripcion        := StringField[_CCMonedaDescripcion];
    end;
end;

 { TservicioPrecioList }
function TservicioPrecioList.GetActual : TServicioPrecio;
begin
  Result := TServicioPrecio(CurrentObject);
end;

constructor TservicioPrecioList.CreateByServicio(_S: TServicio);
  function WhereString: String;
  Begin
    Result := '('+TServicioPrecioDM.TableName+'.'+ TServicioPrecioDM._servicioID + '=' +  IntToStr(_S.ID)+')';
  End;
begin
  inherited Create(TServicioPrecio, TServicioPrecioDM.CreateAll ( False, WhereString ));
end;

constructor TservicioPrecioList.CreateByListaDePrecio(_LP: TListaDePrecio);
  function WhereString: String;
  Begin
    Result := '('+TServicioPrecioDM.TableName+'.'+ TServicioPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  End;
begin
  inherited Create(TServicioPrecio, TServicioPrecioDM.CreateAll ( False, WhereString ));
end;

constructor TServicioPrecioList.CreateByListaDePrecioAndServicio(_LP: TListaDePrecio; _S: TServicio);
  function WhereString: String;
  Begin
    Result := '('+TServicioPrecioDM.TableName+'.'+ TServicioPrecioDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID) + ') and (';
    Result := Result + TServicioPrecioDM.TableName+'.'+ TServicioPrecioDM._ServicioID + '=' +  IntToStr(_S.ID)+')';
  End;
begin
  inherited Create(TServicioPrecio, TServicioPrecioDM.CreateAll ( False, WhereString ));
end;

constructor TservicioPrecioList.CreateEmpty;
begin
  inherited Create(TServicioPrecio, TServicioPrecioDM.CreateEmpty);
end;

function TservicioPrecioList.CreateNewObject: TPDObject;
begin
  Result := TServicioPrecio.Create;
end;

function TservicioPrecioList.FindServicio(_S: TServicio): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.servicioID = _S.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TservicioPrecioList.FindCodigoServicio(_CS: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.ServicioCodigo = _CS );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TservicioPrecioList.CreateAll;
begin
  inherited Create(TServicioPrecio,TServicioPrecioDM.CreateAll( False ));
end;

 { TMotivoDeAtraso }
constructor TMotivoDeAtraso.Create;
begin
  inherited;
  DMObject    := Aplicacion.DMPRovider.GetGlobalDM(TMotivoDeAtrasoDM);
  FEsInactivo := null;
end;
 { TMotivoDeAtrasoDM }
class function TMotivoDeAtrasoDM.TableName : string;
begin
  Result := 'MotivosDeAtraso';
end;


class function TMotivoDeAtrasoDM.EsInactivo_FieldName: string;
begin
  result := _Esinactivo;
end;

class function TMotivoDeAtrasoDM.ID_FieldName : string;
begin
  Result := 'MotivoDeAtrasoID';
end;

procedure TMotivoDeAtrasoDM.PopulateFields(PDObject: TPDObject);
begin
  with TMotivoDeAtraso(PDObject) do
    begin
      BooleanField[_EsInactivo]         := FEsInactivo;
      StringField[_Descripcion]         := Descripcion;
      BooleanField[_RequiereComentario] := RequiereComentario;
    end;
end;


procedure TMotivoDeAtrasoDM.PopulateObject(PDObject: TPDObject);
begin
  with TMotivoDeAtraso(PDObject) do
    begin
      FEsInactivo         := BooleanField[_EsInactivo];
      FDescripcion        := StringField[_Descripcion];
      FRequiereComentario := BooleanField[_RequiereComentario];
    end;
end;

 { TMotivoDeAtrasoList }
function TMotivoDeAtrasoList.GetActual : TMotivoDeAtraso;
begin
  Result := TMotivoDeAtraso(CurrentObject);
end;

function TMotivoDeAtrasoList.CreateNewObject: TPDObject;
begin
  Result := TMotivoDeAtraso.Create;
end;

constructor TMotivoDeAtrasoList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TMotivoDeAtraso,TMotivoDeAtrasoDM.CreateAll(False, '', _SoloActivos));
end;

 { TTCunioArticuloPosibleHerramental }

function TCunioArticuloPosibleHerramental.CantidadDeMateriaPrimaNecesaria(_Cantidad: Integer): TReal;
begin
  Result := 0;
  if (CantidadUnitariaConScrapUnidadDeMedidaID <> NullID) then
    Result := ( Aplicacion.MeasureService.ConvertirUnidadDeMedidaAEquivalencia( CantidadUnitariaConScrapUnidadDeMedida, CantidadUnitariaConScrap * _Cantidad ) );
end;

constructor TCunioArticuloPosibleHerramental.Create;
begin
  inherited;
  SaveSqlLog                                := True;
  DMObject                                  := Aplicacion.DMPRovider.GetGlobalDM(TCunioArticuloPosibleHerramentalDM);
  FEsInactivo                               := Null;
  FEsDefault                                := Null;
  FEsRoturaManual                           := Null;
  FTipoDeHerramentalID                      := NullID;
  FMateriaPrimaID                           := NullID;
  FCantidadUnitariaConScrap                 := 0;
  FCantidadUnitariaConScrapUnidadDeMedidaID := NullID;
 end;

destructor TCunioArticuloPosibleHerramental.Destroy;
begin
  FreeObjectsFromMemory;
  inherited;
end;

procedure TCunioArticuloPosibleHerramental.FreeObjectsFromMemory;
begin
  if Assigned(FTipoDeHerramental) then
    FreeAndNil(FTipoDeHerramental);
end;

function TCunioArticuloPosibleHerramental.GetCantidadUnitariaConScrap: TReal;
var
  DMFormulas : TDMFormulas;
begin
  if IsAssigned and ( FCantidadUnitariaConScrap = 0 ) and (MateriaPrimaID <> NullID) then
    begin
      if not MateriaPrima.EsInyeccion then
        begin
          try
            DMFormulas                    := TDMFormulas.Create(nil);
            DMFormulas.HerramentalCunio   := Self;
            DMFormulas.JvInterpreterProgram.Pas.Clear;
            DMFormulas.JvInterpreterProgram.Pas.Add(Self.MateriaPrima.CategoriaDeMateriaPrima.Formula.Algoritmo);
            DMFormulas.JvInterpreterProgram.Run;
            FCantidadUnitariaConScrap     := DMFormulas.JvInterpreterProgram.VResult;
          finally
            FreeAndNil(DMFormulas);
          end;
        end
      else
        begin
          FCantidadUnitariaConScrap                 := CunioArticuloPosible.Componente.PesoBruto;
          FCantidadUnitariaConScrapUnidadDeMedidaID := CunioArticuloPosible.Componente.UnidadDeMedidaPesoID;
        end;
    end;
  Result := FCantidadUnitariaConScrap;
end;

function TCunioArticuloPosibleHerramental.GetCantidadUnitariaConScrapDescripcion: TString;
begin
  if (CantidadUnitariaConScrapUnidadDeMedidaID <> NullID) then
    Result := FloatToStrF(CantidadUnitariaConScrap, ffNumber, 10, 3) + ' ' + CantidadUnitariaConScrapUnidadDeMedida.Codigo;
end;

function TCunioArticuloPosibleHerramental.GetCantidadUnitariaConScrapUnidadDeMedida: TUnidadDeMedida;
begin
  if not Assigned(FCantidadUnitariaConScrapUnidadDeMedida) then
    GetObject(TUnidadDeMedida, FCantidadUnitariaConScrapUnidadDeMedida, CantidadUnitariaConScrapUnidadDeMedidaID);
  Result := TUnidadDeMedida(FCantidadUnitariaConScrapUnidadDeMedida);
end;

function TCunioArticuloPosibleHerramental.GetCunioArticuloPosible: TCunioArticuloPosible;
begin
  if not Assigned(FCunioArticuloPosible) then
    GetObject(TCunioArticuloPosible, FCunioArticuloPosible, CunioArticuloPosibleID);
  Result := TCunioArticuloPosible(FCunioArticuloPosible);
end;

function TCunioArticuloPosibleHerramental.GetHerramental: THerramental;
begin
  if not Assigned(FHerramental) then
    GetObject(THerramental, FHerramental, HerramentalID);
  Result := THerramental(FHerramental);
end;

function TCunioArticuloPosibleHerramental.GetMateriaPrima: TMateriaPrima;
begin
  if not Assigned(FMateriaPrima) then
    GetObject(TMateriaPrima, FMateriaPrima, MateriaPrimaID);
  Result := TMateriaPrima(FMateriaPrima);
end;

function TCunioArticuloPosibleHerramental.GetTipoDeHerramental: TTipoDeHerramental;
begin
  if not Assigned(FTipoDeHerramental) then
    GetObject(TTipoDeHerramental, FTipoDeHerramental, TipoDeHerramentalID);
  Result := TTipoDEHerramental(FTipoDeHerramental);
end;

function TCunioArticuloPosibleHerramental.Save: Boolean;
begin
  ValidarDatos;
  inherited;
end;

procedure TCunioArticuloPosibleHerramental.SetCantidadUnitariaConScrapUnidadDeMedidaID(const Value: TObjectID);
begin
  if (Value <> FCantidadUnitariaConScrapUnidadDeMedidaID) and (Assigned(FCantidadUnitariaConScrapUnidadDeMedida)) then
    FreeAndNil(FCantidadUnitariaConScrapUnidadDeMedida);
  FCantidadUnitariaConScrapUnidadDeMedidaID := Value;
end;

procedure TCunioArticuloPosibleHerramental.SetHerramentalID(const Value: TObjectID);
begin
  if (Value <> FHerramentalID) and (Assigned(FHerramental)) then
    FreeAndNil(FHerramental);
  FHerramentalID := Value;
end;

procedure TCunioArticuloPosibleHerramental.SetMateriaPrimaID(const Value: TObjectID);
begin
  if (Value <> FMateriaPrimaID) and Assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure TCunioArticuloPosibleHerramental.SetTipoDeHerramentalID(const Value: TObjectID);
begin
  if (Value <> FTipoDeHerramentalID) and (Assigned(FTipoDeHerramental)) then
    FreeAndNil(FTipoDeHerramental);
  FTipoDEHerramentalID := Value;
end;

function TCunioArticuloPosibleHerramental.TiempoDeProduccionEnHoras(_CantDeProducto: Integer): TReal;
begin
  try
    Result := _CantDeProducto /( TipoDeHerramental.GolpesBPM * CantidadDeBocas * 60 ) ;
    Result := Result + TipoDeHerramental.TiempoDeSetupEnHoras;
  except
    Result := 0;
  end;
end;

procedure TCunioArticuloPosibleHerramental.ValidarDatos;
begin
  if (FTipoDeHerramentalID = NullID) and (FHerramentalID = NullID) then
    Aplicacion.RaiseExceptionCreate('El campo "Tipo de Herramental" ó el campo "Herramental" deben Tener datos');

  if (FCantidadUnitariaConScrapUnidadDeMedidaID = NullID) then
    Aplicacion.RaiseExceptionCreate('El campo "Cantidad unitaria con Scrap" no puede estar vacío');

  if (FMateriaPrimaID = NullID) then
    Aplicacion.RaiseExceptionCreate('El campo "Materia Prima" no puede estar vacío');

  if (FCantidadDeBocas = 0) then
    Aplicacion.RaiseExceptionCreate('El campo "Cantidad de Bocas" no puede ser 0');

  if (FCantidad = 0) then
    Aplicacion.RaiseExceptionCreate('El campo "Cantidad" no puede ser 0');
end;

{ TCunioArticuloPosibleHerramentalDM }
class function TCunioArticuloPosibleHerramentalDM.TableName: string;
begin
  Result := 'CunioArticuloPosibleHerramentales';
end;

class function TCunioArticuloPosibleHerramentalDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCunioArticuloPosibleHerramentalDM.ID_FieldName : string;
begin
  Result := 'CunioArticuloPosibleHerramentalID';
end;

procedure TCunioArticuloPosibleHerramentalDM.PopulateFields(PDObject: TPDObject);
begin
  with TCunioArticuloPosibleHerramental(PDObject) do
    begin
      IDField[_CunioArticuloPosibleID]               := FCunioArticuloPosibleID;
      StringField[_Cajon]                            := FCajon;
      IntegerField[_CantidadDeBocas]                 := FCantidadDeBocas;
      IntegerField[_Cantidad]                        := FCantidad;
      BooleanField[_EsInactivo]                      := EsInactivo;
      BooleanField[_EsDefault]                       := FEsDefault;
      BooleanField[_EsRoturaManual]                  := FEsRoturaManual;
      StringField[_Observacion]                      := Observacion;
      IDField[_HerramentalID]                        := FHerramentalID;
      IDField[_TipoDeHerramentalID]                  := FTipoDeHerramentalID;
      IDField[_MateriaPrimaID]                       := FMateriaPrimaID;
      FloatField[_PesoUnitarioConScrap]              := CantidadUnitariaConScrap;
      IDField[_PesoUnitarioConScrapUnidadDeMedidaID] := FCantidadUnitariaConScrapUnidadDeMedidaID;
    end;
end;


procedure TCunioArticuloPosibleHerramentalDM.PopulateObject(PDObject: TPDObject);
begin
  with TCunioArticuloPosibleHerramental(PDObject) do
    begin
      FCunioArticuloPosibleID                   := IDField[_CunioArticuloPosibleID];
      FCajon                                    := StringField[_Cajon];
      FCantidadDeBocas                          := IntegerField[_CantidadDeBocas];
      FCantidad                                 := IntegerField[_Cantidad];
      FEsInactivo                               := BooleanField[_EsInactivo];
      FEsDefault                                := BooleanField[_EsDefault];
      FEsRoturaManual                           := BooleanField[_EsRoturaManual];
      FObservacion                              := StringField[_Observacion];
      FTipoDeHerramentalID                      := IDField[_TipoDeHerramentalID];
      FHerramentalID                            := IDField[_HerramentalID];
      FMateriaPrimaID                           := IDField[_MateriaPrimaID];
      FCantidadUnitariaConScrap                 := FloatField[_PesoUnitarioConScrap];
      FCantidadUnitariaConScrapUnidadDeMedidaID := IDField[_PesoUnitarioConScrapUnidadDeMedidaID];
    end;
end;

{ TCunioArticuloPosibleHerramentalList }
function TCunioArticuloPosibleHerramentalList.GetActual : TCunioArticuloPosibleHerramental;
begin
  Result := TCunioArticuloPosibleHerramental(CurrentObject);
end;


constructor TCunioArticuloPosibleHerramentalList.CreateByCunioArticuloPosible(_CAP: TCunioArticuloPosible; _SoloActivos: Boolean);
  Function WhereString: String;
  Begin
    Result:= TCunioArticuloPosibleHerramentalDM._CunioArticuloPosibleID + ' = ' + IntToStr(_CAP.ID);
  End;
begin
  inherited Create(TCunioArticuloPosibleHerramental,TCunioArticuloPosibleHerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

function TCunioArticuloPosibleHerramentalList.CreateNewObject: TPDObject;
begin
  Result := TCunioArticuloPosibleHerramental.Create;
end;

function TCunioArticuloPosibleHerramentalList.FindDefault: Boolean;
begin
  Result := False;
  if (Count = 0)  then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (Self.Actual.EsDefault);
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if (Not Result) then
    begin
      First;
      Result := True;
      exit;
    end;

  if IsLast then
    First;
end;

function TCunioArticuloPosibleHerramentalList.FindDefaultPopup: Boolean;
begin
  Result := False;
  if (Count = 0)  then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result := (Self.Actual.EsDefault);
    except
      Result := False;
    end;
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TCunioArticuloPosibleHerramentalList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TCunioArticuloPosibleHerramental,TCunioArticuloPosibleHerramentalDM.CreateAll(False, '', _SoloActivos));
end;

 { TTipoDeHerramental }
constructor TTipoDeHerramental.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeHerramentalDM);
end;

destructor TTipoDeHerramental.Destroy;
begin
  if Assigned(FTipoDeRecurso) then
    FreeAndNil(FTipoDeRecurso);
  inherited;
end;

function TTipoDeHerramental.GetTipoDeRecurso: TTipoDeRecurso;
begin
  if not assigned(FTipoDeRecurso) then
    GetObject(TTipoDeRecurso, FTipoDeRecurso, TipoDeRecursoID);

  Result := TTipoDeRecurso(FTipoDeRecurso);
end;

procedure TTipoDeHerramental.SetTipoDeRecursoID(Value : TObjectID);
begin
  if (Value <> FTipoDeRecursoID) and (assigned(FTipoDeRecurso)) then
    FreeAndNil(FTipoDeRecurso);

  FTipoDeRecursoID := Value;

end;
 { TTipoDeHerramentalDM }
class function TTipoDeHerramentalDM.TableName : string;
begin
  Result := 'TiposDeHerramental';
end;

class function TTipoDeHerramentalDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeHerramentalDM.ID_FieldName : string;
begin
  Result := 'TipoDeHerramentalID';
end;


procedure TTipoDeHerramentalDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeHerramental(PDObject) do
    begin
      IDField[_TipoDeRecursoID]          := FTipoDeRecursoID;
      StringField[_Descripcion]          := Descripcion;
      IntegerField[_GolpesBPM]           := GolpesBPM;
      FloatField[_TiempoDeSetupEnHoras]  := TiempoDeSetupEnHoras;
      BooleanField[_EsInactivo]          := EsInactivo;
    end;
end;


procedure TTipoDeHerramentalDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeHerramental(PDObject) do
    begin
      FTipoDeRecursoID      := IDField[_TipoDeRecursoID];
      FDescripcion          := StringField[_Descripcion];
      FGolpesBPM            := IntegerField[_GolpesBPM];
      FTiempoDeSetupEnHoras := FloatField[_TiempoDeSetupEnHoras];
      FEsInactivo           := BooleanField[_EsInactivo];
    end;
end;

 { TTipoDeHerramentalList }
function TTipoDeHerramentalList.GetActual : TTipoDeHerramental;
begin
  Result := TTipoDeHerramental(CurrentObject);
end;

constructor TTipoDeHerramentalList.CreateByCategoriaDeMateriaPrima(_CT: TCategoriaDeMateriaPrima; _SoloActivos: Boolean);
  Function WhereString: String;
  Begin
    Result := '('+TTipoDeHerramentalDM._TipoDeRecursoID + ' in ' +
    '( Select ' + TTipoDeRecursoDM.ID_FieldName +  ' from ' + TTipoDeRecursoDM.TableName + ' Where ' + TTipoDeRecursoDM._CategoriaDeMateriaPrimaID + ' in ' +
    '( Select ' + TCategoriaDeMateriaPrimaDM.ID_FieldName + ' from ' + TCategoriaDeMateriaPrimaDM.TableName + ' where ' +
    TCategoriaDeMateriaPrimaDM.ID_FieldName + '=' + IntToStr(_CT.ID) + ' OR ' + TCategoriaDeMateriaPrimaDM._Descripcion + ' = ' + QuotedStr('TODAS') + ')))';
  End;
begin
  inherited Create(TTipoDeHerramental, TTipoDeHerramentalDM.CreateAll( False, WhereString, _SoloActivos));
end;

function TTipoDeHerramentalList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeHerramental.Create;
end;

constructor TTipoDeHerramentalList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TTipoDeHerramental,TTipoDeHerramentalDM.CreateAll(False, '', _SoloActivos));
end;

 { TarticuloComponenteOpcional }
constructor TarticuloComponenteOpcional.Create;
begin
  inherited;
  SaveSqlLog := True;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TarticuloComponenteOpcionalDM);
end;

procedure TarticuloComponenteOpcional.SetcomponenteID(Value : TObjectID);
begin
  if (Value<>FcomponenteID) and Assigned(Fcomponente) then
    FreeAndNil(Fcomponente);
  FcomponenteID := Value;
end;

function TarticuloComponenteOpcional.Getcomponente : TArticulo;
begin
  if not assigned(Fcomponente) then
    GetObject(TArticulo,Fcomponente,componenteID);
  Result := TArticulo(Fcomponente);
end;

 { TarticuloComponenteOpcionalDM }
class function TarticuloComponenteOpcionalDM.TableName : string;
begin
  Result := 'ArticuloComponentesOpcionales';
end;

class function TarticuloComponenteOpcionalDM.ID_FieldName : string;
begin
  Result := 'ArticuloComponenteOpcionalID';
end;

procedure TarticuloComponenteOpcionalDM.PopulateFields(PDObject: TPDObject);
begin
  with TarticuloComponenteOpcional(PDObject) do
    begin
      IDField[_articuloComponenteID] := FarticuloComponenteID;
      IDField[_componenteID] := FcomponenteID;
    end;
end;

procedure TarticuloComponenteOpcionalDM.PopulateObject(PDObject: TPDObject);
begin
  with TarticuloComponenteOpcional(PDObject) do
    begin
      FarticuloComponenteID := IDField[_articuloComponenteID];
      FcomponenteID := IDField[_componenteID];
    end;
end;

 { TarticuloComponenteOpcionalList }
function TarticuloComponenteOpcionalList.GetActual : TarticuloComponenteOpcional;
begin
  Result := TarticuloComponenteOpcional(CurrentObject);
end;

constructor TarticuloComponenteOpcionalList.CreateByArticuloComponente(_AC: TArticuloComponente);
  Function WhereString: String;
  Begin
    Result := TarticuloComponenteOpcionalDM._articuloComponenteID + ' = ' + IntToStr(_AC.ID);
  End;
begin
  inherited Create(TarticuloComponenteOpcional, TarticuloComponenteOpcionalDM.CreateAll( False, WhereString));
end;

function TarticuloComponenteOpcionalList.CreateNewObject: TPDObject;
begin
  Result := TarticuloComponenteOpcional.Create;
end;

function TarticuloComponenteOpcionalList.FindCodigo(_ComponenteCodigo: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  while (not Result) and (not IsLast) do
  begin
    Result := (Actual.componente.codigo = _ComponenteCodigo );
    if not Result then
      next;
  end;

  if IsLast then
    First;
end;

constructor TarticuloComponenteOpcionalList.CreateAll;
begin
  inherited Create(TarticuloComponenteOpcional,TarticuloComponenteOpcionalDM.CreateAll(False));
end;


 { TFeriado }
constructor TFeriado.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TFeriadoDM);
  FFecha := null;
  FSeAdelanta := null;
end;
 { TFeriadoDM }
class function TFeriadoDM.TableName : string;
begin
  Result := 'feriados';
end;

class function TFeriadoDM.EsInactivo_FieldName: string;
begin
  result := _EsInactivo;
end;

class function TFeriadoDM.ID_FieldName : string;
begin
  Result := 'FeriadoID';
end;

procedure TFeriadoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFeriado(PDObject) do
    begin
      StringField[_Descripcion]    := Fdescripcion;
      DateField[_Fecha]            := FFecha;
      BooleanField[_SeAdelanta]    := FSeAdelanta;
      BooleanField[_EsInactivo]    := EsInactivo;
    end;
end;

procedure TFeriadoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFeriado(PDObject) do
    begin
      Fdescripcion:= StringField[_Descripcion];
      FFecha      := DateField[_Fecha];
      FSeAdelanta := BooleanField[_SeAdelanta];
      FEsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TFeriadoList }
function TFeriadoList.GetActual : TFeriado;
begin
  Result := TFeriado(CurrentObject);
end;

constructor TFeriadoList.SP_Feriados_Futuros(_F: Tfecha);
Var
  ParametersValues: array[0..0] of variant;
begin
//  if (_F = NULL) then

  ParametersValues[0] := _F;
  inherited Create(TFabricado, TFabricadoDM.Create_SP( TFeriadoDM._SP_Feriados_Futuros, ParametersValues ));
end;

constructor TFeriadoList.SP_Feriado_By_Fecha(_F: Tfecha);
Var
  ParametersValues: array[0..0] of variant;
begin
  ParametersValues[0] := _F;
  inherited Create(TFeriado, TFeriadoDM.Create_SP( TFeriadoDM._SP_Feriado_By_Fecha, ParametersValues ));
end;

constructor TFeriadoList.CreateFeriadosByFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: TFecha; _SoloActivos: Boolean = False);
  Function WhereString : String;
  begin
    Result := TFeriadoDM._Fecha  + ' between ' + QuotedStr(FormatDateTime('DD/MM/YYYY',_FechaDesde)) + ' And ' + QuotedStr(FormatDateTime('DD/MM/YYYY',_FechaHasta));
  end;
begin
  inherited Create(TFeriado, TFeriadoDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TFeriadoList.CreateFeriadosByMes(_Month: Word ; _Year : Word; _SoloActivos: Boolean );
  Function WhereString : String;
  begin
    Result := 'Month(' + TFeriadoDM._Fecha + ') = ' + IntToStr(_Month) + ' and Year( ' + TFeriadoDM._Fecha + ' ) = ' + IntToStr(_Year);
  end;
begin
  inherited Create(TFeriado, TFeriadoDM.CreateAll(False, WhereString, _SoloActivos));
end;

function TFeriadoList.CreateNewObject: TPDObject;
begin
  Result := TFeriado.Create;
end;

constructor TFeriadoList.CreateAll( _SoloActivos: Boolean);
begin
  inherited Create(TFeriado,TFeriadoDM.CreateAll(false, '', _SoloActivos, TFeriadoDM._Fecha + ' desc' ) );
end;

 { TColorDeHojaDeRuta }
constructor TColorDeHojaDeRuta.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TColorDeHojaDeRutaDM);
end;

function TColorDeHojaDeRuta.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TColorDeHojaDeRuta.setTipoDeFormularioID(const Value: TObjectID);
begin
  if Assigned(FTipoDeFormulario) and  (FTipoDeFormularioID <> Value) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

 { TColorDeHojaDeRutaDM }
class function TColorDeHojaDeRutaDM.TableName : string;
begin
  Result := 'ColoresDeHojaDeRuta';
end;

class function TColorDeHojaDeRutaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TColorDeHojaDeRutaDM.ID_FieldName : string;
begin
  Result := 'ColorDeHojaDeRutaID';
end;

procedure TColorDeHojaDeRutaDM.PopulateFields(PDObject: TPDObject);
begin
  with TColorDeHojaDeRuta(PDObject) do
    begin
      StringField[_Descripcion]       := Descripcion;
      IDField[_TipoDeFormularioID]    := TipoDeFormularioID;
      BooleanField[_EsInactivo]       := EsInactivo;
      IntegerField[_ColorDeImpresion] := FColorDeImpresion;
    end;
end;

procedure TColorDeHojaDeRutaDM.PopulateObject(PDObject: TPDObject);
begin
  with TColorDeHojaDeRuta(PDObject) do
    begin
      Descripcion        := StringField[_Descripcion];
      TipoDeFormularioID := IDField[_TipoDeFormularioID];
      EsInactivo         := BooleanField[_EsInactivo];
      FColorDeImpresion  := IntegerField[_ColorDeImpresion];
    end;
end;

 { TColorDeHojaDeRutaList }
function TColorDeHojaDeRutaList.GetActual : TColorDeHojaDeRuta;
begin
  Result := TColorDeHojaDeRuta(CurrentObject);
end;

function TColorDeHojaDeRutaList.CreateNewObject: TPDObject;
begin
  Result := TColorDeHojaDeRuta.Create;
end;

constructor TColorDeHojaDeRutaList.CreateAll;
begin
  inherited Create(TColorDeHojaDeRuta,TColorDeHojaDeRutaDM.CreateAll(False));
end;

 { TTipoDeMovimientoDeStock }
constructor TTipoDeMovimientoDeStock.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeMovimientoDeStockDM);
  FEsAjusteDeMateriaPrima := null;
  FAsignaPedido           := null;
  FEsinactivo             := false;
end;

procedure TTipoDeMovimientoDeStock.SetDepositoOrigenID(Value : TObjectID);
begin
  if (Value<>FDepositoOrigenID) and Assigned(FDepositoOrigen) then
    FreeAndNil(FDepositoOrigen);

  FDepositoOrigenID := Value;

end;

procedure TTipoDeMovimientoDeStock.SetEstadoOrigenID(Value : TObjectID);
begin
  if (Value<>FEstadoOrigenID) and Assigned(FEstadoOrigen) then
    FreeAndNil(FEstadoOrigen);

  FEstadoOrigenID := Value;

end;

procedure TTipoDeMovimientoDeStock.SetDepositoDestinoID(Value : TObjectID);
begin
  if (Value<>FDepositoDestinoID) and Assigned(FDepositoDestino) then
    FreeAndNil(FDepositoDestino);

  FDepositoDestinoID := Value;

end;

procedure TTipoDeMovimientoDeStock.SetEstadoDestinoID(Value : TObjectID);
begin
  if (Value<>FEstadoDestinoID) and Assigned(FEstadoDestino) then
    FreeAndNil(FEstadoDestino);

  FEstadoDestinoID := Value;

end;

function TTipoDeMovimientoDeStock.GetDepositoOrigen : TDeposito;
begin
  if not assigned(FDepositoOrigen) then
    GetObject(TDeposito,FDepositoOrigen,DepositoOrigenID);

  Result := TDeposito(FDepositoOrigen);
end;

function TTipoDeMovimientoDeStock.GetEstadoOrigen : TEstadoDeStock;
begin
  if not assigned(FEstadoOrigen) then
    GetObject(TEstadoDeStock,FEstadoOrigen,EstadoOrigenID);

  Result := TEstadoDeStock(FEstadoOrigen);
end;

function TTipoDeMovimientoDeStock.GetDepositoDestino : TDeposito;
begin
  if not assigned(FDepositoDestino) then
    GetObject(TDeposito,FDepositoDestino,DepositoDestinoID);

  Result := TDeposito(FDepositoDestino);
end;

function TTipoDeMovimientoDeStock.GetEstadoDestino : TEstadoDeStock;
begin
  if not assigned(FEstadoDestino) then
    GetObject(TEstadoDeStock,FEstadoDestino,EstadoDestinoID);

  Result := TEstadoDeStock(FEstadoDestino);
end;
 { TTipoDeMovimientoDeStockDM }
class function TTipoDeMovimientoDeStockDM.TableName : string;
begin
  Result := 'tiposdemovimientosdestock';
end;


class function TTipoDeMovimientoDeStockDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TTipoDeMovimientoDeStockDM.ID_FieldName : string;
begin
  Result := 'TipoDeMovimientoDeStockID';
end;

procedure TTipoDeMovimientoDeStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeMovimientoDeStock(PDObject) do
    begin
      StringField[_descripcion]                       := descripcion;
      IDField[_DepositoOrigenID]                      := FDepositoOrigenID;
      BooleanField[_usaDepositoOrigenVirtualCliente]  := FusaDepositoOrigenVirtualCliente;
      IDField[_EstadoOrigenID]                        := FEstadoOrigenID;
      IDField[_DepositoDestinoID]                     := FDepositoDestinoID;
      BooleanField[_usaDepositoDestinoVirtualCliente] := FusaDepositoDestinoVirtualCliente;
      IDField[_EstadoDestinoID]                       := FEstadoDestinoID;
      BooleanField[_EsAjusteDeMateriaPrima]           := FEsAjusteDeMateriaPrima;
      BooleanField[_EsAjusteDeSemielaborados]         := FEsAjusteDeSemielaborados;
      BooleanField[_AsignaPedido]                     := FAsignaPedido;
      BooleanField[_EsInactivo]                       := FEsInactivo;
    end;
end;


procedure TTipoDeMovimientoDeStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeMovimientoDeStock(PDObject) do
    begin
      Fdescripcion                      := StringField[_descripcion];
      FDepositoOrigenID                 := IDField[_DepositoOrigenID];
      FusaDepositoOrigenVirtualCliente  := BooleanField[_usaDepositoOrigenVirtualCliente] ;
      FEstadoOrigenID                   := IDField[_EstadoOrigenID];
      FDepositoDestinoID                := IDField[_DepositoDestinoID];
      FusaDepositoDestinoVirtualCliente := BooleanField[_usaDepositoDestinoVirtualCliente] ;
      FEstadoDestinoID                  := IDField[_EstadoDestinoID];
      FEsAjusteDeMateriaPrima           := BooleanField[_EsAjusteDeMateriaPrima];
      FEsAjusteDeSemielaborados         := BooleanField[_EsAjusteDeSemielaborados];
      FAsignaPedido                     := BooleanField[_AsignaPedido];
      FEsInactivo                       := BooleanField[_EsInactivo];
    end;
end;

 { TTipoDeMovimientoDeStockList }
function TTipoDeMovimientoDeStockList.GetActual : TTipoDeMovimientoDeStock;
begin
  Result := TTipoDeMovimientoDeStock(CurrentObject);
end;

function TTipoDeMovimientoDeStockList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeMovimientoDeStock.Create;
end;

constructor TTipoDeMovimientoDeStockList.CreateAll( _SoloActivos : Boolean );
begin
  inherited Create(TTipoDeMovimientoDeStock,TTipoDeMovimientoDeStockDM.CreateAll(False, '', _SoloActivos ));
end;

 { TFormularioAccionStock }
constructor TTipoDeFormularioAccionStock.Create;
begin
  inherited;
  DMObject         := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeFormularioAccionStockDM);
  FesAjusteDeStock := False;
  FesPedido        := False;
  FesRemito        := False;
  FesHojaDeRuta    := False;
end;

procedure TTipoDeFormularioAccionStock.SetestadoDePedidoItemID(Value : TObjectID);
begin
  if (Value<>FestadoDePedidoItemID) and Assigned(FestadoDePedidoItem) then
    FreeAndNil(FestadoDePedidoItem);

  FestadoDePedidoItemID := Value;
end;

procedure TTipoDeFormularioAccionStock.SetEstadoDePedidoItemOrigenID(const Value: TObjectID);
begin
  if (Value <> FEstadoDePedidoItemOrigenID) and Assigned(FEstadoDePedidoItemOrigen) then
    FreeAndNil(FEstadoDePedidoItemOrigen);
  FEstadoDePedidoItemOrigenID := Value;
end;

function TTipoDeFormularioAccionStock.GetestadoDePedidoItem : TEstadoDePedidoDeVentaItem;
begin
  if not assigned(FestadoDePedidoItem) then
    GetObject(TEstadoDePedidoDeVentaItem,FestadoDePedidoItem,estadoDePedidoItemID);

  Result := TEstadoDePedidoDeVentaItem(FestadoDePedidoItem);
end;

function TTipoDeFormularioAccionStock.GetEstadoDePedidoItemOrigen: TEstadoDePedidoDeVentaItem;
begin
  if not assigned(FEstadoDePedidoItemOrigen) then
    GetObject(TEstadoDePedidoDeVentaItem,FEstadoDePedidoItemOrigen,EstadoDePedidoItemOrigenID);
  Result := TEstadoDePedidoDeVentaItem(FEstadoDePedidoItemOrigen);
end;

procedure TTipoDeFormularioAccionStock.SetestadoDeRemitoID(Value : TObjectID);
begin
  if (Value<>FestadoDeRemitoID) and Assigned(FestadoDeRemito) then
    FreeAndNil(FestadoDeRemito);
  FestadoDeRemitoID := Value;
end;

procedure TTipoDeFormularioAccionStock.SetEstadoDeRemitoOrigenID(const Value: TObjectID);
begin
  if (Value<>FEstadoDeRemitoOrigenID) and Assigned(FEstadoDeRemitoOrigen) then
    FreeAndNil(FEstadoDeRemitoOrigen);
  FEstadoDeRemitoOrigenID := Value;
end;

function TTipoDeFormularioAccionStock.GetestadoDeRemito : TEstadoDeRemito;
begin
  if not assigned(FestadoDeRemito) then
    GetObject(TEstadoDeRemito,FestadoDeRemito,estadoDeRemitoID);
  Result := TEstadoDeRemito(FestadoDeRemito);
end;

function TTipoDeFormularioAccionStock.GetEstadoDeRemitoOrigen: TEstadoDeRemito;
begin
  if not assigned(FEstadoDeRemitoOrigen) then
    GetObject(TEstadoDeRemito,FEstadoDeRemitoOrigen, EstadoDeRemitoOrigenID);
  Result := TEstadoDeRemito(FEstadoDeRemitoOrigen);
end;

function TTipoDeFormularioAccionStock.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not Assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion,FPasoDeFabricacion,PasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

procedure TTipoDeFormularioAccionStock.SetTipoDeMovimientoDeStockID(Value : TObjectID);
begin
  if (Value <> FTipoDeMovimientoDeStockID) and Assigned(FTipoDeMovimientoDeStock) then
    FreeAndNil(FTipoDeMovimientoDeStock);
  FTipoDeMovimientoDeStockID := Value;
end;

function TTipoDeFormularioAccionStock.GetTipoDeMovimientoDeStock : TTipoDeMovimientoDeStock;
begin
  if not assigned(FTipoDeMovimientoDeStock) then
    GetObject(TTipoDeMovimientoDeStock,FTipoDeMovimientoDeStock,TipoDeMovimientoDeStockID);
  Result := TTipoDeMovimientoDeStock(FTipoDeMovimientoDeStock);
end;
 { TFormularioAccionStockDM }
class function TTipoDeFormularioAccionStockDM.TableName : string;
begin
  Result := 'TipoDeFormularioAccionesDeStock';
end;


class function TTipoDeFormularioAccionStockDM.ID_FieldName : string;
begin
  Result := 'TipoDeFormularioAccionStockID';
end;

procedure TTipoDeFormularioAccionStockDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormularioAccionStock(PDObject) do
    begin
      IDField[_TipoDeFormularioID]        := FTipoDeFormularioID;
      BooleanField[_esAjusteDeStock]      := FesAjusteDeStock;
      BooleanField[_esPedido]             := FesPedido;
      BooleanField[_esRemito]             := FesRemito;
      BooleanField[_esHojaDeRuta]         := FesHojaDeRuta;
      IDField[_estadoDePedidoItemID]      := FestadoDePedidoItemID;
      IDField[_EstadoDeRemitoOrigenID]    := FEstadoDeRemitoOrigenID;
      IDField[_estadoDeRemitoID]          := FestadoDeRemitoID;
      IDField[_PasoDeFabricacionID]       := FPasoDeFabricacionID;
      IDField[_TipoDeMovimientoDeStockID] := FTipoDeMovimientoDeStockID;
      StringField[_Comentario]            := Comentario;
    end;
end;


procedure TTipoDeFormularioAccionStockDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormularioAccionStock(PDObject) do
    begin
      FTipoDeFormularioID        := IDField[_TipoDeFormularioID];
      FesAjusteDeStock           := BooleanField[_esAjusteDeStock];
      FesPedido                  := BooleanField[_esPedido];
      FesRemito                  := BooleanField[_esRemito];
      FesHojaDeRuta              := BooleanField[_esHojaDeRuta];
      FestadoDePedidoItemID      := IDField[_estadoDePedidoItemID];
      FEstadoDeRemitoOrigenID    := IDField[_EstadoDeRemitoOrigenID];
      FestadoDeRemitoID          := IDField[_estadoDeRemitoID];
      FPasoDeFabricacionID       := IDField[_PasoDeFabricacionID];
      FTipoDeMovimientoDeStockID := IDField[_TipoDeMovimientoDeStockID];
      FComentario                := StringField[_Comentario];
    end;
end;

 { TFormularioAccionStockList }
function TTipoDeFormularioAccionStockList.GetActual : TTipoDeFormularioAccionStock;
begin
  Result := TTipoDeFormularioAccionStock(CurrentObject);
end;

constructor TTipoDeFormularioAccionStockList.CreateByTipoDeFormulario(_TF: TTipoDeFormulario);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioAccionStockDM._TipoDeFormularioID + '=' + IntToStr(_TF.ID);
  end;
begin
  inherited Create(TTipoDeFormularioAccionStock, TTipoDeFormularioAccionStockDM.CreateAll( False, WhereString ));
end;

constructor TTipoDeFormularioAccionStockList.CreateByTipoDeFormularioYPasoDeFabricacionID(_TF: TTipoDeFormulario; _PFID: TObjectID);
  Function WhereString : String;
  begin
    Result := TTipoDeFormularioAccionStockDM._TipoDeFormularioID + '=' + IntToStr(_TF.ID);
    Result := Result + ' and ' + TTipoDeFormularioAccionStockDM._PasoDeFabricacionID + '=' + IntToStr(_PFID);
  end;
begin
  inherited Create(TTipoDeFormularioAccionStock, TTipoDeFormularioAccionStockDM.CreateAll( False, WhereString ));
end;



function TTipoDeFormularioAccionStockList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormularioAccionStock.Create;
end;

function TTipoDeFormularioAccionStockList.FindEstadoDePedidoID(_EID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result :=  ( Actual.estadodePedidoItemID = _EID );
    except
      Result := False;
    end;
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

function TTipoDeFormularioAccionStockList.FindEstadoDeRemitoID(_EID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result :=  ( Actual.estadoDeRemitoID = _EID );
    except
      Result := False;
    end;
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

function TTipoDeFormularioAccionStockList.FindEstadoDeRemitoOrigenYDestinoID(_EOID, _EDID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result :=  ( Actual.EstadoDeRemitoOrigenID = _EOID ) and ( Actual.EstadoDeRemitoID = _EDID );
    except
      Result := False;
    end;
    if not Result then
      next;
  end;
  if IsLast then
    First;
end;

function TTipoDeFormularioAccionStockList.FindPasoDeFabricacionID(_FID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
  begin
    try
      Result :=  ( Actual.PasoDeFabricacionID = _FID );
    except
      Result := False;
    end;
    if not Result then
      Next;
  end;
  if IsLast then
    First;
end;

constructor TTipoDeFormularioAccionStockList.CreateAll;
begin
  inherited Create(TTipoDeFormularioAccionStock,TTipoDeFormularioAccionStockDM.CreateAll(False));
end;

 { TCentroDeFacturacion }
function TCentroDeFacturacion.GetCais: TCentroDeFacturacionCAIList;
begin
  if not assigned(FCais) then
    GetList(TPDList(FCais), TPDList(TCentroDeFacturacionCAIList.CreateByCentroDeFacturacion(self)));
  Result := TCentroDeFacturacionCAIList(FCais);
end;

function TCentroDeFacturacion.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field( 'CentroFacturacion', 'CodigoCentroFacturacion =' + QuotedStr( Codigo ) , 'codigoInternoCentroFacturacion');
  Result := FCodigoInternoSifab;
end;

function TCentroDeFacturacion.GetDescriptibleAbreviadoListClass;
begin
  Result := TCentroDeFacturacionList;
end;

constructor TCentroDeFacturacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCentroDeFacturacionDM);
  SaveSQLLog := True;
  RellenarCodigo := true;
  LargoCodigo := 4;
  FCodigoInternoSifab := Null;
end;

 { TCentroDeFacturacionDM }
class function TCentroDeFacturacionDM.TableName : string;
begin
  Result := 'CentrosDeFacturacion';
end;


class function TCentroDeFacturacionDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TCentroDeFacturacionDM.ID_FieldName : string;
begin
  Result := 'CentroDeFacturacionID';
end;

procedure TCentroDeFacturacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TCentroDeFacturacion(PDObject) do
    begin
      StringField[_Descripcion]    := Descripcion;
      StringField[_Codigo]         := Codigo;
      BooleanField[_EsElectronico] := EsElectronico;
      BooleanField[_EsDefault]     := EsDefault;
      BooleanField[_EsInactivo]    := EsInactivo;
    end;
end;


procedure TCentroDeFacturacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TCentroDeFacturacion(PDObject) do
    begin
      FDescripcion   := StringField[_Descripcion];
      FCodigo        := StringField[_Codigo];
      FEsElectronico := BooleanField[_EsElectronico];
      FEsDefault     := BooleanField[_EsDefault];
      FEsInactivo    := BooleanField[_EsInactivo];
    end;
end;

 { TCentroDeFacturacionList }
function TCentroDeFacturacionList.GetActual : TCentroDeFacturacion;
begin
  Result := TCentroDeFacturacion(CurrentObject);
end;

function TCentroDeFacturacionList.CreateNewObject: TPDObject;
begin
  Result := TCentroDeFacturacion.Create;
end;

constructor TCentroDeFacturacionList.CreateAll;
begin
  inherited Create(TCentroDeFacturacion,TCentroDeFacturacionDM.CreateAll(False));
end;

 { TTipoDeFormularioEmailFirma }
constructor TTipoDeFormularioEmailFirma.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeFormularioEmailFirmaDM);
  FRutaDeArchivo := null;
end;

function TTipoDeFormularioEmailFirma.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

function TTipoDeFormularioEmailFirma.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDeFormularioEmailFirma.SetResourceLanguageID(Value : TObjectID);
begin
  if (Value<>FResourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FResourceLanguageID := Value;
end;
 procedure TTipoDeFormularioEmailFirma.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value<>FTipoDeFormularioID) and Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

{ TTipoDeFormularioEmailFirmaDM }
class function TTipoDeFormularioEmailFirmaDM.TableName : string;
begin
  Result := 'TipoDeFormularioEmailFirmas';
end;


class function TTipoDeFormularioEmailFirmaDM.ID_FieldName : string;
begin
  Result := 'TipoDeFormularioEmailFirmaID';
end;

procedure TTipoDeFormularioEmailFirmaDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailFirma(PDObject) do
    begin
      IDField[_TipoDeFormularioID] := FTipoDeFormularioID;
      IDField[_ResourceLanguageID] := FResourceLanguageID;
      StringField[_RutaDeArchivo]  := FRutaDeArchivo;
    end;
end;


procedure TTipoDeFormularioEmailFirmaDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailFirma(PDObject) do
    begin
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FResourceLanguageID := IDField[_ResourceLanguageID];
      FRutaDeArchivo      := StringField[_RutaDeArchivo];
    end;
end;

 { TTipoDeFormularioEmailFirmaList }
function TTipoDeFormularioEmailFirmaList.GetActual : TTipoDeFormularioEmailFirma;
begin
  Result := TTipoDeFormularioEmailFirma(CurrentObject);
end;

constructor TTipoDeFormularioEmailFirmaList.CreateByTipoDeFormulario(_T: TTipoDeFormulario);
Function WhereString : String;
  begin
    Result := TTipoDeFormularioEmailFirmaDM._TipoDeFormularioID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTipoDeFormularioEmailFirma, TTipoDeFormularioEmailFirmaDM.CreateAll(False, WhereString));
end;

function TTipoDeFormularioEmailFirmaList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormularioEmailFirma.Create;
end;

function TTipoDeFormularioEmailFirmaList.FindCodigoIdioma(_C: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ResourceLanguage.codigo = _C );
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

constructor TTipoDeFormularioEmailFirmaList.CreateAll;
begin
  inherited Create(TTipoDeFormularioEmailFirma,TTipoDeFormularioEmailFirmaDM.CreateAll(False));
end;

 { TTipoDeFormularioEmailCuerpo }
constructor TTipoDeFormularioEmailCuerpo.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeFormularioEmailCuerpoDM);
  FRutaDeArchivo := null;
end;

function TTipoDeFormularioEmailCuerpo.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

function TTipoDeFormularioEmailCuerpo.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDeFormularioEmailCuerpo.SetResourceLanguageID(Value : TObjectID);
begin
  if (Value<>FResourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FResourceLanguageID := Value;
end;
 procedure TTipoDeFormularioEmailCuerpo.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value<>FTipoDeFormularioID) and Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

{ TTipoDeFormularioEmailCuerpoDM }
class function TTipoDeFormularioEmailCuerpoDM.TableName : string;
begin
  Result := 'TipoDeFormularioEmailCuerpos';
end;


class function TTipoDeFormularioEmailCuerpoDM.ID_FieldName : string;
begin
  Result := 'TipoDeFormularioEmailCuerpoID';
end;

procedure TTipoDeFormularioEmailCuerpoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailCuerpo(PDObject) do
    begin
      IDField[_TipoDeFormularioID] := FTipoDeFormularioID;
      IDField[_ResourceLanguageID] := FResourceLanguageID;
      StringField[_RutaDeArchivo]  := RutaDeArchivo;
    end;
end;


procedure TTipoDeFormularioEmailCuerpoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailCuerpo(PDObject) do
    begin
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FResourceLanguageID := IDField[_ResourceLanguageID];
      FRutaDeArchivo      := StringField[_RutaDeArchivo];
    end;
end;

 { TTipoDeFormularioEmailCuerpoList }
function TTipoDeFormularioEmailCuerpoList.GetActual : TTipoDeFormularioEmailCuerpo;
begin
  Result := TTipoDeFormularioEmailCuerpo(CurrentObject);
end;

constructor TTipoDeFormularioEmailCuerpoList.CreateByTipoDeFormulario(_T: TTipoDeFormulario);
Function WhereString : String;
  begin
    Result := TTipoDeFormularioEmailCuerpoDM._TipoDeFormularioID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTipoDeFormularioEmailCuerpo, TTipoDeFormularioEmailCuerpoDM.CreateAll(False, WhereString));
end;

function TTipoDeFormularioEmailCuerpoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormularioEmailCuerpo.Create;
end;

function TTipoDeFormularioEmailCuerpoList.FindCodigoIdioma(_C: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ResourceLanguage.codigo = _C );
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

constructor TTipoDeFormularioEmailCuerpoList.CreateAll;
begin
  inherited Create(TTipoDeFormularioEmailCuerpo,TTipoDeFormularioEmailCuerpoDM.CreateAll(False));
end;

 { TTipoDeFormularioEmailEncabezado }
constructor TTipoDeFormularioEmailEncabezado.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeFormularioEmailEncabezadoDM);
  FRutaDeArchivo := null;
end;

function TTipoDeFormularioEmailEncabezado.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

function TTipoDeFormularioEmailEncabezado.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDeFormularioEmailEncabezado.SetResourceLanguageID(Value : TObjectID);
begin
  if (Value<>FResourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FResourceLanguageID := Value;
end;
 procedure TTipoDeFormularioEmailEncabezado.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value<>FTipoDeFormularioID) and Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

{ TTipoDeFormularioEmailEncabezadoDM }
class function TTipoDeFormularioEmailEncabezadoDM.TableName : string;
begin
  Result := 'TipoDeFormularioEmailEncabezados';
end;


class function TTipoDeFormularioEmailEncabezadoDM.ID_FieldName : string;
begin
  Result := 'TipoDeFormularioEmailEncabezadoID';
end;

procedure TTipoDeFormularioEmailEncabezadoDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailEncabezado(PDObject) do
    begin
      IDField[_TipoDeFormularioID] := FTipoDeFormularioID;
      IDField[_ResourceLanguageID] := FResourceLanguageID;
      StringField[_RutaDeArchivo]  := FRutaDeArchivo;
    end;
end;


procedure TTipoDeFormularioEmailEncabezadoDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailEncabezado(PDObject) do
    begin
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FResourceLanguageID := IDField[_ResourceLanguageID];
      FRutaDeArchivo      := StringField[_RutaDeArchivo];
    end;
end;

 { TTipoDeFormularioEmailEncabezadoList }
function TTipoDeFormularioEmailEncabezadoList.GetActual : TTipoDeFormularioEmailEncabezado;
begin
  Result := TTipoDeFormularioEmailEncabezado(CurrentObject);
end;

constructor TTipoDeFormularioEmailEncabezadoList.CreateByTipoDeFormulario(_T: TTipoDeFormulario);
Function WhereString : String;
  begin
    Result := TTipoDeFormularioEmailEncabezadoDM._TipoDeFormularioID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTipoDeFormularioEmailEncabezado, TTipoDeFormularioEmailEncabezadoDM.CreateAll(False, WhereString));
end;

function TTipoDeFormularioEmailEncabezadoList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormularioEmailEncabezado.Create;
end;

function TTipoDeFormularioEmailEncabezadoList.FindCodigoIdioma(_C: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ResourceLanguage.codigo = _C );
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

constructor TTipoDeFormularioEmailEncabezadoList.CreateAll;
begin
  inherited Create(TTipoDeFormularioEmailEncabezado,TTipoDeFormularioEmailEncabezadoDM.CreateAll(False));
end;

 { TTipoDeFormularioEmailItem }
constructor TTipoDeFormularioEmailItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeFormularioEmailItemDM);
  FRutaDeArchivo := null;
end;

function TTipoDeFormularioEmailItem.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

function TTipoDeFormularioEmailItem.GetTipoDeFormulario: TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario, FTipoDeFormulario, FTipoDeFormularioID);
  Result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TTipoDeFormularioEmailItem.SetResourceLanguageID(Value : TObjectID);
begin
  if (Value<>FResourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FResourceLanguageID := Value;
end;
 procedure TTipoDeFormularioEmailItem.SetTipoDeFormularioID(const Value: TObjectID);
begin
  if (Value<>FTipoDeFormularioID) and Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);
  FTipoDeFormularioID := Value;
end;

{ TTipoDeFormularioEmailItemDM }
class function TTipoDeFormularioEmailItemDM.TableName : string;
begin
  Result := 'TipoDeFormularioEmailItems';
end;


class function TTipoDeFormularioEmailItemDM.ID_FieldName : string;
begin
  Result := 'TipoDeFormularioEmailItemID';
end;

procedure TTipoDeFormularioEmailItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailItem(PDObject) do
    begin
      IDField[_TipoDeFormularioID] := FTipoDeFormularioID;
      IDField[_ResourceLanguageID] := FResourceLanguageID;
      StringField[_RutaDeArchivo]  := FRutaDeArchivo;
      BooleanField[_EsParaKit]     := FEsParaKit;
    end;
end;


procedure TTipoDeFormularioEmailItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeFormularioEmailItem(PDObject) do
    begin
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FResourceLanguageID := IDField[_ResourceLanguageID];
      FRutaDeArchivo      := StringField[_RutaDeArchivo];
      FEsParaKit          := StringField[_EsParaKit];
    end;
end;

 { TTipoDeFormularioEmailItemList }
function TTipoDeFormularioEmailItemList.GetActual : TTipoDeFormularioEmailItem;
begin
  Result := TTipoDeFormularioEmailItem(CurrentObject);
end;

constructor TTipoDeFormularioEmailItemList.CreateByTipoDeFormulario(_T: TTipoDeFormulario);
Function WhereString : String;
  begin
    Result := TTipoDeFormularioEmailItemDM._TipoDeFormularioID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTipoDeFormularioEmailItem, TTipoDeFormularioEmailItemDM.CreateAll(False, WhereString));
end;

function TTipoDeFormularioEmailItemList.CreateNewObject: TPDObject;
begin
  Result := TTipoDeFormularioEmailItem.Create;
end;

function TTipoDeFormularioEmailItemList.FindCodigoIdioma(_C: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ResourceLanguage.codigo = _C );
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

function TTipoDeFormularioEmailItemList.FindCodigoIdiomaAndEsParaKit(_C: String; _EsParaKit: Boolean): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.ResourceLanguage.codigo = _C ) and (Self.Actual.EsParaKit = _EsParaKit);
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

constructor TTipoDeFormularioEmailItemList.CreateAll;
begin
  inherited Create(TTipoDeFormularioEmailItem,TTipoDeFormularioEmailItemDM.CreateAll(False));
end;

 { TProductoRuteoDefault }
constructor TProductoRuteoDefault.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TProductoRuteoDefaultDM);
  FEsUltimoPaso := null;
  FSecuencia := null;
  FCantidadProcesada := 0;
end;

function TProductoRuteoDefault.GetHerramental: THerramental;
begin
  if not Assigned(FHerramental) then
    GetObject(THerramental, FHerramental, HerramentalID);
  Result := THerramental(FHerramental);
end;

function TProductoRuteoDefault.GetOperaciones: TProductoOperacionList;
begin
if not Assigned(FOperaciones) then
    GetList(TPDList(FOperaciones), TPDList(TProductoOperacionList.CreateByProductoRuteoDefault(Self)));
  Result := TProductoOperacionList(FOperaciones);
end;

function TProductoRuteoDefault.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not Assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, PasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function TProductoRuteoDefault.GetProducto: TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto, FProducto, ProductoID);
  Result := TProducto(FProducto);
end;

function TProductoRuteoDefault.GetRecurso: TRecurso;
begin
  if not Assigned(FRecurso) then
    GetObject(TRecurso, FRecurso, RecursoID);
  Result := TRecurso(FRecurso);
end;

procedure TProductoRuteoDefault.SetHerramentalID(const Value: TObjectID);
begin
  if (Value<>FHerramentalID) and Assigned(FHerramental) then
    FreeAndNil(FHerramental);
  FHerramentalID := Value;
end;

procedure TProductoRuteoDefault.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;

procedure TProductoRuteoDefault.SetProductoID(Value : TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);
  FProductoID := Value;
end;

 procedure TProductoRuteoDefault.SetRecursoID(const Value: TObjectID);
begin
  if (Value<>FRecursoID) and Assigned(FRecurso) then
    FreeAndNil(FRecurso);
  FRecursoID := Value;
end;

 { TProductoRuteoDefaultDM }
class function TProductoRuteoDefaultDM.TableName : string;
begin
  Result := 'ProductoRuteosDefault';
end;

class function TProductoRuteoDefaultDM.ID_FieldName : string;
begin
  Result := 'ProductoRuteoDefaultID';
end;


procedure TProductoRuteoDefaultDM.PopulateFields(PDObject: TPDObject);
begin
  with TProductoRuteoDefault(PDObject) do
    begin
      IDField[_ProductoID]             := FProductoID;
      IDField[_PasoDeFabricacionID] := FPasoDeFabricacionID;
      IDField[_RecursoID]           := FRecursoID;
      IDField[_HerramentalID]          := FHerramentalID;
      IntegerField[_CantidadProcesada] := FCantidadProcesada;
      BooleanField[_EsUltimoPaso]      := FEsUltimoPaso;
      IntegerField[_Secuencia]         := FSecuencia;
    end;
end;

procedure TProductoRuteoDefaultDM.PopulateObject(PDObject: TPDObject);
begin
  with TProductoRuteoDefault(PDObject) do
    begin
      FProductoID          := IDField[_ProductoID];
      FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
      FRecursoID           := IDField[_RecursoID];
      FHerramentalID       := IDField[_HerramentalID];
      FCantidadProcesada   := IntegerField[_CantidadProcesada];
      FEsUltimoPaso := BooleanField[_EsUltimoPaso];
      FSecuencia := IntegerField[_Secuencia];
    end;
end;

 { TProductoRuteoDefaultList }
function TProductoRuteoDefaultList.GetActual : TProductoRuteoDefault;
begin
  Result := TProductoRuteoDefault(CurrentObject);
end;

constructor TProductoRuteoDefaultList.CreateByProducto(_P: TProducto);
Function WhereString : String;
  begin
    Result := TProductoRuteoDefaultDM._ProductoID + ' = ' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TProductoRuteoDefault,TProductoRuteoDefaultDM.CreateAll(False, WhereString));
end;

function TProductoRuteoDefaultList.CreateNewObject: TPDObject;
begin
  Result := TProductoRuteoDefault.Create;
end;

function TProductoRuteoDefaultList.FindPasoDeFabricacion(_PF: TPasoDeFabricacion): Boolean;
begin
  Result := False;
  if (Count = 0) then
    Exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.PasoDeFabricacionID = _PF.ID );
      except
        Result := False;
      end;
      if not Result then
        Next;
    end;
  if IsLast then
    First;
end;

constructor TProductoRuteoDefaultList.CreateAll;
begin
  inherited Create(TProductoRuteoDefault,TProductoRuteoDefaultDM.CreateAll(False));
end;

 { TPasosDeFabricacion }
function TPasoDeFabricacion.GetDepositoMateriaPrima: TDeposito;
begin
  if Not assigned( FDepositoMateriaPrima ) then
    GetObject(TDeposito, FDepositoMateriaPrima, DepositoMateriaPrimaID);

  Result := TDeposito( FDepositoMateriaPrima );
end;


function TPasoDeFabricacion.GetDepositoMateriaPrimaID: TObjectID;
begin
  if ( FDepositoMateriaPrimaID = NullID) and (SectorID <>NullID) and ( Sector.Depositos.count > 0 ) then
    begin
      Sector.Depositos.First;
      while not Sector.Depositos.IsLast do
        begin
          if (not Sector.Depositos.Actual.EsInactivo) and Sector.Depositos.Actual.esDepositoMateriaPrima then
            begin
              FDepositoMateriaPrimaID := Sector.Depositos.Actual.ID;
              Break;
            end;
          Sector.Depositos.Next;
        end;
    end;
  Result := FDepositoMateriaPrimaID;
end;

function TPasoDeFabricacion.GetDepositoProductosTerminados: TDeposito;
begin
  if Not assigned( FDepositoProductosTerminados ) then
    GetObject(TDeposito, FDepositoProductosTerminados, DepositoProductosTerminadosID);

  Result := TDeposito( FDepositoProductosTerminados );

end;


function TPasoDeFabricacion.GetDepositoProductosTerminadosID: TObjectID;
begin
  if ( FDepositoProductosTerminadosID = NullID) and (SectorID <>NullID) and ( Sector.Depositos.count > 0 ) then
    begin
      Sector.Depositos.First;
      while not Sector.Depositos.IsLast do
        begin
          if (not Sector.Depositos.Actual.EsInactivo) and Sector.Depositos.Actual.esDepositoProductosTerminados then
            begin
              FDepositoProductosTerminadosID := Sector.Depositos.Actual.ID;
              Break;
            end;
          Sector.Depositos.Next;
        end;
    end;
  Result := FDepositoProductosTerminadosID;
end;

function TPasoDeFabricacion.GetDepositoSemiElaborado: TDeposito;
begin
  if Not assigned( FDepositoSemiElaborado ) then
    GetObject(TDeposito, FDepositoSemiElaborado, DepositoSemiElaboradoID);

  Result := TDeposito( FDepositoSemiElaborado );
end;


function TPasoDeFabricacion.GetDepositoSemiElaboradoID: TObjectID;
begin
  if ( FDepositoSemiElaboradoID = NullID) and (SectorID <>NullID) and ( Sector.Depositos.count > 0 ) then
    begin
      Sector.Depositos.First;
      while not Sector.Depositos.IsLast do
        begin
          if (not Sector.Depositos.Actual.EsInactivo) and Sector.Depositos.Actual.EsDepositoSemiElaborado then
            begin
              FDepositoSemiElaboradoID := Sector.Depositos.Actual.ID;
              Break;
            end;
          Sector.Depositos.Next;
        end;
    end;
  Result := FDepositoSemiElaboradoID;
end;

function TPasoDeFabricacion.GetDescriptibleAbreviadoListClass;
begin
  Result := TPasoDeFabricacionList;
end;

function TPasoDeFabricacion.GetMotivosDeAtraso: TPasoDeFabricacionMotivoDeAtrasoList;
begin
  If not Assigned(FMotivosDeAtraso) Then
    GetList(TPDList(FMotivosDeAtraso), TPDList(TPasoDeFabricacionMotivoDeAtrasoList.CreateByPasoDeFabricacion(Self)));
  Result :=  FMotivosDeAtraso;
end;

function TPasoDeFabricacion.GetOperaciones: TPasoDeFabricacionOperacionList;
begin
  If not Assigned(FOperaciones) Then
    GetList(TPDList(FOperaciones), TPDList(TPasoDeFabricacionOperacionList.CreateByPasoDeFabricacion(Self)));
  Result :=  FOperaciones;
end;

function TPasoDeFabricacion.GetRecursosDisponibles: TPasoDeFabricacionRecursoList;
begin
  If not Assigned(FRecursosDisponibles) Then
    GetList(TPDList(FRecursosDisponibles), TPDList(TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacion(Self)));
  Result := FRecursosDisponibles;
end;

function TPasoDeFabricacion.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, SectorID);
  Result := TSector(FSector);
end;

procedure TPasoDeFabricacion.SetSectorID(const Value: TObjectID);
begin
  if ( FSectorID <> Value) and Assigned( FSector ) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

constructor TPasoDeFabricacion.Create;
begin
  inherited;
  DMObject                       := Aplicacion.DMPRovider.GetGlobalDM(TPasoDeFabricacionDM);
  FLeadTimeDefault               := 0;
  FLeadTimeDefaultNoConforme     := 0;
  FConsumeMP                     := False;
  FRequiereStockAsignado         := False;
  FDepositoSemiElaborado         := Nil;
  FDepositoMateriaPrima          := Nil;
  FDepositoProductosTerminados   := Nil;
  FDepositoSemiElaboradoID       := NullID;
  FDepositoMateriaPrimaID        := NullID;
  FDepositoProductosTerminadosID := NullID;
end;
 { TPasosDeFabricacionDM }
class function TPasoDeFabricacionDM.TableName : string;
begin
  Result := 'PasosDeFabricacion';
end;

class function TPasoDeFabricacionDM.EsInactivo_FieldName: string;
begin
  Result := 'EsInactivo';
end;

class function TPasoDeFabricacionDM.ID_FieldName : string;
begin
  Result := 'PasoDeFabricacionID';
end;

procedure TPasoDeFabricacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TPasoDeFabricacion(PDObject) do
    begin
      StringField[_Descripcion]                := Descripcion;
      StringField[_Codigo]                     := Codigo;
      BooleanField[_EsInactivo]                := FEsInactivo;
      BooleanField[_FueraDeCircuito]           := FueraDeCircuito;
      BooleanField[_RequiereArbolCompleto]     := FRequiereArbolCompleto;
      BooleanField[_BuscarEnPasosSiguientes]   := FBuscarEnPasosSiguientes;
      BooleanField[_EsPasoDeCalidad]           := FEsPasoDeCalidad;
      IDField[_SectorID]                       := FSectorID;
      IntegerField[_LeadTimeDefault]           := FLeadTimeDefault;
      IntegerField[_LeadTimeDefaultNoConforme] := FLeadTimeDefaultNoConforme;
      BooleanField[_ConsumeMP]                 := ConsumeMP;
      BooleanField[_RealizaAjusteDeStock]      := RealizaAjusteDeStock;
      BooleanField[_RequiereStockAsignado]     := RequiereStockAsignado;
    end;
end;


procedure TPasoDeFabricacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TPasoDeFabricacion(PDObject) do
    begin
      Descripcion                := StringField[_Descripcion];
      Codigo                     := StringField[_Codigo];
      FEsInactivo                := BooleanField[_EsInactivo];
      FFueraDeCircuito           := BooleanField[_FueraDeCircuito];
      FRequiereArbolCompleto     := BooleanField[_RequiereArbolCompleto];
      FBuscarEnPasosSiguientes   := BooleanField[_BuscarEnPasosSiguientes];
      FEsPasoDeCalidad           := BooleanField[_EsPasoDeCalidad];
      FSectorID                  := IDField[_SectorID];
      FLeadTimeDefault           := IntegerField[_LeadTimeDefault];
      FLeadTimeDefaultNoConforme := IntegerField[_LeadTimeDefaultNoConforme];
      fConsumeMP                 := BooleanField[_ConsumeMP];
      FRealizaAjusteDeStock      := BooleanField[_RealizaAjusteDeStock];
      FRequiereStockAsignado     := BooleanField[_RequiereStockAsignado];
    end;
end;

 { TPasosDeFabricacionList }
function TPasoDeFabricacionList.GetActual : TPasoDeFabricacion;
begin
  Result := TPasoDeFabricacion(CurrentObject);
end;

function TPasoDeFabricacionList.CreateNewObject: TPDObject;
begin
  Result := TPasoDeFabricacion.Create;
end;

constructor TPasoDeFabricacionList.CreateAll(_SoloActivos: Boolean ; IncluyeFueraDeCircuito : Boolean);
  Function WhereString : String;
  begin
    if not IncluyeFueraDeCircuito then
      Result := TPasoDeFabricacionDM._FueraDeCircuito + ' =0';
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll( False, WhereString,_SoloActivos,  TPasoDeFabricacionDM._Codigo));
end;

constructor TPasoDeFabricacionList.CreateByRequiereArbolCompleto(_SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionDM._RequiereArbolCompleto + ' = 1';
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll(False, WhereString, _SoloActivos));
end;

constructor TPasoDeFabricacionList.CreateByUsuario(_SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' in ( Select ' +
    TUsuarioPasoDeFabricacionDM.TableName + '.' + TUsuarioPasoDeFabricacionDM._PasoDeFabricacionID + ' from ' + TUsuarioPasoDeFabricacionDM.TableName +
    ' where ' + TUsuarioPasoDeFabricacionDM.TableName + '.' + TUsuarioPasoDeFabricacionDM._UsuarioID + '=' + IntToStr( Aplicacion.Sesion.Usuario.ID ) + ')';
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TPasoDeFabricacionList.CreateByUsuarioAndCodigoLike(_Cod: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM.ID_FieldName + ' in ( Select ' +
    TUsuarioPasoDeFabricacionDM.TableName + '.' + TUsuarioPasoDeFabricacionDM._PasoDeFabricacionID + ' from ' + TUsuarioPasoDeFabricacionDM.TableName +
    ' where ' + TUsuarioPasoDeFabricacionDM.TableName + '.' + TUsuarioPasoDeFabricacionDM._UsuarioID + '=' + IntToStr( Aplicacion.Sesion.Usuario.ID ) + ')';
    Result := Result + ' And ' + TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._Codigo + ' like ' + QuotedStr(_Cod+'%');
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TPasoDeFabricacionList.CreateEmpty;
begin
  inherited Create(TPasoDeFabricacion, TPasoDeFabricacionDM.CreateEmpty  );
end;

constructor TPasoDeFabricacionList.CreateByCodigoAndRequiereArbolCompleto(_Cod: String; _SoloActivos: Boolean);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._RequiereArbolCompleto + ' = 1 And '+ TPasoDeFabricacionDM.TableName + '.' + TPasoDeFabricacionDM._Codigo + ' like ' + QuotedStr(_Cod+'%');
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll(False, WhereString, _SoloActivos ));
end;

constructor TPasoDeFabricacionList.CreateByCodigos(_Codigos: String; _SoloActivos : Boolean);
  function WhereString: String;
  begin
    Result := '('+TPasoDeFabricacionDM.TableName+'.'+ TPasoDeFabricacionDM._Codigo + ' in (' + _Codigos + ') Or ' + TPasoDeFabricacionDM.TableName+'.'+TPasoDeFabricacionDM._FueraDeCircuito + ' = 1 ' +')';
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll( False, WhereString, _soloActivos ));
end;

Constructor TPasoDeFabricacionList.CreateByIDs(_IDs: String);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionDM.ID_FieldName + ' in (' + _IDs + ') Or ' + TPasoDeFabricacionDM._FueraDeCircuito + ' = 1 ';
  end;
begin
  inherited Create(TPasoDeFabricacion,TPasoDeFabricacionDM.CreateAll(False, WhereString));
end;

 { TArticuloPasoDeFabricacion }
constructor TArticuloPasoDeFabricacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TArticuloPasoDeFabricacionDM);
  SaveSQLLog := True;
  FTiempo := null;
end;

procedure TArticuloPasoDeFabricacion.SetTiempoUnidadDeMedidaID(Value : TObjectID);
begin
  if (Value<>FTiempoUnidadDeMedidaID) and Assigned(FTiempoUnidadDeMedida) then
    FreeAndNil(FTiempoUnidadDeMedida);

  FTiempoUnidadDeMedidaID := Value;

end;

procedure TArticuloPasoDeFabricacion.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);

  FPasoDeFabricacionID := Value;

end;

function TArticuloPasoDeFabricacion.GetArticulo: TArticulo;
begin
  if not Assigned(FArticulo) then
    GetObject(TArticulo, FArticulo, FArticuloID);
  Result := TArticulo(FArticulo);
end;

function TArticuloPasoDeFabricacion.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not Assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, FPasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function TArticuloPasoDeFabricacion.GetTiempoEnSegundos: TReal;
begin
  Result := Tiempo * TiempoUnidadDeMedida.Equivalencia;
end;

function TArticuloPasoDeFabricacion.GetTiempoUnidadDeMedida: TUnidadDeMedida;
begin
  if not Assigned(FTiempoUnidadDeMedida) then
    GetObject(TUnidadDeMedida, FTiempoUnidadDeMedida, FTiempoUnidadDeMedidaID);
  Result := TUnidadDeMedida(FTiempoUnidadDeMedida);
end;

procedure TArticuloPasoDeFabricacion.SetArticuloID(Value : TObjectID);
begin
  if (Value<>FArticuloID) and Assigned(FArticulo) then
    FreeAndNil(FArticulo);

  FArticuloID := Value;

end;
 { TArticuloPasoDeFabricacionDM }
class function TArticuloPasoDeFabricacionDM.TableName : string;
begin
  Result := 'ArticuloPasosDeFabricacion';
end;


class function TArticuloPasoDeFabricacionDM.ID_FieldName : string;
begin
  Result := 'ArticuloPasoDeFabricacionID';
end;

procedure TArticuloPasoDeFabricacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloPasoDeFabricacion(PDObject) do
    begin
      IDField[_TiempoUnidadDeMedidaID]     := FTiempoUnidadDeMedidaID;
      FloatField[_Tiempo]                  := FTiempo;
      IDField[_PasoDeFabricacionID]        := FPasoDeFabricacionID;
      IDField[_ArticuloID]                 := FArticuloID;
      BooleanField[_SumaEnCalculoDeCostos] := SumaEnCalculoDeCostos;
    end;
end;


procedure TArticuloPasoDeFabricacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloPasoDeFabricacion(PDObject) do
    begin
      FTiempoUnidadDeMedidaID := IDField[_TiempoUnidadDeMedidaID];
      FTiempo                 := FloatField[_Tiempo];
      FPasoDeFabricacionID    := IDField[_PasoDeFabricacionID];
      FArticuloID             := IDField[_ArticuloID];
      FSumaEnCalculoDeCostos  := BooleanField[_SumaEnCalculoDeCostos];
    end;
end;

 { TArticuloPasoDeFabricacionList }
function TArticuloPasoDeFabricacionList.GetActual : TArticuloPasoDeFabricacion;
begin
  Result := TArticuloPasoDeFabricacion(CurrentObject);
end;

constructor TArticuloPasoDeFabricacionList.CreateByArticulo(_A: TArticulo);
Function WhereString : String;
  begin
    Result := TArticuloPasoDeFabricacionDM._ArticuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloPasoDeFabricacion,  TArticuloPasoDeFabricacionDM.CreateAll(False, WhereString));
end;

function TArticuloPasoDeFabricacionList.CreateNewObject: TPDObject;
begin
  Result := TArticuloPasoDeFabricacion.Create;
end;

constructor TArticuloPasoDeFabricacionList.CreateAll;
begin
  inherited Create(TArticuloPasoDeFabricacion,TArticuloPasoDeFabricacionDM.CreateAll(False));
end;

 { TPasoDeFabricacionRecurso }
constructor TPasoDeFabricacionRecurso.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPasoDeFabricacionRecursoDM);
  SaveSQLLog := True;
end;

procedure TPasoDeFabricacionRecurso.SetRecursoID(Value : TObjectID);
begin
  if (Value <> FRecursoID) and Assigned(FRecurso) then
    FreeAndNil(FRecurso);
  FRecursoID := Value;
end;

function TPasoDeFabricacionRecurso.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not Assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, FPasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function TPasoDeFabricacionRecurso.GetRecurso: TRecurso;
begin
  if not Assigned(FRecurso) then
    GetObject(TRecurso, FRecurso, FRecursoID);
  Result := TRecurso(FRecurso);
end;

procedure TPasoDeFabricacionRecurso.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value <> FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;
 { TPasoDeFabricacionRecursoDM }
class function TPasoDeFabricacionRecursoDM.TableName : string;
begin
  Result := 'PasoDeFabricacionRecursos';
end;

class function TPasoDeFabricacionRecursoDM.ID_FieldName : string;
begin
  Result := 'PasoDeFabricacionRecursoID';
end;

procedure TPasoDeFabricacionRecursoDM.PopulateFields(PDObject: TPDObject);
begin
  with TPasoDeFabricacionRecurso(PDObject) do
    begin
      IDField[_RecursoID] := FRecursoID;
      IDField[_PasoDeFabricacionID] := FPasoDeFabricacionID;
    end;
end;

procedure TPasoDeFabricacionRecursoDM.PopulateObject(PDObject: TPDObject);
begin
  with TPasoDeFabricacionRecurso(PDObject) do
    begin
      FRecursoID := IDField[_RecursoID];
      FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
    end;
end;

 { TPasoDeFabricacionRecursoList }
function TPasoDeFabricacionRecursoList.GetActual : TPasoDeFabricacionRecurso;
begin
  Result := TPasoDeFabricacionRecurso(CurrentObject);
end;

constructor TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacion(_P: TPasoDeFabricacion);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False, WhereString));
end;

constructor TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacion(_CodPaso: String);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionRecursoDM.TableName + '.' + TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' in ( Select ' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' where ' + TPasoDeFabricacionDM._Codigo +  ' = ' + QuotedStr(_CodPaso) + ')';
  end;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False, WhereString));
end;

constructor TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacionID(_PID: TObjectID);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' in ( Select ' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' Where ' + TPasoDeFabricacionDM.ID_FieldName + ' = ' + IntToStr(_PID) + ')';
  end;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False, WhereString));
end;

constructor TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacionLike(_Cod: String);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' in ( Select ' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' Where ' + TPasoDeFabricacionDM._Codigo + ' like ' + QuotedStr(_Cod + '%') + ')';
  end;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False, WhereString));
end;

function TPasoDeFabricacionRecursoList.CreateNewObject: TPDObject;
begin
  Result := TPasoDeFabricacionRecurso.Create;
end;

constructor TPasoDeFabricacionRecursoList.CreateAll;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False));
end;

constructor TPasoDeFabricacionRecursoList.CreateByPasoDeFabricacionAndCodigoLike(_CodPaso : String ; _CodRec : String);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionRecursoDM.TableName + '.' + TPasoDeFabricacionRecursoDM._PasoDeFabricacionID + ' in ( Select ' + TPasoDeFabricacionDM.ID_FieldName + ' from ' + TPasoDeFabricacionDM.TableName + ' where ' + TPasoDeFabricacionDM._Codigo +  ' = ' + QuotedStr(_CodPaso) + ')';
    Result := Result + ' and ' + TPasoDeFabricacionRecursoDM.TableName + '.' + TPasoDeFabricacionRecursoDM._RecursoID + ' in ( Select ' + TRecursoDM.ID_FieldName + ' from ' + TRecursoDM.TableName + ' where ' + TRecursoDM._Codigo +  ' like ' + QuotedStr(_CodRec + '%') + ')';
  end;
begin
  inherited Create(TPasoDeFabricacionRecurso,TPasoDeFabricacionRecursoDM.CreateAll(False, WhereString));
end;

{ TDescriptibleList }

constructor TDescriptibleList.Create(PDClass: TPDClass; DMObject: TDMObject);
begin
  aplicacion.ColocarCursorEspera;
  inherited Create(PDClass, DMObject);
  aplicacion.ColocarCursorNormal;
end;


constructor TDescriptibleList.CreateByCondition(_Condition: String; _SoloActivos: Boolean);
var
  P: TPDObject;
begin
  try
    P := self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, _Condition, _SoloActivos));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleList.CreateByPropertyLike(_Like, _PropertyName: String; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    if Copy(_Like, length(_Like), 1) <> '%' then
      _Like := _Like + '%';
    Result := '(lower(Tablename.' + _PropertyName + ') like ' + QuotedStr(AnsiLowerCase(_Like)) + ')';
  end;
var
  P: TPDObject;
begin
  try
    P := self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleList.CreateByDescripcion(_Descripcion: String; _DescripcionPropertyName: String; _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(lower(TableName.'+ _DescripcionPropertyName +') = ' + QuotedStr(AnsiLowerCase(_Descripcion)) + ')';
  end;
var
  P: TPDObject;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleList.CreateByDescripcionLike(_Like: String; _DescripcionPropertyName: String; _SoloActivos: Boolean; _StartRow : Integer; _Rows : Integer  );
  Function WhereString: String;
  begin
    if Copy(_Like, length(_Like), 1) <> '%' then
      _Like := _Like + '%';
    Result := '(lower(TableName.'+ _DescripcionPropertyName +') Like ' + QuotedStr(AnsiLowerCase(_Like)) + ')';
  end;

  Function OrderBy: String;
  begin
    result:= 'TableName.' + _DescripcionPropertyName;
  end;
var
  P: TPDObject;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos, OrderBy, _StartRow, _Rows ));
  Finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleList.CreateByDescripcionYIDDiferente(_D: string; _ID: TObjectID; _DescripcionPropertyName: String; _SoloActivos: Boolean);
var
  P: TPDObject;
  Function WhereString : String;
  begin
    Result := '( Upper( TableName.' + _DescripcionPropertyName + ') = ' + QuotedStr(Uppercase(_D)) + ' and TableName.IDFieldName <> ' + IntToStr(_ID) + ')';
  end;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  finally
    FreeAndNil(P);
  end;
end;

constructor TDescriptibleList.CreateByID(_ID: TObjectID; _SoloActivos: Boolean);
var
  P: TPDObject;
  Function WhereString : String;
  begin
    Result := '(TableName.'+ TSQLDBX_DMClass(P.DMClass).ID_FieldName + '=' + IntToStr(_ID) + ')';
  end;
begin
  try
    P := Self.CreateNewObject;
    inherited Create(TPDClass(P.ClassType), TSQLDBX_DMClass(P.DMClass).CreateAll( False, WhereString, _SoloActivos ));
  finally
    FreeAndNil(P);
  end;
end;

function TDescriptibleList.FindDescripction(_Descripcion: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := (AnsiLowerCase( TDescriptible(CurrentObject).Descripcion) = AnsiLowerCase(_Descripcion));
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

 { TTipoDeCustomizacion }
constructor TTipoDeCustomizacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDeCustomizacionDM);
end;
 { TTipoDeCustomizacionDM }

class function TTipoDeCustomizacionDM.TableName : string;
begin
  result := 'TiposDeCustomizacion';
end;


class function TTipoDeCustomizacionDM.ID_FieldName : string;
begin
  result := 'TipoDeCustomizacionID';
end;

class function TTipoDeCustomizacionDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TTipoDeCustomizacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDeCustomizacion(PDObject) do
    begin
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;


procedure TTipoDeCustomizacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDeCustomizacion(PDObject) do
    begin
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TTipoDeCustomizacionList }
function TTipoDeCustomizacionList.GetActual : TTipoDeCustomizacion;
begin
  result := TTipoDeCustomizacion(CurrentObject);
end;

function TTipoDeCustomizacionList.CreateNewObject: TPDObject;
begin
  result := TTipoDeCustomizacion.Create;
end;

constructor TTipoDeCustomizacionList.CreateAll(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTipoDeCustomizacion,TTipoDeCustomizacionDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TNivelDeServicioDeCliente }
constructor TNivelDeServicioDeCliente.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TNivelDeServicioDeClienteDM);
  SaveSQLLog := True;
  FPonderacion := null;
end;
 { TNivelDeServicioDeClienteDM }
class function TNivelDeServicioDeClienteDM.TableName : string;
begin
  result := 'nivelesdeserviciodecliente';
end;


class function TNivelDeServicioDeClienteDM.ID_FieldName : string;
begin
  result := 'NivelDeServicioDeClienteID';
end;

class function TNivelDeServicioDeClienteDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TNivelDeServicioDeClienteDM.PopulateFields(PDObject: TPDObject);
begin
  with TNivelDeServicioDeCliente(PDObject) do
    begin
      StringField[_Descripcion]         := Descripcion;
      BooleanField[_EsInactivo]         := EsInactivo;
      FloatField[_Ponderacion]          := Ponderacion;
      IntegerField[_ColorIdentificador] := ColorIdentificador;
    end;
end;

procedure TNivelDeServicioDeClienteDM.PopulateObject(PDObject: TPDObject);
begin
  with TNivelDeServicioDeCliente(PDObject) do
    begin
      FDescripcion        := StringField[_Descripcion];
      FEsInactivo         := BooleanField[_EsInactivo];
      FPonderacion        := FloatField[_Ponderacion];
      FColorIdentificador := IntegerField[_ColorIdentificador];
    end;
end;

 { TNivelDeServicioDeClienteList }
function TNivelDeServicioDeClienteList.Getactual : TNivelDeServicioDeCliente;
begin
  result := TNivelDeServicioDeCliente(CurrentObject);
end;

function TNivelDeServicioDeClienteList.CreateNewObject: TPDObject;
begin
  result := TNivelDeServicioDeCliente.Create;
end;

constructor TNivelDeServicioDeClienteList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TNivelDeServicioDeCliente,TNivelDeServicioDeClienteDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;



{ TFormulaList }

constructor TFormulaList.CreateAll;
begin
  inherited Create(TFormula, TFormulaDM.CreateAll(False) );
end;

function TFormulaList.CreateNewObject: TPDObject;
begin
  Result := TFormula.Create;
end;

function TFormulaList.GetFormula: TFormula;
begin
  Result := TFormula(CurrentObject);
end;

{ TFormulaDM }

class function TFormulaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TFormulaDM.ID_FieldName: string;
begin
  Result := 'FormulaID';
end;

procedure TFormulaDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  with TFormula(PDObject) do
  begin
    StringField[_Codigo]          := Codigo;
    StringField[_Descripcion]     := Descripcion;
    StringField[_Algoritmo]       := FAlgoritmo;
    FloatField[_Valor]            := FValor;
    BooleanField[_EsInactivo]     := EsInactivo;
  end;
end;

procedure TFormulaDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  with TFormula(PDObject) do
  begin
    Codigo      :=  StringField[_Codigo];
    Descripcion :=  StringField[_Descripcion];
    FAlgoritmo  :=  StringField[_Algoritmo];
    FValor      :=  FloatField[_Valor];
    EsInactivo  :=  BooleanField[_EsInactivo];
  end;
end;

class function TFormulaDM.TableName: string;
begin
  Result := 'Formulas';
end;

{ TFormula }

constructor TFormula.Create;
begin
  inherited;
  DMObject    := Aplicacion.DMProvider.GetGlobalDM(TFormulaDM);
  FEsInactivo := null;
  FAlgoritmo  := null;
end;

function TFormula.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TFormulaList;
end;

 { TCanalDeDistribucion }
function TCanalDeDistribucion.GetDescriptibleAbreviadoListClass;
begin
  result := TCanalDeDistribucionList;
end;
constructor TCanalDeDistribucion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCanalDeDistribucionDM);
  SaveSQLLog := True;
end;
 { TCanalDeDistribucionDM }
class function TCanalDeDistribucionDM.TableName : string;
begin
  result := 'canalesdedistribucion';
end;


class function TCanalDeDistribucionDM.ID_FieldName : string;
begin
  result := 'CanalDeDistribucionID';
end;

class function TCanalDeDistribucionDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TCanalDeDistribucionDM.PopulateFields(PDObject: TPDObject);
begin
  with TCanalDeDistribucion(PDObject) do
    begin
      StringField[_Codigo] := Codigo;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;


procedure TCanalDeDistribucionDM.PopulateObject(PDObject: TPDObject);
begin
  with TCanalDeDistribucion(PDObject) do
    begin
      FCodigo := StringField[_Codigo];
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TCanalDeDistribucionList }
function TCanalDeDistribucionList.Getactual : TCanalDeDistribucion;
begin
  result := TCanalDeDistribucion(CurrentObject);
end;

function TCanalDeDistribucionList.CreateNewObject: TPDObject;
begin
  result := TCanalDeDistribucion.Create;
end;

constructor TCanalDeDistribucionList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCanalDeDistribucion,TCanalDeDistribucionDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;


 { TCentroDeFacturacionCAI }
constructor TCentroDeFacturacionCAI.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCentroDeFacturacionCAIDM);
  SaveSQLLog := True;
  FNumeroDeCAI := null;
  FVencimientoDeCAI := null;
end;

function TCentroDeFacturacionCAI.GetCentroDeFacturacion : TCentroDeFacturacion;
begin
  if not assigned(FCentroDeFacturacion) then
    GetObject(TCentroDeFacturacion,FCentroDeFacturacion,CentroDeFacturacionID);

  result := TCentroDeFacturacion(FCentroDeFacturacion);
end;

procedure TCentroDeFacturacionCAI.SetCentroDeFacturacionID(Value : TObjectID);
begin
  if (Value<>FCentroDeFacturacionID) and Assigned(FCentroDeFacturacion) then
    FreeAndNil(FCentroDeFacturacion);

  FCentroDeFacturacionID := Value;

end;

function TCentroDeFacturacionCAI.GetTipoDeFormulario : TTipoDeFormulario;
begin
  if not assigned(FTipoDeFormulario) then
    GetObject(TTipoDeFormulario,FTipoDeFormulario,TipoDeFormularioID);

  result := TTipoDeFormulario(FTipoDeFormulario);
end;

procedure TCentroDeFacturacionCAI.SetTipoDeFormularioID(Value : TObjectID);
begin
  if (Value<>FTipoDeFormularioID) and Assigned(FTipoDeFormulario) then
    FreeAndNil(FTipoDeFormulario);

  FTipoDeFormularioID := Value;

end;
 { TCentroDeFacturacionCAIDM }
class function TCentroDeFacturacionCAIDM.TableName : string;
begin
  result := 'centrodefacturacioncais';
end;


class function TCentroDeFacturacionCAIDM.ID_FieldName : string;
begin
  result := 'CentroDeFacturacionCAIID';
end;


procedure TCentroDeFacturacionCAIDM.PopulateFields(PDObject: TPDObject);
begin
  with TCentroDeFacturacionCAI(PDObject) do
    begin
      IDField[_CentroDeFacturacionID] := CentroDeFacturacionID;
      StringField[_NumeroDeCAI] := NumeroDeCAI;
      IDField[_TipoDeFormularioID] := TipoDeFormularioID;
      DateField[_VencimientoDeCAI] := VencimientoDeCAI;
    end;
end;


procedure TCentroDeFacturacionCAIDM.PopulateObject(PDObject: TPDObject);
begin
  with TCentroDeFacturacionCAI(PDObject) do
    begin
      FCentroDeFacturacionID := IDField[_CentroDeFacturacionID];
      FNumeroDeCAI := StringField[_NumeroDeCAI];
      FTipoDeFormularioID := IDField[_TipoDeFormularioID];
      FVencimientoDeCAI := DateField[_VencimientoDeCAI];
    end;
end;

 { TCentroDeFacturacionCAIList }
function TCentroDeFacturacionCAIList.Getactual : TCentroDeFacturacionCAI;
begin
  result := TCentroDeFacturacionCAI(CurrentObject);
end;

constructor TCentroDeFacturacionCAIList.CreateByCentroDeFacturacion(_CF: TCentroDeFacturacion);
begin
  CreateByCentroDeFacturacion( _CF.ID);
end;

constructor TCentroDeFacturacionCAIList.CreateByCAIVigente(_CFID, _TFID: TObjectID);
  Function WhereString: String;
  begin
    Result := '(' + TCentroDeFacturacionCAIDM.TableName + '.' + TCentroDeFacturacionCAIDM._CentroDeFacturacionID        + ' = ' + IntToStr( _CFID) + ')';
    Result := Result + ' and (' + TCentroDeFacturacionCAIDM.TableName+'.'+TCentroDeFacturacionCAIDM._TipoDeFormularioID + ' = ' + IntToStr( _TFID) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := TCentroDeFacturacionCAIDM._TipoDeFormularioID + ', ' + TCentroDeFacturacionCAIDM._VencimientoDeCAI + ' Desc';
  end;
begin
  inherited Create(TCentroDeFacturacionCAI,TCentroDeFacturacionCAIDM.CreateTop(1, WhereString, OrderByString ));
end;

constructor TCentroDeFacturacionCAIList.CreateByCentroDeFacturacion(_CFID: TObjectID);
  Function WhereString: String;
  begin
    Result := TCentroDeFacturacionCAIDM.TableName+'.'+TCentroDeFacturacionCAIDM._CentroDeFacturacionID +  ' = ' + IntToStr( _CFID);
  end;
  Function OrderByString: String;
  begin
    Result := TCentroDeFacturacionCAIDM._TipoDeFormularioID + ', ' + TCentroDeFacturacionCAIDM._VencimientoDeCAI + ' desc';
  end;
begin
  inherited Create(TCentroDeFacturacionCAI,TCentroDeFacturacionCAIDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TCentroDeFacturacionCAIList.CreateByCentroDeFacturacionYTipodeFormulario(_CFID, _TFID: TObjectID);
  Function WhereString: String;
  begin
    Result := '(' + TCentroDeFacturacionCAIDM.TableName+'.'+TCentroDeFacturacionCAIDM._CentroDeFacturacionID +  ' = ' + IntToStr( _CFID) +')';
    Result := Result + ' and (' + TCentroDeFacturacionCAIDM.TableName+'.'+TCentroDeFacturacionCAIDM._TipoDeFormularioID + ' = ' + IntToStr( _TFID) +')';
  end;

  Function OrderByString: String;
  begin
    Result := TCentroDeFacturacionCAIDM._TipoDeFormularioID + ', ' + TCentroDeFacturacionCAIDM._VencimientoDeCAI + ' desc';
  end;
begin
  inherited Create(TCentroDeFacturacionCAI,TCentroDeFacturacionCAIDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TCentroDeFacturacionCAIList.CreateByCentroDeFacturacionYTipodeFormulario(_CF: TCentroDeFacturacion; _TF: TTipoDeFormulario);
begin
  CreateByCentroDeFacturacionYTipodeFormulario( _CF.ID, _TF.ID);
end;

function TCentroDeFacturacionCAIList.CreateNewObject: TPDObject;
begin
  result := TCentroDeFacturacionCAI.Create;
end;

constructor TCentroDeFacturacionCAIList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCentroDeFacturacionCAI,TCentroDeFacturacionCAIDM.CreateAll(False, WhereString, false, OrderByString ));
end;

{ TOrganizacionDeMonitorDM }
class function TOrganizacionDeMonitorDM.TableName : string;
begin
  result := 'OrganizacionDeMonitores';
end;

class function TOrganizacionDeMonitorDM.ID_FieldName : string;
begin
  result := 'OrganizacionDeMonitorID';
end;

procedure TOrganizacionDeMonitorDM.PopulateFields(PDObject: TPDObject);
begin
  with TOrganizacionDeMonitor(PDObject) do
    begin
      IDField[_FormularioID]        := FFormularioID;
      StringField[_Monitor]         := FMonitor;
      StringField[_NombreMonitor]   := FNombreMonitor;
      BooleanField[_EsMonitorLocal] := FEsMonitorLocal;
      BooleanField[_EsMonitorExpo]  := FEsMonitorExpo;
    end;
end;

procedure TOrganizacionDeMonitorDM.PopulateObject(PDObject: TPDObject);
begin
  with TOrganizacionDeMonitor(PDObject) do
    begin
      FFormularioID   := IDField[_FormularioID];
      FMonitor        := StringField[_Monitor];
      FNombreMonitor  := StringField[_NombreMonitor];
      FEsMonitorLocal := BooleanField[_EsMonitorLocal];
      FEsMonitorExpo  := BooleanField[_EsMonitorExpo];
    end;
end;

 { TOrganizacionDeMonitorList }
function TOrganizacionDeMonitorList.GetActual : TOrganizacionDeMonitor;
begin
  Result := TOrganizacionDeMonitor(CurrentObject);
end;

constructor TOrganizacionDeMonitorList.CreateByFormularioID(_FID: TObjectID);
  Function WhereString : String;
  begin
    Result := TOrganizacionDeMonitorDM._FormularioID + ' = ' + IntToStr(_FID);
  end;
begin
  inherited Create(TOrganizacionDeMonitor, TOrganizacionDeMonitorDM.CreateAll(False, WhereString));
end;

constructor TOrganizacionDeMonitorList.CreateByMonitor(_MonitorClass: String);
begin
  inherited Create(TOrganizacionDeMonitor,TOrganizacionDeMonitorDM.Create ('SELECT * FROM TABLENAME WHERE '+TOrganizacionDeMonitorDM._Monitor +' = '+QuotedStr (_MonitorClass)));
end;

function TOrganizacionDeMonitorList.CreateNewObject: TPDObject;
begin
  Result := TOrganizacionDeMonitor.Create;
end;

constructor TOrganizacionDeMonitorList.CreateAll;
begin
  inherited Create(TOrganizacionDeMonitor,TOrganizacionDeMonitorDM.CreateAll(False));
end;


{ TOrganizacionDeMonitorEstadoPermitido }

constructor TOrganizacionDeMonitorEstadoPermitido.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TOrganizacionDeMonitorEstadoPermitidoDM);
end;

procedure TOrganizacionDeMonitorEstadoPermitido.Delete;
begin
  If (Aplicacion.Mensaje( 'Se eliminarán todas las asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
    begin
      if (AccionesPermitidas.Count > 0) then
        AccionesPermitidas.DeleteAll;
      inherited;
    end;
end;

function TOrganizacionDeMonitorEstadoPermitido.GetAccionesPermitidas: TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList;
begin
  if not assigned(FAccionesPermitidas) then
    GetList(TPDList(FAccionesPermitidas),TPDList(TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.CreateByEstadoPadre(self)));
  result := TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList(FAccionesPermitidas);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDeAjusteDeStock: TEstadoDeAjusteDeStock;
begin
  if not assigned(FEstadoDeAjusteDeStock) then
    GetObject(TEstadoDeAjusteDeStock,FEstadoDeAjusteDeStock,EstadoDeAjusteDeStockID);
  result := TEstadoDeAjusteDeStock(FEstadoDeAjusteDeStock);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDeCierreDeStock: TEstadoDeCierreDeStock;
begin
  if not assigned(FEstadoDeCierreDeStock) then
    GetObject(TEstadoDeCierreDeStock,FEstadoDeCierreDeStock,EstadoDeCierreDeStockID);
  result := TEstadoDeCierreDeStock(FEstadoDeCierreDeStock);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDeFactura: TEstadoDeFactura;
begin
  if not assigned(FEstadoDeFactura) then
    GetObject(TEstadoDeFactura,FEstadoDeFactura,EstadoDeFacturaID);
  result := TEstadoDeFactura(FEstadoDeFactura);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDeHojaDeRuta: TEstadoDeHojaDeRuta;
begin
  if not assigned(FEstadoDeHojaDeRuta) then
    GetObject(TEstadoDeHojaDeRuta,FEstadoDeHojaDeRuta,EstadoDeHojaDeRutaID);
  result := TEstadoDeHojaDeRuta(FEstadoDeHojaDeRuta);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDePedidoDeVenta: TEstadoDePedidoDeVenta;
begin
  if not assigned(FEstadoDePedidoDeVenta) then
    GetObject(TEstadoDePedidoDeVenta,FEstadoDePedidoDeVenta,EstadoDePedidoDeVentaID);
  result := TEstadoDePedidoDeVenta(FEstadoDePedidoDeVenta);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDePresupuestoDeVenta: TEstadoDePresupuestoDeVenta;
begin
  if not assigned(FEstadoDePresupuestoDeVenta) then
    GetObject(TEstadoDePresupuestoDeVenta,FEstadoDePresupuestoDeVenta,EstadoDePresupuestoDeVentaID);
  result := TEstadoDePresupuestoDeVenta(FEstadoDePresupuestoDeVenta);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetEstadoDeRemito: TEstadoDeRemito;
begin
  if not Assigned(FEstadoDeRemito) then
    GetObject(TEstadoDeRemito,FEstadoDeRemito,EstadoDeRemitoID);
  result := TEstadoDeRemito(FEstadoDeRemito);
end;

function TOrganizacionDeMonitorEstadoPermitido.GetOrganizacionDeMonitor: TOrganizacionDeMonitor;
begin
  if not assigned(FOrganizacionDeMonitor) then
    GetObject(TOrganizacionDeMonitor,FOrganizacionDeMonitor,FOrganizacionDeMonitorID);
  result := TOrganizacionDeMonitor(FOrganizacionDeMonitor);
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDeAjusteDeStockID(const Value: TObjectID);
begin
  if (value<> FEstadoDeAjusteDeStockID) and Assigned(FEstadoDeAjusteDeStock) then
    FreeAndNil(FEstadoDeAjusteDeStock);
  FEstadoDeAjusteDeStockID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDeCierreDeStockID(const Value: TObjectID);
begin
  if (value<> FEstadoDeCierreDeStockID) and Assigned(FEstadoDeCierreDeStock) then
    FreeAndNil(FEstadoDeCierreDeStock);
  FEstadoDeCierreDeStockID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDeFacturaID(const Value: TObjectID);
begin
  if (value<> FEstadoDeFacturaID) and Assigned(FEstadoDeFactura) then
    FreeAndNil(FEstadoDeFactura);
  FEstadoDeFacturaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDeHojaDeRutaID(const Value: TObjectID);
begin
  if (value<> FEstadoDeHojaDeRutaID) and Assigned(FEstadoDeHojaDeRuta) then
    FreeAndNil(FEstadoDeHojaDeRuta);
  FEstadoDeHojaDeRutaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDePedidoDeVentaID(const Value: TObjectID);
begin
  if (value<> FEstadoDePedidoDeVentaID) and Assigned(FEstadoDePedidoDeVenta) then
    FreeAndNil(FEstadoDePedidoDeVenta);
  FEstadoDePedidoDeVentaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDePresupuestoDeVentaID(const Value: TObjectID);
begin
  if (value<> FEstadoDePresupuestoDeVentaID) and Assigned(FEstadoDePresupuestoDeVenta) then
    FreeAndNil(FEstadoDePresupuestoDeVenta);
  FEstadoDePresupuestoDeVentaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetEstadoDeRemitoID(const Value: TObjectID);
begin
  if (value<> FEstadoDeRemitoID) and Assigned(FEstadoDeRemito) then
    FreeAndNil(FEstadoDeRemito);
  FEstadoDeRemitoID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitido.SetOrganizacionDeMonitorID(const Value: TObjectID);
begin
  if (value<> FOrganizacionDeMonitorID) and Assigned(FOrganizacionDeMonitor) then
    FreeAndNil(FOrganizacionDeMonitor);
  FOrganizacionDeMonitorID := Value;
end;

{ TOrganizacionDeMonitorEstadoPermitidoDM }

class function TOrganizacionDeMonitorEstadoPermitidoDM.ID_FieldName: string;
begin
  Result := 'OrganizacionDeMonitorEstadoPermitidoID';
end;

procedure TOrganizacionDeMonitorEstadoPermitidoDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  with TOrganizacionDeMonitorEstadoPermitido(PDObject) do
   begin
     IDField [_OrganizacionDeMonitorID]      := FOrganizacionDeMonitorID;
     IDField [_EstadoDePedidoDeVentaID]      := FEstadoDePedidoDeVentaID;
     IDField [_EstadoDePresupuestoDeVentaID] := FEstadoDePresupuestoDeVentaID;
     IDField [_EstadoDeRemitoID]             := FEstadoDeRemitoID;
     IDField [_EstadoDeHojaDeRutaID]         := FEstadoDeHojaDeRutaID;
     IDField [_EstadoDeAjusteDeStockID]      := FEstadoDeAjusteDeStockID;
     IDField [_EstadoDeCierreDeStockID]      := FEstadoDeCierreDeStockID;
     IDField [_EstadoDeFacturaID]            := FEstadoDeFacturaID;
   end;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  with TOrganizacionDeMonitorEstadoPermitido(PDObject) do
    begin
      FOrganizacionDeMonitorID      := IDField [_OrganizacionDeMonitorID];
      FEstadoDePedidoDeVentaID      := IDField [_EstadoDePedidoDeVentaID];
      FEstadoDePresupuestoDeVentaID := IDField [_EstadoDePresupuestoDeVentaID];
      FEstadoDeRemitoID             := IDField [_EstadoDeRemitoID];
      FEstadoDeHojaDeRutaID         := IDField [_EstadoDeHojaDeRutaID];
      FEstadoDeAjusteDeStockID      := IDField [_EstadoDeAjusteDeStockID];
      FEstadoDeCierreDeStockID      := IDField [_EstadoDeCierreDeStockID];
      FEstadoDeFacturaID            := IDField [_EstadoDeFacturaID];
    end;
end;

class function TOrganizacionDeMonitorEstadoPermitidoDM.TableName: string;
begin
  Result := 'OrganizacionDeMonitorEstadosPermitidos'
end;

{ TOrganizacionDeMonitorEstadoPermitidoList }

constructor TOrganizacionDeMonitorEstadoPermitidoList.CreateAll;
begin
  inherited Create(TOrganizacionDeMonitorEstadoPermitido,TOrganizacionDeMonitorEstadoPermitidoDM.CreateAll(False));
end;

constructor TOrganizacionDeMonitorEstadoPermitidoList.CreateByMonitorPadre( _MonitorPadre : TOrganizacionDeMonitor  );
begin
  inherited Create(TOrganizacionDeMonitorEstadoPermitido,TOrganizacionDeMonitorEstadoPermitidoDM.Create ('SELECT * FROM TABLENAME WHERE '+TOrganizacionDeMonitorEstadoPermitidoDM._OrganizacionDeMonitorID +' = '+IntToStr (_MonitorPadre.ID)));
end;

function TOrganizacionDeMonitorEstadoPermitidoList.CreateNewObject: TPDObject;
begin
  Result := TOrganizacionDeMonitorEstadoPermitido.Create;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDeAjusteDeStockID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDeAjusteDeStockID =  _ID );
      if not Result then
        next;
    end;
  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDeCierreDeStockID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDeCierreDeStockID = _ID );
      if not Result then
        next;
    end;
  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDeFacturaID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDeFacturaID  =  _ID );
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDeHojaDeRutaID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDeHojaDeRutaID  =  _ID );
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDePedidoDeVentaID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDePedidoDeVentaID  =  _ID );
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDePresupuestoDeVentaID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDePresupuestoDeVentaID  =  _ID );
      if not Result then
        next;
    end;

  if isLast then
    first;

end;

function TOrganizacionDeMonitorEstadoPermitidoList.FindEstadoDeRemitoID(_ID: TObjectID): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := (  Actual.FEstadoDeRemitoID  =  _ID );
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoList.GetActual: TOrganizacionDeMonitorEstadoPermitido;
begin
  Result := TOrganizacionDeMonitorEstadoPermitido(CurrentObject);
end;

constructor TOrganizacionDeMonitor.Create;
begin
  inherited;
  DMObject        := Aplicacion.DMPRovider.GetGlobalDM(TOrganizacionDeMonitorDM);
  FEsMonitorLocal := False;
  FEsMonitorExpo  := False;
end;

procedure TOrganizacionDeMonitor.Delete;
begin
  If (Aplicacion.Mensaje( 'Se eliminarán todas las asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
    begin
      if (EstadosPermitidos.Count > 0) then
        EstadosPermitidos.DeleteAll;
      inherited;
    end;
end;

function TOrganizacionDeMonitor.GetEstadosPermitidos: TOrganizacionDeMonitorEstadoPermitidoList;
begin
  if not assigned(FEstadosPermitidos) then
    GetList(TPDList(FEstadosPermitidos),TPDList(TOrganizacionDeMonitorEstadoPermitidoList.CreateByMonitorPadre(self)));
  result := TOrganizacionDeMonitorEstadoPermitidoList(FEstadosPermitidos);
end;

 function TOrganizacionDeMonitor.GetFormulario: TFormulario;
begin
  if not assigned(FFormulario) then
    GetObject(TFormulario,FFormulario,FormularioID);
  result := TFormulario(FFormulario);
end;

procedure TOrganizacionDeMonitor.SetFormularioID(const Value: TObjectID);
begin
  if (value <> FFormularioID) and assigned(FFormulario) then
    FreeAndNil(FFormulario);
  FFormularioID := Value;
end;

{ TOrganizacionDeMonitorEstadoPermitidoAccionPermitida }
constructor TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDeAjusteDeStockAccionPermitida: TEstadoDeAjusteDeStock;
begin
  if not assigned(FEstadoDeAjusteDeStockAccionPermitida) then
    GetObject(TEstadoDeAjusteDeStock,FEstadoDeAjusteDeStockAccionPermitida,EstadoDeAjusteDeStockAccionPermitidaID);
  result := TEstadoDeAjusteDeStock(FEstadoDeAjusteDeStockAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDeCierreDeStockAccionPermitida: TEstadoDeCierreDeStock;
begin
  if not assigned(FEstadoDeCierreDeStockAccionPermitida) then
    GetObject(TEstadoDeCierreDeStock,FEstadoDeCierreDeStockAccionPermitida,EstadoDeCierreDeStockAccionPermitidaID);
  result := TEstadoDeCierreDeStock(FEstadoDeCierreDeStockAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDeFacturaAccionPermitida: TEstadoDeFactura;
begin
  if not assigned(FEstadoDeFacturaAccionPermitida) then
    GetObject(TEstadoDeFactura,FEstadoDeFacturaAccionPermitida,EstadoDeFacturaAccionPermitidaID);
  result := TEstadoDeFactura(FEstadoDeFacturaAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDeHojaDeRutaAccionPermitida: TEstadoDeHojaDeRuta;
begin
  if not assigned(FEstadoDeHojaDeRutaAccionPermitida) then
    GetObject(TEstadoDeHojaDeRuta,FEstadoDeHojaDeRutaAccionPermitida,EstadoDeHojaDeRutaAccionPermitidaID);
  result := TEstadoDeHojaDeRuta(FEstadoDeHojaDeRutaAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDePedidoAccionPermitida: TEstadoDePedidoDeVenta;
begin
  if not assigned(FEstadoDePedidoAccionPermitida) then
    GetObject(TEstadoDePedidoDeVenta,FEstadoDePedidoAccionPermitida,EstadoDePedidoAccionPermitidaID);
  result := TEstadoDePedidoDeVenta(FEstadoDePedidoAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDePresupuestoAccionPermitida: TEstadoDePresupuestoDeVenta;
begin
  if not Assigned(FEstadoDePresupuestoAccionPermitida) then
    GetObject(TEstadoDePresupuestoDeVenta,FEstadoDePresupuestoAccionPermitida,EstadoDePresupuestoAccionPermitidaID);
  result := TEstadoDePresupuestoDeVenta(FEstadoDePresupuestoAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetEstadoDeRemitoAccionPermitida: TEstadoDeRemito;
begin
  if not assigned(FEstadoDeRemitoAccionPermitida) then
    GetObject(TEstadoDeRemito,FEstadoDeRemitoAccionPermitida,EstadoDeRemitoAccionPermitidaID);
  result := TEstadoDeRemito(FEstadoDeRemitoAccionPermitida);
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.GetOrganizacionDeMonitorEstadoPermitido: TPDObject;
begin
  if not assigned(FOrganizacionDeMonitorEstadoPermitido) then
    GetObject(TOrganizacionDeMonitorEstadoPermitido,FOrganizacionDeMonitorEstadoPermitido,OrganizacionDeMonitorEstadoPermitidoID);
  result := TOrganizacionDeMonitorEstadoPermitido(FOrganizacionDeMonitorEstadoPermitido);
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDeAjusteDeStockAccionPermitidaID(const Value: TObjectID);
begin
  if (Value <> FEstadoDeAjusteDeStockAccionPermitidaID) and Assigned(FEstadoDeAjusteDeStockAccionPermitida) then
    FreeAndNil(FEstadoDeAjusteDeStockAccionPermitida);
  FEstadoDeAjusteDeStockAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDeCierreDeStockAccionPermitidaID(const Value: TObjectID);
begin
  if (value <> FEstadoDeCierreDeStockAccionPermitidaID) and assigned(FEstadoDeCierreDeStockAccionPermitida) then
    FreeAndNil(FEstadoDeCierreDeStockAccionPermitida);
  FEstadoDeCierreDeStockAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDeFacturaAccionPermitidaID(const Value: TObjectID);
begin
  if (value <> FEstadoDeFacturaAccionPermitidaID) and assigned(FEstadoDeFacturaAccionPermitida) then
    FreeAndNil(FEstadoDeFacturaAccionPermitida);
  FEstadoDeFacturaAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDeHojaDeRutaAccionPermitidaID(const Value: TObjectID);
begin
  if (value <> FEstadoDeHojaDeRutaAccionPermitidaID) and assigned(FEstadoDeHojaDeRutaAccionPermitida) then
    FreeAndNil(FEstadoDeHojaDeRutaAccionPermitida);
  FEstadoDeHojaDeRutaAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDePedidoAccionPermitidaID(const Value: TObjectID);
begin
  if (value <> FEstadoDePedidoAccionPermitidaID) and assigned( FEstadoDePedidoAccionPermitida) then
    FreeAndNil(FEstadoDePedidoAccionPermitida);
  FEstadoDePedidoAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDePresupuestoAccionPermitidaID(const Value: TObjectID);
begin
  if (Value <> FEstadoDePresupuestoAccionPermitidaID) and Assigned(FEstadoDePresupuestoAccionPermitida) then
    FreeAndNil(FEstadoDePresupuestoAccionPermitida);
  FEstadoDePresupuestoAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetEstadoDeRemitoAccionPermitidaID(const Value: TObjectID);
begin
  if (value <> FEstadoDeRemitoAccionPermitidaID) and assigned(FEstadoDeRemitoAccionPermitida) then
    FreeAndNil(FEstadoDeRemitoAccionPermitida);
  FEstadoDeRemitoAccionPermitidaID := Value;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.SetOrganizacionDeMonitorEstadoPermitidoID(Value : TObjectID);
begin
  if (value <> FOrganizacionDeMonitorEstadoPermitidoID) and assigned( FOrganizacionDeMonitorEstadoPermitido) then
    FreeAndNil(FOrganizacionDeMonitorEstadoPermitido);
  FOrganizacionDeMonitorEstadoPermitidoID := Value;
end;
 { TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM }
class function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.TableName : string;
begin
  Result := 'OrgDeMonEstPermAccionesPermitidas';
end;

class function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.ID_FieldName : string;
begin
  Result := 'OrgDeMonEstPermAccionPermitidaID';
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.PopulateFields(PDObject: TPDObject);
begin
  with TOrganizacionDeMonitorEstadoPermitidoAccionPermitida(PDObject) do
    begin
      IDField[_OrganizacionDeMonitorEstadoPermitidoID] := FOrganizacionDeMonitorEstadoPermitidoID;
      IDField[_EstadoDePedidoAccionPermitidaID]        := FEstadoDePedidoAccionPermitidaID;
      IDField[_EstadoDePresupuestoAccionPermitidaID]   := FEstadoDePresupuestoAccionPermitidaID;
      IDField[_EstadoDeRemitoAccionPermitidaID]        := FEstadoDeRemitoAccionPermitidaID;
      IDField[_EstadoDeFacturaAccionPermitidaID]       := FEstadoDeFacturaAccionPermitidaID;
      IDField[_EstadoDeHojaDeRutaAccionPermitidaID]    := FEstadoDeHojaDeRutaAccionPermitidaID;
      IDField[_EstadoDeAjusteDeStockAccionPermitidaID] := FEstadoDeAjusteDeStockAccionPermitidaID;
      IDField[_EstadoDeCierreDeStockAccionPermitidaID] := FEstadoDeCierreDeStockAccionPermitidaID;
      BooleanField[_RequiereComentario]                := FRequiereComentario;
    end;
end;

procedure TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.PopulateObject(PDObject: TPDObject);
begin
  with TOrganizacionDeMonitorEstadoPermitidoAccionPermitida(PDObject) do
    begin
      FOrganizacionDeMonitorEstadoPermitidoID := IDField[_OrganizacionDeMonitorEstadoPermitidoID];
      FEstadoDePedidoAccionPermitidaID        := IDField[_EstadoDePedidoAccionPermitidaID];
      FEstadoDePresupuestoAccionPermitidaID   := IDField[_EstadoDePresupuestoAccionPermitidaID];
      FEstadoDeRemitoAccionPermitidaID        := IDField[_EstadoDeRemitoAccionPermitidaID];
      FEstadoDeFacturaAccionPermitidaID       := IDField[_EstadoDeFacturaAccionPermitidaID];
      FEstadoDeHojaDeRutaAccionPermitidaID    := IDField[_EstadoDeHojaDeRutaAccionPermitidaID];
      FEstadoDeAjusteDeStockAccionPermitidaID := IDField[_EstadoDeAjusteDeStockAccionPermitidaID];
      FEstadoDeCierreDeStockAccionPermitidaID := IDField[_EstadoDeCierreDeStockAccionPermitidaID];
      FRequiereComentario                     := BooleanField[_RequiereComentario];
    end;
end;

 { TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList }
function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.GetActual : TOrganizacionDeMonitorEstadoPermitidoAccionPermitida;
begin
  result := TOrganizacionDeMonitorEstadoPermitidoAccionPermitida(CurrentObject);
end;

constructor TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.CreateByEstadoPadre(
  _EstadoPadre: TOrganizacionDeMonitorEstadoPermitido);
begin
  inherited Create(TOrganizacionDeMonitorEstadoPermitidoAccionPermitida,TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.Create ('SELECT * FROM TABLENAME WHERE '+TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM._OrganizacionDeMonitorEstadoPermitidoID +' = '+IntToStr (_EstadoPadre.ID)));
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.CreateNewObject: TPDObject;
begin
  result := TOrganizacionDeMonitorEstadoPermitidoAccionPermitida.Create;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaAjustesDeStock(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDeAjusteDeStockAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;
  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaCierresDeStock(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDeCierreDeStockAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;
  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaFacturas(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDeFacturaAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaHojasDeRuta(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDeHojaDeRutaAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaPedidos( _AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDePedidoAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaPresupuestos(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDePresupuestoAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

function TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.FindAccionPermitidaRemitos(_AccPer: TString): boolean;
begin
  result := false;
  if (Count=0) then
    exit;
  First;
  while (not result) and (not IsLast) do
    begin
      result := ( LowerCase( Actual.EstadoDeRemitoAccionPermitida.codigo) =  LowerCase(_AccPer));
      if not Result then
        next;
    end;

  if isLast then
    first;
end;

constructor TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaList.CreateAll;
begin
  inherited Create(TOrganizacionDeMonitorEstadoPermitidoAccionPermitida,TOrganizacionDeMonitorEstadoPermitidoAccionPermitidaDM.CreateAll(False));
end;

 { TEstadoDeHojaDeRuta }
function TEstadoDeHojaDeRuta.GetDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDeHojaDeRutaList;
end;
constructor TEstadoDeHojaDeRuta.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TEstadoDeHojaDeRutaDM);
end;
 { TEstadoDeHojaDeRutaDM }
class function TEstadoDeHojaDeRutaDM.TableName : string;
begin
  Result := 'EstadosDehojaDeRuta';
end;

class function TEstadoDeHojaDeRutaDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDeHojaDeRutaDM.ID_FieldName : string;
begin
  Result := 'EstadoDeHojaDeRutaID';
end;

procedure TEstadoDeHojaDeRutaDM.PopulateFields(PDObject: TPDObject);
begin
  with TEstadoDeHojaDeRuta(PDObject) do
    begin
      StringField[_Descripcion]           := Descripcion;
      StringField[_Codigo]                := Codigo;
      BooleanField[_EsEstadoCancelado]    := FEsEstadoCancelado;
      BooleanField[_EsEstadoCumplido]     := FEsEstadoCumplido;
      BooleanField[_EsEstadoNoProgramado] := FEsEstadoNoProgramado;
      BooleanField[_EsEstadoEnFabricacion]:= FEsEstadoEnFabricacion;
      BooleanField[_EsEstadoReproceso]    := FEsEstadoReproceso;
      BooleanField[_EsEstadoEspecial]     := FEsEstadoEspecial;
      IntegerField[_Color]                := FColor;
      BooleanField[_EsInactivo]           := EsInactivo;
    end;
end;

procedure TEstadoDeHojaDeRutaDM.PopulateObject(PDObject: TPDObject);
begin
  with TEstadoDeHojaDeRuta(PDObject) do
    begin
      Descripcion            := StringField[_Descripcion];
      Codigo                 := StringField[_Codigo];
      FEsEstadoCancelado     := BooleanField[_EsEstadoCancelado];
      FEsEstadoCumplido      := BooleanField[_EsEstadoCumplido];
      FEsEstadoNoProgramado  := BooleanField[_EsEstadoNoProgramado];
      FEsEstadoEnFabricacion := BooleanField[_EsEstadoEnFabricacion];
      FEsEstadoReproceso     := BooleanField[_EsEstadoReproceso];
      FEsEstadoEspecial      := BooleanField[_EsEstadoEspecial];
      FColor                 := IntegerField[_Color];
      EsInactivo             := BooleanField[_EsInactivo];
    end;
end;

 { TEstadoDeHojaDeRutaList }
function TEstadoDeHojaDeRutaList.GetActual : TEstadoDeHojaDeRuta;
begin
  Result := TEstadoDeHojaDeRuta(CurrentObject);
end;

function TEstadoDeHojaDeRutaList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDeHojaDeRuta.Create;
end;

constructor TEstadoDeHojaDeRutaList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDeHojaDeRuta,TEstadoDeHojaDeRutaDM.CreateAll(False, '', _SoloActivos));
end;

 { TImpresoraDocumento }
constructor TImpresoraDocumento.Create;
begin
  inherited;
  DMObject        := Aplicacion.DMPRovider.GetGlobalDM(TImpresoraDocumentoDM);
  FDireccionDeRed := null;
end;

function TImpresoraDocumento.GetSector: TSector;
begin
  if not Assigned(FSector) then
    GetObject(TSector, FSector, FSectorID);
  Result := TSector(FSector);
end;

procedure TImpresoraDocumento.SetSectorID(const Value: TObjectID);
begin
  if (Value <> FSectorID) and assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

{ TImpresoraDocumentoDM }
class function TImpresoraDocumentoDM.TableName : string;
begin
  Result := 'ImpresorasDeDocumentos';
end;

class function TImpresoraDocumentoDM.ID_FieldName : string;
begin
  Result := 'ImpresoraDocumentoID';
end;

class function TImpresoraDocumentoDM.EsInactivo_FieldName : string;
begin
  Result := _EsInactivo;
end;

procedure TImpresoraDocumentoDM.PopulateFields(PDObject: TPDObject);
begin
  with TImpresoraDocumento(PDObject) do
    begin
      StringField[_Descripcion]    := Descripcion;
      StringField[_DireccionDeRed] := DireccionDeRed;
      BooleanField[_EsInactivo]    := EsInactivo;
      IDField[_SectorID]           := SectorID;
    end;
end;

procedure TImpresoraDocumentoDM.PopulateObject(PDObject: TPDObject);
begin
  with TImpresoraDocumento(PDObject) do
    begin
      Descripcion     := StringField[_Descripcion];
      FDireccionDeRed := StringField[_DireccionDeRed];
      EsInactivo      := BooleanField[_EsInactivo];
      SectorID        := IDField[_SectorID];
    end;
end;

 { TImpresoraDocumentoList }
function TImpresoraDocumentoList.GetActual : TImpresoraDocumento;
begin
  result := TImpresoraDocumento(CurrentObject);
end;

function TImpresoraDocumentoList.CreateNewObject: TPDObject;
begin
  result := TImpresoraDocumento.Create;
end;

constructor TImpresoraDocumentoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TImpresoraDocumento,TImpresoraDocumentoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TArticuloImpuesto }
constructor TArticuloImpuesto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TArticuloImpuestoDM);
  SaveSQLLog := True;
end;


function TArticuloImpuesto.GetImpuestoConcepto: TImpuestoConcepto;
begin
  if not assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto, FImpuestoConcepto, ImpuestoConceptoID);
  Result := TImpuestoConcepto(FImpuestoConcepto);
end;

procedure TArticuloImpuesto.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value<>FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);
  FImpuestoConceptoID := Value;
end;

 { TArticuloImpuestoDM }
class function TArticuloImpuestoDM.TableName : string;
begin
  result := 'articuloimpuestos';
end;


class function TArticuloImpuestoDM.ID_FieldName : string;
begin
  result := 'ArticuloImpuestoID';
end;


procedure TArticuloImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloImpuesto(PDObject) do
    begin
      IDField[_ArticuloID] := ArticuloID;
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
    end;
end;


procedure TArticuloImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloImpuesto(PDObject) do
    begin
      FArticuloID := IDField[_ArticuloID];
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
    end;
end;

 { TArticuloImpuestoList }
function TArticuloImpuestoList.Getactual : TArticuloImpuesto;
begin
  result := TArticuloImpuesto(CurrentObject);
end;

constructor TArticuloImpuestoList.CreateByArticulo(_A: TArticulo);
Function WhereString : String;
  begin
    Result := TArticuloImpuestoDM._ArticuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloImpuesto,  TArticuloImpuestoDM.CreateAll(False, WhereString));
end;

function TArticuloImpuestoList.CreateNewObject: TPDObject;
begin
  result := TArticuloImpuesto.Create;
end;

function TArticuloImpuestoList.FindPredeterminadoProductos: Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      Result := actual.ImpuestoConcepto.EsPredeterminadoProductos;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TArticuloImpuestoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TArticuloImpuesto,TArticuloImpuestoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TImpuesto }
function TImpuesto.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('impuesto', 'CodigoImpuesto =' + QuotedStr( Codigo ) , 'CodigoInternoImpuesto');
  Result := FCodigoInternoSifab;
end;

function TImpuesto.GetConceptos: TImpuestoConceptoList;
begin
  if not assigned(FConceptos) then
    GetList(TPDList(FConceptos), TPDList(TImpuestoConceptoList.CreateByImpuesto(self)));
  Result := TImpuestoConceptoList(FConceptos);
end;

function TImpuesto.GetCondiciones: TImpuestoCondicionList;
begin
  if not assigned(FCondiciones) then
    GetList(TPDList(FCondiciones), TPDList(TImpuestoCondicionList.CreateByImpuesto(self)));
  Result := TImpuestoCondicionList(FCondiciones);
end;

function TImpuesto.GetDescriptibleAbreviadoListClass;
begin
  result := TImpuestoList;
end;
constructor TImpuesto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TImpuestoDM);
  FEsImpuesto := null;
  FEsRetencion := null;
  FCodigoInternoSifab := Null;
end;
 { TImpuestoDM }
class function TImpuestoDM.TableName : string;
begin
  result := 'impuestos';
end;

class function TImpuestoDM.ID_FieldName : string;
begin
  result := 'ImpuestoID';
end;

class function TImpuestoDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TImpuestoDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;

procedure TImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TImpuesto(PDObject) do
    begin
      StringField[_Codigo]                := Codigo;
      StringField[_Descripcion]           := Descripcion;
      BooleanField[_EsImpuesto]           := EsImpuesto;
      BooleanField[_EsInactivo]           := EsInactivo;
      BooleanField[_EsRetencion]          := EsRetencion;
      BooleanField[_EsAgenteDeRetencion]  := EsAgenteDeRetencion;
      StringField[_NumeroCertificadoDeRetencion]  := NumeroCertificadoDeRetencion;
      BooleanField[_EsAgenteDePercepcion] := EsAgenteDePercepcion;
    end;
end;


procedure TImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TImpuesto(PDObject) do
    begin
      FCodigo               := StringField[_Codigo];
      FDescripcion          := StringField[_Descripcion];
      FEsImpuesto           := BooleanField[_EsImpuesto];
      FEsInactivo           := BooleanField[_EsInactivo];
      FEsRetencion          := BooleanField[_EsRetencion];
      FEsAgenteDeRetencion  := BooleanField[_EsAgenteDeRetencion];
      FNumeroCertificadoDeRetencion  := StringField[_NumeroCertificadoDeRetencion];
      FEsAgenteDePercepcion := BooleanField[_EsAgenteDePercepcion];
    end;
end;

 { TImpuestoList }
function TImpuestoList.Getactual : TImpuesto;
begin
  result := TImpuesto(CurrentObject);
end;

function TImpuestoList.CreateNewObject: TPDObject;
begin
  result := TImpuesto.Create;
end;

constructor TImpuestoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TImpuesto,TImpuestoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TImpuestoConcepto }
function TImpuestoConcepto.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('impuestoconcepto', 'CodigoConcepto =' + QuotedStr( Codigo ) , 'CodigoInternoConcepto');
  Result := FCodigoInternoSifab;
end;

function TImpuestoConcepto.GetCuentaContableCompras: TCuentaContable;
begin
  if not assigned(FCuentaContableCompras) then
    GetObject(TCuentaContable,FCuentaContableCompras,CuentaContableComprasID);
  result := TCuentaContable(FCuentaContableCompras);
end;

function TImpuestoConcepto.getCuentaContableVentas: TCuentaContable;
begin
  if not assigned(FCuentaContableVentas) then
    GetObject(TCuentaContable,FCuentaContableVentas,CuentaContableVentasID);
  result := TCuentaContable(FCuentaContableVentas);
end;

function TImpuestoConcepto.GetDescriptibleAbreviadoListClass;
begin
  result := TImpuestoConceptoList;
end;

constructor TImpuestoConcepto.Create;
begin
  inherited;
  DMObject                   := Aplicacion.DMPRovider.GetGlobalDM(TImpuestoConceptoDM);
  SaveSQLLog                 := True;
  FEsDestinoCompra           := Null;
  FEsDestinoVenta            := Null;
  FEsPredeterminadoProductos := Null;
  FCodigoInternoSifab        := Null;
  FIDTeamplace               := Null;
end;

function TImpuestoConcepto.GetIDTeamplace: TEntero;
begin
  if (FIDTeamplace = Null) or (FIDTeamplace = NullID) then
    FIDTeamplace := Aplicacion.Sesion.ConexionTeamPlace.Get_Integer_Field( TImpuestoConceptoDM._TeamplaceTableName, TImpuestoConceptoDM._TeamplaceCodigo + ' = ' + QuotedStr( CodigoTeamplace ), TImpuestoConceptoDM._TeamplaceID);
  Result := FIDTeamplace;
end;

function TImpuestoConcepto.GetImpuesto : TImpuesto;
begin
  if not assigned(FImpuesto) then
    GetObject(TImpuesto,FImpuesto,ImpuestoID);
  result := TImpuesto(FImpuesto);
end;

function TImpuestoConcepto.GetPadrones: TImpuestoConceptoPadronList;
begin
  If not assigned(FPadrones) Then
    GetList(TPDList(FPadrones), TPDList(TImpuestoConceptoPadronList.CreateByImpuestoConcepto(self)));
  Result := FPadrones;
end;

procedure TImpuestoConcepto.SetCuentaContableComprasID(const Value: TObjectID);
begin
  if assigned( FCuentaContableCompras ) and (FCuentaContableComprasID <> Value) then
    FreeAndNil( FCuentaContableCompras);
  FCuentaContableComprasID := Value;
end;

procedure TImpuestoConcepto.SetCuentaContableVentasID(const Value: TObjectID);
begin
  if assigned( FCuentaContableVentas ) and (FCuentaContableVentasID <> Value) then
    FreeAndNil( FCuentaContableVentas);
  FCuentaContableVentasID := Value;
end;

procedure TImpuestoConcepto.SetImpuestoID(Value : TObjectID);
begin
  if (Value<>FImpuestoID) and Assigned(FImpuesto) then
    FreeAndNil(FImpuesto);

  FImpuestoID := Value;

end;

//procedure TImpuestoConcepto.SetPadronID(const Value: TObjectID);
//begin
//  if assigned(FPadron) then
//    FreeAndNil( FPadron);
//  FPadronID := Value;
//end;

{ TImpuestoConceptoDM }
class function TImpuestoConceptoDM.TableName : string;
begin
  result := 'ImpuestoConceptos';
end;

class function TImpuestoConceptoDM.ID_FieldName : string;
begin
  result := 'ImpuestoConceptoID';
end;

class function TImpuestoConceptoDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TImpuestoConceptoDM.PopulateFields(PDObject: TPDObject);
begin
  with TImpuestoConcepto(PDObject) do
    begin
      StringField[_Codigo]                      := Codigo;
      StringField[_Descripcion]                 := Descripcion;
      BooleanField[_EsDestinoCompra]            := EsDestinoCompra;
      BooleanField[_EsDestinoVenta]             := EsDestinoVenta;
      BooleanField[_EsInactivo]                 := EsInactivo;
      BooleanField[_EsPredeterminadoProductos]  := EsPredeterminadoProductos;
      BooleanField[_SeAplicaAItems]             := SeAplicaAItems;
      IDField[_ImpuestoID]                      := ImpuestoID;
      StringField[_TipoDeMovimiento]            := TipoDeMovimiento;
      StringField[_BaseDeCalculo]               := BaseDeCalculo;
      FloatField[_Alicuota]                     := Alicuota;
      FloatField[_CalcularAPartirDe]            := CalcularAPartirDe;
      IDField[_CuentaContableComprasID]         := CuentaContableComprasID;
      IDField[_CuentaContableVentasID]          := CuentaContableVentasID;
      StringField[_CodigoAfip]                  := CodigoAfip;
      StringField[_CodigoTeamplace]             := CodigoTeamplace;
    end;
end;

procedure TImpuestoConceptoDM.PopulateObject(PDObject: TPDObject);
begin
  with TImpuestoConcepto(PDObject) do
    begin
      FCodigo                     := StringField[_Codigo];
      FDescripcion                := StringField[_Descripcion];
      FEsDestinoCompra            := BooleanField[_EsDestinoCompra];
      FEsDestinoVenta             := BooleanField[_EsDestinoVenta];
      FEsInactivo                 := BooleanField[_EsInactivo];
      FEsPredeterminadoProductos  := BooleanField[_EsPredeterminadoProductos];
      FSeAplicaAItems             := BooleanField[_SeAplicaAItems];
      FImpuestoID                 := IDField[_ImpuestoID];
      FTipoDeMovimiento           := StringField[_TipoDeMovimiento];
      FBaseDeCalculo              := StringField[_BaseDeCalculo];
      FPadronID                   := IDField[_PadronID];
      FAlicuota                   := FloatField[_Alicuota];
      FCalcularAPartirDe          := FloatField[_CalcularAPartirDe];
      FCuentaContableComprasID    := IDField[_CuentaContableComprasID];
      FCuentaContableVentasID     := IDField[_CuentaContableVentasID];
      FCodigoAfip                 := StringField[_CodigoAfip];
      FCodigoTeamplace            := StringField[_CodigoTeamplace];
    end;
end;

 { TImpuestoConceptoList }
function TImpuestoConceptoList.Getactual : TImpuestoConcepto;
begin
  result := TImpuestoConcepto(CurrentObject);
end;

constructor TImpuestoConceptoList.CreateByDefaultFabricados(_SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '(' + TImpuestoConceptoDM._EsPredeterminadoProductos + '=1)';
  end;
begin
  inherited Create(TImpuestoConcepto, TImpuestoConceptoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

constructor TImpuestoConceptoList.CreateByImpuesto(_I: TImpuesto; _soloActivos: Boolean );
  Function WhereString: String;
  begin
    Result := '('+TImpuestoConceptoDM._ImpuestoID + '=' +  IntToStr(_I.ID)+')';
  end;
begin
  inherited Create(TImpuestoConcepto, TImpuestoConceptoDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

function TImpuestoConceptoList.CreateNewObject: TPDObject;
begin
  result := TImpuestoConcepto.Create;
end;

constructor TImpuestoConceptoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TImpuestoConcepto,TImpuestoConceptoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TEmpresaImpuesto }
constructor TEmpresaImpuesto.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TEmpresaImpuestoDM);
  SaveSQLLog := True;
end;

function TEmpresaImpuesto.GetImpuestoConcepto : TImpuestoConcepto;
begin
  if not assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto,FImpuestoConcepto,ImpuestoConceptoID);
  result := TImpuestoConcepto(FImpuestoConcepto);
end;

procedure TEmpresaImpuesto.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value<>FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);

  FImpuestoConceptoID := Value;
end;

{ TEmpresaImpuestoDM }
class function TEmpresaImpuestoDM.TableName : string;
begin
  result := 'empresaimpuestos';
end;


class function TEmpresaImpuestoDM.ID_FieldName : string;
begin
  result := 'EmpresaImpuestoID';
end;


procedure TEmpresaImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TEmpresaImpuesto(PDObject) do
    begin
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
      IDField[_empresaID]          := empresaID;
    end;
end;


procedure TEmpresaImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TEmpresaImpuesto(PDObject) do
    begin
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
      FempresaID          := IDField[_empresaID];
    end;
end;

 { TEmpresaImpuestoList }
function TEmpresaImpuestoList.Getactual : TEmpresaImpuesto;
begin
  result := TEmpresaImpuesto(CurrentObject);
end;

constructor TEmpresaImpuestoList.CreateByEmpresa( _Emp: TAbstractEmpresa );
  Function WhereString: String;
  begin
    Result := '('+TEmpresaImpuestoDM._empresaID + '=' +  IntToStr(_Emp.ID)+')';
  end;
begin
  inherited Create(TEmpresaImpuesto, TEmpresaImpuestoDM.CreateAll( False, WhereString )  );
end;

function TEmpresaImpuestoList.CreateNewObject: TPDObject;
begin
  result := TEmpresaImpuesto.Create;
end;

function TEmpresaImpuestoList.FindPredeterminadoProductos: Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      Result := actual.ImpuestoConcepto.EsPredeterminadoProductos;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TEmpresaImpuestoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TEmpresaImpuesto,TEmpresaImpuestoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TImpuestoCondicion }
constructor TImpuestoCondicion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TImpuestoCondicionDM);
  FSeIncluyeEnPrecio    := False;
  FControlEnFacturacion := False;
end;

function TImpuestoCondicion.GetCondicionDeIva : TCondicionDeIva;
begin
  if not assigned(FCondicionDeIva) then
    GetObject(TCondicionDeIva,FCondicionDeIva,CondicionDeIvaID);

  result := TCondicionDeIva(FCondicionDeIva);
end;

function TImpuestoCondicion.GetImpuesto: TImpuesto;
begin
  if not assigned(FImpuesto) then
    GetObject(TImpuesto,FImpuesto,ImpuestoID);
  result := TImpuesto(FImpuesto);
end;

procedure TImpuestoCondicion.SetCondicionDeIvaID(Value : TObjectID);
begin
  if (Value<>FCondicionDeIvaID) and Assigned(FCondicionDeIva) then
    FreeAndNil(FCondicionDeIva);
  FCondicionDeIvaID := Value;
end;

 { TImpuestoCondicionDM }
class function TImpuestoCondicionDM.TableName : string;
begin
  result := 'impuestocondiciones';
end;


class function TImpuestoCondicionDM.ID_FieldName : string;
begin
  result := 'ImpuestoCondicionID';
end;


procedure TImpuestoCondicionDM.PopulateFields(PDObject: TPDObject);
begin
  with TImpuestoCondicion(PDObject) do
    begin
      IDField[_CondicionDeIvaID]          := CondicionDeIvaID;
      IDField[_ImpuestoID]                := ImpuestoID;
      BooleanField[_SeIncluyeEnPrecio]    := FSeIncluyeEnPrecio;
      BooleanField[_ControlEnFacturacion] := FControlEnFacturacion;
    end;
end;


procedure TImpuestoCondicionDM.PopulateObject(PDObject: TPDObject);
begin
  with TImpuestoCondicion(PDObject) do
    begin
      FCondicionDeIvaID  := IDField[_CondicionDeIvaID];
      FImpuestoID        := IDField[_ImpuestoID];
      FSeIncluyeEnPrecio := BooleanField[_SeIncluyeEnPrecio];
      FControlEnFacturacion := BooleanField[_ControlEnFacturacion];
    end;
end;

 { TImpuestoCondicionList }
function TImpuestoCondicionList.Getactual : TImpuestoCondicion;
begin
  result := TImpuestoCondicion(CurrentObject);
end;

constructor TImpuestoCondicionList.CreateByImpuesto(_I: TImpuesto; _soloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '('+TImpuestoCondicionDM._ImpuestoID + '=' +  IntToStr(_I.ID)+')';
  end;
begin
  inherited Create(TImpuestoCondicion, TImpuestoCondicionDM.CreateAll( False, WhereString, _SoloActivos )  );
end;

function TImpuestoCondicionList.CreateNewObject: TPDObject;
begin
  result := TImpuestoCondicion.Create;
end;

constructor TImpuestoCondicionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TImpuestoCondicion,TImpuestoCondicionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TPadron }
constructor TPadron.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPadronDM);
  SaveSqlLog    := True;
end;

function TPadron.GetCampos: TPadronCampoList;
begin
  if not Assigned(FCampos) then
    GetList(TPDList(FCampos), TPDList(TPadronCampoList.CreateByPadron(Self)));
  Result := FCampos;
end;

function TPadron.GetPublicacionActual: TPadronPublicacion;
var
  PL : TPadronPublicacionList;
begin
  if not Assigned(FPublicacionActual) then
    begin
      Try
        PL := TPadronPublicacionList.CreateByPublicacionActual(Self);
        PL.First;
        if (PL.Count = 1) then
          FPublicacionActual := PL.Actual
        else
          FPublicacionActual := nil;
      Finally
        PL := Nil;
      End;
    end;
  Result := TPadronPublicacion(FPublicacionActual);
end;

function TPadron.GetPublicaciones: TPadronPublicacionList;
begin
  if not Assigned(FPublicaciones) then
    GetList(TPDList(FPublicaciones), TPDList(TPadronPublicacionList.CreateByPadron(Self)));
  Result := FPublicaciones;
end;

{ TPadronDM }
class function TPadronDM.TableName : string;
begin
  result := 'padrones';
end;


class function TPadronDM.ID_FieldName : string;
begin
  result := 'PadronID';
end;

class function TPadronDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TPadronDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TPadronDM.PopulateFields(PDObject: TPDObject);
begin
  with TPadron(PDObject) do
    begin
      StringField[_Descripcion]       := Descripcion;
      BooleanField[_EsInactivo]       := EsInactivo;
      StringField[_TablaImportacion]  := FTablaImportacion;
      StringField[_SeparadorDeCampos] := FSeparadorDeCampos;
      StringField[_SeparadorDeRegistros] := FSeparadorDeRegistros;
      BooleanField[_EsPadronRetenciones]        := FEsPadronRetenciones;
      BooleanField[_EsPadronPercepciones]       := FEsPadronPercepciones;
      StringField[_CaracterIdentificadorDeTipo] := FCaracterIdentificadorDeTipo;
      BooleanField[_EsMensual]                  := fEsMensual;
      BooleanField[_EsBimestral]                := fEsBimestral;
      BooleanField[_EsTrimestral]               := fEsTrimestral;
      BooleanField[_EsCuatrimestral]            := fEsCuatrimestral;
      BooleanField[_Recordar]                   := fRecordar;
      IntegerField[_DiasAnticipacion]           := fDiasAnticipacion;
      StringField[_DireccionesAviso]            := fDireccionesAviso;
    end;
end;


procedure TPadronDM.PopulateObject(PDObject: TPDObject);
begin
  with TPadron(PDObject) do
    begin
      FDescripcion                 := StringField[_Descripcion];
      FEsInactivo                  := BooleanField[_EsInactivo];
      FTablaImportacion            := StringField[_TablaImportacion];
      FSeparadorDeCampos           := StringField[_SeparadorDeCampos];
      FSeparadorDeRegistros        := StringField[_SeparadorDeRegistros];
      FEsPadronPercepciones        := BooleanField[_EsPadronPercepciones];
      FEsPadronRetenciones         := BooleanField[_EsPadronRetenciones];
      FCaracterIdentificadorDeTipo := StringField[_CaracterIdentificadorDeTipo];
      fEsMensual                   := BooleanField[_EsMensual];
      fEsBimestral                 := BooleanField[_EsBimestral];
      fEsTrimestral                := BooleanField[_EsTrimestral];
      fEsCuatrimestral             := BooleanField[_EsCuatrimestral];
      fRecordar                    := BooleanField[_Recordar];
      fDiasAnticipacion            := IntegerField[_DiasAnticipacion];
      fDireccionesAviso            := StringField[_DireccionesAviso];
    end;
end;

 { TPadronList }
function TPadronList.Getactual : TPadron;
begin
  result := TPadron(CurrentObject);
end;

function TPadronList.CreateNewObject: TPDObject;
begin
  result := TPadron.Create;
end;

constructor TPadronList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPadron,TPadronDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

  { TPadronPublicacion }
constructor TPadronPublicacion.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPadronPublicacionDM);
  SaveSQLLog := True;
  FFechaDeVigenciaDesde := null;
  FFechaDeVigenciaHasta := null;
end;

procedure TPadronPublicacion.Delete;
var
  SqlQuery : TUniQuery;
begin
  If (Items.Count > 0) then
    Begin
      If (Aplicacion.Mensaje( 'Esta Publicacion del padron contiene Registros. Se eliminarán todas esas asociaciones. Prosigue ?', 'Atencion', MB_YESNO) = ID_YES) then
        begin
          Items.Actual.DeleteFull(Self); // borra todos los items no solo el actual.
          try
            SqlQuery            := TUniQuery.Create(Nil);
            SqlQuery.Connection := Aplicacion.Database.ConexionReal;
            SqlQuery.Sql.Text   := 'Delete ' + Padron.TablaImportacion;
            SqlQuery.Execute;
          finally
            SqlQuery.Close;
            FreeAndNil(SqlQuery);
          end;
        end
      else
        Abort;
    End;
  inherited;
end;

function TPadronPublicacion.GetItems: TPadronItemList;
begin
  if not Assigned(FItems) then
    GetList(TPDList(FItems), TPDList(TPadronItemList.CreateByPadronPublicacion(Self)));
  Result := FItems;
end;

function TPadronPublicacion.GetPadron: TPadron;
begin
  if not assigned(FPadron) then
    GetObject(TPadron, FPadron, PadronID);
  Result := TPadron(FPadron);
end;

procedure TPadronPublicacion.limpiarItems;
begin
  if assigned(FItems) then
    FreeAndNil(FItems);
end;

procedure TPadronPublicacion.SetPadronID(const Value: TObjectID);
begin
  if (Value<>FPadronID) and Assigned(FPadron) then
    FreeAndNil(FPadron);
  FPadronID := Value;
end;

{ TPadronPublicacionDM }
class function TPadronPublicacionDM.TableName : string;
begin
  result := 'PadronPublicaciones';
end;

class function TPadronPublicacionDM.ID_FieldName : string;
begin
  result := 'PadronPublicacionID';
end;


procedure TPadronPublicacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TPadronPublicacion(PDObject) do
    begin
      IDField[_PadronID]             := FPadronID;
      DateField[_FechaDeVigenciaHasta] := FechaDeVigenciaHasta;
      DateField[_FechaDeVigenciaDesde] := FechaDeVigenciaDesde;
    end;
end;

procedure TPadronPublicacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TPadronPublicacion(PDObject) do
    begin
      FPadronID             := IDField[_PadronID];
      FFechaDeVigenciaDesde := DateField[_FechaDeVigenciaDesde];
      FFechaDeVigenciaHasta := DateField[_FechaDeVigenciaHasta];
    end;
end;

 { TPadronPublicacionList }
function TPadronPublicacionList.GetActual : TPadronPublicacion;
begin
  result := TPadronPublicacion(CurrentObject);
end;

constructor TPadronPublicacionList.CreateByPadronAndFecha(_Fecha: TString; _P: TPadron);
  Function WhereString: String;
  begin
    Result := '('+QuotedStr( _Fecha ) + ' Between ' + TPadronPublicacionDM._FechaDeVigenciaDesde + ' and ' + TPadronPublicacionDM._FechaDeVigenciaHasta + ')';
    Result := Result + ' and (' + TPadronPublicacionDM._PadronID + '=' + IntToStr(_P.ID)+')';
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateAll(False, WhereString, false ));
end;

constructor TPadronPublicacionList.CreateByPadronAndFecha(_Fecha: TString; _PID: TObjectID);
  Function WhereString: String;
  begin
    Result := '('+QuotedStr( _Fecha ) + ' Between ' + TPadronPublicacionDM._FechaDeVigenciaDesde + ' and ' + TPadronPublicacionDM._FechaDeVigenciaHasta + ')';
    Result := Result + ' and (' + TPadronPublicacionDM._PadronID + '=' + IntToStr(_PID)+')';
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateAll(False, WhereString, false ));
end;

constructor TPadronPublicacionList.CreateByPadronAndFechaDesdeFechaHasta(_FechaDesde, _FechaHasta: TString ; _P : TPadron);
  Function WhereString: String;
  begin
    Result := TPadronPublicacionDM._FechaDeVigenciaDesde + '=' + QuotedStr( _FechaDesde ) + ' and ' + TPadronPublicacionDM._FechaDeVigenciaHasta + '=' + QuotedStr( _FechaHasta ) ;
    Result := Result + ' and ' + TPadronPublicacionDM._PadronID + '=' + IntToStr(_P.ID);
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateAll(False, WhereString, false ));
end;

constructor TPadronPublicacionList.CreateByPadron(_P: TPadron);
  Function WhereString: String;
  begin
    Result := TPadronPublicacionDM._PadronID + '=' + IntToStr(_P.ID) ;
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateAll(False, WhereString, false ));
end;

constructor TPadronPublicacionList.CreateByPublicacionActual(_P: TPadron);
  Function WhereString: String;
  begin
    Result := TPadronPublicacionDM._PadronID + '=' + IntToStr(_P.ID) ;
  end;
  Function OrderBy: String;
  begin
    Result := TPadronPublicacionDM._FechaDeVigenciaHasta + ' desc';
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateTop( 1 , WhereString, OrderBy ) );
end;

constructor TPadronPublicacionList.CreateEmpty;
begin
  inherited Create( TPadronPublicacion, TPadronPublicacionDM.CreateEmpty );
end;

function TPadronPublicacionList.CreateNewObject: TPDObject;
begin
  result := TPadronPublicacion.Create;
end;

constructor TPadronPublicacionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPadronPublicacion,TPadronPublicacionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

{ TPadronItem }

constructor TPadronItem.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPadronItemDM);
  SaveSqlLog    := False;
  FAlicuotaRetencion := null;
  FAlicuotaPercepcion := null;
  FAltaBajaSujeto := null;
  FCambioAlicuota := null;
  FCUIT := null;
  FFechaPublicacion := null;
  FFechaVigenciaDesde := null;
  FFechaVigenciaHasta := null;
  FGrupo := null;
  FTipoDeContribuyente := null;
end;

procedure TPadronItem.DeleteFull(_P: TPadronPublicacion);
var
  Condicion : String;
begin
  Condicion := TPadronItemDM._PadronPublicacionID + '=' + IntToStr(_P.ID);
  inherited DeleteFull(Condicion);
end;

function TPadronItem.GetGrupo: TString;
begin
  Result := AnsiLeftStr( FGrupo, 2 );
end;

function TPadronItem.GetPadronPublicacion: TPadronPublicacion;
begin
  if not assigned(FPadronPublicacion) then
    GetObject(TPadronPublicacion, FPadronPublicacion, PadronPublicacionID);
  Result := TPadronPublicacion(FPadronPublicacion);
end;

procedure TPadronItem.SetGrupo(const Value: TString);
begin
  FGrupo := Value;
end;

procedure TPadronItem.SetPadronPublicacionID(const Value: TObjectID);
begin
  if (Value<>FPadronPublicacionID) and Assigned(FPadronPublicacion) then
    FreeAndNil(FPadronPublicacion);
  FPadronPublicacionID := Value;
end;

procedure TPadronItem.ValidateOnInsert;
begin
  inherited;
  Aplicacion.RaiseExceptionCreate('La Tabla ' + TPadronItemDM.TableName + ' Es Autonumerada, no permite agregado de registros por Framework');
end;

{ TPadronItemDM }
class function TPadronItemDM.TableName : string;
begin
  Result := 'PadronItems';
end;

class function TPadronItemDM.ID_FieldName : string;
begin
  Result := 'PadronItemID';
end;

procedure TPadronItemDM.PopulateFields(PDObject: TPDObject);
begin
  with TPadronItem(PDObject) do
    begin
      FloatField[_AlicuotaPercepcion]   := AlicuotaPercepcion;
      FloatField[_AlicuotaRetencion]    := AlicuotaRetencion;
      StringField[_AltaBajaSujeto]      := AltaBajaSujeto;
      StringField[_CambioAlicuota]      := CambioAlicuota;
      StringField[_CUIT]                := CUIT;
      DateField[_FechaPublicacion]      := FechaPublicacion;
      DateField[_FechaVigenciaDesde]    := FechaVigenciaDesde;
      DateField[_FechaVigenciaHasta]    := FechaVigenciaHasta;
      StringField[_Grupo]               := Grupo;
      IDField[_PadronPublicacionID]     := PadronPublicacionID;
      StringField[_TipoDeContribuyente] := TipoDeContribuyente;
    end;
end;


procedure TPadronItemDM.PopulateObject(PDObject: TPDObject);
begin
  with TPadronItem(PDObject) do
    begin
      FAlicuotaPercepcion  := FloatField[_AlicuotaPercepcion];
      FAlicuotaRetencion   := FloatField[_AlicuotaRetencion];
      FAltaBajaSujeto      := StringField[_AltaBajaSujeto];
      FCambioAlicuota      := StringField[_CambioAlicuota];
      FCUIT                := StringField[_CUIT];
      FFechaPublicacion    := DateField[_FechaPublicacion];
      FFechaVigenciaDesde  := DateField[_FechaVigenciaDesde];
      FFechaVigenciaHasta  := DateField[_FechaVigenciaHasta];
      FGrupo               := StringField[_Grupo];
      FPadronPublicacionID := IDField[_PadronPublicacionID];
      FTipoDeContribuyente := StringField[_TipoDeContribuyente];
    end;
end;

 { TPadronItemList }
function TPadronItemList.GetActual : TPadronItem;
begin
  result := TPadronItem(CurrentObject);
end;

constructor TPadronItemList.CreateByPadronFechaIncluidaAndEmpresa(_P: TPadron; _Fecha: String; _E: TEmpresa);
  Function WhereString : String;
  begin
    Result := TPadronItemDM._FechaVigenciaDesde + ' <= ' + QuotedStr(_Fecha) + ' and ' + TPadronItemDM._FechaVigenciaHasta + ' >= ' + QuotedStr( _Fecha );
    Result := Result + ' and ' + TPadronItemDM._CUIT  + ' = ' + QuotedStr( _E.CUIT );
    Result := Result + ' and ' + TPadronItemDM._PadronPublicacionID + ' in ( select ' + TPadronPublicacionDM.ID_FieldName + ' from ' + TPadronPublicacionDM.TableName + ' where ' + TPadronPublicacionDM._PadronID  + ' = ' + IntToStr( _P.ID ) + ')';
  end;
begin
  inherited Create(TPadronItem,TPadronItemDM.CreateAll(False, WhereString, false ));
end;

constructor TPadronItemList.CreateByPadronPublicacion(_P: TPadronPublicacion);
  Function WhereString: String;
  begin
    Result := TPadronItemDM._PadronPublicacionID + '=' + IntToStr(_P.ID) ;
  end;
begin
  inherited Create(TPadronItem,TPadronItemDM.CreateAll(False, WhereString, false ));
end;

function TPadronItemList.CreateNewObject: TPDObject;
begin
  result := TPadronItem.Create;
end;

constructor TPadronItemList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPadronItem,TPadronItemDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TPadronCampo }
constructor TPadronCampo.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPadronCampoDM);
  SaveSQLLog := True;
  FOrden := null;
end;

function TPadronCampo.GetPadron : TPadron;
begin
  if not assigned(FPadron) then
    GetObject(TPadron,FPadron,PadronID);

  result := TPadron(FPadron);
end;

procedure TPadronCampo.SetPadronID(Value : TObjectID);
begin
  if (Value<>FPadronID) and Assigned(FPadron) then
    FreeAndNil(FPadron);

  FPadronID := Value;

end;
 { TPadronCampoDM }
class function TPadronCampoDM.TableName : string;
begin
  result := 'PadronCampos';
end;


class function TPadronCampoDM.ID_FieldName : string;
begin
  result := 'PadronCampoID';
end;

class function TPadronCampoDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TPadronCampoDM.PopulateFields(PDObject: TPDObject);
begin
  with TPadronCampo(PDObject) do
    begin
      IDField[_PadronID]        := PadronID;
      StringField[_Descripcion] := Descripcion;
      StringField[_Sentencia]   := Sentencia;
      BooleanField[_EsInactivo] := EsInactivo;
      IntegerField[_Orden]      := FOrden;
      IntegerField[_LargoCampo] := FLargoCampo;
    end;
end;


procedure TPadronCampoDM.PopulateObject(PDObject: TPDObject);
begin
  with TPadronCampo(PDObject) do
    begin
      FDescripcion := StringField[_Descripcion];
      FSentencia   := StringField[_Sentencia];
      FEsInactivo  := BooleanField[_EsInactivo];
      FOrden       := IntegerField[_Orden];
      FPadronID    := IDField[_PadronID];
      FLargoCampo  := IntegerField[_LargoCampo];
    end;
end;

 { TPadronCampoList }
function TPadronCampoList.GetActual : TPadronCampo;
begin
  result := TPadronCampo(CurrentObject);
end;

constructor TPadronCampoList.CreateByPadron(_P: TPadron);
  Function WhereString: String;
  begin
    Result := TPadronCampoDM._PadronID + '=' + IntToStr(_P.ID) ;
  end;
  Function OrderByString: String;
  begin
    Result := TPadronCampoDM._Orden;
  end;
begin
  inherited Create(TPadronCampo,TPadronCampoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TPadronCampoList.CreateNewObject: TPDObject;
begin
  result := TPadronCampo.Create;
end;

function TPadronCampoList.FindDescripcion(_C: String): Integer;
begin
  Result := -1;
  if (Count = 0) then
    exit;
  First;
  While (Result = -1 ) and (Not IsLast) do
    begin
      try
        if ( AnsiUpperCase(Actual.Descripcion) =  AnsiUpperCase(_C) ) then
          Result := Actual.Orden;
      except
        Result := -1;
      end;
      if (Result = -1 ) then
        next;
    end;
  if IsLast then
    First;
end;

constructor TPadronCampoList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPadronCampo,TPadronCampoDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TServicioImpuesto }
constructor TServicioImpuesto.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TServicioImpuestoDM);
  SaveSQLLog := True;
end;

function TServicioImpuesto.GetImpuestoConcepto : TImpuestoConcepto;
begin
  if not Assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto,FImpuestoConcepto,FImpuestoConceptoID);
  result := TImpuestoConcepto(FImpuestoConcepto);
end;

procedure TServicioImpuesto.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value <> FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);
  FImpuestoConceptoID := Value;
end;

function TServicioImpuesto.GetServicio : TServicio;
begin
  if not assigned(FServicio) then
    GetObject(TServicio,FServicio,FServicioID);
  result := TServicio(FServicio);
end;

procedure TServicioImpuesto.SetServicioID(Value : TObjectID);
begin
  if (Value<>FServicioID) and Assigned(FServicio) then
    FreeAndNil(FServicio);
  FServicioID := Value;
end;

 { TServicioImpuestoDM }
class function TServicioImpuestoDM.TableName : string;
begin
  Result := 'ServicioImpuestos';
end;

class function TServicioImpuestoDM.ConexionBaseDeDatos: TConnection;
begin
  Result := Aplicacion.DatabaseForFabricados;
end;

class function TServicioImpuestoDM.ID_FieldName : string;
begin
  Result := 'ServicioImpuestoID';
end;

procedure TServicioImpuestoDM.PopulateFields(PDObject: TPDObject);
begin
  with TServicioImpuesto(PDObject) do
    begin
      IDField[_ServicioID]         := ServicioID;
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
    end;
end;

procedure TServicioImpuestoDM.PopulateObject(PDObject: TPDObject);
begin
  with TServicioImpuesto(PDObject) do
    begin
      FServicioID         := IDField[_ServicioID];
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
    end;
end;

 { TServicioImpuestoList }
function TServicioImpuestoList.GetActual : TServicioImpuesto;
begin
  result := TServicioImpuesto(CurrentObject);
end;

constructor TServicioImpuestoList.CreateByServicio(_S: TServicio);
  function WhereString: String;
  Begin
    Result := '(' + TServicioImpuestoDM.TableName + '.' + TServicioImpuestoDM._ServicioID + '=' +  IntToStr(_S.ID) + ')';
  End;
begin
  inherited Create(TServicioImpuesto, TServicioImpuestoDM.CreateAll ( False, WhereString ));
end;

function TServicioImpuestoList.CreateNewObject: TPDObject;
begin
  result := TServicioImpuesto.Create;
end;

function TServicioImpuestoList.FindPredeterminadoProductos: Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      Result := actual.ImpuestoConcepto.EsPredeterminadoProductos;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TServicioImpuestoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TServicioImpuesto,TServicioImpuestoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TCriticidad }
function TCriticidad.GetDescriptibleAbreviadoListClass;
begin
  result := TCriticidadList;
end;
constructor TCriticidad.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCriticidadDM);
end;
 { TCriticidadDM }
class function TCriticidadDM.TableName : string;
begin
  result := 'criticidades';
end;


class function TCriticidadDM.ID_FieldName : string;
begin
  result := 'CriticidadID';
end;

class function TCriticidadDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TCriticidadDM.PopulateFields(PDObject: TPDObject);
begin
  with TCriticidad(PDObject) do
    begin
      StringField[_Codigo] := Codigo;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;


procedure TCriticidadDM.PopulateObject(PDObject: TPDObject);
begin
  with TCriticidad(PDObject) do
    begin
      FCodigo := StringField[_Codigo];
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TCriticidadList }
function TCriticidadList.Getactual : TCriticidad;
begin
  result := TCriticidad(CurrentObject);
end;

function TCriticidadList.CreateNewObject: TPDObject;
begin
  result := TCriticidad.Create;
end;

constructor TCriticidadList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCriticidad,TCriticidadDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TEjercicioContable }
constructor TEjercicioContable.Create;
begin
  inherited;
  DMObject    := Aplicacion.DMPRovider.GetGlobalDM(TEjercicioContableDM);
  SaveSQLLog  := True;
  FAnio       := null;
  FFechaHasta := null;
  FFechaDesde := null;
end;
 function TEjercicioContable.GetFechaDesde: TFechaHora;
begin
  if (FFechaDesde = Null) or (FFechaDesde = 0) then
    FFechaDesde := StrToDateTime( '01/07/' + IntToStr( Anio ) + _PrimerHora );
  Result := FFechaDesde;
end;

function TEjercicioContable.GetFechaHasta: TFechaHora;
begin
  if (FFechaHasta = Null) or (FFechaHasta = 0) then
    FFechaHasta := StrToDateTime( '30/06/' + IntToStr( Anio + 1 ) + _UltimaHora );
  Result := FFechaHasta;
end;

function TEjercicioContable.GetPeriodosContables: TPeriodoContableList;
begin
  if not Assigned(FPeriodosContables) then
    GetList(TPDList(FPeriodosContables), TPDList( TPeriodoContableList.CreateByEjericioContable(Self)));
  Result := TPeriodoContableList(FPeriodosContables);
end;

{ TEjercicioContableDM }
class function TEjercicioContableDM.TableName : string;
begin
  Result := 'EjerciciosContables';
end;

class function TEjercicioContableDM.ID_FieldName : string;
begin
  Result := 'EjercicioContableID';
end;

class function TEjercicioContableDM.EsInactivo_FieldName : string;
begin
  Result := _EsInactivo;
end;

procedure TEjercicioContableDM.PopulateFields(PDObject: TPDObject);
begin
  with TEjercicioContable(PDObject) do
    begin
      IntegerField[_Anio]       := Anio;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
      DateTimeField[_FechaDesde]    := FechaDesde;
      DateTimeField[_FechaHasta]    := FechaHasta;
    end;
end;


procedure TEjercicioContableDM.PopulateObject(PDObject: TPDObject);
begin
  with TEjercicioContable(PDObject) do
    begin
      FAnio := IntegerField[_Anio];
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
      FFechaDesde := DateTimeField[_FechaDesde];
      FFechaHasta := DateTimeField[_FechaHasta];
    end;
end;

 { TEjercicioContableList }
function TEjercicioContableList.GetActual : TEjercicioContable;
begin
  result := TEjercicioContable(CurrentObject);
end;

function TEjercicioContableList.CreateNewObject: TPDObject;
begin
  result := TEjercicioContable.Create;
end;

constructor TEjercicioContableList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TEjercicioContable,TEjercicioContableDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TPeriodoContable }
constructor TPeriodoContable.Create;
begin
  inherited;
  DMObject            := Aplicacion.DMPRovider.GetGlobalDM(TPeriodoContableDM);
  SaveSQLLog          := True;
  FFechaDesde         := null;
  FFechaHasta         := null;
  FPeriodo            := null;
  FCodigoInternoSifab := Null;
end;

function TPeriodoContable.GetCodigoInternoSifab: TEntero;
begin
  if (FCodigoInternoSifab = Null) or (FCodigoInternoSifab = 0) then
    FCodigoInternoSifab := Aplicacion.Sesion.ConexionSifab.Get_Integer_Field('PeriodoContable', 'Periodo = ' + QuotedStr( Periodo ), 'CodigoInternoPeriodoContable');
  Result := FCodigoInternoSifab;
end;

function TPeriodoContable.GetEjercicioContable: TEjercicioContable;
begin
  if not Assigned(FEjercicioContable) then
    GetObject(TEjercicioContable, FEjercicioContable, FEjercicioContableID);
  Result := TEjercicioContable(FEjercicioContable);
end;

procedure TPeriodoContable.SetEjercicioContableID(Value : TObjectID);
begin
  if (Value<>FEjercicioContableID) and Assigned(FEjercicioContable) then
    FreeAndNil(FEjercicioContable);
  FEjercicioContableID := Value;
end;

 { TPeriodoContableDM }
class function TPeriodoContableDM.TableName : string;
begin
  result := 'PeriodosContables';
end;

class function TPeriodoContableDM.ID_FieldName : string;
begin
  result := 'PeriodoContableID';
end;

procedure TPeriodoContableDM.PopulateFields(PDObject: TPDObject);
begin
  with TPeriodoContable(PDObject) do
    begin
      IDField[_EjercicioContableID] := EjercicioContableID;
      DateTimeField[_FechaDesde]    := FechaDesde;
      DateTimeField[_FechaHasta]    := FechaHasta;
      StringField[_Periodo]         := Periodo;
    end;
end;


procedure TPeriodoContableDM.PopulateObject(PDObject: TPDObject);
begin
  with TPeriodoContable(PDObject) do
    begin
      FEjercicioContableID := IDField[_EjercicioContableID];
      FFechaDesde          := DateTimeField[_FechaDesde];
      FFechaHasta          := DateTimeField[_FechaHasta];
      FPeriodo             := StringField[_Periodo];
    end;
end;

 { TPeriodoContableList }
function TPeriodoContableList.GetActual : TPeriodoContable;
begin
  result := TPeriodoContable(CurrentObject);
end;

constructor TPeriodoContableList.CreateByEjericioContable(_EJ: TEjercicioContable);
  Function WhereString: String;
  begin
    Result := '(' + TPeriodoContableDM._EjercicioContableID + ' = ' + IntToStr( _EJ.ID ) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := TPeriodoContableDM._FechaDesde;
  end;
begin
  inherited Create(TPeriodoContable,TPeriodoContableDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TPeriodoContableList.CreateNewObject: TPDObject;
begin
  result := TPeriodoContable.Create;
end;

constructor TPeriodoContableList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPeriodoContable,TPeriodoContableDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TPasoDeFabricacionMotivoDeAtraso }
constructor TPasoDeFabricacionMotivoDeAtraso.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TPasoDeFabricacionMotivoDeAtrasoDM);
  SaveSQLLog := True;
end;

function TPasoDeFabricacionMotivoDeAtraso.GetMotivoDeAtraso : TMotivoDeAtraso;
begin
  if not assigned(FMotivoDeAtraso) then
    GetObject(TMotivoDeAtraso,FMotivoDeAtraso,MotivoDeAtrasoID);
  Result := TMotivoDeAtraso(FMotivoDeAtraso);
end;

procedure TPasoDeFabricacionMotivoDeAtraso.SetMotivoDeAtrasoID(Value : TObjectID);
begin
  if (Value<>FMotivoDeAtrasoID) and Assigned(FMotivoDeAtraso) then
    FreeAndNil(FMotivoDeAtraso);
  FMotivoDeAtrasoID := Value;
end;

function TPasoDeFabricacionMotivoDeAtraso.GetPasoDeFabricacion : TPasoDeFabricacion;
begin
  if not assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion,FPasoDeFabricacion,PasoDeFabricacionID);
  result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

procedure TPasoDeFabricacionMotivoDeAtraso.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;

end;
 { TPasoDeFabricacionMotivoDeAtrasoDM }
class function TPasoDeFabricacionMotivoDeAtrasoDM.TableName : string;
begin
  result := 'PasoDeFabricacionMotivosDeAtraso';
end;


class function TPasoDeFabricacionMotivoDeAtrasoDM.ID_FieldName : string;
begin
  result := 'PasoDeFabricacionMotivoDeAtrasoID';
end;


procedure TPasoDeFabricacionMotivoDeAtrasoDM.PopulateFields(PDObject: TPDObject);
begin
  with TPasoDeFabricacionMotivoDeAtraso(PDObject) do
    begin
      IDField[_MotivoDeAtrasoID] := MotivoDeAtrasoID;
      IDField[_PasoDeFabricacionID] := PasoDeFabricacionID;
    end;
end;


procedure TPasoDeFabricacionMotivoDeAtrasoDM.PopulateObject(PDObject: TPDObject);
begin
  with TPasoDeFabricacionMotivoDeAtraso(PDObject) do
    begin
      FMotivoDeAtrasoID := IDField[_MotivoDeAtrasoID];
      FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
    end;
end;

 { TPasoDeFabricacionMotivoDeAtrasoList }
function TPasoDeFabricacionMotivoDeAtrasoList.GetActual : TPasoDeFabricacionMotivoDeAtraso;
begin
  result := TPasoDeFabricacionMotivoDeAtraso(CurrentObject);
end;

constructor TPasoDeFabricacionMotivoDeAtrasoList.CreateByPasoDeFabricacion(_PF: TPasoDeFabricacion);
Function WhereString : String;
  begin
    Result := TPasoDeFabricacionMotivoDeAtrasoDM._PasoDeFabricacionID + '=' + IntToStr(_PF.ID);
  end;
begin
  inherited Create(TPasoDeFabricacionMotivoDeAtraso,TPasoDeFabricacionMotivoDeAtrasoDM.CreateAll(False, WhereString));
end;

function TPasoDeFabricacionMotivoDeAtrasoList.CreateNewObject: TPDObject;
begin
  result := TPasoDeFabricacionMotivoDeAtraso.Create;
end;

constructor TPasoDeFabricacionMotivoDeAtrasoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPasoDeFabricacionMotivoDeAtraso,TPasoDeFabricacionMotivoDeAtrasoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TProductoStockeable }
constructor TProductoStockeable.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TProductoStockeableDM);
  SaveSQLLog := True;
  FStockMinimo := null;
  FStockOptimo := null;
end;

function TProductoStockeable.GetProducto : TProducto;
begin
  if not assigned(FProducto) then
    GetObject(TProducto,FProducto,ProductoID);

  result := TProducto(FProducto);
end;

procedure TProductoStockeable.SetProductoID(Value : TObjectID);
begin
  if (Value<>FProductoID) and Assigned(FProducto) then
    FreeAndNil(FProducto);

  FProductoID := Value;

end;
 { TProductoStockeableDM }
class function TProductoStockeableDM.TableName : string;
begin
  result := 'ProductosStockeables';
end;


class function TProductoStockeableDM.ID_FieldName : string;
begin
  result := 'ProductoStockeableID';
end;


procedure TProductoStockeableDM.PopulateFields(PDObject: TPDObject);
begin
  with TProductoStockeable(PDObject) do
    begin
      IDField[_ProductoID] := ProductoID;
      IntegerField[_StockMinimo] := StockMinimo;
      IntegerField[_StockOptimo] := StockOptimo;
    end;
end;


procedure TProductoStockeableDM.PopulateObject(PDObject: TPDObject);
begin
  with TProductoStockeable(PDObject) do
    begin
      FProductoID := IDField[_ProductoID];
      FStockMinimo := IntegerField[_StockMinimo];
      FStockOptimo := IntegerField[_StockOptimo];
    end;
end;

 { TProductoStockeableList }
function TProductoStockeableList.GetActual : TProductoStockeable;
begin
  result := TProductoStockeable(CurrentObject);
end;

function TProductoStockeableList.CreateNewObject: TPDObject;
begin
  result := TProductoStockeable.Create;
end;

constructor TProductoStockeableList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TProductoStockeable,TProductoStockeableDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TOperacion }
constructor TOperacion.Create;
begin
  inherited;
  DMObject           := Aplicacion.DMPRovider.GetGlobalDM(TOperacionDM);
  SaveSQLLog         := True;
  FUtilizaManoDeObra := null;
end;
 { TProcesoOperacionDM }
class function TOperacionDM.TableName : string;
begin
  result := 'Operaciones';
end;

class function TOperacionDM.ID_FieldName : string;
begin
  result := 'OperacionID';
end;

class function TOperacionDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;

procedure TOperacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TOperacion(PDObject) do
    begin
      StringField[_Descripcion]        := Descripcion;
      BooleanField[_EsInactivo]        := EsInactivo;
     end;
end;

procedure TOperacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TOperacion(PDObject) do
    begin
      FDescripcion       := StringField[_Descripcion];
      FEsInactivo        := BooleanField[_EsInactivo];
     end;
end;

 { TProcesoOperacionList }
function TOperacionList.GetActual : TOperacion;
begin
  result := TOperacion(CurrentObject);
end;

function TOperacionList.CreateNewObject: TPDObject;
begin
  result := TOperacion.Create;
end;

constructor TOperacionList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TOperacion, TOperacionDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TPasoDeFabricacionOperacion }
constructor TPasoDeFabricacionOperacion.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TPasoDeFabricacionOperacionDM);
  SaveSQLLog := True;
  FUtilizaManoDeObra := False;
end;

function TPasoDeFabricacionOperacion.GetPasoDeFabricacion: TPasoDeFabricacion;
begin
  if not Assigned(FPasoDeFabricacion) then
    GetObject(TPasoDeFabricacion, FPasoDeFabricacion, FPasoDeFabricacionID);
  Result := TPasoDeFabricacion(FPasoDeFabricacion);
end;

function TPasoDeFabricacionOperacion.GetOperacion: TOperacion;
begin
  if not Assigned(FOperacion) then
    GetObject(TOperacion, FOperacion, FOperacionID);
  Result := TOperacion(FOperacion);
end;

procedure TPasoDeFabricacionOperacion.SetPasoDeFabricacionID(Value : TObjectID);
begin
  if (Value<>FPasoDeFabricacionID) and Assigned(FPasoDeFabricacion) then
    FreeAndNil(FPasoDeFabricacion);
  FPasoDeFabricacionID := Value;
end;

procedure TPasoDeFabricacionOperacion.SetOperacionID(Value : TObjectID);
begin
  if (Value<>FOperacionID) and Assigned(FOperacion) then
    FreeAndNil(FOperacion);
  FOperacionID := Value;
end;

 { TProcesoOperacionPosibleDM }
class function TPasoDeFabricacionOperacionDM.TableName : string;
begin
  result := 'PasoDeFabricacionOperaciones';
end;


class function TPasoDeFabricacionOperacionDM.ID_FieldName : string;
begin
  result := 'PasoDeFabricacionOperacionID';
end;

procedure TPasoDeFabricacionOperacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TPasoDeFabricacionOperacion(PDObject) do
    begin
      IDField[_PasoDeFabricacionID]    := PasoDeFabricacionID;
      IDField[_OperacionID]            := OperacionID;
      BooleanField[_UtilizaManoDeObra] := UtilizaManoDeObra;
      IntegerField[_Secuencia]         := Secuencia;
    end;
end;


procedure TPasoDeFabricacionOperacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TPasoDeFabricacionOperacion(PDObject) do
    begin
      FPasoDeFabricacionID := IDField[_PasoDeFabricacionID];
      FOperacionID         := IDField[_OperacionID];
      FUtilizaManoDeObra   := BooleanField[_UtilizaManoDeObra];
      FSecuencia           := IntegerField[_Secuencia];
    end;
end;

 { TProcesoOperacionPosibleList }
function TPasoDeFabricacionOperacionList.GetActual : TPasoDeFabricacionOperacion;
begin
  result := TPasoDeFabricacionOperacion(CurrentObject);
end;

constructor TPasoDeFabricacionOperacionList.CreateByPasoDeFabricacion(_P: TPasoDeFabricacion);
  Function WhereString : String;
  begin
    Result := TPasoDeFabricacionOperacionDM._PasoDeFabricacionID + ' = ' + IntToStr(_P.ID);
  end;
  Function OrderByString : String;
  begin
    Result := TPasoDeFabricacionOperacionDM._Secuencia + ' asc';
  end;
begin
  inherited Create(TPasoDeFabricacionOperacion, TPasoDeFabricacionOperacionDM.CreateAll( False, WhereString, False, OrderByString ));
end;

function TPasoDeFabricacionOperacionList.CreateNewObject: TPDObject;
begin
  result := TPasoDeFabricacionOperacion.Create;
end;

constructor TPasoDeFabricacionOperacionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TPasoDeFabricacionOperacion,TPasoDeFabricacionOperacionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TProductoOperacion }
constructor TProductoOperacion.Create;
begin
  inherited;
  DMObject  := Aplicacion.DMPRovider.GetGlobalDM(TProductoOperacionDM);
  FDuracion := null;
  FObservacion := '';
end;

function TProductoOperacion.GetPasoDeFabricacionOperacion: TPasoDeFabricacionOperacion;
begin
  if not Assigned(FPasoDeFabricacionOperacion) then
    GetObject(TPasoDeFabricacionOperacion, FPasoDeFabricacionOperacion, PasoDeFabricacionOperacionID);
  Result := TPasoDeFabricacionOperacion(FPasoDeFabricacionOperacion);
end;

function TProductoOperacion.GetProductoRuteoDefault: TProductoRuteoDefault;
begin
  if not assigned(FProductoRuteoDefault) then
    GetObject(TProductoRuteoDefault,FProductoRuteoDefault,ProductoRuteoDefaultID);
  result := TProductoRuteoDefault(FProductoRuteoDefault);
end;

procedure TProductoOperacion.SetPasoDeFabricacionOperacionID(const Value: TObjectID);
begin
  if (Value<>FPasoDeFabricacionOperacionID) and Assigned(FPasoDeFabricacionOperacion) then
    FreeAndNil(FPasoDeFabricacionOperacion);
  FPasoDeFabricacionOperacionID := Value;
end;

procedure TProductoOperacion.SetProductoRuteoDefaultID(const Value: TObjectID);
begin
  if (Value<>FProductoRuteoDefaultID) and Assigned(FProductoRuteoDefault) then
    FreeAndNil(FProductoRuteoDefault);
  FProductoRuteoDefaultID := Value;
end;

function TProductoOperacion.GetUnidadDeMedidaDuracion : TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaDuracion) then
    GetObject(TUnidadDeMedida,FUnidadDeMedidaDuracion,UnidadDeMedidaDuracionID);
  result := TUnidadDeMedida(FUnidadDeMedidaDuracion);
end;

procedure TProductoOperacion.SetUnidadDeMedidaDuracionID(Value : TObjectID);
begin
  if (Value<>FUnidadDeMedidaDuracionID) and Assigned(FUnidadDeMedidaDuracion) then
    FreeAndNil(FUnidadDeMedidaDuracion);
  FUnidadDeMedidaDuracionID := Value;
end;

 { TProductoOperacionDM }
class function TProductoOperacionDM.TableName : string;
begin
  result := 'ProductoOperaciones';
end;

class function TProductoOperacionDM.ID_FieldName : string;
begin
  Result := 'ProductoOperacionID';
end;

procedure TProductoOperacionDM.PopulateFields(PDObject: TPDObject);
begin
  with TProductoOperacion(PDObject) do
    begin
      IDField[_ProductoRuteoDefaultID]       := ProductoRuteoDefaultID;
      IDField[_PasoDeFabricacionOperacionID] := PasoDeFabricacionOperacionID;
      IDField[_UnidadDeMedidaDuracionID]     := UnidadDeMedidaDuracionID;
      FloatField[_Duracion]                  := Duracion;
      StringField[_Observacion]              := Observacion;
    end;
end;

procedure TProductoOperacionDM.PopulateObject(PDObject: TPDObject);
begin
  with TProductoOperacion(PDObject) do
    begin
      FProductoRuteoDefaultID       := IDField[_ProductoRuteoDefaultID];
      FUnidadDeMedidaDuracionID     := IDField[_UnidadDeMedidaDuracionID];
      FPasoDeFabricacionOperacionID := IDField[_PasoDeFabricacionOperacionID];
      FDuracion                     := FloatField[_Duracion];
      FObservacion                  := StringField[_Observacion];
    end;
end;

 { TProductoOperacionList }
function TProductoOperacionList.GetActual : TProductoOperacion;
begin
  result := TProductoOperacion(CurrentObject);
end;

constructor TProductoOperacionList.CreateByProductoRuteoDefault( _P : TProductoRuteoDefault );
  Function WhereString: String;
  begin
    Result :=  '( ' + TProductoOperacionDM._ProductoRuteoDefaultID  + ' = ' + IntToStr( _P.ID ) + ' )';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TProductoOperacion,TProductoOperacionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TProductoOperacionList.CreateNewObject: TPDObject;
begin
  result := TProductoOperacion.Create;
end;

constructor TProductoOperacionList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TProductoOperacion,TProductoOperacionDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TRecursoHerramental }
constructor TRecursoHerramental.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TRecursoHerramentalDM);
  SaveSQLLog := True;
end;

function TRecursoHerramental.GetHerramental : THerramental;
begin
  if not assigned(FHerramental) then
    GetObject(THerramental,FHerramental,HerramentalID);
  result := THerramental(FHerramental);
end;

procedure TRecursoHerramental.SetHerramentalID(Value : TObjectID);
begin
  if (Value<>FHerramentalID) and Assigned(FHerramental) then
    FreeAndNil(FHerramental);
  FHerramentalID := Value;

end;

function TRecursoHerramental.GetRecurso : TRecurso;
begin
  if not assigned(FRecurso) then
    GetObject(TRecurso,FRecurso,RecursoID);
  result := TRecurso(FRecurso);
end;

procedure TRecursoHerramental.SetRecursoID(Value : TObjectID);
begin
  if (Value<>FRecursoID) and Assigned(FRecurso) then
    FreeAndNil(FRecurso);
  FRecursoID := Value;
end;

 { TRecursoHerramentalDM }
class function TRecursoHerramentalDM.TableName : string;
begin
  result := 'RecursoHerramentales';
end;

class function TRecursoHerramentalDM.ID_FieldName : string;
begin
  result := 'RecursoHerramentalID';
end;

procedure TRecursoHerramentalDM.PopulateFields(PDObject: TPDObject);
begin
  with TRecursoHerramental(PDObject) do
    begin
      IDField[_HerramentalID] := HerramentalID;
      IDField[_RecursoID] := RecursoID;
    end;
end;

procedure TRecursoHerramentalDM.PopulateObject(PDObject: TPDObject);
begin
  with TRecursoHerramental(PDObject) do
    begin
      FHerramentalID := IDField[_HerramentalID];
      FRecursoID := IDField[_RecursoID];
    end;
end;

 { TRecursoHerramentalList }
function TRecursoHerramentalList.GetActual : TRecursoHerramental;
begin
  result := TRecursoHerramental(CurrentObject);
end;

constructor TRecursoHerramentalList.CreateByRecurso(_R: TRecurso);
  Function WhereString: String;
  begin
    Result := '( ' + TRecursoHerramentalDM.TableName + '.' + TRecursoHerramentalDM._RecursoID + ' = ' + IntToStr(_R.ID) + ' )';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TRecursoHerramental,TRecursoHerramentalDM.CreateAll(False, WhereString, False, OrderByString ));
end;

function TRecursoHerramentalList.CreateNewObject: TPDObject;
begin
  result := TRecursoHerramental.Create;
end;

constructor TRecursoHerramentalList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TRecursoHerramental,TRecursoHerramentalDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TImpuestoConceptoPadron }
constructor TImpuestoConceptoPadron.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TImpuestoConceptoPadronDM);
  FOrden := null;
end;

function TImpuestoConceptoPadron.GetImpuestoConcepto : TImpuestoConcepto;
begin
  if not assigned(FImpuestoConcepto) then
    GetObject(TImpuestoConcepto,FImpuestoConcepto,ImpuestoConceptoID);

  result := TImpuestoConcepto(FImpuestoConcepto);
end;

procedure TImpuestoConceptoPadron.SetImpuestoConceptoID(Value : TObjectID);
begin
  if (Value<>FImpuestoConceptoID) and Assigned(FImpuestoConcepto) then
    FreeAndNil(FImpuestoConcepto);

  FImpuestoConceptoID := Value;

end;

function TImpuestoConceptoPadron.GetPadron : TPadron;
begin
  if not assigned(FPadron) then
    GetObject(TPadron,FPadron,PadronID);

  result := TPadron(FPadron);
end;

procedure TImpuestoConceptoPadron.SetPadronID(Value : TObjectID);
begin
  if (Value<>FPadronID) and Assigned(FPadron) then
    FreeAndNil(FPadron);

  FPadronID := Value;

end;
 { TImpuestoConceptoPadronDM }
class function TImpuestoConceptoPadronDM.TableName : string;
begin
  result := 'impuestoconceptopadrones';
end;


class function TImpuestoConceptoPadronDM.ID_FieldName : string;
begin
  result := 'ImpuestoConceptoPadronID';
end;


procedure TImpuestoConceptoPadronDM.PopulateFields(PDObject: TPDObject);
begin
  with TImpuestoConceptoPadron(PDObject) do
    begin
      IDField[_ImpuestoConceptoID] := ImpuestoConceptoID;
      IntegerField[_Orden] := Orden;
      IDField[_PadronID] := PadronID;
    end;
end;


procedure TImpuestoConceptoPadronDM.PopulateObject(PDObject: TPDObject);
begin
  with TImpuestoConceptoPadron(PDObject) do
    begin
      FImpuestoConceptoID := IDField[_ImpuestoConceptoID];
      FOrden := IntegerField[_Orden];
      FPadronID := IDField[_PadronID];
    end;
end;

 { TImpuestoConceptoPadronList }
function TImpuestoConceptoPadronList.Getactual : TImpuestoConceptoPadron;
begin
  result := TImpuestoConceptoPadron(CurrentObject);
end;

constructor TImpuestoConceptoPadronList.CreateByImpuestoConcepto(_IC: TImpuestoConcepto);
  Function WhereString: String;
  begin
    Result := '('+TImpuestoConceptoPadronDM._ImpuestoConceptoID + '=' +  IntToStr(_IC.ID)+')';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create( TImpuestoConceptoPadron, TImpuestoConceptoPadronDM.CreateAll( False, WhereString, False, OrderByString )  );
end;

function TImpuestoConceptoPadronList.CreateNewObject: TPDObject;
begin
  result := TImpuestoConceptoPadron.Create;
end;

constructor TImpuestoConceptoPadronList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TImpuestoConceptoPadron,TImpuestoConceptoPadronDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TArticuloCunioDefault }
constructor TArticuloCunioDefault.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TArticuloCunioDefaultDM);
  FEsPredeterminado := null;
end;

function TArticuloCunioDefault.GetCunio : TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio,FCunio,CunioID);

  result := TCunio(FCunio);
end;

procedure TArticuloCunioDefault.SetCunioID(Value : TObjectID);
begin
  if (Value<>FCunioID) and Assigned(FCunio) then
    FreeAndNil(FCunio);

  FCunioID := Value;

end;
 { TArticuloCunioDefaultDM }
class function TArticuloCunioDefaultDM.TableName : string;
begin
  result := 'articulocuniosdefault';
end;


class function TArticuloCunioDefaultDM.ID_FieldName : string;
begin
  result := 'ArticuloCunioDefaultID';
end;


procedure TArticuloCunioDefaultDM.PopulateFields(PDObject: TPDObject);
begin
  with TArticuloCunioDefault(PDObject) do
    begin
      IDField[_ArticuloID] := ArticuloID;
      IDField[_CunioID] := CunioID;
      BooleanField[_EsPredeterminado] := EsPredeterminado;
    end;
end;


procedure TArticuloCunioDefaultDM.PopulateObject(PDObject: TPDObject);
begin
  with TArticuloCunioDefault(PDObject) do
    begin
      FArticuloID := IDField[_ArticuloID];
      FCunioID := IDField[_CunioID];
      FEsPredeterminado := BooleanField[_EsPredeterminado];
    end;
end;

 { TArticuloCunioDefaultList }
function TArticuloCunioDefaultList.Getactual : TArticuloCunioDefault;
begin
  result := TArticuloCunioDefault(CurrentObject);
end;

constructor TArticuloCunioDefaultList.CreateByArticulo(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := TArticuloCunioDefaultDM._ArticuloID + '=' + IntToStr(_A.ID);
  end;
begin
  inherited Create(TArticuloCunioDefault,  TArticuloCunioDefaultDM.CreateAll(False, WhereString));
end;

constructor TArticuloCunioDefaultList.CreateByArticuloCunioPredeterminado(_A: TArticulo);
  Function WhereString : String;
  begin
    Result := '('+ TArticuloCunioDefaultDM._ArticuloID + '=' + IntToStr(_A.ID) +') and (' + TArticuloCunioDefaultDM._EsPredeterminado + ' = 1)';
  end;
begin
  inherited Create(TArticuloCunioDefault,  TArticuloCunioDefaultDM.CreateTop( 1, WhereString, '' ));
end;

function TArticuloCunioDefaultList.CreateNewObject: TPDObject;
begin
  result := TArticuloCunioDefault.Create;
end;

function TArticuloCunioDefaultList.FindCunioID(_CID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      Result := ( actual.CunioID = _CID ) ;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TArticuloCunioDefaultList.FindPredeterminado: Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      Result := actual.EsPredeterminado;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TArticuloCunioDefaultList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TArticuloCunioDefault,TArticuloCunioDefaultDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TCunioPrecioDeLista }
constructor TCunioPrecioDeLista.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCunioPrecioDeListaDM);
  FPrecio                     := null;
  fCunioMarca                 := Null;
  fListaDePrecioDescripcion   := Null;
  FCunioDescripcion           := Null;
  fMonedaDescripcion          := Null;
  fCunioEsEstandar            := Null;
  fListaDePrecioCodigo        := Null;
  fCunioEsInyectado           := Null;
  FCunioCodigo                := Null;
  fMonedaCodigo               := Null;
  FCampoDeBusquedaCodigo      := Null;
  FCampoDeBusquedaDescripcion := Null;
end;

procedure TCunioPrecioDeLista.SetCampoDeBusquedaID(const Value: TObjectID);
begin
  if (FCampoDeBusquedaID <> Value ) then
  begin
    FCampoDeBusquedaCodigo      := Null;
    FCampoDeBusquedaDescripcion := Null;
  end;
  FCampoDeBusquedaID := Value;
end;

procedure TCunioPrecioDeLista.SetCunioID(Value : TObjectID);
begin
  if (Value<>FCunioID) and Assigned(FCunio) then
    FreeAndNil(FCunio);
  FCunioID := Value;
end;

function TCunioPrecioDeLista.GetCampoDeBusquedaCodigo: TString;
var
  Lista : TPDList;
begin
  if ((FCampoDeBusquedaCodigo= Null) or (FCampoDeBusquedaCodigo= '')) then
    if ( fCampoDeBusquedaID <> NullID ) and (TipoDePrecioID <> Nullid) then
      try
        if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioArticuloID ) then
          begin
            Lista := TArticuloList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TArticuloList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TArticuloList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioTerminacionID ) then
          begin
            Lista := TTerminacionList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TTerminacionList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TTerminacionList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioProcesoID ) then
          begin
            Lista := TProcesoList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TProcesoList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TProcesoList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioEspecificacionID ) then
          begin
            Lista := TKolorList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TKolorList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TKolorList( Lista ).actual.Descripcion;
          end
        else
          Aplicacion.RaiseExceptionCreate( 'El TipoDePrecioID: ' + IntToStr( TipoDePrecioID ) +' no corresponde a ningún tipo de precio de cuños.');
      finally
        if Assigned(Lista) then
          FreeAndNil(Lista);
      end
    else
        FCampoDeBusquedaCodigo := '';

  Result := FCampoDeBusquedaCodigo;
end;

function TCunioPrecioDeLista.GetCampoDeBusquedaDescripcion: TString;
var
  Lista : TPDList;
begin
  if (FCampoDeBusquedaDescripcion= Null) or (FCampoDeBusquedaDescripcion= '') then
    if ( fCampoDeBusquedaID <> NullID ) and (TipoDePrecioID <> Nullid) then
      try
        if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioArticuloID ) then
          begin
            Lista := TArticuloList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TArticuloList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TArticuloList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioTerminacionID ) then
          begin
            Lista := TTerminacionList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TTerminacionList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TTerminacionList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioProcesoID ) then
          begin
            Lista := TProcesoList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TProcesoList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TProcesoList( Lista ).actual.Descripcion;
          end
        else if ( TipoDePrecioID = Aplicacion.DataService.TipoDePrecioDeCunioEspecificacionID ) then
          begin
            Lista := TKolorList.CreateByID( fCampoDeBusquedaID );
            if (Lista.count=0) then
              Aplicacion.RaiseExceptionCreate('No se encontró el articuloID ' + IntToStr( fCampoDeBusquedaID ));
            Lista.First;
            FCampoDeBusquedaCodigo      := TKolorList( Lista ).actual.Codigo;
            FCampoDeBusquedaDescripcion := TKolorList( Lista ).actual.Descripcion;
          end
        else
          Aplicacion.RaiseExceptionCreate( 'El TipoDePrecioID: ' + IntToStr( TipoDePrecioID ) +' no corresponde a ningún tipo de precio de cuños.');
      finally
        if Assigned(Lista) then
          FreeAndNil(Lista);
      end
    else
      FCampoDeBusquedaDescripcion := '';

  Result := FCampoDeBusquedaDescripcion;
end;

function TCunioPrecioDeLista.GetCunio: TCunio;
begin
  if not assigned(FCunio) then
    GetObject(TCunio,FCunio,CunioID);
  result := TCunio(FCunio);
end;

function TCunioPrecioDeLista.GetCunioCodigo: TString;
begin
  if (FCunioCodigo = Null ) and  (FCunioID <> NullID) then
    Begin
      FCunioCodigo      := Cunio.Codigo;
      FCunioDescripcion := Cunio.Descripcion;
      fCunioMarca       := Cunio.Marca.Descripcion;
      fCunioEsEstandar  := Cunio.EsCunioEstandar;
      fCunioEsInyectado := Cunio.EsInyectado;
    End;
  Result := FCunioCodigo;
end;

function TCunioPrecioDeLista.GetCunioDescripcion: TString;
begin
  if (FCunioDescripcion = Null ) and  (FCunioID <> NullID) then
    Begin
      FCunioCodigo      := Cunio.Codigo;
      FCunioDescripcion := Cunio.Descripcion;
      fCunioMarca       := Cunio.Marca.Descripcion;
      fCunioEsEstandar  := Cunio.EsCunioEstandar;
      fCunioEsInyectado := Cunio.EsInyectado;
    End;
  Result := FCunioDescripcion;
end;

function TCunioPrecioDeLista.GetCunioEsEstandar: TBoolean;
begin
  if (fCunioEsEstandar = Null ) and  (FCunioID <> NullID) then
    Begin
      FCunioCodigo      := Cunio.Codigo;
      FCunioDescripcion := Cunio.Descripcion;
      fCunioMarca       := Cunio.Marca.Descripcion;
      fCunioEsEstandar  := Cunio.EsCunioEstandar;
      fCunioEsInyectado := Cunio.EsInyectado;
    End;
  Result := fCunioEsEstandar;
end;

function TCunioPrecioDeLista.GetCunioEsInyectado: TBoolean;
begin
  if (fCunioEsInyectado  = Null ) and  (FCunioID <> NullID) then
    Begin
      FCunioCodigo      := Cunio.Codigo;
      FCunioDescripcion := Cunio.Descripcion;
      fCunioMarca       := Cunio.Marca.Descripcion;
      fCunioEsEstandar  := Cunio.EsCunioEstandar;
      fCunioEsInyectado := Cunio.EsInyectado;
    End;
  Result := fCunioEsInyectado;
end;

function TCunioPrecioDeLista.GetCunioMarca: TString;
begin
  if (FCunioMarca = Null ) and  (FCunioID <> NullID) then
    Begin
      FCunioCodigo      := Cunio.Codigo;
      FCunioDescripcion := Cunio.Descripcion;
      fCunioMarca       := Cunio.Marca.Descripcion;
      fCunioEsEstandar  := Cunio.EsCunioEstandar;
      fCunioEsInyectado := Cunio.EsInyectado;
    End;
  Result := fCunioMarca;
end;

function TCunioPrecioDeLista.GetFamilia : TFamiliaDeArticulo;
begin
  if not assigned(FFamilia) then
    GetObject(TFamiliaDeArticulo,FFamilia,FamiliaID);

  result := TFamiliaDeArticulo(FFamilia);
end;

procedure TCunioPrecioDeLista.SetFamiliaID(Value : TObjectID);
begin
  if (Value<>FFamiliaID) and Assigned(FFamilia) then
    FreeAndNil(FFamilia);

  FFamiliaID := Value;

end;

function TCunioPrecioDeLista.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);

  result := TListaDePrecio(FListaDePrecio);
end;

function TCunioPrecioDeLista.GetListaDePrecioCodigo: TString;
begin
  if (FListaDePrecioCodigo = Null ) and  (FListaDePrecioID <> NullID) then
    Begin
      fListaDePrecioCodigo      := ListaDePrecio.Codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
    End;
  Result := FListaDePrecioCodigo;
end;

function TCunioPrecioDeLista.GetListaDePrecioDescripcion: TString;
begin
  if (fListaDePrecioDescripcion = Null ) and  (FListaDePrecioID <> NullID) then
    Begin
      fListaDePrecioCodigo      := ListaDePrecio.Codigo;
      fListaDePrecioDescripcion := ListaDePrecio.Descripcion;
    End;
  Result := fListaDePrecioDescripcion;
end;

procedure TCunioPrecioDeLista.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) and Assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);

  FListaDePrecioID := Value;

end;

function TCunioPrecioDeLista.GetMaterial : TMaterial;
begin
  if not assigned(FMaterial) then
    GetObject(TMaterial,FMaterial,MaterialID);

  result := TMaterial(FMaterial);
end;

procedure TCunioPrecioDeLista.SetMaterialID(Value : TObjectID);
begin
  if (Value<>FMaterialID) and Assigned(FMaterial) then
    FreeAndNil(FMaterial);
  FMaterialID := Value;
end;

function TCunioPrecioDeLista.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  result := TMoneda(FMoneda);
end;

function TCunioPrecioDeLista.GetMonedaCodigo: TString;
begin
  if (FMonedaCodigo = Null ) and  (FMonedaID <> NullID) then
    Begin
      FMonedaCodigo      := Moneda.Codigo;
      FMonedaDescripcion := Moneda.Descripcion;
    End;
  Result := FMonedaCodigo;
end;

function TCunioPrecioDeLista.GetMonedaDescripcion: TString;
begin
  if (FMonedaDescripcion = Null ) and  (FMonedaID <> NullID) then
    Begin
      FMonedaCodigo      := Moneda.Codigo;
      FMonedaDescripcion := Moneda.Descripcion;
    End;
  Result := FMonedaDescripcion;
end;

procedure TCunioPrecioDeLista.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;

function TCunioPrecioDeLista.GetTipoDePrecio : TTipoDePrecioCunio;
begin
  if not assigned(FTipoDePrecio) then
    GetObject(TTipoDePrecioCunio,FTipoDePrecio,TipoDePrecioID);

  result := TTipoDePrecioCunio(FTipoDePrecio);
end;

procedure TCunioPrecioDeLista.SetTipoDePrecioID(Value : TObjectID);
begin
  if (Value<>FTipoDePrecioID) and Assigned(FTipoDePrecio) then
    FreeAndNil(FTipoDePrecio);

  FTipoDePrecioID := Value;

end;
 { TCunioPrecioDeListaDM }
class function TCunioPrecioDeListaDM.TableName : string;
begin
  result := 'CunioPreciosDeLista';
end;

class function TCunioPrecioDeListaDM.CreateCompuesto(_Parte: Integer): String;
  Function CamposString : String;
  begin
    Result := TableName + '.*, ' + TCunioDM.TableName      + '.' +  TCunioDM._Codigo      + ' as ' + TCunioPrecioDeListaDM._CCCunioCodigo       + ', ' + TCunioDM.TableName      + '.' +  TCunioDM._Descripcion      + ' as ' + TCunioPrecioDeListaDM._CCCunioDescripcion + ', ' + TCunioDM.TableName      + '.' +  TCunioDM._EsInyectado + ' as ' + TCunioPrecioDeListaDM._CCCunioEsInyectado + ', ' + TCunioDM.TableName      + '.' +  TCunioDM._EsCunioEstandar + ' as ' + TCunioPrecioDeListaDM._CCCunioEsEstandar + ', ' ;
    Result := Result + TMarcaDM.TableName + '.' +  TMarcaDM._Descripcion + ' as ' + TCunioPrecioDeListaDM._CCCunioMarca + ', '  ;
    Result := Result + TMonedaDM.TableName + '.' +  TMonedaDM._Codigo + ' as ' + TCunioPrecioDeListaDM._CCMonedaCodigo  + ', ' + TMonedaDM.TableName + '.' +  TMonedaDM._Descripcion + ' as ' + TCunioPrecioDeListaDM._CCMonedaDescripcion +', ' ;
    Result := Result + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Codigo + ' as ' + TCunioPrecioDeListaDM._CCListaDePrecioCodigo  + ', ' + TListadePrecioDM.TableName + '.' +  TListadePrecioDM._Descripcion + ' as ' + TCunioPrecioDeListaDM._CCListaDePrecioDescripcion  ;
  end;
  Function LeftJoinString : String;
  begin
    Result := ' LEFT JOIN ' + TCunioDM.TableName + ' ON (' + TableName + '.' + _CunioID + '=' + TCunioDM.TableName + '.' + TCunioDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMonedaDM.TableName + ' ON (' + TableName + '.' + _MonedaID + '=' + TMonedaDM.TableName + '.' + TMonedaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TMarcaDM.TableName + ' ON (' + TCunioDM.TableName + '.' + TCunioDM._marcaID + '=' + TMarcaDM.TableName + '.' + TMarcaDM.ID_FieldName + ')';
    Result := Result + ' LEFT JOIN ' + TListadePrecioDM.TableName + ' ON (' + TableName + '.' + _ListaDePrecioID + '=' + TListadePrecioDM.TableName + '.' + TListadePrecioDM.ID_FieldName + ')';
  end;
begin
  case _Parte of
    1: Result := CamposString;
    2: Result := LeftJoinString;
  end;
end;

class function TCunioPrecioDeListaDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TCunioPrecioDeListaDM.ID_FieldName : string;
begin
  result := 'CunioPrecioDeListaID';
end;

procedure TCunioPrecioDeListaDM.PopulateFields(PDObject: TPDObject);
begin
  with TCunioPrecioDeLista(PDObject) do
    begin
      IDField[_CampoDeBusquedaID]  := CampoDeBusquedaID;
      IDField[_CunioID]            := CunioID;
      IDField[_FamiliaID]          := FamiliaID;
      IDField[_ListaDePrecioID]    := ListaDePrecioID;
      IDField[_MaterialID]         := MaterialID;
      IDField[_MonedaID]           := MonedaID;
      FloatField[_Precio]          := Precio;
      FloatField[_PrecioAutorizado]:= FPrecioAutorizado;
      IDField[_TipoDePrecioID]     := TipoDePrecioID;
    end;
end;


procedure TCunioPrecioDeListaDM.PopulateObject(PDObject: TPDObject);
begin
  with TCunioPrecioDeLista(PDObject) do
    begin
      FCampoDeBusquedaID  := IDField[_CampoDeBusquedaID];
      FCunioID            := IDField[_CunioID];
      FFamiliaID          := IDField[_FamiliaID];
      FListaDePrecioID    := IDField[_ListaDePrecioID];
      FMaterialID         := IDField[_MaterialID];
      FMonedaID           := IDField[_MonedaID];
      FPrecio             := FloatField[_Precio];
      FPrecioAutorizado   := FloatField[_PrecioAutorizado];
      FTipoDePrecioID     := IDField[_TipoDePrecioID];

      // del cc
      fListaDePrecioCodigo      := StringField[ _CCListaDePrecioCodigo];
      fListaDePrecioDescripcion := StringField[ _CCListaDePrecioDescripcion];
      FCunioCodigo              := StringField[ _CCCunioCodigo];
      FCunioDescripcion         := StringField[ _CCCunioDescripcion];
      FCunioEsInyectado         := StringField[ _CCCunioEsInyectado];
      fCunioEsEstandar          := StringField[ _CCCunioEsEstandar];
      fCunioMarca               := StringField[ _CCCunioMarca];
      fMonedaCodigo             := StringField[ _CCMonedaCodigo];
      fMonedaDescripcion        := StringField[ _CCMonedaDescripcion];
    end;
end;

 { TCunioPrecioDeListaList }
function TCunioPrecioDeListaList.GetActual : TCunioPrecioDeLista;
begin
  result := TCunioPrecioDeLista(CurrentObject);
end;

constructor TCunioPrecioDeListaList.CreateByCunio(_C: TCunio);
  Function WhereString : String;
  begin
    Result := '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._CunioID + '=' +  IntToStr(_C.ID)+')';
  end;

  function OrderByString: String;
  begin
    Result := TCunioPrecioDeListaDM.TableName +'.'+ TCunioPrecioDeListaDM._TipoDePrecioID+', '+ TCunioPrecioDeListaDM.TableName +'.'+ TCunioPrecioDeListaDM._CampoDeBusquedaID;
  end;

begin

  inherited Create(TCunioPrecioDeLista, TCunioPrecioDeListaDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TCunioPrecioDeListaList.CreateByListaDePrecio(_LP: TListaDePrecio);
  function WhereString: String;
  Begin
    Result := '('+TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
  End;
begin
  inherited Create(TCunioPrecioDeLista, TCunioPrecioDeListaDM.CreateAll ( false, WhereString ));
end;

constructor TCunioPrecioDeListaList.CreateByListaDePrecioAndCunio(_LP: TListaDePrecio; _C: TCunio);
  Function WhereString: String;
  begin
    Result := '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._ListaDePrecioID + '=' +  IntToStr(_LP.ID)+')';
    Result := Result +  '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._CunioID + '=' +  IntToStr(_C.ID)+')';
  end;
begin
  inherited Create(TCunioPrecioDeLista, TCunioPrecioDeListaDM.CreateAll( false, WhereString));
end;

constructor TCunioPrecioDeListaList.CreateByListaFamiliaMaterialTipo(_CunioID, _ListaID, _FamiliaID, _MaterialID, _TipoDePrecioID, _CampoDeBusquedaID: TObjectID);
  Function WhereString: String;
  begin
    Result := '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._CunioID + '=' +  IntToStr(_CunioID)+')';
    if (_ListaID <> NullID) then
      Result := Result + ' and (' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._ListaDePrecioID + '=' +  IntToStr(_ListaID)+')';
    if (_FamiliaID <> NullID) then
      Result := Result + ' and ' +  '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._FamiliaID + '=' +  IntToStr(_FamiliaID)+')';
    if (_MaterialID <> NullID) then
      Result := Result + ' and ' +  '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._MaterialID + '=' +  IntToStr(_MaterialID)+')';
    if (_TipoDePrecioID <> NullID) then
      Result := Result + ' and ' +  '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._TipoDePrecioID + '=' +  IntToStr(_TipoDePrecioID)+')';
    if (_CampoDeBusquedaID <> NullID) then
      Result := Result + ' and ' +  '(' + TCunioPrecioDeListaDM.TableName+'.'+ TCunioPrecioDeListaDM._CampoDeBusquedaID + '=' +  IntToStr(_CampoDeBusquedaID)+')';
  end;
begin
  inherited Create(TCunioPrecioDeLista, TCunioPrecioDeListaDM.CreateAll( false, WhereString));
end;

constructor TCunioPrecioDeListaList.CreateEmpty;
begin
  inherited Create(TCunioPrecioDeLista,TCunioPrecioDeListaDM.CreateEmpty  );
end;

function TCunioPrecioDeListaList.CreateNewObject: TPDObject;
begin
  result := TCunioPrecioDeLista.Create;
end;

function TCunioPrecioDeListaList.FindCodigoCunio(_CC: String): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.Cunio.Codigo = _CC );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

function TCunioPrecioDeListaList.FindCunio(_C: TCunio): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.CunioID = _C.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TCunioPrecioDeListaList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCunioPrecioDeLista,TCunioPrecioDeListaDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TGrupoDeTerminacionEspecial }
procedure TGrupoDeTerminacionEspecial.Delete;
begin
  if Not SePuedeBorrar then
    Aplicacion.RaiseExceptionCreate('El grupo está siendo usado en alguna terminación. No es posible borrarlo.');

  while (RecargosPorMaterial.count > 0) do
    begin
      RecargosPorMaterial.First;
      RecargosPorMaterial.DeleteCurrent;
    end;
  inherited;
end;

function TGrupoDeTerminacionEspecial.GetRecargosPorMaterial: TGrupoDeTerminacionRecargoMaterialList;
begin
  if not assigned(FRecargosPorMaterial) then
    GetList(TPDList(FRecargosPorMaterial),TPDList(TGrupoDeTerminacionRecargoMaterialList.CreateByGrupoDeTerminacionEspecial(self)));
  Result := TGrupoDeTerminacionRecargoMaterialList(FRecargosPorMaterial);
end;

function TGrupoDeTerminacionEspecial.SePuedeBorrar: Boolean;
var
  TL :TTerminacionList;
begin
  inherited;
  TL := TterminacionList.CreateByCondition( TTerminacionDM.TableName + '.' + TTerminacionDM._GrupoDeTerminacionEspecialID +' = '+ IntToStr(ID));
  try
    Result := (TL.Count=0);
  finally
    FreeAndNil(TL);
  end;
end;


constructor TGrupoDeTerminacionEspecial.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TGrupoDeTerminacionEspecialDM);
  SaveSQLLog := True;
end;
 { TGrupoDeTerminacionDM }
class function TGrupoDeTerminacionEspecialDM.TableName : string;
begin
  result := 'GruposDeTerminacionesEspeciales';
end;


class function TGrupoDeTerminacionEspecialDM.ID_FieldName : string;
begin
  result := 'GrupoDeTerminacionEspecialID';
end;

class function TGrupoDeTerminacionEspecialDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TGrupoDeTerminacionEspecialDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeTerminacionEspecial(PDObject) do
    begin
      StringField[_Descripcion]      := Descripcion;
      BooleanField[_EsInactivo]      := EsInactivo;
    end;
end;

procedure TGrupoDeTerminacionEspecialDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeTerminacionEspecial(PDObject) do
    begin
      FDescripcion       := StringField[_Descripcion];
      FEsInactivo        := BooleanField[_EsInactivo];
    end;
end;

 { TGrupoDeTerminacionList }
function TGrupoDeTerminacionEspecialList.GetActual : TGrupoDeTerminacionEspecial;
begin
  result := TGrupoDeTerminacionEspecial(CurrentObject);
end;

function TGrupoDeTerminacionEspecialList.CreateNewObject: TPDObject;
begin
  result := TGrupoDeTerminacionEspecial.Create;
end;

constructor TGrupoDeTerminacionEspecialList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TGrupoDeTerminacionEspecial,TGrupoDeTerminacionEspecialDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TGrupoDeTerminacionRecargoMaterial }
constructor TGrupoDeTerminacionRecargoMaterial.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TGrupoDeTerminacionRecargoMaterialDM);
  FPorcentajeDeRecargo := null;
end;


function TGrupoDeTerminacionRecargoMaterial.GetMaterial : TMaterial;
begin
  if not assigned(FMaterial) then
    GetObject(TMaterial,FMaterial,MaterialID);

  result := TMaterial(FMaterial);
end;


procedure TGrupoDeTerminacionRecargoMaterial.SetMaterialID(Value : TObjectID);
begin
  if (Value<>FMaterialID) and Assigned(FMaterial) then
    FreeAndNil(FMaterial);

  FMaterialID := Value;

end;
 { TGrupoDeTerminacionRecargoMaterialDM }
class function TGrupoDeTerminacionRecargoMaterialDM.TableName : string;
begin
  result := 'grupodeterminacionrecargomateriales';
end;


class function TGrupoDeTerminacionRecargoMaterialDM.ID_FieldName : string;
begin
  result := 'GrupoDeTerminacionRecargoMaterialID';
end;


procedure TGrupoDeTerminacionRecargoMaterialDM.PopulateFields(PDObject: TPDObject);
begin
  with TGrupoDeTerminacionRecargoMaterial(PDObject) do
    begin
      IDField[_GrupoDeTerminacionEspecialID] := GrupoDeTerminacionEspecialID;
      IDField[_MaterialID]                   := MaterialID;
      FloatField[_PorcentajeDeRecargo]       := PorcentajeDeRecargo;
    end;
end;


procedure TGrupoDeTerminacionRecargoMaterialDM.PopulateObject(PDObject: TPDObject);
begin
  with TGrupoDeTerminacionRecargoMaterial(PDObject) do
    begin
      FGrupoDeTerminacionEspecialID  := IDField[_GrupoDeTerminacionEspecialID];
      FMaterialID                    := IDField[_MaterialID];
      FPorcentajeDeRecargo           := FloatField[_PorcentajeDeRecargo];
    end;
end;

 { TGrupoDeTerminacionRecargoMaterialList }
function TGrupoDeTerminacionRecargoMaterialList.Getactual : TGrupoDeTerminacionRecargoMaterial;
begin
  result := TGrupoDeTerminacionRecargoMaterial(CurrentObject);
end;

constructor TGrupoDeTerminacionRecargoMaterialList.CreateByGrupoDeTerminacionEspecial(_GTE: TGrupoDeTerminacionEspecial);
  Function WhereString: String;
  begin
    Result := '('+TGrupoDeTerminacionRecargoMaterialDM._GrupoDeTerminacionEspecialID + '=' +  IntToStr(_GTE.ID)+')';
  end;
begin
  inherited Create(TGrupoDeTerminacionRecargoMaterial, TGrupoDeTerminacionRecargoMaterialDM.CreateAll( False, WhereString )  );
end;

function TGrupoDeTerminacionRecargoMaterialList.CreateNewObject: TPDObject;
begin
  result := TGrupoDeTerminacionRecargoMaterial.Create;
end;

function TGrupoDeTerminacionRecargoMaterialList.FindMaterial(_M: TMaterial): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.MaterialID = _M.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TGrupoDeTerminacionRecargoMaterialList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TGrupoDeTerminacionRecargoMaterial,TGrupoDeTerminacionRecargoMaterialDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TComplejidadDeDesarrollo }
function TComplejidadDeDesarrollo.GetDescriptibleAbreviadoListClass;
begin
  result := TComplejidadDeDesarrolloList;
end;

function TComplejidadDeDesarrollo.GetPreciosDeLista: TComplejidadDeDesarrolloPrecioList;
begin
  if not Assigned(FPreciosDeLista) then
    GetList(TPDList(FPreciosDeLista),TPDList(TComplejidadDeDesarrolloPrecioList.CreateByComplejidadDeDesarrollo(self)));
  Result := TComplejidadDeDesarrolloPrecioList(FPreciosDeLista);
end;

function TComplejidadDeDesarrollo.GetTipoDeDesarrollo: TTipoDeDesarrollo;
begin
  if not Assigned(FTipoDeDesarrollo) then
    GetObject(TTipoDeDesarrollo,FTipoDeDesarrollo,TipoDeDesarrolloID);
  Result := TTipoDeDesarrollo(FTipoDeDesarrollo);
end;

function TComplejidadDeDesarrollo.PrecioDeLista(var _ExigePrecio : Boolean; _ListaDePrecioID: TObjectID; _Moneda: TMoneda): TReal;
begin
  Result := Aplicacion.DataService.DevolverPrecioDeLista( _ExigePrecio,
                                                          TComplejidadDeDesarrolloDM.TableName,
                                                          _Moneda,
                                                          _ListaDePrecioID,
                                                          ID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          NullID,
                                                          False );
end;

procedure TComplejidadDeDesarrollo.SetTipoDeDesarrolloID(const Value: TObjectID);
begin
  if (Value<>FTipoDeDesarrolloID) and Assigned(FTipoDeDesarrollo) then
    FreeAndNil(FTipoDeDesarrollo);
  FTipoDeDesarrolloID := Value;
end;

constructor TComplejidadDeDesarrollo.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TComplejidadDeDesarrolloDM);
  SaveSQLLog := True;
  FExigePrecioEnDesarrollo := null;
end;
 { TComplejidadDeDesarrolloDM }
class function TComplejidadDeDesarrolloDM.TableName : string;
begin
  result := 'ComplejidadesDeDesarrollos';
end;


class function TComplejidadDeDesarrolloDM.ID_FieldName : string;
begin
  result := 'ComplejidadDeDesarrolloID';
end;

class function TComplejidadDeDesarrolloDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TComplejidadDeDesarrolloDM.PopulateFields(PDObject: TPDObject);
begin
  with TComplejidadDeDesarrollo(PDObject) do
    begin
      StringField[_Codigo]                   := Codigo;
      StringField[_Descripcion]              := Descripcion;
      BooleanField[_EsInactivo]              := EsInactivo;
      BooleanField[_ExigePrecioEnDesarrollo] := ExigePrecioEnDesarrollo;
      IDField[_TipoDeDesarrolloID]           := TipoDeDesarrolloID;
    end;
end;


procedure TComplejidadDeDesarrolloDM.PopulateObject(PDObject: TPDObject);
begin
  with TComplejidadDeDesarrollo(PDObject) do
    begin
      FCodigo                         := StringField[_Codigo];
      FDescripcion                    := StringField[_Descripcion];
      FEsInactivo                     := BooleanField[_EsInactivo];
      FExigePrecioEnDesarrollo        := BooleanField[_ExigePrecioEnDesarrollo];
      FTipoDeDesarrolloID             := IDField[_TipoDeDesarrolloID];
    end;
end;

 { TComplejidadDeDesarrolloList }
function TComplejidadDeDesarrolloList.GetActual : TComplejidadDeDesarrollo;
begin
  result := TComplejidadDeDesarrollo(CurrentObject);
end;

constructor TComplejidadDeDesarrolloList.CreateByTipoDeDesarrolloID(_ID: TObjectID; _soloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := TComplejidadDeDesarrolloDM._TipoDeDesarrolloID + ' = ' + IntToStr(_ID) ;
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TComplejidadDeDesarrollo,TComplejidadDeDesarrolloDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

function TComplejidadDeDesarrolloList.CreateNewObject: TPDObject;
begin
  result := TComplejidadDeDesarrollo.Create;
end;

constructor TComplejidadDeDesarrolloList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TComplejidadDeDesarrollo,TComplejidadDeDesarrolloDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TComplejidadDeDesarrolloPrecioDeLista }
constructor TComplejidadDeDesarrolloPrecio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TComplejidadDeDesarrolloPrecioDM);
  SaveSQLLog := True;
  FPrecio := null;
end;

function TComplejidadDeDesarrolloPrecio.GetComplejidadDeDesarrollo : TComplejidadDeDesarrollo;
begin
  if not assigned(FComplejidadDeDesarrollo) then
    GetObject(TComplejidadDeDesarrollo,FComplejidadDeDesarrollo,ComplejidadDeDesarrolloID);
  result := TComplejidadDeDesarrollo(FComplejidadDeDesarrollo);
end;

procedure TComplejidadDeDesarrolloPrecio.SetComplejidadDeDesarrolloID(Value : TObjectID);
begin
  if (Value<>FComplejidadDeDesarrolloID) and Assigned(FComplejidadDeDesarrollo) then
    FreeAndNil(FComplejidadDeDesarrollo);
  FComplejidadDeDesarrolloID := Value;
end;

function TComplejidadDeDesarrolloPrecio.GetListaDePrecio : TListaDePrecio;
begin
  if not assigned(FListaDePrecio) then
    GetObject(TListaDePrecio,FListaDePrecio,ListaDePrecioID);
  result := TListaDePrecio(FListaDePrecio);
end;

procedure TComplejidadDeDesarrolloPrecio.SetListaDePrecioID(Value : TObjectID);
begin
  if (Value<>FListaDePrecioID) and Assigned(FListaDePrecio) then
    FreeAndNil(FListaDePrecio);
  FListaDePrecioID := Value;
end;

function TComplejidadDeDesarrolloPrecio.GetMoneda : TMoneda;
begin
  if not assigned(FMoneda) then
    GetObject(TMoneda,FMoneda,MonedaID);
  result := TMoneda(FMoneda);
end;

procedure TComplejidadDeDesarrolloPrecio.SetMonedaID(Value : TObjectID);
begin
  if (Value<>FMonedaID) and Assigned(FMoneda) then
    FreeAndNil(FMoneda);
  FMonedaID := Value;
end;
 { TComplejidadDeDesarrolloPrecioDM }
class function TComplejidadDeDesarrolloPrecioDM.TableName : string;
begin
  result := 'ComplejidadDeDesarrolloPreciosDeLista';
end;


class function TComplejidadDeDesarrolloPrecioDM.EmpresaDeSistemaID_FieldName: string;
begin
  Result := 'EmpresaDeSistemaID';
end;

class function TComplejidadDeDesarrolloPrecioDM.ID_FieldName : string;
begin
  result := 'ComplejidadDeDesarrolloPrecioDeListaID';
end;

procedure TComplejidadDeDesarrolloPrecioDM.PopulateFields(PDObject: TPDObject);
begin
  with TComplejidadDeDesarrolloPrecio(PDObject) do
    begin
      IDField[_ComplejidadDeDesarrolloID] := ComplejidadDeDesarrolloID;
      IDField[_ListaDePrecioID]           := ListaDePrecioID;
      IDField[_MonedaID]                  := MonedaID;
      FloatField[_Precio]                 := Precio;
    end;
end;

procedure TComplejidadDeDesarrolloPrecioDM.PopulateObject(PDObject: TPDObject);
begin
  with TComplejidadDeDesarrolloPrecio(PDObject) do
    begin
      FComplejidadDeDesarrolloID := IDField[_ComplejidadDeDesarrolloID];
      FListaDePrecioID           := IDField[_ListaDePrecioID];
      FMonedaID                  := IDField[_MonedaID];
      FPrecio                    := FloatField[_Precio];
    end;
end;

 { TComplejidadDeDesarrolloPrecioList }
function TComplejidadDeDesarrolloPrecioList.GetActual : TComplejidadDeDesarrolloPrecio;
begin
  result := TComplejidadDeDesarrolloPrecio(CurrentObject);
end;

constructor TComplejidadDeDesarrolloPrecioList.CreateByComplejidadDeDesarrollo(_C: TComplejidadDeDesarrollo);
  Function WhereString: String;
  begin
    Result := TComplejidadDeDesarrolloPrecioDM._ComplejidadDeDesarrolloID + ' = ' + IntToStr(_C.ID) ;
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TComplejidadDeDesarrolloPrecio,TComplejidadDeDesarrolloPrecioDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TComplejidadDeDesarrolloPrecioList.CreateByListaDePrecio(_L: TListaDePrecio);
  Function WhereString: String;
  begin
    Result := TComplejidadDeDesarrolloPrecioDM._ListaDePrecioID + ' = ' + IntToStr(_L.ID) ;
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TComplejidadDeDesarrolloPrecio,TComplejidadDeDesarrolloPrecioDM.CreateAll(False, WhereString, false, OrderByString ));
end;

constructor TComplejidadDeDesarrolloPrecioList.CreateEmpty;
begin
  inherited Create(TComplejidadDeDesarrolloPrecio,TComplejidadDeDesarrolloPrecioDM.CreateEmpty);
end;

function TComplejidadDeDesarrolloPrecioList.CreateNewObject: TPDObject;
begin
  result := TComplejidadDeDesarrolloPrecio.Create;
end;

function TComplejidadDeDesarrolloPrecioList.FindCodigoComplejidad(_CD: String): Boolean;
begin
    Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( self.Actual.ComplejidadDeDesarrollo.Codigo = _CD );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TComplejidadDeDesarrolloPrecioList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TComplejidadDeDesarrolloPrecio,TComplejidadDeDesarrolloPrecioDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TTipoDePrecioCunio }
constructor TTipoDePrecioCunio.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTipoDePrecioCunioDM);
  FTableName := null;
end;
 { TTipoDePrecioCunioDM }
class function TTipoDePrecioCunioDM.TableName : string;
begin
  result := 'tiposdepreciocunios';
end;


class function TTipoDePrecioCunioDM.ID_FieldName : string;
begin
  result := 'TipoDePrecioCunioID';
end;

class function TTipoDePrecioCunioDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TTipoDePrecioCunioDM.PopulateFields(PDObject: TPDObject);
begin
  with TTipoDePrecioCunio(PDObject) do
    begin
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
      StringField[_TableName] := TableName;
    end;
end;


procedure TTipoDePrecioCunioDM.PopulateObject(PDObject: TPDObject);
begin
  with TTipoDePrecioCunio(PDObject) do
    begin
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
      FTableName := StringField[_TableName];
    end;
end;

 { TTipoDePrecioCunioList }
function TTipoDePrecioCunioList.Getactual : TTipoDePrecioCunio;
begin
  result := TTipoDePrecioCunio(CurrentObject);
end;

function TTipoDePrecioCunioList.CreateNewObject: TPDObject;
begin
  result := TTipoDePrecioCunio.Create;
end;

constructor TTipoDePrecioCunioList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTipoDePrecioCunio,TTipoDePrecioCunioDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

 { TTerminacionCuentaContabilidadDeCostos }
constructor TTerminacionCuentaContabilidadDeCostos.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TTerminacionCuentaContabilidadDeCostosDM);
end;

function TTerminacionCuentaContabilidadDeCostos.GetCuentaContable : TCuentaContable;
begin
  if not assigned(FCuentaContable) then
    GetObject(TCuentaContable,FCuentaContable,CuentaContableID);

  result := TCuentaContable(FCuentaContable);
end;

procedure TTerminacionCuentaContabilidadDeCostos.SetCuentaContableID(Value : TObjectID);
begin
  if (Value<>FCuentaContableID) and Assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);

  FCuentaContableID := Value;

end;


 { TTerminacionCuentaContabilidadDeCostosDM }
class function TTerminacionCuentaContabilidadDeCostosDM.TableName : string;
begin
  result := 'terminacioncuentascontabilidaddecostos';
end;


class function TTerminacionCuentaContabilidadDeCostosDM.ID_FieldName : string;
begin
  result := 'TerminacionCuentaContabilidadDeCostosID';
end;


procedure TTerminacionCuentaContabilidadDeCostosDM.PopulateFields(PDObject: TPDObject);
begin
  with TTerminacionCuentaContabilidadDeCostos(PDObject) do
    begin
      IDField[_CuentaContableID] := CuentaContableID;
      IDField[_TerminacionID] := TerminacionID;
    end;
end;


procedure TTerminacionCuentaContabilidadDeCostosDM.PopulateObject(PDObject: TPDObject);
begin
  with TTerminacionCuentaContabilidadDeCostos(PDObject) do
    begin
      FCuentaContableID := IDField[_CuentaContableID];
      FTerminacionID := IDField[_TerminacionID];
    end;
end;

 { TTerminacionCuentaContabilidadDeCostosList }
function TTerminacionCuentaContabilidadDeCostosList.Getactual : TTerminacionCuentaContabilidadDeCostos;
begin
  result := TTerminacionCuentaContabilidadDeCostos(CurrentObject);
end;

constructor TTerminacionCuentaContabilidadDeCostosList.CreateByTerminacion(_T: TTerminacion);
  Function WhereString : String;
  begin
    Result := TTerminacionCuentaContabilidadDeCostosDM._TerminacionID + '=' + IntToStr(_T.ID);
  end;
begin
  inherited Create(TTerminacionCuentaContabilidadDeCostos, TTerminacionCuentaContabilidadDeCostosDM.CreateAll(False, WhereString));
end;

function TTerminacionCuentaContabilidadDeCostosList.CreateNewObject: TPDObject;
begin
  result := TTerminacionCuentaContabilidadDeCostos.Create;
end;

constructor TTerminacionCuentaContabilidadDeCostosList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TTerminacionCuentaContabilidadDeCostos,TTerminacionCuentaContabilidadDeCostosDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TSectorCuentaContable }
constructor TSectorCuentaContable.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TSectorCuentaContableDM);
  SaveSQLLog := True;
end;

function TSectorCuentaContable.GetCentroDeCosto: TCentroDeCosto;
begin
  if not Assigned(FCentroDeCosto) then
    GetObject(TCentroDeCosto,FCentroDeCosto,CentroDeCostoID);
  Result := TCentroDeCosto(FCentroDeCosto);
end;

function TSectorCuentaContable.GetCuentaContable : TCuentaContable;
begin
  if not assigned(FCuentaContable) then
    GetObject(TCuentaContable,FCuentaContable,CuentaContableID);
  result := TCuentaContable(FCuentaContable);
end;

procedure TSectorCuentaContable.SetCentroDeCostoID(const Value: TObjectID);
begin
  if (Value<>FCentroDeCostoID) and Assigned(FCentroDeCosto) then
    FreeAndNil(FCentroDeCosto);
  FCentroDeCostoID := Value;
end;

procedure TSectorCuentaContable.SetCuentaContableID(Value : TObjectID);
begin
  if (Value<>FCuentaContableID) and Assigned(FCuentaContable) then
    FreeAndNil(FCuentaContable);
  FCuentaContableID := Value;
end;

function TSectorCuentaContable.GetSector : TSector;
begin
  if not assigned(FSector) then
    GetObject(TSector,FSector,SectorID);
  result := TSector(FSector);
end;

procedure TSectorCuentaContable.SetSectorID(Value : TObjectID);
begin
  if (Value<>FSectorID) and Assigned(FSector) then
    FreeAndNil(FSector);
  FSectorID := Value;
end;

 { TSectorCuentaContableDM }
class function TSectorCuentaContableDM.TableName : string;
begin
  result := 'SectorCuentasContables';
end;

class function TSectorCuentaContableDM.ID_FieldName : string;
begin
  result := 'SectorCuentaContableID';
end;


procedure TSectorCuentaContableDM.PopulateFields(PDObject: TPDObject);
begin
  with TSectorCuentaContable(PDObject) do
    begin
      IDField[_CuentaContableID] := CuentaContableID;
      IDField[_CentroDeCostoID]  := CentroDeCostoID;
      IDField[_SectorID]         := SectorID;
    end;
end;


procedure TSectorCuentaContableDM.PopulateObject(PDObject: TPDObject);
begin
  with TSectorCuentaContable(PDObject) do
    begin
      FCuentaContableID := IDField[_CuentaContableID];
      FCentroDeCostoID  := IDField[_CentroDeCostoID];
      FSectorID         := IDField[_SectorID];
    end;
end;

 { TSectorCuentaContableList }
function TSectorCuentaContableList.GetActual : TSectorCuentaContable;
begin
  result := TSectorCuentaContable(CurrentObject);
end;

constructor TSectorCuentaContableList.CreateBySector(_S: TSector);
  Function WhereString: String;
  begin
    Result := '(' + TSectorCuentaContableDM.Tablename + '.' + TSectorCuentaContableDM._SectorID + '=' + IntToStr(_S.ID) + ')';
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TSectorCuentaContable,TSectorCuentaContableDM.CreateAll(False, WhereString, false, OrderByString ));
end;

function TSectorCuentaContableList.CreateNewObject: TPDObject;
begin
  result := TSectorCuentaContable.Create;
end;

function TSectorCuentaContableList.FindCentroDeCostoAndCuenta(_CentroID, _CuentaID: TObjectID): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;

  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.CentroDeCostoID = _CentroID ) and ( Self.Actual.CuentaContableID = _CuentaID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TSectorCuentaContableList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TSectorCuentaContable,TSectorCuentaContableDM.CreateAll(False, WhereString, false, OrderByString ));
end;

{ TSector }

constructor TSector.Create;
begin
  inherited;
  DMObject             := Aplicacion.DMProvider.GetGlobalDM(TSectorDM);
  FesLineaDeProduccion := Null;
end;

function TSector.GetCuentasContables: TSectorCuentaContableList;
begin
  If not Assigned(FCuentasContables) Then
    GetList(TPDList(FCuentasContables), TPDList(TSectorCuentaContableList.CreateBySector(self)));
  Result := TSectorCuentaContableList(FCuentasContables);
end;

function TSector.GetDepositos: TDepositoList;
begin
  If not Assigned(FDepositos) Then
    GetList(TPDList(FDepositos), TPDList(TDepositoList.CreateBySector(self)));
  Result := TDepositoList(FDepositos);
end;

{ TCondicionDeVentaDetalle }
constructor TCondicionDeVentaDetalle.Create;
begin
  inherited;
  DMObject := Aplicacion.DMPRovider.GetGlobalDM(TCondicionDeVentaDetalleDM);
end;

function TCondicionDeVentaDetalle.GetCondicionDeVenta : TCondicionDeVenta;
begin
  if not assigned(FCondicionDeVenta) then
    GetObject(TCondicionDeVenta,FCondicionDeVenta,CondicionDeVentaID);

  result := TCondicionDeVenta(FCondicionDeVenta);
end;

procedure TCondicionDeVentaDetalle.SetCondicionDeVentaID(Value : TObjectID);
begin
  if (Value<>FCondicionDeVentaID) and Assigned(FCondicionDeVenta) then
    FreeAndNil(FCondicionDeVenta);

  FCondicionDeVentaID := Value;

end;
 { TCondicionDeVentaDetalleDM }
class function TCondicionDeVentaDetalleDM.TableName : string;
begin
  result := 'condiciondeventadetalles';
end;


class function TCondicionDeVentaDetalleDM.ID_FieldName : string;
begin
  result := 'CondicionDeVentaDetalleID';
end;

class function TCondicionDeVentaDetalleDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;


procedure TCondicionDeVentaDetalleDM.PopulateFields(PDObject: TPDObject);
begin
  with TCondicionDeVentaDetalle(PDObject) do
    begin
      IDField[_CondicionDeVentaID] := CondicionDeVentaID;
      StringField[_Descripcion] := Descripcion;
      BooleanField[_EsInactivo] := EsInactivo;
    end;
end;


procedure TCondicionDeVentaDetalleDM.PopulateObject(PDObject: TPDObject);
begin
  with TCondicionDeVentaDetalle(PDObject) do
    begin
      FCondicionDeVentaID := IDField[_CondicionDeVentaID];
      FDescripcion := StringField[_Descripcion];
      FEsInactivo := BooleanField[_EsInactivo];
    end;
end;

 { TCondicionDeVentaDetalleList }
function TCondicionDeVentaDetalleList.Getactual : TCondicionDeVentaDetalle;
begin
  result := TCondicionDeVentaDetalle(CurrentObject);
end;

constructor TCondicionDeVentaDetalleList.CreateByCondicionDeVenta(_CV: TCondicionDeVenta);
  Function WhereString : String;
  begin
    Result := TCondicionDeVentaDetalleDM._CondicionDeVentaID + '=' + IntToStr(_CV.ID);
  end;
begin
  inherited Create(TCondicionDeVentaDetalle, TCondicionDeVentaDetalleDM.CreateAll(False, WhereString));
end;

function TCondicionDeVentaDetalleList.CreateNewObject: TPDObject;
begin
  result := TCondicionDeVentaDetalle.Create;
end;

constructor TCondicionDeVentaDetalleList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TCondicionDeVentaDetalle,TCondicionDeVentaDetalleDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;

class function TEstadoDePackingDM.EsInactivo_FieldName: string;
begin
  Result := _EsInactivo;
end;

class function TEstadoDePackingDM.ID_FieldName: string;
begin
  Result := 'EstadoDePackingID';
end;

procedure TEstadoDePackingDM.PopulateFields(PDObject: TPDObject);
begin
  inherited;
  with TEstadoDeRemito(PDObject) do
  begin
    StringField[_Codigo]      :=  Codigo;
    StringField[_Descripcion] :=  Descripcion;
    BooleanField[_EsInactivo] :=  EsInactivo;
  end;
end;

procedure TEstadoDePackingDM.PopulateObject(PDObject: TPDObject);
begin
  inherited;
  with TEstadoDeRemito(PDObject) do
  begin
    Codigo      := StringField[_Codigo];
    Descripcion := StringField[_Descripcion];
    EsInactivo  := BooleanField[_EsInactivo];
  end;
end;

class function TEstadoDePackingDM.TableName: string;
begin
  Result := 'EstadosDePacking';
end;

{ TEstadoDePacking }

constructor TEstadoDePacking.Create;
begin
  inherited;
  DMObject := Aplicacion.DMProvider.GetGlobalDM(TEstadoDePackingDM);
end;

function TEstadoDePacking.GetDescriptibleAbreviadoListClass: TDescriptibleAbreviadoListClass;
begin
  Result := TEstadoDePackingList;
end;

{ TEstadoDePackingList }

constructor TEstadoDePackingList.CreateAll(_SoloActivos: Boolean);
begin
  inherited Create(TEstadoDePacking, TEstadoDePackingDM.CreateAll(False,'', _SoloActivos));
end;

function TEstadoDePackingList.CreateNewObject: TPDObject;
begin
  Result := TEstadoDePacking.Create;
end;

function TEstadoDePackingList.GetActual: TEstadoDePacking;
begin
  Result := TEstadoDePacking(CurrentObject);
end;

 { TFabricadoDatoFisico }
constructor TFabricadoDatoFisico.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TFabricadoDatoFisicoDM);
  SaveSQLLog := True;
  FCantidad  := null;
  FPesoBruto := null;
  FPesoNeto  := null;
end;

function TFabricadoDatoFisico.GetFabricado : TFabricado;
begin
  if not assigned(FFabricado) then
    GetObject(TFabricado,FFabricado,FabricadoID);
  result := TFabricado(FFabricado);
end;

procedure TFabricadoDatoFisico.SetFabricadoID(Value : TObjectID);
begin
  if (Value<>FFabricadoID) and Assigned(FFabricado) then
    FreeAndNil(FFabricado);
  FFabricadoID := Value;
end;

function TFabricadoDatoFisico.GetMateriaPrima : TMateriaPrima;
begin
  if not assigned(FMateriaPrima) then
    GetObject(TMateriaPrima,FMateriaPrima,MateriaPrimaID);
  result := TMateriaPrima(FMateriaPrima);
end;

function TFabricadoDatoFisico.GetPesoBruto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPesoBruto , 3 );
end;

function TFabricadoDatoFisico.GetPesoNeto: TReal;
begin
  Result := Aplicacion.MathService.Redondear( FPesoNeto , 3 );
end;

procedure TFabricadoDatoFisico.SetMateriaPrimaID(Value : TObjectID);
begin
  if (Value<>FMateriaPrimaID) and Assigned(FMateriaPrima) then
    FreeAndNil(FMateriaPrima);
  FMateriaPrimaID := Value;
end;

procedure TFabricadoDatoFisico.SetPesoBruto(const Value: TReal);
begin
  FPesoBruto := Aplicacion.MathService.Redondear( Value , 3 );
end;

procedure TFabricadoDatoFisico.SetPesoNeto(const Value: TReal);
begin
  FPesoNeto := Aplicacion.MathService.Redondear( Value , 3 );
end;

function TFabricadoDatoFisico.GetUnidadDeMedidaCantidad : TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaCantidad) then
    GetObject(TUnidadDeMedida,FUnidadDeMedidaCantidad,UnidadDeMedidaCantidadID);
  result := TUnidadDeMedida(FUnidadDeMedidaCantidad);
end;

procedure TFabricadoDatoFisico.SetUnidadDeMedidaCantidadID(Value : TObjectID);
begin
  if (Value<>FUnidadDeMedidaCantidadID) and Assigned(FUnidadDeMedidaCantidad) then
    FreeAndNil(FUnidadDeMedidaCantidad);
  FUnidadDeMedidaCantidadID := Value;
end;

function TFabricadoDatoFisico.GetUnidadDeMedidaPeso : TUnidadDeMedida;
begin
  if not assigned(FUnidadDeMedidaPeso) then
    GetObject(TUnidadDeMedida,FUnidadDeMedidaPeso,UnidadDeMedidaPesoID);
  result := TUnidadDeMedida(FUnidadDeMedidaPeso);
end;

procedure TFabricadoDatoFisico.SetUnidadDeMedidaPesoID(Value : TObjectID);
begin
  if (Value<>FUnidadDeMedidaPesoID) and Assigned(FUnidadDeMedidaPeso) then
    FreeAndNil(FUnidadDeMedidaPeso);
  FUnidadDeMedidaPesoID := Value;
end;

 { TFabricadoDatoFisicoDM }
class function TFabricadoDatoFisicoDM.TableName : string;
begin
  result := 'FabricadoDatosfisicos';
end;


class function TFabricadoDatoFisicoDM.ID_FieldName : string;
begin
  result := 'FabricadoDatoFisicoID';
end;


procedure TFabricadoDatoFisicoDM.PopulateFields(PDObject: TPDObject);
begin
  with TFabricadoDatoFisico(PDObject) do
    begin
      IntegerField[_Cantidad] := Cantidad;
      IDField[_FabricadoID] := FabricadoID;
      IDField[_MateriaPrimaID] := MateriaPrimaID;
      FloatField[_PesoBruto] := PesoBruto;
      FloatField[_PesoNeto] := PesoNeto;
      IDField[_UnidadDeMedidaCantidadID] := UnidadDeMedidaCantidadID;
      IDField[_UnidadDeMedidaPesoID] := UnidadDeMedidaPesoID;
    end;
end;


procedure TFabricadoDatoFisicoDM.PopulateObject(PDObject: TPDObject);
begin
  with TFabricadoDatoFisico(PDObject) do
    begin
      FCantidad := IntegerField[_Cantidad];
      FFabricadoID := IDField[_FabricadoID];
      FMateriaPrimaID := IDField[_MateriaPrimaID];
      FPesoBruto := FloatField[_PesoBruto];
      FPesoNeto := FloatField[_PesoNeto];
      FUnidadDeMedidaCantidadID := IDField[_UnidadDeMedidaCantidadID];
      FUnidadDeMedidaPesoID := IDField[_UnidadDeMedidaPesoID];
    end;
end;

 { TFabricadoDatoFisicoList }
function TFabricadoDatoFisicoList.GetActual : TFabricadoDatoFisico;
begin
  Result := TFabricadoDatoFisico(CurrentObject);
end;

constructor TFabricadoDatoFisicoList.CreateByFabricado(_F: TFabricado);
  Function WhereString: String;
  begin
    Result := '(' + TFabricadoDatoFisicoDM._FabricadoID + '=' + IntToStr(_F.ID) + ')' ;
  end;
begin
  inherited Create(TFabricadoDatoFisico, TFabricadoDatoFisicoDM.CreateAll(False, WhereString, False));
end;

constructor TFabricadoDatoFisicoList.CreateByFabricadoAndMateriaPrima(_F: TFabricado; _MP: TMateriaPrima);
  Function WhereString: String;
  begin
    Result := '(' + TFabricadoDatoFisicoDM._FabricadoID + '=' + IntToStr(_F.ID) + ')' ;
    Result := Result + ' and (' + TFabricadoDatoFisicoDM._MateriaPrimaID + '=' + IntToStr(_MP.ID) + ')' ;
  end;
begin
  inherited Create(TFabricadoDatoFisico, TFabricadoDatoFisicoDM.CreateAll(False, WhereString, False));
end;

function TFabricadoDatoFisicoList.CreateNewObject: TPDObject;
begin
  result := TFabricadoDatoFisico.Create;
end;

function TFabricadoDatoFisicoList.FindMateriaPrima(_MP: TMateriaPrima): Boolean;
begin
  Result := False;
  if (Count = 0) then
    exit;
  First;
  While (Not Result) and (Not IsLast) do
    begin
      try
        Result := ( Self.Actual.MateriaPrimaID = _MP.ID );
      except
        Result := False;
      end;
      if not Result then
        next;
    end;
  if IsLast then
    First;
end;

constructor TFabricadoDatoFisicoList.CreateAll;
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFabricadoDatoFisico,TFabricadoDatoFisicoDM.CreateAll(False, WhereString, false, OrderByString ));
end;

 { TFormatoDeDireccion }
constructor TFormatoDeDireccion.Create;
begin
  inherited;
  DMObject   := Aplicacion.DMPRovider.GetGlobalDM(TFormatoDeDireccionDM);
  SaveSQLLog := True;
  FFormato   := Null;
end;
 function TFormatoDeDireccion.GetResourceLanguage: TResourceLanguage;
begin
  if not assigned(FResourceLanguage) then
    GetObject(TResourceLanguage, FResourceLanguage, FresourceLanguageID);
  Result := TResourceLanguage(FResourceLanguage);
end;

procedure TFormatoDeDireccion.SetResourceLanguageID(const Value: TObjectID);
begin
  if (Value <> FResourceLanguageID) and Assigned(FResourceLanguage) then
    FreeAndNil(FResourceLanguage);
  FResourceLanguageID := Value;
end;

{ TFormatoDeDireccionDM }
class function TFormatoDeDireccionDM.TableName : string;
begin
  Result := 'FormatosDeDireccion';
end;


class function TFormatoDeDireccionDM.ID_FieldName : string;
begin
  result := 'FormatoDeDireccionID';
end;

class function TFormatoDeDireccionDM.EsInactivo_FieldName : string;
begin
  result := _EsInactivo;
end;

procedure TFormatoDeDireccionDM.PopulateFields(PDObject: TPDObject);
begin
  with TFormatoDeDireccion(PDObject) do
    begin
      StringField[_Descripcion]         := Descripcion;
      BooleanField[_EsInactivo]         := EsInactivo;
      StringField[_Formato]             := Formato;
      IDField[_ResourceLanguageID]      := FResourceLanguageID;
      StringField[_TituloCalle]         := FTituloCalle;
      StringField[_TituloNumero]        := FTituloNumero;
      StringField[_TituloDepartamento]  := FTituloDepartamento;
      StringField[_TituloPiso]          := FTituloPiso;
      StringField[_TituloEdificio]      := FTituloEdificio;
    end;
end;

procedure TFormatoDeDireccionDM.PopulateObject(PDObject: TPDObject);
begin
  with TFormatoDeDireccion(PDObject) do
    begin
      FDescripcion        := StringField[_Descripcion];
      FEsInactivo         := BooleanField[_EsInactivo];
      FFormato            := StringField[_Formato];
      FResourceLanguageID := IDField[_ResourceLanguageID];
      FTituloCalle        := StringField[_TituloCalle];
      FTituloNumero       := StringField[_TituloNumero];
      FTituloDepartamento := StringField[_TituloDepartamento];
      FTituloPiso         := StringField[_TituloPiso];
      FTituloEdificio     := StringField[_TituloEdificio];
    end;
end;

 { TFormatoDeDireccionList }
function TFormatoDeDireccionList.GetActual : TFormatoDeDireccion;
begin
  result := TFormatoDeDireccion(CurrentObject);
end;

function TFormatoDeDireccionList.CreateNewObject: TPDObject;
begin
  result := TFormatoDeDireccion.Create;
end;

constructor TFormatoDeDireccionList.CreateAll( _SoloActivos: Boolean);
  Function WhereString: String;
  begin
    Result := '';           // condición de filtrado del query
  end;
  Function OrderByString: String;
  begin
    Result := '';           // campos separados por coma
  end;
begin
  inherited Create(TFormatoDeDireccion,TFormatoDeDireccionDM.CreateAll( False, WhereString, _SoloActivos, OrderByString ));
end;




end.
